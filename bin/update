#!/usr/bin/env python

import logging
import os.path
import subprocess
import sys
from optparse import OptionParser

mypath=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path[0:0] = [mypath]

from common import HandledException
from common import UpdatePins
from common import UpdateBuildout

buildout=os.path.dirname(mypath)
srcdir=os.path.join(buildout, "src")


def UpdatePloneNext():
    logging.info("Updating plonenext information")
    command=subprocess.Popen(["svn", "update", "--quiet", buildout],
                             stderr=subprocess.PIPE)
    (_,stderr)=command.communicate()
    if command.returncode!=0:
        logging.error("Subversion update failed")
        logging.error(stderr)
        raise HandledException()

    UpdatePins()



def UpdateCheckouts():
    sources=[os.path.join(srcdir, src) for src in os.listdir(srcdir)
                if not src.startswith(".")]
    sources=[source for source in sources if os.path.isdir(source)]

    for source in sources:
        logging.info("Updating %s" % os.path.basename(source))
        command=subprocess.Popen(["svn", "update", "--quiet", source],
                                 stderr=subprocess.PIPE)
        (_,stderr)=command.communicate()
        if command.returncode!=0:
            logging.error("Subversion update for %s failed" % source)
            logging.error(stderr)
            raise HandledException()



def append_const(option, opt_str, value, parser, dest, const):
    if not hasattr(parser.values, dest):
        setattr(parser.values, dest, set())
    getattr(parser.values, dest).add(const)


def main():
    parser=OptionParser(
            usage="bin/update <update action> [<update action>]",
            description="Update one or more aspects of this ploneout")

    parser.add_option("-c", "--checkout",
            help="Update checked out packages",
            action="callback", callback=append_const,
            callback_kwargs=dict(dest="actions", const="checkout"),)
    parser.add_option("-n", "--plonenext",
            help="Update plonenext data (--pins)",
            action="callback", callback=append_const,
            callback_kwargs=dict(dest="actions", const="plonenext"),)
    parser.add_option("-p", "--pins",
            help="Update version pins",
            action="callback", callback=append_const,
            callback_kwargs=dict(dest="actions", const="pins"),)
    parser.add_option("-a", "--all",
            help="Update everything",
            action="callback", callback=append_const,
            callback_kwargs=dict(dest="actions", const="all"),)

    (options, args)=parser.parse_args()
    if args:
        parser.print_help()
        return 0


    actions=getattr(options, "actions", ())
    if not actions:
        logging.info("No actions given")

    if "checkout" in actions or "all" in actions:
        UpdateCheckouts()

    if "plonenext" in actions or "all" in actions:
        UpdatePloneNext()

    if "pins" in actions and "plonenext" not in actions:
        UpdatePins()

    logging.info("Updating buildout")
    UpdateBuildout()


if __name__=="__main__":
    try:
        sys.exit(main())
    except HandledException:
        sys.exit(1)


