PLIP 9327: Unified interface for lists of content
=================================================

PLIP ticket: http://dev.plone.org/plone/ticket/9327

Review #1 by David Glick (dglick@gmail.com, davisagli on irc)

The PLIP was reviewed on Mac OS X 10.5.7 using python 2.6 and Firefox 3.5.2.


Review steps
------------

- Run buildout using the plip9327-contentlisting.cfg file.

- Visual review of the code in plone.app.contentlisting

- Run bin/instance test -s plone.app.contentlisting

- Benchmarked the p.a.contentlisting-based search results from PLIP #9352's
  plone.app.search in comparison to the old search.pt


Notes and observations
----------------------

* I like the basic concept and the simplicity of the interfaces and browser
  views included.

* It would be useful to see an example of how one of the existing folder
  listing templates would be rewritten to use this PLIP, even if actually
  switching Plone to that new implementation is out of scope for the initial
  merge.  This would make it easier to judge whether this package succeeds
  in simplifying things without making them harder to customize.

* Automatically doing a getObject and attribute lookup if the attribute is not
  found in the catalog brain is a neat trick, but I'm not sure how I feel about
  it as a default.  Our current approach makes it obvious that you're doing 
  something different, which makes it easier to set expectations about
  performance implications of waking up lots of objects.

* The FolderListing browser view does a permission check of 'Access inactive
  portal content' which is then not used anywhere.

* Why do CatalogContentListingObject's date-related accessors take a 'zone'
  parameter that is unused?

* It might be nice for CatalogContentListingObject's string representation to
  include the result of its getPath method, as a debugging aid.

* plone.app.contentlisting contains a set of doctests which pass, but test
  coverage of the browser and catalog modules is only about 60%.

* I tried to get a rough benchmark of plone.app.contentlisting vs. a more
  classic approach to listing content by benchmarking the new search results
  view in PLIP #9352, which is based on plone.app.contentlisting.
  Specifically, I did the following:
  
  * used collective.contentgenerator's Public Site profile to populate the site
    with 4000 items
  * used ab -n 100 to benchmark the old search results
    (/search?SearchableText=Britain&b_size=2000) and the new ones
    (/@@search?SearchableText=Britain&b_size=2000) -- the large batch size here
    is because the new results don't support batching yet...in my case the
    search for 'Britain' gave about 500 results.

  Performance results:
    * old search.pt: 6.32 requests/sec.
    * new search browser view: 1.09 requests/sec. Ouch.

  (Caveat: I haven't done detailed profiling to confirm that p.a.contentlisting
  is the reason for the decrease in performance here.  But it seems plausible
  to me, and I think it is the PLIP authors' responsibility to prove me wrong.)


Conclusion
----------

This looks promising, but my FWT vote is -1 unless the performance can be
improved.  It's unfortunate that this also has implications for the search
results and collection PLIPs, which have been based on
plone.app.contentlisting.
