TinyMCE plip review notes
-------------------------

(in progress -- I have more notes which accidentally got left on my work computer
and which will get added tomorrow morning)

- Overall the code is pleasantly concise and readable, and follows modern
  Zope 3 approaches.

- Products.TinyMCE depends on z3c.json.  Plone already ships with simplejson.
  It would be nice to avoid adding an unneeded dependency; is there a reason
  simplejson is not adequate?

- kupu has suffered somewhat since very few people have any idea how to
  maintain and compile its XML.  To avoid a similar situation with TinyMCE,
  I would like to see a document describing the process of updating
  Products.TinyMCE for a new tinymce release, at least at a high level.

- The package contains a number of lines of Python ending with semicolons.  WTF?

- getBreadcrums is misspelled; should be getBreadcrumbs

- Products.TinyMCE.adapters.JSONDetails - the code for getting anchors should
  probably use the primary field, not assume the field is called 'text'

- Why does IJSONFolderListing need a getInfoFromBrain method, when all the
  needed info is already available directly from the brain?

- Products.TinyMCE.adapters.Upload - the upload function here doesn't do a very
  good job at separation of concerns -- it does a lot and would be hard to
  replace if different functionality were required, such as creating non-AT
  content.  One thing that would help a bit is adapting the new item to the dublin
  core interface from CMF before setting its title and description, instead
  of trying setTitle and setDescription before falling back to a simple
  attribute.

- Overall though the product does a pretty good job of abstracting into
  adapters the bits of functionality that are AT-specific.  One exception is
  the handling of the link by uid feature, but I'm not sure how that could
  be implemented without having one sort of uid for all content.

- The package uses KSS only for the initialization of the editor during inline
  editing.  Ideally this would not require KSS and at some point we'll need to
  make it not be, but it's not a regression from kupu.

- Uninstallation code is included.

- i18n for a large number of locales is included.

- The code in exportimport.py includes a dictionary of attributes that appears
  to duplicate much of the schema information that is included in interfaces/
  utility.py ... is it necessary to have both, and keep the default values
  in synch to have consistency between GS and TTW configuration?

- TinyMCE achieves its captioning and link by UID features by a mechanism similar
  to kupu (adding a custom mimetype to the text/x-safe-html output transform policy,
  and doing transformations during conversion to that mimetype).  At the moment
  its behavior is very very close to kupu's, but if kupu's behavior diverges,
  that could cause problems in the future (since TinyMCE's transform replaces
  kupu's, afaict.)  This is already a source of confusion that probably needs
  to be addressed during the merge, since TinyMCE's transform is based on settings
  in the TinyMCE utility, but also applies to content edited with kupu (in a site
  where both editors are in use), meaning there are some settings in the kupu
  configlet which no longer have any effect anywhere.

- It would be nice if the captioning transform used a template to render the
  captioned image (as kupu does), instead of hardcoding HTML into the Python.

- Test coverage is patchy and I would like to see it improved.


kupu functionality duplicated in TinyMCE:


additional functionality in TinyMCE over kupu:


Conclusion
----------

Switching visual editors goes right to the heart of editing content online
for most users, and so I would guess we'll have to iron out some wrinkles
if this PLIP is accepted and merged.  However, I think it's a strategic
move, given the current positions of kupu and TinyMCE, and I think the work
and commitment to maintaining this package demonstrated so far bodes well.

As described in the notes above, there are a number of things in the code
that should probably be cleaned up.  However, I don't think any of them are
blockers for inclusion in 4.0, with the exception of making sure coexisting
with kupu doesn't get too confusing.

My FWT vote: +1.