PLIP 9285: Show blocked portlets in management interface
=================================================================

This plip is ready for merge.

PLIP ticket: https://dev.plone.org/plone/ticket/9285

Answers to review questions are at the bottom.

To do
-----

- Didn't branch CMFPlone for this PLIP, so when merging, some CSS nees to be
  added to CMFPlone/skins/plone_styles/portlets.css.dtml. Something like:

    .blockedPortlet .portletHeader {
        border-color: &dtml-borderWidth; &dtml-borderStyle; &dtml-discreetColor;;
    }

    .blockedPortlet .portletBlockedMessage {
        color: &dtml-discreetColor;;
    }

  At the moment, to make it easier to review, an existing class 
  ('inheritedPortlet') and a style attribute are being used to distinguish 
  blocked portlets. Class 'hiddenStructure' is also used to hide the 
  accessibility message. Both must be removed after merging and better
  style should be added in CMFPlone.

- More unit tests. Add new unit tests for view EditPortletManagerRenderer.

- For global and inherited portlets, the edit link should only be shown if
  the user has permission to manage portlets on that specific context.
  Though, this will only be a problem if the user has manager permissions
  only in part of the site.

Summary of changes
------------------

- Changed the contextual portlet management screen to show all portlets 
  from global categories, identifying the portlets blocked categories.

- Changed the position of inherited portlets to be shown after the
  respective select box, making clear to which category they belong.

- Updated the portlet management description message according to the changes.

Needed documentation changes
----------------------------

- The Plone User Manual needs to be updated, more specifically the "Portlet
  Management" section:
  http://plone.org/documentation/manual/plone-3-user-manual/portlet-management/

Backwards compatibility
-----------------------

This PLIP includes essentially presentational improvements. The changes made 
aren't expected to break existing functionality in any way.


Credits
-------

Ricardo Alves


Review
------

- I love that you can see what (content-type portlets, for instance) you're
  blocking on the Manage Portlets page.

- I love the new placement of portlets after their respective pop-up menus. Love
  it, love it, love it!

- A bike shed comment, perhaps, but the background-color change doesn't scream
  out "blocked!" to me. What would really drive it home for me is printing the
  portlet title in grey and using a dashed (grey?) border for the outline--a
  "ghostly" portlet, if you will.

    A: I changed it a little bit. I hope it now makes it more clear that the
       portlet is blocked. Anyways, after merge this changes must be
       addressed in the scope of the UI and theme changes.

- This is outside the scope of your PLIP, but I'll mention it for posterity: it
  would be nice if the Block/Unblock menu's changes were AJAXified. Right now,
  some of the stuff on the page requires hitting Save, and some doesn't, and it
  isn't too clear which.

And now for the code...

- Could lines 260-263 at
  https://dev.plone.org/plone/browser/plone.app.portlets/branches/plip9285-show-blocked-portlets/plone/app/portlets/browser/editmanager.py?rev=29016#L260 be
  replaced with simply IPortletContext(self.context), or am I missing something?

    A: Here I'm using the same pattern used in other places of plone.portlets
       code. AFAIK, that's basically because the context can already provide 
       IPortletContext.

- You could save some time in the interpreter by saying something like this at
  https://dev.plone.org/plone/browser/plone.app.portlets/branches/plip9285-show-  blocked-portlets/plone/app/portlets/browser/editmanager.py?rev=29016#L274
  instead of the for loop:

    assignments.extend(mapping.get(key, {}).values())

    A: Yes, done.

- I'd like to see docstrings for the new methods (like the ones in the view) to
  make them screechingly obvious.

    A: Added docstrings.

All in all, a great addition! Nice work!
