From f7fd9a117e61b35ad197a066cd3aa66e30bb6ff6 Mon Sep 17 00:00:00 2001
From: Johannes Raggam <raggam-nl@adm.at>
Date: Fri, 29 Oct 2010 18:43:08 +0100
Subject: [PATCH 1/2] Removed event and calendar portlets and moved it into plone.app.event

---
 plone/app/portlets/portlets/calendar.pt           |  102 ---------
 plone/app/portlets/portlets/calendar.py           |  236 ---------------------
 plone/app/portlets/portlets/configure.zcml        |   17 --
 plone/app/portlets/portlets/events.pt             |   88 --------
 plone/app/portlets/portlets/events.py             |  120 -----------
 plone/app/portlets/tests/test_calendar_portlet.py |  109 ----------
 plone/app/portlets/tests/test_events_portlet.py   |  203 ------------------
 plone/app/portlets/utils.py                       |    4 +-
 8 files changed, 2 insertions(+), 877 deletions(-)
 delete mode 100644 plone/app/portlets/portlets/calendar.pt
 delete mode 100755 plone/app/portlets/portlets/calendar.py
 delete mode 100644 plone/app/portlets/portlets/events.pt
 delete mode 100755 plone/app/portlets/portlets/events.py
 delete mode 100755 plone/app/portlets/tests/test_calendar_portlet.py
 delete mode 100755 plone/app/portlets/tests/test_events_portlet.py

diff --git a/plone/app/portlets/portlets/calendar.pt b/plone/app/portlets/portlets/calendar.pt
deleted file mode 100644
index 2f952e7..0000000
--- a/plone/app/portlets/portlets/calendar.pt
+++ /dev/null
@@ -1,102 +0,0 @@
-<html xmlns="http://www.w3.org/1999/xhtml"
-      xmlns:tal="http://xml.zope.org/namespaces/tal"
-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
-      tal:omit-tag="">
-<dl class="portlet portletCalendar"
-    i18n:domain="plone"
-    tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;
-                query_string view/getQueryString;
-                url_quote_plus nocall:view/url_quote_plus;
-                showPrevMonth view/showPrevMonth;
-                showNextMonth view/showNextMonth;
-                year view/year;">
-
-    <dt class="portletHeader">
-        <span class="portletTopLeft"></span>
-        <a href="#" rel="nofollow"
-           title="Previous month"
-           tal:define="prevMonthMonth view/prevMonthMonth;
-                       prevMonthYear view/prevMonthYear"
-           tal:attributes="id python:showPrevMonth and 'calendar-previous' or '';
-                           href python:'%s?%smonth:int=%d&amp;year:int=%d&amp;orig_query=%s' % (request['ACTUAL_URL'], query_string, prevMonthMonth, prevMonthYear, url_quote_plus(query_string));
-                           class string:kssCalendarChange kssattr-year-${prevMonthYear} kssattr-month-${prevMonthMonth} calendarPrevious;"
-           tal:condition="showPrevMonth"
-           i18n:attributes="title title_previous_month;">&laquo;</a>
-
-        <span i18n:translate="" tal:omit-tag="">
-            <span i18n:name="monthname" i18n:translate=""
-                  tal:content="view/monthName"
-                  tal:omit-tag="">monthname</span>
-            <span i18n:name="year" i18n:translate=""
-                  tal:content="year"
-                  tal:omit-tag="">year</span>
-        </span>
-
-        <a href="#" rel="nofollow"
-           title="Next month"
-           tal:define="nextMonthMonth view/nextMonthMonth;
-                       nextMonthYear view/nextMonthYear"
-           tal:attributes="id python:showNextMonth and 'calendar-next' or '';
-                           href python:'%s?%smonth:int=%d&amp;year:int=%d&amp;orig_query=%s' % (request['ACTUAL_URL'], query_string, nextMonthMonth, nextMonthYear, url_quote_plus(query_string));
-                           class string:kssCalendarChange kssattr-year-${nextMonthYear} kssattr-month-${nextMonthMonth} calendarNext;"
-           tal:condition="showNextMonth"
-           i18n:attributes="title title_next_month;">&raquo;</a>
-        <span class="portletTopRight"></span>
-    </dt>
-
-    <dd class="portletItem">
-        <table class="ploneCalendar"
-               summary="Calendar"
-               i18n:domain="plone"
-               i18n:attributes="summary summary_calendar;">
-            <caption class="hiddenStructure"
-                     tal:content="view/monthName">Month name</caption>
-            <thead>
-                <tr class="weekdays"
-                    ><tal:data tal:repeat="weekday view/getWeekdays"
-                        ><th scope="col"
-                             i18n:translate=""
-                             tal:content="weekday">Su</th
-                    ></tal:data>
-                </tr>
-            </thead>
-            <tbody>
-                <tr tal:repeat="week view/getEventsForCalendar"
-                    ><tal:block repeat="day week"
-                        ><tal:day define="daynumber day/day;"
-                            ><tal:isday condition="daynumber"
-                                ><tal:block define="day_event day/event;
-                                                    is_today day/is_today"
-                                    ><td class="event"
-                                        tal:condition="day_event"
-                                        tal:attributes="class python:is_today and 'todayevent' or 'event'"
-                                       ><strong><a href=""
-                                           tal:attributes="href string:${navigation_root_url}/search?${view/getReviewStateString}start.query:record:list:date=${day/date_string}+23%3A59%3A59&amp;start.range:record=max&amp;end.query:record:list:date=${day/date_string}+00%3A00%3A00&amp;end.range:record=min;
-                                                           title day/eventstring;"
-                                           tal:content="daynumber">
-                                           31
-                                       </a
-                                    ></strong></td
-                                    ><tal:notdayevent tal:condition="not: day_event"
-                                        ><td tal:condition="python:is_today"
-                                             class="todaynoevent"><strong
-                                             tal:content="daynumber">31</strong></td
-                                        ><td tal:condition="python:not is_today"
-                                             tal:content="daynumber">31</td
-                                    ></tal:notdayevent
-                                ></tal:block
-                            ></tal:isday
-                            ><tal:notisday condition="not: daynumber"
-                                ><td></td
-                            ></tal:notisday
-                        ></tal:day
-                    ></tal:block>
-                </tr>
-            </tbody>
-
-        </table>
-        <span class="portletBottomLeft"></span>
-        <span class="portletBottomRight"></span>
-    </dd>
-</dl>
-</html>
diff --git a/plone/app/portlets/portlets/calendar.py b/plone/app/portlets/portlets/calendar.py
deleted file mode 100755
index 75d5b5f..0000000
--- a/plone/app/portlets/portlets/calendar.py
+++ /dev/null
@@ -1,236 +0,0 @@
-from StringIO import StringIO
-from time import localtime
-
-from plone.memoize import ram
-from plone.memoize.compress import xhtml_compress
-from plone.portlets.interfaces import IPortletDataProvider
-
-from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
-from zope.component import getMultiAdapter
-
-from Acquisition import aq_inner
-from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import safe_unicode
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.PythonScripts.standard import url_quote_plus
-
-from plone.app.portlets import PloneMessageFactory as _
-from plone.app.portlets import cache
-from plone.app.portlets.portlets import base
-
-PLMF = MessageFactory('plonelocales')
-
-
-class ICalendarPortlet(IPortletDataProvider):
-    """A portlet displaying a calendar
-    """
-
-
-class Assignment(base.Assignment):
-    implements(ICalendarPortlet)
-
-    title = _(u'Calendar')
-
-
-def _render_cachekey(fun, self):
-    context = aq_inner(self.context)
-    if not self.updated:
-        self.update()
-
-    if self.calendar.getUseSession():
-        raise ram.DontCache()
-    else:
-        portal_state = getMultiAdapter((context, self.request), name=u'plone_portal_state')
-        key = StringIO()
-        print >> key, portal_state.navigation_root_url()
-        print >> key, cache.get_language(context, self.request)
-        print >> key, self.calendar.getFirstWeekDay()
-
-        year, month = self.getYearAndMonthToDisplay()
-        print >> key, year
-        print >> key, month
-
-        navigation_root_path = portal_state.navigation_root_path()
-        start = DateTime('%s/%s/1' % (year, month))
-        end = DateTime('%s/%s/1 23:59:59' % self.getNextMonth(year, month)) - 1
-
-        def add(brain):
-            key.write(brain.getPath())
-            key.write('\n')
-            key.write(brain.modified)
-            key.write('\n\n')
-
-        catalog = getToolByName(context, 'portal_catalog')
-        path = navigation_root_path
-        brains = catalog(
-            portal_type=self.calendar.getCalendarTypes(),
-            review_state=self.calendar.getCalendarStates(),
-            start={'query': end, 'range': 'max'},
-            end={'query': start, 'range': 'min'},
-            path=path)
-
-        for brain in brains:
-            add(brain)
-
-        return key.getvalue()
-
-
-class Renderer(base.Renderer):
-
-    _template = ViewPageTemplateFile('calendar.pt')
-    updated = False
-
-    def __init__(self, context, request, view, manager, data):
-        base.Renderer.__init__(self, context, request, view, manager, data)
-        self.updated = False
-
-    def update(self):
-        if self.updated:
-            return
-        self.updated = True
-
-        context = aq_inner(self.context)
-        self.calendar = getToolByName(context, 'portal_calendar')
-        self._ts = getToolByName(context, 'translation_service')
-        self.url_quote_plus = url_quote_plus
-
-        self.now = localtime()
-        self.yearmonth = yearmonth = self.getYearAndMonthToDisplay()
-        self.year = year = yearmonth[0]
-        self.month = month = yearmonth[1]
-
-        self.showPrevMonth = yearmonth > (self.now[0]-1, self.now[1])
-        self.showNextMonth = yearmonth < (self.now[0]+1, self.now[1])
-
-        self.prevMonthYear, self.prevMonthMonth = self.getPreviousMonth(year, month)
-        self.nextMonthYear, self.nextMonthMonth = self.getNextMonth(year, month)
-
-        self.monthName = PLMF(self._ts.month_msgid(month),
-                              default=self._ts.month_english(month))
-
-    @ram.cache(_render_cachekey)
-    def render(self):
-        return xhtml_compress(self._template())
-
-    def getEventsForCalendar(self):
-        context = aq_inner(self.context)
-        year = self.year
-        month = self.month
-        portal_state = getMultiAdapter((self.context, self.request), name=u'plone_portal_state')
-        navigation_root_path = portal_state.navigation_root_path()
-        weeks = self.calendar.getEventsForCalendar(month, year, path=navigation_root_path)
-        for week in weeks:
-            for day in week:
-                daynumber = day['day']
-                if daynumber == 0:
-                    continue
-                day['is_today'] = self.isToday(daynumber)
-                if day['event']:
-                    cur_date = DateTime(year, month, daynumber)
-                    localized_date = [self._ts.ulocalized_time(cur_date, context=context, request=self.request)]
-                    day['eventstring'] = '\n'.join(localized_date+[' %s' % self.getEventString(e) for e in day['eventslist']])
-                    day['date_string'] = '%s-%s-%s' % (year, month, daynumber)
-
-        return weeks
-
-    def getEventString(self, event):
-        start = event['start'] and ':'.join(event['start'].split(':')[:2]) or ''
-        end = event['end'] and ':'.join(event['end'].split(':')[:2]) or ''
-        title = safe_unicode(event['title']) or u'event'
-
-        if start and end:
-            eventstring = "%s-%s %s" % (start, end, title)
-        elif start: # can assume not event['end']
-            eventstring = "%s - %s" % (start, title)
-        elif event['end']: # can assume not event['start']
-            eventstring = "%s - %s" % (title, end)
-        else: # can assume not event['start'] and not event['end']
-            eventstring = title
-
-        return eventstring
-
-    def getYearAndMonthToDisplay(self):
-        session = None
-        request = self.request
-
-        # First priority goes to the data in the REQUEST
-        year = request.get('year', None)
-        month = request.get('month', None)
-
-        # Next get the data from the SESSION
-        if self.calendar.getUseSession():
-            session = request.get('SESSION', None)
-            if session:
-                if not year:
-                    year = session.get('calendar_year', None)
-                if not month:
-                    month = session.get('calendar_month', None)
-
-        # Last resort to today
-        if not year:
-            year = self.now[0]
-        if not month:
-            month = self.now[1]
-
-        year, month = int(year), int(month)
-
-        # Store the results in the session for next time
-        if session:
-            session.set('calendar_year', year)
-            session.set('calendar_month', month)
-
-        # Finally return the results
-        return year, month
-
-    def getPreviousMonth(self, year, month):
-        if month==0 or month==1:
-            month, year = 12, year - 1
-        else:
-            month-=1
-        return (year, month)
-
-    def getNextMonth(self, year, month):
-        if month==12:
-            month, year = 1, year + 1
-        else:
-            month+=1
-        return (year, month)
-
-    def getWeekdays(self):
-        """Returns a list of Messages for the weekday names."""
-        weekdays = []
-        # list of ordered weekdays as numbers
-        for day in self.calendar.getDayNumbers():
-            weekdays.append(PLMF(self._ts.day_msgid(day, format='s'),
-                                 default=self._ts.weekday_english(day, format='a')))
-
-        return weekdays
-
-    def isToday(self, day):
-        """Returns True if the given day and the current month and year equals
-           today, otherwise False.
-        """
-        return self.now[2]==day and self.now[1]==self.month and \
-               self.now[0]==self.year
-
-    def getReviewStateString(self):
-        states = self.calendar.getCalendarStates()
-        return ''.join(map(lambda x : 'review_state=%s&amp;' % self.url_quote_plus(x), states))
-
-    def getQueryString(self):
-        request = self.request
-        query_string = request.get('orig_query',
-                                   request.get('QUERY_STRING', None))
-        if len(query_string) == 0:
-            query_string = ''
-        else:
-            query_string = '%s&amp;' % query_string
-        return query_string
-
-
-class AddForm(base.NullAddForm):
-
-    def create(self):
-        return Assignment()
diff --git a/plone/app/portlets/portlets/configure.zcml b/plone/app/portlets/portlets/configure.zcml
index f2fa2f4..a766307 100644
--- a/plone/app/portlets/portlets/configure.zcml
+++ b/plone/app/portlets/portlets/configure.zcml
@@ -3,14 +3,6 @@
            xmlns:plone="http://namespaces.plone.org/plone">
 
     <plone:portlet
-        name="portlets.Calendar"
-        interface=".calendar.ICalendarPortlet"
-        assignment=".calendar.Assignment"
-        renderer=".calendar.Renderer"
-        addview=".calendar.AddForm"
-        />
-
-    <plone:portlet
         name="portlets.Classic"
         interface=".classic.IClassicPortlet"
         assignment=".classic.Assignment"
@@ -29,15 +21,6 @@
         />
 
     <plone:portlet
-        name="portlets.Events"
-        interface=".events.IEventsPortlet"
-        assignment=".events.Assignment"
-        renderer=".events.Renderer"
-        addview=".events.AddForm"
-        editview=".events.EditForm"
-        />
-
-    <plone:portlet
         name="portlets.Login"
         interface=".login.ILoginPortlet"
         assignment=".login.Assignment"
diff --git a/plone/app/portlets/portlets/events.pt b/plone/app/portlets/portlets/events.pt
deleted file mode 100644
index 61ea100..0000000
--- a/plone/app/portlets/portlets/events.pt
+++ /dev/null
@@ -1,88 +0,0 @@
-<html xmlns="http://www.w3.org/1999/xhtml"
-      xmlns:tal="http://xml.zope.org/namespaces/tal"
-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
-      tal:omit-tag="">
-<dl class="portlet portletEvents"
-    i18n:domain="plone">
-
-    <dt class="portletHeader">
-        <span class="portletTopLeft"></span>
-        <a href=""
-           tal:attributes="href view/all_events_link"
-           class="tile"
-           i18n:translate="box_events">
-            Upcoming Events
-        </a>
-        <span class="portletTopRight"></span>
-    </dt>
-
-    <tal:events tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;
-                            DateTime python:modules['DateTime'].DateTime"
-                tal:repeat="obj view/published_events">
-    <dd class="portletItem"
-        tal:define="oddrow repeat/obj/odd;
-                    plone_view context/@@plone;
-                    getIcon nocall:plone_view/getIcon;
-                    item_icon python:getIcon(obj);
-                    item_startdate python:toLocalizedTime(obj.start);
-                    item_starttime python:toLocalizedTime(obj.start,time_only=1);
-                    item_enddate python:toLocalizedTime(obj.end);
-                    item_endtime python:toLocalizedTime(obj.end,time_only=1);
-                    item_sametime python: obj.start == obj.end;
-                    item_samedate python: obj.end - obj.start &lt; 1"
-        tal:attributes="class python:oddrow and 'portletItem even' or 'portletItem odd'">
-        <a href="#"
-           class="tile"
-           tal:attributes="href obj/getURL;
-                           title obj/Description">
-            <img tal:replace="structure item_icon/html_tag" />
-            <span tal:replace="obj/pretty_title_or_id">
-             Some Event
-            </span>
-        </a>    
-            <span class="portletItemDetails">
-                <span
-                 tal:condition="python: item_sametime"
-                 tal:content="string:${item_startdate} ${item_starttime}">
-                May 5
-                </span>
-                <span
-                 tal:condition="python: item_samedate and not item_sametime"
-                 tal:content="string:${item_startdate} ${item_starttime} - ${item_endtime}">
-                May 5
-                </span>
-                <span
-                 tal:condition="python: not item_sametime and not item_samedate"
-                 tal:content="string:${item_startdate} - ${item_enddate}">
-                May 5
-                </span>
-                <span tal:condition="obj/location"> &mdash;
-                    <tal:location content="obj/location">Location</tal:location>
-                </span>
-            </span>
-    </dd>
-    </tal:events>
-
-    <dd class="portletFooter"
-           tal:condition="view/prev_events_link">
-        <a href=""
-           tal:attributes="href view/prev_events_link"
-           class="tile">
-            <span i18n:translate="box_previous_events">
-                Previous events&hellip;
-            </span>
-        </a>
-    </dd>
-
-    <dd class="portletFooter">
-        <a href=""
-           class="tile"
-           tal:attributes="href view/all_events_link"
-           i18n:translate="box_upcoming_events">
-                Upcoming events&hellip;
-        </a>
-        <span class="portletBottomLeft"></span>
-        <span class="portletBottomRight"></span>
-    </dd>
-</dl>
-</html>
diff --git a/plone/app/portlets/portlets/events.py b/plone/app/portlets/portlets/events.py
deleted file mode 100755
index a219ed7..0000000
--- a/plone/app/portlets/portlets/events.py
+++ /dev/null
@@ -1,120 +0,0 @@
-from plone.memoize.instance import memoize
-from plone.memoize import ram
-from plone.memoize.compress import xhtml_compress
-from plone.portlets.interfaces import IPortletDataProvider
-from plone.app.layout.navigation.root import getNavigationRootObject
-from zope.component import getMultiAdapter
-from zope.formlib import form
-from zope.interface import implements
-from zope import schema
-
-from Acquisition import aq_inner
-from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-from plone.app.portlets import PloneMessageFactory as _
-from plone.app.portlets.cache import render_cachekey
-from plone.app.portlets.portlets import base
-
-
-class IEventsPortlet(IPortletDataProvider):
-
-    count = schema.Int(title=_(u'Number of items to display'),
-                       description=_(u'How many items to list.'),
-                       required=True,
-                       default=5)
-
-    state = schema.Tuple(title=_(u"Workflow state"),
-                         description=_(u"Items in which workflow state to show."),
-                         default=('published', ),
-                         required=True,
-                         value_type=schema.Choice(
-                             vocabulary="plone.app.vocabularies.WorkflowStates")
-                         )
-
-class Assignment(base.Assignment):
-    implements(IEventsPortlet)
-
-    def __init__(self, count=5, state=('published', )):
-        self.count = count
-        self.state = state
-
-    @property
-    def title(self):
-        return _(u"Events")
-
-class Renderer(base.Renderer):
-
-    _template = ViewPageTemplateFile('events.pt')
-
-    def __init__(self, *args):
-        base.Renderer.__init__(self, *args)
-
-        portal_state = getMultiAdapter((self.context, self.request), name=u'plone_portal_state')
-        self.navigation_root_url = portal_state.navigation_root_url()
-        self.portal = portal_state.portal()
-        self.navigation_root_path = portal_state.navigation_root_path()
-        self.navigation_root_object = getNavigationRootObject(self.context, self.portal)
-
-    @ram.cache(render_cachekey)
-    def render(self):
-        return xhtml_compress(self._template())
-
-    @property
-    def available(self):
-        return len(self._data())
-
-    def published_events(self):
-        return self._data()
-
-    @memoize
-    def have_events_folder(self):
-        return 'events' in self.navigation_root_object.objectIds()
-
-    def all_events_link(self):
-        navigation_root_url = self.navigation_root_url
-        if self.have_events_folder():
-            return '%s/events' % navigation_root_url
-        else:
-            return '%s/events_listing' % navigation_root_url
-
-    def prev_events_link(self):
-        # take care dont use self.portal here since support
-        # of INavigationRoot features likely will breake #9246 #9668
-        if (self.have_events_folder() and
-            'aggregator' in self.navigation_root_object['events'].objectIds() and
-            'previous' in self.navigation_root_object['events']['aggregator'].objectIds()):
-            return '%s/events/aggregator/previous' % self.navigation_root_url
-        elif (self.have_events_folder() and
-            'previous' in self.navigation_root_object['events'].objectIds()):
-            return '%s/events/previous' % self.navigation_root_url
-        return None
-
-    @memoize
-    def _data(self):
-        context = aq_inner(self.context)
-        catalog = getToolByName(context, 'portal_catalog')
-        limit = self.data.count
-        state = self.data.state
-        path = self.navigation_root_path
-        return catalog(portal_type='Event',
-                       review_state=state,
-                       end={'query': DateTime(),
-                            'range': 'min'},
-                       path=path,
-                       sort_on='start',
-                       sort_limit=limit)[:limit]
-
-class AddForm(base.AddForm):
-    form_fields = form.Fields(IEventsPortlet)
-    label = _(u"Add Events Portlet")
-    description = _(u"This portlet lists upcoming Events.")
-
-    def create(self, data):
-        return Assignment(count=data.get('count', 5), state=data.get('state', ('published',)))
-
-class EditForm(base.EditForm):
-    form_fields = form.Fields(IEventsPortlet)
-    label = _(u"Edit Events Portlet")
-    description = _(u"This portlet lists upcoming Events.")
diff --git a/plone/app/portlets/tests/test_calendar_portlet.py b/plone/app/portlets/tests/test_calendar_portlet.py
deleted file mode 100755
index 7d1cad8..0000000
--- a/plone/app/portlets/tests/test_calendar_portlet.py
+++ /dev/null
@@ -1,109 +0,0 @@
-from zope.component import getUtility, getMultiAdapter
-from zope.site.hooks import setHooks, setSite
-
-from Products.GenericSetup.utils import _getDottedName
-
-from plone.portlets.interfaces import IPortletType
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import IPortletAssignment
-from plone.portlets.interfaces import IPortletDataProvider
-from plone.portlets.interfaces import IPortletRenderer
-
-from DateTime import DateTime
-from plone.app.portlets.portlets import calendar
-from plone.app.portlets.tests.base import PortletsTestCase
-
-
-class TestPortlet(PortletsTestCase):
-
-    def afterSetUp(self):
-        setHooks()
-        setSite(self.portal)
-        self.setRoles(('Manager',))
-
-    def testPortletTypeRegistered(self):
-        portlet = getUtility(IPortletType, name='portlets.Calendar')
-        self.assertEquals(portlet.addview, 'portlets.Calendar')
-
-    def testRegisteredInterfaces(self):
-        portlet = getUtility(IPortletType, name='portlets.Calendar')
-        registered_interfaces = [_getDottedName(i) for i in portlet.for_]
-        registered_interfaces.sort()
-        self.assertEquals(['plone.app.portlets.interfaces.IColumn',
-          'plone.app.portlets.interfaces.IDashboard'],
-          registered_interfaces)
-
-    def testInterfaces(self):
-        portlet = calendar.Assignment()
-        self.failUnless(IPortletAssignment.providedBy(portlet))
-        self.failUnless(IPortletDataProvider.providedBy(portlet.data))
-
-    def testInvokeAddview(self):
-        portlet = getUtility(IPortletType, name='portlets.Calendar')
-        mapping = self.portal.restrictedTraverse('++contextportlets++plone.leftcolumn')
-        for m in mapping.keys():
-            del mapping[m]
-        addview = mapping.restrictedTraverse('+/' + portlet.addview)
-
-        # This is a NullAddForm - calling it does the work
-        addview()
-
-        self.assertEquals(len(mapping), 1)
-        self.failUnless(isinstance(mapping.values()[0], calendar.Assignment))
-
-    def testRenderer(self):
-        context = self.folder
-        request = self.folder.REQUEST
-        view = self.folder.restrictedTraverse('@@plone')
-        manager = getUtility(IPortletManager, name='plone.rightcolumn', context=self.portal)
-        assignment = calendar.Assignment()
-
-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)
-        self.failUnless(isinstance(renderer, calendar.Renderer))
-
-
-class TestRenderer(PortletsTestCase):
-
-    def afterSetUp(self):
-        setHooks()
-        setSite(self.portal)
-
-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):
-        context = context or self.folder
-        request = request or self.folder.REQUEST
-        view = view or self.folder.restrictedTraverse('@@plone')
-        manager = manager or getUtility(IPortletManager, name='plone.rightcolumn', context=self.portal)
-        assignment = assignment or calendar.Assignment()
-
-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)
-
-    def test_event_created_last_day_of_month_invalidate_cache(self):
-        # First render the calendar portlet when there's no events
-        r = self.renderer(assignment=calendar.Assignment())
-        html = r.render()
-
-        # Now let's add a new event in the last day of the current month
-        year, month = r.getYearAndMonthToDisplay()
-        year, month = r.getNextMonth(year, month)
-        last_day_month = DateTime('%s/%s/1' % (year, month)) - 1
-        hour = 1 / 24.0
-        self.setRoles(('Manager',))
-        # Event starts at 23:00 and ends at 23:30
-        self.portal.invokeFactory('Event', 'e1',
-                                  startDate=last_day_month + 23*hour,
-                                  endDate=last_day_month + 23.5*hour)
-
-        # Make sure to publish this event
-        self.portal.portal_workflow.doActionFor(self.portal.e1, 'publish')
-
-        # Try to render the calendar portlet again, it must be different now
-        r = self.renderer(assignment=calendar.Assignment())
-        self.assertNotEqual(html, r.render(), "Cache key wasn't invalidated")
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestPortlet))
-    suite.addTest(makeSuite(TestRenderer))
-    return suite
diff --git a/plone/app/portlets/tests/test_events_portlet.py b/plone/app/portlets/tests/test_events_portlet.py
deleted file mode 100755
index 128c5d1..0000000
--- a/plone/app/portlets/tests/test_events_portlet.py
+++ /dev/null
@@ -1,203 +0,0 @@
-from zope.component import getUtility, getMultiAdapter
-from zope.site.hooks import setHooks, setSite
-from zope.interface import directlyProvides
-
-from Products.GenericSetup.utils import _getDottedName
-
-from plone.portlets.interfaces import IPortletType
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import IPortletAssignment
-from plone.portlets.interfaces import IPortletDataProvider
-from plone.portlets.interfaces import IPortletRenderer
-
-from plone.app.portlets.portlets import events
-from plone.app.portlets.storage import PortletAssignmentMapping
-
-from plone.app.portlets.tests.base import PortletsTestCase
-
-from plone.app.layout.navigation.interfaces import INavigationRoot
-
-class TestPortlet(PortletsTestCase):
-
-    def afterSetUp(self):
-        setHooks()
-        setSite(self.portal)
-        self.setRoles(('Manager',))
-
-    def testPortletTypeRegistered(self):
-        portlet = getUtility(IPortletType, name='portlets.Events')
-        self.assertEquals(portlet.addview, 'portlets.Events')
-
-    def testRegisteredInterfaces(self):
-        portlet = getUtility(IPortletType, name='portlets.Events')
-        registered_interfaces = [_getDottedName(i) for i in portlet.for_]
-        registered_interfaces.sort()
-        self.assertEquals(['plone.app.portlets.interfaces.IColumn',
-          'plone.app.portlets.interfaces.IDashboard'],
-          registered_interfaces)
-
-    def testInterfaces(self):
-        portlet = events.Assignment()
-        self.failUnless(IPortletAssignment.providedBy(portlet))
-        self.failUnless(IPortletDataProvider.providedBy(portlet.data))
-
-    def testInvokeAddview(self):
-        portlet = getUtility(IPortletType, name='portlets.Events')
-        mapping = self.portal.restrictedTraverse('++contextportlets++plone.leftcolumn')
-        for m in mapping.keys():
-            del mapping[m]
-        addview = mapping.restrictedTraverse('+/' + portlet.addview)
-
-        addview.createAndAdd(data={})
-
-        self.assertEquals(len(mapping), 1)
-        self.failUnless(isinstance(mapping.values()[0], events.Assignment))
-
-    def testInvokeEditView(self):
-        mapping = PortletAssignmentMapping()
-        request = self.folder.REQUEST
-
-        mapping['foo'] = events.Assignment(count=5)
-        editview = getMultiAdapter((mapping['foo'], request), name='edit')
-        self.failUnless(isinstance(editview, events.EditForm))
-
-    def testRenderer(self):
-        context = self.folder
-        request = self.folder.REQUEST
-        view = self.folder.restrictedTraverse('@@plone')
-        manager = getUtility(IPortletManager, name='plone.leftcolumn', context=self.portal)
-        assignment = events.Assignment(count=5)
-
-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)
-        self.failUnless(isinstance(renderer, events.Renderer))
-
-class TestRenderer(PortletsTestCase):
-
-    def afterSetUp(self):
-        setHooks()
-        setSite(self.portal)
-        # Make sure Events use simple_publication_workflow
-        self.portal.portal_workflow.setChainForPortalTypes(['Event'], ['simple_publication_workflow'])
-
-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):
-        context = context or self.folder
-        request = request or self.folder.REQUEST
-        view = view or self.folder.restrictedTraverse('@@plone')
-        manager = manager or getUtility(IPortletManager, name='plone.leftcolumn', context=self.portal)
-        assignment = assignment or events.Assignment(template='portlet_recent', macro='portlet')
-
-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)
-
-    def test_published_events(self):
-        self.setRoles(('Manager',))
-        self.portal.invokeFactory('Event', 'e1')
-        self.portal.invokeFactory('Event', 'e2')
-        self.portal.portal_workflow.doActionFor(self.portal.e1, 'publish')
-
-        r = self.renderer(assignment=events.Assignment(count=5, state=('draft',)))
-        self.assertEquals(0, len(r.published_events()))
-        r = self.renderer(assignment=events.Assignment(count=5, state=('published', )))
-        self.assertEquals(1, len(r.published_events()))
-        r = self.renderer(assignment=events.Assignment(count=5, state=('published', 'private',)))
-        self.assertEquals(2, len(r.published_events()))
-
-    def test_all_events_link(self):
-        # if there is an 'events' object in the portal root, we expect
-        # the events portlet to link to it
-        if 'events' in self.portal:
-            self.portal._delObject('events')
-        r = self.renderer(assignment=events.Assignment(count=5))
-        self.failUnless(r.all_events_link().endswith('/events_listing'))
-
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'events')
-        r = self.renderer(assignment=events.Assignment(count=5))
-        self.failUnless(r.all_events_link().endswith('/events'))
-
-
-    def test_all_events_link_and_navigation_root(self):
-        # ensure support of INavigationRoot features dosen't break #9246 #9668
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'mynewsite')
-        directlyProvides(self.portal.mynewsite, INavigationRoot)
-        self.failUnless(INavigationRoot.providedBy(self.portal.mynewsite))
-
-        r = self.renderer(context=self.portal.mynewsite, assignment=events.Assignment(count=5))
-        self.failUnless(r.all_events_link().endswith('/mynewsite/events_listing'))
-
-        self.portal.mynewsite.invokeFactory('Folder', 'events')
-        r = self.renderer(context=self.portal.mynewsite, assignment=events.Assignment(count=5))
-        self.failUnless(r.all_events_link().endswith('/mynewsite/events'))
-
-
-    def test_prev_events_link(self):
-        r = self.renderer(assignment=events.Assignment(count=5))
-        if r.have_events_folder():
-            self.failUnless(r.prev_events_link().endswith(
-                '/events/aggregator/previous'))
-
-        # before we continue, we need administrator privileges
-        self.loginAsPortalOwner()
-
-        if r.have_events_folder():
-            self.portal._delObject('events')
-
-        self.portal.invokeFactory('Folder', 'events')
-        self.portal.events.invokeFactory('Folder', 'previous')
-        r = self.renderer(assignment=events.Assignment(count=5))
-        self.failUnless(r.prev_events_link().endswith(
-            '/events/previous'))
-
-        self.portal._delObject('events')
-        r = self.renderer(assignment=events.Assignment(count=5))
-        self.assertEquals(None, r.prev_events_link())
-
-
-    def test_prev_events_link_and_navigation_root(self):
-        # ensure support of INavigationRoot features dosen't break #9246 #9668
-
-        # before we continue, we need administrator privileges
-        self.loginAsPortalOwner()
-
-        # remove default plone content(s)
-        if 'events' in self.portal:
-            self.portal._delObject('events')
-
-        # lets create mynewsite
-        self.portal.invokeFactory('Folder', 'mynewsite')
-        directlyProvides(self.portal.mynewsite, INavigationRoot)
-        self.failUnless(INavigationRoot.providedBy(self.portal.mynewsite))
-
-        # mynewsite events:
-        # -- events
-        # ---- aggregator
-        # ------ previous
-        self.portal.mynewsite.invokeFactory('Folder', 'events')
-        self.portal.mynewsite.events.invokeFactory('Folder', 'aggregator')
-        self.portal.mynewsite.events.aggregator.invokeFactory('Folder', 'previous')
-        r = self.renderer(context=self.portal.mynewsite, assignment=events.Assignment(count=5))
-        self.failUnless(r.prev_events_link().endswith(
-            '/mynewsite/events/aggregator/previous'))
-
-        # mynewsite events:
-        # -- events
-        # ---- previous
-        self.portal.mynewsite._delObject('events')
-        self.portal.mynewsite.invokeFactory('Folder', 'events')
-        self.portal.mynewsite.events.invokeFactory('Folder', 'previous')
-        r = self.renderer(context=self.portal.mynewsite, assignment=events.Assignment(count=5))
-        self.failUnless(r.prev_events_link().endswith(
-            '/mynewsite/events/previous'))
-
-        # no mynewsite events
-        self.portal.mynewsite._delObject('events')
-        r = self.renderer(context=self.portal.mynewsite, assignment=events.Assignment(count=5))
-        self.assertEquals(None, r.prev_events_link())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    # suite.addTest(makeSuite(TestPortlet))
-    suite.addTest(makeSuite(TestRenderer))
-    return suite
diff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py
index 8f1c356..80ae099 100755
--- a/plone/app/portlets/utils.py
+++ b/plone/app/portlets/utils.py
@@ -8,11 +8,11 @@ from plone.portlets.constants import CONTEXT_CATEGORY, USER_CATEGORY
 
 from plone.app.portlets.interfaces import IPortletPermissionChecker
 
-from plone.app.portlets.portlets import calendar
+from plone.app.event.portlets import calendar
+from plone.app.event.portlets import events
 from plone.app.portlets.portlets import classic
 from plone.app.portlets.portlets import login
 from plone.app.portlets.portlets import news
-from plone.app.portlets.portlets import events
 from plone.app.portlets.portlets import navigation
 from plone.app.portlets.portlets import recent
 from plone.app.portlets.portlets import review
-- 
1.7.1

From 489865d2ecb240ab99a8d5f84c04908da6e3f7ae Mon Sep 17 00:00:00 2001
From: Johannes Raggam <raggam-nl@adm.at>
Date: Fri, 29 Oct 2010 20:33:54 +0100
Subject: [PATCH 2/2] use events portlet from plone.app.event

---
 plone/app/portlets/dashboard.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/plone/app/portlets/dashboard.py b/plone/app/portlets/dashboard.py
index 8a457d1..f921a8e 100755
--- a/plone/app/portlets/dashboard.py
+++ b/plone/app/portlets/dashboard.py
@@ -10,6 +10,7 @@ from plone.portlets.constants import USER_CATEGORY
 
 from plone.app.portlets.interfaces import IDefaultDashboard
 from plone.app.portlets import portlets
+from plone.app.event.portlets import events
 
 from plone.app.portlets.storage import UserPortletAssignmentMapping
 
@@ -51,7 +52,7 @@ class DefaultDashboard(object):
 
     def __call__(self):
         return {
-            'plone.dashboard1' : (portlets.news.Assignment(), portlets.events.Assignment(),),
+            'plone.dashboard1' : (portlets.news.Assignment(), events.Assignment(),),
             'plone.dashboard2' : (portlets.recent.Assignment(),),
             'plone.dashboard3' : (),
             'plone.dashboard4' : (portlets.review.Assignment(),),
-- 
1.7.1

