Repository: diazo
Branch: refs/heads/master
Date: 2015-04-26T20:33:48-07:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/diazo/commit/65949dc2482217562320f3c7cd9f0bc80311e88a

allow inline content for after and before

typo

update doc

Files changed:
A lib/diazo/tests/before-content-conditional/content.html
A lib/diazo/tests/before-content-conditional/output.html
A lib/diazo/tests/before-content-conditional/rules.xml
A lib/diazo/tests/before-content-conditional/theme.html
M docs/advanced.rst
M lib/diazo/emit-stylesheet.xsl
M lib/diazo/tests/v1-after-content-children/output.html
M lib/diazo/tests/v1-after-content-children/rules.xml
M lib/diazo/tests/v1-after/output.html
M lib/diazo/tests/v1-after/rules.xml
M lib/diazo/tests/v1-before-content-children/output.html
M lib/diazo/tests/v1-before-content-children/rules.xml
M lib/diazo/tests/v1-before/output.html
M lib/diazo/tests/v1-before/rules.xml

diff --git a/docs/advanced.rst b/docs/advanced.rst
index ddd389e..2e1c738 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -251,7 +251,8 @@ Inline markup and XSLT may be combined with conditions::
 Modifying the content on the fly
 --------------------------------
 
-It is possible to modify the included content using ``<replace />``.
+It is possible to modify the included content using ``<replace />``,
+``<before />``, or ``<after />``.
 
 For example::
 
@@ -261,6 +262,10 @@ For example::
         </button>
     </replace>
 
+    <before css:content="#content-core">
+        <a href="mailto:contact@diazo.org">Ask for help</a>
+    </before>
+
 This may be combined with conditions and inline XSLT.
 
 Inline XSL directives
diff --git a/lib/diazo/emit-stylesheet.xsl b/lib/diazo/emit-stylesheet.xsl
index e0e09b2..4232ba9 100644
--- a/lib/diazo/emit-stylesheet.xsl
+++ b/lib/diazo/emit-stylesheet.xsl
@@ -20,7 +20,7 @@
     <xsl:variable name="rules" select="//dv:*[@theme]"/>
     <xsl:variable name="drop-content-rules" select="//dv:drop[@content]"/>
     <xsl:variable name="strip-content-rules" select="//dv:strip[@content]"/>
-    <xsl:variable name="replace-content-rules" select="//dv:replace[@content and not(@theme)]"/>
+    <xsl:variable name="before-replace-after-content-selectors" select="//dv:*[local-name()='before' or local-name()='replace' or local-name()='after'][@content and not(@theme)]/@content"/>
     <xsl:variable name="replace-content-children-rules" select="//dv:replace[@content-children and not(@theme)]"/>
     <xsl:variable name="inline-xsl" select="/dv:rules/xsl:*"/>
     <xsl:variable name="themes" select="//dv:theme"/>
@@ -198,7 +198,7 @@
             <xsl:call-template name="strip-content"/>
             <!-- If there are any <replace @content> rules, put it in
             here. -->
-            <xsl:call-template name="replace-content"/>
+            <xsl:call-template name="before-replace-after-content"/>
             <!-- If there are any <replace @content-children> rules, put it in
             here. -->
             <xsl:call-template name="replace-content-children"/>
@@ -335,34 +335,160 @@
         </xsl:for-each>
     </xsl:template>
 
-    <xsl:template name="replace-content">
-        <xsl:for-each select="$replace-content-rules">
-            <xsl:text>&#10;    </xsl:text>
-            <xsl:call-template name="debug-comment" select="."/>
-            <xsl:text>&#10;    </xsl:text>
-            <xsl:element name="xsl:template">
-                <xsl:attribute name="match">
-                    <xsl:value-of select="@content"/>
-                    <xsl:if test="@merged-condition">
-                        <xsl:text>[</xsl:text>
+    <xsl:template name="before-replace-after-content">
+        <xsl:for-each select="$before-replace-after-content-selectors">
+            <xsl:variable name="current" select="."/>
+            <xsl:variable name="matching-before" select="//dv:before[@content=$current and not(@theme)]"/>
+            <xsl:variable name="matching-replace" select="//dv:replace[@content=$current and not(@theme)]"/>
+            <xsl:variable name="matching-after" select="//dv:after[@content=$current and not(@theme)]"/>
+            <!-- filter so we get each selector only once -->
+            <xsl:if test="generate-id() = generate-id($before-replace-after-content-selectors[. = $current][1])">
+                <xsl:text>&#10;    </xsl:text>
+                <xsl:element name="xsl:template">
+                    <xsl:attribute name="match">
+                        <xsl:value-of select="$current"/>
+                    </xsl:attribute>
+                    <xsl:if test="$matching-before">
+                        <xsl:text>&#10;        </xsl:text>
+                        <xsl:element name="xsl:apply-templates">
+                            <xsl:attribute name="select">.</xsl:attribute>
+                            <xsl:attribute name="mode">before-content</xsl:attribute>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:choose>
+                        <xsl:when test="$matching-replace">
+                            <xsl:text>&#10;        </xsl:text>
+                            <xsl:element name="xsl:apply-templates">
+                                <xsl:attribute name="select">.</xsl:attribute>
+                                <xsl:attribute name="mode">replace-content</xsl:attribute>
+                            </xsl:element>
+                        </xsl:when>
+                        <xsl:otherwise>
+                            <xsl:call-template name="include-content" />
+                        </xsl:otherwise>
+                    </xsl:choose>
+                    <xsl:if test="$matching-after">
+                        <xsl:text>&#10;        </xsl:text>
+                        <xsl:element name="xsl:apply-templates">
+                            <xsl:attribute name="select">.</xsl:attribute>
+                            <xsl:attribute name="mode">after-content</xsl:attribute>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;    </xsl:text>
+                </xsl:element>
+
+                <xsl:if test="$matching-before">
+                    <xsl:text>&#10;    </xsl:text>
+                    <xsl:element name="xsl:template">
+                        <xsl:attribute name="match">
+                            <xsl:value-of select="$current"/>
+                        </xsl:attribute>
+                        <xsl:attribute name="mode">before-content</xsl:attribute>
+                        <xsl:call-template name="include-all-with-condition">
+                            <xsl:with-param name="matching-rules" select="$matching-before" />
+                        </xsl:call-template>
+                    </xsl:element>
+                    <xsl:text>&#10;    </xsl:text>
+                </xsl:if>
+
+                <xsl:if test="$matching-replace">
+                    <xsl:text>&#10;    </xsl:text>
+                    <xsl:element name="xsl:template">
+                        <xsl:attribute name="match">
+                            <xsl:value-of select="$current"/>
+                        </xsl:attribute>
+                        <xsl:attribute name="mode">replace-content</xsl:attribute>
                         <xsl:choose>
-                            <xsl:when test="contains(@merged-condition, '$')">
-                                <!-- variable references are not allowed in template match patterns -->
-                                <xsl:text>dyn:evaluate(</xsl:text>
-                                <xsl:call-template name="escape-string">
-                                    <xsl:with-param name="string" select="@merged-condition"/>
-                                </xsl:call-template>
-                                <xsl:text>)</xsl:text>
+                            <xsl:when test="$matching-replace[@merged-condition]">
+                                <xsl:element name="xsl:choose">
+                                    <xsl:for-each select="$matching-replace">
+                                        <xsl:text>&#10;        </xsl:text>
+                                        <xsl:choose>
+                                            <xsl:when test="@merged-condition">
+                                                <xsl:element name="xsl:when">
+                                                    <xsl:attribute name="test">
+                                                        <xsl:choose>
+                                                            <xsl:when test="contains(@merged-condition, '$')">
+                                                                <!-- variable references are not allowed in template match patterns -->
+                                                                <xsl:text>dyn:evaluate(</xsl:text>
+                                                                <xsl:call-template name="escape-string">
+                                                                    <xsl:with-param name="string" select="@merged-condition"/>
+                                                                </xsl:call-template>
+                                                                <xsl:text>)</xsl:text>
+                                                            </xsl:when>
+                                                            <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
+                                                        </xsl:choose>
+                                                    </xsl:attribute>
+                                                    <xsl:copy-of select="node()"/>
+                                                </xsl:element>
+                                            </xsl:when>
+                                            <xsl:otherwise>
+                                                <xsl:copy-of select="node()"/>
+                                            </xsl:otherwise>
+                                        </xsl:choose>
+                                    </xsl:for-each>
+                                    <xsl:element name="xsl:otherwise">
+                                        <xsl:call-template name="include-content" />
+                                    </xsl:element>
+                                    <xsl:text>&#10;    </xsl:text>
+                                </xsl:element>
                             </xsl:when>
-                            <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
+                            <xsl:otherwise>
+                                <xsl:for-each select="$matching-replace">
+                                    <xsl:copy-of select="node()"/>
+                                </xsl:for-each>
+                            </xsl:otherwise>
                         </xsl:choose>
-                        <xsl:text>]</xsl:text>
-                    </xsl:if>
-                </xsl:attribute>
-                <xsl:copy-of select="node()"/>
-            </xsl:element>
-            <xsl:text>&#10;</xsl:text>
+                    </xsl:element>
+                    <xsl:text>&#10;    </xsl:text>
+                </xsl:if>
+
+                <xsl:if test="$matching-after">
+                    <xsl:text>&#10;    </xsl:text>
+                    <xsl:element name="xsl:template">
+                        <xsl:attribute name="match">
+                            <xsl:value-of select="$current"/>
+                        </xsl:attribute>
+                        <xsl:attribute name="mode">after-content</xsl:attribute>
+                        <xsl:call-template name="include-all-with-condition">
+                            <xsl:with-param name="matching-rules" select="$matching-after" />
+                        </xsl:call-template>
+                    </xsl:element>
+                    <xsl:text>&#10;    </xsl:text>
+                </xsl:if>
+            </xsl:if>
+        </xsl:for-each>
+    </xsl:template>
+
+    <xsl:template name="include-all-with-condition">
+        <xsl:param name="matching-rules"/>
+        <xsl:for-each select="$matching-rules">
+            <xsl:text>&#10;        </xsl:text>
+            <xsl:choose>
+                <xsl:when test="@merged-condition">
+                    <xsl:element name="xsl:if">
+                        <xsl:attribute name="test">
+                            <xsl:choose>
+                                <xsl:when test="contains(@merged-condition, '$')">
+                                    <!-- variable references are not allowed in template match patterns -->
+                                    <xsl:text>dyn:evaluate(</xsl:text>
+                                    <xsl:call-template name="escape-string">
+                                        <xsl:with-param name="string" select="@merged-condition"/>
+                                    </xsl:call-template>
+                                    <xsl:text>)</xsl:text>
+                                </xsl:when>
+                                <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
+                            </xsl:choose>
+                        </xsl:attribute>
+                        <xsl:copy-of select="node()"/>
+                    </xsl:element>
+                </xsl:when>
+                <xsl:otherwise>
+                    <xsl:copy-of select="node()"/>
+                </xsl:otherwise>
+            </xsl:choose>
         </xsl:for-each>
+        <xsl:text>&#10;    </xsl:text>
     </xsl:template>
 
     <xsl:template name="replace-content-children">
diff --git a/lib/diazo/tests/before-content-conditional/content.html b/lib/diazo/tests/before-content-conditional/content.html
new file mode 100644
index 0000000..c98fb96
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/content.html
@@ -0,0 +1,8 @@
+<html>
+  <body>
+    <div id="#main">
+      <p id="one">one</p>
+      <p id="two">two</p>
+    </div>
+  </body>
+</html>
diff --git a/lib/diazo/tests/before-content-conditional/output.html b/lib/diazo/tests/before-content-conditional/output.html
new file mode 100644
index 0000000..8d471a4
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/output.html
@@ -0,0 +1,12 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <body>
+    <h1>Title</h1>
+    <span>Uno</span>
+    <span>Un</span>
+    <p id="one">one</p>
+    <div id="alpha"></div>
+    <div id="beta"></div>
+  </body>
+</html>
+
diff --git a/lib/diazo/tests/before-content-conditional/rules.xml b/lib/diazo/tests/before-content-conditional/rules.xml
new file mode 100644
index 0000000..f381214
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/rules.xml
@@ -0,0 +1,25 @@
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+    >
+
+    <before css:content="#one">
+        <span>Uno</span>
+    </before>
+
+    <before css:content="#one" css:if-content="#two">
+        <span>Un</span>
+    </before>
+
+    <before css:content="#one" css:if-content="#no-match">
+        <span>Uchi</span>
+    </before>
+    
+    <before
+        css:theme="#alpha"
+        css:content="#one"
+        css:if-content="#two"
+        />
+
+</rules>
diff --git a/lib/diazo/tests/before-content-conditional/theme.html b/lib/diazo/tests/before-content-conditional/theme.html
new file mode 100644
index 0000000..4c49574
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/theme.html
@@ -0,0 +1,7 @@
+<html>
+<body>
+  <h1>Title</h1>
+  <div id="alpha"></div>
+  <div id="beta"></div>
+</body>
+</html>
diff --git a/lib/diazo/tests/v1-after-content-children/output.html b/lib/diazo/tests/v1-after-content-children/output.html
index 09cf33d..931352f 100644
--- a/lib/diazo/tests/v1-after-content-children/output.html
+++ b/lib/diazo/tests/v1-after-content-children/output.html
@@ -3,7 +3,7 @@
   <body>
     <div>
     <h1>Title</h1>
-    <div id="alpha">text</div>one
+    <div id="alpha">text</div>one<span>Uno</span>
     <div id="beta"><span>b</span></div>two
     <div id="delta"><span>d</span></div><span>three</span>
   </div>
diff --git a/lib/diazo/tests/v1-after-content-children/rules.xml b/lib/diazo/tests/v1-after-content-children/rules.xml
index 32b84fe..3d78f02 100644
--- a/lib/diazo/tests/v1-after-content-children/rules.xml
+++ b/lib/diazo/tests/v1-after-content-children/rules.xml
@@ -4,6 +4,10 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <after css:content-children="#one">
+        <span>Uno</span>
+    </after>
+
     <after
         css:theme="#alpha"
         css:content-children="#one"
diff --git a/lib/diazo/tests/v1-after/output.html b/lib/diazo/tests/v1-after/output.html
index d3605ee..2049802 100644
--- a/lib/diazo/tests/v1-after/output.html
+++ b/lib/diazo/tests/v1-after/output.html
@@ -4,6 +4,7 @@
     <h1>Title</h1>
     <div id="alpha"></div>
     <p id="one">one</p>
+    <span>Uno</span>
     <div id="beta"></div>
   </body>
 </html>
diff --git a/lib/diazo/tests/v1-after/rules.xml b/lib/diazo/tests/v1-after/rules.xml
index 40c9af4..5bebb3e 100644
--- a/lib/diazo/tests/v1-after/rules.xml
+++ b/lib/diazo/tests/v1-after/rules.xml
@@ -4,6 +4,10 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <after css:content="#one">
+        <span>Uno</span>
+    </after>
+
     <after
         css:theme="#alpha"
         css:content="#one"
diff --git a/lib/diazo/tests/v1-before-content-children/output.html b/lib/diazo/tests/v1-before-content-children/output.html
index 0f84de3..8ea7602 100644
--- a/lib/diazo/tests/v1-before-content-children/output.html
+++ b/lib/diazo/tests/v1-before-content-children/output.html
@@ -3,7 +3,7 @@
   <body>
     <div>
       <h1>Title</h1>
-      one<div id="alpha">text</div>
+      <span>Uno</span>one<div id="alpha">text</div>
       two<div id="beta"><span>b</span></div>
       <span>three</span><div id="delta"><span>d</span></div>
     </div>
diff --git a/lib/diazo/tests/v1-before-content-children/rules.xml b/lib/diazo/tests/v1-before-content-children/rules.xml
index 1035d00..8f5a5b8 100644
--- a/lib/diazo/tests/v1-before-content-children/rules.xml
+++ b/lib/diazo/tests/v1-before-content-children/rules.xml
@@ -4,6 +4,10 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <before css:content-children="#one">
+        <span>Uno</span>
+    </before>
+    
     <before
         css:theme="#alpha"
         css:content-children="#one"
diff --git a/lib/diazo/tests/v1-before/output.html b/lib/diazo/tests/v1-before/output.html
index bed3833..6aa1672 100644
--- a/lib/diazo/tests/v1-before/output.html
+++ b/lib/diazo/tests/v1-before/output.html
@@ -2,6 +2,7 @@
 <html xmlns="http://www.w3.org/1999/xhtml">
   <body>
     <h1>Title</h1>
+    <span>Uno</span>
     <p id="one">one</p>
     <div id="alpha"></div>
     <div id="beta"></div>
diff --git a/lib/diazo/tests/v1-before/rules.xml b/lib/diazo/tests/v1-before/rules.xml
index 17aedd8..d0dce77 100644
--- a/lib/diazo/tests/v1-before/rules.xml
+++ b/lib/diazo/tests/v1-before/rules.xml
@@ -4,6 +4,10 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <before css:content="#one">
+        <span>Uno</span>
+    </before>
+    
     <before
         css:theme="#alpha"
         css:content="#one"


Repository: diazo
Branch: refs/heads/master
Date: 2015-04-26T20:33:49-07:00
Author: Laurence Rowe (lrowe) <laurence@lrowe.co.uk>
Commit: https://github.com/plone/diazo/commit/94802f7942a719ecb07d983a2cc7aa7a8cd64b34

Test showing failure when rules match content through different selectors.

Files changed:
A lib/diazo/tests/v1-before-replace-after-content/content.html
A lib/diazo/tests/v1-before-replace-after-content/output.html
A lib/diazo/tests/v1-before-replace-after-content/rules.xml
A lib/diazo/tests/v1-before-replace-after-content/theme.html

diff --git a/lib/diazo/tests/v1-before-replace-after-content/content.html b/lib/diazo/tests/v1-before-replace-after-content/content.html
new file mode 100644
index 0000000..4f0801f
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/content.html
@@ -0,0 +1,5 @@
+<html>
+  <body>
+    <p id="one" class="after">one</p>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/output.html b/lib/diazo/tests/v1-before-replace-after-content/output.html
new file mode 100644
index 0000000..d03dac1
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/output.html
@@ -0,0 +1,9 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <body>
+    <h1>Title</h1>
+    <span>before</span>
+    <span>replace</span>
+    <span>after</span>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/rules.xml b/lib/diazo/tests/v1-before-replace-after-content/rules.xml
new file mode 100644
index 0000000..111336a
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/rules.xml
@@ -0,0 +1,24 @@
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+    >
+
+    <before css:content="#one">
+        <span>before</span>
+    </before>
+
+    <replace css:content="#one">
+        <span>replace</span>
+    </replace>
+
+    <after css:content=".after">
+        <span>after</span>
+    </after>
+
+    <replace
+        css:theme="#alpha"
+        css:content="#one"
+        />
+
+</rules>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/theme.html b/lib/diazo/tests/v1-before-replace-after-content/theme.html
new file mode 100644
index 0000000..8139f00
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/theme.html
@@ -0,0 +1,6 @@
+<html>
+<body>
+  <h1>Title</h1>
+  <div id="alpha"></div>
+</body>
+</html>


Repository: diazo
Branch: refs/heads/master
Date: 2015-04-26T20:33:49-07:00
Author: Laurence Rowe (lrowe) <laurence@lrowe.co.uk>
Commit: https://github.com/plone/diazo/commit/4c2b93af773ea2fa317b1f43a6e23dc07394ece3

Failing test showing before content-children being applied to all children not just once. replace content-children doesn't seem to suffer from this.

Files changed:
A lib/diazo/tests/v1-before-content-content-children/content.html
A lib/diazo/tests/v1-before-content-content-children/output.html
A lib/diazo/tests/v1-before-content-content-children/rules.xml
A lib/diazo/tests/v1-before-content-content-children/theme.html

diff --git a/lib/diazo/tests/v1-before-content-content-children/content.html b/lib/diazo/tests/v1-before-content-content-children/content.html
new file mode 100644
index 0000000..7ffa31b
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/content.html
@@ -0,0 +1,5 @@
+<html>
+  <body>
+    <p id="one"><span>one</span><span>1</span></p>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-content-content-children/output.html b/lib/diazo/tests/v1-before-content-content-children/output.html
new file mode 100644
index 0000000..1180c1f
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/output.html
@@ -0,0 +1,11 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <body>
+    <h1>Title</h1>
+    <p id="one">
+        <span>before</span>
+        <span>one</span>
+        <span>1</span>
+    </p>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-content-content-children/rules.xml b/lib/diazo/tests/v1-before-content-content-children/rules.xml
new file mode 100644
index 0000000..f85e512
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/rules.xml
@@ -0,0 +1,16 @@
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+    >
+
+    <before css:content-children="#one">
+        <span>before</span>
+    </before>
+
+    <replace
+        css:theme="#alpha"
+        css:content="#one"
+        />
+
+</rules>
diff --git a/lib/diazo/tests/v1-before-content-content-children/theme.html b/lib/diazo/tests/v1-before-content-content-children/theme.html
new file mode 100644
index 0000000..8139f00
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/theme.html
@@ -0,0 +1,6 @@
+<html>
+<body>
+  <h1>Title</h1>
+  <div id="alpha"></div>
+</body>
+</html>


Repository: diazo
Branch: refs/heads/master
Date: 2015-04-26T20:33:49-07:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/diazo/commit/b25ee41b09d303b16859771f312c0028bc0e2635

manage content children rules properly

Files changed:
M docs/advanced.rst
M lib/diazo/emit-stylesheet.xsl
M lib/diazo/tests/v1-after-content-children/output.html
M lib/diazo/tests/v1-after-content-children/rules.xml
M lib/diazo/tests/v1-before-content-children/output.html
M lib/diazo/tests/v1-before-content-children/rules.xml

diff --git a/docs/advanced.rst b/docs/advanced.rst
index 2e1c738..ab1641d 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -268,6 +268,32 @@ For example::
 
 This may be combined with conditions and inline XSLT.
 
+Warning: it is not possible to both modify the content children and put them in
+the theme, for instance::
+
+    <before css:content-children="#one">
+        <span>Uno</span>
+    </before>
+
+    <before
+        css:theme="#alpha"
+        css:content-children="#one"
+        />
+
+would not work. But::
+
+    <before css:content-children="#one">
+        <span>Uno</span>
+    </before>
+
+    <before
+        css:theme="#alpha"
+        css:content="#one"
+        />
+
+would work (because the theme rule targets the `#one` content, not its
+children).
+
 Inline XSL directives
 ---------------------
 
@@ -410,4 +436,4 @@ The output then renders like this::
 
     <esi:include src="/extra.html"></esi:include>
 
-.. _`obsolete permitted doctype string`: http://dev.w3.org/html5/spec/Overview.html#obsolete-permitted-doctype-string
\ No newline at end of file
+.. _`obsolete permitted doctype string`: http://dev.w3.org/html5/spec/Overview.html#obsolete-permitted-doctype-string
diff --git a/lib/diazo/emit-stylesheet.xsl b/lib/diazo/emit-stylesheet.xsl
index 4232ba9..50a25c8 100644
--- a/lib/diazo/emit-stylesheet.xsl
+++ b/lib/diazo/emit-stylesheet.xsl
@@ -20,7 +20,7 @@
     <xsl:variable name="rules" select="//dv:*[@theme]"/>
     <xsl:variable name="drop-content-rules" select="//dv:drop[@content]"/>
     <xsl:variable name="strip-content-rules" select="//dv:strip[@content]"/>
-    <xsl:variable name="before-replace-after-content-selectors" select="//dv:*[local-name()='before' or local-name()='replace' or local-name()='after'][@content and not(@theme)]/@content"/>
+    <xsl:variable name="before-replace-after-content-selectors" select="//dv:*[local-name()='before' or local-name()='replace' or local-name()='after'][@content and not(@theme) and not(@content-children)]/@content|//dv:*[local-name()='before' or local-name()='replace' or local-name()='after'][@content and not(@theme) and @content-children]/@content-children"/>
     <xsl:variable name="replace-content-children-rules" select="//dv:replace[@content-children and not(@theme)]"/>
     <xsl:variable name="inline-xsl" select="/dv:rules/xsl:*"/>
     <xsl:variable name="themes" select="//dv:theme"/>
@@ -336,134 +336,214 @@
     </xsl:template>
 
     <xsl:template name="before-replace-after-content">
-        <xsl:for-each select="$before-replace-after-content-selectors">
-            <xsl:variable name="current" select="."/>
-            <xsl:variable name="matching-before" select="//dv:before[@content=$current and not(@theme)]"/>
-            <xsl:variable name="matching-replace" select="//dv:replace[@content=$current and not(@theme)]"/>
-            <xsl:variable name="matching-after" select="//dv:after[@content=$current and not(@theme)]"/>
-            <!-- filter so we get each selector only once -->
-            <xsl:if test="generate-id() = generate-id($before-replace-after-content-selectors[. = $current][1])">
-                <xsl:text>&#10;    </xsl:text>
-                <xsl:element name="xsl:template">
-                    <xsl:attribute name="match">
-                        <xsl:value-of select="$current"/>
-                    </xsl:attribute>
-                    <xsl:if test="$matching-before">
-                        <xsl:text>&#10;        </xsl:text>
+        <xsl:if test="$before-replace-after-content-selectors">
+
+            <xsl:for-each select="$before-replace-after-content-selectors">
+                <xsl:variable name="current" select="."/>
+                <xsl:variable name="matching-before" select="//dv:before[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-before-children" select="//dv:before[@content-children=$current and not(@theme)]"/>
+                <xsl:variable name="matching-replace" select="//dv:replace[(@content=$current or @content-children=$current) and not(@theme)]"/>
+                <xsl:variable name="matching-after" select="//dv:after[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-after-children" select="//dv:after[@content-children=$current and not(@theme)]"/>
+
+                <!-- filter so we get each selector only once -->
+                <xsl:if test="generate-id() = generate-id($before-replace-after-content-selectors[. = $current][1])">
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:element name="xsl:template">
+                        <xsl:attribute name="match">
+                            <xsl:value-of select="$current"/>
+                        </xsl:attribute>
+                        <xsl:text>&#10;    </xsl:text>
                         <xsl:element name="xsl:apply-templates">
                             <xsl:attribute name="select">.</xsl:attribute>
                             <xsl:attribute name="mode">before-content</xsl:attribute>
                         </xsl:element>
-                    </xsl:if>
-                    <xsl:choose>
-                        <xsl:when test="$matching-replace">
-                            <xsl:text>&#10;        </xsl:text>
-                            <xsl:element name="xsl:apply-templates">
-                                <xsl:attribute name="select">.</xsl:attribute>
-                                <xsl:attribute name="mode">replace-content</xsl:attribute>
-                            </xsl:element>
-                        </xsl:when>
-                        <xsl:otherwise>
-                            <xsl:call-template name="include-content" />
-                        </xsl:otherwise>
-                    </xsl:choose>
-                    <xsl:if test="$matching-after">
-                        <xsl:text>&#10;        </xsl:text>
+                        <xsl:text>&#10;    </xsl:text>
+                        <xsl:element name="xsl:apply-templates">
+                            <xsl:attribute name="select">.</xsl:attribute>
+                            <xsl:attribute name="mode">replace-content</xsl:attribute>
+                        </xsl:element>
+                        <xsl:text>&#10;    </xsl:text>
                         <xsl:element name="xsl:apply-templates">
                             <xsl:attribute name="select">.</xsl:attribute>
                             <xsl:attribute name="mode">after-content</xsl:attribute>
                         </xsl:element>
-                    </xsl:if>
-                    <xsl:text>&#10;    </xsl:text>
-                </xsl:element>
-
-                <xsl:if test="$matching-before">
-                    <xsl:text>&#10;    </xsl:text>
-                    <xsl:element name="xsl:template">
-                        <xsl:attribute name="match">
-                            <xsl:value-of select="$current"/>
-                        </xsl:attribute>
-                        <xsl:attribute name="mode">before-content</xsl:attribute>
-                        <xsl:call-template name="include-all-with-condition">
-                            <xsl:with-param name="matching-rules" select="$matching-before" />
-                        </xsl:call-template>
+                        <xsl:text>&#10;</xsl:text>
                     </xsl:element>
-                    <xsl:text>&#10;    </xsl:text>
+                    <xsl:text>&#10;</xsl:text>
+
+                    <!-- non matching goes first -->
+                    <xsl:if test="not($matching-before)">
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">before-content</xsl:attribute>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="not($matching-before-children)">
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">before-content-children</xsl:attribute>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="not($matching-after)">
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">after-content</xsl:attribute>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="not($matching-after-children)">
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">after-content-children</xsl:attribute>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
                 </xsl:if>
+            </xsl:for-each>
 
-                <xsl:if test="$matching-replace">
-                    <xsl:text>&#10;    </xsl:text>
-                    <xsl:element name="xsl:template">
-                        <xsl:attribute name="match">
-                            <xsl:value-of select="$current"/>
-                        </xsl:attribute>
-                        <xsl:attribute name="mode">replace-content</xsl:attribute>
-                        <xsl:choose>
-                            <xsl:when test="$matching-replace[@merged-condition]">
-                                <xsl:element name="xsl:choose">
-                                    <xsl:for-each select="$matching-replace">
-                                        <xsl:text>&#10;        </xsl:text>
-                                        <xsl:choose>
-                                            <xsl:when test="@merged-condition">
-                                                <xsl:element name="xsl:when">
-                                                    <xsl:attribute name="test">
-                                                        <xsl:choose>
-                                                            <xsl:when test="contains(@merged-condition, '$')">
-                                                                <!-- variable references are not allowed in template match patterns -->
-                                                                <xsl:text>dyn:evaluate(</xsl:text>
-                                                                <xsl:call-template name="escape-string">
-                                                                    <xsl:with-param name="string" select="@merged-condition"/>
-                                                                </xsl:call-template>
-                                                                <xsl:text>)</xsl:text>
-                                                            </xsl:when>
-                                                            <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
-                                                        </xsl:choose>
-                                                    </xsl:attribute>
+            <xsl:for-each select="$before-replace-after-content-selectors">
+                <xsl:variable name="current" select="."/>
+                <xsl:variable name="matching-before" select="//dv:before[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-before-children" select="//dv:before[@content-children=$current and not(@theme)]"/>
+                <xsl:variable name="matching-replace" select="//dv:replace[(@content=$current or @content-children=$current) and not(@theme)]"/>
+                <xsl:variable name="matching-after" select="//dv:after[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-after-children" select="//dv:after[@content-children=$current and not(@theme)]"/>
+
+                <!-- filter so we get each selector only once -->
+                <xsl:if test="generate-id() = generate-id($before-replace-after-content-selectors[. = $current][1])">
+                    <xsl:if test="$matching-before">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">before-content</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-before" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="$matching-before-children">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">before-content-children</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-before-children" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+
+                    <xsl:if test="$matching-replace">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">replace-content</xsl:attribute>
+                            <xsl:choose>
+                                <xsl:when test="$matching-replace[@merged-condition]">
+                                    <xsl:element name="xsl:choose">
+                                        <xsl:for-each select="$matching-replace">
+                                            <xsl:text>&#10;    </xsl:text>
+                                            <xsl:choose>
+                                                <xsl:when test="@merged-condition">
+                                                    <xsl:element name="xsl:when">
+                                                        <xsl:attribute name="test">
+                                                            <xsl:choose>
+                                                                <xsl:when test="contains(@merged-condition, '$')">
+                                                                    <!-- variable references are not allowed in template match patterns -->
+                                                                    <xsl:text>dyn:evaluate(</xsl:text>
+                                                                    <xsl:call-template name="escape-string">
+                                                                        <xsl:with-param name="string" select="@merged-condition"/>
+                                                                    </xsl:call-template>
+                                                                    <xsl:text>)</xsl:text>
+                                                                </xsl:when>
+                                                                <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
+                                                            </xsl:choose>
+                                                        </xsl:attribute>
+                                                        <xsl:copy-of select="node()"/>
+                                                    </xsl:element>
+                                                </xsl:when>
+                                                <xsl:otherwise>
                                                     <xsl:copy-of select="node()"/>
-                                                </xsl:element>
-                                            </xsl:when>
-                                            <xsl:otherwise>
-                                                <xsl:copy-of select="node()"/>
-                                            </xsl:otherwise>
-                                        </xsl:choose>
-                                    </xsl:for-each>
-                                    <xsl:element name="xsl:otherwise">
-                                        <xsl:call-template name="include-content" />
+                                                </xsl:otherwise>
+                                            </xsl:choose>
+                                        </xsl:for-each>
+                                        <xsl:element name="xsl:otherwise">
+                                            <xsl:call-template name="include-content-with-children-rules" />
+                                        </xsl:element>
+                                        <xsl:text>&#10;</xsl:text>
                                     </xsl:element>
-                                    <xsl:text>&#10;    </xsl:text>
-                                </xsl:element>
-                            </xsl:when>
-                            <xsl:otherwise>
-                                <xsl:for-each select="$matching-replace">
-                                    <xsl:copy-of select="node()"/>
-                                </xsl:for-each>
-                            </xsl:otherwise>
-                        </xsl:choose>
-                    </xsl:element>
-                    <xsl:text>&#10;    </xsl:text>
-                </xsl:if>
+                                </xsl:when>
+                                <xsl:otherwise>
+                                    <xsl:for-each select="$matching-replace">
+                                        <xsl:copy-of select="node()"/>
+                                    </xsl:for-each>
+                                </xsl:otherwise>
+                            </xsl:choose>
+                        </xsl:element>
+                        <xsl:text>&#10;</xsl:text>
+                    </xsl:if>
 
-                <xsl:if test="$matching-after">
-                    <xsl:text>&#10;    </xsl:text>
-                    <xsl:element name="xsl:template">
-                        <xsl:attribute name="match">
-                            <xsl:value-of select="$current"/>
-                        </xsl:attribute>
-                        <xsl:attribute name="mode">after-content</xsl:attribute>
-                        <xsl:call-template name="include-all-with-condition">
-                            <xsl:with-param name="matching-rules" select="$matching-after" />
-                        </xsl:call-template>
-                    </xsl:element>
-                    <xsl:text>&#10;    </xsl:text>
+                    <xsl:if test="$matching-after">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">after-content</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-after" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="$matching-after-children">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">after-content-children</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-after-children" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
                 </xsl:if>
-            </xsl:if>
-        </xsl:for-each>
+            </xsl:for-each>
+
+            <!-- default replace content rules if no match -->
+            <xsl:text>&#10;</xsl:text>
+            <xsl:element name="xsl:template">
+                <xsl:attribute name="match">*</xsl:attribute>
+                <xsl:attribute name="mode">replace-content</xsl:attribute>
+                <xsl:call-template name="include-content-with-children-rules" />
+                <xsl:text>&#10;</xsl:text>
+            </xsl:element>
+        </xsl:if>
     </xsl:template>
 
     <xsl:template name="include-all-with-condition">
         <xsl:param name="matching-rules"/>
         <xsl:for-each select="$matching-rules">
-            <xsl:text>&#10;        </xsl:text>
             <xsl:choose>
                 <xsl:when test="@merged-condition">
                     <xsl:element name="xsl:if">
@@ -488,7 +568,6 @@
                 </xsl:otherwise>
             </xsl:choose>
         </xsl:for-each>
-        <xsl:text>&#10;    </xsl:text>
     </xsl:template>
 
     <xsl:template name="replace-content-children">
@@ -527,13 +606,38 @@
     </xsl:template>
 
     <xsl:template name="include-content">
-        <xsl:text>&#10;            </xsl:text>
+        <xsl:text>&#10;    </xsl:text>
         <xsl:element name="xsl:copy">
-            <xsl:text>&#10;                </xsl:text>
+            <xsl:text>&#10;        </xsl:text>
             <xsl:element name="xsl:apply-templates">
                 <xsl:attribute name="select">@*|node()</xsl:attribute>
             </xsl:element>
-            <xsl:text>&#10;            </xsl:text>
+            <xsl:text>&#10;    </xsl:text>
+        </xsl:element>
+    </xsl:template>
+
+    <xsl:template name="include-content-with-children-rules">
+        <xsl:text>&#10;</xsl:text>
+        <xsl:element name="xsl:copy">
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">@*</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">.</xsl:attribute>
+                <xsl:attribute name="mode">before-content-children</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">node()</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">.</xsl:attribute>
+                <xsl:attribute name="mode">after-content-children</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;</xsl:text>
         </xsl:element>
     </xsl:template>
 
diff --git a/lib/diazo/tests/v1-after-content-children/output.html b/lib/diazo/tests/v1-after-content-children/output.html
index 931352f..dab1af0 100644
--- a/lib/diazo/tests/v1-after-content-children/output.html
+++ b/lib/diazo/tests/v1-after-content-children/output.html
@@ -3,8 +3,8 @@
   <body>
     <div>
     <h1>Title</h1>
-    <div id="alpha">text</div>one<span>Uno</span>
-    <div id="beta"><span>b</span></div>two
+    <div id="alpha">text</div>one
+    <div id="beta"><span>b</span></div><p id="two">two<span>Uno</span></p>
     <div id="delta"><span>d</span></div><span>three</span>
   </div>
   </body>
diff --git a/lib/diazo/tests/v1-after-content-children/rules.xml b/lib/diazo/tests/v1-after-content-children/rules.xml
index 3d78f02..a4f090a 100644
--- a/lib/diazo/tests/v1-after-content-children/rules.xml
+++ b/lib/diazo/tests/v1-after-content-children/rules.xml
@@ -4,10 +4,16 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <!-- will not work -->
     <after css:content-children="#one">
         <span>Uno</span>
     </after>
 
+    <!-- will work -->
+    <after css:content-children="#two">
+        <span>Uno</span>
+    </after>
+
     <after
         css:theme="#alpha"
         css:content-children="#one"
@@ -15,7 +21,7 @@
 
     <after
         css:theme="#beta"
-        css:content-children="#two"
+        css:content="#two"
         />
 
     <after
diff --git a/lib/diazo/tests/v1-before-content-children/output.html b/lib/diazo/tests/v1-before-content-children/output.html
index 8ea7602..262322e 100644
--- a/lib/diazo/tests/v1-before-content-children/output.html
+++ b/lib/diazo/tests/v1-before-content-children/output.html
@@ -3,8 +3,8 @@
   <body>
     <div>
       <h1>Title</h1>
-      <span>Uno</span>one<div id="alpha">text</div>
-      two<div id="beta"><span>b</span></div>
+      one<div id="alpha">text</div>
+      <p id="two"><span>Uno</span>two</p><div id="beta"><span>b</span></div>
       <span>three</span><div id="delta"><span>d</span></div>
     </div>
   </body>
diff --git a/lib/diazo/tests/v1-before-content-children/rules.xml b/lib/diazo/tests/v1-before-content-children/rules.xml
index 8f5a5b8..17fbbbc 100644
--- a/lib/diazo/tests/v1-before-content-children/rules.xml
+++ b/lib/diazo/tests/v1-before-content-children/rules.xml
@@ -4,10 +4,16 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <!-- will not work -->
     <before css:content-children="#one">
         <span>Uno</span>
     </before>
-    
+
+    <!-- will work -->
+    <before css:content-children="#two">
+        <span>Uno</span>
+    </before>
+
     <before
         css:theme="#alpha"
         css:content-children="#one"
@@ -15,7 +21,7 @@
 
     <before
         css:theme="#beta"
-        css:content-children="#two"
+        css:content="#two"
         />
 
     <before


Repository: diazo
Branch: refs/heads/master
Date: 2015-04-26T20:44:37-07:00
Author: Laurence Rowe (lrowe) <laurence@lrowe.co.uk>
Commit: https://github.com/plone/diazo/commit/23fb94c70d32963033f3ff09a037c595e6f53910

Move defaults for replace content rules to defaults.xsl.

Files changed:
M lib/diazo/defaults.xsl
M lib/diazo/emit-stylesheet.xsl

diff --git a/lib/diazo/defaults.xsl b/lib/diazo/defaults.xsl
index df3992c..bf5bc65 100644
--- a/lib/diazo/defaults.xsl
+++ b/lib/diazo/defaults.xsl
@@ -37,4 +37,17 @@
         <!-- Filter out -->
     </xsl:template>
 
+    <xsl:template match="*" mode="before-content"/>
+    <xsl:template match="*" mode="before-content-children"/>
+    <xsl:template match="*" mode="after-content"/>
+    <xsl:template match="*" mode="after-content-children"/>
+    <xsl:template match="*" mode="replace-content">
+        <xsl:copy>
+            <xsl:apply-templates select="@*"/>
+            <xsl:apply-templates select="." mode="before-content-children"/>
+            <xsl:apply-templates select="node()"/>
+            <xsl:apply-templates select="." mode="after-content-children"/>
+        </xsl:copy>
+    </xsl:template>
+
 </xsl:stylesheet>
diff --git a/lib/diazo/emit-stylesheet.xsl b/lib/diazo/emit-stylesheet.xsl
index 50a25c8..47c2d6f 100644
--- a/lib/diazo/emit-stylesheet.xsl
+++ b/lib/diazo/emit-stylesheet.xsl
@@ -371,44 +371,6 @@
                         <xsl:text>&#10;</xsl:text>
                     </xsl:element>
                     <xsl:text>&#10;</xsl:text>
-
-                    <!-- non matching goes first -->
-                    <xsl:if test="not($matching-before)">
-                        <xsl:element name="xsl:template">
-                            <xsl:attribute name="match">
-                                <xsl:value-of select="$current"/>
-                            </xsl:attribute>
-                            <xsl:attribute name="mode">before-content</xsl:attribute>
-                        </xsl:element>
-                    </xsl:if>
-                    <xsl:text>&#10;</xsl:text>
-                    <xsl:if test="not($matching-before-children)">
-                        <xsl:element name="xsl:template">
-                            <xsl:attribute name="match">
-                                <xsl:value-of select="$current"/>
-                            </xsl:attribute>
-                            <xsl:attribute name="mode">before-content-children</xsl:attribute>
-                        </xsl:element>
-                    </xsl:if>
-                    <xsl:text>&#10;</xsl:text>
-                    <xsl:if test="not($matching-after)">
-                        <xsl:element name="xsl:template">
-                            <xsl:attribute name="match">
-                                <xsl:value-of select="$current"/>
-                            </xsl:attribute>
-                            <xsl:attribute name="mode">after-content</xsl:attribute>
-                        </xsl:element>
-                    </xsl:if>
-                    <xsl:text>&#10;</xsl:text>
-                    <xsl:if test="not($matching-after-children)">
-                        <xsl:element name="xsl:template">
-                            <xsl:attribute name="match">
-                                <xsl:value-of select="$current"/>
-                            </xsl:attribute>
-                            <xsl:attribute name="mode">after-content-children</xsl:attribute>
-                        </xsl:element>
-                    </xsl:if>
-                    <xsl:text>&#10;</xsl:text>
                 </xsl:if>
             </xsl:for-each>
 
@@ -529,15 +491,6 @@
                     <xsl:text>&#10;</xsl:text>
                 </xsl:if>
             </xsl:for-each>
-
-            <!-- default replace content rules if no match -->
-            <xsl:text>&#10;</xsl:text>
-            <xsl:element name="xsl:template">
-                <xsl:attribute name="match">*</xsl:attribute>
-                <xsl:attribute name="mode">replace-content</xsl:attribute>
-                <xsl:call-template name="include-content-with-children-rules" />
-                <xsl:text>&#10;</xsl:text>
-            </xsl:element>
         </xsl:if>
     </xsl:template>
 


Repository: diazo
Branch: refs/heads/master
Date: 2015-04-26T20:53:39-07:00
Author: Laurence Rowe (lrowe) <l@lrowe.co.uk>
Commit: https://github.com/plone/diazo/commit/1f411eb967d1ff5e10d7aa77f57d28d521bed4df

Merge pull request #46 from plone/after-before-content-review

After before content review

Files changed:
A lib/diazo/tests/before-content-conditional/content.html
A lib/diazo/tests/before-content-conditional/output.html
A lib/diazo/tests/before-content-conditional/rules.xml
A lib/diazo/tests/before-content-conditional/theme.html
A lib/diazo/tests/v1-before-content-content-children/content.html
A lib/diazo/tests/v1-before-content-content-children/output.html
A lib/diazo/tests/v1-before-content-content-children/rules.xml
A lib/diazo/tests/v1-before-content-content-children/theme.html
A lib/diazo/tests/v1-before-replace-after-content/content.html
A lib/diazo/tests/v1-before-replace-after-content/output.html
A lib/diazo/tests/v1-before-replace-after-content/rules.xml
A lib/diazo/tests/v1-before-replace-after-content/theme.html
M docs/advanced.rst
M lib/diazo/defaults.xsl
M lib/diazo/emit-stylesheet.xsl
M lib/diazo/tests/v1-after-content-children/output.html
M lib/diazo/tests/v1-after-content-children/rules.xml
M lib/diazo/tests/v1-after/output.html
M lib/diazo/tests/v1-after/rules.xml
M lib/diazo/tests/v1-before-content-children/output.html
M lib/diazo/tests/v1-before-content-children/rules.xml
M lib/diazo/tests/v1-before/output.html
M lib/diazo/tests/v1-before/rules.xml

diff --git a/docs/advanced.rst b/docs/advanced.rst
index ddd389e..ab1641d 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -251,7 +251,8 @@ Inline markup and XSLT may be combined with conditions::
 Modifying the content on the fly
 --------------------------------
 
-It is possible to modify the included content using ``<replace />``.
+It is possible to modify the included content using ``<replace />``,
+``<before />``, or ``<after />``.
 
 For example::
 
@@ -261,8 +262,38 @@ For example::
         </button>
     </replace>
 
+    <before css:content="#content-core">
+        <a href="mailto:contact@diazo.org">Ask for help</a>
+    </before>
+
 This may be combined with conditions and inline XSLT.
 
+Warning: it is not possible to both modify the content children and put them in
+the theme, for instance::
+
+    <before css:content-children="#one">
+        <span>Uno</span>
+    </before>
+
+    <before
+        css:theme="#alpha"
+        css:content-children="#one"
+        />
+
+would not work. But::
+
+    <before css:content-children="#one">
+        <span>Uno</span>
+    </before>
+
+    <before
+        css:theme="#alpha"
+        css:content="#one"
+        />
+
+would work (because the theme rule targets the `#one` content, not its
+children).
+
 Inline XSL directives
 ---------------------
 
@@ -405,4 +436,4 @@ The output then renders like this::
 
     <esi:include src="/extra.html"></esi:include>
 
-.. _`obsolete permitted doctype string`: http://dev.w3.org/html5/spec/Overview.html#obsolete-permitted-doctype-string
\ No newline at end of file
+.. _`obsolete permitted doctype string`: http://dev.w3.org/html5/spec/Overview.html#obsolete-permitted-doctype-string
diff --git a/lib/diazo/defaults.xsl b/lib/diazo/defaults.xsl
index df3992c..bf5bc65 100644
--- a/lib/diazo/defaults.xsl
+++ b/lib/diazo/defaults.xsl
@@ -37,4 +37,17 @@
         <!-- Filter out -->
     </xsl:template>
 
+    <xsl:template match="*" mode="before-content"/>
+    <xsl:template match="*" mode="before-content-children"/>
+    <xsl:template match="*" mode="after-content"/>
+    <xsl:template match="*" mode="after-content-children"/>
+    <xsl:template match="*" mode="replace-content">
+        <xsl:copy>
+            <xsl:apply-templates select="@*"/>
+            <xsl:apply-templates select="." mode="before-content-children"/>
+            <xsl:apply-templates select="node()"/>
+            <xsl:apply-templates select="." mode="after-content-children"/>
+        </xsl:copy>
+    </xsl:template>
+
 </xsl:stylesheet>
diff --git a/lib/diazo/emit-stylesheet.xsl b/lib/diazo/emit-stylesheet.xsl
index e0e09b2..47c2d6f 100644
--- a/lib/diazo/emit-stylesheet.xsl
+++ b/lib/diazo/emit-stylesheet.xsl
@@ -20,7 +20,7 @@
     <xsl:variable name="rules" select="//dv:*[@theme]"/>
     <xsl:variable name="drop-content-rules" select="//dv:drop[@content]"/>
     <xsl:variable name="strip-content-rules" select="//dv:strip[@content]"/>
-    <xsl:variable name="replace-content-rules" select="//dv:replace[@content and not(@theme)]"/>
+    <xsl:variable name="before-replace-after-content-selectors" select="//dv:*[local-name()='before' or local-name()='replace' or local-name()='after'][@content and not(@theme) and not(@content-children)]/@content|//dv:*[local-name()='before' or local-name()='replace' or local-name()='after'][@content and not(@theme) and @content-children]/@content-children"/>
     <xsl:variable name="replace-content-children-rules" select="//dv:replace[@content-children and not(@theme)]"/>
     <xsl:variable name="inline-xsl" select="/dv:rules/xsl:*"/>
     <xsl:variable name="themes" select="//dv:theme"/>
@@ -198,7 +198,7 @@
             <xsl:call-template name="strip-content"/>
             <!-- If there are any <replace @content> rules, put it in
             here. -->
-            <xsl:call-template name="replace-content"/>
+            <xsl:call-template name="before-replace-after-content"/>
             <!-- If there are any <replace @content-children> rules, put it in
             here. -->
             <xsl:call-template name="replace-content-children"/>
@@ -335,33 +335,191 @@
         </xsl:for-each>
     </xsl:template>
 
-    <xsl:template name="replace-content">
-        <xsl:for-each select="$replace-content-rules">
-            <xsl:text>&#10;    </xsl:text>
-            <xsl:call-template name="debug-comment" select="."/>
-            <xsl:text>&#10;    </xsl:text>
-            <xsl:element name="xsl:template">
-                <xsl:attribute name="match">
-                    <xsl:value-of select="@content"/>
-                    <xsl:if test="@merged-condition">
-                        <xsl:text>[</xsl:text>
-                        <xsl:choose>
-                            <xsl:when test="contains(@merged-condition, '$')">
-                                <!-- variable references are not allowed in template match patterns -->
-                                <xsl:text>dyn:evaluate(</xsl:text>
-                                <xsl:call-template name="escape-string">
-                                    <xsl:with-param name="string" select="@merged-condition"/>
-                                </xsl:call-template>
-                                <xsl:text>)</xsl:text>
-                            </xsl:when>
-                            <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
-                        </xsl:choose>
-                        <xsl:text>]</xsl:text>
+    <xsl:template name="before-replace-after-content">
+        <xsl:if test="$before-replace-after-content-selectors">
+
+            <xsl:for-each select="$before-replace-after-content-selectors">
+                <xsl:variable name="current" select="."/>
+                <xsl:variable name="matching-before" select="//dv:before[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-before-children" select="//dv:before[@content-children=$current and not(@theme)]"/>
+                <xsl:variable name="matching-replace" select="//dv:replace[(@content=$current or @content-children=$current) and not(@theme)]"/>
+                <xsl:variable name="matching-after" select="//dv:after[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-after-children" select="//dv:after[@content-children=$current and not(@theme)]"/>
+
+                <!-- filter so we get each selector only once -->
+                <xsl:if test="generate-id() = generate-id($before-replace-after-content-selectors[. = $current][1])">
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:element name="xsl:template">
+                        <xsl:attribute name="match">
+                            <xsl:value-of select="$current"/>
+                        </xsl:attribute>
+                        <xsl:text>&#10;    </xsl:text>
+                        <xsl:element name="xsl:apply-templates">
+                            <xsl:attribute name="select">.</xsl:attribute>
+                            <xsl:attribute name="mode">before-content</xsl:attribute>
+                        </xsl:element>
+                        <xsl:text>&#10;    </xsl:text>
+                        <xsl:element name="xsl:apply-templates">
+                            <xsl:attribute name="select">.</xsl:attribute>
+                            <xsl:attribute name="mode">replace-content</xsl:attribute>
+                        </xsl:element>
+                        <xsl:text>&#10;    </xsl:text>
+                        <xsl:element name="xsl:apply-templates">
+                            <xsl:attribute name="select">.</xsl:attribute>
+                            <xsl:attribute name="mode">after-content</xsl:attribute>
+                        </xsl:element>
+                        <xsl:text>&#10;</xsl:text>
+                    </xsl:element>
+                    <xsl:text>&#10;</xsl:text>
+                </xsl:if>
+            </xsl:for-each>
+
+            <xsl:for-each select="$before-replace-after-content-selectors">
+                <xsl:variable name="current" select="."/>
+                <xsl:variable name="matching-before" select="//dv:before[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-before-children" select="//dv:before[@content-children=$current and not(@theme)]"/>
+                <xsl:variable name="matching-replace" select="//dv:replace[(@content=$current or @content-children=$current) and not(@theme)]"/>
+                <xsl:variable name="matching-after" select="//dv:after[@content=$current and not(@theme)]"/>
+                <xsl:variable name="matching-after-children" select="//dv:after[@content-children=$current and not(@theme)]"/>
+
+                <!-- filter so we get each selector only once -->
+                <xsl:if test="generate-id() = generate-id($before-replace-after-content-selectors[. = $current][1])">
+                    <xsl:if test="$matching-before">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">before-content</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-before" />
+                            </xsl:call-template>
+                        </xsl:element>
                     </xsl:if>
-                </xsl:attribute>
-                <xsl:copy-of select="node()"/>
-            </xsl:element>
-            <xsl:text>&#10;</xsl:text>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="$matching-before-children">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">before-content-children</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-before-children" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+
+                    <xsl:if test="$matching-replace">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">replace-content</xsl:attribute>
+                            <xsl:choose>
+                                <xsl:when test="$matching-replace[@merged-condition]">
+                                    <xsl:element name="xsl:choose">
+                                        <xsl:for-each select="$matching-replace">
+                                            <xsl:text>&#10;    </xsl:text>
+                                            <xsl:choose>
+                                                <xsl:when test="@merged-condition">
+                                                    <xsl:element name="xsl:when">
+                                                        <xsl:attribute name="test">
+                                                            <xsl:choose>
+                                                                <xsl:when test="contains(@merged-condition, '$')">
+                                                                    <!-- variable references are not allowed in template match patterns -->
+                                                                    <xsl:text>dyn:evaluate(</xsl:text>
+                                                                    <xsl:call-template name="escape-string">
+                                                                        <xsl:with-param name="string" select="@merged-condition"/>
+                                                                    </xsl:call-template>
+                                                                    <xsl:text>)</xsl:text>
+                                                                </xsl:when>
+                                                                <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
+                                                            </xsl:choose>
+                                                        </xsl:attribute>
+                                                        <xsl:copy-of select="node()"/>
+                                                    </xsl:element>
+                                                </xsl:when>
+                                                <xsl:otherwise>
+                                                    <xsl:copy-of select="node()"/>
+                                                </xsl:otherwise>
+                                            </xsl:choose>
+                                        </xsl:for-each>
+                                        <xsl:element name="xsl:otherwise">
+                                            <xsl:call-template name="include-content-with-children-rules" />
+                                        </xsl:element>
+                                        <xsl:text>&#10;</xsl:text>
+                                    </xsl:element>
+                                </xsl:when>
+                                <xsl:otherwise>
+                                    <xsl:for-each select="$matching-replace">
+                                        <xsl:copy-of select="node()"/>
+                                    </xsl:for-each>
+                                </xsl:otherwise>
+                            </xsl:choose>
+                        </xsl:element>
+                        <xsl:text>&#10;</xsl:text>
+                    </xsl:if>
+
+                    <xsl:if test="$matching-after">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">after-content</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-after" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                    <xsl:if test="$matching-after-children">
+                        <xsl:text>&#10;</xsl:text>
+                        <xsl:element name="xsl:template">
+                            <xsl:attribute name="match">
+                                <xsl:value-of select="$current"/>
+                            </xsl:attribute>
+                            <xsl:attribute name="mode">after-content-children</xsl:attribute>
+                            <xsl:call-template name="include-all-with-condition">
+                                <xsl:with-param name="matching-rules" select="$matching-after-children" />
+                            </xsl:call-template>
+                        </xsl:element>
+                    </xsl:if>
+                    <xsl:text>&#10;</xsl:text>
+                </xsl:if>
+            </xsl:for-each>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template name="include-all-with-condition">
+        <xsl:param name="matching-rules"/>
+        <xsl:for-each select="$matching-rules">
+            <xsl:choose>
+                <xsl:when test="@merged-condition">
+                    <xsl:element name="xsl:if">
+                        <xsl:attribute name="test">
+                            <xsl:choose>
+                                <xsl:when test="contains(@merged-condition, '$')">
+                                    <!-- variable references are not allowed in template match patterns -->
+                                    <xsl:text>dyn:evaluate(</xsl:text>
+                                    <xsl:call-template name="escape-string">
+                                        <xsl:with-param name="string" select="@merged-condition"/>
+                                    </xsl:call-template>
+                                    <xsl:text>)</xsl:text>
+                                </xsl:when>
+                                <xsl:otherwise><xsl:value-of select="@merged-condition"/></xsl:otherwise>
+                            </xsl:choose>
+                        </xsl:attribute>
+                        <xsl:copy-of select="node()"/>
+                    </xsl:element>
+                </xsl:when>
+                <xsl:otherwise>
+                    <xsl:copy-of select="node()"/>
+                </xsl:otherwise>
+            </xsl:choose>
         </xsl:for-each>
     </xsl:template>
 
@@ -401,13 +559,38 @@
     </xsl:template>
 
     <xsl:template name="include-content">
-        <xsl:text>&#10;            </xsl:text>
+        <xsl:text>&#10;    </xsl:text>
         <xsl:element name="xsl:copy">
-            <xsl:text>&#10;                </xsl:text>
+            <xsl:text>&#10;        </xsl:text>
             <xsl:element name="xsl:apply-templates">
                 <xsl:attribute name="select">@*|node()</xsl:attribute>
             </xsl:element>
-            <xsl:text>&#10;            </xsl:text>
+            <xsl:text>&#10;    </xsl:text>
+        </xsl:element>
+    </xsl:template>
+
+    <xsl:template name="include-content-with-children-rules">
+        <xsl:text>&#10;</xsl:text>
+        <xsl:element name="xsl:copy">
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">@*</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">.</xsl:attribute>
+                <xsl:attribute name="mode">before-content-children</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">node()</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;    </xsl:text>
+            <xsl:element name="xsl:apply-templates">
+                <xsl:attribute name="select">.</xsl:attribute>
+                <xsl:attribute name="mode">after-content-children</xsl:attribute>
+            </xsl:element>
+            <xsl:text>&#10;</xsl:text>
         </xsl:element>
     </xsl:template>
 
diff --git a/lib/diazo/tests/before-content-conditional/content.html b/lib/diazo/tests/before-content-conditional/content.html
new file mode 100644
index 0000000..c98fb96
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/content.html
@@ -0,0 +1,8 @@
+<html>
+  <body>
+    <div id="#main">
+      <p id="one">one</p>
+      <p id="two">two</p>
+    </div>
+  </body>
+</html>
diff --git a/lib/diazo/tests/before-content-conditional/output.html b/lib/diazo/tests/before-content-conditional/output.html
new file mode 100644
index 0000000..8d471a4
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/output.html
@@ -0,0 +1,12 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <body>
+    <h1>Title</h1>
+    <span>Uno</span>
+    <span>Un</span>
+    <p id="one">one</p>
+    <div id="alpha"></div>
+    <div id="beta"></div>
+  </body>
+</html>
+
diff --git a/lib/diazo/tests/before-content-conditional/rules.xml b/lib/diazo/tests/before-content-conditional/rules.xml
new file mode 100644
index 0000000..f381214
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/rules.xml
@@ -0,0 +1,25 @@
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+    >
+
+    <before css:content="#one">
+        <span>Uno</span>
+    </before>
+
+    <before css:content="#one" css:if-content="#two">
+        <span>Un</span>
+    </before>
+
+    <before css:content="#one" css:if-content="#no-match">
+        <span>Uchi</span>
+    </before>
+    
+    <before
+        css:theme="#alpha"
+        css:content="#one"
+        css:if-content="#two"
+        />
+
+</rules>
diff --git a/lib/diazo/tests/before-content-conditional/theme.html b/lib/diazo/tests/before-content-conditional/theme.html
new file mode 100644
index 0000000..4c49574
--- /dev/null
+++ b/lib/diazo/tests/before-content-conditional/theme.html
@@ -0,0 +1,7 @@
+<html>
+<body>
+  <h1>Title</h1>
+  <div id="alpha"></div>
+  <div id="beta"></div>
+</body>
+</html>
diff --git a/lib/diazo/tests/v1-after-content-children/output.html b/lib/diazo/tests/v1-after-content-children/output.html
index 09cf33d..dab1af0 100644
--- a/lib/diazo/tests/v1-after-content-children/output.html
+++ b/lib/diazo/tests/v1-after-content-children/output.html
@@ -4,7 +4,7 @@
     <div>
     <h1>Title</h1>
     <div id="alpha">text</div>one
-    <div id="beta"><span>b</span></div>two
+    <div id="beta"><span>b</span></div><p id="two">two<span>Uno</span></p>
     <div id="delta"><span>d</span></div><span>three</span>
   </div>
   </body>
diff --git a/lib/diazo/tests/v1-after-content-children/rules.xml b/lib/diazo/tests/v1-after-content-children/rules.xml
index 32b84fe..a4f090a 100644
--- a/lib/diazo/tests/v1-after-content-children/rules.xml
+++ b/lib/diazo/tests/v1-after-content-children/rules.xml
@@ -4,6 +4,16 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <!-- will not work -->
+    <after css:content-children="#one">
+        <span>Uno</span>
+    </after>
+
+    <!-- will work -->
+    <after css:content-children="#two">
+        <span>Uno</span>
+    </after>
+
     <after
         css:theme="#alpha"
         css:content-children="#one"
@@ -11,7 +21,7 @@
 
     <after
         css:theme="#beta"
-        css:content-children="#two"
+        css:content="#two"
         />
 
     <after
diff --git a/lib/diazo/tests/v1-after/output.html b/lib/diazo/tests/v1-after/output.html
index d3605ee..2049802 100644
--- a/lib/diazo/tests/v1-after/output.html
+++ b/lib/diazo/tests/v1-after/output.html
@@ -4,6 +4,7 @@
     <h1>Title</h1>
     <div id="alpha"></div>
     <p id="one">one</p>
+    <span>Uno</span>
     <div id="beta"></div>
   </body>
 </html>
diff --git a/lib/diazo/tests/v1-after/rules.xml b/lib/diazo/tests/v1-after/rules.xml
index 40c9af4..5bebb3e 100644
--- a/lib/diazo/tests/v1-after/rules.xml
+++ b/lib/diazo/tests/v1-after/rules.xml
@@ -4,6 +4,10 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <after css:content="#one">
+        <span>Uno</span>
+    </after>
+
     <after
         css:theme="#alpha"
         css:content="#one"
diff --git a/lib/diazo/tests/v1-before-content-children/output.html b/lib/diazo/tests/v1-before-content-children/output.html
index 0f84de3..262322e 100644
--- a/lib/diazo/tests/v1-before-content-children/output.html
+++ b/lib/diazo/tests/v1-before-content-children/output.html
@@ -4,7 +4,7 @@
     <div>
       <h1>Title</h1>
       one<div id="alpha">text</div>
-      two<div id="beta"><span>b</span></div>
+      <p id="two"><span>Uno</span>two</p><div id="beta"><span>b</span></div>
       <span>three</span><div id="delta"><span>d</span></div>
     </div>
   </body>
diff --git a/lib/diazo/tests/v1-before-content-children/rules.xml b/lib/diazo/tests/v1-before-content-children/rules.xml
index 1035d00..17fbbbc 100644
--- a/lib/diazo/tests/v1-before-content-children/rules.xml
+++ b/lib/diazo/tests/v1-before-content-children/rules.xml
@@ -4,6 +4,16 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <!-- will not work -->
+    <before css:content-children="#one">
+        <span>Uno</span>
+    </before>
+
+    <!-- will work -->
+    <before css:content-children="#two">
+        <span>Uno</span>
+    </before>
+
     <before
         css:theme="#alpha"
         css:content-children="#one"
@@ -11,7 +21,7 @@
 
     <before
         css:theme="#beta"
-        css:content-children="#two"
+        css:content="#two"
         />
 
     <before
diff --git a/lib/diazo/tests/v1-before-content-content-children/content.html b/lib/diazo/tests/v1-before-content-content-children/content.html
new file mode 100644
index 0000000..7ffa31b
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/content.html
@@ -0,0 +1,5 @@
+<html>
+  <body>
+    <p id="one"><span>one</span><span>1</span></p>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-content-content-children/output.html b/lib/diazo/tests/v1-before-content-content-children/output.html
new file mode 100644
index 0000000..1180c1f
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/output.html
@@ -0,0 +1,11 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <body>
+    <h1>Title</h1>
+    <p id="one">
+        <span>before</span>
+        <span>one</span>
+        <span>1</span>
+    </p>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-content-content-children/rules.xml b/lib/diazo/tests/v1-before-content-content-children/rules.xml
new file mode 100644
index 0000000..f85e512
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/rules.xml
@@ -0,0 +1,16 @@
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+    >
+
+    <before css:content-children="#one">
+        <span>before</span>
+    </before>
+
+    <replace
+        css:theme="#alpha"
+        css:content="#one"
+        />
+
+</rules>
diff --git a/lib/diazo/tests/v1-before-content-content-children/theme.html b/lib/diazo/tests/v1-before-content-content-children/theme.html
new file mode 100644
index 0000000..8139f00
--- /dev/null
+++ b/lib/diazo/tests/v1-before-content-content-children/theme.html
@@ -0,0 +1,6 @@
+<html>
+<body>
+  <h1>Title</h1>
+  <div id="alpha"></div>
+</body>
+</html>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/content.html b/lib/diazo/tests/v1-before-replace-after-content/content.html
new file mode 100644
index 0000000..4f0801f
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/content.html
@@ -0,0 +1,5 @@
+<html>
+  <body>
+    <p id="one" class="after">one</p>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/output.html b/lib/diazo/tests/v1-before-replace-after-content/output.html
new file mode 100644
index 0000000..d03dac1
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/output.html
@@ -0,0 +1,9 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <body>
+    <h1>Title</h1>
+    <span>before</span>
+    <span>replace</span>
+    <span>after</span>
+  </body>
+</html>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/rules.xml b/lib/diazo/tests/v1-before-replace-after-content/rules.xml
new file mode 100644
index 0000000..111336a
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/rules.xml
@@ -0,0 +1,24 @@
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+    >
+
+    <before css:content="#one">
+        <span>before</span>
+    </before>
+
+    <replace css:content="#one">
+        <span>replace</span>
+    </replace>
+
+    <after css:content=".after">
+        <span>after</span>
+    </after>
+
+    <replace
+        css:theme="#alpha"
+        css:content="#one"
+        />
+
+</rules>
diff --git a/lib/diazo/tests/v1-before-replace-after-content/theme.html b/lib/diazo/tests/v1-before-replace-after-content/theme.html
new file mode 100644
index 0000000..8139f00
--- /dev/null
+++ b/lib/diazo/tests/v1-before-replace-after-content/theme.html
@@ -0,0 +1,6 @@
+<html>
+<body>
+  <h1>Title</h1>
+  <div id="alpha"></div>
+</body>
+</html>
diff --git a/lib/diazo/tests/v1-before/output.html b/lib/diazo/tests/v1-before/output.html
index bed3833..6aa1672 100644
--- a/lib/diazo/tests/v1-before/output.html
+++ b/lib/diazo/tests/v1-before/output.html
@@ -2,6 +2,7 @@
 <html xmlns="http://www.w3.org/1999/xhtml">
   <body>
     <h1>Title</h1>
+    <span>Uno</span>
     <p id="one">one</p>
     <div id="alpha"></div>
     <div id="beta"></div>
diff --git a/lib/diazo/tests/v1-before/rules.xml b/lib/diazo/tests/v1-before/rules.xml
index 17aedd8..d0dce77 100644
--- a/lib/diazo/tests/v1-before/rules.xml
+++ b/lib/diazo/tests/v1-before/rules.xml
@@ -4,6 +4,10 @@
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     >
 
+    <before css:content="#one">
+        <span>Uno</span>
+    </before>
+    
     <before
         css:theme="#alpha"
         css:content="#one"


