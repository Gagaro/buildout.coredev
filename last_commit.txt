Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2015-09-22T10:39:45-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/dc02e3cad1ddae62d8a593364f227df4f07dfd8d

Fix CSRF errors on content creation keywords

Files changed:
M CHANGES.txt
M src/plone/app/robotframework/content.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 331483a..a0c8863 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 0.9.12 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Fix CSRF errors on content creation keywords
+  [vangheem]
 
 
 0.9.11 (2015-09-16)
diff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py
index 9b48a99..0cf0c80 100644
--- a/src/plone/app/robotframework/content.py
+++ b/src/plone/app/robotframework/content.py
@@ -1,19 +1,28 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility
+import os
+
 from Products.CMFCore.utils import getToolByName
+from plone.app.robotframework.config import HAS_BLOBS
+from plone.app.robotframework.config import HAS_DEXTERITY
+from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS
 from plone.app.robotframework.remote import RemoteLibrary
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 from plone.uuid.interfaces import IUUID
-from zope.component.hooks import getSite
-from zope.component import getUtility
 from zope.component import ComponentLookupError
-
-from plone.app.robotframework.config import HAS_DEXTERITY
-from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS
-from plone.app.robotframework.config import HAS_BLOBS
+from zope.component import getUtility
+from zope.component import queryUtility
+from zope.component.hooks import getSite
 from zope.event import notify
+from zope.interface import alsoProvides
 from zope.lifecycleevent import ObjectModifiedEvent
 
+try:
+    from plone.protect.interfaces import IDisableCSRFProtection
+except ImportError:
+    from zope.interface import Interface
+    class IDisableCSRFProtection(Interface):
+        pass
+
 if HAS_DEXTERITY:
     from plone.app.textfield.value import RichTextValue
 
@@ -37,13 +46,14 @@
     from zope.intid.interfaces import IIntIds
     from z3c.relationfield import RelationValue
 
-import os
-
 
 class Content(RemoteLibrary):
 
     def delete_content(self, uid_or_path):
         """Delete content by uid or path"""
+
+        alsoProvides(getRequest(), IDisableCSRFProtection)
+
         portal = getSite()
         pc = getToolByName(portal, 'portal_catalog')
         uid_results =\
@@ -57,6 +67,9 @@ def delete_content(self, uid_or_path):
 
     def create_content(self, *args, **kwargs):
         """Create content and return its UID"""
+
+        alsoProvides(getRequest(), IDisableCSRFProtection)
+
         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,
         # we must parse them here to support robotframework < 2.8.3.
         for arg in [x for x in args if '=' in x]:
@@ -226,6 +239,9 @@ def path_to_uid(self, path):
 
     def fire_transition(self, content, action):
         """Fire workflow action for content"""
+
+        alsoProvides(getRequest(), IDisableCSRFProtection)
+
         # It should be ok to use unrestricted-methods, because workflow
         # transition guard should proctect unprivileged transition:
         pc = getToolByName(self, 'portal_catalog')
@@ -238,6 +254,9 @@ def fire_transition(self, content, action):
 
     def global_allow(self, type_, value=True):
         """Allow type to be added globally."""
+
+        alsoProvides(getRequest(), IDisableCSRFProtection)
+
         portal = getSite()
         types_tool = getToolByName(portal, "portal_types")
         types_tool[type_].global_allow = value


Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2015-09-22T10:50:49-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/6cfa6aeb24772cc100c7104821006dfce28f8422

disable csrf in more places

Files changed:
A src/plone/app/robotframework/utils.py
M src/plone/app/robotframework/autologin.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/genericsetup.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/users.py

diff --git a/src/plone/app/robotframework/autologin.py b/src/plone/app/robotframework/autologin.py
index 37ee21b..547cdd8 100644
--- a/src/plone/app/robotframework/autologin.py
+++ b/src/plone/app/robotframework/autologin.py
@@ -2,6 +2,7 @@
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
 from Products.PluggableAuthService.plugins import DomainAuthHelper
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 
 
 class AutoLogin(RemoteLibrary):
@@ -16,6 +17,7 @@ def enable_autologin_as(self, *args):
             Enable autologin as  Member  Contributor
 
         """
+        disableCSRFProtection()
         if 'robot_login' in self.acl_users.objectIds():
             self.acl_users.robot_login._domain_map.clear()
         else:
@@ -29,6 +31,7 @@ def enable_autologin_as(self, *args):
     def set_autologin_username(self, username):
         """Update autologin mapping with the given username
         """
+        disableCSRFProtection()
         if 'robot_login' not in self.acl_users.objectIds():
             raise Exception(u"Autologin is not enabled")
         if len(self.acl_users.robot_login._domain_map) == 0:
@@ -46,4 +49,5 @@ def disable_autologin(self):
 
         """
         if 'robot_login' in self.acl_users.objectIds():
+            disableCSRFProtection()
             self.acl_users.robot_login._domain_map.clear()
diff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py
index 0cf0c80..7c1c91c 100644
--- a/src/plone/app/robotframework/content.py
+++ b/src/plone/app/robotframework/content.py
@@ -6,6 +6,7 @@
 from plone.app.robotframework.config import HAS_DEXTERITY
 from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 from plone.uuid.interfaces import IUUID
 from zope.component import ComponentLookupError
@@ -13,16 +14,9 @@
 from zope.component import queryUtility
 from zope.component.hooks import getSite
 from zope.event import notify
-from zope.interface import alsoProvides
+from zope.globalrequest import getRequest
 from zope.lifecycleevent import ObjectModifiedEvent
 
-try:
-    from plone.protect.interfaces import IDisableCSRFProtection
-except ImportError:
-    from zope.interface import Interface
-    class IDisableCSRFProtection(Interface):
-        pass
-
 if HAS_DEXTERITY:
     from plone.app.textfield.value import RichTextValue
 
@@ -32,7 +26,6 @@ class IDisableCSRFProtection(Interface):
     from z3c.form.interfaces import IDataManager
     from z3c.form.interfaces import IFieldWidget
     from zope.component import queryMultiAdapter
-    from zope.globalrequest import getRequest
     from zope.schema.interfaces import IFromUnicode
 
     if HAS_BLOBS:
@@ -51,9 +44,7 @@ class Content(RemoteLibrary):
 
     def delete_content(self, uid_or_path):
         """Delete content by uid or path"""
-
-        alsoProvides(getRequest(), IDisableCSRFProtection)
-
+        disableCSRFProtection()
         portal = getSite()
         pc = getToolByName(portal, 'portal_catalog')
         uid_results =\
@@ -67,9 +58,7 @@ def delete_content(self, uid_or_path):
 
     def create_content(self, *args, **kwargs):
         """Create content and return its UID"""
-
-        alsoProvides(getRequest(), IDisableCSRFProtection)
-
+        disableCSRFProtection()
         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,
         # we must parse them here to support robotframework < 2.8.3.
         for arg in [x for x in args if '=' in x]:
@@ -239,9 +228,7 @@ def path_to_uid(self, path):
 
     def fire_transition(self, content, action):
         """Fire workflow action for content"""
-
-        alsoProvides(getRequest(), IDisableCSRFProtection)
-
+        disableCSRFProtection()
         # It should be ok to use unrestricted-methods, because workflow
         # transition guard should proctect unprivileged transition:
         pc = getToolByName(self, 'portal_catalog')
@@ -254,9 +241,7 @@ def fire_transition(self, content, action):
 
     def global_allow(self, type_, value=True):
         """Allow type to be added globally."""
-
-        alsoProvides(getRequest(), IDisableCSRFProtection)
-
+        disableCSRFProtection()
         portal = getSite()
         types_tool = getToolByName(portal, "portal_types")
         types_tool[type_].global_allow = value
@@ -309,4 +294,4 @@ def prefill_image_types_dexterity(kwargs):
 
 
 def prefill_image_types_archetypes(kwargs):
-    kwargs['image'] = random_image()
+    kwargs['image'] = random_image()
\ No newline at end of file
diff --git a/src/plone/app/robotframework/genericsetup.py b/src/plone/app/robotframework/genericsetup.py
index 551ba94..155a5ed 100644
--- a/src/plone/app/robotframework/genericsetup.py
+++ b/src/plone/app/robotframework/genericsetup.py
@@ -1,11 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 
 
 class GenericSetup(RemoteLibrary):
 
     def apply_profile(self, name):
         """Apply named profile"""
+        disableCSRFProtection()
         from Products.CMFCore.utils import getToolByName
         portal_setup = getToolByName(self, 'portal_setup')
-        portal_setup.runAllImportStepsFromProfile('profile-%s' % name)
+        portal_setup.runAllImportStepsFromProfile('profile-%s' % name)
\ No newline at end of file
diff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py
index 3e8f480..01a00fc 100644
--- a/src/plone/app/robotframework/i18n.py
+++ b/src/plone/app/robotframework/i18n.py
@@ -2,17 +2,18 @@
 import os
 
 from Products.CMFCore.utils import getToolByName
+from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 from zope.component.hooks import getSite
 from zope.globalrequest import getRequest
 from zope.i18n import translate
 
-from plone.app.robotframework.remote import RemoteLibrary
-
 
 class I18N(RemoteLibrary):
 
     def set_default_language(self, language=None):
         """Change portal default language"""
+        disableCSRFProtection()
         portal = getSite()
         portal_languages = getToolByName(portal, 'portal_languages')
         if language is None:
@@ -44,4 +45,4 @@ def translate(self, msgid, *args, **kwargs):
             return translate(
                 msgid, context=request,
                 domain=kwargs.get('domain') or 'plone',
-                default=kwargs.get('default') or msgid, mapping=mapping)
+                default=kwargs.get('default') or msgid, mapping=mapping)
\ No newline at end of file
diff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py
index ade2df7..ed5325e 100644
--- a/src/plone/app/robotframework/users.py
+++ b/src/plone/app/robotframework/users.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.component.hooks import getSite
@@ -16,6 +17,7 @@ class Users(RemoteLibrary):
 
     def create_user(self, *args, **kwargs):
         """Create user with given details and return its id"""
+        disableCSRFProtection()
         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,
         # we must parse them here to support robotframework < 2.8.3.
         for arg in [x for x in args if '=' in x]:
@@ -54,4 +56,4 @@ def create_user(self, *args, **kwargs):
 
         properties['username'] = user_id
         registration.addMember(
-            user_id, password, roles, properties=properties)
+            user_id, password, roles, properties=properties)
\ No newline at end of file
diff --git a/src/plone/app/robotframework/utils.py b/src/plone/app/robotframework/utils.py
new file mode 100644
index 0000000..671fc6f
--- /dev/null
+++ b/src/plone/app/robotframework/utils.py
@@ -0,0 +1,13 @@
+from zope.interface import alsoProvides
+from zope.globalrequest import getRequest
+
+try:
+    from plone.protect.interfaces import IDisableCSRFProtection
+except ImportError:
+    from zope.interface import Interface
+    class IDisableCSRFProtection(Interface):
+        pass
+
+
+def disableCSRFProtection():
+    alsoProvides(getRequest(), IDisableCSRFProtection)
\ No newline at end of file


Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2015-09-22T12:22:20-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/c67d5edfd9c7fb843d132be3c5cbe26321eff918

Merge pull request #46 from plone/csrf-test-fix

Fix CSRF errors on content creation keywords

Files changed:
A src/plone/app/robotframework/utils.py
M CHANGES.txt
M src/plone/app/robotframework/autologin.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/genericsetup.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/users.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 331483a..a0c8863 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 0.9.12 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Fix CSRF errors on content creation keywords
+  [vangheem]
 
 
 0.9.11 (2015-09-16)
diff --git a/src/plone/app/robotframework/autologin.py b/src/plone/app/robotframework/autologin.py
index 37ee21b..547cdd8 100644
--- a/src/plone/app/robotframework/autologin.py
+++ b/src/plone/app/robotframework/autologin.py
@@ -2,6 +2,7 @@
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
 from Products.PluggableAuthService.plugins import DomainAuthHelper
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 
 
 class AutoLogin(RemoteLibrary):
@@ -16,6 +17,7 @@ def enable_autologin_as(self, *args):
             Enable autologin as  Member  Contributor
 
         """
+        disableCSRFProtection()
         if 'robot_login' in self.acl_users.objectIds():
             self.acl_users.robot_login._domain_map.clear()
         else:
@@ -29,6 +31,7 @@ def enable_autologin_as(self, *args):
     def set_autologin_username(self, username):
         """Update autologin mapping with the given username
         """
+        disableCSRFProtection()
         if 'robot_login' not in self.acl_users.objectIds():
             raise Exception(u"Autologin is not enabled")
         if len(self.acl_users.robot_login._domain_map) == 0:
@@ -46,4 +49,5 @@ def disable_autologin(self):
 
         """
         if 'robot_login' in self.acl_users.objectIds():
+            disableCSRFProtection()
             self.acl_users.robot_login._domain_map.clear()
diff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py
index 9b48a99..7c1c91c 100644
--- a/src/plone/app/robotframework/content.py
+++ b/src/plone/app/robotframework/content.py
@@ -1,17 +1,20 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility
+import os
+
 from Products.CMFCore.utils import getToolByName
+from plone.app.robotframework.config import HAS_BLOBS
+from plone.app.robotframework.config import HAS_DEXTERITY
+from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 from plone.uuid.interfaces import IUUID
-from zope.component.hooks import getSite
-from zope.component import getUtility
 from zope.component import ComponentLookupError
-
-from plone.app.robotframework.config import HAS_DEXTERITY
-from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS
-from plone.app.robotframework.config import HAS_BLOBS
+from zope.component import getUtility
+from zope.component import queryUtility
+from zope.component.hooks import getSite
 from zope.event import notify
+from zope.globalrequest import getRequest
 from zope.lifecycleevent import ObjectModifiedEvent
 
 if HAS_DEXTERITY:
@@ -23,7 +26,6 @@
     from z3c.form.interfaces import IDataManager
     from z3c.form.interfaces import IFieldWidget
     from zope.component import queryMultiAdapter
-    from zope.globalrequest import getRequest
     from zope.schema.interfaces import IFromUnicode
 
     if HAS_BLOBS:
@@ -37,13 +39,12 @@
     from zope.intid.interfaces import IIntIds
     from z3c.relationfield import RelationValue
 
-import os
-
 
 class Content(RemoteLibrary):
 
     def delete_content(self, uid_or_path):
         """Delete content by uid or path"""
+        disableCSRFProtection()
         portal = getSite()
         pc = getToolByName(portal, 'portal_catalog')
         uid_results =\
@@ -57,6 +58,7 @@ def delete_content(self, uid_or_path):
 
     def create_content(self, *args, **kwargs):
         """Create content and return its UID"""
+        disableCSRFProtection()
         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,
         # we must parse them here to support robotframework < 2.8.3.
         for arg in [x for x in args if '=' in x]:
@@ -226,6 +228,7 @@ def path_to_uid(self, path):
 
     def fire_transition(self, content, action):
         """Fire workflow action for content"""
+        disableCSRFProtection()
         # It should be ok to use unrestricted-methods, because workflow
         # transition guard should proctect unprivileged transition:
         pc = getToolByName(self, 'portal_catalog')
@@ -238,6 +241,7 @@ def fire_transition(self, content, action):
 
     def global_allow(self, type_, value=True):
         """Allow type to be added globally."""
+        disableCSRFProtection()
         portal = getSite()
         types_tool = getToolByName(portal, "portal_types")
         types_tool[type_].global_allow = value
@@ -290,4 +294,4 @@ def prefill_image_types_dexterity(kwargs):
 
 
 def prefill_image_types_archetypes(kwargs):
-    kwargs['image'] = random_image()
+    kwargs['image'] = random_image()
\ No newline at end of file
diff --git a/src/plone/app/robotframework/genericsetup.py b/src/plone/app/robotframework/genericsetup.py
index 551ba94..155a5ed 100644
--- a/src/plone/app/robotframework/genericsetup.py
+++ b/src/plone/app/robotframework/genericsetup.py
@@ -1,11 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 
 
 class GenericSetup(RemoteLibrary):
 
     def apply_profile(self, name):
         """Apply named profile"""
+        disableCSRFProtection()
         from Products.CMFCore.utils import getToolByName
         portal_setup = getToolByName(self, 'portal_setup')
-        portal_setup.runAllImportStepsFromProfile('profile-%s' % name)
+        portal_setup.runAllImportStepsFromProfile('profile-%s' % name)
\ No newline at end of file
diff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py
index 3e8f480..01a00fc 100644
--- a/src/plone/app/robotframework/i18n.py
+++ b/src/plone/app/robotframework/i18n.py
@@ -2,17 +2,18 @@
 import os
 
 from Products.CMFCore.utils import getToolByName
+from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 from zope.component.hooks import getSite
 from zope.globalrequest import getRequest
 from zope.i18n import translate
 
-from plone.app.robotframework.remote import RemoteLibrary
-
 
 class I18N(RemoteLibrary):
 
     def set_default_language(self, language=None):
         """Change portal default language"""
+        disableCSRFProtection()
         portal = getSite()
         portal_languages = getToolByName(portal, 'portal_languages')
         if language is None:
@@ -44,4 +45,4 @@ def translate(self, msgid, *args, **kwargs):
             return translate(
                 msgid, context=request,
                 domain=kwargs.get('domain') or 'plone',
-                default=kwargs.get('default') or msgid, mapping=mapping)
+                default=kwargs.get('default') or msgid, mapping=mapping)
\ No newline at end of file
diff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py
index ade2df7..ed5325e 100644
--- a/src/plone/app/robotframework/users.py
+++ b/src/plone/app/robotframework/users.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from plone.app.robotframework.remote import RemoteLibrary
+from plone.app.robotframework.utils import disableCSRFProtection
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.component.hooks import getSite
@@ -16,6 +17,7 @@ class Users(RemoteLibrary):
 
     def create_user(self, *args, **kwargs):
         """Create user with given details and return its id"""
+        disableCSRFProtection()
         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,
         # we must parse them here to support robotframework < 2.8.3.
         for arg in [x for x in args if '=' in x]:
@@ -54,4 +56,4 @@ def create_user(self, *args, **kwargs):
 
         properties['username'] = user_id
         registration.addMember(
-            user_id, password, roles, properties=properties)
+            user_id, password, roles, properties=properties)
\ No newline at end of file
diff --git a/src/plone/app/robotframework/utils.py b/src/plone/app/robotframework/utils.py
new file mode 100644
index 0000000..671fc6f
--- /dev/null
+++ b/src/plone/app/robotframework/utils.py
@@ -0,0 +1,13 @@
+from zope.interface import alsoProvides
+from zope.globalrequest import getRequest
+
+try:
+    from plone.protect.interfaces import IDisableCSRFProtection
+except ImportError:
+    from zope.interface import Interface
+    class IDisableCSRFProtection(Interface):
+        pass
+
+
+def disableCSRFProtection():
+    alsoProvides(getRequest(), IDisableCSRFProtection)
\ No newline at end of file


