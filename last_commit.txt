Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2015-10-30T22:58:18+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/b1c86edd47cc59c7d232e51f57800fd9620dfdf8

No need to escape underscores

Files changed:
M docs/advanced/custom-add-and-edit-forms.rst

diff --git a/docs/advanced/custom-add-and-edit-forms.rst b/docs/advanced/custom-add-and-edit-forms.rst
index 9e173c3..e7c088c 100644
--- a/docs/advanced/custom-add-and-edit-forms.rst
+++ b/docs/advanced/custom-add-and-edit-forms.rst
@@ -101,8 +101,8 @@ What actually happens is this:
 
 - Plone renders the :guilabel:`add` menu.
   - To do so, it looks, among other places, for actions in the *folder/add* category. This category is provided by the ``portal_types`` tool.
-  - The *folder/add* action category is constructed by looking up the ``add\_view\_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use.
-  - The default ``add\_view\_expr`` in Dexterity (and CMF 2.2) is ``string:${folder\_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name.
+  - The *folder/add* action category is constructed by looking up the ``add_view_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use.
+  - The default ``add_view_expr`` in Dexterity (and CMF 2.2) is ``string:${folder_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name.
 - A user clicks on an entry in the menu and is taken to a URL like ``/path/to/folder/++add++my.type``.
     - The ``++add++`` namespace adapter looks up the FTI with the given name, and gets its ``factory`` property.
     - The ``factory`` property of an FTI gives the name of a particular ``zope.component.interfaces.IFactory`` utility, which is used later to construct an instance of the content object.  Dexterity automatically registers a factory instance for each type, with a name that matches the type name, although it is possible to use an existing factory name in a new type.


