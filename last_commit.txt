Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-19T16:35:54+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/1a0d613f5543e110d601267d586f3db2d3e6ab52

Remove all commented out tests that have already been moved to CMFPlone.

Files changed:
M plone/app/controlpanel/tests/test_doctests.py
D plone/app/controlpanel/tests/editing.txt
D plone/app/controlpanel/tests/mail.txt
D plone/app/controlpanel/tests/navigation.txt
D plone/app/controlpanel/tests/security.txt
D plone/app/controlpanel/tests/security_enable_user_folder.txt
D plone/app/controlpanel/tests/site.txt
D plone/app/controlpanel/tests/skins.txt
D plone/app/controlpanel/tests/types.txt

diff --git a/plone/app/controlpanel/tests/editing.txt b/plone/app/controlpanel/tests/editing.txt
deleted file mode 100644
index 19f034d..0000000
--- a/plone/app/controlpanel/tests/editing.txt
+++ /dev/null
@@ -1,44 +0,0 @@
-Editing control panel
-=====================
-
-First some initial setup code:
-
-    >>> from zope.component import getUtility
-    >>> from Products.CMFCore.interfaces import IPropertiesTool
-    >>> ptool = getUtility(IPropertiesTool)
-    >>> self.loginAsManager()
-
-Viewing the site control panel
------------------------------
-
-    >>> self.browser.open('http://nohost/plone/@@editing-controlpanel')
-    >>> self.browser.url
-    'http://nohost/plone/@@editing-controlpanel'
-
-Click the cancel button:
-
-    >>> self.browser.getControl(name="form.actions.cancel").click()
-    >>> self.browser.url.endswith('plone_control_panel')
-    True
-
-There should be still no changes:
-
-    >>> 'Changes canceled.' in self.browser.contents
-    True
-
-
-Configure the locking for the site
-----------------------------------
-
-Standard behavior for locking is to have it enabled. Let's change that:
-
-    >>> self.browser.open('http://nohost/plone/@@editing-controlpanel')
-    >>> self.browser.getControl(name='form.lock_on_ttw_edit').value
-    True
-    >>> self.browser.getControl(name='form.lock_on_ttw_edit').value = False
-    >>> self.browser.getControl(name="form.actions.save").click()
-
-Confirm that our change updated the property:
-
-    >>> ptool.site_properties.lock_on_ttw_edit
-    False
diff --git a/plone/app/controlpanel/tests/mail.txt b/plone/app/controlpanel/tests/mail.txt
deleted file mode 100644
index 7c7121b..0000000
--- a/plone/app/controlpanel/tests/mail.txt
+++ /dev/null
@@ -1,107 +0,0 @@
-Mail control panel
-==================
-
-First some initial setup code:
-
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> from zope.component import getUtility
-    >>> from Products.MailHost.interfaces import IMailHost
-    >>> mailhost = getUtility(IMailHost)
-    >>> self.loginAsManager()
-
-Viewing the mail control panel
---------------------------------
-
-    >>> self.browser.open('http://nohost/plone/@@mail-controlpanel')
-    >>> self.browser.url.endswith('mail-controlpanel')
-    True
-
-Click the cancel button:
-
-    >>> self.browser.getControl(name="form.actions.cancel").click()
-    >>> self.browser.url.endswith('plone_control_panel')
-    True
-
-There should be still no changes:
-
-    >>> 'Changes canceled.' in self.browser.contents
-    True
-
-Make some changes
------------------
-
-    >>> self.browser.open('http://nohost/plone/@@mail-controlpanel')
-    >>> self.browser.url.endswith('mail-controlpanel')
-    True
-
-    >>> self.browser.getControl(name='form.smtp_host').value = 'localhost2'
-    >>> self.browser.getControl(name='form.smtp_port').value = '2525'
-    >>> self.browser.getControl(name='form.smtp_userid').value = 'admin'
-    >>> self.browser.getControl(name='form.smtp_pass').value = 'secret'
-    >>> self.browser.getControl(name='form.email_from_name').value = 'Spambot'
-    >>> self.browser.getControl(name='form.email_from_address').value = 'spam@localhost'
-
-Click the save button:
-
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> self.browser.url.endswith('mail-controlpanel')
-    True
-
-We should be informed that something has changed:
-
-    >>> 'Changes saved.' in self.browser.contents
-    True
-
-Make sure the changes have been applied correctly to the mailhost:
-
-    >>> mailhost.smtp_host
-    u'localhost2'
-
-    >>> mailhost.smtp_port
-    2525
-
-    >>> getattr(mailhost, 'smtp_userid', mailhost.smtp_uid)
-    u'admin'
-
-    >>> getattr(mailhost, 'smtp_pass', mailhost.smtp_pwd)
-    u'secret'
-
-    >>> self.site_props.email_from_name
-    u'Spambot'
-
-    >>> self.site_props.email_from_address
-    'spam@localhost'
-
-Dealing with non-ascii
-------------------------
-
-There is no problem if we use the control panel to fill in the values:
-
-    >>> self.browser.open('http://nohost/plone/@@mail-controlpanel')
-
-    >>> self.browser.getControl(name='form.email_from_name').value = '\xc3\x89\xc3\xa7 \xc3\xb6\xc5\x93 \xc3\xb2'
-
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> self.browser.url.endswith('mail-controlpanel')
-    True
-
-    >>> 'Changes saved.' in self.browser.contents
-    True
-
-    >>> self.site_props.email_from_name
-    u'\xc9\xe7 \xf6\u0153 \xf2'
-
-But we must deal with encoding if we someone set this info via ZMI:
-
-    >>> self.browser.open('http://nohost/plone/manage_propertiesForm')
-    >>> self.browser.getControl(name='email_from_name:string').value = '\xc3\x89\xc3\xa7 \xc3\xb6\xc5\x93 \xc3\xb2'
-    >>> self.browser.getControl(name="manage_editProperties:method").click()
-
-And the control panel should not break:
-
-    >>> self.browser.open('http://nohost/plone/@@mail-controlpanel')
-
-Even though data is stored as string:
-
-    >>> self.site_props.email_from_name
-    '\xc3\x89\xc3\xa7 \xc3\xb6\xc5\x93 \xc3\xb2'
diff --git a/plone/app/controlpanel/tests/navigation.txt b/plone/app/controlpanel/tests/navigation.txt
deleted file mode 100644
index 287b598..0000000
--- a/plone/app/controlpanel/tests/navigation.txt
+++ /dev/null
@@ -1,81 +0,0 @@
-Mail control panel
-==================
-
-First some initial setup code:
-
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> pprop = getToolByName(self, 'portal_properties')
-    >>> siteProps = pprop['site_properties']
-    >>> navProps = pprop['navtree_properties']
-    >>> self.loginAsManager()
-
-Viewing the mail control panel
---------------------------------
-
-    >>> self.browser.open('http://nohost/plone/@@navigation-controlpanel')
-    >>> self.browser.url.endswith('navigation-controlpanel')
-    True
-
-Click the cancel button:
-
-    >>> self.browser.getControl(name="form.actions.cancel").click()
-    >>> self.browser.url.endswith('plone_control_panel')
-    True
-
-There should be still no changes:
-
-    >>> 'Changes canceled.' in self.browser.contents
-    True
-
-Make some changes
------------------
-
-    >>> self.browser.getLink('Navigation').click()
-    >>> self.browser.url.endswith('navigation-controlpanel')
-    True
-
-    >>> self.browser.getControl('Automatically generate tabs', index=0).selected = False
-    >>> self.browser.getControl('Generate tabs for items other than folders').selected = False
-    >>> self.browser.getControl('Show items normally excluded from navigation if viewing their children.').selected = False
-    >>> self.browser.getControl('Collection', index=0).selected = False
-    >>> self.browser.getControl('Page').selected = False
-    >>> self.browser.getControl('News Item').selected = False
-    >>> self.browser.getControl('Filter on workflow state').selected = True
-    >>> self.browser.getControl('Private [private]').selected = True
-
-Click the save button:
-
-    >>> self.browser.getControl("Save").click()
-    >>> self.browser.url.endswith('navigation-controlpanel')
-    True
-
-We should be informed that something has changed:
-
-    >>> 'Changes saved.' in self.browser.contents
-    True
-
-Make sure the changes have been applied correctly:
-
-    >>> siteProps.disable_folder_sections
-    True
-
-    >>> siteProps.disable_nonfolderish_sections
-    True
-
-    >>> navProps.showAllParents
-    False
-
-    >>> 'Collection' in navProps.metaTypesNotToList
-    True
-
-    >>> 'Document' in navProps.metaTypesNotToList
-    True
-
-    >>> 'News Item' in navProps.metaTypesNotToList
-    True
-
-    >>> navProps.enable_wf_state_filtering
-    True
-
-    >>> 'private' in navProps.wf_states_to_show
-    True
diff --git a/plone/app/controlpanel/tests/security.txt b/plone/app/controlpanel/tests/security.txt
deleted file mode 100644
index b094171..0000000
--- a/plone/app/controlpanel/tests/security.txt
+++ /dev/null
@@ -1,133 +0,0 @@
-Security controlpanel
-=====================
-
-First some initial setup code. We are logging as the 'root' user with 'Manager' permission:
-
-    >>> browser = self.browser
-    >>> self.loginAsManager()
-
-Check some initial settings:
-
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> site_props = getToolByName(self.portal, 'portal_properties').site_properties
-    >>> site_props.getProperty('use_uuid_as_userid')
-    False
-    >>> site_props.getProperty('use_email_as_login')
-    True
-    >>> browser.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser.getControl(name='form.use_uuid_as_userid').value
-    False
-    >>> browser.getControl(name='form.use_email_as_login').value
-    True
-
-Several dozen users are created by the test setup.  Our installation
-code changes their login name to their email address.  Let's check a
-few things:
-
-    >>> pas = getToolByName(self.portal, 'acl_users')
-    >>> len(pas.getUsers()) > 50
-    True
-    >>> for user in pas.getUsers():
-    ...     self.assertEqual(user.getUserName(), user.getUserName().lower())
-    ...     if user.getId() in ('root', 'test_user_1_'):
-    ...         continue
-    ...     self.assertTrue('@' in user.getUserName())
-
-Enable uuid as user id:
-
-    >>> browser.getControl(name='form.use_uuid_as_userid').value = True
-    >>> browser.getControl(name="form.actions.save").click()
-    >>> browser.url.endswith('security-controlpanel')
-    True
-    >>> browser.getControl(name='form.use_uuid_as_userid').value
-    True
-    >>> site_props.getProperty('use_uuid_as_userid')
-    True
-
-Switch off emaillogin:
-
-    >>> browser.getControl(name='form.use_email_as_login').value = False
-    >>> browser.getControl(name="form.actions.save").click()
-    >>> browser.url.endswith('security-controlpanel')
-    True
-    >>> browser.getControl(name='form.use_email_as_login').value
-    False
-    >>> site_props.getProperty('use_email_as_login')
-    False
-
-Create a new user:
-
-    >>> browser.open('http://nohost/plone/@@new-user')
-    >>> browser.getControl('Full Name').value = 'New User'
-    >>> browser.getControl('User Name').value = 'newie'
-    >>> browser.getControl('E-mail').value = 'NewUser@Example.Com'
-    >>> browser.getControl('Password').value = 'foobar'
-    >>> browser.getControl('Confirm password').value = 'foobar'
-    >>> browser.getControl('Register').click()
-    >>> len(pas.searchUsers(name='newie'))
-    1
-
-The user id will be a uuid, so not one of the usual suspects:
-
-    >>> user = pas.getUser('newie')
-    >>> user_id = user.getId()
-    >>> user_id == 'newie'
-    False
-    >>> user_id == 'new-user'
-    False
-    >>> from plone.app.users.utils import uuid_userid_generator
-    >>> len(user_id) == len(uuid_userid_generator())
-    True
-
-Switch to email as login:
-
-    >>> browser.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser.getControl(name='form.use_email_as_login').value = True
-    >>> browser.getControl(name="form.actions.save").click()
-    >>> browser.url.endswith('security-controlpanel')
-    True
-    >>> browser.getControl(name='form.use_email_as_login').value
-    True
-    >>> site_props.getProperty('use_email_as_login')
-    True
-
-This has changed the login name to the lower case email address.
-
-    >>> len(pas.searchUsers(name='newie'))
-    0
-    >>> len(pas.searchUsers(name='newuser@example.com'))
-    1
-    >>> len(pas.searchUsers(name='NewUser@Example.Com'))
-    1
-    >>> user = pas.getUser('NewUser@Example.Com')
-    >>> user.getId() == user_id  # user id has not changed
-    True
-    >>> user.getUserName()
-    'newuser@example.com'
-
-Switch to normal user ids again:
-
-    >>> browser.getControl(name='form.use_uuid_as_userid').value = False
-    >>> browser.getControl(name="form.actions.save").click()
-    >>> browser.url.endswith('security-controlpanel')
-    True
-    >>> browser.getControl(name='form.use_uuid_as_userid').value
-    False
-    >>> site_props.getProperty('use_uuid_as_userid')
-    False
-
-Create a new user.  This should get a user id based on the full name:
-
-    >>> browser.open('http://nohost/plone/@@new-user')
-    >>> browser.getControl('Full Name').value = 'User Two'
-    >>> browser.getControl('E-mail').value = 'UserTwo@Example.Com'
-    >>> browser.getControl('Password').value = 'foobar'
-    >>> browser.getControl('Confirm password').value = 'foobar'
-    >>> browser.getControl('Register').click()
-    >>> len(pas.searchUsers(name='UserTwo@Example.Com'))
-    1
-    >>> user = pas.getUser('UserTwo@Example.Com')
-    >>> user.getId()
-    'user-two'
-    >>> user.getUserName()
-    'usertwo@example.com'
diff --git a/plone/app/controlpanel/tests/security_enable_user_folder.txt b/plone/app/controlpanel/tests/security_enable_user_folder.txt
deleted file mode 100644
index 31193f9..0000000
--- a/plone/app/controlpanel/tests/security_enable_user_folder.txt
+++ /dev/null
@@ -1,152 +0,0 @@
-Security controlpanel:
-Enable/disable user folder
-==========================
-
-First some initial setup code. We are logging as the 'root' user with 'Manager' permission:
-
-    >>> browser = self.browser
-    >>> self.loginAsManager()
-
-Lets ensure that we currently are the 'root' user:
-
-    >>> 'root' in browser.contents
-    True
-
-    >>> browser.getLink('root').click()
-    >>> browser.url
-    'http://nohost/plone/useractions'
-
-There shouldn't be a user folder in a default Plone:
-
-    >>> browser.open('http://nohost/plone/Members/root')
-    Traceback (most recent call last):
-    ...
-    HTTPError: HTTP Error 404: Not Found
-
-Enable the user folder creation:
-
-    >>> browser.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser.getControl(name='form.enable_user_folders').value = True
-    >>> browser.getControl(name="form.actions.save").click()
-    >>> browser.url.endswith('security-controlpanel')
-    True
-
-The personal folder isn't created before the user explicitly are logged out
-and logged in again:
-
-    >>> browser.open('http://nohost/plone/Members/root')
-    Traceback (most recent call last):
-    ...
-    HTTPError: HTTP Error 404: Not Found
-
-So the 'My Folder' shouldn't be visible:
-
-    >>> 'My Folder' in browser.contents
-    False
-
-Lets do a short cut for the root user and create the member area immediately:
-
-    >>> portal.portal_membership.createMemberArea('root')
-
-There should now be a user folder and the 'My Folder' action should be visible
-in the personal bar:
-
-    >>> browser.open('http://nohost/plone/Members/root')
-    >>> 'My Folder' in browser.contents
-    True
-
-Lets ensure 'My Folder' is click able and contains the member url link:
-
-    >>> browser.getLink('My Folder').click()
-    >>> browser.url
-    'http://nohost/plone/Members/root'
-
-    >>> browser.getLink('Log out').click()
-    >>> 'You are now logged out' in browser.contents
-    True
-
-Test with a member with the 'Member' permission
------------------------------------------------
-
-Create a new member and log in as member:
-
-    >>> self.uf = self.portal.acl_users
-    >>> self.uf.userFolderAddUser('member', 'secret', ['Member'], [])
-    >>> browser.open('http://nohost/plone/')
-    >>> browser.getLink('Log in').click()
-    >>> browser.getControl('Login Name').value = 'member'
-    >>> browser.getControl('Password').value = 'secret'
-    >>> browser.getControl('Log in').click()
-
-Lets ensure that we currently are the 'member' user:
-
-    >>> 'member' in browser.contents
-    True
-
-    >>> browser.getLink('member').click()
-    >>> browser.url
-    'http://nohost/plone/useractions'
-
-There should be a user folder now and the 'My Folder' link should be visible
-in the personal bar:
-
-    >>> browser.open('http://nohost/plone/Members/member')
-    >>> browser.open('http://nohost/plone')
-    >>> 'My Folder' in browser.contents
-    True
-
-    >>> browser.getLink('My Folder').click()
-    >>> browser.url
-    'http://nohost/plone/Members/member'
-
-Log out as member:
-
-    >>> browser.getLink('Log out').click()
-    >>> 'You are now logged out' in browser.contents
-    True
-
-Log in as manager and disable user folder creation:
-
-    >>> self.loginAsManager()
-
-    >>> browser.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser.getControl(name='form.enable_user_folders').value = False
-    >>> browser.getControl(name="form.actions.save").click()
-    >>> browser.url.endswith('security-controlpanel')
-    True
-
-Log out as manager:
-
-    >>> browser.getLink('Log out').click()
-    >>> 'You are now logged out' in browser.contents
-    True
-
-Create a new member and login as new member:
-
-    >>> self.uf = self.portal.acl_users
-    >>> self.uf.userFolderAddUser('newmember', 'secret', ['Member'], [])
-    >>> browser.open('http://nohost/plone/')
-    >>> browser.getLink('Log in').click()
-    >>> browser.getControl('Login Name').value = 'newmember'
-    >>> browser.getControl('Password').value = 'secret'
-    >>> browser.getControl('Log in').click()
-
-Lets ensure that we currently are the 'newmember' user:
-
-    >>> 'newmember' in browser.contents
-    True
-
-    >>> browser.getLink('newmember').click()
-    >>> browser.url
-    'http://nohost/plone/useractions'
-
-There shouldn't be a new member folder and no 'My Folder' link:
-
-    >>> browser.open('http://nohost/plone/Members/newmember')
-    Traceback (most recent call last):
-    ...
-    HTTPError: HTTP Error 404: Not Found
-
-    >>> browser.open('http://nohost/plone')
-    >>> 'My Folder' in browser.contents
-    False
diff --git a/plone/app/controlpanel/tests/site.txt b/plone/app/controlpanel/tests/site.txt
deleted file mode 100644
index e8efac1..0000000
--- a/plone/app/controlpanel/tests/site.txt
+++ /dev/null
@@ -1,145 +0,0 @@
-Site control panel
-==================
-
-First some initial setup code:
-
-    >>> from zope.component import getUtility
-    >>> from Products.CMFCore.interfaces import IPropertiesTool
-    >>> ptool = getUtility(IPropertiesTool)
-    >>> self.loginAsManager()
-
-    >>> ptool.site_properties.enable_sitemap
-    False
-
-    >>> ptool.site_properties.displayPublicationDateInByline
-    False
-
-Viewing the site control panel
------------------------------
-
-    >>> self.browser.open('http://nohost/plone/@@site-controlpanel')
-    >>> self.browser.url
-    'http://nohost/plone/@@site-controlpanel'
-
-Click the cancel button:
-
-    >>> self.browser.getControl(name="form.actions.cancel").click()
-    >>> self.browser.url.endswith('plone_control_panel')
-    True
-
-There should be still no changes:
-
-    >>> 'Changes canceled.' in self.browser.contents
-    True
-
-Make some changes
------------------
-
-    >>> self.browser.open('http://nohost/plone/@@site-controlpanel')
-    >>> self.browser.url.endswith('site-controlpanel')
-    True
-
-    >>> self.browser.getControl(name='form.site_title').value = "Site"
-    >>> self.browser.getControl(name='form.enable_sitemap').value = True
-    >>> self.browser.getControl(name='form.display_pub_date_in_byline').value = True
-
-Click the save button:
-
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> self.browser.url.endswith('site-controlpanel')
-    True
-
-We should be informed that something has changed:
-
-    >>> 'Changes saved.' in self.browser.contents
-    True
-
-Make sure the changes have been applied correctly to the tool:
-
-    >>> ptool.site_properties.enable_sitemap
-    True
-    >>> ptool.site_properties.displayPublicationDateInByline
-    True
-
-Test if the sitemaps does appear:
-
-    >>> self.browser.open("http://nohost/plone/sitemap.xml.gz")
-    >>> headers = self.browser.headers
-
-    >>> headers['status'].lower()
-    '200 ok'
-
-    >>> headers['content-type']
-    'application/octet-stream'
-
-Make again some changes
------------------------
-
-    >>> self.browser.open('http://nohost/plone/@@site-controlpanel')
-    >>> self.browser.url.endswith('site-controlpanel')
-    True
-
-    >>> self.browser.getControl(name='form.enable_sitemap').value = False
-    >>> self.browser.getControl(name='form.display_pub_date_in_byline').value = False
-
-Click the save button:
-
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> self.browser.url.endswith('site-controlpanel')
-    True
-
-We should be informed that something has changed:
-
-    >>> 'Changes saved.' in self.browser.contents
-    True
-
-Make sure the changes have been applied correctly to the tool:
-
-    >>> ptool.site_properties.enable_sitemap
-    False
-    >>> ptool.site_properties.displayPublicationDateInByline
-    False
-
-Check the sitemap actually, should raise a 404:
-
-    >>> self.browser.handleErrors = True
-    >>> from zope.publisher.interfaces import NotFound
-    >>> from urllib2 import HTTPError
-    >>> try:
-    ...     self.browser.open("http://nohost/plone/sitemap.xml.gz")
-    ... except HTTPError, e:
-    ...     if e.code == 404:
-    ...         print "ok"
-    ok
-
-
-Test the DC properties
-----------------------
-
-    >>> self.browser.open('http://nohost/plone/@@site-controlpanel')
-    >>> self.browser.url.endswith('site-controlpanel')
-    True
-
-    >>> self.browser.getControl(name='form.exposeDCMetaTags').value = True
-
-Click the save button:
-
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> self.browser.url.endswith('site-controlpanel')
-    True
-
-We should be informed that something has changed:
-
-    >>> 'Changes saved.' in self.browser.contents
-    True
-
-Make sure the changes have been applied correctly to the tool:
-
-    >>> ptool.site_properties.exposeDCMetaTags
-    True
-
-Test if DC meta tags are exposed:
-
-    >>> self.browser.open("http://nohost/plone/")
-    >>> 'DC.type' in self.browser.contents
-    True
diff --git a/plone/app/controlpanel/tests/skins.txt b/plone/app/controlpanel/tests/skins.txt
deleted file mode 100644
index f9d22e5..0000000
--- a/plone/app/controlpanel/tests/skins.txt
+++ /dev/null
@@ -1,132 +0,0 @@
-
-Skins control panel
-===================
-
-First some initial setup code:
-
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> stool = getToolByName(self.portal, 'portal_skins')
-    >>> self.loginAsManager()
-
-Fake a second available skin:
-
-    >>> stool.selections['TestSkin'] = 'test_path'
-
-Make sure we assume the right defaults
---------------------------------------
-
-    >>> stool.default_skin in ('Sunburst Theme', 'Plone Default')
-    True
-
-    >>> 'Plone Default' in stool.getSkinSelections()
-    True
-
-Viewing the skins control panel
--------------------------------
-
-    >>> self.browser.open('http://nohost/plone/@@skins-controlpanel')
-    >>> self.browser.url.endswith('skins-controlpanel')
-    True
-
-Click the cancel button:
-
-    >>> self.browser.getControl(name="form.actions.cancel").click()
-    >>> self.browser.url.endswith('plone_control_panel')
-    True
-
-There should be still no changes:
-
-    >>> 'Changes canceled.' in self.browser.contents
-    True
-
-Make some changes
------------------
-
-    >>> self.browser.open('http://nohost/plone/@@skins-controlpanel')
-    >>> self.browser.url.endswith('skins-controlpanel')
-    True
-
-    >>> self.browser.getControl(name='form.theme').value = ('TestSkin', )
-
-Click the save button:
-
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> self.browser.url.endswith('skins-controlpanel')
-    True
-
-Make sure the changes have been applied correctly to the mailhost:
-
-    >>> stool.default_skin
-    'TestSkin'
-
-
-External link marking and windows settings are also controlled here
--------------------------------------------------------------------
-
-We should be starting with mark_special_links.js disabled:
-
-    >>> jstool = getToolByName(self.portal, 'portal_javascripts')
-    >>> jstool.getResource('mark_special_links.js').getEnabled()
-    False
-
-The mark_special_links and ext_links_open_new_window properties should also
-false:
-
-    >>> ptool = getToolByName(self.portal, 'portal_properties')
-    >>> site_props = ptool.site_properties
-    >>> site_props.external_links_open_new_window
-    'false'
-
-    >>> site_props.mark_special_links
-    'false'
-
-mark_special_links and ext_links_open_new_windowshould be initially unchecked
-in the browser:
-
-    >>> self.browser.open('http://nohost/plone/@@skins-controlpanel')
-    >>> self.browser.getControl(name='form.mark_special_links').value
-    False
-
-    >>> self.browser.getControl(name='form.ext_links_open_new_window').value
-    False
-
-Checking mark_special_items should enable the js support and set the site prop:
-
-    >>> self.browser.getControl(name='form.mark_special_links').value = True
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> site_props.mark_special_links
-    'true'
-
-    >>> jstool.getResource('mark_special_links.js').getEnabled()
-    True
-
-Checking ext_links_open_new_window should enable the js support and set the site prop:
-
-    >>> self.browser.getControl(name='form.ext_links_open_new_window').value = True
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> site_props.external_links_open_new_window
-    'true'
-
-    >>> jstool.getResource('mark_special_links.js').getEnabled()
-    True
-
-Unchecking mark_special_links while new_window is set should leave the js
-support in place since it's needed to support new_window:
-
-    >>> self.browser.getControl(name='form.mark_special_links').value = False
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> site_props.mark_special_links
-    'false'
-
-    >>> jstool.getResource('mark_special_links.js').getEnabled()
-    True
-
-Unchecking new_window should finally turn off the js support:
-
-    >>> self.browser.getControl(name='form.ext_links_open_new_window').value = False
-    >>> self.browser.getControl(name="form.actions.save").click()
-    >>> site_props.external_links_open_new_window
-    'false'
-
-    >>> jstool.getResource('mark_special_links.js').getEnabled()
-    False
diff --git a/plone/app/controlpanel/tests/test_doctests.py b/plone/app/controlpanel/tests/test_doctests.py
index 5513751..eb352f5 100644
--- a/plone/app/controlpanel/tests/test_doctests.py
+++ b/plone/app/controlpanel/tests/test_doctests.py
@@ -13,14 +13,7 @@
 
 def test_suite():
     tests = [
-        # 'editing.txt',
         'filter.txt',
-        # 'mail.txt',
-        # 'security_enable_user_folder.txt',
-        # 'site.txt',
-        # 'skins.txt',
-        # 'navigation.txt',
-        # 'types.txt',
     ]
     suite = TestSuite()
 
@@ -31,16 +24,4 @@ def test_suite():
             package="plone.app.controlpanel.tests",
             test_class=ControlPanelTestCase))
 
-#    suite.addTest(FunctionalDocFileSuite(
-#        'usergroups.txt',
-#        optionflags=OPTIONFLAGS,
-#        package="plone.app.controlpanel.tests",
-#        test_class=UserGroupsControlPanelTestCase))
-
-#    suite.addTest(FunctionalDocFileSuite(
-#        'security.txt',
-#        optionflags=OPTIONFLAGS,
-#        package="plone.app.controlpanel.tests",
-#        test_class=EmailLoginSecurityControlPanelTestCase))
-
     return suite
diff --git a/plone/app/controlpanel/tests/types.txt b/plone/app/controlpanel/tests/types.txt
deleted file mode 100644
index f2bf46c..0000000
--- a/plone/app/controlpanel/tests/types.txt
+++ /dev/null
@@ -1,123 +0,0 @@
-Site control panel
-==================
-
-First some initial setup code:
-
-    >>> from zope.component import getUtility
-    >>> from Products.CMFCore.interfaces import IPropertiesTool
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> ptool = getUtility(IPropertiesTool)
-    >>> self.loginAsManager()
-    >>> types_configlet_url = 'http://nohost/plone/@@types-controlpanel'
-
-Then we change a workflow title, so we can test for UnicodeDecodeErrors:
-
-    >>> wt = getToolByName(self.portal, 'portal_workflow')
-    >>> wf = wt['simple_publication_workflow']
-    >>> old_title = wf.title
-    >>> wf.title = u'Workflow de Noticias'.encode('utf-8')
-
-Viewing the types control panel
------------------------------
-
-Choose a standard type and hit cancel:
-
-    >>> self.browser.open(types_configlet_url)
-    >>> self.browser.getControl(name='type_id').value = ['Link']
-    >>> self.browser.getControl('Cancel').click()
-
-We should be back on the Site Setup screen:
-
-    >>> 'plone_control_panel' in self.browser.url
-    True
-
-Navigate back to the type control panel and select link again:
-
-    >>> self.browser.getLink('Types').click()
-    >>> self.browser.getControl(name='type_id').value = ['Link']
-    >>> self.browser.getForm(action=types_configlet_url).submit()
-
-Enable allow commenting for the link type
-
-    >>> self.browser.getControl('Allow comments').selected = True
-    >>> self.browser.getControl('Apply Changes').click()
-
-Navigate back to link type to confirm setting.  Also confirm that the
-redirect_links setting is enabled. For easier testing we simplify the
-white space:
-
-    >>> self.browser.getLink('Types').click()
-    >>> self.browser.getControl(name='type_id').value = ['Link']
-    >>> self.browser.getForm(action=types_configlet_url).submit()
-    >>> contents = self.simplify_white_space(self.browser.contents)
-    >>> 'Globally addable' in contents
-    True
-    >>> 'Allow comments' in contents
-    True
-    >>> 'Visible in searches' in contents
-    True
-    >>> '<input id="redirect_links" type="checkbox" class="noborder" name="redirect_links:boolean" checked="checked" />' in contents
-    True
-    >>> '<label for="redirect_links">Redirect immediately to link target' in contents
-    True
-
-For only the link type, we have a special setting that controls whether the
-view will redirect to the remote url for users without editing permissions:
-
-    >>> self.browser.open(types_configlet_url)
-    >>> self.browser.getControl(name='type_id').value = ['News Item']
-    >>> self.browser.getForm(action=types_configlet_url).submit()
-    >>> '<input id="redirect_links"' in self.browser.contents
-    False
-
-We'll confirm that we can disable the redirect_links option for the link type:
-
-    >>> self.browser.getControl(name='type_id').value = ['Link']
-    >>> self.browser.getForm(action=types_configlet_url).submit()
-    >>> '<input id="redirect_links"' in self.browser.contents
-    True
-    >>> self.browser.getControl(name='redirect_links:boolean').value = False
-    >>> self.browser.getControl('Apply Changes').click()
-
-Now the redirect links checkbox option is no longer checked:
-
-    >>> self.browser.open(types_configlet_url)
-    >>> self.browser.getControl(name='type_id').value = ['Link']
-    >>> self.browser.getForm(action=types_configlet_url).submit()
-    >>> contents = self.simplify_white_space(self.browser.contents)
-    >>> 'Globally addable' in contents
-    True
-    >>> 'Allow comments' in contents
-    True
-    >>> 'Visible in searches' in contents
-    True
-    >>> '<input id="redirect_links" type="checkbox" class="noborder" name="redirect_links:boolean" />' in contents
-    True
-    >>> '<label for="redirect_links">Redirect immediately to link target' in contents
-    True
-
-This change should modify the redirect_links value in site_properties as well:
-
-    >>> ptool.site_properties.redirect_links
-    False
-
-
-No default workflow
--------------------
-
-This references http://dev.plone.org/plone/ticket/11901
-
-Open the Types control panel and set the default workflow to None:
-    >>> self.browser.open(types_configlet_url)
-    >>> self.browser.getControl(name='new_workflow').value = ['[none]']
-    >>> self.browser.getControl(name="form.button.SelectWorkflow").click()
-    >>> self.browser.getControl(name="form.button.Save").click()
-
-Now choose a standard type and submit:
-    >>> self.browser.getControl(name='type_id').value = ['Link']
-    >>> self.browser.getControl(name="form.button.SelectContentType").click()
-
-    >>> self.browser.contents
-    '...Globally addable...
-    ...Allow comments...
-    ...Visible in searches...'


