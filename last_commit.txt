Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-11-23T14:50:16+01:00
Author: Johannes Raggam () <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/b613db667fa4e837a9f74553f6eac8a0b594f380

Cleanup tasks: Only install the plone.app.widgets profile for Plone 4.3.  Remove the unnecessary plone50 setup.py extra section. Fix plone.app.event to also work with plone.app.z3cform versions below &lt; 1.0.

Files changed:
M CHANGES.rst
M plone/app/event/bbb/profiles/default/metadata.xml
M plone/app/event/dx/behaviors.py
M plone/app/event/profiles/default/metadata.xml
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 035db0f..42ae50d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -12,7 +12,10 @@ New:
 
 Fixes:
 
-- *add item here*
+- Cleanup tasks: Only install the plone.app.widgets profile for Plone 4.3.
+  Remove the unnecessary ``plone50`` setup.py extra section. Fix
+  plone.app.event to also work with plone.app.z3cform versions below < 1.0.
+  [thet]
   
 
 2.0.4 (2015-10-28)
diff --git a/plone/app/event/bbb/profiles/default/metadata.xml b/plone/app/event/bbb/profiles/default/metadata.xml
index 3cbcf5b..18e6296 100644
--- a/plone/app/event/bbb/profiles/default/metadata.xml
+++ b/plone/app/event/bbb/profiles/default/metadata.xml
@@ -2,6 +2,7 @@
 <metadata>
   <version>1</version>
   <dependencies>
+    <dependency>profile-plone.app.widgets:default</dependency>
     <dependency>profile-plone.app.event:default</dependency>
   </dependencies>
 </metadata>
diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py
index f28e97d..adc8688 100644
--- a/plone/app/event/dx/behaviors.py
+++ b/plone/app/event/dx/behaviors.py
@@ -1,6 +1,7 @@
 """Behaviors to enable calendarish event extension to dexterity content types.
 """
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import getFSVersionTuple
 from Products.CMFPlone.utils import safe_unicode
 from plone.app.dexterity.behaviors.metadata import ICategorization
 from plone.app.event import messageFactory as _
@@ -25,6 +26,7 @@
 from plone.indexer import indexer
 from plone.supermodel import model
 from plone.uuid.interfaces import IUUID
+from z3c.form.browser.textlines import TextLinesFieldWidget
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.util import getSpecification
 from z3c.form.widget import FieldWidget
@@ -37,16 +39,14 @@
 from zope.interface import provider
 from zope.schema.interfaces import IContextAwareDefaultFactory
 
-# TODO: altern., for backwards compat., we could import from plone.z3cform
-from z3c.form.browser.textlines import TextLinesFieldWidget
 
-import pkg_resources
+PLONE5 = getFSVersionTuple()[0] >= 5
 
-try:
+if PLONE5:
     # Plone 5
-    pkg_resources.get_distribution('plone.app.z3cform')
     from plone.app.z3cform.widget import DatetimeWidget
-except pkg_resources.DistributionNotFound:
+else:
+    # Plone 4
     from plone.app.widgets.dx import DatetimeWidget
 
 
diff --git a/plone/app/event/profiles/default/metadata.xml b/plone/app/event/profiles/default/metadata.xml
index 09f3176..d7cd151 100644
--- a/plone/app/event/profiles/default/metadata.xml
+++ b/plone/app/event/profiles/default/metadata.xml
@@ -3,7 +3,6 @@
   <version>15</version>
   <dependencies>
     <dependency>profile-plone.app.registry:default</dependency>
-    <dependency>profile-plone.app.widgets:default</dependency>
     <dependency>profile-plone.app.z3cform:default</dependency>
     <dependency>profile-plone.formwidget.recurrence:default</dependency>
   </dependencies>
diff --git a/setup.py b/setup.py
index 9f66b43..c19caa2 100644
--- a/setup.py
+++ b/setup.py
@@ -100,9 +100,6 @@
         ],
         'plone43': [
             'plone.app.widgets [dexterity] >= 1.7.0',
-        ],
-        'plone50': [  # optional, plone 5 already depends on these versions
-            'plone.app.z3cform >= 1.1.0.dev0',
         ]
     },
     entry_points="""


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-11-23T15:18:07+01:00
Author: Johannes Raggam () <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/789ff00cbe52747c6028dcf62e5f2837055e2fa0

Cleanup buildout: Remove sources.cfg, versions.cfg, test.cfg, test-43.cfg and test.cfg. Since this package is merged, it doesn't make much sense to maintain separate version and sources files to extend from. Tests and development environment is built in the buildout.cfg and buildout-43.cfg files. Remove bootstrap.py - use virtualenv .; ./bin/pip install zc.buildout instead.

Files changed:
M CHANGES.rst
M README.rst
M buildout-43.cfg
M buildout.cfg
M setup.cfg
D bootstrap.py
D dev.cfg
D sources.cfg
D test-43.cfg
D test.cfg
D versions.cfg

diff --git a/CHANGES.rst b/CHANGES.rst
index 42ae50d..95fe70d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -16,7 +16,15 @@ Fixes:
   Remove the unnecessary ``plone50`` setup.py extra section. Fix
   plone.app.event to also work with plone.app.z3cform versions below < 1.0.
   [thet]
-  
+
+- Cleanup buildout: Remove sources.cfg, versions.cfg, test.cfg, test-43.cfg and
+  test.cfg. Since this package is merged, it doesn't make much sense to
+  maintain separate version and sources files to extend from. Tests and
+  development environment is built in the buildout.cfg and buildout-43.cfg
+  files. Remove bootstrap.py - use ``virtualenv .; ./bin/pip install
+  zc.buildout`` instead.
+  [thet]
+
 
 2.0.4 (2015-10-28)
 ------------------
diff --git a/README.rst b/README.rst
index 9a7fa23..6579029 100644
--- a/README.rst
+++ b/README.rst
@@ -6,3 +6,19 @@ Plone.app.event is the calendaring framework for Plone. It provides Dexterity be
 For a Dexterity event type using plone.app.event, use plone.app.contenttypes 1.1 or newer.
 
 The complete documentation can be found on: https://ploneappevent.readthedocs.org
+
+
+Installation
+------------
+
+For Standalone installation follow the standard buildout procedure::
+
+    $ virtualenv .
+    $ ./bin/pip install -U zc.buildout setuptools pip
+    $ ./bin/buildout
+
+For Plone 4.3 do::
+
+    $ ./bin/buildout -c buildout-43.cfg
+
+Note, both commands will install a test and development environment.
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index ed57894..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,178 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os
-import shutil
-import sys
-import tempfile
-
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --find-links to point to local resources, you can keep 
-this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", "--config-file",
-                  help=("Specify the path to the buildout configuration "
-                        "file to be used."))
-parser.add_option("-f", "--find-links",
-                  help=("Specify a URL to search for buildout releases"))
-parser.add_option("--allow-site-packages",
-                  action="store_true", default=False,
-                  help=("Let bootstrap.py use existing site packages"))
-
-
-options, args = parser.parse_args()
-
-######################################################################
-# load/install setuptools
-
-try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
-    from urllib.request import urlopen
-except ImportError:
-    from urllib2 import urlopen
-
-ez = {}
-exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
-
-if not options.allow_site_packages:
-    # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions 
-    # of setuptools are not in the path
-    import site
-    # inside a virtualenv, there is no 'getsitepackages'. 
-    # We can't remove these reliably
-    if hasattr(site, 'getsitepackages'):
-        for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
-
-setup_args = dict(to_dir=tmpeggs, download_delay=0)
-ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
-
-# This does not (always?) update the default working set.  We will
-# do it.
-for path in sys.path:
-    if path not in pkg_resources.working_set.entries:
-        pkg_resources.working_set.add_entry(path)
-
-######################################################################
-# Install buildout
-
-ws = pkg_resources.working_set
-
-cmd = [sys.executable, '-c',
-       'from setuptools.command.easy_install import main; main()',
-       '-mZqNxd', tmpeggs]
-
-find_links = os.environ.get(
-    'bootstrap-testing-find-links',
-    options.find_links or
-    ('http://downloads.buildout.org/'
-     if options.accept_buildout_test_releases else None)
-    )
-if find_links:
-    cmd.extend(['-f', find_links])
-
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setuptools_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-if version:
-    requirement = '=='.join((requirement, version))
-cmd.append(requirement)
-
-import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
-    raise Exception(
-        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
-
-######################################################################
-# Import and run buildout
-
-ws.add_entry(tmpeggs)
-ws.require(requirement)
-import zc.buildout.buildout
-
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout-43.cfg b/buildout-43.cfg
index 6d2a5aa..b6fa547 100644
--- a/buildout-43.cfg
+++ b/buildout-43.cfg
@@ -3,19 +3,36 @@ extends =
     https://raw.githubusercontent.com/plone/buildout.coredev/4.3/versions.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/4.3/sources.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/4.3/checkouts.cfg
-    versions.cfg
-    sources.cfg
-parts = instance
 
-versions = versions
-sources-dir = ${buildout:directory}/devsrc
+parts =
+    instance
+# DEV
+    i18ndude
+    omelette
+    zopepy
+    sphinx
+    checkversions
+# TESTING
+    test
+    coverage-test
+    coverage-report
+    robot
 
+auto-checkout +=
+    Products.DateRecurringIndex
+    icalendar
+    jquery.recurrenceinput.js
+    plone.event
+    plone.formwidget.recurrence
+
+extensions += mr.developer
+sources-dir = ${buildout:directory}/devsrc
 develop = .
+versions = versions
+
+# One of: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
+log-level = INFO
 
-[sources]
-# Looks like, `develop = .` doesn't work well with mr.developer. So we checkout
-# plone.app.event to the buildout directory path.
-plone.app.event = git git@github.com:plone/plone.app.event.git branch=master full-path=${buildout:directory}
 
 [instance]
 recipe = plone.recipe.zope2instance
@@ -25,3 +42,88 @@ eggs =
     Plone
     Pillow
     plone.app.event
+# DEVELOPMENT
+    plone.reload
+    plone.app.debugtoolbar
+
+
+# DEVELOPMENT
+
+[sources]
+Products.DateRecurringIndex  = git git@github.com:collective/Products.DateRecurringIndex.git
+icalendar                    = git git@github.com:collective/icalendar.git
+jquery.recurrenceinput.js    = git git@github.com:collective/jquery.recurrenceinput.js.git egg=false
+plone.event                  = git git@github.com:plone/plone.event.git
+plone.formwidget.recurrence  = git git@github.com:plone/plone.formwidget.recurrence.git branch=1.x
+
+[i18ndude]
+unzip = true
+recipe = zc.recipe.egg
+eggs = i18ndude
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+
+[zopepy]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+interpreter = zopepy
+scripts = zopepy
+
+[sphinx]
+recipe = collective.recipe.sphinxbuilder
+source = ${buildout:directory}/docs
+interpreter = ${buildout:directory}/bin/zopepy
+
+[checkversions]
+recipe=zc.recipe.egg
+eggs=z3c.checkversions [buildout]
+
+
+# TESTING
+
+[environment]
+BUILDOUT_DIR = ${buildout:directory}
+zope_i18n_compile_mo_files = true
+
+[test]
+recipe = zc.recipe.testrunner
+defaults = ['--auto-color', '--auto-progress']
+eggs =
+    Products.DateRecurringIndex [test]
+    icalendar [test]
+    plone.app.event [test]
+    plone.event [test]
+    plone.formwidget.recurrence [test]
+environment = environment
+
+[coverage-test]
+recipe = zc.recipe.testrunner
+eggs = ${test:eggs}
+defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
+
+[coverage-report]
+recipe = zc.recipe.egg
+eggs = z3c.coverage
+scripts = coveragereport
+arguments = ('coverage', 'report')
+
+[robot]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    plone.app.robotframework [debug]
+
+
+# ALL
+
+[versions]
+setuptools =
+zc.buildout =
diff --git a/buildout.cfg b/buildout.cfg
index f47524b..d4f93c6 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -3,19 +3,35 @@ extends =
     https://raw.githubusercontent.com/plone/buildout.coredev/5.0/versions.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/5.0/sources.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/5.0/checkouts.cfg
-    versions.cfg
-    sources.cfg
-parts = instance
+parts =
+    instance
+# DEV
+    i18ndude
+    omelette
+    zopepy
+    sphinx
+    checkversions
+# TESTING
+    test
+    coverage-test
+    coverage-report
+    robot
 
-versions = versions
-sources-dir = ${buildout:directory}/devsrc
+auto-checkout +=
+    Products.DateRecurringIndex
+    icalendar
+    jquery.recurrenceinput.js
+    plone.event
+    plone.formwidget.recurrence
 
+extensions += mr.developer
+sources-dir = ${buildout:directory}/devsrc
 develop = .
+versions = versions
+
+# One of: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
+log-level = INFO
 
-[sources]
-# Looks like, `develop = .` doesn't work well with mr.developer. So we checkout
-# plone.app.event to the buildout directory path.
-plone.app.event = git git@github.com:plone/plone.app.event.git branch=master full-path=${buildout:directory}
 
 [instance]
 recipe = plone.recipe.zope2instance
@@ -25,3 +41,87 @@ eggs =
     Plone
     Pillow
     plone.app.event
+# DEVELOPMENT
+    plone.reload
+    plone.app.debugtoolbar
+
+# DEVELOPMENT
+
+[sources]
+Products.DateRecurringIndex  = git git@github.com:collective/Products.DateRecurringIndex.git
+icalendar                    = git git@github.com:collective/icalendar.git
+jquery.recurrenceinput.js    = git git@github.com:collective/jquery.recurrenceinput.js.git egg=false
+plone.event                  = git git@github.com:plone/plone.event.git
+plone.formwidget.recurrence  = git git@github.com:plone/plone.formwidget.recurrence.git branch=master
+
+[i18ndude]
+unzip = true
+recipe = zc.recipe.egg
+eggs = i18ndude
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+
+[zopepy]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+interpreter = zopepy
+scripts = zopepy
+
+[sphinx]
+recipe = collective.recipe.sphinxbuilder
+source = ${buildout:directory}/docs
+interpreter = ${buildout:directory}/bin/zopepy
+
+[checkversions]
+recipe=zc.recipe.egg
+eggs=z3c.checkversions [buildout]
+
+
+# TESTING
+
+[environment]
+BUILDOUT_DIR = ${buildout:directory}
+zope_i18n_compile_mo_files = true
+
+[test]
+recipe = zc.recipe.testrunner
+defaults = ['--auto-color', '--auto-progress']
+eggs =
+    Products.DateRecurringIndex [test]
+    icalendar [test]
+    plone.app.event [test]
+    plone.event [test]
+    plone.formwidget.recurrence [test]
+environment = environment
+
+[coverage-test]
+recipe = zc.recipe.testrunner
+eggs = ${test:eggs}
+defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
+
+[coverage-report]
+recipe = zc.recipe.egg
+eggs = z3c.coverage
+scripts = coveragereport
+arguments = ('coverage', 'report')
+
+[robot]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    plone.app.robotframework [debug]
+
+
+# ALL
+
+[versions]
+setuptools =
+zc.buildout =
diff --git a/dev.cfg b/dev.cfg
deleted file mode 100644
index 11a65d1..0000000
--- a/dev.cfg
+++ /dev/null
@@ -1,46 +0,0 @@
-[buildout]
-extends =
-    test.cfg
-
-parts +=
-    i18ndude
-    omelette
-    zopepy
-    sphinx
-    checkversions
-
-# One of: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
-log-level = INFO
-
-[instance]
-user = admin:admin
-eggs +=
-    plone.reload
-    plone.app.debugtoolbar
-
-[i18ndude]
-unzip = true
-recipe = zc.recipe.egg
-eggs = i18ndude
-
-[omelette]
-recipe = collective.recipe.omelette
-eggs =
-    ${instance:eggs}
-    ${test:eggs}
-    ${robot:eggs}
-
-[zopepy]
-recipe = zc.recipe.egg
-eggs = ${test:eggs}
-interpreter = zopepy
-scripts = zopepy
-
-[sphinx]
-recipe = collective.recipe.sphinxbuilder
-source = ${buildout:directory}/docs
-interpreter = ${buildout:directory}/bin/zopepy
-
-[checkversions]
-recipe=zc.recipe.egg
-eggs=z3c.checkversions [buildout]
diff --git a/setup.cfg b/setup.cfg
index 1453a00..616a37b 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,5 +1,4 @@
 [check-manifest]
 ignore =
-    bootstrap.py
     *.cfg
     *.sh
diff --git a/sources.cfg b/sources.cfg
deleted file mode 100644
index 460124e..0000000
--- a/sources.cfg
+++ /dev/null
@@ -1,20 +0,0 @@
-# mr.developer source definitions
-# You can extend you own buildout sources.cfg and versions.cfg
-
-[buildout]
-extensions += mr.developer
-auto-checkout +=
-    Products.DateRecurringIndex
-    icalendar
-    jquery.recurrenceinput.js
-    plone.event
-    plone.app.event
-    plone.formwidget.recurrence
-
-[sources]
-Products.DateRecurringIndex  = git git@github.com:collective/Products.DateRecurringIndex.git
-icalendar                    = git git@github.com:collective/icalendar.git
-jquery.recurrenceinput.js    = git git@github.com:collective/jquery.recurrenceinput.js.git egg=false
-plone.app.event              = git git@github.com:plone/plone.app.event.git
-plone.event                  = git git@github.com:plone/plone.event.git
-plone.formwidget.recurrence  = git git@github.com:plone/plone.formwidget.recurrence.git branch=plone5
diff --git a/test-43.cfg b/test-43.cfg
deleted file mode 100644
index 7cc05e4..0000000
--- a/test-43.cfg
+++ /dev/null
@@ -1,51 +0,0 @@
-[buildout]
-extends =
-    buildout-43.cfg
-parts +=
-    test
-    coverage-test
-    coverage-report
-    robot
-versions = versions
-
-[environment]
-BUILDOUT_DIR = ${buildout:directory}
-zope_i18n_compile_mo_files = true
-
-[test]
-recipe = zc.recipe.testrunner
-defaults = ['--auto-color', '--auto-progress']
-eggs =
-    Products.DateRecurringIndex [test]
-    icalendar [test]
-    plone.app.event [test]
-    plone.event [test]
-    plone.formwidget.recurrence [test]
-environment = environment
-
-[coverage-test]
-recipe = zc.recipe.testrunner
-eggs = ${test:eggs}
-defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
-
-[coverage-report]
-recipe = zc.recipe.egg
-eggs = z3c.coverage
-scripts = coveragereport
-arguments = ('coverage', 'report')
-
-[robot]
-recipe = zc.recipe.egg
-eggs =
-    ${instance:eggs}
-    plone.app.robotframework [debug]
-
-[versions]
-plone.app.robotframework = 0.9.5
-robotframework = 2.8.4
-robotframework-selenium2library = 1.5.0
-robotsuite = 1.6.1
-selenium = 2.43.0
-robotframework-selenium2screenshots = 0.4.0
-sphinxcontrib-robotframework = 0.4.3
-robotframework-debuglibrary = 0.3
diff --git a/test.cfg b/test.cfg
deleted file mode 100644
index 7b44189..0000000
--- a/test.cfg
+++ /dev/null
@@ -1,51 +0,0 @@
-[buildout]
-extends =
-    buildout.cfg
-parts +=
-    test
-    coverage-test
-    coverage-report
-    robot
-versions = versions
-
-[environment]
-BUILDOUT_DIR = ${buildout:directory}
-zope_i18n_compile_mo_files = true
-
-[test]
-recipe = zc.recipe.testrunner
-defaults = ['--auto-color', '--auto-progress']
-eggs =
-    Products.DateRecurringIndex [test]
-    icalendar [test]
-    plone.app.event [test]
-    plone.event [test]
-    plone.formwidget.recurrence [test]
-environment = environment
-
-[coverage-test]
-recipe = zc.recipe.testrunner
-eggs = ${test:eggs}
-defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
-
-[coverage-report]
-recipe = zc.recipe.egg
-eggs = z3c.coverage
-scripts = coveragereport
-arguments = ('coverage', 'report')
-
-[robot]
-recipe = zc.recipe.egg
-eggs =
-    ${instance:eggs}
-    plone.app.robotframework [debug]
-
-[versions]
-plone.app.robotframework = 0.9.5
-robotframework = 2.8.4
-robotframework-selenium2library = 1.5.0
-robotsuite = 1.6.1
-selenium = 2.43.0
-robotframework-selenium2screenshots = 0.4.0
-sphinxcontrib-robotframework = 0.4.3
-robotframework-debuglibrary = 0.3
diff --git a/versions.cfg b/versions.cfg
deleted file mode 100644
index 195b500..0000000
--- a/versions.cfg
+++ /dev/null
@@ -1,17 +0,0 @@
-# Version requirements for plone.app.event
-# You can extend you own buildout sources.cfg and versions.cfg
-
-[buildout]
-versions = versions
-
-[versions]
-Products.DateRecurringIndex = 2.1
-icalendar = 3.9.1
-plone.app.event = 2.0.2
-plone.event = 1.3
-plone.formwidget.recurrence = 2.0.1
-plone.app.contenttypes = 1.2.3
-plone.app.dexterity = 2.1.14
-# Plone 4.3 dependencies
-plone.app.widgets = 1.8.0
-plone.app.z3cform = 1.0.1


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-11-23T20:51:24+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/e20449d06fa3d7667cca8fc8f8897c790e8d8483

Merge pull request #206 from plone/thet-cleanup

cleanup - p.a.widgets, buildout

Files changed:
M CHANGES.rst
M README.rst
M buildout-43.cfg
M buildout.cfg
M plone/app/event/bbb/profiles/default/metadata.xml
M plone/app/event/dx/behaviors.py
M plone/app/event/profiles/default/metadata.xml
M setup.cfg
M setup.py
D bootstrap.py
D dev.cfg
D sources.cfg
D test-43.cfg
D test.cfg
D versions.cfg

diff --git a/CHANGES.rst b/CHANGES.rst
index 035db0f..95fe70d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -12,8 +12,19 @@ New:
 
 Fixes:
 
-- *add item here*
-  
+- Cleanup tasks: Only install the plone.app.widgets profile for Plone 4.3.
+  Remove the unnecessary ``plone50`` setup.py extra section. Fix
+  plone.app.event to also work with plone.app.z3cform versions below < 1.0.
+  [thet]
+
+- Cleanup buildout: Remove sources.cfg, versions.cfg, test.cfg, test-43.cfg and
+  test.cfg. Since this package is merged, it doesn't make much sense to
+  maintain separate version and sources files to extend from. Tests and
+  development environment is built in the buildout.cfg and buildout-43.cfg
+  files. Remove bootstrap.py - use ``virtualenv .; ./bin/pip install
+  zc.buildout`` instead.
+  [thet]
+
 
 2.0.4 (2015-10-28)
 ------------------
diff --git a/README.rst b/README.rst
index 9a7fa23..6579029 100644
--- a/README.rst
+++ b/README.rst
@@ -6,3 +6,19 @@ Plone.app.event is the calendaring framework for Plone. It provides Dexterity be
 For a Dexterity event type using plone.app.event, use plone.app.contenttypes 1.1 or newer.
 
 The complete documentation can be found on: https://ploneappevent.readthedocs.org
+
+
+Installation
+------------
+
+For Standalone installation follow the standard buildout procedure::
+
+    $ virtualenv .
+    $ ./bin/pip install -U zc.buildout setuptools pip
+    $ ./bin/buildout
+
+For Plone 4.3 do::
+
+    $ ./bin/buildout -c buildout-43.cfg
+
+Note, both commands will install a test and development environment.
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index ed57894..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,178 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os
-import shutil
-import sys
-import tempfile
-
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --find-links to point to local resources, you can keep 
-this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", "--config-file",
-                  help=("Specify the path to the buildout configuration "
-                        "file to be used."))
-parser.add_option("-f", "--find-links",
-                  help=("Specify a URL to search for buildout releases"))
-parser.add_option("--allow-site-packages",
-                  action="store_true", default=False,
-                  help=("Let bootstrap.py use existing site packages"))
-
-
-options, args = parser.parse_args()
-
-######################################################################
-# load/install setuptools
-
-try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
-    from urllib.request import urlopen
-except ImportError:
-    from urllib2 import urlopen
-
-ez = {}
-exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
-
-if not options.allow_site_packages:
-    # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions 
-    # of setuptools are not in the path
-    import site
-    # inside a virtualenv, there is no 'getsitepackages'. 
-    # We can't remove these reliably
-    if hasattr(site, 'getsitepackages'):
-        for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
-
-setup_args = dict(to_dir=tmpeggs, download_delay=0)
-ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
-
-# This does not (always?) update the default working set.  We will
-# do it.
-for path in sys.path:
-    if path not in pkg_resources.working_set.entries:
-        pkg_resources.working_set.add_entry(path)
-
-######################################################################
-# Install buildout
-
-ws = pkg_resources.working_set
-
-cmd = [sys.executable, '-c',
-       'from setuptools.command.easy_install import main; main()',
-       '-mZqNxd', tmpeggs]
-
-find_links = os.environ.get(
-    'bootstrap-testing-find-links',
-    options.find_links or
-    ('http://downloads.buildout.org/'
-     if options.accept_buildout_test_releases else None)
-    )
-if find_links:
-    cmd.extend(['-f', find_links])
-
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setuptools_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-if version:
-    requirement = '=='.join((requirement, version))
-cmd.append(requirement)
-
-import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
-    raise Exception(
-        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
-
-######################################################################
-# Import and run buildout
-
-ws.add_entry(tmpeggs)
-ws.require(requirement)
-import zc.buildout.buildout
-
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout-43.cfg b/buildout-43.cfg
index 6d2a5aa..b6fa547 100644
--- a/buildout-43.cfg
+++ b/buildout-43.cfg
@@ -3,19 +3,36 @@ extends =
     https://raw.githubusercontent.com/plone/buildout.coredev/4.3/versions.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/4.3/sources.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/4.3/checkouts.cfg
-    versions.cfg
-    sources.cfg
-parts = instance
 
-versions = versions
-sources-dir = ${buildout:directory}/devsrc
+parts =
+    instance
+# DEV
+    i18ndude
+    omelette
+    zopepy
+    sphinx
+    checkversions
+# TESTING
+    test
+    coverage-test
+    coverage-report
+    robot
 
+auto-checkout +=
+    Products.DateRecurringIndex
+    icalendar
+    jquery.recurrenceinput.js
+    plone.event
+    plone.formwidget.recurrence
+
+extensions += mr.developer
+sources-dir = ${buildout:directory}/devsrc
 develop = .
+versions = versions
+
+# One of: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
+log-level = INFO
 
-[sources]
-# Looks like, `develop = .` doesn't work well with mr.developer. So we checkout
-# plone.app.event to the buildout directory path.
-plone.app.event = git git@github.com:plone/plone.app.event.git branch=master full-path=${buildout:directory}
 
 [instance]
 recipe = plone.recipe.zope2instance
@@ -25,3 +42,88 @@ eggs =
     Plone
     Pillow
     plone.app.event
+# DEVELOPMENT
+    plone.reload
+    plone.app.debugtoolbar
+
+
+# DEVELOPMENT
+
+[sources]
+Products.DateRecurringIndex  = git git@github.com:collective/Products.DateRecurringIndex.git
+icalendar                    = git git@github.com:collective/icalendar.git
+jquery.recurrenceinput.js    = git git@github.com:collective/jquery.recurrenceinput.js.git egg=false
+plone.event                  = git git@github.com:plone/plone.event.git
+plone.formwidget.recurrence  = git git@github.com:plone/plone.formwidget.recurrence.git branch=1.x
+
+[i18ndude]
+unzip = true
+recipe = zc.recipe.egg
+eggs = i18ndude
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+
+[zopepy]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+interpreter = zopepy
+scripts = zopepy
+
+[sphinx]
+recipe = collective.recipe.sphinxbuilder
+source = ${buildout:directory}/docs
+interpreter = ${buildout:directory}/bin/zopepy
+
+[checkversions]
+recipe=zc.recipe.egg
+eggs=z3c.checkversions [buildout]
+
+
+# TESTING
+
+[environment]
+BUILDOUT_DIR = ${buildout:directory}
+zope_i18n_compile_mo_files = true
+
+[test]
+recipe = zc.recipe.testrunner
+defaults = ['--auto-color', '--auto-progress']
+eggs =
+    Products.DateRecurringIndex [test]
+    icalendar [test]
+    plone.app.event [test]
+    plone.event [test]
+    plone.formwidget.recurrence [test]
+environment = environment
+
+[coverage-test]
+recipe = zc.recipe.testrunner
+eggs = ${test:eggs}
+defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
+
+[coverage-report]
+recipe = zc.recipe.egg
+eggs = z3c.coverage
+scripts = coveragereport
+arguments = ('coverage', 'report')
+
+[robot]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    plone.app.robotframework [debug]
+
+
+# ALL
+
+[versions]
+setuptools =
+zc.buildout =
diff --git a/buildout.cfg b/buildout.cfg
index f47524b..d4f93c6 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -3,19 +3,35 @@ extends =
     https://raw.githubusercontent.com/plone/buildout.coredev/5.0/versions.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/5.0/sources.cfg
     https://raw.githubusercontent.com/plone/buildout.coredev/5.0/checkouts.cfg
-    versions.cfg
-    sources.cfg
-parts = instance
+parts =
+    instance
+# DEV
+    i18ndude
+    omelette
+    zopepy
+    sphinx
+    checkversions
+# TESTING
+    test
+    coverage-test
+    coverage-report
+    robot
 
-versions = versions
-sources-dir = ${buildout:directory}/devsrc
+auto-checkout +=
+    Products.DateRecurringIndex
+    icalendar
+    jquery.recurrenceinput.js
+    plone.event
+    plone.formwidget.recurrence
 
+extensions += mr.developer
+sources-dir = ${buildout:directory}/devsrc
 develop = .
+versions = versions
+
+# One of: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
+log-level = INFO
 
-[sources]
-# Looks like, `develop = .` doesn't work well with mr.developer. So we checkout
-# plone.app.event to the buildout directory path.
-plone.app.event = git git@github.com:plone/plone.app.event.git branch=master full-path=${buildout:directory}
 
 [instance]
 recipe = plone.recipe.zope2instance
@@ -25,3 +41,87 @@ eggs =
     Plone
     Pillow
     plone.app.event
+# DEVELOPMENT
+    plone.reload
+    plone.app.debugtoolbar
+
+# DEVELOPMENT
+
+[sources]
+Products.DateRecurringIndex  = git git@github.com:collective/Products.DateRecurringIndex.git
+icalendar                    = git git@github.com:collective/icalendar.git
+jquery.recurrenceinput.js    = git git@github.com:collective/jquery.recurrenceinput.js.git egg=false
+plone.event                  = git git@github.com:plone/plone.event.git
+plone.formwidget.recurrence  = git git@github.com:plone/plone.formwidget.recurrence.git branch=master
+
+[i18ndude]
+unzip = true
+recipe = zc.recipe.egg
+eggs = i18ndude
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+
+[zopepy]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    ${test:eggs}
+    ${robot:eggs}
+interpreter = zopepy
+scripts = zopepy
+
+[sphinx]
+recipe = collective.recipe.sphinxbuilder
+source = ${buildout:directory}/docs
+interpreter = ${buildout:directory}/bin/zopepy
+
+[checkversions]
+recipe=zc.recipe.egg
+eggs=z3c.checkversions [buildout]
+
+
+# TESTING
+
+[environment]
+BUILDOUT_DIR = ${buildout:directory}
+zope_i18n_compile_mo_files = true
+
+[test]
+recipe = zc.recipe.testrunner
+defaults = ['--auto-color', '--auto-progress']
+eggs =
+    Products.DateRecurringIndex [test]
+    icalendar [test]
+    plone.app.event [test]
+    plone.event [test]
+    plone.formwidget.recurrence [test]
+environment = environment
+
+[coverage-test]
+recipe = zc.recipe.testrunner
+eggs = ${test:eggs}
+defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
+
+[coverage-report]
+recipe = zc.recipe.egg
+eggs = z3c.coverage
+scripts = coveragereport
+arguments = ('coverage', 'report')
+
+[robot]
+recipe = zc.recipe.egg
+eggs =
+    ${instance:eggs}
+    plone.app.robotframework [debug]
+
+
+# ALL
+
+[versions]
+setuptools =
+zc.buildout =
diff --git a/dev.cfg b/dev.cfg
deleted file mode 100644
index 11a65d1..0000000
--- a/dev.cfg
+++ /dev/null
@@ -1,46 +0,0 @@
-[buildout]
-extends =
-    test.cfg
-
-parts +=
-    i18ndude
-    omelette
-    zopepy
-    sphinx
-    checkversions
-
-# One of: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
-log-level = INFO
-
-[instance]
-user = admin:admin
-eggs +=
-    plone.reload
-    plone.app.debugtoolbar
-
-[i18ndude]
-unzip = true
-recipe = zc.recipe.egg
-eggs = i18ndude
-
-[omelette]
-recipe = collective.recipe.omelette
-eggs =
-    ${instance:eggs}
-    ${test:eggs}
-    ${robot:eggs}
-
-[zopepy]
-recipe = zc.recipe.egg
-eggs = ${test:eggs}
-interpreter = zopepy
-scripts = zopepy
-
-[sphinx]
-recipe = collective.recipe.sphinxbuilder
-source = ${buildout:directory}/docs
-interpreter = ${buildout:directory}/bin/zopepy
-
-[checkversions]
-recipe=zc.recipe.egg
-eggs=z3c.checkversions [buildout]
diff --git a/plone/app/event/bbb/profiles/default/metadata.xml b/plone/app/event/bbb/profiles/default/metadata.xml
index 3cbcf5b..18e6296 100644
--- a/plone/app/event/bbb/profiles/default/metadata.xml
+++ b/plone/app/event/bbb/profiles/default/metadata.xml
@@ -2,6 +2,7 @@
 <metadata>
   <version>1</version>
   <dependencies>
+    <dependency>profile-plone.app.widgets:default</dependency>
     <dependency>profile-plone.app.event:default</dependency>
   </dependencies>
 </metadata>
diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py
index f28e97d..adc8688 100644
--- a/plone/app/event/dx/behaviors.py
+++ b/plone/app/event/dx/behaviors.py
@@ -1,6 +1,7 @@
 """Behaviors to enable calendarish event extension to dexterity content types.
 """
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import getFSVersionTuple
 from Products.CMFPlone.utils import safe_unicode
 from plone.app.dexterity.behaviors.metadata import ICategorization
 from plone.app.event import messageFactory as _
@@ -25,6 +26,7 @@
 from plone.indexer import indexer
 from plone.supermodel import model
 from plone.uuid.interfaces import IUUID
+from z3c.form.browser.textlines import TextLinesFieldWidget
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.util import getSpecification
 from z3c.form.widget import FieldWidget
@@ -37,16 +39,14 @@
 from zope.interface import provider
 from zope.schema.interfaces import IContextAwareDefaultFactory
 
-# TODO: altern., for backwards compat., we could import from plone.z3cform
-from z3c.form.browser.textlines import TextLinesFieldWidget
 
-import pkg_resources
+PLONE5 = getFSVersionTuple()[0] >= 5
 
-try:
+if PLONE5:
     # Plone 5
-    pkg_resources.get_distribution('plone.app.z3cform')
     from plone.app.z3cform.widget import DatetimeWidget
-except pkg_resources.DistributionNotFound:
+else:
+    # Plone 4
     from plone.app.widgets.dx import DatetimeWidget
 
 
diff --git a/plone/app/event/profiles/default/metadata.xml b/plone/app/event/profiles/default/metadata.xml
index 09f3176..d7cd151 100644
--- a/plone/app/event/profiles/default/metadata.xml
+++ b/plone/app/event/profiles/default/metadata.xml
@@ -3,7 +3,6 @@
   <version>15</version>
   <dependencies>
     <dependency>profile-plone.app.registry:default</dependency>
-    <dependency>profile-plone.app.widgets:default</dependency>
     <dependency>profile-plone.app.z3cform:default</dependency>
     <dependency>profile-plone.formwidget.recurrence:default</dependency>
   </dependencies>
diff --git a/setup.cfg b/setup.cfg
index 1453a00..616a37b 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,5 +1,4 @@
 [check-manifest]
 ignore =
-    bootstrap.py
     *.cfg
     *.sh
diff --git a/setup.py b/setup.py
index 9f66b43..c19caa2 100644
--- a/setup.py
+++ b/setup.py
@@ -100,9 +100,6 @@
         ],
         'plone43': [
             'plone.app.widgets [dexterity] >= 1.7.0',
-        ],
-        'plone50': [  # optional, plone 5 already depends on these versions
-            'plone.app.z3cform >= 1.1.0.dev0',
         ]
     },
     entry_points="""
diff --git a/sources.cfg b/sources.cfg
deleted file mode 100644
index 460124e..0000000
--- a/sources.cfg
+++ /dev/null
@@ -1,20 +0,0 @@
-# mr.developer source definitions
-# You can extend you own buildout sources.cfg and versions.cfg
-
-[buildout]
-extensions += mr.developer
-auto-checkout +=
-    Products.DateRecurringIndex
-    icalendar
-    jquery.recurrenceinput.js
-    plone.event
-    plone.app.event
-    plone.formwidget.recurrence
-
-[sources]
-Products.DateRecurringIndex  = git git@github.com:collective/Products.DateRecurringIndex.git
-icalendar                    = git git@github.com:collective/icalendar.git
-jquery.recurrenceinput.js    = git git@github.com:collective/jquery.recurrenceinput.js.git egg=false
-plone.app.event              = git git@github.com:plone/plone.app.event.git
-plone.event                  = git git@github.com:plone/plone.event.git
-plone.formwidget.recurrence  = git git@github.com:plone/plone.formwidget.recurrence.git branch=plone5
diff --git a/test-43.cfg b/test-43.cfg
deleted file mode 100644
index 7cc05e4..0000000
--- a/test-43.cfg
+++ /dev/null
@@ -1,51 +0,0 @@
-[buildout]
-extends =
-    buildout-43.cfg
-parts +=
-    test
-    coverage-test
-    coverage-report
-    robot
-versions = versions
-
-[environment]
-BUILDOUT_DIR = ${buildout:directory}
-zope_i18n_compile_mo_files = true
-
-[test]
-recipe = zc.recipe.testrunner
-defaults = ['--auto-color', '--auto-progress']
-eggs =
-    Products.DateRecurringIndex [test]
-    icalendar [test]
-    plone.app.event [test]
-    plone.event [test]
-    plone.formwidget.recurrence [test]
-environment = environment
-
-[coverage-test]
-recipe = zc.recipe.testrunner
-eggs = ${test:eggs}
-defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
-
-[coverage-report]
-recipe = zc.recipe.egg
-eggs = z3c.coverage
-scripts = coveragereport
-arguments = ('coverage', 'report')
-
-[robot]
-recipe = zc.recipe.egg
-eggs =
-    ${instance:eggs}
-    plone.app.robotframework [debug]
-
-[versions]
-plone.app.robotframework = 0.9.5
-robotframework = 2.8.4
-robotframework-selenium2library = 1.5.0
-robotsuite = 1.6.1
-selenium = 2.43.0
-robotframework-selenium2screenshots = 0.4.0
-sphinxcontrib-robotframework = 0.4.3
-robotframework-debuglibrary = 0.3
diff --git a/test.cfg b/test.cfg
deleted file mode 100644
index 7b44189..0000000
--- a/test.cfg
+++ /dev/null
@@ -1,51 +0,0 @@
-[buildout]
-extends =
-    buildout.cfg
-parts +=
-    test
-    coverage-test
-    coverage-report
-    robot
-versions = versions
-
-[environment]
-BUILDOUT_DIR = ${buildout:directory}
-zope_i18n_compile_mo_files = true
-
-[test]
-recipe = zc.recipe.testrunner
-defaults = ['--auto-color', '--auto-progress']
-eggs =
-    Products.DateRecurringIndex [test]
-    icalendar [test]
-    plone.app.event [test]
-    plone.event [test]
-    plone.formwidget.recurrence [test]
-environment = environment
-
-[coverage-test]
-recipe = zc.recipe.testrunner
-eggs = ${test:eggs}
-defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']
-
-[coverage-report]
-recipe = zc.recipe.egg
-eggs = z3c.coverage
-scripts = coveragereport
-arguments = ('coverage', 'report')
-
-[robot]
-recipe = zc.recipe.egg
-eggs =
-    ${instance:eggs}
-    plone.app.robotframework [debug]
-
-[versions]
-plone.app.robotframework = 0.9.5
-robotframework = 2.8.4
-robotframework-selenium2library = 1.5.0
-robotsuite = 1.6.1
-selenium = 2.43.0
-robotframework-selenium2screenshots = 0.4.0
-sphinxcontrib-robotframework = 0.4.3
-robotframework-debuglibrary = 0.3
diff --git a/versions.cfg b/versions.cfg
deleted file mode 100644
index 195b500..0000000
--- a/versions.cfg
+++ /dev/null
@@ -1,17 +0,0 @@
-# Version requirements for plone.app.event
-# You can extend you own buildout sources.cfg and versions.cfg
-
-[buildout]
-versions = versions
-
-[versions]
-Products.DateRecurringIndex = 2.1
-icalendar = 3.9.1
-plone.app.event = 2.0.2
-plone.event = 1.3
-plone.formwidget.recurrence = 2.0.1
-plone.app.contenttypes = 1.2.3
-plone.app.dexterity = 2.1.14
-# Plone 4.3 dependencies
-plone.app.widgets = 1.8.0
-plone.app.z3cform = 1.0.1


