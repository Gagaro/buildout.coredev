Repository: plone.app.registry


Branch: refs/heads/master
Date: 2015-10-06T13:14:06+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/5bb3b6dc90e070113f8e639915de81ffa3f97a4e

cleanup: pep8, utf8 headers, readability, etc.

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/registry/browser/__init__.py
M plone/app/registry/browser/edit.py
M plone/app/registry/browser/records.py
M plone/app/registry/exportimport/__init__.py
M plone/app/registry/exportimport/configure.zcml
M plone/app/registry/exportimport/fields.py
M plone/app/registry/exportimport/handler.py
M plone/app/registry/exportimport/handlers.zcml
M plone/app/registry/registry.py
M plone/app/registry/testing.py
M plone/app/registry/tests/__init__.py
M plone/app/registry/tests/data.py
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7c64f9d..7948880 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 1.3.6 (unreleased)
 ------------------
 
+- cleanup: pep8, utf8 headers, readability, etc.
+  [jensens]
+
 - Let our ``plone.app.registry`` import step depend on ``typeinfo``.
   The portal types may be needed for vocabularies.  For example, you
   could get an error when adding a not yet installed type to
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/registry/browser/__init__.py b/plone/app/registry/browser/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/registry/browser/__init__.py
+++ b/plone/app/registry/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/registry/browser/edit.py b/plone/app/registry/browser/edit.py
index 442af39..846fb88 100644
--- a/plone/app/registry/browser/edit.py
+++ b/plone/app/registry/browser/edit.py
@@ -1,13 +1,12 @@
-from zope.interface import implements
-from zope.publisher.interfaces import IPublishTraverse
-
+# -*- coding: utf-8 -*-
+from Acquisition import ImplicitAcquisitionWrapper
 from plone.z3cform import layout
-from z3c.form import form, field, button
-
 from Products.statusmessages.interfaces import IStatusMessage
-from Acquisition import ImplicitAcquisitionWrapper
-
+from z3c.form import form, field, button
 from zope.i18nmessageid import MessageFactory
+from zope.interface import implementer
+from zope.publisher.interfaces import IPublishTraverse
+
 _ = MessageFactory('plone')
 
 
@@ -34,7 +33,10 @@ def updateActions(self):
 
     @property
     def label(self):
-        return _(u"Edit record: ${name}", mapping={'name': self.record.__name__})
+        return _(
+            u"Edit record: ${name}",
+            mapping={'name': self.record.__name__}
+        )
 
     @button.buttonAndHandler(_(u"Save"), name='save')
     def handleSave(self, action):
@@ -43,17 +45,23 @@ def handleSave(self, action):
             self.status = self.formErrorsMessage
             return
         self.record.value = data['value']
-        IStatusMessage(self.request).addStatusMessage(_(u"Changes saved."), "info")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes saved."),
+            "info"
+        )
         self.request.response.redirect(self.context.absolute_url())
 
     @button.buttonAndHandler(_(u"Cancel"), name='cancel')
     def handleCancel(self, action):
-        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled."), "info")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Edit cancelled."),
+            "info"
+        )
         self.request.response.redirect(self.context.absolute_url())
 
 
+@implementer(IPublishTraverse)
 class RecordEditView(layout.FormWrapper):
-    implements(IPublishTraverse)
     form = RecordEditForm
 
     def __init__(self, context, request):
diff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py
index 80b952e..feb8017 100644
--- a/plone/app/registry/browser/records.py
+++ b/plone/app/registry/browser/records.py
@@ -1,5 +1,6 @@
-from Products.Five import BrowserView
+# -*- coding: utf-8 -*-
 from Products.CMFPlone.PloneBatch import Batch
+from Products.Five import BrowserView
 
 
 def _true(s, v):
@@ -53,8 +54,15 @@ def __call__(self):
                         break
             if recordPrefix not in self.prefixes:
                 self.prefixes[recordPrefix] = prefixValue
-            if compare(search, prefixValue) or compare(search, record.__name__):
+            if (
+                compare(search, prefixValue)
+                or compare(search, record.__name__)
+            ):
                 self.records.append(record)
-        self.records = Batch(self.records, 15,
-            int(form.get('b_start', '0')), orphan=1)
+        self.records = Batch(
+            self.records,
+            15,
+            int(form.get('b_start', '0')),
+            orphan=1
+        )
         return self.index()
diff --git a/plone/app/registry/exportimport/__init__.py b/plone/app/registry/exportimport/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/registry/exportimport/__init__.py
+++ b/plone/app/registry/exportimport/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/registry/exportimport/configure.zcml b/plone/app/registry/exportimport/configure.zcml
index 5d7626d..eb38fe1 100644
--- a/plone/app/registry/exportimport/configure.zcml
+++ b/plone/app/registry/exportimport/configure.zcml
@@ -1,28 +1,27 @@
 <configure
+    i18n_domain="plone"
     xmlns="http://namespaces.zope.org/zope"
-    xmlns:gs="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
+    xmlns:gs="http://namespaces.zope.org/genericsetup">
 
-    <include package="plone.supermodel" />
-    <include file="handlers.zcml" />
+  <include package="plone.supermodel" />
+  <include file="handlers.zcml" />
 
-    <!-- export/import steps -->
+  <!-- export/import steps -->
+  <gs:importStep
+      description="Add or remove records, or change values"
+      handler=".handler.importRegistry"
+      name="plone.app.registry"
+      title="Manage the configuration registry">
+    <depends name="componentregistry" />
+    <depends name="toolset" />
+    <depends name="typeinfo"/>
+  </gs:importStep>
 
-    <gs:importStep
-        name="plone.app.registry"
-        title="Manage the configuration registry"
-        description="Add or remove records, or change values"
-        handler=".handler.importRegistry">
-        <depends name="componentregistry"/>
-        <depends name="toolset"/>
-        <depends name="typeinfo"/>
-    </gs:importStep>
-
-    <gs:exportStep
-        name="plone.app.registry"
-        title="Export the configuration registry schemata"
-        description="Exports records and settings"
-        handler=".handler.exportRegistry"
-        />
+  <gs:exportStep
+      description="Exports records and settings"
+      handler=".handler.exportRegistry"
+      name="plone.app.registry"
+      title="Export the configuration registry schemata"
+  />
 
 </configure>
diff --git a/plone/app/registry/exportimport/fields.py b/plone/app/registry/exportimport/fields.py
index b14303e..6e4a27f 100644
--- a/plone/app/registry/exportimport/fields.py
+++ b/plone/app/registry/exportimport/fields.py
@@ -1,5 +1,8 @@
-from plone.supermodel.exportimport import BaseHandler, DictHandler, ChoiceHandler
+# -*- coding: utf-8 -*-
 from plone.registry import field
+from plone.supermodel.exportimport import BaseHandler
+from plone.supermodel.exportimport import ChoiceHandler
+from plone.supermodel.exportimport import DictHandler
 
 
 class PersistentFieldHandler(BaseHandler):
diff --git a/plone/app/registry/exportimport/handler.py b/plone/app/registry/exportimport/handler.py
index 17d0abb..71e32af 100644
--- a/plone/app/registry/exportimport/handler.py
+++ b/plone/app/registry/exportimport/handler.py
@@ -1,24 +1,22 @@
-from zope.component import queryUtility
-from zope.schema import getFieldNames
-
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from zope.dottedname.resolve import resolve
-
-from plone.registry.interfaces import IRegistry
-from plone.registry.interfaces import IPersistentField
-from plone.registry.interfaces import IInterfaceAwareRecord
-from plone.registry.interfaces import IFieldRef
-
-from plone.registry import Record
 from plone.registry import FieldRef
-
+from plone.registry import Record
+from plone.registry.interfaces import IFieldRef
+from plone.registry.interfaces import IInterfaceAwareRecord
+from plone.registry.interfaces import IPersistentField
+from plone.registry.interfaces import IRegistry
+from plone.supermodel.debug import parseinfo
+from plone.supermodel.interfaces import I18N_NAMESPACE
 from plone.supermodel.interfaces import IFieldExportImportHandler
 from plone.supermodel.interfaces import IFieldNameExtractor
-from plone.supermodel.interfaces import I18N_NAMESPACE
-from plone.supermodel.debug import parseinfo
-
-from plone.supermodel.utils import prettyXML, elementToValue, valueToElement, ns
+from plone.supermodel.utils import elementToValue
+from plone.supermodel.utils import ns
+from plone.supermodel.utils import prettyXML
+from plone.supermodel.utils import valueToElement
+from zope.component import queryUtility
+from zope.dottedname.resolve import resolve
+from zope.schema import getFieldNames
 
 _marker = object()
 
@@ -98,9 +96,10 @@ def importDocument(self, document):
     def importRecord(self, node):
         name = node.get('name', '')
         if node.get('delete') is not None:
-            self.logger.warning(u"The 'delete' attribute of <record /> nodes "
-                                u"is deprecated, it should be replaced with "
-                                u"'remove'.")
+            self.logger.warning(
+                u"The 'delete' attribute of <record /> nodes is deprecated, "
+                u"it should be replaced with 'remove'."
+            )
         remove = node.get('remove', node.get('delete', 'false'))
 
         interfaceName = node.get('interface', None)
@@ -125,7 +124,10 @@ def importRecord(self, node):
                 del self.context.records[name]
                 self.logger.info("Removed record %s." % name)
             else:
-                self.logger.warning("Record %s was marked for deletion, but was not found." % name)
+                self.logger.warning(
+                    "Record {0} was marked for deletion, but was not "
+                    "found.".format(name)
+                )
             return
 
         # See if we have an existing record
@@ -152,8 +154,14 @@ def importRecord(self, node):
                 interface = None
                 field = None
             except TypeError:
-                self.logger.warning("Field %s in interface %s specified for \
-                    record %s cannot be used as a persistent field." % (fieldName, interfaceName, name))
+                self.logger.warning(
+                    "Field {0} in interface {1} specified for record {2} "
+                    "cannot be used as a persistent field.".format(
+                        fieldName,
+                        interfaceName,
+                        name
+                    )
+                )
                 interface = None
                 field = None
 
@@ -183,17 +191,27 @@ def importRecord(self, node):
             else:
                 # We have a standard field
                 field_type = field_node.attrib.get('type', None)
-                field_type_handler = queryUtility(IFieldExportImportHandler, name=field_type)
+                field_type_handler = queryUtility(
+                    IFieldExportImportHandler,
+                    name=field_type
+                )
                 if field_type_handler is None:
-                    raise TypeError("Field of type %s used for record %s is not supported." % (field_type, name))
+                    raise TypeError(
+                        "Field of type {0} used for record {1} is not "
+                        "supported.".format(field_type, name)
+                    )
                 else:
                     field = field_type_handler.read(field_node)
                     if not IPersistentField.providedBy(field):
-                        raise TypeError("Only persistent fields may be imported. \
-                            %s used for record %s is invalid." % (field_type, name))
+                        raise TypeError(
+                            "Only persistent fields may be imported. {0} used "
+                            "for record {1} is invalid.".format(
+                                field_type,
+                                name
+                            )
+                        )
 
         if field is not None and not IFieldRef.providedBy(field):
-
             # Set interface name and fieldName, if applicable
             field.interfaceName = interfaceName
             field.fieldName = fieldName
@@ -208,8 +226,12 @@ def importRecord(self, node):
             field = existing_record.field
 
         if field is None:
-            raise ValueError("Cannot find a field for the record %s. Add a \
-                <field /> element or reference an interface and field name." % name)
+            raise ValueError(
+                "Cannot find a field for the record {0}. Add a <field /> "
+                "element or reference an interface and field name.".format(
+                    name
+                )
+            )
 
         # Extract the value
 
@@ -231,29 +253,38 @@ def importRecord(self, node):
 
                 if not value_purge and type(value) == type(existing_value):
                     if isinstance(value, list):
-                        value = existing_value + [v for v in value if v not in existing_value]
+                        value = (
+                            existing_value +
+                            [v for v in value if v not in existing_value]
+                        )
                     elif isinstance(value, tuple):
-                        value = existing_value + tuple([v for v in value if v not in existing_value])
+                        value = (
+                            existing_value +
+                            tuple(
+                                [v for v in value if v not in existing_value]
+                            )
+                        )
                     elif isinstance(value, (set, frozenset, )):
                         value = existing_value.union(value)
                     elif isinstance(value, dict):
                         for key, value in value.items():
                             # check if value is list, if so, let's add
                             # instead of overridding
-                            if type(value) == list:
-                                if key in existing_value and \
-                                        not shouldPurgeList(value_node, key):
-                                    existing = existing_value[key]
-                                    for item in existing:
-                                        # here, we'll remove existing items
-                                        # point is that we don't want duplicates
-                                        # and don't want to reorder
-                                        if item in value:
-                                            value.remove(item)
-                                    existing.extend(value)
-                                    value = existing
+                            if (
+                                type(value) == list
+                                and key in existing_value
+                                and not shouldPurgeList(value_node, key)
+                            ):
+                                existing = existing_value[key]
+                                for item in existing:
+                                    # here, we'll remove existing items
+                                    # point is that we don't want
+                                    # duplicates and don't want to reorder
+                                    if item in value:
+                                        value.remove(item)
+                                existing.extend(value)
+                                value = existing
                             existing_value[key] = value
-
                         value = existing_value
 
                 existing_record.value = value
@@ -267,21 +298,29 @@ def importRecords(self, node):
 
         interfaceName = node.attrib.get('interface', None)
         if interfaceName is None:
-            raise KeyError(u"A <records /> node must have an 'interface' attribute.")
+            raise KeyError(
+                u"A <records /> node must have an 'interface' attribute."
+            )
 
-        prefix = node.attrib.get('prefix', None) # None means use interface.__identifier__
+        prefix = node.attrib.get(
+            'prefix',
+            None  # None means use interface.__identifier__
+        )
 
         if node.attrib.get('delete') is not None:
-            self.logger.warning(u"The 'delete' attribute of <record /> nodes "
-                                u"is deprecated, it should be replaced with "
-                                u"'remove'.")
-        remove = node.attrib.get('remove', node.attrib.get('delete', 'false')).lower() == 'true'
+            self.logger.warning(
+                u"The 'delete' attribute of <record /> nodes is deprecated, "
+                u"it should be replaced with 'remove'."
+            )
+        remove = node.attrib.get('remove', node.attrib.get('delete', 'false'))
+        remove = remove.lower() == 'true'
 
         # May raise ImportError
         interface = resolve(interfaceName)
 
         omit = []
-        values = [] # Fields that should have their value set as they don't exist yet
+        values = []
+        # Fields that should have their value set as they don't exist yet
 
         for child in node:
             if not isinstance(child.tag, str):
@@ -293,8 +332,10 @@ def importRecords(self, node):
                 values.append(child)
 
         if remove and values:
-            raise ValueError("A <records /> node with 'remove=\"true\"' must not contain "
-                             "<value /> nodes.")
+            raise ValueError(
+                "A <records /> node with 'remove=\"true\"' must not contain "
+                "<value /> nodes."
+            )
         elif remove:
             for f in getFieldNames(interface):
                 if f in omit:
@@ -304,7 +345,11 @@ def importRecords(self, node):
                 values.append(child)
 
         # May raise TypeError
-        self.context.registerInterface(interface, omit=tuple(omit), prefix=prefix)
+        self.context.registerInterface(
+            interface,
+            omit=tuple(omit),
+            prefix=prefix
+        )
 
         if not values and not remove:
             # Skip out if there are no value records to handle
@@ -315,7 +360,13 @@ def importRecords(self, node):
             prefix = interface.__identifier__
 
         for value in values:
-            field = etree.Element("record", interface=interface.__identifier__, field=value.attrib["key"], prefix=prefix, remove=repr(remove).lower())
+            field = etree.Element(
+                "record",
+                interface=interface.__identifier__,
+                field=value.attrib["key"],
+                prefix=prefix,
+                remove=repr(remove).lower()
+            )
             field.append(value)
             self.importRecord(field)
 
@@ -361,12 +412,21 @@ def exportRecord(self, record):
                 self.logger.warning("Field type %s specified for record %s \
                     cannot be exported" % (field_type, record.__name__))
             else:
-                field_element = handler.write(record.field, None, field_type, elementName='field')
+                field_element = handler.write(
+                    record.field,
+                    None,
+                    field_type,
+                    elementName='field'
+                )
                 node.append(field_element)
 
         # write value
-
-        value_element = valueToElement(record.field, record.value, name='value', force=True)
+        value_element = valueToElement(
+            record.field,
+            record.value,
+            name='value',
+            force=True
+        )
         node.append(value_element)
 
         return node
diff --git a/plone/app/registry/exportimport/handlers.zcml b/plone/app/registry/exportimport/handlers.zcml
index 7ebd363..a3d9e7a 100644
--- a/plone/app/registry/exportimport/handlers.zcml
+++ b/plone/app/registry/exportimport/handlers.zcml
@@ -1,98 +1,94 @@
 <configure
-    xmlns="http://namespaces.zope.org/zope"
-    i18n_domain="plone">
-
-    <include package="plone.supermodel" />
-
-    <!-- plone.supermodel field handlers -->
-
-    <utility
-        component=".fields.BytesHandler"
-        name="plone.registry.field.Bytes"
-        />
-    <utility
-        component=".fields.BytesLineHandler"
-        name="plone.registry.field.BytesLine"
-        />
-    <utility
-        component=".fields.ASCIIHandler"
-        name="plone.registry.field.ASCII"
-        />
-    <utility
-        component=".fields.ASCIILineHandler"
-        name="plone.registry.field.ASCIILine"
-        />
-    <utility
-        component=".fields.TextHandler"
-        name="plone.registry.field.Text"
-        />
-    <utility
-        component=".fields.TextLineHandler"
-        name="plone.registry.field.TextLine"
-        />
-    <utility
-        component=".fields.BoolHandler"
-        name="plone.registry.field.Bool"
-        />
-    <utility
-        component=".fields.IntHandler"
-        name="plone.registry.field.Int"
-        />
-    <utility
-        component=".fields.FloatHandler"
-        name="plone.registry.field.Float"
-        />
-    <utility
-        component=".fields.TupleHandler"
-        name="plone.registry.field.Tuple"
-        />
-    <utility
-        component=".fields.ListHandler"
-        name="plone.registry.field.List"
-        />
-    <utility
-        component=".fields.SetHandler"
-        name="plone.registry.field.Set"
-        />
-    <utility
-        component=".fields.FrozenSetHandler"
-        name="plone.registry.field.FrozenSet"
-        />
-    <utility
-        component=".fields.PasswordHandler"
-        name="plone.registry.field.Password"
-        />
-    <utility
-        component=".fields.DictHandler"
-        name="plone.registry.field.Dict"
-        />
-    <utility
-        component=".fields.DatetimeHandler"
-        name="plone.registry.field.Datetime"
-        />
-    <utility
-        component=".fields.DateHandler"
-        name="plone.registry.field.Date"
-        />
-    <utility
-        component=".fields.SourceTextHandler"
-        name="plone.registry.field.SourceText"
-        />
-    <utility
-        component=".fields.URIHandler"
-        name="plone.registry.field.URI"
-        />
-    <utility
-        component=".fields.IdHandler"
-        name="plone.registry.field.Id"
-        />
-    <utility
-        component=".fields.DottedNameHandler"
-        name="plone.registry.field.DottedName"
-        />
-    <utility
-        component=".fields.ChoiceHandler"
-        name="plone.registry.field.Choice"
-        />
-
+    i18n_domain="plone"
+    xmlns="http://namespaces.zope.org/zope">
+  <include package="plone.supermodel" />
+  <!-- plone.supermodel field handlers -->
+  <utility
+      component=".fields.BytesHandler"
+      name="plone.registry.field.Bytes"
+  />
+  <utility
+      component=".fields.BytesLineHandler"
+      name="plone.registry.field.BytesLine"
+  />
+  <utility
+      component=".fields.ASCIIHandler"
+      name="plone.registry.field.ASCII"
+  />
+  <utility
+      component=".fields.ASCIILineHandler"
+      name="plone.registry.field.ASCIILine"
+  />
+  <utility
+      component=".fields.TextHandler"
+      name="plone.registry.field.Text"
+  />
+  <utility
+      component=".fields.TextLineHandler"
+      name="plone.registry.field.TextLine"
+  />
+  <utility
+      component=".fields.BoolHandler"
+      name="plone.registry.field.Bool"
+  />
+  <utility
+      component=".fields.IntHandler"
+      name="plone.registry.field.Int"
+  />
+  <utility
+      component=".fields.FloatHandler"
+      name="plone.registry.field.Float"
+  />
+  <utility
+      component=".fields.TupleHandler"
+      name="plone.registry.field.Tuple"
+  />
+  <utility
+      component=".fields.ListHandler"
+      name="plone.registry.field.List"
+  />
+  <utility
+      component=".fields.SetHandler"
+      name="plone.registry.field.Set"
+  />
+  <utility
+      component=".fields.FrozenSetHandler"
+      name="plone.registry.field.FrozenSet"
+  />
+  <utility
+      component=".fields.PasswordHandler"
+      name="plone.registry.field.Password"
+  />
+  <utility
+      component=".fields.DictHandler"
+      name="plone.registry.field.Dict"
+  />
+  <utility
+      component=".fields.DatetimeHandler"
+      name="plone.registry.field.Datetime"
+  />
+  <utility
+      component=".fields.DateHandler"
+      name="plone.registry.field.Date"
+  />
+  <utility
+      component=".fields.SourceTextHandler"
+      name="plone.registry.field.SourceText"
+  />
+  <utility
+      component=".fields.URIHandler"
+      name="plone.registry.field.URI"
+  />
+  <utility
+      component=".fields.IdHandler"
+      name="plone.registry.field.Id"
+  />
+  <utility
+      component=".fields.DottedNameHandler"
+      name="plone.registry.field.DottedName"
+  />
+  <utility
+      component=".fields.ChoiceHandler"
+      name="plone.registry.field.Choice"
+  />
 </configure>
diff --git a/plone/app/registry/registry.py b/plone/app/registry/registry.py
index f39ea67..4f3cd59 100644
--- a/plone/app/registry/registry.py
+++ b/plone/app/registry/registry.py
@@ -1,5 +1,5 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-
 from plone.registry import registry
 
 
diff --git a/plone/app/registry/testing.py b/plone/app/registry/testing.py
index 401385b..6c0ec7c 100644
--- a/plone/app/registry/testing.py
+++ b/plone/app/registry/testing.py
@@ -1,8 +1,8 @@
-from plone.app.testing import PloneSandboxLayer
+# -*- coding: utf-8 -*-
 from plone.app.testing import applyProfile
-from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import IntegrationTesting
-
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from zope.configuration import xmlconfig
 
 
@@ -13,7 +13,11 @@ class PloneAppRegistry(PloneSandboxLayer):
     def setUpZope(self, app, configurationContext):
         # Load ZCML
         import plone.app.registry
-        xmlconfig.file('configure.zcml', plone.app.registry, context=configurationContext)
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.registry,
+            context=configurationContext
+        )
 
     def setUpPloneSite(self, portal):
         applyProfile(portal, 'plone.app.registry:default')
@@ -21,5 +25,7 @@ def setUpPloneSite(self, portal):
 
 PLONE_APP_REGISTRY_FIXTURE = PloneAppRegistry()
 
-PLONE_APP_REGISTRY_INTEGRATION_TESTING = \
-    IntegrationTesting(bases=(PLONE_APP_REGISTRY_FIXTURE, ), name="plone.app.registry:Integration")
+PLONE_APP_REGISTRY_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_REGISTRY_FIXTURE, ),
+    name="plone.app.registry:Integration"
+)
diff --git a/plone/app/registry/tests/__init__.py b/plone/app/registry/tests/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/registry/tests/__init__.py
+++ b/plone/app/registry/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/registry/tests/data.py b/plone/app/registry/tests/data.py
index a2c7e14..9c6bb02 100644
--- a/plone/app/registry/tests/data.py
+++ b/plone/app/registry/tests/data.py
@@ -1,5 +1,6 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 
 
 class ITestSettings(Interface):
diff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py
index 4557be9..0799ffe 100644
--- a/plone/app/registry/tests/test_exportimport.py
+++ b/plone/app/registry/tests/test_exportimport.py
@@ -1,30 +1,25 @@
-import unittest2 as unittest
-from plone.testing import zca
-
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from zope.interface import alsoProvides
-from zope.component import provideUtility
-
-from zope.configuration import xmlconfig
-
-from plone.registry.interfaces import IRegistry, IInterfaceAwareRecord
-from plone.registry.interfaces import IFieldRef
-from plone.registry import Record, FieldRef, field
-
+from OFS.ObjectManager import ObjectManager
 from plone.app.registry import Registry
-
-from plone.app.registry.exportimport.handler import importRegistry, exportRegistry
-
+from plone.app.registry.exportimport.handler import exportRegistry
+from plone.app.registry.exportimport.handler import importRegistry
+from plone.app.registry.tests import data
+from plone.registry import field
+from plone.registry import FieldRef
+from plone.registry import Record
+from plone.registry.interfaces import IFieldRef
+from plone.registry.interfaces import IInterfaceAwareRecord
+from plone.registry.interfaces import IRegistry
 from plone.supermodel.utils import prettyXML
-
-from Products.GenericSetup.tests.common import DummyImportContext
+from plone.testing import zca
 from Products.GenericSetup.tests.common import DummyExportContext
-
-from OFS.ObjectManager import ObjectManager
-
-from plone.app.registry.tests import data
+from Products.GenericSetup.tests.common import DummyImportContext
+from StringIO import StringIO
+from zope.component import provideUtility
+from zope.configuration import xmlconfig
+from zope.interface import alsoProvides
+import unittest2 as unittest
 
 configuration = """\
 <configure xmlns="http://namespaces.zope.org/zope">
@@ -108,8 +103,12 @@ def test_import_records(self):
 
         self.assertEquals(3, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.ITestSettings.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.ITestSettings.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettings.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettings.age' in self.registry
+        )
 
     def test_import_records_disallowed(self):
         xml = """\
@@ -149,8 +148,14 @@ def test_import_records_omit(self):
 
         self.assertEquals(3, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.ITestSettingsDisallowed.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.ITestSettingsDisallowed.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettingsDisallowed.name' in
+            self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettingsDisallowed.age' in
+            self.registry
+        )
 
     def test_import_records_remove(self):
         xml = """\
@@ -226,8 +231,12 @@ def test_import_records_remove_with_omit(self):
 
         self.assertEquals(1, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.ITestSettings.name' in self.registry)
-        self.failIf('plone.app.registry.tests.data.ITestSettings.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettings.name' in self.registry
+        )
+        self.failIf(
+            'plone.app.registry.tests.data.ITestSettings.age' in self.registry
+        )
 
     def test_import_records_remove_with_value(self):
         xml = """\
@@ -268,8 +277,12 @@ def test_import_records_with_prefix(self):
 
         self.assertEquals(2, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.age' in self.registry
+        )
 
     def test_import_records_with_values(self):
         xml = """\
@@ -287,11 +300,21 @@ def test_import_records_with_values(self):
 
         self.assertEquals(2, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.age' in self.registry)
-
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.name'], 'Magic')
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.age'], 42)
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.age' in self.registry
+        )
+
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.name'],
+            'Magic'
+        )
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.age'],
+            42
+        )
 
     def test_import_value_only(self):
         xml = """\
@@ -310,8 +333,14 @@ def test_import_value_only(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Simple record", self.registry.records['test.export.simple'].field.title)
-        self.assertEquals(u"Imported value", self.registry['test.export.simple'])
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.export.simple'].field.title
+        )
+        self.assertEquals(
+            u"Imported value",
+            self.registry['test.export.simple']
+        )
 
     def test_import_interface_and_value(self):
         xml = """\
@@ -327,8 +356,14 @@ def test_import_interface_and_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Age", self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.age'].field.title)
-        self.assertEquals(2, self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.age'])
+        self.assertEquals(
+            u"Age",
+            self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.age'].field.title  # noqa
+        )
+        self.assertEquals(
+            2,
+            self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.age']  # noqa
+        )
 
     def test_import_interface_with_differnet_name(self):
         xml = """\
@@ -344,7 +379,10 @@ def test_import_interface_with_differnet_name(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Age", self.registry.records['plone.registry.oops'].field.title)
+        self.assertEquals(
+            u"Age",
+            self.registry.records['plone.registry.oops'].field.title
+        )
         self.assertEquals(2, self.registry['plone.registry.oops'])
 
     def test_import_interface_no_value(self):
@@ -359,8 +397,14 @@ def test_import_interface_no_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Name", self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.name'].field.title)
-        self.assertEquals(u"Mr. Registry", self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.name'])
+        self.assertEquals(
+            u"Name",
+            self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.name'].field.title  # noqa
+        )
+        self.assertEquals(
+            u"Mr. Registry",
+            self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.name']  # noqa
+        )
 
     def test_import_field_only(self):
         xml = """\
@@ -379,10 +423,23 @@ def test_import_field_only(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.TextLine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(u"value", self.registry.records['test.registry.field'].field.__name__)
-        self.assertEquals(u"N/A", self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.TextLine)
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            u"value",
+            self.registry.records['test.registry.field'].field.__name__
+        )
+        self.assertEquals(
+            u"N/A",
+            self.registry['test.registry.field']
+        )
 
     def test_import_field_ref(self):
         xml = """\
@@ -403,10 +460,22 @@ def test_import_field_ref(self):
         importRegistry(context)
 
         self.assertEquals(2, len(self.registry.records))
-        self.failUnless(IFieldRef.providedBy(self.registry.records['test.registry.field.override'].field))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field.override'].field.title)
-        self.assertEquals(u"value", self.registry.records['test.registry.field.override'].field.__name__)
-        self.assertEquals(u"Another value", self.registry['test.registry.field.override'])
+        self.failUnless(
+            IFieldRef.providedBy(
+                self.registry.records['test.registry.field.override'].field)
+            )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field.override'].field.title
+        )
+        self.assertEquals(
+            u"value",
+            self.registry.records['test.registry.field.override'].field.__name__  # noqa
+        )
+        self.assertEquals(
+            u"Another value",
+            self.registry['test.registry.field.override']
+        )
 
     def test_import_field_and_interface(self):
         xml = """\
@@ -425,9 +494,20 @@ def test_import_field_and_interface(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.ASCIILine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals("N/A", self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.ASCIILine
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            "N/A",
+            self.registry['test.registry.field']
+        )
 
     def test_import_overwrite_field_with_field(self):
         xml = """\
@@ -451,9 +531,19 @@ def test_import_overwrite_field_with_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.ASCIILine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals("Nada", self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.ASCIILine)
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            "Nada",
+            self.registry['test.registry.field']
+        )
 
     def test_import_overwrite_field_with_interface(self):
         xml = """\
@@ -472,9 +562,20 @@ def test_import_overwrite_field_with_interface(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Int))
-        self.assertEquals(u"Age", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(None, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Int
+            )
+        )
+        self.assertEquals(
+            u"Age",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            None,
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_field(self):
         xml = """\
@@ -504,9 +605,20 @@ def test_import_collection_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.FrozenSet))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(frozenset([1, 3]), self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.FrozenSet
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            frozenset([1, 3]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_value(self):
         xml = """\
@@ -520,9 +632,13 @@ def test_import_collection_value(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=set([1]))
+        self.registry.records['test.registry.field'] = Record(
+            field.Set(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=set([1])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -530,9 +646,20 @@ def test_import_collection_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Set))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(frozenset([4, 6]), self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Set
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            frozenset([4, 6]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_nopurge(self):
         xml = """\
@@ -546,9 +673,13 @@ def test_import_collection_nopurge(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=set([1]))
+        self.registry.records['test.registry.field'] = Record(
+            field.Set(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=set([1])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -556,9 +687,20 @@ def test_import_collection_nopurge(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Set))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(frozenset([1, 4, 6]), self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Set
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            frozenset([1, 4, 6]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_list_append(self):
         xml = """\
@@ -572,9 +714,13 @@ def test_import_collection_list_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=[2, 4])
+        self.registry.records['test.registry.field'] = Record(
+            field.List(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=[2, 4]
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -596,9 +742,13 @@ def test_import_collection_tuple_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Tuple(title=u"Simple record", value_type=field.TextLine(title=u"Val")),
-                   value=(u"a", u"b", ))
+        self.registry.records['test.registry.field'] = Record(
+            field.Tuple(
+                title=u"Simple record",
+                value_type=field.TextLine(title=u"Val")
+            ),
+            value=(u"a", u"b", )
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -606,7 +756,10 @@ def test_import_collection_tuple_append(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals((u"a", u"b", u"c", ), self.registry['test.registry.field'])
+        self.assertEquals(
+            (u"a", u"b", u"c", ),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_set_append(self):
         xml = """\
@@ -620,9 +773,13 @@ def test_import_collection_set_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=set([2, 4]))
+        self.registry.records['test.registry.field'] = Record(
+            field.Set(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=set([2, 4])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -644,9 +801,13 @@ def test_import_collection_frozenset_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.FrozenSet(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=frozenset([2, 4]))
+        self.registry.records['test.registry.field'] = Record(
+            field.FrozenSet(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=frozenset([2, 4])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -654,7 +815,10 @@ def test_import_collection_frozenset_append(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(frozenset([2, 4, 6]), self.registry['test.registry.field'])
+        self.assertEquals(
+            frozenset([2, 4, 6]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_dict_field(self):
         xml = """\
@@ -677,9 +841,9 @@ def test_import_dict_field(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),
-                   value=u"Old value")
+        self.registry.records['test.registry.field'] = Record(
+            field.TextLine(title=u"Simple record", default=u"N/A"),
+            value=u"Old value")
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -687,9 +851,20 @@ def test_import_dict_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Dict))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals({'a': 1, 'b': 3}, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Dict
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            {'a': 1, 'b': 3},
+            self.registry['test.registry.field']
+        )
 
     def test_import_dict_value(self):
         xml = """\
@@ -715,9 +890,20 @@ def test_import_dict_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Dict))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals({'x': 4, 'y': 6}, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Dict
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            {'x': 4, 'y': 6},
+            self.registry['test.registry.field']
+        )
 
     def test_import_dict_nopurge(self):
         xml = """\
@@ -743,9 +929,20 @@ def test_import_dict_nopurge(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Dict))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals({'a': 1, 'x': 4, 'y': 6}, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Dict
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            {'a': 1, 'x': 4, 'y': 6},
+            self.registry['test.registry.field']
+        )
 
     def test_import_choice_field(self):
         xml = """\
@@ -772,10 +969,23 @@ def test_import_choice_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Choice))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals([u'One', u'Two'], [t.value for t in self.registry.records['test.registry.field'].field.vocabulary])
-        self.assertEquals(None, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Choice
+            )
+        )
+        self.assertEquals(
+            u"Simple record", self.registry.records['test.registry.field'].
+            field.title
+        )
+        self.assertEquals(
+            [u'One', u'Two'],
+            [t.value for t in self.registry.records['test.registry.field'].field.vocabulary]  # noqa
+        )
+        self.assertEquals(
+            None, self.registry['test.registry.field']
+        )
 
     def test_import_with_comments(self):
         xml = """\
@@ -802,16 +1012,39 @@ def test_import_with_comments(self):
 
         self.assertEquals(3, len(self.registry.records))
 
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.TextLine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(u"value", self.registry.records['test.registry.field'].field.__name__)
-        self.assertEquals(u"N/A", self.registry['test.registry.field'])
-
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.age' in self.registry)
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.name'], 'Magic')
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.age'], 42)
-
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.TextLine
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            u"value",
+            self.registry.records['test.registry.field'].field.__name__
+        )
+        self.assertEquals(
+            u"N/A",
+            self.registry['test.registry.field']
+        )
+
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.age' in self.registry
+        )
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.name'],
+            'Magic'
+        )
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.age'],
+            42
+        )
 
     def test_remove(self):
         xml = """\
@@ -860,8 +1093,14 @@ def test_delete_not_found(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Simple record", self.registry.records['test.export.simple'].field.title)
-        self.assertEquals(u"Sample value", self.registry['test.export.simple'])
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.export.simple'].field.title
+        )
+        self.assertEquals(
+            u"Sample value",
+            self.registry['test.export.simple']
+        )
 
 
 class TestExport(ExportImportTest):
@@ -983,9 +1222,13 @@ def test_export_with_collection(self):
     </value>
   </record>
 </registry>"""
-        self.registry.records['test.export.simple'] = \
-            Record(field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=[2])
+        self.registry.records['test.export.simple'] = Record(
+            field.List(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=[2]
+        )
 
         context = DummyExportContext(self.site)
         exportRegistry(context)
@@ -1039,8 +1282,9 @@ def test_export_with_choice(self):
   </record>
 </registry>"""
 
-        self.registry.records['test.export.choice'] = \
-            Record(field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab"))
+        self.registry.records['test.export.choice'] = Record(
+            field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab")
+        )
 
         context = DummyExportContext(self.site)
         exportRegistry(context)
@@ -1061,14 +1305,19 @@ def test_export_with_missing_schema_does_not_error(self):
   </record>
 </registry>"""
 
-        self.registry.records['test.export.simple'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Sample value")
+        self.registry.records['test.export.simple'] = Record(
+            field.TextLine(title=u"Simple record", default=u"N/A"),
+            value=u"Sample value"
+        )
 
         # Note: These are nominally read-only!
-        self.registry.records['test.export.simple'].field.interfaceName = 'non.existant.ISchema'
+        self.registry.records['test.export.simple'].field.interfaceName = 'non.existant.ISchema'  # noqa
         self.registry.records['test.export.simple'].field.fieldName = 'blah'
 
-        alsoProvides(self.registry.records['test.export.simple'], IInterfaceAwareRecord)
+        alsoProvides(
+            self.registry.records['test.export.simple'],
+            IInterfaceAwareRecord
+        )
 
         context = DummyExportContext(self.site)
         exportRegistry(context)
diff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py
index dc5e9db..35212db 100644
--- a/plone/app/registry/tests/test_setup.py
+++ b/plone/app/registry/tests/test_setup.py
@@ -1,11 +1,9 @@
-import unittest2 as unittest
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-
 from plone.app.registry.testing import PLONE_APP_REGISTRY_INTEGRATION_TESTING
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+import unittest2 as unittest
 
 
 class TestSetup(unittest.TestCase):
diff --git a/setup.py b/setup.py
index d388571..780cd2a 100644
--- a/setup.py
+++ b/setup.py
@@ -1,49 +1,52 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '1.3.6.dev0'
 
-setup(name='plone.app.registry',
-      version=version,
-      description="Zope 2 and Plone  integration for plone.registry",
-      long_description=(open("README.rst").read() + "\n" +
-                        open("CHANGES.rst").read()),
-      # Get more strings from
-      # https://pypi.python.org/pypi?%3Aaction=list_classifiers
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-          ],
-      keywords='plone registry settings configuration',
-      author='Martin Aspeli',
-      author_email='optilude@gmail.com',
-      url='http://pypi.python.org/pypi/plone.app.registry',
-      license='GPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'lxml',
-          'setuptools',
-          'plone.registry>=1.0b1',
-          'plone.supermodel>=1.1dev',
-          'plone.app.z3cform',
-          'plone.autoform>=1.0b2',
-          'Products.CMFPlone',
-          'Zope2',
-          'Products.CMFCore',
-          'Products.GenericSetup',
-          'Products.statusmessages',
-          'zope.component',
-          'zope.interface',
-          'zope.i18nmessageid',
-          'zope.dottedname',
-      ],
-      extras_require={'test': ['plone.app.testing', ]},
-      entry_points="""
-      # -*- Entry points: -*-
-      """,
-      )
+setup(
+    name='plone.app.registry',
+    version=version,
+    description="Zope 2 and Plone  integration for plone.registry",
+    long_description=(open("README.rst").read() + "\n" +
+                      open("CHANGES.rst").read()),
+    # Get more strings from
+    # https://pypi.python.org/pypi?%3Aaction=list_classifiers
+    classifiers=[
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+        "Topic :: Software Development :: Libraries :: Python Modules",
+        ],
+    keywords='plone registry settings configuration',
+    author='Martin Aspeli',
+    author_email='optilude@gmail.com',
+    url='http://pypi.python.org/pypi/plone.app.registry',
+    license='GPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'lxml',
+        'plone.app.z3cform',
+        'plone.autoform>=1.0b2',
+        'plone.registry>=1.0b1',
+        'plone.supermodel>=1.1dev',
+        'Products.CMFCore',
+        'Products.CMFPlone',
+        'Products.GenericSetup',
+        'Products.statusmessages',
+        'setuptools',
+        'zope.component',
+        'zope.dottedname',
+        'zope.i18nmessageid',
+        'zope.interface',
+        'Zope2',
+    ],
+    extras_require={'test': ['plone.app.testing', ]},
+    entry_points="""
+    # -*- Entry points: -*-
+    """,
+)


Repository: plone.app.registry


Branch: refs/heads/master
Date: 2015-10-07T12:26:31+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.registry/commit/26dfdc26e4b4a3d5aeb482e7e4b541d60a7ba067

Merge pull request #10 from plone/jensens-cleanup

cleanup: pep8, utf8 headers, readability, etc.

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/registry/browser/__init__.py
M plone/app/registry/browser/edit.py
M plone/app/registry/browser/records.py
M plone/app/registry/exportimport/__init__.py
M plone/app/registry/exportimport/configure.zcml
M plone/app/registry/exportimport/fields.py
M plone/app/registry/exportimport/handler.py
M plone/app/registry/exportimport/handlers.zcml
M plone/app/registry/registry.py
M plone/app/registry/testing.py
M plone/app/registry/tests/__init__.py
M plone/app/registry/tests/data.py
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7c64f9d..7948880 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 1.3.6 (unreleased)
 ------------------
 
+- cleanup: pep8, utf8 headers, readability, etc.
+  [jensens]
+
 - Let our ``plone.app.registry`` import step depend on ``typeinfo``.
   The portal types may be needed for vocabularies.  For example, you
   could get an error when adding a not yet installed type to
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/registry/browser/__init__.py b/plone/app/registry/browser/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/registry/browser/__init__.py
+++ b/plone/app/registry/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/registry/browser/edit.py b/plone/app/registry/browser/edit.py
index 442af39..846fb88 100644
--- a/plone/app/registry/browser/edit.py
+++ b/plone/app/registry/browser/edit.py
@@ -1,13 +1,12 @@
-from zope.interface import implements
-from zope.publisher.interfaces import IPublishTraverse
-
+# -*- coding: utf-8 -*-
+from Acquisition import ImplicitAcquisitionWrapper
 from plone.z3cform import layout
-from z3c.form import form, field, button
-
 from Products.statusmessages.interfaces import IStatusMessage
-from Acquisition import ImplicitAcquisitionWrapper
-
+from z3c.form import form, field, button
 from zope.i18nmessageid import MessageFactory
+from zope.interface import implementer
+from zope.publisher.interfaces import IPublishTraverse
+
 _ = MessageFactory('plone')
 
 
@@ -34,7 +33,10 @@ def updateActions(self):
 
     @property
     def label(self):
-        return _(u"Edit record: ${name}", mapping={'name': self.record.__name__})
+        return _(
+            u"Edit record: ${name}",
+            mapping={'name': self.record.__name__}
+        )
 
     @button.buttonAndHandler(_(u"Save"), name='save')
     def handleSave(self, action):
@@ -43,17 +45,23 @@ def handleSave(self, action):
             self.status = self.formErrorsMessage
             return
         self.record.value = data['value']
-        IStatusMessage(self.request).addStatusMessage(_(u"Changes saved."), "info")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes saved."),
+            "info"
+        )
         self.request.response.redirect(self.context.absolute_url())
 
     @button.buttonAndHandler(_(u"Cancel"), name='cancel')
     def handleCancel(self, action):
-        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled."), "info")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Edit cancelled."),
+            "info"
+        )
         self.request.response.redirect(self.context.absolute_url())
 
 
+@implementer(IPublishTraverse)
 class RecordEditView(layout.FormWrapper):
-    implements(IPublishTraverse)
     form = RecordEditForm
 
     def __init__(self, context, request):
diff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py
index 80b952e..feb8017 100644
--- a/plone/app/registry/browser/records.py
+++ b/plone/app/registry/browser/records.py
@@ -1,5 +1,6 @@
-from Products.Five import BrowserView
+# -*- coding: utf-8 -*-
 from Products.CMFPlone.PloneBatch import Batch
+from Products.Five import BrowserView
 
 
 def _true(s, v):
@@ -53,8 +54,15 @@ def __call__(self):
                         break
             if recordPrefix not in self.prefixes:
                 self.prefixes[recordPrefix] = prefixValue
-            if compare(search, prefixValue) or compare(search, record.__name__):
+            if (
+                compare(search, prefixValue)
+                or compare(search, record.__name__)
+            ):
                 self.records.append(record)
-        self.records = Batch(self.records, 15,
-            int(form.get('b_start', '0')), orphan=1)
+        self.records = Batch(
+            self.records,
+            15,
+            int(form.get('b_start', '0')),
+            orphan=1
+        )
         return self.index()
diff --git a/plone/app/registry/exportimport/__init__.py b/plone/app/registry/exportimport/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/registry/exportimport/__init__.py
+++ b/plone/app/registry/exportimport/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/registry/exportimport/configure.zcml b/plone/app/registry/exportimport/configure.zcml
index 5d7626d..eb38fe1 100644
--- a/plone/app/registry/exportimport/configure.zcml
+++ b/plone/app/registry/exportimport/configure.zcml
@@ -1,28 +1,27 @@
 <configure
+    i18n_domain="plone"
     xmlns="http://namespaces.zope.org/zope"
-    xmlns:gs="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
+    xmlns:gs="http://namespaces.zope.org/genericsetup">
 
-    <include package="plone.supermodel" />
-    <include file="handlers.zcml" />
+  <include package="plone.supermodel" />
+  <include file="handlers.zcml" />
 
-    <!-- export/import steps -->
+  <!-- export/import steps -->
+  <gs:importStep
+      description="Add or remove records, or change values"
+      handler=".handler.importRegistry"
+      name="plone.app.registry"
+      title="Manage the configuration registry">
+    <depends name="componentregistry" />
+    <depends name="toolset" />
+    <depends name="typeinfo"/>
+  </gs:importStep>
 
-    <gs:importStep
-        name="plone.app.registry"
-        title="Manage the configuration registry"
-        description="Add or remove records, or change values"
-        handler=".handler.importRegistry">
-        <depends name="componentregistry"/>
-        <depends name="toolset"/>
-        <depends name="typeinfo"/>
-    </gs:importStep>
-
-    <gs:exportStep
-        name="plone.app.registry"
-        title="Export the configuration registry schemata"
-        description="Exports records and settings"
-        handler=".handler.exportRegistry"
-        />
+  <gs:exportStep
+      description="Exports records and settings"
+      handler=".handler.exportRegistry"
+      name="plone.app.registry"
+      title="Export the configuration registry schemata"
+  />
 
 </configure>
diff --git a/plone/app/registry/exportimport/fields.py b/plone/app/registry/exportimport/fields.py
index b14303e..6e4a27f 100644
--- a/plone/app/registry/exportimport/fields.py
+++ b/plone/app/registry/exportimport/fields.py
@@ -1,5 +1,8 @@
-from plone.supermodel.exportimport import BaseHandler, DictHandler, ChoiceHandler
+# -*- coding: utf-8 -*-
 from plone.registry import field
+from plone.supermodel.exportimport import BaseHandler
+from plone.supermodel.exportimport import ChoiceHandler
+from plone.supermodel.exportimport import DictHandler
 
 
 class PersistentFieldHandler(BaseHandler):
diff --git a/plone/app/registry/exportimport/handler.py b/plone/app/registry/exportimport/handler.py
index 17d0abb..71e32af 100644
--- a/plone/app/registry/exportimport/handler.py
+++ b/plone/app/registry/exportimport/handler.py
@@ -1,24 +1,22 @@
-from zope.component import queryUtility
-from zope.schema import getFieldNames
-
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from zope.dottedname.resolve import resolve
-
-from plone.registry.interfaces import IRegistry
-from plone.registry.interfaces import IPersistentField
-from plone.registry.interfaces import IInterfaceAwareRecord
-from plone.registry.interfaces import IFieldRef
-
-from plone.registry import Record
 from plone.registry import FieldRef
-
+from plone.registry import Record
+from plone.registry.interfaces import IFieldRef
+from plone.registry.interfaces import IInterfaceAwareRecord
+from plone.registry.interfaces import IPersistentField
+from plone.registry.interfaces import IRegistry
+from plone.supermodel.debug import parseinfo
+from plone.supermodel.interfaces import I18N_NAMESPACE
 from plone.supermodel.interfaces import IFieldExportImportHandler
 from plone.supermodel.interfaces import IFieldNameExtractor
-from plone.supermodel.interfaces import I18N_NAMESPACE
-from plone.supermodel.debug import parseinfo
-
-from plone.supermodel.utils import prettyXML, elementToValue, valueToElement, ns
+from plone.supermodel.utils import elementToValue
+from plone.supermodel.utils import ns
+from plone.supermodel.utils import prettyXML
+from plone.supermodel.utils import valueToElement
+from zope.component import queryUtility
+from zope.dottedname.resolve import resolve
+from zope.schema import getFieldNames
 
 _marker = object()
 
@@ -98,9 +96,10 @@ def importDocument(self, document):
     def importRecord(self, node):
         name = node.get('name', '')
         if node.get('delete') is not None:
-            self.logger.warning(u"The 'delete' attribute of <record /> nodes "
-                                u"is deprecated, it should be replaced with "
-                                u"'remove'.")
+            self.logger.warning(
+                u"The 'delete' attribute of <record /> nodes is deprecated, "
+                u"it should be replaced with 'remove'."
+            )
         remove = node.get('remove', node.get('delete', 'false'))
 
         interfaceName = node.get('interface', None)
@@ -125,7 +124,10 @@ def importRecord(self, node):
                 del self.context.records[name]
                 self.logger.info("Removed record %s." % name)
             else:
-                self.logger.warning("Record %s was marked for deletion, but was not found." % name)
+                self.logger.warning(
+                    "Record {0} was marked for deletion, but was not "
+                    "found.".format(name)
+                )
             return
 
         # See if we have an existing record
@@ -152,8 +154,14 @@ def importRecord(self, node):
                 interface = None
                 field = None
             except TypeError:
-                self.logger.warning("Field %s in interface %s specified for \
-                    record %s cannot be used as a persistent field." % (fieldName, interfaceName, name))
+                self.logger.warning(
+                    "Field {0} in interface {1} specified for record {2} "
+                    "cannot be used as a persistent field.".format(
+                        fieldName,
+                        interfaceName,
+                        name
+                    )
+                )
                 interface = None
                 field = None
 
@@ -183,17 +191,27 @@ def importRecord(self, node):
             else:
                 # We have a standard field
                 field_type = field_node.attrib.get('type', None)
-                field_type_handler = queryUtility(IFieldExportImportHandler, name=field_type)
+                field_type_handler = queryUtility(
+                    IFieldExportImportHandler,
+                    name=field_type
+                )
                 if field_type_handler is None:
-                    raise TypeError("Field of type %s used for record %s is not supported." % (field_type, name))
+                    raise TypeError(
+                        "Field of type {0} used for record {1} is not "
+                        "supported.".format(field_type, name)
+                    )
                 else:
                     field = field_type_handler.read(field_node)
                     if not IPersistentField.providedBy(field):
-                        raise TypeError("Only persistent fields may be imported. \
-                            %s used for record %s is invalid." % (field_type, name))
+                        raise TypeError(
+                            "Only persistent fields may be imported. {0} used "
+                            "for record {1} is invalid.".format(
+                                field_type,
+                                name
+                            )
+                        )
 
         if field is not None and not IFieldRef.providedBy(field):
-
             # Set interface name and fieldName, if applicable
             field.interfaceName = interfaceName
             field.fieldName = fieldName
@@ -208,8 +226,12 @@ def importRecord(self, node):
             field = existing_record.field
 
         if field is None:
-            raise ValueError("Cannot find a field for the record %s. Add a \
-                <field /> element or reference an interface and field name." % name)
+            raise ValueError(
+                "Cannot find a field for the record {0}. Add a <field /> "
+                "element or reference an interface and field name.".format(
+                    name
+                )
+            )
 
         # Extract the value
 
@@ -231,29 +253,38 @@ def importRecord(self, node):
 
                 if not value_purge and type(value) == type(existing_value):
                     if isinstance(value, list):
-                        value = existing_value + [v for v in value if v not in existing_value]
+                        value = (
+                            existing_value +
+                            [v for v in value if v not in existing_value]
+                        )
                     elif isinstance(value, tuple):
-                        value = existing_value + tuple([v for v in value if v not in existing_value])
+                        value = (
+                            existing_value +
+                            tuple(
+                                [v for v in value if v not in existing_value]
+                            )
+                        )
                     elif isinstance(value, (set, frozenset, )):
                         value = existing_value.union(value)
                     elif isinstance(value, dict):
                         for key, value in value.items():
                             # check if value is list, if so, let's add
                             # instead of overridding
-                            if type(value) == list:
-                                if key in existing_value and \
-                                        not shouldPurgeList(value_node, key):
-                                    existing = existing_value[key]
-                                    for item in existing:
-                                        # here, we'll remove existing items
-                                        # point is that we don't want duplicates
-                                        # and don't want to reorder
-                                        if item in value:
-                                            value.remove(item)
-                                    existing.extend(value)
-                                    value = existing
+                            if (
+                                type(value) == list
+                                and key in existing_value
+                                and not shouldPurgeList(value_node, key)
+                            ):
+                                existing = existing_value[key]
+                                for item in existing:
+                                    # here, we'll remove existing items
+                                    # point is that we don't want
+                                    # duplicates and don't want to reorder
+                                    if item in value:
+                                        value.remove(item)
+                                existing.extend(value)
+                                value = existing
                             existing_value[key] = value
-
                         value = existing_value
 
                 existing_record.value = value
@@ -267,21 +298,29 @@ def importRecords(self, node):
 
         interfaceName = node.attrib.get('interface', None)
         if interfaceName is None:
-            raise KeyError(u"A <records /> node must have an 'interface' attribute.")
+            raise KeyError(
+                u"A <records /> node must have an 'interface' attribute."
+            )
 
-        prefix = node.attrib.get('prefix', None) # None means use interface.__identifier__
+        prefix = node.attrib.get(
+            'prefix',
+            None  # None means use interface.__identifier__
+        )
 
         if node.attrib.get('delete') is not None:
-            self.logger.warning(u"The 'delete' attribute of <record /> nodes "
-                                u"is deprecated, it should be replaced with "
-                                u"'remove'.")
-        remove = node.attrib.get('remove', node.attrib.get('delete', 'false')).lower() == 'true'
+            self.logger.warning(
+                u"The 'delete' attribute of <record /> nodes is deprecated, "
+                u"it should be replaced with 'remove'."
+            )
+        remove = node.attrib.get('remove', node.attrib.get('delete', 'false'))
+        remove = remove.lower() == 'true'
 
         # May raise ImportError
         interface = resolve(interfaceName)
 
         omit = []
-        values = [] # Fields that should have their value set as they don't exist yet
+        values = []
+        # Fields that should have their value set as they don't exist yet
 
         for child in node:
             if not isinstance(child.tag, str):
@@ -293,8 +332,10 @@ def importRecords(self, node):
                 values.append(child)
 
         if remove and values:
-            raise ValueError("A <records /> node with 'remove=\"true\"' must not contain "
-                             "<value /> nodes.")
+            raise ValueError(
+                "A <records /> node with 'remove=\"true\"' must not contain "
+                "<value /> nodes."
+            )
         elif remove:
             for f in getFieldNames(interface):
                 if f in omit:
@@ -304,7 +345,11 @@ def importRecords(self, node):
                 values.append(child)
 
         # May raise TypeError
-        self.context.registerInterface(interface, omit=tuple(omit), prefix=prefix)
+        self.context.registerInterface(
+            interface,
+            omit=tuple(omit),
+            prefix=prefix
+        )
 
         if not values and not remove:
             # Skip out if there are no value records to handle
@@ -315,7 +360,13 @@ def importRecords(self, node):
             prefix = interface.__identifier__
 
         for value in values:
-            field = etree.Element("record", interface=interface.__identifier__, field=value.attrib["key"], prefix=prefix, remove=repr(remove).lower())
+            field = etree.Element(
+                "record",
+                interface=interface.__identifier__,
+                field=value.attrib["key"],
+                prefix=prefix,
+                remove=repr(remove).lower()
+            )
             field.append(value)
             self.importRecord(field)
 
@@ -361,12 +412,21 @@ def exportRecord(self, record):
                 self.logger.warning("Field type %s specified for record %s \
                     cannot be exported" % (field_type, record.__name__))
             else:
-                field_element = handler.write(record.field, None, field_type, elementName='field')
+                field_element = handler.write(
+                    record.field,
+                    None,
+                    field_type,
+                    elementName='field'
+                )
                 node.append(field_element)
 
         # write value
-
-        value_element = valueToElement(record.field, record.value, name='value', force=True)
+        value_element = valueToElement(
+            record.field,
+            record.value,
+            name='value',
+            force=True
+        )
         node.append(value_element)
 
         return node
diff --git a/plone/app/registry/exportimport/handlers.zcml b/plone/app/registry/exportimport/handlers.zcml
index 7ebd363..a3d9e7a 100644
--- a/plone/app/registry/exportimport/handlers.zcml
+++ b/plone/app/registry/exportimport/handlers.zcml
@@ -1,98 +1,94 @@
 <configure
-    xmlns="http://namespaces.zope.org/zope"
-    i18n_domain="plone">
-
-    <include package="plone.supermodel" />
-
-    <!-- plone.supermodel field handlers -->
-
-    <utility
-        component=".fields.BytesHandler"
-        name="plone.registry.field.Bytes"
-        />
-    <utility
-        component=".fields.BytesLineHandler"
-        name="plone.registry.field.BytesLine"
-        />
-    <utility
-        component=".fields.ASCIIHandler"
-        name="plone.registry.field.ASCII"
-        />
-    <utility
-        component=".fields.ASCIILineHandler"
-        name="plone.registry.field.ASCIILine"
-        />
-    <utility
-        component=".fields.TextHandler"
-        name="plone.registry.field.Text"
-        />
-    <utility
-        component=".fields.TextLineHandler"
-        name="plone.registry.field.TextLine"
-        />
-    <utility
-        component=".fields.BoolHandler"
-        name="plone.registry.field.Bool"
-        />
-    <utility
-        component=".fields.IntHandler"
-        name="plone.registry.field.Int"
-        />
-    <utility
-        component=".fields.FloatHandler"
-        name="plone.registry.field.Float"
-        />
-    <utility
-        component=".fields.TupleHandler"
-        name="plone.registry.field.Tuple"
-        />
-    <utility
-        component=".fields.ListHandler"
-        name="plone.registry.field.List"
-        />
-    <utility
-        component=".fields.SetHandler"
-        name="plone.registry.field.Set"
-        />
-    <utility
-        component=".fields.FrozenSetHandler"
-        name="plone.registry.field.FrozenSet"
-        />
-    <utility
-        component=".fields.PasswordHandler"
-        name="plone.registry.field.Password"
-        />
-    <utility
-        component=".fields.DictHandler"
-        name="plone.registry.field.Dict"
-        />
-    <utility
-        component=".fields.DatetimeHandler"
-        name="plone.registry.field.Datetime"
-        />
-    <utility
-        component=".fields.DateHandler"
-        name="plone.registry.field.Date"
-        />
-    <utility
-        component=".fields.SourceTextHandler"
-        name="plone.registry.field.SourceText"
-        />
-    <utility
-        component=".fields.URIHandler"
-        name="plone.registry.field.URI"
-        />
-    <utility
-        component=".fields.IdHandler"
-        name="plone.registry.field.Id"
-        />
-    <utility
-        component=".fields.DottedNameHandler"
-        name="plone.registry.field.DottedName"
-        />
-    <utility
-        component=".fields.ChoiceHandler"
-        name="plone.registry.field.Choice"
-        />
-
+    i18n_domain="plone"
+    xmlns="http://namespaces.zope.org/zope">
+  <include package="plone.supermodel" />
+  <!-- plone.supermodel field handlers -->
+  <utility
+      component=".fields.BytesHandler"
+      name="plone.registry.field.Bytes"
+  />
+  <utility
+      component=".fields.BytesLineHandler"
+      name="plone.registry.field.BytesLine"
+  />
+  <utility
+      component=".fields.ASCIIHandler"
+      name="plone.registry.field.ASCII"
+  />
+  <utility
+      component=".fields.ASCIILineHandler"
+      name="plone.registry.field.ASCIILine"
+  />
+  <utility
+      component=".fields.TextHandler"
+      name="plone.registry.field.Text"
+  />
+  <utility
+      component=".fields.TextLineHandler"
+      name="plone.registry.field.TextLine"
+  />
+  <utility
+      component=".fields.BoolHandler"
+      name="plone.registry.field.Bool"
+  />
+  <utility
+      component=".fields.IntHandler"
+      name="plone.registry.field.Int"
+  />
+  <utility
+      component=".fields.FloatHandler"
+      name="plone.registry.field.Float"
+  />
+  <utility
+      component=".fields.TupleHandler"
+      name="plone.registry.field.Tuple"
+  />
+  <utility
+      component=".fields.ListHandler"
+      name="plone.registry.field.List"
+  />
+  <utility
+      component=".fields.SetHandler"
+      name="plone.registry.field.Set"
+  />
+  <utility
+      component=".fields.FrozenSetHandler"
+      name="plone.registry.field.FrozenSet"
+  />
+  <utility
+      component=".fields.PasswordHandler"
+      name="plone.registry.field.Password"
+  />
+  <utility
+      component=".fields.DictHandler"
+      name="plone.registry.field.Dict"
+  />
+  <utility
+      component=".fields.DatetimeHandler"
+      name="plone.registry.field.Datetime"
+  />
+  <utility
+      component=".fields.DateHandler"
+      name="plone.registry.field.Date"
+  />
+  <utility
+      component=".fields.SourceTextHandler"
+      name="plone.registry.field.SourceText"
+  />
+  <utility
+      component=".fields.URIHandler"
+      name="plone.registry.field.URI"
+  />
+  <utility
+      component=".fields.IdHandler"
+      name="plone.registry.field.Id"
+  />
+  <utility
+      component=".fields.DottedNameHandler"
+      name="plone.registry.field.DottedName"
+  />
+  <utility
+      component=".fields.ChoiceHandler"
+      name="plone.registry.field.Choice"
+  />
 </configure>
diff --git a/plone/app/registry/registry.py b/plone/app/registry/registry.py
index f39ea67..4f3cd59 100644
--- a/plone/app/registry/registry.py
+++ b/plone/app/registry/registry.py
@@ -1,5 +1,5 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-
 from plone.registry import registry
 
 
diff --git a/plone/app/registry/testing.py b/plone/app/registry/testing.py
index 401385b..6c0ec7c 100644
--- a/plone/app/registry/testing.py
+++ b/plone/app/registry/testing.py
@@ -1,8 +1,8 @@
-from plone.app.testing import PloneSandboxLayer
+# -*- coding: utf-8 -*-
 from plone.app.testing import applyProfile
-from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import IntegrationTesting
-
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from zope.configuration import xmlconfig
 
 
@@ -13,7 +13,11 @@ class PloneAppRegistry(PloneSandboxLayer):
     def setUpZope(self, app, configurationContext):
         # Load ZCML
         import plone.app.registry
-        xmlconfig.file('configure.zcml', plone.app.registry, context=configurationContext)
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.registry,
+            context=configurationContext
+        )
 
     def setUpPloneSite(self, portal):
         applyProfile(portal, 'plone.app.registry:default')
@@ -21,5 +25,7 @@ def setUpPloneSite(self, portal):
 
 PLONE_APP_REGISTRY_FIXTURE = PloneAppRegistry()
 
-PLONE_APP_REGISTRY_INTEGRATION_TESTING = \
-    IntegrationTesting(bases=(PLONE_APP_REGISTRY_FIXTURE, ), name="plone.app.registry:Integration")
+PLONE_APP_REGISTRY_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_REGISTRY_FIXTURE, ),
+    name="plone.app.registry:Integration"
+)
diff --git a/plone/app/registry/tests/__init__.py b/plone/app/registry/tests/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/registry/tests/__init__.py
+++ b/plone/app/registry/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/registry/tests/data.py b/plone/app/registry/tests/data.py
index a2c7e14..9c6bb02 100644
--- a/plone/app/registry/tests/data.py
+++ b/plone/app/registry/tests/data.py
@@ -1,5 +1,6 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 
 
 class ITestSettings(Interface):
diff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py
index 4557be9..0799ffe 100644
--- a/plone/app/registry/tests/test_exportimport.py
+++ b/plone/app/registry/tests/test_exportimport.py
@@ -1,30 +1,25 @@
-import unittest2 as unittest
-from plone.testing import zca
-
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from zope.interface import alsoProvides
-from zope.component import provideUtility
-
-from zope.configuration import xmlconfig
-
-from plone.registry.interfaces import IRegistry, IInterfaceAwareRecord
-from plone.registry.interfaces import IFieldRef
-from plone.registry import Record, FieldRef, field
-
+from OFS.ObjectManager import ObjectManager
 from plone.app.registry import Registry
-
-from plone.app.registry.exportimport.handler import importRegistry, exportRegistry
-
+from plone.app.registry.exportimport.handler import exportRegistry
+from plone.app.registry.exportimport.handler import importRegistry
+from plone.app.registry.tests import data
+from plone.registry import field
+from plone.registry import FieldRef
+from plone.registry import Record
+from plone.registry.interfaces import IFieldRef
+from plone.registry.interfaces import IInterfaceAwareRecord
+from plone.registry.interfaces import IRegistry
 from plone.supermodel.utils import prettyXML
-
-from Products.GenericSetup.tests.common import DummyImportContext
+from plone.testing import zca
 from Products.GenericSetup.tests.common import DummyExportContext
-
-from OFS.ObjectManager import ObjectManager
-
-from plone.app.registry.tests import data
+from Products.GenericSetup.tests.common import DummyImportContext
+from StringIO import StringIO
+from zope.component import provideUtility
+from zope.configuration import xmlconfig
+from zope.interface import alsoProvides
+import unittest2 as unittest
 
 configuration = """\
 <configure xmlns="http://namespaces.zope.org/zope">
@@ -108,8 +103,12 @@ def test_import_records(self):
 
         self.assertEquals(3, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.ITestSettings.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.ITestSettings.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettings.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettings.age' in self.registry
+        )
 
     def test_import_records_disallowed(self):
         xml = """\
@@ -149,8 +148,14 @@ def test_import_records_omit(self):
 
         self.assertEquals(3, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.ITestSettingsDisallowed.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.ITestSettingsDisallowed.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettingsDisallowed.name' in
+            self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettingsDisallowed.age' in
+            self.registry
+        )
 
     def test_import_records_remove(self):
         xml = """\
@@ -226,8 +231,12 @@ def test_import_records_remove_with_omit(self):
 
         self.assertEquals(1, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.ITestSettings.name' in self.registry)
-        self.failIf('plone.app.registry.tests.data.ITestSettings.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.ITestSettings.name' in self.registry
+        )
+        self.failIf(
+            'plone.app.registry.tests.data.ITestSettings.age' in self.registry
+        )
 
     def test_import_records_remove_with_value(self):
         xml = """\
@@ -268,8 +277,12 @@ def test_import_records_with_prefix(self):
 
         self.assertEquals(2, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.age' in self.registry)
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.age' in self.registry
+        )
 
     def test_import_records_with_values(self):
         xml = """\
@@ -287,11 +300,21 @@ def test_import_records_with_values(self):
 
         self.assertEquals(2, len(self.registry.records))
 
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.age' in self.registry)
-
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.name'], 'Magic')
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.age'], 42)
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.age' in self.registry
+        )
+
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.name'],
+            'Magic'
+        )
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.age'],
+            42
+        )
 
     def test_import_value_only(self):
         xml = """\
@@ -310,8 +333,14 @@ def test_import_value_only(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Simple record", self.registry.records['test.export.simple'].field.title)
-        self.assertEquals(u"Imported value", self.registry['test.export.simple'])
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.export.simple'].field.title
+        )
+        self.assertEquals(
+            u"Imported value",
+            self.registry['test.export.simple']
+        )
 
     def test_import_interface_and_value(self):
         xml = """\
@@ -327,8 +356,14 @@ def test_import_interface_and_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Age", self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.age'].field.title)
-        self.assertEquals(2, self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.age'])
+        self.assertEquals(
+            u"Age",
+            self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.age'].field.title  # noqa
+        )
+        self.assertEquals(
+            2,
+            self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.age']  # noqa
+        )
 
     def test_import_interface_with_differnet_name(self):
         xml = """\
@@ -344,7 +379,10 @@ def test_import_interface_with_differnet_name(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Age", self.registry.records['plone.registry.oops'].field.title)
+        self.assertEquals(
+            u"Age",
+            self.registry.records['plone.registry.oops'].field.title
+        )
         self.assertEquals(2, self.registry['plone.registry.oops'])
 
     def test_import_interface_no_value(self):
@@ -359,8 +397,14 @@ def test_import_interface_no_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Name", self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.name'].field.title)
-        self.assertEquals(u"Mr. Registry", self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.name'])
+        self.assertEquals(
+            u"Name",
+            self.registry.records['plone.app.registry.tests.data.ITestSettingsDisallowed.name'].field.title  # noqa
+        )
+        self.assertEquals(
+            u"Mr. Registry",
+            self.registry['plone.app.registry.tests.data.ITestSettingsDisallowed.name']  # noqa
+        )
 
     def test_import_field_only(self):
         xml = """\
@@ -379,10 +423,23 @@ def test_import_field_only(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.TextLine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(u"value", self.registry.records['test.registry.field'].field.__name__)
-        self.assertEquals(u"N/A", self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.TextLine)
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            u"value",
+            self.registry.records['test.registry.field'].field.__name__
+        )
+        self.assertEquals(
+            u"N/A",
+            self.registry['test.registry.field']
+        )
 
     def test_import_field_ref(self):
         xml = """\
@@ -403,10 +460,22 @@ def test_import_field_ref(self):
         importRegistry(context)
 
         self.assertEquals(2, len(self.registry.records))
-        self.failUnless(IFieldRef.providedBy(self.registry.records['test.registry.field.override'].field))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field.override'].field.title)
-        self.assertEquals(u"value", self.registry.records['test.registry.field.override'].field.__name__)
-        self.assertEquals(u"Another value", self.registry['test.registry.field.override'])
+        self.failUnless(
+            IFieldRef.providedBy(
+                self.registry.records['test.registry.field.override'].field)
+            )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field.override'].field.title
+        )
+        self.assertEquals(
+            u"value",
+            self.registry.records['test.registry.field.override'].field.__name__  # noqa
+        )
+        self.assertEquals(
+            u"Another value",
+            self.registry['test.registry.field.override']
+        )
 
     def test_import_field_and_interface(self):
         xml = """\
@@ -425,9 +494,20 @@ def test_import_field_and_interface(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.ASCIILine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals("N/A", self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.ASCIILine
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            "N/A",
+            self.registry['test.registry.field']
+        )
 
     def test_import_overwrite_field_with_field(self):
         xml = """\
@@ -451,9 +531,19 @@ def test_import_overwrite_field_with_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.ASCIILine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals("Nada", self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.ASCIILine)
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            "Nada",
+            self.registry['test.registry.field']
+        )
 
     def test_import_overwrite_field_with_interface(self):
         xml = """\
@@ -472,9 +562,20 @@ def test_import_overwrite_field_with_interface(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Int))
-        self.assertEquals(u"Age", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(None, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Int
+            )
+        )
+        self.assertEquals(
+            u"Age",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            None,
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_field(self):
         xml = """\
@@ -504,9 +605,20 @@ def test_import_collection_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.FrozenSet))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(frozenset([1, 3]), self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.FrozenSet
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            frozenset([1, 3]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_value(self):
         xml = """\
@@ -520,9 +632,13 @@ def test_import_collection_value(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=set([1]))
+        self.registry.records['test.registry.field'] = Record(
+            field.Set(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=set([1])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -530,9 +646,20 @@ def test_import_collection_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Set))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(frozenset([4, 6]), self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Set
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            frozenset([4, 6]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_nopurge(self):
         xml = """\
@@ -546,9 +673,13 @@ def test_import_collection_nopurge(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=set([1]))
+        self.registry.records['test.registry.field'] = Record(
+            field.Set(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=set([1])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -556,9 +687,20 @@ def test_import_collection_nopurge(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Set))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(frozenset([1, 4, 6]), self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Set
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            frozenset([1, 4, 6]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_list_append(self):
         xml = """\
@@ -572,9 +714,13 @@ def test_import_collection_list_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=[2, 4])
+        self.registry.records['test.registry.field'] = Record(
+            field.List(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=[2, 4]
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -596,9 +742,13 @@ def test_import_collection_tuple_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Tuple(title=u"Simple record", value_type=field.TextLine(title=u"Val")),
-                   value=(u"a", u"b", ))
+        self.registry.records['test.registry.field'] = Record(
+            field.Tuple(
+                title=u"Simple record",
+                value_type=field.TextLine(title=u"Val")
+            ),
+            value=(u"a", u"b", )
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -606,7 +756,10 @@ def test_import_collection_tuple_append(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals((u"a", u"b", u"c", ), self.registry['test.registry.field'])
+        self.assertEquals(
+            (u"a", u"b", u"c", ),
+            self.registry['test.registry.field']
+        )
 
     def test_import_collection_set_append(self):
         xml = """\
@@ -620,9 +773,13 @@ def test_import_collection_set_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=set([2, 4]))
+        self.registry.records['test.registry.field'] = Record(
+            field.Set(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=set([2, 4])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -644,9 +801,13 @@ def test_import_collection_frozenset_append(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.FrozenSet(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=frozenset([2, 4]))
+        self.registry.records['test.registry.field'] = Record(
+            field.FrozenSet(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=frozenset([2, 4])
+        )
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -654,7 +815,10 @@ def test_import_collection_frozenset_append(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(frozenset([2, 4, 6]), self.registry['test.registry.field'])
+        self.assertEquals(
+            frozenset([2, 4, 6]),
+            self.registry['test.registry.field']
+        )
 
     def test_import_dict_field(self):
         xml = """\
@@ -677,9 +841,9 @@ def test_import_dict_field(self):
 </registry>
 """
 
-        self.registry.records['test.registry.field'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),
-                   value=u"Old value")
+        self.registry.records['test.registry.field'] = Record(
+            field.TextLine(title=u"Simple record", default=u"N/A"),
+            value=u"Old value")
 
         context = DummyImportContext(self.site, purge=False)
         context._files = {'registry.xml': xml}
@@ -687,9 +851,20 @@ def test_import_dict_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Dict))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals({'a': 1, 'b': 3}, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Dict
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            {'a': 1, 'b': 3},
+            self.registry['test.registry.field']
+        )
 
     def test_import_dict_value(self):
         xml = """\
@@ -715,9 +890,20 @@ def test_import_dict_value(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Dict))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals({'x': 4, 'y': 6}, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Dict
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            {'x': 4, 'y': 6},
+            self.registry['test.registry.field']
+        )
 
     def test_import_dict_nopurge(self):
         xml = """\
@@ -743,9 +929,20 @@ def test_import_dict_nopurge(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Dict))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals({'a': 1, 'x': 4, 'y': 6}, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Dict
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            {'a': 1, 'x': 4, 'y': 6},
+            self.registry['test.registry.field']
+        )
 
     def test_import_choice_field(self):
         xml = """\
@@ -772,10 +969,23 @@ def test_import_choice_field(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.Choice))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals([u'One', u'Two'], [t.value for t in self.registry.records['test.registry.field'].field.vocabulary])
-        self.assertEquals(None, self.registry['test.registry.field'])
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.Choice
+            )
+        )
+        self.assertEquals(
+            u"Simple record", self.registry.records['test.registry.field'].
+            field.title
+        )
+        self.assertEquals(
+            [u'One', u'Two'],
+            [t.value for t in self.registry.records['test.registry.field'].field.vocabulary]  # noqa
+        )
+        self.assertEquals(
+            None, self.registry['test.registry.field']
+        )
 
     def test_import_with_comments(self):
         xml = """\
@@ -802,16 +1012,39 @@ def test_import_with_comments(self):
 
         self.assertEquals(3, len(self.registry.records))
 
-        self.failUnless(isinstance(self.registry.records['test.registry.field'].field, field.TextLine))
-        self.assertEquals(u"Simple record", self.registry.records['test.registry.field'].field.title)
-        self.assertEquals(u"value", self.registry.records['test.registry.field'].field.__name__)
-        self.assertEquals(u"N/A", self.registry['test.registry.field'])
-
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.name' in self.registry)
-        self.failUnless('plone.app.registry.tests.data.SomethingElse.age' in self.registry)
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.name'], 'Magic')
-        self.assertEqual(self.registry['plone.app.registry.tests.data.SomethingElse.age'], 42)
-
+        self.failUnless(
+            isinstance(
+                self.registry.records['test.registry.field'].field,
+                field.TextLine
+            )
+        )
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.registry.field'].field.title
+        )
+        self.assertEquals(
+            u"value",
+            self.registry.records['test.registry.field'].field.__name__
+        )
+        self.assertEquals(
+            u"N/A",
+            self.registry['test.registry.field']
+        )
+
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.name' in self.registry
+        )
+        self.failUnless(
+            'plone.app.registry.tests.data.SomethingElse.age' in self.registry
+        )
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.name'],
+            'Magic'
+        )
+        self.assertEqual(
+            self.registry['plone.app.registry.tests.data.SomethingElse.age'],
+            42
+        )
 
     def test_remove(self):
         xml = """\
@@ -860,8 +1093,14 @@ def test_delete_not_found(self):
         importRegistry(context)
 
         self.assertEquals(1, len(self.registry.records))
-        self.assertEquals(u"Simple record", self.registry.records['test.export.simple'].field.title)
-        self.assertEquals(u"Sample value", self.registry['test.export.simple'])
+        self.assertEquals(
+            u"Simple record",
+            self.registry.records['test.export.simple'].field.title
+        )
+        self.assertEquals(
+            u"Sample value",
+            self.registry['test.export.simple']
+        )
 
 
 class TestExport(ExportImportTest):
@@ -983,9 +1222,13 @@ def test_export_with_collection(self):
     </value>
   </record>
 </registry>"""
-        self.registry.records['test.export.simple'] = \
-            Record(field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),
-                   value=[2])
+        self.registry.records['test.export.simple'] = Record(
+            field.List(
+                title=u"Simple record",
+                value_type=field.Int(title=u"Val")
+            ),
+            value=[2]
+        )
 
         context = DummyExportContext(self.site)
         exportRegistry(context)
@@ -1039,8 +1282,9 @@ def test_export_with_choice(self):
   </record>
 </registry>"""
 
-        self.registry.records['test.export.choice'] = \
-            Record(field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab"))
+        self.registry.records['test.export.choice'] = Record(
+            field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab")
+        )
 
         context = DummyExportContext(self.site)
         exportRegistry(context)
@@ -1061,14 +1305,19 @@ def test_export_with_missing_schema_does_not_error(self):
   </record>
 </registry>"""
 
-        self.registry.records['test.export.simple'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Sample value")
+        self.registry.records['test.export.simple'] = Record(
+            field.TextLine(title=u"Simple record", default=u"N/A"),
+            value=u"Sample value"
+        )
 
         # Note: These are nominally read-only!
-        self.registry.records['test.export.simple'].field.interfaceName = 'non.existant.ISchema'
+        self.registry.records['test.export.simple'].field.interfaceName = 'non.existant.ISchema'  # noqa
         self.registry.records['test.export.simple'].field.fieldName = 'blah'
 
-        alsoProvides(self.registry.records['test.export.simple'], IInterfaceAwareRecord)
+        alsoProvides(
+            self.registry.records['test.export.simple'],
+            IInterfaceAwareRecord
+        )
 
         context = DummyExportContext(self.site)
         exportRegistry(context)
diff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py
index dc5e9db..35212db 100644
--- a/plone/app/registry/tests/test_setup.py
+++ b/plone/app/registry/tests/test_setup.py
@@ -1,11 +1,9 @@
-import unittest2 as unittest
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-
 from plone.app.registry.testing import PLONE_APP_REGISTRY_INTEGRATION_TESTING
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+import unittest2 as unittest
 
 
 class TestSetup(unittest.TestCase):
diff --git a/setup.py b/setup.py
index d388571..780cd2a 100644
--- a/setup.py
+++ b/setup.py
@@ -1,49 +1,52 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '1.3.6.dev0'
 
-setup(name='plone.app.registry',
-      version=version,
-      description="Zope 2 and Plone  integration for plone.registry",
-      long_description=(open("README.rst").read() + "\n" +
-                        open("CHANGES.rst").read()),
-      # Get more strings from
-      # https://pypi.python.org/pypi?%3Aaction=list_classifiers
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-          ],
-      keywords='plone registry settings configuration',
-      author='Martin Aspeli',
-      author_email='optilude@gmail.com',
-      url='http://pypi.python.org/pypi/plone.app.registry',
-      license='GPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'lxml',
-          'setuptools',
-          'plone.registry>=1.0b1',
-          'plone.supermodel>=1.1dev',
-          'plone.app.z3cform',
-          'plone.autoform>=1.0b2',
-          'Products.CMFPlone',
-          'Zope2',
-          'Products.CMFCore',
-          'Products.GenericSetup',
-          'Products.statusmessages',
-          'zope.component',
-          'zope.interface',
-          'zope.i18nmessageid',
-          'zope.dottedname',
-      ],
-      extras_require={'test': ['plone.app.testing', ]},
-      entry_points="""
-      # -*- Entry points: -*-
-      """,
-      )
+setup(
+    name='plone.app.registry',
+    version=version,
+    description="Zope 2 and Plone  integration for plone.registry",
+    long_description=(open("README.rst").read() + "\n" +
+                      open("CHANGES.rst").read()),
+    # Get more strings from
+    # https://pypi.python.org/pypi?%3Aaction=list_classifiers
+    classifiers=[
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+        "Topic :: Software Development :: Libraries :: Python Modules",
+        ],
+    keywords='plone registry settings configuration',
+    author='Martin Aspeli',
+    author_email='optilude@gmail.com',
+    url='http://pypi.python.org/pypi/plone.app.registry',
+    license='GPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'lxml',
+        'plone.app.z3cform',
+        'plone.autoform>=1.0b2',
+        'plone.registry>=1.0b1',
+        'plone.supermodel>=1.1dev',
+        'Products.CMFCore',
+        'Products.CMFPlone',
+        'Products.GenericSetup',
+        'Products.statusmessages',
+        'setuptools',
+        'zope.component',
+        'zope.dottedname',
+        'zope.i18nmessageid',
+        'zope.interface',
+        'Zope2',
+    ],
+    extras_require={'test': ['plone.app.testing', ]},
+    entry_points="""
+    # -*- Entry points: -*-
+    """,
+)


