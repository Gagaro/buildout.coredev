Repository: plone.app.contentrules
Branch: refs/heads/master
Date: 2015-05-31T22:46:32+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/ab508333756ba41207b22722e58845e6e841adcf

start move to z3c.form

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/configure.zcml
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/configure.zcml
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/templates/contentrules-pageform.pt
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c51fa68..4293e74 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,7 @@ Changelog
 4.0.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Move to z3c.form
 
 
 4.0.4 (2015-05-30)
diff --git a/plone/app/contentrules/actions/configure.zcml b/plone/app/contentrules/actions/configure.zcml
index e1f12ee..5ff711a 100644
--- a/plone/app/contentrules/actions/configure.zcml
+++ b/plone/app/contentrules/actions/configure.zcml
@@ -70,14 +70,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Copy"
-       class=".copy.CopyAddForm"
+       class=".copy.CopyAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.copy.ICopyAction"
        name="edit"
-       class=".copy.CopyEditForm"
+       class=".copy.CopyEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index fe5e188..083a0fa 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -1,9 +1,8 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.form.widgets.uberselectionwidget import UberSelectionWidget
-from plone.app.vocabularies.catalog import SearchableTextSourceBinder
+from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
 from zope.event import notify
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope.lifecycleevent import ObjectCopiedEvent
 from zope import schema
@@ -19,6 +18,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class ICopyAction(Interface):
@@ -30,8 +30,7 @@ class ICopyAction(Interface):
     target_folder = schema.Choice(title=_(u"Target folder"),
                                   description=_(u"As a path relative to the portal root."),
                                   required=True,
-                                  source=SearchableTextSourceBinder({'is_folderish': True},
-                                                                    default_query='path:'))
+                                  source=CatalogSource(is_folderish=True))
 
 
 class CopyAction(SimpleItem):
@@ -109,7 +108,7 @@ def error(self, obj, error):
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
             message = _(u"Unable to copy ${name} as part of content rule 'copy' action: ${error}",
-                          mapping={'name': title, 'error': error})
+                        mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
     def generate_id(self, target, old_id):
@@ -128,25 +127,30 @@ def generate_id(self, target, old_id):
 class CopyAddForm(AddForm):
     """An add form for move-to-folder actions.
     """
-    form_fields = form.FormFields(ICopyAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = ICopyAction
     label = _(u"Add Copy Action")
     description = _(u"A copy action can copy an object to a different folder.")
-    form_name = _(u"Configure element")
 
     def create(self, data):
         a = CopyAction()
-        form.applyChanges(a, self.form_fields, data)
+        form.applyChanges(self, a, data)
         return a
 
 
+class CopyAddFormView(ContentRuleFormWrapper):
+    form = CopyAddForm
+
+
 class CopyEditForm(EditForm):
     """An edit form for copy rule actions.
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(ICopyAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = ICopyAction
     label = _(u"Edit Copy Action")
     description = _(u"A copy action can copy an object to a different folder.")
     form_name = _(u"Configure element")
+
+
+class CopyEditFormView(ContentRuleFormWrapper):
+    form = CopyEditForm
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index c6083f0..e66d70f 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -2,7 +2,7 @@
 
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -33,11 +33,12 @@ class ILoggerAction(Interface):
     loggingLevel = schema.Int(title=_(u'Logging level'),
                               default=20)  # INFO
 
-    message = schema.TextLine(title=_(u"Message"),
-                              description=_('help_contentrules_logger_message',
-                                            default=u"&e = the triggering event, &c = the context, &u = the user"),
-                              default=_('text_contentrules_logger_message',
-                                        default=u"Caught &e at &c by &u"))
+    message = schema.TextLine(
+        title=_(u"Message"),
+        description=_('help_contentrules_logger_message',
+                      default=u"&e = the triggering event, &c = the context, &u = the user"),
+        default=_('text_contentrules_logger_message',
+                  default=u"Caught &e at &c by &u"))
 
 
 class LoggerAction(SimpleItem):
@@ -75,7 +76,7 @@ def processedMessage(self):
         processedMessage = self.element.message
         if "&e" in processedMessage:
             processedMessage = processedMessage.replace("&e", "%s.%s" % (
-                    self.event.__class__.__module__, self.event.__class__.__name__))
+                self.event.__class__.__module__, self.event.__class__.__name__))
 
         if "&c" in processedMessage and IObjectEvent.providedBy(self.event):
             processedMessage = processedMessage.replace("&c", repr(self.event.object))
@@ -96,14 +97,14 @@ def __call__(self):
 class LoggerAddForm(AddForm):
     """An add form for logger rule actions.
     """
-    form_fields = form.FormFields(ILoggerAction)
+    schema = ILoggerAction
     label = _(u"Add Logger Action")
     description = _(u"A logger action can output a message to the system log.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         a = LoggerAction()
-        form.applyChanges(a, self.form_fields, data)
+        form.applyChanges(self, a, data)
         return a
 
 
@@ -112,7 +113,7 @@ class LoggerEditForm(EditForm):
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(ILoggerAction)
+    schema = ILoggerAction
     label = _(u"Edit Logger Action")
     description = _(u"A logger action can output a message to the system log.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index 910d885..7fb337d 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -8,7 +8,7 @@
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import Interface, implements
 from zope import schema
 from zope.globalrequest import getRequest
@@ -38,12 +38,13 @@ class IMailAction(Interface):
                                            "email. If no email is provided here, "
                                            "it will use the portal from address."),
                              required=False)
-    recipients = schema.TextLine(title=_(u"Email recipients"),
-                                description=_("The email where you want to "
-                                              "send this message. To send it to "
-                                              "different email addresses, "
-                                              "just separate them with ,"),
-                                required=True)
+    recipients = schema.TextLine(
+        title=_(u"Email recipients"),
+        description=_("The email where you want to "
+                      "send this message. To send it to "
+                      "different email addresses, "
+                      "just separate them with ,"),
+        required=True)
     exclude_actor = schema.Bool(title=_(u"Exclude actor from recipients"),
                                 description=_("Do not send the email to the user "
                                               "that did the action."))
@@ -86,12 +87,10 @@ def __init__(self, context, element, event):
         self.mail_settings = registry.forInterface(IMailSchema,
                                                    prefix='plone')
 
-
     def __call__(self):
         mailhost = getToolByName(aq_inner(self.context), "MailHost")
         if not mailhost:
-            raise ComponentLookupError, "You must have a Mailhost utility to \
-execute this action"
+            raise ComponentLookupError("You must have a Mailhost utility to execute this action")
 
         urltool = getToolByName(aq_inner(self.context), "portal_url")
         portal = urltool.getPortalObject()
@@ -125,7 +124,7 @@ def __call__(self):
 
         recip_string = interpolator(self.element.recipients)
         if recip_string:  # check recipient is not None or empty string
-            recipients = set([str(mail.strip()) for mail in recip_string.split(',') \
+            recipients = set([str(mail.strip()) for mail in recip_string.split(',')
                               if mail.strip()])
         else:
             recipients = set()
@@ -165,7 +164,7 @@ class MailAddForm(AddForm):
     """
     An add form for the mail action
     """
-    form_fields = form.FormFields(IMailAction)
+    schema = IMailAction
     label = _(u"Add Mail Action")
     description = _(u"A mail action can mail different recipient.")
     form_name = _(u"Configure element")
@@ -175,7 +174,7 @@ class MailAddForm(AddForm):
 
     def create(self, data):
         a = MailAction()
-        form.applyChanges(a, self.form_fields, data)
+        form.applyChanges(self, a, data)
         return a
 
 
@@ -183,7 +182,7 @@ class MailEditForm(EditForm):
     """
     An edit form for the mail action
     """
-    form_fields = form.FormFields(IMailAction)
+    schema = IMailAction
     label = _(u"Edit Mail Action")
     description = _(u"A mail action can mail different recipient.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index 892c7cd..3a21cf6 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -1,10 +1,9 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.form.widgets.uberselectionwidget import UberSelectionWidget
-from plone.app.vocabularies.catalog import SearchableTextSourceBinder
+from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
 from zope.container.contained import notifyContainerModified
 from zope.event import notify
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope.lifecycleevent import ObjectMovedEvent
 from zope import schema
@@ -31,8 +30,7 @@ class IMoveAction(Interface):
     target_folder = schema.Choice(title=_(u"Target folder"),
                                   description=_(u"As a path relative to the portal root."),
                                   required=True,
-                                  source=SearchableTextSourceBinder({'is_folderish': True},
-                                                                    default_query='path:'))
+                                  source=CatalogSource(is_folderish=True))
 
 
 class MoveAction(SimpleItem):
@@ -132,7 +130,7 @@ def error(self, obj, error):
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
             message = _(u"Unable to move ${name} as part of content rule 'move' action: ${error}",
-                          mapping={'name': title, 'error': error})
+                        mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
     def generate_id(self, target, old_id):
@@ -151,15 +149,14 @@ def generate_id(self, target, old_id):
 class MoveAddForm(AddForm):
     """An add form for move-to-folder actions.
     """
-    form_fields = form.FormFields(IMoveAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = IMoveAction
     label = _(u"Add Move Action")
     description = _(u"A move action can move an object to a different folder.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         a = MoveAction()
-        form.applyChanges(a, self.form_fields, data)
+        form.applyChanges(self, a, data)
         return a
 
 
@@ -168,8 +165,7 @@ class MoveEditForm(EditForm):
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IMoveAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = IMoveAction
     label = _(u"Edit Move Action")
     description = _(u"A move action can move an object to a different folder.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index 4a3257c..a47be16 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -68,14 +68,14 @@ def __call__(self):
 class NotifyAddForm(AddForm):
     """An add form for notify rule actions.
     """
-    form_fields = form.FormFields(INotifyAction)
+    schema = INotifyAction
     label = _(u"Add Notify Action")
     description = _(u"A notify action can show a message to the user.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         a = NotifyAction()
-        form.applyChanges(a, self.form_fields, data)
+        form.applyChanges(self, a, data)
         return a
 
 
@@ -84,7 +84,7 @@ class NotifyEditForm(EditForm):
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(INotifyAction)
+    schema = INotifyAction
     label = _(u"Edit Notify Action")
     description = _(u"A notify action can show a message to the user.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 991eb4a..f022d62 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.interface import implements, Interface
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -71,29 +71,30 @@ def error(self, obj, error):
         request = getattr(self.context, 'REQUEST', None)
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
-            message = _(u"Unable to change state of ${name} as part of content rule 'workflow' action: ${error}",
-                          mapping={'name': title, 'error': error})
+            message = _(
+                u"Unable to change state of ${name} as part of content rule 'workflow' action: ${error}",  # noqa
+                mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
 
 class WorkflowAddForm(AddForm):
     """An add form for workflow actions.
     """
-    form_fields = form.FormFields(IWorkflowAction)
+    schema = IWorkflowAction
     label = _(u"Add Workflow Action")
     description = _(u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         a = WorkflowAction()
-        form.applyChanges(a, self.form_fields, data)
+        form.applyChanges(self, a, data)
         return a
 
 
 class WorkflowEditForm(EditForm):
     """An edit form for workflow rule actions.
     """
-    form_fields = form.FormFields(IWorkflowAction)
+    schema = IWorkflowAction
     label = _(u"Edit Workflow Action")
     description = _(u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index eee24c1..cde7f5d 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -41,13 +41,14 @@ def add(self, content):
         name = chooser.chooseName(None, content)
         self._chosen_name = name
         storage[name] = content
-        IStatusMessage(self.request).add(_(u"New content rule created. "
-                                           u"Please add conditions and actions at the bottom of the page."),
-                                         type=u'info')
+        IStatusMessage(self.request).add(_(
+            u"New content rule created. "
+            u"Please add conditions and actions at the bottom of the page."),
+            type=u'info')
 
     def renderAddButton(self):
         warn("The renderAddButton method is deprecated, use nameAllowed",
-            DeprecationWarning, 2)
+             DeprecationWarning, 2)
 
     def namesAccepted(self):
         return False
@@ -84,7 +85,7 @@ def nextURL(self):
 
     def renderAddButton(self):
         warn("The renderAddButton method is deprecated, use nameAllowed",
-            DeprecationWarning, 2)
+             DeprecationWarning, 2)
 
     def namesAccepted(self):
         return False
diff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py
index c96d4eb..98f8fef 100644
--- a/plone/app/contentrules/browser/assignments.py
+++ b/plone/app/contentrules/browser/assignments.py
@@ -115,12 +115,13 @@ def acquired_rules(self):
                     if key not in in_use and assignment.bubbles:
                         rule = storage.get(key, None)
                         if rule is not None:
-                            assignments.append(dict(id=key,
-                                                    title=rule.title,
-                                                    description=rule.description,
-                                                    trigger=events.get(rule.event, "Unknown"),
-                                                    url=context.absolute_url() + '/@@manage-content-rules',
-                                                    enabled=(assignment.enabled and rule.enabled), ))
+                            assignments.append(dict(
+                                id=key,
+                                title=rule.title,
+                                description=rule.description,
+                                trigger=events.get(rule.event, "Unknown"),
+                                url=context.absolute_url() + '/@@manage-content-rules',
+                                enabled=(assignment.enabled and rule.enabled), ))
             if ISiteRoot.providedBy(context):
                 context = None
             else:
diff --git a/plone/app/contentrules/browser/configure.zcml b/plone/app/contentrules/browser/configure.zcml
index 7d2875e..e5f90e2 100644
--- a/plone/app/contentrules/browser/configure.zcml
+++ b/plone/app/contentrules/browser/configure.zcml
@@ -58,14 +58,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleAdding"
       name="plone.ContentRule"
-      class=".rule.RuleAddForm"
+      class=".rule.RuleAdd"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.contentrules.rule.interfaces.IRule"
       name="edit"
-      class=".rule.RuleEditForm"
+      class=".rule.RuleEdit"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -148,15 +148,6 @@
         name="action"
         />
 
-
-    <!-- Default page layout for cont rules add/edit forms -->
-    <adapter
-      for=".interfaces.IContentRulesForm"
-      factory=".formhelper.contentrules_named_template_adapter"
-      name="default"
-      provides="zope.formlib.namedtemplate.INamedTemplate"
-      />
-
     <!-- When we access rules and elements, we still want to use a CMF/Plone
     main_template -->
 
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index 0a3aaa3..a248d81 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -66,14 +66,14 @@ def registeredRules(self):
             enabled_class = r.enabled and 'state-enabled' or 'state-disabled'
             assigned = len(get_assignments(r)) > 0
             assigned_class = assigned and 'assignment-assigned' or 'assignment-unassigned'
-            info.append({'id': r.__name__,
-                        'title': r.title,
-                        'description': r.description,
-                        'enabled': r.enabled,
-                        'assigned': assigned,
-                        'trigger': events[r.event],
-                        'row_class': "%s %s %s" % (trigger_class, enabled_class, assigned_class)
-                        })
+            info.append({
+                'id': r.__name__,
+                'title': r.title,
+                'description': r.description,
+                'enabled': r.enabled,
+                'assigned': assigned,
+                'trigger': events[r.event],
+                'row_class': "%s %s %s" % (trigger_class, enabled_class, assigned_class)})
 
         return info
 
@@ -96,8 +96,7 @@ def ruleTypesToShow(self):
 
     def statesToShow(self):
         return ({'id': 'state-enabled', 'title': _(u"label_rule_enabled", default=u"Enabled")},
-                {'id': 'state-disabled', 'title': _(u"label_rule_disabled", default=u"Disabled"), },
-                     )
+                {'id': 'state-disabled', 'title': _(u"label_rule_disabled", default=u"Disabled"), })
 
     def _getRules(self):
         storage = getUtility(IRuleStorage)
diff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py
index b125b0a..9c9738b 100644
--- a/plone/app/contentrules/browser/elements.py
+++ b/plone/app/contentrules/browser/elements.py
@@ -72,8 +72,8 @@ def __call__(self):
         elif 'form.button.ApplyOnWholeSite' in form:
             self.globally_assign()
             IStatusMessage(self.request).add(
-                                _(u"The rule has been enabled on site root "
-                                  u"and all its subfolders"))
+                _(u"The rule has been enabled on site root "
+                  u"and all its subfolders"))
 
         self.view_url = self.base_url + '/@@manage-elements'
         self.rule_title = self.context.title
@@ -126,10 +126,10 @@ def addable_conditions(self):
 
         info = []
         for element in utils.allAvailableConditions(rule.event):
-            info.append({'title': element.title,
-                         'description': element.description,
-                         'addview': element.addview,
-                        })
+            info.append({
+                'title': element.title,
+                'description': element.description,
+                'addview': element.addview})
 
         return info
 
@@ -138,10 +138,10 @@ def addable_actions(self):
 
         info = []
         for element in utils.allAvailableActions(rule.event):
-            info.append({'title': element.title,
-                         'description': element.description,
-                         'addview': element.addview,
-                        })
+            info.append({
+                'title': element.title,
+                'description': element.description,
+                'addview': element.addview})
 
         return info
 
@@ -157,20 +157,20 @@ def assignments(self):
         info = []
         if site_path in paths:
             paths.remove(site_path)
-            info.append({'url': site.absolute_url(),
-                         'title': site.title_or_id(),
-                         'description': site.Description(),
-                         'icon': plone_view.getIcon(site),
-                        })
+            info.append({
+                'url': site.absolute_url(),
+                'title': site.title_or_id(),
+                'description': site.Description(),
+                'icon': plone_view.getIcon(site)})
 
         catalog = getToolByName(rule, "portal_catalog")
         for a in catalog(path=dict(query=list(paths), depth=0),
                          sort_on='sortable_title'):
-            info.append({'url': a.getURL(),
-                         'title': a.Title or a.getId,
-                         'description': a.Description,
-                         'icon': plone_view.getIcon(a),
-                        })
+            info.append({
+                'url': a.getURL(),
+                'title': a.Title or a.getId,
+                'description': a.Description,
+                'icon': plone_view.getIcon(a)})
 
         return info
 
@@ -196,14 +196,14 @@ def _populate_info(self, elements, meta, namespace):
                 editview = '%s/++%s++%d/%s' % (base_url, namespace, idx,
                                                descriptor.editview, )
 
-            info.append({'title': descriptor.title,
-                         'description': descriptor.description,
-                         'summary': data.summary,
-                         'editview': editview,
-                         'first': (idx == 0),
-                         'last': (idx == last),
-                         'idx': idx,
-                        })
+            info.append({
+                'title': descriptor.title,
+                'description': descriptor.description,
+                'summary': data.summary,
+                'editview': editview,
+                'first': (idx == 0),
+                'last': (idx == last),
+                'idx': idx})
         return info
 
     def _move_up(self, elements, idx):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index c15c800..2030854 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -1,26 +1,21 @@
-from five.formlib import formbase
-from plone.app.form import named_template_adapter
-from plone.app.form.validators import null_validator
+from z3c.form import form, button
+from plone.z3cform import layout
 from zope.component import getMultiAdapter
 from zope.event import notify
-from zope.formlib import form
 from zope.interface import implements
 import zope.lifecycleevent
 
 from Acquisition import aq_parent, aq_inner
 from Products.Five.browser import BrowserView
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.interfaces import IContentRulesForm
 
-# Add a named template form, which allows us to carry some extra information
-# about the referer
-_template = ViewPageTemplateFile('templates/contentrules-pageform.pt')
-contentrules_named_template_adapter = named_template_adapter(_template)
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.autoform.form import AutoExtensibleForm
 
 
-class AddForm(formbase.AddFormBase):
+class AddForm(AutoExtensibleForm, form.AddForm):
     """A base add form for content rule.
 
     Use this for rule elements that require configuration before being added to
@@ -41,6 +36,12 @@ def create(self):
     """
 
     implements(IContentRulesForm)
+    ignoreContext = True
+
+    def updateActions(self):
+        super(AddForm, self).updateActions()
+        self.actions['save'].addClass("context")
+        self.actions['cancel'].addClass("standalone")
 
     def nextURL(self):
         rule = aq_parent(aq_inner(self.context))
@@ -49,14 +50,23 @@ def nextURL(self):
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
 
-    @form.action(_(u"label_save", default=u"Save"), name=u'save')
-    def handle_save_action(self, action, data):
-        self.createAndAdd(data)
+    def add(self, content):
+        self.context.add(content)
+
+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='save')
+    def handle_save_action(self, action):
+        data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        content = self.create(data)
+        self.add(content)
+        nextURL = self.nextURL()
+        if nextURL:
+            self.request.response.redirect(self.nextURL())
 
-    @form.action(_(u"label_cancel", default=u"Cancel"),
-                 validator=null_validator,
-                 name=u'cancel')
-    def handle_cancel_action(self, action, data):
+    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name='cancel')
+    def handle_cancel_action(self, action):
         nextURL = self.nextURL()
         if nextURL:
             self.request.response.redirect(self.nextURL())
@@ -91,31 +101,31 @@ def create(self):
         raise NotImplementedError("concrete classes must implement create()")
 
 
-class EditForm(formbase.EditFormBase):
+class EditForm(AutoExtensibleForm, form.EditForm):
     """An edit form for rule elements.
     """
 
     implements(IContentRulesForm)
 
-    @form.action(_(u"label_save", default=u"Save"),
-                 condition=form.haveInputWidgets,
-                 name=u'save')
-    def handle_save_action(self, action, data):
-        if form.applyChanges(self.context, self.form_fields, data, self.adapters):
-            notify(zope.lifecycleevent.ObjectModifiedEvent(self.context))
-            self.status = "Changes saved"
-        else:
-            self.status = "No changes"
-
+    def updateActions(self):
+        super(EditForm, self).updateActions()
+        self.actions['save'].addClass("context")
+        self.actions['cancel'].addClass("standalone")
+
+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='save')
+    def handle_save_action(self, action):
+        data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        self.applyChanges(data)
         nextURL = self.nextURL()
         if nextURL:
             self.request.response.redirect(self.nextURL())
         return ''
 
-    @form.action(_(u"label_cancel", default=u"Cancel"),
-                 validator=null_validator,
-                 name=u'cancel')
-    def handle_cancel_action(self, action, data):
+    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name='cancel')
+    def handle_cancel_action(self, action):
         nextURL = self.nextURL()
         if nextURL:
             self.request.response.redirect(self.nextURL())
@@ -128,3 +138,8 @@ def nextURL(self):
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
+
+
+class ContentRuleFormWrapper(layout.FormWrapper):
+
+    index = ViewPageTemplateFile('templates/contentrules-pageform.pt')
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py
index d1e18a4..d4ab91b 100644
--- a/plone/app/contentrules/browser/navigation.py
+++ b/plone/app/contentrules/browser/navigation.py
@@ -8,7 +8,9 @@ class RuleBreadcrumbs(PhysicalNavigationBreadcrumbs):
 
     def breadcrumbs(self):
         portal_url = getToolByName(self.context, 'portal_url')()
-        return ({'absolute_url': '%s/@@rules-controlpanel' % portal_url,
-                 'Title': PloneMessageFactory('title_manage_contentrules', default=u"Content rules")},
-                {'absolute_url': '%s/@@manage-elements' % self.context.absolute_url(),
-                 'Title': self.context.title or self.context.id})
+        return ({
+            'absolute_url': '%s/@@rules-controlpanel' % portal_url,
+            'Title': PloneMessageFactory('title_manage_contentrules', default=u"Content rules")
+        }, {
+            'absolute_url': '%s/@@manage-elements' % self.context.absolute_url(),
+            'Title': self.context.title or self.context.id})
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index 6903fbb..e47e1c4 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -1,47 +1,53 @@
 from plone.contentrules.rule.interfaces import IRuleConfiguration
 from zope.component import getMultiAdapter
-from zope.formlib import form
 
 from Acquisition import aq_parent, aq_inner
 
-from Products.CMFPlone.utils import base_hasattr
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+
+from z3c.form.form import applyChanges
 
 
 class RuleAddForm(AddForm):
     """An add form for rules.
     """
-    form_fields = form.FormFields(IRuleConfiguration)
+    schema = IRuleConfiguration
+    ignoreContext = True
     label = _(u"Add Rule")
     description = _(u"Add a new rule. Once complete, you can manage the "
-                     "rule's actions and conditions separately.")
-    form_name = _(u"Configure rule")
+                    "rule's actions and conditions separately.")
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-        if base_hasattr(self._parent, '_chosen_name'):
-            return '%s/++rule++%s/@@manage-elements' % (url, self._parent._chosen_name)
-        else:
-            return '%s/@@rules-controlpanel' % url
+        return '%s/@@rules-controlpanel' % url
 
     def create(self, data):
         rule = Rule()
-        form.applyChanges(rule, self.form_fields, data)
+        applyChanges(self, rule, data)
         return rule
 
 
+class RuleAdd(ContentRuleFormWrapper):
+    form = RuleAddForm
+
+
 class RuleEditForm(EditForm):
     """An edit form for rules.
     """
-    form_fields = form.FormFields(IRuleConfiguration)
+    schema = IRuleConfiguration
     label = _(u"Edit Rule")
     description = _(u"Edit an existing rule.")
-    form_name = _(u"Configure rule")
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
         return url + '/@@rules-controlpanel'
+
+
+class RuleEdit(ContentRuleFormWrapper):
+    form = RuleEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/templates/contentrules-pageform.pt b/plone/app/contentrules/browser/templates/contentrules-pageform.pt
index 4ac62fa..1c19c15 100644
--- a/plone/app/contentrules/browser/templates/contentrules-pageform.pt
+++ b/plone/app/contentrules/browser/templates/contentrules-pageform.pt
@@ -9,7 +9,25 @@
 
 <div metal:fill-slot="prefs_configlet_main">
 
-  <div metal:use-macro="context/@@base-pageform.html/form" />
+    <a href=""
+       id="setup-link"
+       tal:attributes="href string:$portal_url/plone_control_panel"
+       i18n:translate="">
+        Site Setup
+    </a>
+
+    <h1 class="documentFirstHeading" tal:content="view/label">View Title</h1>
+
+    <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+      Portal status message
+    </div>
+
+
+    <div id="content-core">
+        <div id="layout-contents">
+            <span tal:replace="structure view/contents" />
+        </div>
+    </div>
 
 </div>
 </body>
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index 036e565..f9e7eae 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -21,8 +21,8 @@ class IFileExtensionCondition(Interface):
     """
 
     file_extension = schema.TextLine(title=_(u"File extension"),
-                                    description=_(u"The file extension to check for"),
-                                    required=True)
+                                     description=_(u"The file extension to check for"),
+                                     required=True)
 
 
 class FileExtensionCondition(SimpleItem):
@@ -73,10 +73,10 @@ def __call__(self):
 class FileExtensionAddForm(AddForm):
     """An add form for file extension rule conditions.
     """
-    form_fields = form.FormFields(IFileExtensionCondition)
+    schema = IFileExtensionCondition
     label = _(u"Add File Extension Condition")
     description = _(u"A file extension condition can restrict a rule from "
-        "executing unless the target is a File with a particular extension.")
+                    "executing unless the target is a File with a particular extension.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -90,8 +90,8 @@ class FileExtensionEditForm(EditForm):
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IFileExtensionCondition)
+    schema = IFileExtensionCondition
     label = _(u"Edit File Extension Condition")
     description = _(u"A file extension condition can restrict a rule from "
-        "executing unless the target is a File with a particular extension.")
+                    "executing unless the target is a File with a particular extension.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index d16fc6d..e76ba6c 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -67,10 +67,10 @@ def __call__(self):
 class GroupAddForm(AddForm):
     """An add form for group rule conditions.
     """
-    form_fields = form.FormFields(IGroupCondition)
+    schema = IGroupCondition
     label = _(u"Add Group Condition")
     description = _(u"A group condition can prevent a rule from executing "
-        "unless the current user is a member of a particular group.")
+                    u"unless the current user is a member of a particular group.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -82,8 +82,8 @@ def create(self, data):
 class GroupEditForm(EditForm):
     """An edit form for group conditions
     """
-    form_fields = form.FormFields(IGroupCondition)
+    schema = IGroupCondition
     label = _(u"Edit Group Condition")
     description = _(u"A group condition can prevent a rule from executing "
-        "unless the current user is a member of a particular group.")
+                    u"unless the current user is a member of a particular group.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index ef8a90b..09e7e8f 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 from zope.site.hooks import getSite
 from zope.i18n import translate
@@ -80,7 +80,7 @@ def __call__(self):
 class PortalTypeAddForm(AddForm):
     """An add form for portal type conditions.
     """
-    form_fields = form.FormFields(IPortalTypeCondition)
+    schema = IPortalTypeCondition
     label = _(u"Add Content Type Condition")
     description = _(u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
@@ -94,7 +94,7 @@ def create(self, data):
 class PortalTypeEditForm(EditForm):
     """An edit form for portal type conditions
     """
-    form_fields = form.FormFields(IPortalTypeCondition)
+    schema = IPortalTypeCondition
     label = _(u"Edit Content Type Condition")
     description = _(u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index 5c4ab06..d67bdf3 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from Acquisition import aq_inner
@@ -67,10 +67,10 @@ def __call__(self):
 class RoleAddForm(AddForm):
     """An add form for role rule conditions.
     """
-    form_fields = form.FormFields(IRoleCondition)
+    schema = IRoleCondition
     label = _(u"Add Role Condition")
     description = _(u"A role condition can prevent rules from executing unless "
-        "the current user has a particular role.")
+                    u"the current user has a particular role.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -82,8 +82,8 @@ def create(self, data):
 class RoleEditForm(EditForm):
     """An edit form for role conditions
     """
-    form_fields = form.FormFields(IRoleCondition)
+    schema = IRoleCondition
     label = _(u"Add Role Condition")
     description = _(u"A role condition can prevent rules from executing unless "
-        "the current user has a particular role.")
+                    u"the current user has a particular role.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index a947ffc..cabb825 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -19,10 +19,10 @@ class ITalesExpressionCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    tales_expression = schema.TextLine(title=_(u"TALES expression"),
-                              description=_(u"The TALES expression to check."),
-                              required=True,
-                              )
+    tales_expression = schema.TextLine(
+        title=_(u"TALES expression"),
+        description=_(u"The TALES expression to check."),
+        required=True)
 
 
 class TalesExpressionCondition(SimpleItem):
@@ -66,10 +66,10 @@ def __call__(self):
 class TalesExpressionAddForm(AddForm):
     """An add form for tales expression condition.
     """
-    form_fields = form.FormFields(ITalesExpressionCondition)
+    schema = ITalesExpressionCondition
     label = _(u"Add TALES Expression Condition")
     description = _(u"A TALES expression condition makes the rule apply "
-                     "only if TALES expression is not False in context.")
+                    u"only if TALES expression is not False in context.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -81,8 +81,8 @@ def create(self, data):
 class TalesExpressionEditForm(EditForm):
     """An edit form for TALES expression condition
     """
-    form_fields = form.FormFields(ITalesExpressionCondition)
+    schema = ITalesExpressionCondition
     label = _(u"Edit TALES Expression Condition")
     description = _(u"A TALES expression condition makes the rule apply "
-                     "only if TALES expression is not False in context.")
+                    u"only if TALES expression is not False in context.")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index 9487356..7096f9b 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -17,10 +17,11 @@ class IWorkflowStateCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    wf_states = schema.Set(title=_(u"Workflow state"),
-                           description=_(u"The workflow states to check for."),
-                           required=True,
-                           value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
+    wf_states = schema.Set(
+        title=_(u"Workflow state"),
+        description=_(u"The workflow states to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
 
 
 class WorkflowStateCondition(SimpleItem):
@@ -60,10 +61,10 @@ def __call__(self):
 class WorkflowStateAddForm(AddForm):
     """An add form for workflow state conditions.
     """
-    form_fields = form.FormFields(IWorkflowStateCondition)
+    schema = IWorkflowStateCondition
     label = _(u"Add Workflow State Condition")
     description = _(u"A workflow state condition can restrict rules to "
-        "objects in particular workflow states")
+                    u"objects in particular workflow states")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -77,8 +78,8 @@ class WorkflowStateEditForm(EditForm):
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IWorkflowStateCondition)
+    schema = IWorkflowStateCondition
     label = _(u"Edit Workflow State Condition")
     description = _(u"A workflow state condition can restrict rules to "
-        "objects in particular workflow states")
+                    u"objects in particular workflow states")
     form_name = _(u"Configure element")
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index e3f377c..31b861c 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -17,10 +17,11 @@ class IWorkflowTransitionCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    wf_transitions = schema.Set(title=_(u"Workflow transition"),
-                           description=_(u"The workflow transitions to check for."),
-                           required=True,
-                           value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
+    wf_transitions = schema.Set(
+        title=_(u"Workflow transition"),
+        description=_(u"The workflow transitions to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
 
 
 class WorkflowTransitionCondition(SimpleItem):
@@ -33,7 +34,8 @@ class WorkflowTransitionCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"Workflow transitions are: ${transitions}", mapping=dict(transitions=", ".join(self.wf_transitions)))
+        return _(u"Workflow transitions are: ${transitions}",
+                 mapping=dict(transitions=", ".join(self.wf_transitions)))
 
 
 class WorkflowTransitionConditionExecutor(object):
@@ -54,10 +56,10 @@ def __call__(self):
 class WorkflowTransitionAddForm(AddForm):
     """An add form for workflow transition conditions.
     """
-    form_fields = form.FormFields(IWorkflowTransitionCondition)
+    schema = IWorkflowTransitionCondition
     label = _(u"Add Workflow Transition Condition")
     description = _(u"A workflow transition condition can restrict rules to "
-        "execute only after a certain transition.")
+                    u"execute only after a certain transition.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -71,8 +73,8 @@ class WorkflowTransitionEditForm(EditForm):
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IWorkflowTransitionCondition)
+    schema = IWorkflowTransitionCondition
     label = _(u"Edit Workflow Transition Condition")
     description = _(u"A workflow transition condition can restrict rules to "
-        "execute only after a certain transition.")
+                    u"execute only after a certain transition.")
     form_name = _(u"Configure element")
diff --git a/setup.py b/setup.py
index 3080587..59bb013 100644
--- a/setup.py
+++ b/setup.py
@@ -5,8 +5,7 @@
 setup(name='plone.app.contentrules',
       version=version,
       description="Plone integration for plone.contentrules",
-      long_description=open("README.rst").read() + "\n\n" +
-                       open("CHANGES.rst").read(),
+      long_description=open("README.rst").read() + "\n\n" + open("CHANGES.rst").read(),
       classifiers=[
           "Environment :: Web Environment",
           "Framework :: Plone",
@@ -16,46 +15,45 @@
           "Operating System :: OS Independent",
           "Programming Language :: Python",
           "Programming Language :: Python :: 2.7",
-        ],
+      ],
       keywords='',
       author='Plone Foundation',
       author_email='plone-developers@lists.sourceforge.net',
       url='http://pypi.python.org/pypi/plone.app.contentrules',
       license='GPL version 2',
       packages=find_packages(exclude=['ez_setup']),
-      namespace_packages = ['plone', 'plone.app'],
+      namespace_packages=['plone', 'plone.app'],
       include_package_data=True,
       zip_safe=False,
       extras_require={'test': 'plone.app.testing'},
       install_requires=[
-        'setuptools',
-        'five.formlib',
-        'plone.contentrules',
-        'plone.memoize',
-        'plone.stringinterp',
-        'plone.uuid',
-        'plone.app.form',
-        'plone.app.vocabularies',
-        'transaction',
-        'zope.annotation',
-        'zope.browser',
-        'zope.component',
-        'zope.container',
-        'zope.event',
-        'zope.formlib',
-        'zope.i18nmessageid',
-        'zope.interface',
-        'zope.lifecycleevent',
-        'zope.publisher >= 3.11.0',
-        'zope.schema',
-        'zope.site',
-        'zope.traversing',
-        'Acquisition',
-        'Products.CMFPlone',
-        'Products.CMFCore',
-        'Products.GenericSetup',
-        'Products.statusmessages',
-        'ZODB3',
-        'Zope2 >= 2.12.3',
+          'setuptools',
+          'plone.contentrules',
+          'plone.memoize',
+          'plone.stringinterp',
+          'plone.uuid',
+          'plone.autoform',
+          'plone.app.z3cform',
+          'plone.app.vocabularies',
+          'transaction',
+          'zope.annotation',
+          'zope.browser',
+          'zope.component',
+          'zope.container',
+          'zope.event',
+          'zope.i18nmessageid',
+          'zope.interface',
+          'zope.lifecycleevent',
+          'zope.publisher >= 3.11.0',
+          'zope.schema',
+          'zope.site',
+          'zope.traversing',
+          'Acquisition',
+          'Products.CMFPlone',
+          'Products.CMFCore',
+          'Products.GenericSetup',
+          'Products.statusmessages',
+          'ZODB3',
+          'Zope2 >= 2.12.3',
       ],
       )


Repository: plone.app.contentrules
Branch: refs/heads/master
Date: 2015-05-31T22:46:32+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/2d831988ff335c042111604fb71b2997d6aeacc2

test fixes

Files changed:
M plone/app/contentrules/actions/configure.zcml
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/conditions/configure.zcml
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_rule_management_views.py

diff --git a/plone/app/contentrules/actions/configure.zcml b/plone/app/contentrules/actions/configure.zcml
index 5ff711a..4ce1ab2 100644
--- a/plone/app/contentrules/actions/configure.zcml
+++ b/plone/app/contentrules/actions/configure.zcml
@@ -10,14 +10,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
       name="plone.actions.Logger"
-      class=".logger.LoggerAddForm"
+      class=".logger.LoggerAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.actions.logger.ILoggerAction"
       name="edit"
-      class=".logger.LoggerEditForm"
+      class=".logger.LoggerEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -40,14 +40,14 @@
     <browser:page
         for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
         name="plone.actions.Notify"
-        class=".notify.NotifyAddForm"
+        class=".notify.NotifyAddFormView"
         permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
         for="plone.app.contentrules.actions.notify.INotifyAction"
         name="edit"
-        class=".notify.NotifyEditForm"
+        class=".notify.NotifyEditFormView"
         permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -100,14 +100,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Move"
-       class=".move.MoveAddForm"
+       class=".move.MoveAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.move.IMoveAction"
        name="edit"
-       class=".move.MoveEditForm"
+       class=".move.MoveEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
@@ -152,14 +152,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Workflow"
-       class=".workflow.WorkflowAddForm"
+       class=".workflow.WorkflowAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.workflow.IWorkflowAction"
        name="edit"
-       class=".workflow.WorkflowEditForm"
+       class=".workflow.WorkflowEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
@@ -182,14 +182,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Mail"
-       class=".mail.MailAddForm"
+       class=".mail.MailAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.mail.IMailAction"
        name="edit"
-       class=".mail.MailEditForm"
+       class=".mail.MailEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index 14b16bc..febeffe 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -58,7 +58,7 @@ def error(self, obj, error):
         request = getattr(self.context, 'REQUEST', None)
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
-            message = _(u"Unable to remove ${name} as part of content rule 'delete' action: ${error}",
+            message = _(u"Unable to remove ${name} as part of content rule 'delete' action: ${error}",  # noqa
                           mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index e66d70f..272acd3 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -13,6 +13,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules.logger")
 handler = logging.StreamHandler()
@@ -108,6 +109,10 @@ def create(self, data):
         return a
 
 
+class LoggerAddFormView(ContentRuleFormWrapper):
+    form = LoggerAddForm
+
+
 class LoggerEditForm(EditForm):
     """An edit form for logger rule actions.
 
@@ -117,3 +122,7 @@ class LoggerEditForm(EditForm):
     label = _(u"Edit Logger Action")
     description = _(u"A logger action can output a message to the system log.")
     form_name = _(u"Configure element")
+
+
+class LoggerEditFormView(ContentRuleFormWrapper):
+    form = LoggerAddForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index 7fb337d..e16f73d 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -23,6 +23,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules")
 
@@ -178,6 +179,10 @@ def create(self, data):
         return a
 
 
+class MailAddFormView(ContentRuleFormWrapper):
+    form = MailAddForm
+
+
 class MailEditForm(EditForm):
     """
     An edit form for the mail action
@@ -189,3 +194,7 @@ class MailEditForm(EditForm):
 
     # custom template will allow us to add help text
     template = ViewPageTemplateFile('templates/mail.pt')
+
+
+class MailEditFormView(ContentRuleFormWrapper):
+    form = MailEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index 3a21cf6..5a92c7d 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -19,6 +19,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IMoveAction(Interface):
@@ -160,6 +161,10 @@ def create(self, data):
         return a
 
 
+class MoveAddFormView(ContentRuleFormWrapper):
+    form = MoveAddForm
+
+
 class MoveEditForm(EditForm):
     """An edit form for move rule actions.
 
@@ -169,3 +174,7 @@ class MoveEditForm(EditForm):
     label = _(u"Edit Move Action")
     description = _(u"A move action can move an object to a different folder.")
     form_name = _(u"Configure element")
+
+
+class MoveEditFormView(ContentRuleFormWrapper):
+    form = MoveEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index a47be16..9f04746 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -10,6 +10,7 @@
 from plone.app.contentrules import PloneMessageFactory
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class INotifyAction(Interface):
@@ -79,6 +80,10 @@ def create(self, data):
         return a
 
 
+class NotifyAddFormView(ContentRuleFormWrapper):
+    form = NotifyAddForm
+
+
 class NotifyEditForm(EditForm):
     """An edit form for notify rule actions.
 
@@ -88,3 +93,7 @@ class NotifyEditForm(EditForm):
     label = _(u"Edit Notify Action")
     description = _(u"A notify action can show a message to the user.")
     form_name = _(u"Configure element")
+
+
+class NotifyEditFormView(ContentRuleFormWrapper):
+    form = NotifyAddForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index f022d62..48d1c5a 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -12,6 +12,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IWorkflowAction(Interface):
@@ -91,6 +92,10 @@ def create(self, data):
         return a
 
 
+class WorkflowAddFormView(ContentRuleFormWrapper):
+    form = WorkflowAddForm
+
+
 class WorkflowEditForm(EditForm):
     """An edit form for workflow rule actions.
     """
@@ -98,3 +103,7 @@ class WorkflowEditForm(EditForm):
     label = _(u"Edit Workflow Action")
     description = _(u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
+
+
+class WorkflowEditFormView(ContentRuleFormWrapper):
+    form = WorkflowAddForm
diff --git a/plone/app/contentrules/conditions/configure.zcml b/plone/app/contentrules/conditions/configure.zcml
index 20302ce..1be89fc 100644
--- a/plone/app/contentrules/conditions/configure.zcml
+++ b/plone/app/contentrules/conditions/configure.zcml
@@ -16,14 +16,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.PortalType"
-      class=".portaltype.PortalTypeAddForm"
+      class=".portaltype.PortalTypeAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.portaltype.IPortalTypeCondition"
       name="edit"
-      class=".portaltype.PortalTypeEditForm"
+      class=".portaltype.PortalTypeEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -46,14 +46,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.FileExtension"
-      class=".fileextension.FileExtensionAddForm"
+      class=".fileextension.FileExtensionAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.fileextension.IFileExtensionCondition"
       name="edit"
-      class=".fileextension.FileExtensionEditForm"
+      class=".fileextension.FileExtensionEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -76,14 +76,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.WorkflowState"
-      class=".wfstate.WorkflowStateAddForm"
+      class=".wfstate.WorkflowStateAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.wfstate.IWorkflowStateCondition"
       name="edit"
-      class=".wfstate.WorkflowStateEditForm"
+      class=".wfstate.WorkflowStateEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -106,14 +106,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.WorkflowTransition"
-      class=".wftransition.WorkflowTransitionAddForm"
+      class=".wftransition.WorkflowTransitionAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.wftransition.IWorkflowTransitionCondition"
       name="edit"
-      class=".wftransition.WorkflowTransitionEditForm"
+      class=".wftransition.WorkflowTransitionEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -135,14 +135,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.Group"
-      class=".group.GroupAddForm"
+      class=".group.GroupAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.group.IGroupCondition"
       name="edit"
-      class=".group.GroupEditForm"
+      class=".group.GroupEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -164,14 +164,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.Role"
-      class=".role.RoleAddForm"
+      class=".role.RoleAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.role.IRoleCondition"
       name="edit"
-      class=".role.RoleEditForm"
+      class=".role.RoleEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -194,14 +194,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.TalesExpression"
-      class=".talesexpression.TalesExpressionAddForm"
+      class=".talesexpression.TalesExpressionAddFormView"
       permission="cmf.ManagePortal"
       />
 
     <browser:page
       for=".talesexpression.ITalesExpressionCondition"
       name="edit"
-      class=".talesexpression.TalesExpressionEditForm"
+      class=".talesexpression.TalesExpressionEditFormView"
       permission="cmf.ManagePortal"
       />
 
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index f9e7eae..29e4856 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -12,6 +12,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IFileExtensionCondition(Interface):
@@ -81,10 +82,14 @@ class FileExtensionAddForm(AddForm):
 
     def create(self, data):
         c = FileExtensionCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class FileExtensionAddFormView(ContentRuleFormWrapper):
+    form = FileExtensionAddForm
+
+
 class FileExtensionEditForm(EditForm):
     """An edit form for portal type conditions
 
@@ -95,3 +100,7 @@ class FileExtensionEditForm(EditForm):
     description = _(u"A file extension condition can restrict a rule from "
                     "executing unless the target is a File with a particular extension.")
     form_name = _(u"Configure element")
+
+
+class FileExtensionEditFormView(ContentRuleFormWrapper):
+    form = FileExtensionEditForm
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index e76ba6c..310a56c 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IGroupCondition(Interface):
@@ -75,9 +76,12 @@ class GroupAddForm(AddForm):
 
     def create(self, data):
         c = GroupCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
+class GroupAddFormView(ContentRuleFormWrapper):
+    form = GroupAddForm
+
 
 class GroupEditForm(EditForm):
     """An edit form for group conditions
@@ -87,3 +91,7 @@ class GroupEditForm(EditForm):
     description = _(u"A group condition can prevent a rule from executing "
                     u"unless the current user is a member of a particular group.")
     form_name = _(u"Configure element")
+
+
+class GroupEditFormView(ContentRuleFormWrapper):
+    form = GroupAddForm
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index 09e7e8f..48e388a 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -13,6 +13,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IPortalTypeCondition(Interface):
@@ -21,10 +22,11 @@ class IPortalTypeCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    check_types = schema.Set(title=_(u"Content type"),
-                              description=_(u"The content type to check for."),
-                              required=True,
-                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
+    check_types = schema.Set(
+        title=_(u"Content type"),
+        description=_(u"The content type to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
 
 
 class PortalTypeCondition(SimpleItem):
@@ -87,10 +89,14 @@ class PortalTypeAddForm(AddForm):
 
     def create(self, data):
         c = PortalTypeCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class PortalTypeAddFormView(ContentRuleFormWrapper):
+    form = PortalTypeAddForm
+
+
 class PortalTypeEditForm(EditForm):
     """An edit form for portal type conditions
     """
@@ -98,3 +104,7 @@ class PortalTypeEditForm(EditForm):
     label = _(u"Edit Content Type Condition")
     description = _(u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
+
+
+class PortalTypeEditFormView(ContentRuleFormWrapper):
+    form = PortalTypeEditForm
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index d67bdf3..8fbaca4 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -10,6 +10,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IRoleCondition(Interface):
@@ -75,10 +76,14 @@ class RoleAddForm(AddForm):
 
     def create(self, data):
         c = RoleCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class RoleAddFormView(ContentRuleFormWrapper):
+    form = RoleAddForm
+
+
 class RoleEditForm(EditForm):
     """An edit form for role conditions
     """
@@ -87,3 +92,7 @@ class RoleEditForm(EditForm):
     description = _(u"A role condition can prevent rules from executing unless "
                     u"the current user has a particular role.")
     form_name = _(u"Configure element")
+
+
+class RoleEditFormView(ContentRuleFormWrapper):
+    form = RoleEditForm
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index cabb825..e46ac04 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 from Products.CMFCore.Expression import Expression, createExprContext
 
@@ -74,10 +75,14 @@ class TalesExpressionAddForm(AddForm):
 
     def create(self, data):
         c = TalesExpressionCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class TalesExpressionAddFormView(ContentRuleFormWrapper):
+    form = TalesExpressionAddForm
+
+
 class TalesExpressionEditForm(EditForm):
     """An edit form for TALES expression condition
     """
@@ -86,3 +91,7 @@ class TalesExpressionEditForm(EditForm):
     description = _(u"A TALES expression condition makes the rule apply "
                     u"only if TALES expression is not False in context.")
     form_name = _(u"Configure element")
+
+
+class TalesExpressionEditFormView(ContentRuleFormWrapper):
+    form = TalesExpressionEditForm
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index 7096f9b..1538d8a 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
 from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IWorkflowStateCondition(Interface):
@@ -69,10 +70,14 @@ class WorkflowStateAddForm(AddForm):
 
     def create(self, data):
         c = WorkflowStateCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class WorkflowStateAddFormView(ContentRuleFormWrapper):
+    form = WorkflowStateAddForm
+
+
 class WorkflowStateEditForm(EditForm):
     """An edit form for portal type conditions
 
@@ -83,3 +88,7 @@ class WorkflowStateEditForm(EditForm):
     description = _(u"A workflow state condition can restrict rules to "
                     u"objects in particular workflow states")
     form_name = _(u"Configure element")
+
+
+class WorkflowStateEditFormView(ContentRuleFormWrapper):
+    form = WorkflowStateEditForm
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index 31b861c..a0b95d7 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IWorkflowTransitionCondition(Interface):
@@ -64,10 +65,14 @@ class WorkflowTransitionAddForm(AddForm):
 
     def create(self, data):
         c = WorkflowTransitionCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class WorkflowTransitionAddFormView(ContentRuleFormWrapper):
+    form = WorkflowTransitionAddForm
+
+
 class WorkflowTransitionEditForm(EditForm):
     """An edit form for portal type conditions
 
@@ -78,3 +83,7 @@ class WorkflowTransitionEditForm(EditForm):
     description = _(u"A workflow transition condition can restrict rules to "
                     u"execute only after a certain transition.")
     form_name = _(u"Configure element")
+
+
+class WorkflowTransitionEditFormView(ContentRuleFormWrapper):
+    form = WorkflowTransitionEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index d802e97..c08c205 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -47,7 +47,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'target_folder': '/target', })
+        action = addview.form_instance.create(data={'target_folder': '/target', })
+        addview.form_instance.add(action)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, CopyAction))
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 4fd4631..169d186 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -48,7 +48,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
+        content = addview.form_instance.create(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, LoggerAction))
@@ -72,11 +73,12 @@ def testProcessedMessage(self):
 
         e.message = "Test log event : &c"
         self.assertEqual("Test log event : <ATFolder at /plone/Members/%s>" % TEST_USER_ID,
-                          ex.processedMessage())
+                         ex.processedMessage())
 
         e.message = "Test log event : &e"
-        self.assertEqual("Test log event : plone.app.contentrules.tests.test_action_logger.DummyObjectEvent",
-                          ex.processedMessage())
+        self.assertEqual(
+            "Test log event : plone.app.contentrules.tests.test_action_logger.DummyObjectEvent",
+            ex.processedMessage())
 
         e.message = "Test log event : &u"
         self.assertEqual("Test log event : %s" % TEST_USER_NAME, ex.processedMessage())
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index f18487b..aec790d 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -47,10 +47,10 @@ def afterSetUp(self):
                                   title='W\xc3\xa4lkommen'.decode('utf-8'))
 
         users = (
-        ('userone', 'User One', 'user@one.com', ('Manager', 'Member')),
-        ('usertwo', 'User Two', 'user@two.com', ('Reviewer', 'Member')),
-        ('userthree', 'User Three', 'user@three.com', ('Owner', 'Member')),
-        ('userfour', 'User Four', 'user@four.com', ('Member', )),
+            ('userone', 'User One', 'user@one.com', ('Manager', 'Member')),
+            ('usertwo', 'User Two', 'user@two.com', ('Reviewer', 'Member')),
+            ('userthree', 'User Three', 'user@three.com', ('Owner', 'Member')),
+            ('userfour', 'User Four', 'user@four.com', ('Member', )),
         )
         for id, fname, email, roles in users:
             self.portal.portal_membership.addMember(id, 'secret', roles, [])
@@ -74,10 +74,11 @@ def testInvokeAddView(self):
                                   name=element.addview)
         self.assertTrue(isinstance(addview, MailAddForm))
 
-        addview.createAndAdd(data={'subject': 'My Subject',
-                                   'source': 'foo@bar.be',
-                                   'recipients': 'foo@bar.be,bar@foo.be',
-                                   'message': 'Hey, Oh!'})
+        content = addview.form_instance.create(data={'subject': 'My Subject',
+                                                     'source': 'foo@bar.be',
+                                                     'recipients': 'foo@bar.be,bar@foo.be',
+                                                     'message': 'Hey, Oh!'})
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, MailAction))
@@ -95,7 +96,8 @@ def testInvokeEditView(self):
 
     def testExecute(self):
         self.loginAsPortalOwner()
-        self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+        self.portal.portal_membership.getAuthenticatedMember().setProperties(
+            email='currentuser@foobar.com')
         sm = getSiteManager(self.portal)
         sm.unregisterUtility(provided=IMailHost)
         dummyMailHost = DummyMailHost('dMailhost')
@@ -113,11 +115,12 @@ def testExecute(self):
 
         mailSent = sent_mails['bar@foo.be']
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual("currentuser@foobar.com", mailSent.get('From'))
         # The output message should be a utf-8 encoded string
-        self.assertEqual("P\xc3\xa4ge 'W\xc3\xa4lkommen' created in http://nohost/plone/Members/test_user_1_/d1 !",
-                         mailSent.get_payload(decode=True))
+        self.assertEqual(
+            "P\xc3\xa4ge 'W\xc3\xa4lkommen' created in http://nohost/plone/Members/test_user_1_/d1 !",  # noqa
+            mailSent.get_payload(decode=True))
 
         # check interpolation of $reviewer_emails
         self.assertTrue("user@two.com" in sent_mails)
@@ -126,8 +129,9 @@ def testExecute(self):
         self.assertTrue("user@one.com" in sent_mails)
 
         # check interpolation of $member_emails
-        self.assertEqual(set(["bar@foo.be", "user@one.com", "user@two.com", "user@three.com", "user@four.com", ]),
-                         set(sent_mails.keys()))
+        self.assertEqual(
+            set(["bar@foo.be", "user@one.com", "user@two.com", "user@three.com", "user@four.com", ]),  # noqa
+            set(sent_mails.keys()))
 
     def testExecuteNoSource(self):
         self.loginAsPortalOwner()
@@ -153,7 +157,7 @@ def testExecuteNoSource(self):
         self.assertTrue(isinstance(dummyMailHost.sent[0], Message))
         mailSent = dummyMailHost.sent[0]
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual("bar@foo.be", mailSent.get('To'))
         self.assertEqual('"plone@rulez" <manager@portal.be>',
                          mailSent.get('From'))
@@ -177,13 +181,13 @@ def testExecuteMultiRecipients(self):
         self.assertTrue(isinstance(dummyMailHost.sent[0], Message))
         mailSent = dummyMailHost.sent[0]
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual('bar@foo.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
         self.assertEqual('Document created !', mailSent.get_payload(decode=True))
         mailSent = dummyMailHost.sent[1]
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual('foo@bar.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
         self.assertEqual('Document created !', mailSent.get_payload(decode=True))
@@ -194,7 +198,8 @@ def testExecuteExcludeActor(self):
         sm.unregisterUtility(provided=IMailHost)
         dummyMailHost = DummyMailHost('dMailhost')
         sm.registerUtility(dummyMailHost, IMailHost)
-        self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+        self.portal.portal_membership.getAuthenticatedMember().setProperties(
+            email='currentuser@foobar.com')
         e = MailAction()
         e.source = "$user_email"
         e.exclude_actor = True
@@ -228,7 +233,8 @@ def testExecuteNoRecipients(self):
     def testExecuteBadMailHost(self):
         # Our goal is that mailing errors should not cause exceptions
         self.loginAsPortalOwner()
-        self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+        self.portal.portal_membership.getAuthenticatedMember().setProperties(
+            email='currentuser@foobar.com')
         e = MailAction()
         e.source = "$user_email"
         e.recipients = "bar@foo.be, $reviewer_emails, $manager_emails, $member_emails"
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index b5a9c60..05ee1fd 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -48,7 +48,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'target_folder': '/target', })
+        content = addview.form_instance.create(data={'target_folder': '/target', })
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, MoveAction))
@@ -120,7 +121,8 @@ def testExecuteWithSameSourceAndTargetFolder(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.portal.target, e, DummyEvent(self.portal.target.d1)), IExecutable)
+        ex = getMultiAdapter((self.portal.target, e, DummyEvent(self.portal.target.d1)),
+                             IExecutable)
         self.assertEqual(True, ex())
 
         self.assertEqual(['d1'], list(self.portal.target.objectIds()))
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index f73a38c..bcbfa32 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -42,7 +42,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.request), name='+action')
         addview = getMultiAdapter((adding, self.request), name=element.addview)
 
-        addview.createAndAdd(data={'message': 'Hello world', 'message_type': 'info'})
+        content = addview.form_instance.create(data={'message': 'Hello world',
+                                                     'message_type': 'info'})
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, NotifyAction))
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index e55b3c8..336b41e 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -44,7 +44,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'transition': 'publish', })
+        content = addview.form_instance.create(data={'transition': 'publish', })
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, WorkflowAction))
@@ -63,7 +64,8 @@ def testExecute(self):
         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
-        self.assertEqual('published', self.portal.portal_workflow.getInfoFor(self.folder.d1, 'review_state'))
+        self.assertEqual('published', self.portal.portal_workflow.getInfoFor(self.folder.d1,
+                         'review_state'))
 
     def testExecuteWithError(self):
         e = WorkflowAction()
@@ -74,4 +76,5 @@ def testExecuteWithError(self):
         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
-        self.assertEqual(old_state, self.portal.portal_workflow.getInfoFor(self.folder.d1, 'review_state'))
+        self.assertEqual(old_state, self.portal.portal_workflow.getInfoFor(self.folder.d1,
+                         'review_state'))
diff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py
index 4e050a0..e48da57 100644
--- a/plone/app/contentrules/tests/test_cascading_rule.py
+++ b/plone/app/contentrules/tests/test_cascading_rule.py
@@ -38,4 +38,4 @@ def test_cascading_rule(self):
 
         wtool = self.portal.portal_workflow
         self.assertEqual(wtool.getInfoFor(self.portal.events['my-event'], 'review_state'),
-                        'published')
+                         'published')
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index 8fbe0fd..3b3229c 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -43,7 +43,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'group_names': ['Manager']})
+        content = addview.form_instance.create(data={'group_names': ['Manager']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, GroupCondition))
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index de5fa3b..b678450 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -43,7 +43,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'check_types': ['Folder', 'Image']})
+        content = addview.form_instance.create(data={'check_types': ['Folder', 'Image']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, PortalTypeCondition))
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 7343976..ad9d120 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -43,7 +43,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'role_names': ['Manager', 'Member']})
+        content = addview.form_instance.create(data={'role_names': ['Manager', 'Member']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, RoleCondition))
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index c04fb83..6b1a0a9 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -42,7 +42,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'tales_expression': 'python:"plone" in object.Subject()'})
+        content = addview.form_instance.create(
+            data={'tales_expression': 'python:"plone" in object.Subject()'})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, TalesExpressionCondition))
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index b70bb57..3831c4e 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -43,7 +43,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'wf_states': ['visible', 'published']})
+        content = addview.form_instance.create(data={'wf_states': ['visible', 'published']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, WorkflowStateCondition))
diff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py
index e7ed2f9..ef20318 100644
--- a/plone/app/contentrules/tests/test_condition_wftransition.py
+++ b/plone/app/contentrules/tests/test_condition_wftransition.py
@@ -36,7 +36,8 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'wf_transitions': ['publish', 'hide']})
+        content = addview.form_instance.create(data={'wf_transitions': ['publish', 'hide']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, WorkflowTransitionCondition))
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index 5df6cc1..f8b58fe 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -38,7 +38,8 @@ def testRuleAddView(self):
         addview = getMultiAdapter((adding, self.portal.REQUEST), name='plone.ContentRule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
-        addview.createAndAdd({'title': 'foo', 'description': 'bar', 'event': None})
+        content = addview.form_instance.create({'title': 'foo', 'description': 'bar', 'event': None})
+        addview.form_instance.add(content)
         self.assertEqual(1, len(storage))
         self.assertEqual('foo', storage.values()[0].title)
 
@@ -100,9 +101,9 @@ def testRulesControlPanel(self):
         self.assertEqual(1, len(registered_rules))
         registered_rule = registered_rules[0]
         self.assertEqual(registered_rule['row_class'],
-                          'trigger-iobjectmodifiedevent state-enabled assignment-unassigned')
+                         'trigger-iobjectmodifiedevent state-enabled assignment-unassigned')
         self.assertEqual(registered_rule['trigger'],
-                          'Object modified')
+                         'Object modified')
         self.assertTrue(registered_rule['enabled'])
         self.assertFalse(registered_rule['assigned'])
 
@@ -127,7 +128,7 @@ def testRulesControlPanel(self):
         registered_rules = controlpanel.registeredRules()
         self.assertTrue(registered_rules[0]['enabled'])
 
-        #works without ajax
+        # works without ajax
         portal.REQUEST.form['rule-id'] = 'foo'
         portal.REQUEST.form['form.button.DisableRule'] = '1'
         portal.restrictedTraverse('@@rules-controlpanel')()


Repository: plone.app.contentrules
Branch: refs/heads/master
Date: 2015-05-31T20:57:36-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/2c1e940b6d7121559e3d75645b884b63c1f014ee

more test fixes

Files changed:
M plone/app/contentrules/browser/configure.zcml
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_rule_management_views.py

diff --git a/plone/app/contentrules/browser/configure.zcml b/plone/app/contentrules/browser/configure.zcml
index e5f90e2..4418515 100644
--- a/plone/app/contentrules/browser/configure.zcml
+++ b/plone/app/contentrules/browser/configure.zcml
@@ -58,14 +58,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleAdding"
       name="plone.ContentRule"
-      class=".rule.RuleAdd"
+      class=".rule.RuleAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.contentrules.rule.interfaces.IRule"
       name="edit"
-      class=".rule.RuleEdit"
+      class=".rule.RuleEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index e47e1c4..f30a244 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -32,7 +32,7 @@ def create(self, data):
         return rule
 
 
-class RuleAdd(ContentRuleFormWrapper):
+class RuleAddFormView(ContentRuleFormWrapper):
     form = RuleAddForm
 
 
@@ -49,5 +49,5 @@ def nextURL(self):
         return url + '/@@rules-controlpanel'
 
 
-class RuleEdit(ContentRuleFormWrapper):
+class RuleEditFormView(ContentRuleFormWrapper):
     form = RuleEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index c08c205..38c0c74 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.copy import CopyAction
-from plone.app.contentrules.actions.copy import CopyEditForm
+from plone.app.contentrules.actions.copy import CopyEditFormView
 
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
@@ -47,6 +47,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         action = addview.form_instance.create(data={'target_folder': '/target', })
         addview.form_instance.add(action)
 
@@ -58,7 +59,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Copy')
         e = CopyAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, CopyEditForm))
+        self.assertTrue(isinstance(editview, CopyEditFormView))
 
     def testExecute(self):
         e = CopyAction()
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 169d186..8695df7 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -7,7 +7,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.logger import LoggerAction
-from plone.app.contentrules.actions.logger import LoggerEditForm
+from plone.app.contentrules.actions.logger import LoggerEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -48,6 +48,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
         addview.form_instance.add(content)
 
@@ -61,7 +62,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Logger')
         e = LoggerAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, LoggerEditForm))
+        self.assertTrue(isinstance(editview, LoggerEditFormView))
 
     def testProcessedMessage(self):
         e = LoggerAction()
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index aec790d..3138d6a 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -7,7 +7,7 @@
 
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.contentrules.actions.mail import MailAction, MailEditForm, MailAddForm
+from plone.app.contentrules.actions.mail import MailAction, MailEditFormView, MailAddFormView
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.rule.interfaces import IRuleAction, IExecutable
 from plone.registry.interfaces import IRegistry
@@ -72,8 +72,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST),
                                   name=element.addview)
-        self.assertTrue(isinstance(addview, MailAddForm))
+        self.assertTrue(isinstance(addview, MailAddFormView))
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'subject': 'My Subject',
                                                      'source': 'foo@bar.be',
                                                      'recipients': 'foo@bar.be,bar@foo.be',
@@ -92,7 +93,7 @@ def testInvokeEditView(self):
         e = MailAction()
         editview = getMultiAdapter((e, self.folder.REQUEST),
                                    name=element.editview)
-        self.assertTrue(isinstance(editview, MailEditForm))
+        self.assertTrue(isinstance(editview, MailEditFormView))
 
     def testExecute(self):
         self.loginAsPortalOwner()
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index 05ee1fd..1543a85 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.move import MoveAction
-from plone.app.contentrules.actions.move import MoveEditForm
+from plone.app.contentrules.actions.move import MoveEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -48,6 +48,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'target_folder': '/target', })
         addview.form_instance.add(content)
 
@@ -59,7 +60,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Move')
         e = MoveAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, MoveEditForm))
+        self.assertTrue(isinstance(editview, MoveEditFormView))
 
     def testExecute(self):
         e = MoveAction()
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index bcbfa32..d92ed54 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.notify import NotifyAction
-from plone.app.contentrules.actions.notify import NotifyEditForm
+from plone.app.contentrules.actions.notify import NotifyEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -42,6 +42,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.request), name='+action')
         addview = getMultiAdapter((adding, self.request), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'message': 'Hello world',
                                                      'message_type': 'info'})
         addview.form_instance.add(content)
@@ -55,7 +56,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Notify')
         e = NotifyAction()
         editview = getMultiAdapter((e, self.request), name=element.editview)
-        self.assertTrue(isinstance(editview, NotifyEditForm))
+        self.assertTrue(isinstance(editview, NotifyEditFormView))
 
     def testExecute(self):
         e = NotifyAction()
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index 336b41e..c3d4b37 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.workflow import WorkflowAction
-from plone.app.contentrules.actions.workflow import WorkflowEditForm
+from plone.app.contentrules.actions.workflow import WorkflowEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -44,6 +44,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'transition': 'publish', })
         addview.form_instance.add(content)
 
@@ -55,7 +56,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Workflow')
         e = WorkflowAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, WorkflowEditForm))
+        self.assertTrue(isinstance(editview, WorkflowEditFormView))
 
     def testExecute(self):
         e = WorkflowAction()
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index 3b3229c..dab6c7c 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.group import GroupCondition
-from plone.app.contentrules.conditions.group import GroupEditForm
+from plone.app.contentrules.conditions.group import GroupEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,6 +43,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'group_names': ['Manager']})
         addview.form_instance.add(content)
 
@@ -54,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Group')
         e = GroupCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, GroupEditForm))
+        self.assertTrue(isinstance(editview, GroupEditFormView))
 
     def testExecute(self):
         e = GroupCondition()
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index b678450..8c89d19 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.portaltype import PortalTypeCondition
-from plone.app.contentrules.conditions.portaltype import PortalTypeEditForm
+from plone.app.contentrules.conditions.portaltype import PortalTypeEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,6 +43,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'check_types': ['Folder', 'Image']})
         addview.form_instance.add(content)
 
@@ -54,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
         e = PortalTypeCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, PortalTypeEditForm))
+        self.assertTrue(isinstance(editview, PortalTypeEditFormView))
 
     def testExecute(self):
         e = PortalTypeCondition()
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index ad9d120..22b4f98 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.role import RoleCondition
-from plone.app.contentrules.conditions.role import RoleEditForm
+from plone.app.contentrules.conditions.role import RoleEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,6 +43,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'role_names': ['Manager', 'Member']})
         addview.form_instance.add(content)
 
@@ -54,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Role')
         e = RoleCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, RoleEditForm))
+        self.assertTrue(isinstance(editview, RoleEditFormView))
 
     def testExecute(self):
         e = RoleCondition()
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index 6b1a0a9..8e08141 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.talesexpression import TalesExpressionCondition
-from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditForm
+from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -42,6 +42,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(
             data={'tales_expression': 'python:"plone" in object.Subject()'})
         addview.form_instance.add(content)
@@ -54,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
         e = TalesExpressionCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, TalesExpressionEditForm))
+        self.assertTrue(isinstance(editview, TalesExpressionEditFormView))
 
     def testExecute(self):
         e = TalesExpressionCondition()
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index 3831c4e..1e9e26c 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.wfstate import WorkflowStateCondition
-from plone.app.contentrules.conditions.wfstate import WorkflowStateEditForm
+from plone.app.contentrules.conditions.wfstate import WorkflowStateEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,6 +43,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'wf_states': ['visible', 'published']})
         addview.form_instance.add(content)
 
@@ -54,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
         e = WorkflowStateCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, WorkflowStateEditForm))
+        self.assertTrue(isinstance(editview, WorkflowStateEditFormView))
 
     def testExecute(self):
         e = WorkflowStateCondition()
diff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py
index ef20318..78e0f26 100644
--- a/plone/app/contentrules/tests/test_condition_wftransition.py
+++ b/plone/app/contentrules/tests/test_condition_wftransition.py
@@ -5,7 +5,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.wftransition import WorkflowTransitionCondition
-from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditForm
+from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -36,6 +36,7 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
+        addview.form_instance.update()
         content = addview.form_instance.create(data={'wf_transitions': ['publish', 'hide']})
         addview.form_instance.add(content)
 
@@ -47,7 +48,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
         e = WorkflowTransitionCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, WorkflowTransitionEditForm))
+        self.assertTrue(isinstance(editview, WorkflowTransitionEditFormView))
 
     def testExecute(self):
         e = WorkflowTransitionCondition()
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index f8b58fe..3801f3b 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -4,7 +4,7 @@
 from plone.contentrules.engine.interfaces import IRuleStorage
 
 from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.browser.rule import RuleEditForm
+from plone.app.contentrules.browser.rule import RuleEditFormView
 
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
@@ -38,7 +38,8 @@ def testRuleAddView(self):
         addview = getMultiAdapter((adding, self.portal.REQUEST), name='plone.ContentRule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
-        content = addview.form_instance.create({'title': 'foo', 'description': 'bar', 'event': None})
+        addview.form_instance.update()
+        content = addview.form_instance.create({'title': 'foo', 'description': 'bar', 'event': None})  # noqa
         addview.form_instance.add(content)
         self.assertEqual(1, len(storage))
         self.assertEqual('foo', storage.values()[0].title)
@@ -46,7 +47,7 @@ def testRuleAddView(self):
     def testRuleEditView(self):
         r = Rule()
         editview = getMultiAdapter((r, self.portal.REQUEST), name='edit')
-        self.assertTrue(isinstance(editview, RuleEditForm))
+        self.assertTrue(isinstance(editview, RuleEditFormView))
 
 
 class TestRuleElementManagementViews(ContentRulesTestCase):


Repository: plone.app.contentrules
Branch: refs/heads/master
Date: 2015-06-01T00:55:17-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/ae888b4b36cecdaa696cdb22be5e2c5ce3368a93

some usability/style tweaksg

Files changed:
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/browser/contentrule-elements.js
M plone/app/contentrules/browser/contentrules.css
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/templates/controlpanel.pt
M plone/app/contentrules/browser/templates/manage-assignments.pt
M plone/app/contentrules/browser/templates/manage-elements.pt

diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index 083a0fa..ff0b523 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -1,6 +1,9 @@
+import os
+
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
+from zope.component.hooks import getSite
 from zope.event import notify
 from z3c.form import form
 from zope.interface import implements, Interface
@@ -19,6 +22,8 @@
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.uuid.utils import uuidToPhysicalPath
+from plone.uuid.interfaces import IUUID
 
 
 class ICopyAction(Interface):
@@ -133,6 +138,9 @@ class CopyAddForm(AddForm):
 
     def create(self, data):
         a = CopyAction()
+        site = getSite()
+        site_path = '/'.join(site.getPhysicalPath())
+        data['target_folder'] = uuidToPhysicalPath(data['target_folder'])[len(site_path):]
         form.applyChanges(self, a, data)
         return a
 
@@ -151,6 +159,19 @@ class CopyEditForm(EditForm):
     description = _(u"A copy action can copy an object to a different folder.")
     form_name = _(u"Configure element")
 
+    def getContent(self):
+        content = super(CopyEditForm, self).getContent()
+        if content.target_folder and content.target_folder[0] == '/':
+            # need to convert to uuid
+            site = getSite()
+            site_path = '/'.join(site.getPhysicalPath())
+            path = os.path.join(site_path, content.target_folder.lstrip('/'))
+            target = self.context.restrictedTraverse(path, None)
+            if target is not None:
+                content.target_folder = IUUID(target)
+                content._v_safe_write = True  # prevent read on write
+        return content
+
 
 class CopyEditFormView(ContentRuleFormWrapper):
-    form = CopyEditForm
+    form = CopyEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/contentrule-elements.js b/plone/app/contentrules/browser/contentrule-elements.js
index 5fa9f4b..86f1101 100644
--- a/plone/app/contentrules/browser/contentrule-elements.js
+++ b/plone/app/contentrules/browser/contentrule-elements.js
@@ -41,15 +41,29 @@ require([
       var url = form.attr('action') + '?' + data;
       var conditionAnchor = $('<a href="' + url + '" />').css('display', 'none');
       conditionAnchor.insertAfter(this);
-      new Modal(conditionAnchor);
+      new Modal(conditionAnchor, {
+        actionOptions: {
+          isForm: true,
+          redirectOnResponse: true,
+          redirectToUrl: function(){
+            /* reload on submit */
+            return window.location.href;
+          }
+        }
+      });
       conditionAnchor.trigger('click');
     });
   }
   $(document).ready(function(){
     initforms();
+
+    /*
+    var $config = $('#configure-rule');
+    $('form', $config).hide();
+    $('legend', $config).replaceWith('<legend><a href="#">' + $('legend', $config).text() + '</a></legend>');
+    $('legend a', $config).click(function(e){
+      e.preventDefault();
+      $('form', $config).slideToggle();
+    });*/
   });
 });
-  /* To enable ajax overlay loading with the current widget
-     used for the add button, we'll create a hidden anchor
-     tag that'll we'll manually trigger clicks for.
-     We'll add one for conditions and one for actions. */
diff --git a/plone/app/contentrules/browser/contentrules.css b/plone/app/contentrules/browser/contentrules.css
index eebb169..f4a53ca 100644
--- a/plone/app/contentrules/browser/contentrules.css
+++ b/plone/app/contentrules/browser/contentrules.css
@@ -19,4 +19,52 @@
 }
 .filter-option{
 	white-space: nowrap;
+}
+
+.rule-operations{
+  float: right;
+  margin: 10px;
+}
+
+#configure-conditions,
+#configure-actions{
+  width: 50%;
+  padding: 5px;
+  float: left;
+}
+
+.rule-operations input[type="submit"],
+.rule-operations a.plone-btn{
+  font-size: 80%;
+  padding: 5px 10px;
+  margin: -1px -2px -1px -2px;
+  border-radius: 0;
+  border-right: none;
+}
+
+.rule-operations input:first-child,
+.rule-operations a:first-child{
+  border-bottom-left-radius: 4px;
+  border-top-left-radius: 4px;
+}
+
+.rule-operations > input:last-child{
+  border-bottom-right-radius: 4px;
+  border-top-right-radius: 4px;
+  border-right: 1px solid #1b6899;
+}
+
+#manage-assignments{
+  clear: both;
+}
+
+.chooser-right label{
+  width: 100%;
+}
+.chooser-right select{
+  display: inline-block;
+  width: 70%;
+}
+.chooser-right input{
+  display: inline-block;
 }
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index f30a244..dac150b 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -3,6 +3,7 @@
 
 from Acquisition import aq_parent, aq_inner
 
+from Products.CMFPlone.utils import base_hasattr
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.browser.formhelper import AddForm
@@ -24,7 +25,10 @@ class RuleAddForm(AddForm):
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-        return '%s/@@rules-controlpanel' % url
+        if base_hasattr(self.context, '_chosen_name'):
+            return '%s/++rule++%s/@@manage-elements' % (url, self.context._chosen_name)
+        else:
+            return '%s/@@rules-controlpanel' % url
 
     def create(self, data):
         rule = Rule()
diff --git a/plone/app/contentrules/browser/templates/controlpanel.pt b/plone/app/contentrules/browser/templates/controlpanel.pt
index d06319f..f928a03 100644
--- a/plone/app/contentrules/browser/templates/controlpanel.pt
+++ b/plone/app/contentrules/browser/templates/controlpanel.pt
@@ -183,7 +183,8 @@
             </table>
             </div>
             <a id="#addcontentrule" tal:attributes="href add_url"
-               class="pat-plone-modal plone-btn plone-btn-primary" i18n:translate="label_contentrule_add">Add content rule</a>
+               class="plone-btn plone-btn-primary"
+               i18n:translate="label_contentrule_add">Add content rule</a>
        </fieldset>
 </div>
 </body>
diff --git a/plone/app/contentrules/browser/templates/manage-assignments.pt b/plone/app/contentrules/browser/templates/manage-assignments.pt
index 5e42675..488262b 100644
--- a/plone/app/contentrules/browser/templates/manage-assignments.pt
+++ b/plone/app/contentrules/browser/templates/manage-assignments.pt
@@ -12,6 +12,9 @@
 <body>
 
 <metal:body fill-slot="body">
+      <link rel="stylesheet" type="text/css" media="all"
+          href="++resource++manage-contentrules.css"
+          tal:attributes="href string:${context/portal_url}/++resource++manage-contentrules.css" />
 
     <div tal:condition="not:view/globally_enabled"
          class="portalMessage info">
diff --git a/plone/app/contentrules/browser/templates/manage-elements.pt b/plone/app/contentrules/browser/templates/manage-elements.pt
index 7dd0169..7745185 100644
--- a/plone/app/contentrules/browser/templates/manage-elements.pt
+++ b/plone/app/contentrules/browser/templates/manage-elements.pt
@@ -11,6 +11,10 @@
 <div metal:fill-slot="prefs_configlet_main"
      tal:define="auth_token context/@@authenticator/token">
 
+    <link rel="stylesheet" type="text/css" media="all"
+          href="++resource++manage-contentrules.css"
+          tal:attributes="href string:${context/portal_url}/++resource++manage-contentrules.css" />
+
     <script type="text/javascript" src="++resource++manage-contentrule-elements.js"
         tal:attributes="src string:${context/portal_url}/++resource++manage-contentrule-elements.js">
     </script>
@@ -32,71 +36,6 @@
         actions and conditions using the buttons below.
     </p>
 
-    <fieldset id="configure-rule">
-        <legend i18n:translate="">Configure rule</legend>
-        <form tal:attributes="action view/view_url" method="post">
-            <span tal:replace="structure context/@@authenticator/authenticator"></span>
-            <div class="field">
-                <label for="form.title" i18n:translate="label_title">Title</label>
-                <div class="formHelp" i18n:translate="description_contentrule_title">
-                    Please set a descriptive title for the rule.
-                </div>
-                <input id="form.title" type="text" width="50" name="title"
-                    tal:attributes="value request/ruleTitle | view/rule_title"/>
-            </div>
-            <div class="field">
-                <label for="form.description" i18n:translate="label_description">Description</label>
-                <div class="formHelp" i18n:translate="contentrules_description_description">
-                    Enter a short description of the rule and its purpose.
-                </div>
-                <textarea id="form.description"  name="description"
-                          tal:content="request/ruleDescription | view/rule_description ">
-                </textarea>
-            </div>
-
-            <div class="field">
-                <label i18n:translate="label_rule_event_trigger">
-                    Event trigger: <span i18n:name="trigger" tal:content="view/rule_event"></span>
-                </label>
-                <div class="formHelp" i18n:translate="contentrules_description_trigger">
-                    The rule will execute when the following event occurs.
-                </div>
-            </div>
-
-            <div class="field">
-                <input type="checkbox" id="stop" name="stopExecuting"
-                       tal:attributes="checked view/rule_stop"/>
-                <label for="stop" i18n:translate="contentrules_description_stop">
-                    Stop evaluating content rules after this rule completes
-                </label>
-            </div>
-
-            <div class="field">
-                <input type="checkbox" id="cascading" name="cascading"
-                       tal:attributes="checked view/rule_cascading"/>
-                <label for="cascading" i18n:translate="contentrules_description_cascading">
-                    The actions executed by this rule can trigger other rules
-                </label>
-            </div>
-
-            <div class="field">
-                <input type="checkbox" id="enabled" name="enabled"
-                       tal:attributes="checked view/rule_enabled"/>
-                <label for="enabled" i18n:translate="">
-                    Enabled
-                </label>
-            </div>
-
-            <div class="formControls">
-                <input class="context"
-                       type="submit"
-                       name="form.button.Save"
-                       value="Save"
-                       i18n:attributes="value label_save;" />
-            </div>
-        </form>
-    </fieldset>
-
     <fieldset id="configure-conditions" tal:define="conditions view/conditions">
         <legend i18n:translate="if_all_conditions_met">
             If all of the following conditions are met:
@@ -255,7 +194,7 @@
 
     <tal:assignments define="assignments view/assignments">
 
-        <fieldset>
+        <fieldset id="manage-assignments">
           <legend i18n:translate="label_contentrules_rule_assignments">Assignments</legend>
           <tal:noassignments condition="not:assignments">
             <div class="portalMessage warning">
@@ -303,6 +242,71 @@
 
     </tal:assignments>
 
+    <fieldset id="configure-rule">
+        <legend i18n:translate="">Configure rule</legend>
+        <form tal:attributes="action view/view_url" method="post">
+            <span tal:replace="structure context/@@authenticator/authenticator"></span>
+            <div class="field">
+                <label for="form.title" i18n:translate="label_title">Title</label>
+                <div class="formHelp" i18n:translate="description_contentrule_title">
+                    Please set a descriptive title for the rule.
+                </div>
+                <input id="form.title" type="text" width="50" name="title"
+                    tal:attributes="value request/ruleTitle | view/rule_title"/>
+            </div>
+            <div class="field">
+                <label for="form.description" i18n:translate="label_description">Description</label>
+                <div class="formHelp" i18n:translate="contentrules_description_description">
+                    Enter a short description of the rule and its purpose.
+                </div>
+                <textarea id="form.description"  name="description"
+                          tal:content="request/ruleDescription | view/rule_description ">
+                </textarea>
+            </div>
+
+            <div class="field">
+                <label i18n:translate="label_rule_event_trigger">
+                    Event trigger: <span i18n:name="trigger" tal:content="view/rule_event"></span>
+                </label>
+                <div class="formHelp" i18n:translate="contentrules_description_trigger">
+                    The rule will execute when the following event occurs.
+                </div>
+            </div>
+
+            <div class="field">
+                <input type="checkbox" id="stop" name="stopExecuting"
+                       tal:attributes="checked view/rule_stop"/>
+                <label for="stop" i18n:translate="contentrules_description_stop">
+                    Stop evaluating content rules after this rule completes
+                </label>
+            </div>
+
+            <div class="field">
+                <input type="checkbox" id="cascading" name="cascading"
+                       tal:attributes="checked view/rule_cascading"/>
+                <label for="cascading" i18n:translate="contentrules_description_cascading">
+                    The actions executed by this rule can trigger other rules
+                </label>
+            </div>
+
+            <div class="field">
+                <input type="checkbox" id="enabled" name="enabled"
+                       tal:attributes="checked view/rule_enabled"/>
+                <label for="enabled" i18n:translate="">
+                    Enabled
+                </label>
+            </div>
+
+            <div class="formControls">
+                <input class="context"
+                       type="submit"
+                       name="form.button.Save"
+                       value="Save"
+                       i18n:attributes="value label_save;" />
+            </div>
+        </form>
+    </fieldset>
+
 </div>
 </body>
 </html>


Repository: plone.app.contentrules
Branch: refs/heads/master
Date: 2015-06-01T01:27:09-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/ca7e62c938a98c9a907ee5dfde3bb897f9d8a2d6

fix remaining tests

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/templates/manage-elements.pt
M plone/app/contentrules/tests/assignment.txt
M plone/app/contentrules/tests/multipublish.txt
M plone/app/contentrules/tests/simplepublish.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 4293e74..dcd2997 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,6 +5,7 @@ Changelog
 ------------------
 
 - Move to z3c.form
+  [vangheem]
 
 
 4.0.4 (2015-05-30)
diff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py
index e69de29..507f8f3 100644
--- a/plone/app/contentrules/actions/__init__.py
+++ b/plone/app/contentrules/actions/__init__.py
@@ -0,0 +1,57 @@
+import os
+from plone.uuid.interfaces import IUUID
+from zope.component.hooks import getSite
+from plone.app.uuid.utils import uuidToPhysicalPath
+from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from z3c.form import form
+
+
+class ContentWrapper(object):
+    """
+    The sole purpose of this is to transform target_folder
+    values from UUID to path, which all of content rules expects
+    """
+    def __init__(self, content):
+        self.content = content
+
+    def __getattr__(self, name, default=None):
+        if name == 'content':
+            return self.__dict__['content']
+        if name == 'target_folder':
+            return self._get_target_folder()
+        return getattr(self.__dict__['content'], name, default)
+
+    def _get_target_folder(self):
+        content = self.__dict__['content']
+        if content.target_folder and content.target_folder[0] == '/':
+            # need to convert to uuid
+            site = getSite()
+            site_path = '/'.join(site.getPhysicalPath())
+            path = os.path.join(site_path, content.target_folder.lstrip('/'))
+            target = site.restrictedTraverse(path, None)
+            if target is not None:
+                return IUUID(target, None)
+
+
+class ActionAddForm(AddForm):
+    Type = None
+
+    def create(self, data):
+        """
+        Since content rules expects paths, we're transforming UUID, which
+        is what the z3c form widget uses, to paths.
+        """
+        a = self.Type()
+        if data.get('target_folder', None):
+            site = getSite()
+            site_path = '/'.join(site.getPhysicalPath())
+            path = uuidToPhysicalPath(data['target_folder'])
+            if path:
+                data['target_folder'] = path[len(site_path):]
+        form.applyChanges(self, a, data)
+        return a
+
+
+class ActionEditForm(EditForm):
+    def getContent(self):
+        return ContentWrapper(super(ActionEditForm, self).getContent())
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index ff0b523..c753e62 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -1,11 +1,7 @@
-import os
-
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
-from zope.component.hooks import getSite
 from zope.event import notify
-from z3c.form import form
 from zope.interface import implements, Interface
 from zope.lifecycleevent import ObjectCopiedEvent
 from zope import schema
@@ -20,10 +16,8 @@
 from ZODB.POSException import ConflictError
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
-from plone.app.uuid.utils import uuidToPhysicalPath
-from plone.uuid.interfaces import IUUID
 
 
 class ICopyAction(Interface):
@@ -129,27 +123,20 @@ def generate_id(self, target, old_id):
         return "%s.%d" % (old_id, idx)
 
 
-class CopyAddForm(AddForm):
+class CopyAddForm(ActionAddForm):
     """An add form for move-to-folder actions.
     """
     schema = ICopyAction
     label = _(u"Add Copy Action")
     description = _(u"A copy action can copy an object to a different folder.")
-
-    def create(self, data):
-        a = CopyAction()
-        site = getSite()
-        site_path = '/'.join(site.getPhysicalPath())
-        data['target_folder'] = uuidToPhysicalPath(data['target_folder'])[len(site_path):]
-        form.applyChanges(self, a, data)
-        return a
+    Type = CopyAction
 
 
 class CopyAddFormView(ContentRuleFormWrapper):
     form = CopyAddForm
 
 
-class CopyEditForm(EditForm):
+class CopyEditForm(ActionEditForm):
     """An edit form for copy rule actions.
 
     Formlib does all the magic here.
@@ -159,19 +146,6 @@ class CopyEditForm(EditForm):
     description = _(u"A copy action can copy an object to a different folder.")
     form_name = _(u"Configure element")
 
-    def getContent(self):
-        content = super(CopyEditForm, self).getContent()
-        if content.target_folder and content.target_folder[0] == '/':
-            # need to convert to uuid
-            site = getSite()
-            site_path = '/'.join(site.getPhysicalPath())
-            path = os.path.join(site_path, content.target_folder.lstrip('/'))
-            target = self.context.restrictedTraverse(path, None)
-            if target is not None:
-                content.target_folder = IUUID(target)
-                content._v_safe_write = True  # prevent read on write
-        return content
-
 
 class CopyEditFormView(ContentRuleFormWrapper):
     form = CopyEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index 272acd3..f023365 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -2,7 +2,6 @@
 
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -12,7 +11,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules.logger")
@@ -95,25 +94,21 @@ def __call__(self):
         return True
 
 
-class LoggerAddForm(AddForm):
+class LoggerAddForm(ActionAddForm):
     """An add form for logger rule actions.
     """
     schema = ILoggerAction
     label = _(u"Add Logger Action")
     description = _(u"A logger action can output a message to the system log.")
     form_name = _(u"Configure element")
-
-    def create(self, data):
-        a = LoggerAction()
-        form.applyChanges(self, a, data)
-        return a
+    Type = LoggerAction
 
 
 class LoggerAddFormView(ContentRuleFormWrapper):
     form = LoggerAddForm
 
 
-class LoggerEditForm(EditForm):
+class LoggerEditForm(ActionEditForm):
     """An edit form for logger rule actions.
 
     Formlib does all the magic here.
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index e16f73d..9d88317 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -8,7 +8,6 @@
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
-from z3c.form import form
 from zope.interface import Interface, implements
 from zope import schema
 from zope.globalrequest import getRequest
@@ -22,7 +21,7 @@
 from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules")
@@ -161,7 +160,7 @@ def __call__(self):
         return True
 
 
-class MailAddForm(AddForm):
+class MailAddForm(ActionAddForm):
     """
     An add form for the mail action
     """
@@ -169,21 +168,16 @@ class MailAddForm(AddForm):
     label = _(u"Add Mail Action")
     description = _(u"A mail action can mail different recipient.")
     form_name = _(u"Configure element")
-
+    Type = MailAction
     # custom template will allow us to add help text
     template = ViewPageTemplateFile('templates/mail.pt')
 
-    def create(self, data):
-        a = MailAction()
-        form.applyChanges(self, a, data)
-        return a
-
 
 class MailAddFormView(ContentRuleFormWrapper):
     form = MailAddForm
 
 
-class MailEditForm(EditForm):
+class MailEditForm(ActionEditForm):
     """
     An edit form for the mail action
     """
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index 5a92c7d..e9e1f89 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -3,7 +3,6 @@
 from zope.component import adapts
 from zope.container.contained import notifyContainerModified
 from zope.event import notify
-from z3c.form import form
 from zope.interface import implements, Interface
 from zope.lifecycleevent import ObjectMovedEvent
 from zope import schema
@@ -18,7 +17,7 @@
 from ZODB.POSException import ConflictError
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
@@ -147,25 +146,21 @@ def generate_id(self, target, old_id):
         return "%s.%d" % (old_id, idx)
 
 
-class MoveAddForm(AddForm):
+class MoveAddForm(ActionAddForm):
     """An add form for move-to-folder actions.
     """
     schema = IMoveAction
     label = _(u"Add Move Action")
     description = _(u"A move action can move an object to a different folder.")
     form_name = _(u"Configure element")
-
-    def create(self, data):
-        a = MoveAction()
-        form.applyChanges(self, a, data)
-        return a
+    Type = MoveAction
 
 
 class MoveAddFormView(ContentRuleFormWrapper):
     form = MoveAddForm
 
 
-class MoveEditForm(EditForm):
+class MoveEditForm(ActionEditForm):
     """An edit form for move rule actions.
 
     Formlib does all the magic here.
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index 9f04746..aafb41b 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,6 +1,5 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -9,7 +8,7 @@
 
 from plone.app.contentrules import PloneMessageFactory
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
@@ -66,25 +65,21 @@ def __call__(self):
         return True
 
 
-class NotifyAddForm(AddForm):
+class NotifyAddForm(ActionAddForm):
     """An add form for notify rule actions.
     """
     schema = INotifyAction
     label = _(u"Add Notify Action")
     description = _(u"A notify action can show a message to the user.")
     form_name = _(u"Configure element")
-
-    def create(self, data):
-        a = NotifyAction()
-        form.applyChanges(self, a, data)
-        return a
+    Type = NotifyAction
 
 
 class NotifyAddFormView(ContentRuleFormWrapper):
     form = NotifyAddForm
 
 
-class NotifyEditForm(EditForm):
+class NotifyEditForm(ActionEditForm):
     """An edit form for notify rule actions.
 
     Formlib does all the magic here.
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 48d1c5a..163243e 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,7 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.interface import implements, Interface
 from zope.component import adapts
-from z3c.form import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -11,7 +10,7 @@
 from ZODB.POSException import ConflictError
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
@@ -78,25 +77,21 @@ def error(self, obj, error):
             IStatusMessage(request).addStatusMessage(message, type="error")
 
 
-class WorkflowAddForm(AddForm):
+class WorkflowAddForm(ActionAddForm):
     """An add form for workflow actions.
     """
     schema = IWorkflowAction
     label = _(u"Add Workflow Action")
     description = _(u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
-
-    def create(self, data):
-        a = WorkflowAction()
-        form.applyChanges(self, a, data)
-        return a
+    Type = WorkflowAction
 
 
 class WorkflowAddFormView(ContentRuleFormWrapper):
     form = WorkflowAddForm
 
 
-class WorkflowEditForm(EditForm):
+class WorkflowEditForm(ActionEditForm):
     """An edit form for workflow rule actions.
     """
     schema = IWorkflowAction
diff --git a/plone/app/contentrules/browser/templates/manage-elements.pt b/plone/app/contentrules/browser/templates/manage-elements.pt
index 7745185..49d5988 100644
--- a/plone/app/contentrules/browser/templates/manage-elements.pt
+++ b/plone/app/contentrules/browser/templates/manage-elements.pt
@@ -131,7 +131,7 @@
             <input type="hidden" name="element_id:int" tal:attributes="value action/idx" />
             <div class="rule-element">
                 <div class="rule-operations">
-                    <a tal:attributes="href string:${action/editview}" class="pat-plone-modal"
+                    <a tal:attributes="href string:${action/editview}?_authenticator=${auth_token}" class="pat-plone-modal"
                        tal:condition="action/editview">
                       <input type="submit"
                              name="form.button.EditAction"
diff --git a/plone/app/contentrules/tests/assignment.txt b/plone/app/contentrules/tests/assignment.txt
index 08f1175..2b50649 100644
--- a/plone/app/contentrules/tests/assignment.txt
+++ b/plone/app/contentrules/tests/assignment.txt
@@ -52,11 +52,9 @@ Now comes the action, we want all news items to be copied into the
 
   >>> browser.getControl('Add action').value = ['plone.actions.Copy']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.target_folder.query') # XXX fix label
-  >>> ctrl.value = '/news'
-  >>> browser.getControl('Search', index=2).click()
-  >>> ctrl = browser.getControl(name='form.target_folder') # XXX fix label
-  >>> ctrl.value = ['/news']
+  >>> ctrl = browser.getControl(name='form.widgets.target_folder')
+  >>> from plone.uuid.interfaces import IUUID
+  >>> ctrl.value = IUUID(portal.news)
   >>> browser.getControl('Save').click()
 
 A second rule will be added to notify users when a content is added.
@@ -72,7 +70,7 @@ A second rule will be added to notify users when a content is added.
   >>> browser.open('http://nohost/plone/++rule++rule-2/@@manage-elements')
   >>> browser.getControl('Add action').value = ['plone.actions.Notify']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.message')
+  >>> ctrl = browser.getControl(name='form.widgets.message')
   >>> ctrl.value = 'Content added'
   >>> browser.getControl('Save').click()
 
diff --git a/plone/app/contentrules/tests/multipublish.txt b/plone/app/contentrules/tests/multipublish.txt
index df63c57..36d3144 100644
--- a/plone/app/contentrules/tests/multipublish.txt
+++ b/plone/app/contentrules/tests/multipublish.txt
@@ -48,11 +48,9 @@ Now comes the action, we want all news items to be moved into the
 
   >>> browser.getControl('Add action').value = ['plone.actions.Move']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.target_folder.query') # XXX fix label
-  >>> ctrl.value = '/news'
-  >>> browser.getControl('Search', index=2).click()
-  >>> ctrl = browser.getControl(name='form.target_folder') # XXX fix label
-  >>> ctrl.value = ['/news']
+  >>> ctrl = browser.getControl(name='form.widgets.target_folder')
+  >>> from plone.uuid.interfaces import IUUID
+  >>> ctrl.value = IUUID(portal.news)
   >>> browser.getControl('Save').click()
 
 We're done with setting up the content rule.  We need to now apply the
diff --git a/plone/app/contentrules/tests/simplepublish.txt b/plone/app/contentrules/tests/simplepublish.txt
index d008f2d..60e475c 100644
--- a/plone/app/contentrules/tests/simplepublish.txt
+++ b/plone/app/contentrules/tests/simplepublish.txt
@@ -50,11 +50,9 @@ Now comes the action, we want all news items to be copied into the
 
   >>> browser.getControl('Add action').value = ['plone.actions.Copy']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.target_folder.query') # XXX fix label
-  >>> ctrl.value = '/news'
-  >>> browser.getControl('Search', index=2).click()
-  >>> ctrl = browser.getControl(name='form.target_folder') # XXX fix label
-  >>> ctrl.value = ['/news']
+  >>> ctrl = browser.getControl(name='form.widgets.target_folder')
+  >>> from plone.uuid.interfaces import IUUID
+  >>> ctrl.value = IUUID(portal.news)
   >>> browser.getControl('Save').click()
 
 We're done with setting up the content rule.  We need to now apply the


Repository: plone.app.contentrules
Branch: refs/heads/master
Date: 2015-06-01T11:08:22+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.contentrules/commit/7427228de44e012bc94b886912b2a021edacc9be

Merge pull request #14 from plone/move-to-z3cform

move to z3c.form

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/configure.zcml
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/configure.zcml
M plone/app/contentrules/browser/contentrule-elements.js
M plone/app/contentrules/browser/contentrules.css
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/templates/contentrules-pageform.pt
M plone/app/contentrules/browser/templates/controlpanel.pt
M plone/app/contentrules/browser/templates/manage-assignments.pt
M plone/app/contentrules/browser/templates/manage-elements.pt
M plone/app/contentrules/conditions/configure.zcml
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/tests/assignment.txt
M plone/app/contentrules/tests/multipublish.txt
M plone/app/contentrules/tests/simplepublish.txt
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_rule_management_views.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c51fa68..dcd2997 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 4.0.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Move to z3c.form
+  [vangheem]
 
 
 4.0.4 (2015-05-30)
diff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py
index e69de29..507f8f3 100644
--- a/plone/app/contentrules/actions/__init__.py
+++ b/plone/app/contentrules/actions/__init__.py
@@ -0,0 +1,57 @@
+import os
+from plone.uuid.interfaces import IUUID
+from zope.component.hooks import getSite
+from plone.app.uuid.utils import uuidToPhysicalPath
+from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from z3c.form import form
+
+
+class ContentWrapper(object):
+    """
+    The sole purpose of this is to transform target_folder
+    values from UUID to path, which all of content rules expects
+    """
+    def __init__(self, content):
+        self.content = content
+
+    def __getattr__(self, name, default=None):
+        if name == 'content':
+            return self.__dict__['content']
+        if name == 'target_folder':
+            return self._get_target_folder()
+        return getattr(self.__dict__['content'], name, default)
+
+    def _get_target_folder(self):
+        content = self.__dict__['content']
+        if content.target_folder and content.target_folder[0] == '/':
+            # need to convert to uuid
+            site = getSite()
+            site_path = '/'.join(site.getPhysicalPath())
+            path = os.path.join(site_path, content.target_folder.lstrip('/'))
+            target = site.restrictedTraverse(path, None)
+            if target is not None:
+                return IUUID(target, None)
+
+
+class ActionAddForm(AddForm):
+    Type = None
+
+    def create(self, data):
+        """
+        Since content rules expects paths, we're transforming UUID, which
+        is what the z3c form widget uses, to paths.
+        """
+        a = self.Type()
+        if data.get('target_folder', None):
+            site = getSite()
+            site_path = '/'.join(site.getPhysicalPath())
+            path = uuidToPhysicalPath(data['target_folder'])
+            if path:
+                data['target_folder'] = path[len(site_path):]
+        form.applyChanges(self, a, data)
+        return a
+
+
+class ActionEditForm(EditForm):
+    def getContent(self):
+        return ContentWrapper(super(ActionEditForm, self).getContent())
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/configure.zcml b/plone/app/contentrules/actions/configure.zcml
index e1f12ee..4ce1ab2 100644
--- a/plone/app/contentrules/actions/configure.zcml
+++ b/plone/app/contentrules/actions/configure.zcml
@@ -10,14 +10,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
       name="plone.actions.Logger"
-      class=".logger.LoggerAddForm"
+      class=".logger.LoggerAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.actions.logger.ILoggerAction"
       name="edit"
-      class=".logger.LoggerEditForm"
+      class=".logger.LoggerEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -40,14 +40,14 @@
     <browser:page
         for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
         name="plone.actions.Notify"
-        class=".notify.NotifyAddForm"
+        class=".notify.NotifyAddFormView"
         permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
         for="plone.app.contentrules.actions.notify.INotifyAction"
         name="edit"
-        class=".notify.NotifyEditForm"
+        class=".notify.NotifyEditFormView"
         permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -70,14 +70,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Copy"
-       class=".copy.CopyAddForm"
+       class=".copy.CopyAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.copy.ICopyAction"
        name="edit"
-       class=".copy.CopyEditForm"
+       class=".copy.CopyEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
@@ -100,14 +100,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Move"
-       class=".move.MoveAddForm"
+       class=".move.MoveAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.move.IMoveAction"
        name="edit"
-       class=".move.MoveEditForm"
+       class=".move.MoveEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
@@ -152,14 +152,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Workflow"
-       class=".workflow.WorkflowAddForm"
+       class=".workflow.WorkflowAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.workflow.IWorkflowAction"
        name="edit"
-       class=".workflow.WorkflowEditForm"
+       class=".workflow.WorkflowEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
@@ -182,14 +182,14 @@
      <browser:page
        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"
        name="plone.actions.Mail"
-       class=".mail.MailAddForm"
+       class=".mail.MailAddFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
      <browser:page
        for="plone.app.contentrules.actions.mail.IMailAction"
        name="edit"
-       class=".mail.MailEditForm"
+       class=".mail.MailEditFormView"
        permission="plone.app.contentrules.ManageContentRules"
        />
 
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index fe5e188..c753e62 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -1,9 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.form.widgets.uberselectionwidget import UberSelectionWidget
-from plone.app.vocabularies.catalog import SearchableTextSourceBinder
+from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
 from zope.event import notify
-from zope.formlib import form
 from zope.interface import implements, Interface
 from zope.lifecycleevent import ObjectCopiedEvent
 from zope import schema
@@ -18,7 +16,8 @@
 from ZODB.POSException import ConflictError
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class ICopyAction(Interface):
@@ -30,8 +29,7 @@ class ICopyAction(Interface):
     target_folder = schema.Choice(title=_(u"Target folder"),
                                   description=_(u"As a path relative to the portal root."),
                                   required=True,
-                                  source=SearchableTextSourceBinder({'is_folderish': True},
-                                                                    default_query='path:'))
+                                  source=CatalogSource(is_folderish=True))
 
 
 class CopyAction(SimpleItem):
@@ -109,7 +107,7 @@ def error(self, obj, error):
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
             message = _(u"Unable to copy ${name} as part of content rule 'copy' action: ${error}",
-                          mapping={'name': title, 'error': error})
+                        mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
     def generate_id(self, target, old_id):
@@ -125,28 +123,29 @@ def generate_id(self, target, old_id):
         return "%s.%d" % (old_id, idx)
 
 
-class CopyAddForm(AddForm):
+class CopyAddForm(ActionAddForm):
     """An add form for move-to-folder actions.
     """
-    form_fields = form.FormFields(ICopyAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = ICopyAction
     label = _(u"Add Copy Action")
     description = _(u"A copy action can copy an object to a different folder.")
-    form_name = _(u"Configure element")
+    Type = CopyAction
+
 
-    def create(self, data):
-        a = CopyAction()
-        form.applyChanges(a, self.form_fields, data)
-        return a
+class CopyAddFormView(ContentRuleFormWrapper):
+    form = CopyAddForm
 
 
-class CopyEditForm(EditForm):
+class CopyEditForm(ActionEditForm):
     """An edit form for copy rule actions.
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(ICopyAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = ICopyAction
     label = _(u"Edit Copy Action")
     description = _(u"A copy action can copy an object to a different folder.")
     form_name = _(u"Configure element")
+
+
+class CopyEditFormView(ContentRuleFormWrapper):
+    form = CopyEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index 14b16bc..febeffe 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -58,7 +58,7 @@ def error(self, obj, error):
         request = getattr(self.context, 'REQUEST', None)
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
-            message = _(u"Unable to remove ${name} as part of content rule 'delete' action: ${error}",
+            message = _(u"Unable to remove ${name} as part of content rule 'delete' action: ${error}",  # noqa
                           mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index c6083f0..f023365 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -2,7 +2,6 @@
 
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from zope.formlib import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -12,7 +11,8 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules.logger")
 handler = logging.StreamHandler()
@@ -33,11 +33,12 @@ class ILoggerAction(Interface):
     loggingLevel = schema.Int(title=_(u'Logging level'),
                               default=20)  # INFO
 
-    message = schema.TextLine(title=_(u"Message"),
-                              description=_('help_contentrules_logger_message',
-                                            default=u"&e = the triggering event, &c = the context, &u = the user"),
-                              default=_('text_contentrules_logger_message',
-                                        default=u"Caught &e at &c by &u"))
+    message = schema.TextLine(
+        title=_(u"Message"),
+        description=_('help_contentrules_logger_message',
+                      default=u"&e = the triggering event, &c = the context, &u = the user"),
+        default=_('text_contentrules_logger_message',
+                  default=u"Caught &e at &c by &u"))
 
 
 class LoggerAction(SimpleItem):
@@ -75,7 +76,7 @@ def processedMessage(self):
         processedMessage = self.element.message
         if "&e" in processedMessage:
             processedMessage = processedMessage.replace("&e", "%s.%s" % (
-                    self.event.__class__.__module__, self.event.__class__.__name__))
+                self.event.__class__.__module__, self.event.__class__.__name__))
 
         if "&c" in processedMessage and IObjectEvent.providedBy(self.event):
             processedMessage = processedMessage.replace("&c", repr(self.event.object))
@@ -93,26 +94,30 @@ def __call__(self):
         return True
 
 
-class LoggerAddForm(AddForm):
+class LoggerAddForm(ActionAddForm):
     """An add form for logger rule actions.
     """
-    form_fields = form.FormFields(ILoggerAction)
+    schema = ILoggerAction
     label = _(u"Add Logger Action")
     description = _(u"A logger action can output a message to the system log.")
     form_name = _(u"Configure element")
+    Type = LoggerAction
 
-    def create(self, data):
-        a = LoggerAction()
-        form.applyChanges(a, self.form_fields, data)
-        return a
 
+class LoggerAddFormView(ContentRuleFormWrapper):
+    form = LoggerAddForm
 
-class LoggerEditForm(EditForm):
+
+class LoggerEditForm(ActionEditForm):
     """An edit form for logger rule actions.
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(ILoggerAction)
+    schema = ILoggerAction
     label = _(u"Edit Logger Action")
     description = _(u"A logger action can output a message to the system log.")
     form_name = _(u"Configure element")
+
+
+class LoggerEditFormView(ContentRuleFormWrapper):
+    form = LoggerAddForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index 910d885..9d88317 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -8,7 +8,6 @@
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
-from zope.formlib import form
 from zope.interface import Interface, implements
 from zope import schema
 from zope.globalrequest import getRequest
@@ -22,7 +21,8 @@
 from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules")
 
@@ -38,12 +38,13 @@ class IMailAction(Interface):
                                            "email. If no email is provided here, "
                                            "it will use the portal from address."),
                              required=False)
-    recipients = schema.TextLine(title=_(u"Email recipients"),
-                                description=_("The email where you want to "
-                                              "send this message. To send it to "
-                                              "different email addresses, "
-                                              "just separate them with ,"),
-                                required=True)
+    recipients = schema.TextLine(
+        title=_(u"Email recipients"),
+        description=_("The email where you want to "
+                      "send this message. To send it to "
+                      "different email addresses, "
+                      "just separate them with ,"),
+        required=True)
     exclude_actor = schema.Bool(title=_(u"Exclude actor from recipients"),
                                 description=_("Do not send the email to the user "
                                               "that did the action."))
@@ -86,12 +87,10 @@ def __init__(self, context, element, event):
         self.mail_settings = registry.forInterface(IMailSchema,
                                                    prefix='plone')
 
-
     def __call__(self):
         mailhost = getToolByName(aq_inner(self.context), "MailHost")
         if not mailhost:
-            raise ComponentLookupError, "You must have a Mailhost utility to \
-execute this action"
+            raise ComponentLookupError("You must have a Mailhost utility to execute this action")
 
         urltool = getToolByName(aq_inner(self.context), "portal_url")
         portal = urltool.getPortalObject()
@@ -125,7 +124,7 @@ def __call__(self):
 
         recip_string = interpolator(self.element.recipients)
         if recip_string:  # check recipient is not None or empty string
-            recipients = set([str(mail.strip()) for mail in recip_string.split(',') \
+            recipients = set([str(mail.strip()) for mail in recip_string.split(',')
                               if mail.strip()])
         else:
             recipients = set()
@@ -161,32 +160,35 @@ def __call__(self):
         return True
 
 
-class MailAddForm(AddForm):
+class MailAddForm(ActionAddForm):
     """
     An add form for the mail action
     """
-    form_fields = form.FormFields(IMailAction)
+    schema = IMailAction
     label = _(u"Add Mail Action")
     description = _(u"A mail action can mail different recipient.")
     form_name = _(u"Configure element")
-
+    Type = MailAction
     # custom template will allow us to add help text
     template = ViewPageTemplateFile('templates/mail.pt')
 
-    def create(self, data):
-        a = MailAction()
-        form.applyChanges(a, self.form_fields, data)
-        return a
+
+class MailAddFormView(ContentRuleFormWrapper):
+    form = MailAddForm
 
 
-class MailEditForm(EditForm):
+class MailEditForm(ActionEditForm):
     """
     An edit form for the mail action
     """
-    form_fields = form.FormFields(IMailAction)
+    schema = IMailAction
     label = _(u"Edit Mail Action")
     description = _(u"A mail action can mail different recipient.")
     form_name = _(u"Configure element")
 
     # custom template will allow us to add help text
     template = ViewPageTemplateFile('templates/mail.pt')
+
+
+class MailEditFormView(ContentRuleFormWrapper):
+    form = MailEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index 892c7cd..e9e1f89 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -1,10 +1,8 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.form.widgets.uberselectionwidget import UberSelectionWidget
-from plone.app.vocabularies.catalog import SearchableTextSourceBinder
+from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
 from zope.container.contained import notifyContainerModified
 from zope.event import notify
-from zope.formlib import form
 from zope.interface import implements, Interface
 from zope.lifecycleevent import ObjectMovedEvent
 from zope import schema
@@ -19,7 +17,8 @@
 from ZODB.POSException import ConflictError
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IMoveAction(Interface):
@@ -31,8 +30,7 @@ class IMoveAction(Interface):
     target_folder = schema.Choice(title=_(u"Target folder"),
                                   description=_(u"As a path relative to the portal root."),
                                   required=True,
-                                  source=SearchableTextSourceBinder({'is_folderish': True},
-                                                                    default_query='path:'))
+                                  source=CatalogSource(is_folderish=True))
 
 
 class MoveAction(SimpleItem):
@@ -132,7 +130,7 @@ def error(self, obj, error):
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
             message = _(u"Unable to move ${name} as part of content rule 'move' action: ${error}",
-                          mapping={'name': title, 'error': error})
+                        mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
     def generate_id(self, target, old_id):
@@ -148,28 +146,30 @@ def generate_id(self, target, old_id):
         return "%s.%d" % (old_id, idx)
 
 
-class MoveAddForm(AddForm):
+class MoveAddForm(ActionAddForm):
     """An add form for move-to-folder actions.
     """
-    form_fields = form.FormFields(IMoveAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = IMoveAction
     label = _(u"Add Move Action")
     description = _(u"A move action can move an object to a different folder.")
     form_name = _(u"Configure element")
+    Type = MoveAction
 
-    def create(self, data):
-        a = MoveAction()
-        form.applyChanges(a, self.form_fields, data)
-        return a
 
+class MoveAddFormView(ContentRuleFormWrapper):
+    form = MoveAddForm
 
-class MoveEditForm(EditForm):
+
+class MoveEditForm(ActionEditForm):
     """An edit form for move rule actions.
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IMoveAction)
-    form_fields['target_folder'].custom_widget = UberSelectionWidget
+    schema = IMoveAction
     label = _(u"Edit Move Action")
     description = _(u"A move action can move an object to a different folder.")
     form_name = _(u"Configure element")
+
+
+class MoveEditFormView(ContentRuleFormWrapper):
+    form = MoveEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index 4a3257c..aafb41b 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,6 +1,5 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -9,7 +8,8 @@
 
 from plone.app.contentrules import PloneMessageFactory
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class INotifyAction(Interface):
@@ -65,26 +65,30 @@ def __call__(self):
         return True
 
 
-class NotifyAddForm(AddForm):
+class NotifyAddForm(ActionAddForm):
     """An add form for notify rule actions.
     """
-    form_fields = form.FormFields(INotifyAction)
+    schema = INotifyAction
     label = _(u"Add Notify Action")
     description = _(u"A notify action can show a message to the user.")
     form_name = _(u"Configure element")
+    Type = NotifyAction
 
-    def create(self, data):
-        a = NotifyAction()
-        form.applyChanges(a, self.form_fields, data)
-        return a
 
+class NotifyAddFormView(ContentRuleFormWrapper):
+    form = NotifyAddForm
 
-class NotifyEditForm(EditForm):
+
+class NotifyEditForm(ActionEditForm):
     """An edit form for notify rule actions.
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(INotifyAction)
+    schema = INotifyAction
     label = _(u"Edit Notify Action")
     description = _(u"A notify action can show a message to the user.")
     form_name = _(u"Configure element")
+
+
+class NotifyEditFormView(ContentRuleFormWrapper):
+    form = NotifyAddForm
\ No newline at end of file
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 991eb4a..163243e 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,7 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.interface import implements, Interface
 from zope.component import adapts
-from zope.formlib import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -11,7 +10,8 @@
 from ZODB.POSException import ConflictError
 
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IWorkflowAction(Interface):
@@ -71,29 +71,34 @@ def error(self, obj, error):
         request = getattr(self.context, 'REQUEST', None)
         if request is not None:
             title = utils.pretty_title_or_id(obj, obj)
-            message = _(u"Unable to change state of ${name} as part of content rule 'workflow' action: ${error}",
-                          mapping={'name': title, 'error': error})
+            message = _(
+                u"Unable to change state of ${name} as part of content rule 'workflow' action: ${error}",  # noqa
+                mapping={'name': title, 'error': error})
             IStatusMessage(request).addStatusMessage(message, type="error")
 
 
-class WorkflowAddForm(AddForm):
+class WorkflowAddForm(ActionAddForm):
     """An add form for workflow actions.
     """
-    form_fields = form.FormFields(IWorkflowAction)
+    schema = IWorkflowAction
     label = _(u"Add Workflow Action")
     description = _(u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
+    Type = WorkflowAction
 
-    def create(self, data):
-        a = WorkflowAction()
-        form.applyChanges(a, self.form_fields, data)
-        return a
 
+class WorkflowAddFormView(ContentRuleFormWrapper):
+    form = WorkflowAddForm
 
-class WorkflowEditForm(EditForm):
+
+class WorkflowEditForm(ActionEditForm):
     """An edit form for workflow rule actions.
     """
-    form_fields = form.FormFields(IWorkflowAction)
+    schema = IWorkflowAction
     label = _(u"Edit Workflow Action")
     description = _(u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
+
+
+class WorkflowEditFormView(ContentRuleFormWrapper):
+    form = WorkflowAddForm
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index eee24c1..cde7f5d 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -41,13 +41,14 @@ def add(self, content):
         name = chooser.chooseName(None, content)
         self._chosen_name = name
         storage[name] = content
-        IStatusMessage(self.request).add(_(u"New content rule created. "
-                                           u"Please add conditions and actions at the bottom of the page."),
-                                         type=u'info')
+        IStatusMessage(self.request).add(_(
+            u"New content rule created. "
+            u"Please add conditions and actions at the bottom of the page."),
+            type=u'info')
 
     def renderAddButton(self):
         warn("The renderAddButton method is deprecated, use nameAllowed",
-            DeprecationWarning, 2)
+             DeprecationWarning, 2)
 
     def namesAccepted(self):
         return False
@@ -84,7 +85,7 @@ def nextURL(self):
 
     def renderAddButton(self):
         warn("The renderAddButton method is deprecated, use nameAllowed",
-            DeprecationWarning, 2)
+             DeprecationWarning, 2)
 
     def namesAccepted(self):
         return False
diff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py
index c96d4eb..98f8fef 100644
--- a/plone/app/contentrules/browser/assignments.py
+++ b/plone/app/contentrules/browser/assignments.py
@@ -115,12 +115,13 @@ def acquired_rules(self):
                     if key not in in_use and assignment.bubbles:
                         rule = storage.get(key, None)
                         if rule is not None:
-                            assignments.append(dict(id=key,
-                                                    title=rule.title,
-                                                    description=rule.description,
-                                                    trigger=events.get(rule.event, "Unknown"),
-                                                    url=context.absolute_url() + '/@@manage-content-rules',
-                                                    enabled=(assignment.enabled and rule.enabled), ))
+                            assignments.append(dict(
+                                id=key,
+                                title=rule.title,
+                                description=rule.description,
+                                trigger=events.get(rule.event, "Unknown"),
+                                url=context.absolute_url() + '/@@manage-content-rules',
+                                enabled=(assignment.enabled and rule.enabled), ))
             if ISiteRoot.providedBy(context):
                 context = None
             else:
diff --git a/plone/app/contentrules/browser/configure.zcml b/plone/app/contentrules/browser/configure.zcml
index 7d2875e..4418515 100644
--- a/plone/app/contentrules/browser/configure.zcml
+++ b/plone/app/contentrules/browser/configure.zcml
@@ -58,14 +58,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleAdding"
       name="plone.ContentRule"
-      class=".rule.RuleAddForm"
+      class=".rule.RuleAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.contentrules.rule.interfaces.IRule"
       name="edit"
-      class=".rule.RuleEditForm"
+      class=".rule.RuleEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -148,15 +148,6 @@
         name="action"
         />
 
-
-    <!-- Default page layout for cont rules add/edit forms -->
-    <adapter
-      for=".interfaces.IContentRulesForm"
-      factory=".formhelper.contentrules_named_template_adapter"
-      name="default"
-      provides="zope.formlib.namedtemplate.INamedTemplate"
-      />
-
     <!-- When we access rules and elements, we still want to use a CMF/Plone
     main_template -->
 
diff --git a/plone/app/contentrules/browser/contentrule-elements.js b/plone/app/contentrules/browser/contentrule-elements.js
index 5fa9f4b..86f1101 100644
--- a/plone/app/contentrules/browser/contentrule-elements.js
+++ b/plone/app/contentrules/browser/contentrule-elements.js
@@ -41,15 +41,29 @@ require([
       var url = form.attr('action') + '?' + data;
       var conditionAnchor = $('<a href="' + url + '" />').css('display', 'none');
       conditionAnchor.insertAfter(this);
-      new Modal(conditionAnchor);
+      new Modal(conditionAnchor, {
+        actionOptions: {
+          isForm: true,
+          redirectOnResponse: true,
+          redirectToUrl: function(){
+            /* reload on submit */
+            return window.location.href;
+          }
+        }
+      });
       conditionAnchor.trigger('click');
     });
   }
   $(document).ready(function(){
     initforms();
+
+    /*
+    var $config = $('#configure-rule');
+    $('form', $config).hide();
+    $('legend', $config).replaceWith('<legend><a href="#">' + $('legend', $config).text() + '</a></legend>');
+    $('legend a', $config).click(function(e){
+      e.preventDefault();
+      $('form', $config).slideToggle();
+    });*/
   });
 });
-  /* To enable ajax overlay loading with the current widget
-     used for the add button, we'll create a hidden anchor
-     tag that'll we'll manually trigger clicks for.
-     We'll add one for conditions and one for actions. */
diff --git a/plone/app/contentrules/browser/contentrules.css b/plone/app/contentrules/browser/contentrules.css
index eebb169..f4a53ca 100644
--- a/plone/app/contentrules/browser/contentrules.css
+++ b/plone/app/contentrules/browser/contentrules.css
@@ -19,4 +19,52 @@
 }
 .filter-option{
 	white-space: nowrap;
+}
+
+.rule-operations{
+  float: right;
+  margin: 10px;
+}
+
+#configure-conditions,
+#configure-actions{
+  width: 50%;
+  padding: 5px;
+  float: left;
+}
+
+.rule-operations input[type="submit"],
+.rule-operations a.plone-btn{
+  font-size: 80%;
+  padding: 5px 10px;
+  margin: -1px -2px -1px -2px;
+  border-radius: 0;
+  border-right: none;
+}
+
+.rule-operations input:first-child,
+.rule-operations a:first-child{
+  border-bottom-left-radius: 4px;
+  border-top-left-radius: 4px;
+}
+
+.rule-operations > input:last-child{
+  border-bottom-right-radius: 4px;
+  border-top-right-radius: 4px;
+  border-right: 1px solid #1b6899;
+}
+
+#manage-assignments{
+  clear: both;
+}
+
+.chooser-right label{
+  width: 100%;
+}
+.chooser-right select{
+  display: inline-block;
+  width: 70%;
+}
+.chooser-right input{
+  display: inline-block;
 }
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index 0a3aaa3..a248d81 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -66,14 +66,14 @@ def registeredRules(self):
             enabled_class = r.enabled and 'state-enabled' or 'state-disabled'
             assigned = len(get_assignments(r)) > 0
             assigned_class = assigned and 'assignment-assigned' or 'assignment-unassigned'
-            info.append({'id': r.__name__,
-                        'title': r.title,
-                        'description': r.description,
-                        'enabled': r.enabled,
-                        'assigned': assigned,
-                        'trigger': events[r.event],
-                        'row_class': "%s %s %s" % (trigger_class, enabled_class, assigned_class)
-                        })
+            info.append({
+                'id': r.__name__,
+                'title': r.title,
+                'description': r.description,
+                'enabled': r.enabled,
+                'assigned': assigned,
+                'trigger': events[r.event],
+                'row_class': "%s %s %s" % (trigger_class, enabled_class, assigned_class)})
 
         return info
 
@@ -96,8 +96,7 @@ def ruleTypesToShow(self):
 
     def statesToShow(self):
         return ({'id': 'state-enabled', 'title': _(u"label_rule_enabled", default=u"Enabled")},
-                {'id': 'state-disabled', 'title': _(u"label_rule_disabled", default=u"Disabled"), },
-                     )
+                {'id': 'state-disabled', 'title': _(u"label_rule_disabled", default=u"Disabled"), })
 
     def _getRules(self):
         storage = getUtility(IRuleStorage)
diff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py
index b125b0a..9c9738b 100644
--- a/plone/app/contentrules/browser/elements.py
+++ b/plone/app/contentrules/browser/elements.py
@@ -72,8 +72,8 @@ def __call__(self):
         elif 'form.button.ApplyOnWholeSite' in form:
             self.globally_assign()
             IStatusMessage(self.request).add(
-                                _(u"The rule has been enabled on site root "
-                                  u"and all its subfolders"))
+                _(u"The rule has been enabled on site root "
+                  u"and all its subfolders"))
 
         self.view_url = self.base_url + '/@@manage-elements'
         self.rule_title = self.context.title
@@ -126,10 +126,10 @@ def addable_conditions(self):
 
         info = []
         for element in utils.allAvailableConditions(rule.event):
-            info.append({'title': element.title,
-                         'description': element.description,
-                         'addview': element.addview,
-                        })
+            info.append({
+                'title': element.title,
+                'description': element.description,
+                'addview': element.addview})
 
         return info
 
@@ -138,10 +138,10 @@ def addable_actions(self):
 
         info = []
         for element in utils.allAvailableActions(rule.event):
-            info.append({'title': element.title,
-                         'description': element.description,
-                         'addview': element.addview,
-                        })
+            info.append({
+                'title': element.title,
+                'description': element.description,
+                'addview': element.addview})
 
         return info
 
@@ -157,20 +157,20 @@ def assignments(self):
         info = []
         if site_path in paths:
             paths.remove(site_path)
-            info.append({'url': site.absolute_url(),
-                         'title': site.title_or_id(),
-                         'description': site.Description(),
-                         'icon': plone_view.getIcon(site),
-                        })
+            info.append({
+                'url': site.absolute_url(),
+                'title': site.title_or_id(),
+                'description': site.Description(),
+                'icon': plone_view.getIcon(site)})
 
         catalog = getToolByName(rule, "portal_catalog")
         for a in catalog(path=dict(query=list(paths), depth=0),
                          sort_on='sortable_title'):
-            info.append({'url': a.getURL(),
-                         'title': a.Title or a.getId,
-                         'description': a.Description,
-                         'icon': plone_view.getIcon(a),
-                        })
+            info.append({
+                'url': a.getURL(),
+                'title': a.Title or a.getId,
+                'description': a.Description,
+                'icon': plone_view.getIcon(a)})
 
         return info
 
@@ -196,14 +196,14 @@ def _populate_info(self, elements, meta, namespace):
                 editview = '%s/++%s++%d/%s' % (base_url, namespace, idx,
                                                descriptor.editview, )
 
-            info.append({'title': descriptor.title,
-                         'description': descriptor.description,
-                         'summary': data.summary,
-                         'editview': editview,
-                         'first': (idx == 0),
-                         'last': (idx == last),
-                         'idx': idx,
-                        })
+            info.append({
+                'title': descriptor.title,
+                'description': descriptor.description,
+                'summary': data.summary,
+                'editview': editview,
+                'first': (idx == 0),
+                'last': (idx == last),
+                'idx': idx})
         return info
 
     def _move_up(self, elements, idx):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index c15c800..2030854 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -1,26 +1,21 @@
-from five.formlib import formbase
-from plone.app.form import named_template_adapter
-from plone.app.form.validators import null_validator
+from z3c.form import form, button
+from plone.z3cform import layout
 from zope.component import getMultiAdapter
 from zope.event import notify
-from zope.formlib import form
 from zope.interface import implements
 import zope.lifecycleevent
 
 from Acquisition import aq_parent, aq_inner
 from Products.Five.browser import BrowserView
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.interfaces import IContentRulesForm
 
-# Add a named template form, which allows us to carry some extra information
-# about the referer
-_template = ViewPageTemplateFile('templates/contentrules-pageform.pt')
-contentrules_named_template_adapter = named_template_adapter(_template)
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.autoform.form import AutoExtensibleForm
 
 
-class AddForm(formbase.AddFormBase):
+class AddForm(AutoExtensibleForm, form.AddForm):
     """A base add form for content rule.
 
     Use this for rule elements that require configuration before being added to
@@ -41,6 +36,12 @@ def create(self):
     """
 
     implements(IContentRulesForm)
+    ignoreContext = True
+
+    def updateActions(self):
+        super(AddForm, self).updateActions()
+        self.actions['save'].addClass("context")
+        self.actions['cancel'].addClass("standalone")
 
     def nextURL(self):
         rule = aq_parent(aq_inner(self.context))
@@ -49,14 +50,23 @@ def nextURL(self):
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
 
-    @form.action(_(u"label_save", default=u"Save"), name=u'save')
-    def handle_save_action(self, action, data):
-        self.createAndAdd(data)
+    def add(self, content):
+        self.context.add(content)
+
+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='save')
+    def handle_save_action(self, action):
+        data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        content = self.create(data)
+        self.add(content)
+        nextURL = self.nextURL()
+        if nextURL:
+            self.request.response.redirect(self.nextURL())
 
-    @form.action(_(u"label_cancel", default=u"Cancel"),
-                 validator=null_validator,
-                 name=u'cancel')
-    def handle_cancel_action(self, action, data):
+    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name='cancel')
+    def handle_cancel_action(self, action):
         nextURL = self.nextURL()
         if nextURL:
             self.request.response.redirect(self.nextURL())
@@ -91,31 +101,31 @@ def create(self):
         raise NotImplementedError("concrete classes must implement create()")
 
 
-class EditForm(formbase.EditFormBase):
+class EditForm(AutoExtensibleForm, form.EditForm):
     """An edit form for rule elements.
     """
 
     implements(IContentRulesForm)
 
-    @form.action(_(u"label_save", default=u"Save"),
-                 condition=form.haveInputWidgets,
-                 name=u'save')
-    def handle_save_action(self, action, data):
-        if form.applyChanges(self.context, self.form_fields, data, self.adapters):
-            notify(zope.lifecycleevent.ObjectModifiedEvent(self.context))
-            self.status = "Changes saved"
-        else:
-            self.status = "No changes"
-
+    def updateActions(self):
+        super(EditForm, self).updateActions()
+        self.actions['save'].addClass("context")
+        self.actions['cancel'].addClass("standalone")
+
+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='save')
+    def handle_save_action(self, action):
+        data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        self.applyChanges(data)
         nextURL = self.nextURL()
         if nextURL:
             self.request.response.redirect(self.nextURL())
         return ''
 
-    @form.action(_(u"label_cancel", default=u"Cancel"),
-                 validator=null_validator,
-                 name=u'cancel')
-    def handle_cancel_action(self, action, data):
+    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name='cancel')
+    def handle_cancel_action(self, action):
         nextURL = self.nextURL()
         if nextURL:
             self.request.response.redirect(self.nextURL())
@@ -128,3 +138,8 @@ def nextURL(self):
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
+
+
+class ContentRuleFormWrapper(layout.FormWrapper):
+
+    index = ViewPageTemplateFile('templates/contentrules-pageform.pt')
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py
index d1e18a4..d4ab91b 100644
--- a/plone/app/contentrules/browser/navigation.py
+++ b/plone/app/contentrules/browser/navigation.py
@@ -8,7 +8,9 @@ class RuleBreadcrumbs(PhysicalNavigationBreadcrumbs):
 
     def breadcrumbs(self):
         portal_url = getToolByName(self.context, 'portal_url')()
-        return ({'absolute_url': '%s/@@rules-controlpanel' % portal_url,
-                 'Title': PloneMessageFactory('title_manage_contentrules', default=u"Content rules")},
-                {'absolute_url': '%s/@@manage-elements' % self.context.absolute_url(),
-                 'Title': self.context.title or self.context.id})
+        return ({
+            'absolute_url': '%s/@@rules-controlpanel' % portal_url,
+            'Title': PloneMessageFactory('title_manage_contentrules', default=u"Content rules")
+        }, {
+            'absolute_url': '%s/@@manage-elements' % self.context.absolute_url(),
+            'Title': self.context.title or self.context.id})
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index 6903fbb..dac150b 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -1,47 +1,57 @@
 from plone.contentrules.rule.interfaces import IRuleConfiguration
 from zope.component import getMultiAdapter
-from zope.formlib import form
 
 from Acquisition import aq_parent, aq_inner
 
 from Products.CMFPlone.utils import base_hasattr
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+
+from z3c.form.form import applyChanges
 
 
 class RuleAddForm(AddForm):
     """An add form for rules.
     """
-    form_fields = form.FormFields(IRuleConfiguration)
+    schema = IRuleConfiguration
+    ignoreContext = True
     label = _(u"Add Rule")
     description = _(u"Add a new rule. Once complete, you can manage the "
-                     "rule's actions and conditions separately.")
-    form_name = _(u"Configure rule")
+                    "rule's actions and conditions separately.")
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-        if base_hasattr(self._parent, '_chosen_name'):
-            return '%s/++rule++%s/@@manage-elements' % (url, self._parent._chosen_name)
+        if base_hasattr(self.context, '_chosen_name'):
+            return '%s/++rule++%s/@@manage-elements' % (url, self.context._chosen_name)
         else:
             return '%s/@@rules-controlpanel' % url
 
     def create(self, data):
         rule = Rule()
-        form.applyChanges(rule, self.form_fields, data)
+        applyChanges(self, rule, data)
         return rule
 
 
+class RuleAddFormView(ContentRuleFormWrapper):
+    form = RuleAddForm
+
+
 class RuleEditForm(EditForm):
     """An edit form for rules.
     """
-    form_fields = form.FormFields(IRuleConfiguration)
+    schema = IRuleConfiguration
     label = _(u"Edit Rule")
     description = _(u"Edit an existing rule.")
-    form_name = _(u"Configure rule")
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
         url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
         return url + '/@@rules-controlpanel'
+
+
+class RuleEditFormView(ContentRuleFormWrapper):
+    form = RuleEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/browser/templates/contentrules-pageform.pt b/plone/app/contentrules/browser/templates/contentrules-pageform.pt
index 4ac62fa..1c19c15 100644
--- a/plone/app/contentrules/browser/templates/contentrules-pageform.pt
+++ b/plone/app/contentrules/browser/templates/contentrules-pageform.pt
@@ -9,7 +9,25 @@
 
 <div metal:fill-slot="prefs_configlet_main">
 
-  <div metal:use-macro="context/@@base-pageform.html/form" />
+    <a href=""
+       id="setup-link"
+       tal:attributes="href string:$portal_url/plone_control_panel"
+       i18n:translate="">
+        Site Setup
+    </a>
+
+    <h1 class="documentFirstHeading" tal:content="view/label">View Title</h1>
+
+    <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+      Portal status message
+    </div>
+
+
+    <div id="content-core">
+        <div id="layout-contents">
+            <span tal:replace="structure view/contents" />
+        </div>
+    </div>
 
 </div>
 </body>
diff --git a/plone/app/contentrules/browser/templates/controlpanel.pt b/plone/app/contentrules/browser/templates/controlpanel.pt
index d06319f..f928a03 100644
--- a/plone/app/contentrules/browser/templates/controlpanel.pt
+++ b/plone/app/contentrules/browser/templates/controlpanel.pt
@@ -183,7 +183,8 @@
             </table>
             </div>
             <a id="#addcontentrule" tal:attributes="href add_url"
-               class="pat-plone-modal plone-btn plone-btn-primary" i18n:translate="label_contentrule_add">Add content rule</a>
+               class="plone-btn plone-btn-primary"
+               i18n:translate="label_contentrule_add">Add content rule</a>
        </fieldset>
 </div>
 </body>
diff --git a/plone/app/contentrules/browser/templates/manage-assignments.pt b/plone/app/contentrules/browser/templates/manage-assignments.pt
index 5e42675..488262b 100644
--- a/plone/app/contentrules/browser/templates/manage-assignments.pt
+++ b/plone/app/contentrules/browser/templates/manage-assignments.pt
@@ -12,6 +12,9 @@
 <body>
 
 <metal:body fill-slot="body">
+      <link rel="stylesheet" type="text/css" media="all"
+          href="++resource++manage-contentrules.css"
+          tal:attributes="href string:${context/portal_url}/++resource++manage-contentrules.css" />
 
     <div tal:condition="not:view/globally_enabled"
          class="portalMessage info">
diff --git a/plone/app/contentrules/browser/templates/manage-elements.pt b/plone/app/contentrules/browser/templates/manage-elements.pt
index 7dd0169..49d5988 100644
--- a/plone/app/contentrules/browser/templates/manage-elements.pt
+++ b/plone/app/contentrules/browser/templates/manage-elements.pt
@@ -11,6 +11,10 @@
 <div metal:fill-slot="prefs_configlet_main"
      tal:define="auth_token context/@@authenticator/token">
 
+    <link rel="stylesheet" type="text/css" media="all"
+          href="++resource++manage-contentrules.css"
+          tal:attributes="href string:${context/portal_url}/++resource++manage-contentrules.css" />
+
     <script type="text/javascript" src="++resource++manage-contentrule-elements.js"
         tal:attributes="src string:${context/portal_url}/++resource++manage-contentrule-elements.js">
     </script>
@@ -32,71 +36,6 @@
         actions and conditions using the buttons below.
     </p>
 
-    <fieldset id="configure-rule">
-        <legend i18n:translate="">Configure rule</legend>
-        <form tal:attributes="action view/view_url" method="post">
-            <span tal:replace="structure context/@@authenticator/authenticator"></span>
-            <div class="field">
-                <label for="form.title" i18n:translate="label_title">Title</label>
-                <div class="formHelp" i18n:translate="description_contentrule_title">
-                    Please set a descriptive title for the rule.
-                </div>
-                <input id="form.title" type="text" width="50" name="title"
-                    tal:attributes="value request/ruleTitle | view/rule_title"/>
-            </div>
-            <div class="field">
-                <label for="form.description" i18n:translate="label_description">Description</label>
-                <div class="formHelp" i18n:translate="contentrules_description_description">
-                    Enter a short description of the rule and its purpose.
-                </div>
-                <textarea id="form.description"  name="description"
-                          tal:content="request/ruleDescription | view/rule_description ">
-                </textarea>
-            </div>
-
-            <div class="field">
-                <label i18n:translate="label_rule_event_trigger">
-                    Event trigger: <span i18n:name="trigger" tal:content="view/rule_event"></span>
-                </label>
-                <div class="formHelp" i18n:translate="contentrules_description_trigger">
-                    The rule will execute when the following event occurs.
-                </div>
-            </div>
-
-            <div class="field">
-                <input type="checkbox" id="stop" name="stopExecuting"
-                       tal:attributes="checked view/rule_stop"/>
-                <label for="stop" i18n:translate="contentrules_description_stop">
-                    Stop evaluating content rules after this rule completes
-                </label>
-            </div>
-
-            <div class="field">
-                <input type="checkbox" id="cascading" name="cascading"
-                       tal:attributes="checked view/rule_cascading"/>
-                <label for="cascading" i18n:translate="contentrules_description_cascading">
-                    The actions executed by this rule can trigger other rules
-                </label>
-            </div>
-
-            <div class="field">
-                <input type="checkbox" id="enabled" name="enabled"
-                       tal:attributes="checked view/rule_enabled"/>
-                <label for="enabled" i18n:translate="">
-                    Enabled
-                </label>
-            </div>
-
-            <div class="formControls">
-                <input class="context"
-                       type="submit"
-                       name="form.button.Save"
-                       value="Save"
-                       i18n:attributes="value label_save;" />
-            </div>
-        </form>
-    </fieldset>
-
     <fieldset id="configure-conditions" tal:define="conditions view/conditions">
         <legend i18n:translate="if_all_conditions_met">
             If all of the following conditions are met:
@@ -192,7 +131,7 @@
             <input type="hidden" name="element_id:int" tal:attributes="value action/idx" />
             <div class="rule-element">
                 <div class="rule-operations">
-                    <a tal:attributes="href string:${action/editview}" class="pat-plone-modal"
+                    <a tal:attributes="href string:${action/editview}?_authenticator=${auth_token}" class="pat-plone-modal"
                        tal:condition="action/editview">
                       <input type="submit"
                              name="form.button.EditAction"
@@ -255,7 +194,7 @@
 
     <tal:assignments define="assignments view/assignments">
 
-        <fieldset>
+        <fieldset id="manage-assignments">
           <legend i18n:translate="label_contentrules_rule_assignments">Assignments</legend>
           <tal:noassignments condition="not:assignments">
             <div class="portalMessage warning">
@@ -303,6 +242,71 @@
 
     </tal:assignments>
 
+    <fieldset id="configure-rule">
+        <legend i18n:translate="">Configure rule</legend>
+        <form tal:attributes="action view/view_url" method="post">
+            <span tal:replace="structure context/@@authenticator/authenticator"></span>
+            <div class="field">
+                <label for="form.title" i18n:translate="label_title">Title</label>
+                <div class="formHelp" i18n:translate="description_contentrule_title">
+                    Please set a descriptive title for the rule.
+                </div>
+                <input id="form.title" type="text" width="50" name="title"
+                    tal:attributes="value request/ruleTitle | view/rule_title"/>
+            </div>
+            <div class="field">
+                <label for="form.description" i18n:translate="label_description">Description</label>
+                <div class="formHelp" i18n:translate="contentrules_description_description">
+                    Enter a short description of the rule and its purpose.
+                </div>
+                <textarea id="form.description"  name="description"
+                          tal:content="request/ruleDescription | view/rule_description ">
+                </textarea>
+            </div>
+
+            <div class="field">
+                <label i18n:translate="label_rule_event_trigger">
+                    Event trigger: <span i18n:name="trigger" tal:content="view/rule_event"></span>
+                </label>
+                <div class="formHelp" i18n:translate="contentrules_description_trigger">
+                    The rule will execute when the following event occurs.
+                </div>
+            </div>
+
+            <div class="field">
+                <input type="checkbox" id="stop" name="stopExecuting"
+                       tal:attributes="checked view/rule_stop"/>
+                <label for="stop" i18n:translate="contentrules_description_stop">
+                    Stop evaluating content rules after this rule completes
+                </label>
+            </div>
+
+            <div class="field">
+                <input type="checkbox" id="cascading" name="cascading"
+                       tal:attributes="checked view/rule_cascading"/>
+                <label for="cascading" i18n:translate="contentrules_description_cascading">
+                    The actions executed by this rule can trigger other rules
+                </label>
+            </div>
+
+            <div class="field">
+                <input type="checkbox" id="enabled" name="enabled"
+                       tal:attributes="checked view/rule_enabled"/>
+                <label for="enabled" i18n:translate="">
+                    Enabled
+                </label>
+            </div>
+
+            <div class="formControls">
+                <input class="context"
+                       type="submit"
+                       name="form.button.Save"
+                       value="Save"
+                       i18n:attributes="value label_save;" />
+            </div>
+        </form>
+    </fieldset>
+
 </div>
 </body>
 </html>
diff --git a/plone/app/contentrules/conditions/configure.zcml b/plone/app/contentrules/conditions/configure.zcml
index 20302ce..1be89fc 100644
--- a/plone/app/contentrules/conditions/configure.zcml
+++ b/plone/app/contentrules/conditions/configure.zcml
@@ -16,14 +16,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.PortalType"
-      class=".portaltype.PortalTypeAddForm"
+      class=".portaltype.PortalTypeAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.portaltype.IPortalTypeCondition"
       name="edit"
-      class=".portaltype.PortalTypeEditForm"
+      class=".portaltype.PortalTypeEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -46,14 +46,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.FileExtension"
-      class=".fileextension.FileExtensionAddForm"
+      class=".fileextension.FileExtensionAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.fileextension.IFileExtensionCondition"
       name="edit"
-      class=".fileextension.FileExtensionEditForm"
+      class=".fileextension.FileExtensionEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -76,14 +76,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.WorkflowState"
-      class=".wfstate.WorkflowStateAddForm"
+      class=".wfstate.WorkflowStateAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.wfstate.IWorkflowStateCondition"
       name="edit"
-      class=".wfstate.WorkflowStateEditForm"
+      class=".wfstate.WorkflowStateEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -106,14 +106,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.WorkflowTransition"
-      class=".wftransition.WorkflowTransitionAddForm"
+      class=".wftransition.WorkflowTransitionAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.wftransition.IWorkflowTransitionCondition"
       name="edit"
-      class=".wftransition.WorkflowTransitionEditForm"
+      class=".wftransition.WorkflowTransitionEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -135,14 +135,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.Group"
-      class=".group.GroupAddForm"
+      class=".group.GroupAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.group.IGroupCondition"
       name="edit"
-      class=".group.GroupEditForm"
+      class=".group.GroupEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -164,14 +164,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.Role"
-      class=".role.RoleAddForm"
+      class=".role.RoleAddFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
     <browser:page
       for="plone.app.contentrules.conditions.role.IRoleCondition"
       name="edit"
-      class=".role.RoleEditForm"
+      class=".role.RoleEditFormView"
       permission="plone.app.contentrules.ManageContentRules"
       />
 
@@ -194,14 +194,14 @@
     <browser:page
       for="plone.app.contentrules.browser.interfaces.IRuleConditionAdding"
       name="plone.conditions.TalesExpression"
-      class=".talesexpression.TalesExpressionAddForm"
+      class=".talesexpression.TalesExpressionAddFormView"
       permission="cmf.ManagePortal"
       />
 
     <browser:page
       for=".talesexpression.ITalesExpressionCondition"
       name="edit"
-      class=".talesexpression.TalesExpressionEditForm"
+      class=".talesexpression.TalesExpressionEditFormView"
       permission="cmf.ManagePortal"
       />
 
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index 036e565..29e4856 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -12,6 +12,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IFileExtensionCondition(Interface):
@@ -21,8 +22,8 @@ class IFileExtensionCondition(Interface):
     """
 
     file_extension = schema.TextLine(title=_(u"File extension"),
-                                    description=_(u"The file extension to check for"),
-                                    required=True)
+                                     description=_(u"The file extension to check for"),
+                                     required=True)
 
 
 class FileExtensionCondition(SimpleItem):
@@ -73,25 +74,33 @@ def __call__(self):
 class FileExtensionAddForm(AddForm):
     """An add form for file extension rule conditions.
     """
-    form_fields = form.FormFields(IFileExtensionCondition)
+    schema = IFileExtensionCondition
     label = _(u"Add File Extension Condition")
     description = _(u"A file extension condition can restrict a rule from "
-        "executing unless the target is a File with a particular extension.")
+                    "executing unless the target is a File with a particular extension.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = FileExtensionCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class FileExtensionAddFormView(ContentRuleFormWrapper):
+    form = FileExtensionAddForm
+
+
 class FileExtensionEditForm(EditForm):
     """An edit form for portal type conditions
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IFileExtensionCondition)
+    schema = IFileExtensionCondition
     label = _(u"Edit File Extension Condition")
     description = _(u"A file extension condition can restrict a rule from "
-        "executing unless the target is a File with a particular extension.")
+                    "executing unless the target is a File with a particular extension.")
     form_name = _(u"Configure element")
+
+
+class FileExtensionEditFormView(ContentRuleFormWrapper):
+    form = FileExtensionEditForm
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index d16fc6d..310a56c 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IGroupCondition(Interface):
@@ -67,23 +68,30 @@ def __call__(self):
 class GroupAddForm(AddForm):
     """An add form for group rule conditions.
     """
-    form_fields = form.FormFields(IGroupCondition)
+    schema = IGroupCondition
     label = _(u"Add Group Condition")
     description = _(u"A group condition can prevent a rule from executing "
-        "unless the current user is a member of a particular group.")
+                    u"unless the current user is a member of a particular group.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = GroupCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
+class GroupAddFormView(ContentRuleFormWrapper):
+    form = GroupAddForm
+
 
 class GroupEditForm(EditForm):
     """An edit form for group conditions
     """
-    form_fields = form.FormFields(IGroupCondition)
+    schema = IGroupCondition
     label = _(u"Edit Group Condition")
     description = _(u"A group condition can prevent a rule from executing "
-        "unless the current user is a member of a particular group.")
+                    u"unless the current user is a member of a particular group.")
     form_name = _(u"Configure element")
+
+
+class GroupEditFormView(ContentRuleFormWrapper):
+    form = GroupAddForm
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index ef8a90b..48e388a 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 from zope.site.hooks import getSite
 from zope.i18n import translate
@@ -13,6 +13,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IPortalTypeCondition(Interface):
@@ -21,10 +22,11 @@ class IPortalTypeCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    check_types = schema.Set(title=_(u"Content type"),
-                              description=_(u"The content type to check for."),
-                              required=True,
-                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
+    check_types = schema.Set(
+        title=_(u"Content type"),
+        description=_(u"The content type to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
 
 
 class PortalTypeCondition(SimpleItem):
@@ -80,21 +82,29 @@ def __call__(self):
 class PortalTypeAddForm(AddForm):
     """An add form for portal type conditions.
     """
-    form_fields = form.FormFields(IPortalTypeCondition)
+    schema = IPortalTypeCondition
     label = _(u"Add Content Type Condition")
     description = _(u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = PortalTypeCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class PortalTypeAddFormView(ContentRuleFormWrapper):
+    form = PortalTypeAddForm
+
+
 class PortalTypeEditForm(EditForm):
     """An edit form for portal type conditions
     """
-    form_fields = form.FormFields(IPortalTypeCondition)
+    schema = IPortalTypeCondition
     label = _(u"Edit Content Type Condition")
     description = _(u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
+
+
+class PortalTypeEditFormView(ContentRuleFormWrapper):
+    form = PortalTypeEditForm
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index 5c4ab06..8fbaca4 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from Acquisition import aq_inner
@@ -10,6 +10,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IRoleCondition(Interface):
@@ -67,23 +68,31 @@ def __call__(self):
 class RoleAddForm(AddForm):
     """An add form for role rule conditions.
     """
-    form_fields = form.FormFields(IRoleCondition)
+    schema = IRoleCondition
     label = _(u"Add Role Condition")
     description = _(u"A role condition can prevent rules from executing unless "
-        "the current user has a particular role.")
+                    u"the current user has a particular role.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = RoleCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class RoleAddFormView(ContentRuleFormWrapper):
+    form = RoleAddForm
+
+
 class RoleEditForm(EditForm):
     """An edit form for role conditions
     """
-    form_fields = form.FormFields(IRoleCondition)
+    schema = IRoleCondition
     label = _(u"Add Role Condition")
     description = _(u"A role condition can prevent rules from executing unless "
-        "the current user has a particular role.")
+                    u"the current user has a particular role.")
     form_name = _(u"Configure element")
+
+
+class RoleEditFormView(ContentRuleFormWrapper):
+    form = RoleEditForm
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index a947ffc..e46ac04 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 from Products.CMFCore.Expression import Expression, createExprContext
 
@@ -19,10 +20,10 @@ class ITalesExpressionCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    tales_expression = schema.TextLine(title=_(u"TALES expression"),
-                              description=_(u"The TALES expression to check."),
-                              required=True,
-                              )
+    tales_expression = schema.TextLine(
+        title=_(u"TALES expression"),
+        description=_(u"The TALES expression to check."),
+        required=True)
 
 
 class TalesExpressionCondition(SimpleItem):
@@ -66,23 +67,31 @@ def __call__(self):
 class TalesExpressionAddForm(AddForm):
     """An add form for tales expression condition.
     """
-    form_fields = form.FormFields(ITalesExpressionCondition)
+    schema = ITalesExpressionCondition
     label = _(u"Add TALES Expression Condition")
     description = _(u"A TALES expression condition makes the rule apply "
-                     "only if TALES expression is not False in context.")
+                    u"only if TALES expression is not False in context.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = TalesExpressionCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class TalesExpressionAddFormView(ContentRuleFormWrapper):
+    form = TalesExpressionAddForm
+
+
 class TalesExpressionEditForm(EditForm):
     """An edit form for TALES expression condition
     """
-    form_fields = form.FormFields(ITalesExpressionCondition)
+    schema = ITalesExpressionCondition
     label = _(u"Edit TALES Expression Condition")
     description = _(u"A TALES expression condition makes the rule apply "
-                     "only if TALES expression is not False in context.")
+                    u"only if TALES expression is not False in context.")
     form_name = _(u"Configure element")
+
+
+class TalesExpressionEditFormView(ContentRuleFormWrapper):
+    form = TalesExpressionEditForm
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index 9487356..1538d8a 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from zope.interface import implements, Interface
-from zope.formlib import form
+from z3c.form import form
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
 from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IWorkflowStateCondition(Interface):
@@ -17,10 +18,11 @@ class IWorkflowStateCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    wf_states = schema.Set(title=_(u"Workflow state"),
-                           description=_(u"The workflow states to check for."),
-                           required=True,
-                           value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
+    wf_states = schema.Set(
+        title=_(u"Workflow state"),
+        description=_(u"The workflow states to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
 
 
 class WorkflowStateCondition(SimpleItem):
@@ -60,25 +62,33 @@ def __call__(self):
 class WorkflowStateAddForm(AddForm):
     """An add form for workflow state conditions.
     """
-    form_fields = form.FormFields(IWorkflowStateCondition)
+    schema = IWorkflowStateCondition
     label = _(u"Add Workflow State Condition")
     description = _(u"A workflow state condition can restrict rules to "
-        "objects in particular workflow states")
+                    u"objects in particular workflow states")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = WorkflowStateCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class WorkflowStateAddFormView(ContentRuleFormWrapper):
+    form = WorkflowStateAddForm
+
+
 class WorkflowStateEditForm(EditForm):
     """An edit form for portal type conditions
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IWorkflowStateCondition)
+    schema = IWorkflowStateCondition
     label = _(u"Edit Workflow State Condition")
     description = _(u"A workflow state condition can restrict rules to "
-        "objects in particular workflow states")
+                    u"objects in particular workflow states")
     form_name = _(u"Configure element")
+
+
+class WorkflowStateEditFormView(ContentRuleFormWrapper):
+    form = WorkflowStateEditForm
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index e3f377c..a0b95d7 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.formlib import form
+from z3c.form import form
 from zope.interface import implements, Interface
 from zope import schema
 
@@ -9,6 +9,7 @@
 
 from plone.app.contentrules import PloneMessageFactory as _
 from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IWorkflowTransitionCondition(Interface):
@@ -17,10 +18,11 @@ class IWorkflowTransitionCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    wf_transitions = schema.Set(title=_(u"Workflow transition"),
-                           description=_(u"The workflow transitions to check for."),
-                           required=True,
-                           value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
+    wf_transitions = schema.Set(
+        title=_(u"Workflow transition"),
+        description=_(u"The workflow transitions to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
 
 
 class WorkflowTransitionCondition(SimpleItem):
@@ -33,7 +35,8 @@ class WorkflowTransitionCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"Workflow transitions are: ${transitions}", mapping=dict(transitions=", ".join(self.wf_transitions)))
+        return _(u"Workflow transitions are: ${transitions}",
+                 mapping=dict(transitions=", ".join(self.wf_transitions)))
 
 
 class WorkflowTransitionConditionExecutor(object):
@@ -54,25 +57,33 @@ def __call__(self):
 class WorkflowTransitionAddForm(AddForm):
     """An add form for workflow transition conditions.
     """
-    form_fields = form.FormFields(IWorkflowTransitionCondition)
+    schema = IWorkflowTransitionCondition
     label = _(u"Add Workflow Transition Condition")
     description = _(u"A workflow transition condition can restrict rules to "
-        "execute only after a certain transition.")
+                    u"execute only after a certain transition.")
     form_name = _(u"Configure element")
 
     def create(self, data):
         c = WorkflowTransitionCondition()
-        form.applyChanges(c, self.form_fields, data)
+        form.applyChanges(self, c, data)
         return c
 
 
+class WorkflowTransitionAddFormView(ContentRuleFormWrapper):
+    form = WorkflowTransitionAddForm
+
+
 class WorkflowTransitionEditForm(EditForm):
     """An edit form for portal type conditions
 
     Formlib does all the magic here.
     """
-    form_fields = form.FormFields(IWorkflowTransitionCondition)
+    schema = IWorkflowTransitionCondition
     label = _(u"Edit Workflow Transition Condition")
     description = _(u"A workflow transition condition can restrict rules to "
-        "execute only after a certain transition.")
+                    u"execute only after a certain transition.")
     form_name = _(u"Configure element")
+
+
+class WorkflowTransitionEditFormView(ContentRuleFormWrapper):
+    form = WorkflowTransitionEditForm
\ No newline at end of file
diff --git a/plone/app/contentrules/tests/assignment.txt b/plone/app/contentrules/tests/assignment.txt
index 08f1175..2b50649 100644
--- a/plone/app/contentrules/tests/assignment.txt
+++ b/plone/app/contentrules/tests/assignment.txt
@@ -52,11 +52,9 @@ Now comes the action, we want all news items to be copied into the
 
   >>> browser.getControl('Add action').value = ['plone.actions.Copy']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.target_folder.query') # XXX fix label
-  >>> ctrl.value = '/news'
-  >>> browser.getControl('Search', index=2).click()
-  >>> ctrl = browser.getControl(name='form.target_folder') # XXX fix label
-  >>> ctrl.value = ['/news']
+  >>> ctrl = browser.getControl(name='form.widgets.target_folder')
+  >>> from plone.uuid.interfaces import IUUID
+  >>> ctrl.value = IUUID(portal.news)
   >>> browser.getControl('Save').click()
 
 A second rule will be added to notify users when a content is added.
@@ -72,7 +70,7 @@ A second rule will be added to notify users when a content is added.
   >>> browser.open('http://nohost/plone/++rule++rule-2/@@manage-elements')
   >>> browser.getControl('Add action').value = ['plone.actions.Notify']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.message')
+  >>> ctrl = browser.getControl(name='form.widgets.message')
   >>> ctrl.value = 'Content added'
   >>> browser.getControl('Save').click()
 
diff --git a/plone/app/contentrules/tests/multipublish.txt b/plone/app/contentrules/tests/multipublish.txt
index df63c57..36d3144 100644
--- a/plone/app/contentrules/tests/multipublish.txt
+++ b/plone/app/contentrules/tests/multipublish.txt
@@ -48,11 +48,9 @@ Now comes the action, we want all news items to be moved into the
 
   >>> browser.getControl('Add action').value = ['plone.actions.Move']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.target_folder.query') # XXX fix label
-  >>> ctrl.value = '/news'
-  >>> browser.getControl('Search', index=2).click()
-  >>> ctrl = browser.getControl(name='form.target_folder') # XXX fix label
-  >>> ctrl.value = ['/news']
+  >>> ctrl = browser.getControl(name='form.widgets.target_folder')
+  >>> from plone.uuid.interfaces import IUUID
+  >>> ctrl.value = IUUID(portal.news)
   >>> browser.getControl('Save').click()
 
 We're done with setting up the content rule.  We need to now apply the
diff --git a/plone/app/contentrules/tests/simplepublish.txt b/plone/app/contentrules/tests/simplepublish.txt
index d008f2d..60e475c 100644
--- a/plone/app/contentrules/tests/simplepublish.txt
+++ b/plone/app/contentrules/tests/simplepublish.txt
@@ -50,11 +50,9 @@ Now comes the action, we want all news items to be copied into the
 
   >>> browser.getControl('Add action').value = ['plone.actions.Copy']
   >>> browser.getControl('Add', index=3).click()
-  >>> ctrl = browser.getControl(name='form.target_folder.query') # XXX fix label
-  >>> ctrl.value = '/news'
-  >>> browser.getControl('Search', index=2).click()
-  >>> ctrl = browser.getControl(name='form.target_folder') # XXX fix label
-  >>> ctrl.value = ['/news']
+  >>> ctrl = browser.getControl(name='form.widgets.target_folder')
+  >>> from plone.uuid.interfaces import IUUID
+  >>> ctrl.value = IUUID(portal.news)
   >>> browser.getControl('Save').click()
 
 We're done with setting up the content rule.  We need to now apply the
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index d802e97..38c0c74 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.copy import CopyAction
-from plone.app.contentrules.actions.copy import CopyEditForm
+from plone.app.contentrules.actions.copy import CopyEditFormView
 
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
@@ -47,7 +47,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'target_folder': '/target', })
+        addview.form_instance.update()
+        action = addview.form_instance.create(data={'target_folder': '/target', })
+        addview.form_instance.add(action)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, CopyAction))
@@ -57,7 +59,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Copy')
         e = CopyAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, CopyEditForm))
+        self.assertTrue(isinstance(editview, CopyEditFormView))
 
     def testExecute(self):
         e = CopyAction()
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 4fd4631..8695df7 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -7,7 +7,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.logger import LoggerAction
-from plone.app.contentrules.actions.logger import LoggerEditForm
+from plone.app.contentrules.actions.logger import LoggerEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -48,7 +48,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, LoggerAction))
@@ -60,7 +62,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Logger')
         e = LoggerAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, LoggerEditForm))
+        self.assertTrue(isinstance(editview, LoggerEditFormView))
 
     def testProcessedMessage(self):
         e = LoggerAction()
@@ -72,11 +74,12 @@ def testProcessedMessage(self):
 
         e.message = "Test log event : &c"
         self.assertEqual("Test log event : <ATFolder at /plone/Members/%s>" % TEST_USER_ID,
-                          ex.processedMessage())
+                         ex.processedMessage())
 
         e.message = "Test log event : &e"
-        self.assertEqual("Test log event : plone.app.contentrules.tests.test_action_logger.DummyObjectEvent",
-                          ex.processedMessage())
+        self.assertEqual(
+            "Test log event : plone.app.contentrules.tests.test_action_logger.DummyObjectEvent",
+            ex.processedMessage())
 
         e.message = "Test log event : &u"
         self.assertEqual("Test log event : %s" % TEST_USER_NAME, ex.processedMessage())
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index f18487b..3138d6a 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -7,7 +7,7 @@
 
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.contentrules.actions.mail import MailAction, MailEditForm, MailAddForm
+from plone.app.contentrules.actions.mail import MailAction, MailEditFormView, MailAddFormView
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.rule.interfaces import IRuleAction, IExecutable
 from plone.registry.interfaces import IRegistry
@@ -47,10 +47,10 @@ def afterSetUp(self):
                                   title='W\xc3\xa4lkommen'.decode('utf-8'))
 
         users = (
-        ('userone', 'User One', 'user@one.com', ('Manager', 'Member')),
-        ('usertwo', 'User Two', 'user@two.com', ('Reviewer', 'Member')),
-        ('userthree', 'User Three', 'user@three.com', ('Owner', 'Member')),
-        ('userfour', 'User Four', 'user@four.com', ('Member', )),
+            ('userone', 'User One', 'user@one.com', ('Manager', 'Member')),
+            ('usertwo', 'User Two', 'user@two.com', ('Reviewer', 'Member')),
+            ('userthree', 'User Three', 'user@three.com', ('Owner', 'Member')),
+            ('userfour', 'User Four', 'user@four.com', ('Member', )),
         )
         for id, fname, email, roles in users:
             self.portal.portal_membership.addMember(id, 'secret', roles, [])
@@ -72,12 +72,14 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST),
                                   name=element.addview)
-        self.assertTrue(isinstance(addview, MailAddForm))
+        self.assertTrue(isinstance(addview, MailAddFormView))
 
-        addview.createAndAdd(data={'subject': 'My Subject',
-                                   'source': 'foo@bar.be',
-                                   'recipients': 'foo@bar.be,bar@foo.be',
-                                   'message': 'Hey, Oh!'})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'subject': 'My Subject',
+                                                     'source': 'foo@bar.be',
+                                                     'recipients': 'foo@bar.be,bar@foo.be',
+                                                     'message': 'Hey, Oh!'})
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, MailAction))
@@ -91,11 +93,12 @@ def testInvokeEditView(self):
         e = MailAction()
         editview = getMultiAdapter((e, self.folder.REQUEST),
                                    name=element.editview)
-        self.assertTrue(isinstance(editview, MailEditForm))
+        self.assertTrue(isinstance(editview, MailEditFormView))
 
     def testExecute(self):
         self.loginAsPortalOwner()
-        self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+        self.portal.portal_membership.getAuthenticatedMember().setProperties(
+            email='currentuser@foobar.com')
         sm = getSiteManager(self.portal)
         sm.unregisterUtility(provided=IMailHost)
         dummyMailHost = DummyMailHost('dMailhost')
@@ -113,11 +116,12 @@ def testExecute(self):
 
         mailSent = sent_mails['bar@foo.be']
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual("currentuser@foobar.com", mailSent.get('From'))
         # The output message should be a utf-8 encoded string
-        self.assertEqual("P\xc3\xa4ge 'W\xc3\xa4lkommen' created in http://nohost/plone/Members/test_user_1_/d1 !",
-                         mailSent.get_payload(decode=True))
+        self.assertEqual(
+            "P\xc3\xa4ge 'W\xc3\xa4lkommen' created in http://nohost/plone/Members/test_user_1_/d1 !",  # noqa
+            mailSent.get_payload(decode=True))
 
         # check interpolation of $reviewer_emails
         self.assertTrue("user@two.com" in sent_mails)
@@ -126,8 +130,9 @@ def testExecute(self):
         self.assertTrue("user@one.com" in sent_mails)
 
         # check interpolation of $member_emails
-        self.assertEqual(set(["bar@foo.be", "user@one.com", "user@two.com", "user@three.com", "user@four.com", ]),
-                         set(sent_mails.keys()))
+        self.assertEqual(
+            set(["bar@foo.be", "user@one.com", "user@two.com", "user@three.com", "user@four.com", ]),  # noqa
+            set(sent_mails.keys()))
 
     def testExecuteNoSource(self):
         self.loginAsPortalOwner()
@@ -153,7 +158,7 @@ def testExecuteNoSource(self):
         self.assertTrue(isinstance(dummyMailHost.sent[0], Message))
         mailSent = dummyMailHost.sent[0]
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual("bar@foo.be", mailSent.get('To'))
         self.assertEqual('"plone@rulez" <manager@portal.be>',
                          mailSent.get('From'))
@@ -177,13 +182,13 @@ def testExecuteMultiRecipients(self):
         self.assertTrue(isinstance(dummyMailHost.sent[0], Message))
         mailSent = dummyMailHost.sent[0]
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual('bar@foo.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
         self.assertEqual('Document created !', mailSent.get_payload(decode=True))
         mailSent = dummyMailHost.sent[1]
         self.assertEqual('text/plain; charset="utf-8"',
-                        mailSent.get('Content-Type'))
+                         mailSent.get('Content-Type'))
         self.assertEqual('foo@bar.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
         self.assertEqual('Document created !', mailSent.get_payload(decode=True))
@@ -194,7 +199,8 @@ def testExecuteExcludeActor(self):
         sm.unregisterUtility(provided=IMailHost)
         dummyMailHost = DummyMailHost('dMailhost')
         sm.registerUtility(dummyMailHost, IMailHost)
-        self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+        self.portal.portal_membership.getAuthenticatedMember().setProperties(
+            email='currentuser@foobar.com')
         e = MailAction()
         e.source = "$user_email"
         e.exclude_actor = True
@@ -228,7 +234,8 @@ def testExecuteNoRecipients(self):
     def testExecuteBadMailHost(self):
         # Our goal is that mailing errors should not cause exceptions
         self.loginAsPortalOwner()
-        self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+        self.portal.portal_membership.getAuthenticatedMember().setProperties(
+            email='currentuser@foobar.com')
         e = MailAction()
         e.source = "$user_email"
         e.recipients = "bar@foo.be, $reviewer_emails, $manager_emails, $member_emails"
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index b5a9c60..1543a85 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.move import MoveAction
-from plone.app.contentrules.actions.move import MoveEditForm
+from plone.app.contentrules.actions.move import MoveEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -48,7 +48,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'target_folder': '/target', })
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'target_folder': '/target', })
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, MoveAction))
@@ -58,7 +60,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Move')
         e = MoveAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, MoveEditForm))
+        self.assertTrue(isinstance(editview, MoveEditFormView))
 
     def testExecute(self):
         e = MoveAction()
@@ -120,7 +122,8 @@ def testExecuteWithSameSourceAndTargetFolder(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.portal.target, e, DummyEvent(self.portal.target.d1)), IExecutable)
+        ex = getMultiAdapter((self.portal.target, e, DummyEvent(self.portal.target.d1)),
+                             IExecutable)
         self.assertEqual(True, ex())
 
         self.assertEqual(['d1'], list(self.portal.target.objectIds()))
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index f73a38c..d92ed54 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.notify import NotifyAction
-from plone.app.contentrules.actions.notify import NotifyEditForm
+from plone.app.contentrules.actions.notify import NotifyEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -42,7 +42,10 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.request), name='+action')
         addview = getMultiAdapter((adding, self.request), name=element.addview)
 
-        addview.createAndAdd(data={'message': 'Hello world', 'message_type': 'info'})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'message': 'Hello world',
+                                                     'message_type': 'info'})
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, NotifyAction))
@@ -53,7 +56,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Notify')
         e = NotifyAction()
         editview = getMultiAdapter((e, self.request), name=element.editview)
-        self.assertTrue(isinstance(editview, NotifyEditForm))
+        self.assertTrue(isinstance(editview, NotifyEditFormView))
 
     def testExecute(self):
         e = NotifyAction()
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index e55b3c8..c3d4b37 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -6,7 +6,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.actions.workflow import WorkflowAction
-from plone.app.contentrules.actions.workflow import WorkflowEditForm
+from plone.app.contentrules.actions.workflow import WorkflowEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -44,7 +44,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'transition': 'publish', })
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'transition': 'publish', })
+        addview.form_instance.add(content)
 
         e = rule.actions[0]
         self.assertTrue(isinstance(e, WorkflowAction))
@@ -54,7 +56,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Workflow')
         e = WorkflowAction()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, WorkflowEditForm))
+        self.assertTrue(isinstance(editview, WorkflowEditFormView))
 
     def testExecute(self):
         e = WorkflowAction()
@@ -63,7 +65,8 @@ def testExecute(self):
         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
-        self.assertEqual('published', self.portal.portal_workflow.getInfoFor(self.folder.d1, 'review_state'))
+        self.assertEqual('published', self.portal.portal_workflow.getInfoFor(self.folder.d1,
+                         'review_state'))
 
     def testExecuteWithError(self):
         e = WorkflowAction()
@@ -74,4 +77,5 @@ def testExecuteWithError(self):
         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
-        self.assertEqual(old_state, self.portal.portal_workflow.getInfoFor(self.folder.d1, 'review_state'))
+        self.assertEqual(old_state, self.portal.portal_workflow.getInfoFor(self.folder.d1,
+                         'review_state'))
diff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py
index 4e050a0..e48da57 100644
--- a/plone/app/contentrules/tests/test_cascading_rule.py
+++ b/plone/app/contentrules/tests/test_cascading_rule.py
@@ -38,4 +38,4 @@ def test_cascading_rule(self):
 
         wtool = self.portal.portal_workflow
         self.assertEqual(wtool.getInfoFor(self.portal.events['my-event'], 'review_state'),
-                        'published')
+                         'published')
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index 8fbe0fd..dab6c7c 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.group import GroupCondition
-from plone.app.contentrules.conditions.group import GroupEditForm
+from plone.app.contentrules.conditions.group import GroupEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,7 +43,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'group_names': ['Manager']})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'group_names': ['Manager']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, GroupCondition))
@@ -53,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Group')
         e = GroupCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, GroupEditForm))
+        self.assertTrue(isinstance(editview, GroupEditFormView))
 
     def testExecute(self):
         e = GroupCondition()
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index de5fa3b..8c89d19 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.portaltype import PortalTypeCondition
-from plone.app.contentrules.conditions.portaltype import PortalTypeEditForm
+from plone.app.contentrules.conditions.portaltype import PortalTypeEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,7 +43,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'check_types': ['Folder', 'Image']})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'check_types': ['Folder', 'Image']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, PortalTypeCondition))
@@ -53,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
         e = PortalTypeCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, PortalTypeEditForm))
+        self.assertTrue(isinstance(editview, PortalTypeEditFormView))
 
     def testExecute(self):
         e = PortalTypeCondition()
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 7343976..22b4f98 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.role import RoleCondition
-from plone.app.contentrules.conditions.role import RoleEditForm
+from plone.app.contentrules.conditions.role import RoleEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,7 +43,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'role_names': ['Manager', 'Member']})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'role_names': ['Manager', 'Member']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, RoleCondition))
@@ -53,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Role')
         e = RoleCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, RoleEditForm))
+        self.assertTrue(isinstance(editview, RoleEditFormView))
 
     def testExecute(self):
         e = RoleCondition()
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index c04fb83..8e08141 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.talesexpression import TalesExpressionCondition
-from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditForm
+from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -42,7 +42,10 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'tales_expression': 'python:"plone" in object.Subject()'})
+        addview.form_instance.update()
+        content = addview.form_instance.create(
+            data={'tales_expression': 'python:"plone" in object.Subject()'})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, TalesExpressionCondition))
@@ -52,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
         e = TalesExpressionCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, TalesExpressionEditForm))
+        self.assertTrue(isinstance(editview, TalesExpressionEditFormView))
 
     def testExecute(self):
         e = TalesExpressionCondition()
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index b70bb57..1e9e26c 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.wfstate import WorkflowStateCondition
-from plone.app.contentrules.conditions.wfstate import WorkflowStateEditForm
+from plone.app.contentrules.conditions.wfstate import WorkflowStateEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -43,7 +43,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'wf_states': ['visible', 'published']})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'wf_states': ['visible', 'published']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, WorkflowStateCondition))
@@ -53,7 +55,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
         e = WorkflowStateCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, WorkflowStateEditForm))
+        self.assertTrue(isinstance(editview, WorkflowStateEditFormView))
 
     def testExecute(self):
         e = WorkflowStateCondition()
diff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py
index e7ed2f9..78e0f26 100644
--- a/plone/app/contentrules/tests/test_condition_wftransition.py
+++ b/plone/app/contentrules/tests/test_condition_wftransition.py
@@ -5,7 +5,7 @@
 from plone.contentrules.rule.interfaces import IExecutable
 
 from plone.app.contentrules.conditions.wftransition import WorkflowTransitionCondition
-from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditForm
+from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditFormView
 
 from plone.app.contentrules.rule import Rule
 
@@ -36,7 +36,9 @@ def testInvokeAddView(self):
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
         addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
 
-        addview.createAndAdd(data={'wf_transitions': ['publish', 'hide']})
+        addview.form_instance.update()
+        content = addview.form_instance.create(data={'wf_transitions': ['publish', 'hide']})
+        addview.form_instance.add(content)
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, WorkflowTransitionCondition))
@@ -46,7 +48,7 @@ def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
         e = WorkflowTransitionCondition()
         editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
-        self.assertTrue(isinstance(editview, WorkflowTransitionEditForm))
+        self.assertTrue(isinstance(editview, WorkflowTransitionEditFormView))
 
     def testExecute(self):
         e = WorkflowTransitionCondition()
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index 5df6cc1..3801f3b 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -4,7 +4,7 @@
 from plone.contentrules.engine.interfaces import IRuleStorage
 
 from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.browser.rule import RuleEditForm
+from plone.app.contentrules.browser.rule import RuleEditFormView
 
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
@@ -38,14 +38,16 @@ def testRuleAddView(self):
         addview = getMultiAdapter((adding, self.portal.REQUEST), name='plone.ContentRule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
-        addview.createAndAdd({'title': 'foo', 'description': 'bar', 'event': None})
+        addview.form_instance.update()
+        content = addview.form_instance.create({'title': 'foo', 'description': 'bar', 'event': None})  # noqa
+        addview.form_instance.add(content)
         self.assertEqual(1, len(storage))
         self.assertEqual('foo', storage.values()[0].title)
 
     def testRuleEditView(self):
         r = Rule()
         editview = getMultiAdapter((r, self.portal.REQUEST), name='edit')
-        self.assertTrue(isinstance(editview, RuleEditForm))
+        self.assertTrue(isinstance(editview, RuleEditFormView))
 
 
 class TestRuleElementManagementViews(ContentRulesTestCase):
@@ -100,9 +102,9 @@ def testRulesControlPanel(self):
         self.assertEqual(1, len(registered_rules))
         registered_rule = registered_rules[0]
         self.assertEqual(registered_rule['row_class'],
-                          'trigger-iobjectmodifiedevent state-enabled assignment-unassigned')
+                         'trigger-iobjectmodifiedevent state-enabled assignment-unassigned')
         self.assertEqual(registered_rule['trigger'],
-                          'Object modified')
+                         'Object modified')
         self.assertTrue(registered_rule['enabled'])
         self.assertFalse(registered_rule['assigned'])
 
@@ -127,7 +129,7 @@ def testRulesControlPanel(self):
         registered_rules = controlpanel.registeredRules()
         self.assertTrue(registered_rules[0]['enabled'])
 
-        #works without ajax
+        # works without ajax
         portal.REQUEST.form['rule-id'] = 'foo'
         portal.REQUEST.form['form.button.DisableRule'] = '1'
         portal.restrictedTraverse('@@rules-controlpanel')()
diff --git a/setup.py b/setup.py
index 3080587..59bb013 100644
--- a/setup.py
+++ b/setup.py
@@ -5,8 +5,7 @@
 setup(name='plone.app.contentrules',
       version=version,
       description="Plone integration for plone.contentrules",
-      long_description=open("README.rst").read() + "\n\n" +
-                       open("CHANGES.rst").read(),
+      long_description=open("README.rst").read() + "\n\n" + open("CHANGES.rst").read(),
       classifiers=[
           "Environment :: Web Environment",
           "Framework :: Plone",
@@ -16,46 +15,45 @@
           "Operating System :: OS Independent",
           "Programming Language :: Python",
           "Programming Language :: Python :: 2.7",
-        ],
+      ],
       keywords='',
       author='Plone Foundation',
       author_email='plone-developers@lists.sourceforge.net',
       url='http://pypi.python.org/pypi/plone.app.contentrules',
       license='GPL version 2',
       packages=find_packages(exclude=['ez_setup']),
-      namespace_packages = ['plone', 'plone.app'],
+      namespace_packages=['plone', 'plone.app'],
       include_package_data=True,
       zip_safe=False,
       extras_require={'test': 'plone.app.testing'},
       install_requires=[
-        'setuptools',
-        'five.formlib',
-        'plone.contentrules',
-        'plone.memoize',
-        'plone.stringinterp',
-        'plone.uuid',
-        'plone.app.form',
-        'plone.app.vocabularies',
-        'transaction',
-        'zope.annotation',
-        'zope.browser',
-        'zope.component',
-        'zope.container',
-        'zope.event',
-        'zope.formlib',
-        'zope.i18nmessageid',
-        'zope.interface',
-        'zope.lifecycleevent',
-        'zope.publisher >= 3.11.0',
-        'zope.schema',
-        'zope.site',
-        'zope.traversing',
-        'Acquisition',
-        'Products.CMFPlone',
-        'Products.CMFCore',
-        'Products.GenericSetup',
-        'Products.statusmessages',
-        'ZODB3',
-        'Zope2 >= 2.12.3',
+          'setuptools',
+          'plone.contentrules',
+          'plone.memoize',
+          'plone.stringinterp',
+          'plone.uuid',
+          'plone.autoform',
+          'plone.app.z3cform',
+          'plone.app.vocabularies',
+          'transaction',
+          'zope.annotation',
+          'zope.browser',
+          'zope.component',
+          'zope.container',
+          'zope.event',
+          'zope.i18nmessageid',
+          'zope.interface',
+          'zope.lifecycleevent',
+          'zope.publisher >= 3.11.0',
+          'zope.schema',
+          'zope.site',
+          'zope.traversing',
+          'Acquisition',
+          'Products.CMFPlone',
+          'Products.CMFCore',
+          'Products.GenericSetup',
+          'Products.statusmessages',
+          'ZODB3',
+          'Zope2 >= 2.12.3',
       ],
       )


