Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2015-09-18T11:46:24+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.Archetypes/commit/2f82070a4f7f33bde2c78e826db37b5a495261c4

Pull types_link_to_folder_contents values from the configuration registry.

Files changed:
M CHANGES.txt
M Products/Archetypes/Extensions/utils.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 5516afc..68adaef 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,9 @@ Changelog
 1.10.10 (unreleased)
 --------------------
 
+- Pull types_link_to_folder_contents values from the configuration registry.
+  [esteele]
+
 - Set calendar_starting_year and calendar_future_years_available in registry.
   See https://github.com/plone/Products.CMFPlone/issues/872
   [pbauer]
diff --git a/Products/Archetypes/Extensions/utils.py b/Products/Archetypes/Extensions/utils.py
index dc5d535..9cf562a 100644
--- a/Products/Archetypes/Extensions/utils.py
+++ b/Products/Archetypes/Extensions/utils.py
@@ -3,10 +3,13 @@
 
 from App.Common import package_home
 from OFS.ObjectManager import BadRequestException
+from zope.component import getUtility
 from Products.CMFCore.ActionInformation import ActionInformation
 from Products.CMFCore.DirectoryView import addDirectoryViews, \
      registerDirectory, manage_listAvailableDirectories
 from Products.CMFCore.utils import getToolByName, getPackageName
+from Products.CMFPlone.interfaces import ITypesSchema
+from plone.registry.interfaces import IRegistry
 from Products.Archetypes.config import REFERENCE_CATALOG
 from Products.Archetypes.ArchetypeTool import fixActionsForType
 from Products.Archetypes.ArchetypeTool import listTypes
@@ -148,15 +151,25 @@ def install_types(self, out, types, package_name):
         sp = getattr(pt, 'site_properties', None)
         if sp is None:
             return None
-        props = ('use_folder_tabs', 'typesLinkToFolderContentsInFC')
-        for prop in props:
-            folders = sp.getProperty(prop, None)
-            if folders is None:
-                continue
-            folders = list(folders)
-            folders.extend(folderish)
-            folders = tuple(dict(zip(folders, folders)).keys())
-            sp._updateProperty(prop, folders)
+
+        folders = sp.getProperty('use_folder_tabs', None)
+        if folders is None:
+            continue
+        folders = list(folders)
+        folders.extend(folderish)
+        folders = tuple(dict(zip(folders, folders)).keys())
+        sp._updateProperty('use_folder_tabs', folders)
+
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITypesSchema, prefix="plone")
+        folders = settings.types_link_to_folder_contents
+        if folders is None:
+            continue
+        folders = list(folders)
+        folders.extend(folderish)
+        folders = tuple(dict(zip(folders, folders)).keys())
+        settings.types_link_to_folder_contents = folders
+
 
 
 def _getFtiAndDataFor(tool, typename, klassname, package_name):


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2015-09-19T16:37:43+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.Archetypes/commit/ad5939ad64ccb219cb8fdb68cd3a23cce815c1e5

Fix bad logic

Files changed:
M Products/Archetypes/Extensions/utils.py

diff --git a/Products/Archetypes/Extensions/utils.py b/Products/Archetypes/Extensions/utils.py
index 9cf562a..b49dd12 100644
--- a/Products/Archetypes/Extensions/utils.py
+++ b/Products/Archetypes/Extensions/utils.py
@@ -153,22 +153,20 @@ def install_types(self, out, types, package_name):
             return None
 
         folders = sp.getProperty('use_folder_tabs', None)
-        if folders is None:
-            continue
-        folders = list(folders)
-        folders.extend(folderish)
-        folders = tuple(dict(zip(folders, folders)).keys())
-        sp._updateProperty('use_folder_tabs', folders)
+        if folders is not None:
+            folders = list(folders)
+            folders.extend(folderish)
+            folders = tuple(dict(zip(folders, folders)).keys())
+            sp._updateProperty('use_folder_tabs', folders)
 
         registry = getUtility(IRegistry)
         settings = registry.forInterface(ITypesSchema, prefix="plone")
         folders = settings.types_link_to_folder_contents
-        if folders is None:
-            continue
-        folders = list(folders)
-        folders.extend(folderish)
-        folders = tuple(dict(zip(folders, folders)).keys())
-        settings.types_link_to_folder_contents = folders
+        if folders is not None:
+            folders = list(folders)
+            folders.extend(folderish)
+            folders = tuple(dict(zip(folders, folders)).keys())
+            settings.types_link_to_folder_contents = folders
 
 
 


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2015-09-19T16:51:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.Archetypes/commit/a6d0a2ee31d868cd9bd558885f565ca3c8fe168b

allowRolesToAddKeywords -&gt; roles_allowed_to_add_keywords

Files changed:
M Products/Archetypes/Widget.py
M Products/Archetypes/skins/archetypes/widgets/keyword.pt
M Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html

diff --git a/Products/Archetypes/Widget.py b/Products/Archetypes/Widget.py
index ad08aef..d9f9922 100644
--- a/Products/Archetypes/Widget.py
+++ b/Products/Archetypes/Widget.py
@@ -24,8 +24,11 @@
 
 from plone.app.widgets import base as base_widgets
 from plone.app.widgets import utils
+from plone.registry.interfaces import IRegistry
 from plone.uuid.interfaces import IUUID
 
+from zope.component import getUtility
+
 import json
 
 _marker = []
@@ -1215,18 +1218,13 @@ def _base_args(self, context, field, request):
         membership = getToolByName(context, 'portal_membership')
         user = membership.getAuthenticatedMember()
 
-        try:
-            site_properties = getToolByName(
-                context, 'portal_properties')['site_properties']
-            allowRolesToAddKeywords = site_properties.getProperty(
-                'allowRolesToAddKeywords', None)
-        except AttributeError:
-            allowRolesToAddKeywords = False
+        registry = getUtility(IRegistry)
+        roles_allowed_to_add_keywords = registry.get(
+            'plone.roles_allowed_to_add_keywords', [])
 
         allowNewItems = False
-        if allowRolesToAddKeywords and [
-            role for role in user.getRolesInContext(context)
-                if role in allowRolesToAddKeywords]:
+        if [role for role in user.getRolesInContext(context)
+                if role in roles_allowed_to_add_keywords]:
             allowNewItems = True
 
         args.setdefault('pattern_options', {})
diff --git a/Products/Archetypes/skins/archetypes/widgets/keyword.pt b/Products/Archetypes/skins/archetypes/widgets/keyword.pt
index 089e341..2e9f95e 100644
--- a/Products/Archetypes/skins/archetypes/widgets/keyword.pt
+++ b/Products/Archetypes/skins/archetypes/widgets/keyword.pt
@@ -28,9 +28,9 @@
             <metal:use use-macro="field_macro | context/widgets/field/macros/edit">
                 <tal:define metal:fill-slot="widget_body" define="contentKeywords accessor;
                         allowedKeywords python: context.collectKeywords(fieldName, field.accessor, widget.vocab_source);
-                        site_props context/portal_properties/site_properties|nothing;
                         format widget/format | string:select;
-                        allowRolesToAddKeywords site_props/allowRolesToAddKeywords|nothing;">
+                        registry context/portal_registry;
+                        roles_allowed_to_add_keywords python:registry['plone.roles_allowed_to_add_keywords'];">
 
             		<div tal:attributes="id string:$fieldName-tags;"
 					     class="tagsContainer">
@@ -120,7 +120,7 @@
 	                        <div class="visualClear"><!-- --></div>
 	                    </div>
 
-	                    <tal:condition condition="python:not widget.roleBasedAdd or (allowRolesToAddKeywords and [role for role in user.getRolesInContext(context) if role in allowRolesToAddKeywords])">
+	                    <tal:condition condition="python:not widget.roleBasedAdd or (roles_allowed_to_add_keywords and [role for role in user.getRolesInContext(context) if role in roles_allowed_to_add_keywords])">
 	                        <dl class="newTagsSection">
 	                            <label for="subject_keywords">
 	                                <dt class="newTagsTitle">
diff --git a/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html b/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
index a56ef2b..151c4df 100644
--- a/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
+++ b/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
@@ -19,11 +19,11 @@
 <body>
 	<h1>Keyword multiple select enhancement test - refs PLIP ticket #11017.</h1>
 
-	<p>The PLIP adds an accessible, jQuery-based widget, 
+	<p>The PLIP adds an accessible, jQuery-based widget,
 	which includes both a scrollbar and checkboxes.</p>
 
-	<p>This file is basically a copy of ../keyword.pt, with QUnit added, and 
-	slight modifications to make it run in a static, standalone way, 
+	<p>This file is basically a copy of ../keyword.pt, with QUnit added, and
+	slight modifications to make it run in a static, standalone way,
 	looking somewhat realistic, although Plone's css messes up QUnit's a little.</p>
 
 	<p>---</p>
@@ -36,9 +36,9 @@ <h2 id="qunit-userAgent"></h2>
 
 	<p>---</p>
 	<h2>Manual Test</h2>
-    
+
         <!-- Keyword Widgets -->
-    
+
         <metal:view_macro define-macro="view"
                 tal:define="kssClassesView context/@@kss_field_decorator_view;
                             getKssClasses nocall:kssClassesView/getKssClassesInlineEditable;">
@@ -53,15 +53,15 @@ <h2 id="qunit-userAgent"></h2>
                 </ul>
             </div>
         </metal:view_macro>
-    
+
         <metal:define define-macro="edit">
             <metal:use use-macro="field_macro | context/widgets/field/macros/edit">
                 <tal:define metal:fill-slot="widget_body" define="contentKeywords accessor;
                         allowedKeywords python: context.collectKeywords(fieldName, field.accessor, widget.vocab_source);
-                        site_props context/portal_properties/site_properties|nothing;
                         format widget/format | string:select;
-                        allowRolesToAddKeywords site_props/allowRolesToAddKeywords|nothing;">
-            
+                        registry context/portal_registry;
+                        roles_allowed_to_add_keywords python:registry['plone.roles_allowed_to_add_keywords'];">
+
                     <div tal:condition="allowedKeywords" id="existingTagsSection">
                         <tal:comment tal:replace="nothing">
                             dl semantically associates selector name with values
@@ -70,20 +70,20 @@ <h2 id="qunit-userAgent"></h2>
                             <label for="subject">
                                 <dt id="existingTagsTitle">
                                     <span i18n:translate="label_existing_tags">
-                                        Select from existing tags. 
+                                        Select from existing tags.
                                     </span>
                                 </dt>
                                 <span id="existingTagsHelp" class="formHelp" i18n:translate="label_existingTagsHelp">
                                     Use Control/Command/Shift keys to select multiple tags.
                                     <tal:comment tal:replace="nothing">
-                                        Type-to-skip functionality with javascipt enabled 
-                                        currently is described as 
-                                        "Hover and type the first letter to skip through tags." 
-                                        However, on touch-driven devices, vertical hover typically 
-                                        scrolls the page, so horizontal hover is necessary to enable this.  
-                                        Alternatively, clicking any of the tags also enables type-to-skip.  
-                                        So the text could technically be extended to handle this special case 
-                                        as "Hover or click and type the first letter to skip through tags.", 
+                                        Type-to-skip functionality with javascipt enabled
+                                        currently is described as
+                                        "Hover and type the first letter to skip through tags."
+                                        However, on touch-driven devices, vertical hover typically
+                                        scrolls the page, so horizontal hover is necessary to enable this.
+                                        Alternatively, clicking any of the tags also enables type-to-skip.
+                                        So the text could technically be extended to handle this special case
+                                        as "Hover or click and type the first letter to skip through tags.",
                                         but I think this would be confusing to the majority of users.
                                     </tal:comment>
                                 </span>
@@ -122,9 +122,9 @@ <h2 id="qunit-userAgent"></h2>
                             <span id="oneOrMoreTagsSelected" i18n:translate="label_oneOrMoreTagsSelected">% tags currently selected.</span>
                             <tal:comment tal:replace="nothing">
                                 Call js to modify this widget with both a scrollbar and checkboxes.
-                                There may be a better place to put this js call; 
+                                There may be a better place to put this js call;
                                 examples exist in others' widget.py and js files,
-                                but having it here covers cases where some but not all select elements 
+                                but having it here covers cases where some but not all select elements
                                 call js to be modified.
                                 Todo: The #subject should eventually refer to the template variable.
                             </tal:comment>
@@ -145,7 +145,7 @@ <h2 id="qunit-userAgent"></h2>
                                             id string:${fieldName}_${repeat/keyword/number};
                                             checked python:test(context.unicodeTestIn(keyword, value), 'checked', None);
                                             value keyword" />
-                                    <label 
+                                    <label
                                         tal:content="keyword"
                                         tal:attributes="for string:${fieldName}_${repeat/keyword/number}">
                                         An existing tag
@@ -159,13 +159,13 @@ <h2 id="qunit-userAgent"></h2>
                         </dl>
                         <div class="visualClear"><!-- --></div>
                     </div>
-                    
-                    <tal:condition condition="python:not widget.roleBasedAdd or (allowRolesToAddKeywords and [role for role in user.getRolesInContext(context) if role in allowRolesToAddKeywords])">
+
+                    <tal:condition condition="python:not widget.roleBasedAdd or (roles_allowed_to_add_keywords and [role for role in user.getRolesInContext(context) if role in roles_allowed_to_add_keywords])">
                         <dl id="newTagsSection">
                             <label for="subject_keywords">
                                 <dt id="newTagsTitle">
                                     <span i18n:translate="label_new_tags">
-                                        Create and apply new tags. 
+                                        Create and apply new tags.
                                     </span>
                                 </dt>
                                 <span id="newTagsHelp" i18n:translate="label_newTagsHelp" class="formHelp">
@@ -174,7 +174,7 @@ <h2 id="qunit-userAgent"></h2>
                             </label>
                             <br />
                             <dd id="newTags">
-                                <textarea 
+                                <textarea
                                     id="entered_subjects"
                                     name="subject:lines"
                                     rows="4"
@@ -186,16 +186,16 @@ <h2 id="qunit-userAgent"></h2>
                             </dd>
                         </dl>
                     </tal:condition>
-              
+
                 </tal:define>
             </metal:use>
         </metal:define>
-    
+
         <div metal:define-macro="search">
           <div metal:use-macro="context/widgets/keyword/macros/edit">
           </div>
         </div>
-    
+
     </body>
 
 </html>


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2015-09-19T18:19:08+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.Archetypes/commit/971b6a16953e2b83889f0de043cdfb9a66afcab7

Adjust test mocks to replace registry lookup instead of portal_properties.

Files changed:
M Products/Archetypes/tests/test_pawidgets.py

diff --git a/Products/Archetypes/tests/test_pawidgets.py b/Products/Archetypes/tests/test_pawidgets.py
index 2c709cf..fd0d98b 100644
--- a/Products/Archetypes/tests/test_pawidgets.py
+++ b/Products/Archetypes/tests/test_pawidgets.py
@@ -320,39 +320,43 @@ def test_multi_valued(self):
         class ExampleContent(object):
             implements(IAttributeUUID)
 
-        obj1 = ExampleContent()
-        obj2 = ExampleContent()
-        notify(ObjectCreatedEvent(obj1))
-        notify(ObjectCreatedEvent(obj2))
-
-        self.field.getName.return_value = 'fieldname'
-        self.field.getAccessor.return_value = lambda: [obj1, obj2]
-        self.field.multiValued = True
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        widget = RelatedItemsWidget()
-
-        self.assertEqual(
-            {
-                'name': 'fieldname',
-                'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'separator': ';',
-                    'orderable': True,
-                    'maximumSelectionSize': -1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            obj1 = ExampleContent()
+            obj2 = ExampleContent()
+            notify(ObjectCreatedEvent(obj1))
+            notify(ObjectCreatedEvent(obj2))
+
+            self.field.getName.return_value = 'fieldname'
+            self.field.getAccessor.return_value = lambda: [obj1, obj2]
+            self.field.multiValued = True
+            self.context.portal_registry.get.return_value = ['SomeType']
+
+            widget = RelatedItemsWidget()
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname',
+                    'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'separator': ';',
+                        'orderable': True,
+                        'maximumSelectionSize': -1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname',
+                    },
                 },
-            },
-            widget._base_args(self.context, self.field, self.request),
-        )
+                widget._base_args(self.context, self.field, self.request),
+            )
 
     def test_single_value(self):
         from zope.event import notify
@@ -371,31 +375,34 @@ class ExampleContent(object):
         self.field.getName.return_value = 'fieldname'
         self.field.getAccessor.return_value = lambda: obj1
         self.field.multiValued = False
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        widget = RelatedItemsWidget()
 
-        self.assertEqual(
-            {
-                'name': 'fieldname',
-                'value': '{}'.format(IUUID(obj1)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': 1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            widget = RelatedItemsWidget()
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname',
+                    'value': '{}'.format(IUUID(obj1)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': 1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname',
+                    },
                 },
-            },
-            widget._base_args(self.context, self.field, self.request),
-        )
+                widget._base_args(self.context, self.field, self.request),
+            )
 
     def test_single_valued_empty(self):
         from Products.Archetypes.Widget import RelatedItemsWidget
@@ -403,31 +410,34 @@ def test_single_valued_empty(self):
         self.field.getName.return_value = 'fieldname'
         self.field.getAccessor.return_value = lambda: None
         self.field.multiValued = False
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        widget = RelatedItemsWidget()
 
-        self.assertEqual(
-            {
-                'name': 'fieldname',
-                'value': '',
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': 1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            widget = RelatedItemsWidget()
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname',
+                    'value': '',
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': 1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname',
+                    },
                 },
-            },
-            widget._base_args(self.context, self.field, self.request),
-        )
+                widget._base_args(self.context, self.field, self.request),
+            )
 
     def test_multiple_widgets(self):
         from zope.event import notify
@@ -445,68 +455,71 @@ class ExampleContent(object):
         notify(ObjectCreatedEvent(obj1))
         notify(ObjectCreatedEvent(obj2))
 
-        self.context.fieldvalue = lambda: obj1
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        field1 = ReferenceField(
-            'fieldname1',
-            relationship="A",
-            multiValued=False,
-            widget=RelatedItemsWidget(),
-        )
-        field1.accessor = "fieldvalue"
-
-        self.assertEqual(
-            {
-                'name': 'fieldname1',
-                'value': '{}'.format(IUUID(obj1)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': 1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname1',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            self.context.fieldvalue = lambda: obj1
+
+            field1 = ReferenceField(
+                'fieldname1',
+                relationship="A",
+                multiValued=False,
+                widget=RelatedItemsWidget(),
+            )
+            field1.accessor = "fieldvalue"
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname1',
+                    'value': '{}'.format(IUUID(obj1)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': 1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname1',
+                    },
                 },
-            },
-            field1.widget._base_args(self.context, field1, self.request),
-        )
-
-        field2 = ReferenceField(
-            'fieldname2',
-            relationship="A",
-            multiValued=True,
-            widget=RelatedItemsWidget(),
-        )
-        field2.accessor = "fieldvalue"
-        self.context.fieldvalue = lambda: [obj1, obj2]
-
-        self.assertEqual(
-            {
-                'name': 'fieldname2',
-                'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': -1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname2',
+                field1.widget._base_args(self.context, field1, self.request),
+            )
+
+            field2 = ReferenceField(
+                'fieldname2',
+                relationship="A",
+                multiValued=True,
+                widget=RelatedItemsWidget(),
+            )
+            field2.accessor = "fieldvalue"
+            self.context.fieldvalue = lambda: [obj1, obj2]
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname2',
+                    'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': -1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname2',
+                    },
                 },
-            },
-            field2.widget._base_args(self.context, field2, self.request),
-        )
+                field2.widget._base_args(self.context, field2, self.request),
+            )
 
 
 class QueryStringWidgetTests(unittest.TestCase):


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2015-09-20T17:29:01+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.Archetypes/commit/e317cd50f3701a3e63f211fae4b8a6371a384b02

Merge pull request #49 from plone/portal-properties-cleanup

Portal properties cleanup

Files changed:
M CHANGES.txt
M Products/Archetypes/Extensions/utils.py
M Products/Archetypes/Widget.py
M Products/Archetypes/skins/archetypes/widgets/keyword.pt
M Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
M Products/Archetypes/tests/test_pawidgets.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 5516afc..68adaef 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,9 @@ Changelog
 1.10.10 (unreleased)
 --------------------
 
+- Pull types_link_to_folder_contents values from the configuration registry.
+  [esteele]
+
 - Set calendar_starting_year and calendar_future_years_available in registry.
   See https://github.com/plone/Products.CMFPlone/issues/872
   [pbauer]
diff --git a/Products/Archetypes/Extensions/utils.py b/Products/Archetypes/Extensions/utils.py
index dc5d535..b49dd12 100644
--- a/Products/Archetypes/Extensions/utils.py
+++ b/Products/Archetypes/Extensions/utils.py
@@ -3,10 +3,13 @@
 
 from App.Common import package_home
 from OFS.ObjectManager import BadRequestException
+from zope.component import getUtility
 from Products.CMFCore.ActionInformation import ActionInformation
 from Products.CMFCore.DirectoryView import addDirectoryViews, \
      registerDirectory, manage_listAvailableDirectories
 from Products.CMFCore.utils import getToolByName, getPackageName
+from Products.CMFPlone.interfaces import ITypesSchema
+from plone.registry.interfaces import IRegistry
 from Products.Archetypes.config import REFERENCE_CATALOG
 from Products.Archetypes.ArchetypeTool import fixActionsForType
 from Products.Archetypes.ArchetypeTool import listTypes
@@ -148,15 +151,23 @@ def install_types(self, out, types, package_name):
         sp = getattr(pt, 'site_properties', None)
         if sp is None:
             return None
-        props = ('use_folder_tabs', 'typesLinkToFolderContentsInFC')
-        for prop in props:
-            folders = sp.getProperty(prop, None)
-            if folders is None:
-                continue
+
+        folders = sp.getProperty('use_folder_tabs', None)
+        if folders is not None:
             folders = list(folders)
             folders.extend(folderish)
             folders = tuple(dict(zip(folders, folders)).keys())
-            sp._updateProperty(prop, folders)
+            sp._updateProperty('use_folder_tabs', folders)
+
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITypesSchema, prefix="plone")
+        folders = settings.types_link_to_folder_contents
+        if folders is not None:
+            folders = list(folders)
+            folders.extend(folderish)
+            folders = tuple(dict(zip(folders, folders)).keys())
+            settings.types_link_to_folder_contents = folders
+
 
 
 def _getFtiAndDataFor(tool, typename, klassname, package_name):
diff --git a/Products/Archetypes/Widget.py b/Products/Archetypes/Widget.py
index ad08aef..d9f9922 100644
--- a/Products/Archetypes/Widget.py
+++ b/Products/Archetypes/Widget.py
@@ -24,8 +24,11 @@
 
 from plone.app.widgets import base as base_widgets
 from plone.app.widgets import utils
+from plone.registry.interfaces import IRegistry
 from plone.uuid.interfaces import IUUID
 
+from zope.component import getUtility
+
 import json
 
 _marker = []
@@ -1215,18 +1218,13 @@ def _base_args(self, context, field, request):
         membership = getToolByName(context, 'portal_membership')
         user = membership.getAuthenticatedMember()
 
-        try:
-            site_properties = getToolByName(
-                context, 'portal_properties')['site_properties']
-            allowRolesToAddKeywords = site_properties.getProperty(
-                'allowRolesToAddKeywords', None)
-        except AttributeError:
-            allowRolesToAddKeywords = False
+        registry = getUtility(IRegistry)
+        roles_allowed_to_add_keywords = registry.get(
+            'plone.roles_allowed_to_add_keywords', [])
 
         allowNewItems = False
-        if allowRolesToAddKeywords and [
-            role for role in user.getRolesInContext(context)
-                if role in allowRolesToAddKeywords]:
+        if [role for role in user.getRolesInContext(context)
+                if role in roles_allowed_to_add_keywords]:
             allowNewItems = True
 
         args.setdefault('pattern_options', {})
diff --git a/Products/Archetypes/skins/archetypes/widgets/keyword.pt b/Products/Archetypes/skins/archetypes/widgets/keyword.pt
index 089e341..2e9f95e 100644
--- a/Products/Archetypes/skins/archetypes/widgets/keyword.pt
+++ b/Products/Archetypes/skins/archetypes/widgets/keyword.pt
@@ -28,9 +28,9 @@
             <metal:use use-macro="field_macro | context/widgets/field/macros/edit">
                 <tal:define metal:fill-slot="widget_body" define="contentKeywords accessor;
                         allowedKeywords python: context.collectKeywords(fieldName, field.accessor, widget.vocab_source);
-                        site_props context/portal_properties/site_properties|nothing;
                         format widget/format | string:select;
-                        allowRolesToAddKeywords site_props/allowRolesToAddKeywords|nothing;">
+                        registry context/portal_registry;
+                        roles_allowed_to_add_keywords python:registry['plone.roles_allowed_to_add_keywords'];">
 
             		<div tal:attributes="id string:$fieldName-tags;"
 					     class="tagsContainer">
@@ -120,7 +120,7 @@
 	                        <div class="visualClear"><!-- --></div>
 	                    </div>
 
-	                    <tal:condition condition="python:not widget.roleBasedAdd or (allowRolesToAddKeywords and [role for role in user.getRolesInContext(context) if role in allowRolesToAddKeywords])">
+	                    <tal:condition condition="python:not widget.roleBasedAdd or (roles_allowed_to_add_keywords and [role for role in user.getRolesInContext(context) if role in roles_allowed_to_add_keywords])">
 	                        <dl class="newTagsSection">
 	                            <label for="subject_keywords">
 	                                <dt class="newTagsTitle">
diff --git a/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html b/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
index a56ef2b..151c4df 100644
--- a/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
+++ b/Products/Archetypes/skins/archetypes/widgets/tests/keywordtests.html
@@ -19,11 +19,11 @@
 <body>
 	<h1>Keyword multiple select enhancement test - refs PLIP ticket #11017.</h1>
 
-	<p>The PLIP adds an accessible, jQuery-based widget, 
+	<p>The PLIP adds an accessible, jQuery-based widget,
 	which includes both a scrollbar and checkboxes.</p>
 
-	<p>This file is basically a copy of ../keyword.pt, with QUnit added, and 
-	slight modifications to make it run in a static, standalone way, 
+	<p>This file is basically a copy of ../keyword.pt, with QUnit added, and
+	slight modifications to make it run in a static, standalone way,
 	looking somewhat realistic, although Plone's css messes up QUnit's a little.</p>
 
 	<p>---</p>
@@ -36,9 +36,9 @@ <h2 id="qunit-userAgent"></h2>
 
 	<p>---</p>
 	<h2>Manual Test</h2>
-    
+
         <!-- Keyword Widgets -->
-    
+
         <metal:view_macro define-macro="view"
                 tal:define="kssClassesView context/@@kss_field_decorator_view;
                             getKssClasses nocall:kssClassesView/getKssClassesInlineEditable;">
@@ -53,15 +53,15 @@ <h2 id="qunit-userAgent"></h2>
                 </ul>
             </div>
         </metal:view_macro>
-    
+
         <metal:define define-macro="edit">
             <metal:use use-macro="field_macro | context/widgets/field/macros/edit">
                 <tal:define metal:fill-slot="widget_body" define="contentKeywords accessor;
                         allowedKeywords python: context.collectKeywords(fieldName, field.accessor, widget.vocab_source);
-                        site_props context/portal_properties/site_properties|nothing;
                         format widget/format | string:select;
-                        allowRolesToAddKeywords site_props/allowRolesToAddKeywords|nothing;">
-            
+                        registry context/portal_registry;
+                        roles_allowed_to_add_keywords python:registry['plone.roles_allowed_to_add_keywords'];">
+
                     <div tal:condition="allowedKeywords" id="existingTagsSection">
                         <tal:comment tal:replace="nothing">
                             dl semantically associates selector name with values
@@ -70,20 +70,20 @@ <h2 id="qunit-userAgent"></h2>
                             <label for="subject">
                                 <dt id="existingTagsTitle">
                                     <span i18n:translate="label_existing_tags">
-                                        Select from existing tags. 
+                                        Select from existing tags.
                                     </span>
                                 </dt>
                                 <span id="existingTagsHelp" class="formHelp" i18n:translate="label_existingTagsHelp">
                                     Use Control/Command/Shift keys to select multiple tags.
                                     <tal:comment tal:replace="nothing">
-                                        Type-to-skip functionality with javascipt enabled 
-                                        currently is described as 
-                                        "Hover and type the first letter to skip through tags." 
-                                        However, on touch-driven devices, vertical hover typically 
-                                        scrolls the page, so horizontal hover is necessary to enable this.  
-                                        Alternatively, clicking any of the tags also enables type-to-skip.  
-                                        So the text could technically be extended to handle this special case 
-                                        as "Hover or click and type the first letter to skip through tags.", 
+                                        Type-to-skip functionality with javascipt enabled
+                                        currently is described as
+                                        "Hover and type the first letter to skip through tags."
+                                        However, on touch-driven devices, vertical hover typically
+                                        scrolls the page, so horizontal hover is necessary to enable this.
+                                        Alternatively, clicking any of the tags also enables type-to-skip.
+                                        So the text could technically be extended to handle this special case
+                                        as "Hover or click and type the first letter to skip through tags.",
                                         but I think this would be confusing to the majority of users.
                                     </tal:comment>
                                 </span>
@@ -122,9 +122,9 @@ <h2 id="qunit-userAgent"></h2>
                             <span id="oneOrMoreTagsSelected" i18n:translate="label_oneOrMoreTagsSelected">% tags currently selected.</span>
                             <tal:comment tal:replace="nothing">
                                 Call js to modify this widget with both a scrollbar and checkboxes.
-                                There may be a better place to put this js call; 
+                                There may be a better place to put this js call;
                                 examples exist in others' widget.py and js files,
-                                but having it here covers cases where some but not all select elements 
+                                but having it here covers cases where some but not all select elements
                                 call js to be modified.
                                 Todo: The #subject should eventually refer to the template variable.
                             </tal:comment>
@@ -145,7 +145,7 @@ <h2 id="qunit-userAgent"></h2>
                                             id string:${fieldName}_${repeat/keyword/number};
                                             checked python:test(context.unicodeTestIn(keyword, value), 'checked', None);
                                             value keyword" />
-                                    <label 
+                                    <label
                                         tal:content="keyword"
                                         tal:attributes="for string:${fieldName}_${repeat/keyword/number}">
                                         An existing tag
@@ -159,13 +159,13 @@ <h2 id="qunit-userAgent"></h2>
                         </dl>
                         <div class="visualClear"><!-- --></div>
                     </div>
-                    
-                    <tal:condition condition="python:not widget.roleBasedAdd or (allowRolesToAddKeywords and [role for role in user.getRolesInContext(context) if role in allowRolesToAddKeywords])">
+
+                    <tal:condition condition="python:not widget.roleBasedAdd or (roles_allowed_to_add_keywords and [role for role in user.getRolesInContext(context) if role in roles_allowed_to_add_keywords])">
                         <dl id="newTagsSection">
                             <label for="subject_keywords">
                                 <dt id="newTagsTitle">
                                     <span i18n:translate="label_new_tags">
-                                        Create and apply new tags. 
+                                        Create and apply new tags.
                                     </span>
                                 </dt>
                                 <span id="newTagsHelp" i18n:translate="label_newTagsHelp" class="formHelp">
@@ -174,7 +174,7 @@ <h2 id="qunit-userAgent"></h2>
                             </label>
                             <br />
                             <dd id="newTags">
-                                <textarea 
+                                <textarea
                                     id="entered_subjects"
                                     name="subject:lines"
                                     rows="4"
@@ -186,16 +186,16 @@ <h2 id="qunit-userAgent"></h2>
                             </dd>
                         </dl>
                     </tal:condition>
-              
+
                 </tal:define>
             </metal:use>
         </metal:define>
-    
+
         <div metal:define-macro="search">
           <div metal:use-macro="context/widgets/keyword/macros/edit">
           </div>
         </div>
-    
+
     </body>
 
 </html>
diff --git a/Products/Archetypes/tests/test_pawidgets.py b/Products/Archetypes/tests/test_pawidgets.py
index 2c709cf..fd0d98b 100644
--- a/Products/Archetypes/tests/test_pawidgets.py
+++ b/Products/Archetypes/tests/test_pawidgets.py
@@ -320,39 +320,43 @@ def test_multi_valued(self):
         class ExampleContent(object):
             implements(IAttributeUUID)
 
-        obj1 = ExampleContent()
-        obj2 = ExampleContent()
-        notify(ObjectCreatedEvent(obj1))
-        notify(ObjectCreatedEvent(obj2))
-
-        self.field.getName.return_value = 'fieldname'
-        self.field.getAccessor.return_value = lambda: [obj1, obj2]
-        self.field.multiValued = True
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        widget = RelatedItemsWidget()
-
-        self.assertEqual(
-            {
-                'name': 'fieldname',
-                'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'separator': ';',
-                    'orderable': True,
-                    'maximumSelectionSize': -1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            obj1 = ExampleContent()
+            obj2 = ExampleContent()
+            notify(ObjectCreatedEvent(obj1))
+            notify(ObjectCreatedEvent(obj2))
+
+            self.field.getName.return_value = 'fieldname'
+            self.field.getAccessor.return_value = lambda: [obj1, obj2]
+            self.field.multiValued = True
+            self.context.portal_registry.get.return_value = ['SomeType']
+
+            widget = RelatedItemsWidget()
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname',
+                    'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'separator': ';',
+                        'orderable': True,
+                        'maximumSelectionSize': -1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname',
+                    },
                 },
-            },
-            widget._base_args(self.context, self.field, self.request),
-        )
+                widget._base_args(self.context, self.field, self.request),
+            )
 
     def test_single_value(self):
         from zope.event import notify
@@ -371,31 +375,34 @@ class ExampleContent(object):
         self.field.getName.return_value = 'fieldname'
         self.field.getAccessor.return_value = lambda: obj1
         self.field.multiValued = False
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        widget = RelatedItemsWidget()
 
-        self.assertEqual(
-            {
-                'name': 'fieldname',
-                'value': '{}'.format(IUUID(obj1)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': 1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            widget = RelatedItemsWidget()
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname',
+                    'value': '{}'.format(IUUID(obj1)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': 1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname',
+                    },
                 },
-            },
-            widget._base_args(self.context, self.field, self.request),
-        )
+                widget._base_args(self.context, self.field, self.request),
+            )
 
     def test_single_valued_empty(self):
         from Products.Archetypes.Widget import RelatedItemsWidget
@@ -403,31 +410,34 @@ def test_single_valued_empty(self):
         self.field.getName.return_value = 'fieldname'
         self.field.getAccessor.return_value = lambda: None
         self.field.multiValued = False
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        widget = RelatedItemsWidget()
 
-        self.assertEqual(
-            {
-                'name': 'fieldname',
-                'value': '',
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': 1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            widget = RelatedItemsWidget()
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname',
+                    'value': '',
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': 1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname',
+                    },
                 },
-            },
-            widget._base_args(self.context, self.field, self.request),
-        )
+                widget._base_args(self.context, self.field, self.request),
+            )
 
     def test_multiple_widgets(self):
         from zope.event import notify
@@ -445,68 +455,71 @@ class ExampleContent(object):
         notify(ObjectCreatedEvent(obj1))
         notify(ObjectCreatedEvent(obj2))
 
-        self.context.fieldvalue = lambda: obj1
-        self.context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-
-        field1 = ReferenceField(
-            'fieldname1',
-            relationship="A",
-            multiValued=False,
-            widget=RelatedItemsWidget(),
-        )
-        field1.accessor = "fieldvalue"
-
-        self.assertEqual(
-            {
-                'name': 'fieldname1',
-                'value': '{}'.format(IUUID(obj1)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': 1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname1',
+        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
+            registry = Mock()
+            registry.get.return_value = ['SomeType']
+            mock_method.return_value = registry
+
+            self.context.fieldvalue = lambda: obj1
+
+            field1 = ReferenceField(
+                'fieldname1',
+                relationship="A",
+                multiValued=False,
+                widget=RelatedItemsWidget(),
+            )
+            field1.accessor = "fieldvalue"
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname1',
+                    'value': '{}'.format(IUUID(obj1)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': 1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname1',
+                    },
                 },
-            },
-            field1.widget._base_args(self.context, field1, self.request),
-        )
-
-        field2 = ReferenceField(
-            'fieldname2',
-            relationship="A",
-            multiValued=True,
-            widget=RelatedItemsWidget(),
-        )
-        field2.accessor = "fieldvalue"
-        self.context.fieldvalue = lambda: [obj1, obj2]
-
-        self.assertEqual(
-            {
-                'name': 'fieldname2',
-                'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'separator': ';',
-                    'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'maximumSelectionSize': -1,
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog'
-                                     '&field=fieldname2',
+                field1.widget._base_args(self.context, field1, self.request),
+            )
+
+            field2 = ReferenceField(
+                'fieldname2',
+                relationship="A",
+                multiValued=True,
+                widget=RelatedItemsWidget(),
+            )
+            field2.accessor = "fieldvalue"
+            self.context.fieldvalue = lambda: [obj1, obj2]
+
+            self.assertEqual(
+                {
+                    'name': 'fieldname2',
+                    'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'separator': ';',
+                        'orderable': True,
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'maximumSelectionSize': -1,
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog'
+                                         '&field=fieldname2',
+                    },
                 },
-            },
-            field2.widget._base_args(self.context, field2, self.request),
-        )
+                field2.widget._base_args(self.context, field2, self.request),
+            )
 
 
 class QueryStringWidgetTests(unittest.TestCase):


