Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-01T13:02:10+02:00
Author: Gagaro (Gagaro) <gagaro42@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/7a37a7b04e67ccc46fedbf5e99bdb826390878d4

feat: allow all TinyMCE settings to be set from control panel

Files changed:
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/tinymce.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/patterns/__init__.py
M Products/CMFPlone/tests/testPatternSettings.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 424ab44..a38fff2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,7 +8,8 @@ Changelog
 5.0.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Allow all TinyMCE settings to be set from control panel.
+  [Gagaro]
 
 
 5.0 (2015-09-27)
diff --git a/Products/CMFPlone/controlpanel/browser/tinymce.py b/Products/CMFPlone/controlpanel/browser/tinymce.py
index 2770748..106b82b 100644
--- a/Products/CMFPlone/controlpanel/browser/tinymce.py
+++ b/Products/CMFPlone/controlpanel/browser/tinymce.py
@@ -2,6 +2,7 @@
 from Products.CMFPlone.interfaces import ITinyMCELayoutSchema
 from Products.CMFPlone.interfaces import ITinyMCESpellCheckerSchema
 from Products.CMFPlone.interfaces import ITinyMCEResourceTypesSchema
+from Products.CMFPlone.interfaces import ITinyMCEAdvancedSchema
 from Products.CMFPlone.interfaces import ITinyMCESchema
 from Products.CMFPlone.interfaces import ITinyMCEPluginSchema
 from plone.app.registry.browser import controlpanel
@@ -25,6 +26,11 @@ class TinyMCEResourceTypesForm(group.GroupForm):
     fields = field.Fields(ITinyMCEResourceTypesSchema)
 
 
+class TinyMCEAdvancedForm(group.GroupForm):
+    label = _(u"Advanced")
+    fields = field.Fields(ITinyMCEAdvancedSchema)
+
+
 class TinyMCEControlPanelForm(controlpanel.RegistryEditForm):
 
     id = "TinyMCEControlPanel"
@@ -33,7 +39,7 @@ class TinyMCEControlPanelForm(controlpanel.RegistryEditForm):
     schema_prefix = "plone"
     fields = field.Fields(ITinyMCELayoutSchema)
     groups = (TinyMCEPluginForm, TinyMCESpellCheckerForm,
-              TinyMCEResourceTypesForm)
+              TinyMCEResourceTypesForm, TinyMCEAdvancedForm)
 
     def updateFields(self):
         super(TinyMCEControlPanelForm, self).updateFields()
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 815bd50..464bc41 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -22,6 +22,7 @@
 from controlpanel import ITinyMCELayoutSchema
 from controlpanel import ITinyMCESpellCheckerSchema
 from controlpanel import ITinyMCEResourceTypesSchema
+from controlpanel import ITinyMCEAdvancedSchema
 from controlpanel import ITinyMCESchema
 from controlpanel import ITinyMCEPluginSchema
 from controlpanel import ITypesSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index c91f78a..2f61033 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -763,11 +763,24 @@ class ITinyMCEResourceTypesSchema(Interface):
         required=False)
 
 
+class ITinyMCEAdvancedSchema(Interface):
+    """This interface defines the resource types properties."""
+
+    other_settings = schema.Text(
+        title=_('label_tinymce_other_settings', 'Other settings'),
+        description=_('hint_tinymce_other_settings',
+                      default='Other TinyMCE configuration formatted as JSON.'),
+        required=False,
+        default=u"{}",
+    )
+
+
 class ITinyMCESchema(
     ITinyMCELayoutSchema,
     ITinyMCEPluginSchema,
     ITinyMCESpellCheckerSchema,
-    ITinyMCEResourceTypesSchema
+    ITinyMCEResourceTypesSchema,
+    ITinyMCEAdvancedSchema
 ):
     """TinyMCE Schema"""
 
diff --git a/Products/CMFPlone/patterns/__init__.py b/Products/CMFPlone/patterns/__init__.py
index c4a0ad5..c0466b4 100644
--- a/Products/CMFPlone/patterns/__init__.py
+++ b/Products/CMFPlone/patterns/__init__.py
@@ -161,6 +161,9 @@ def get_tiny_config(self):
             except ValueError:
                 pass
 
+        if settings.other_settings:
+            tiny_config.update(json.loads(settings.other_settings))
+
         return tiny_config
 
 
diff --git a/Products/CMFPlone/tests/testPatternSettings.py b/Products/CMFPlone/tests/testPatternSettings.py
index ed9b3ee..afded69 100644
--- a/Products/CMFPlone/tests/testPatternSettings.py
+++ b/Products/CMFPlone/tests/testPatternSettings.py
@@ -25,4 +25,11 @@ def test_atd_included(self):
 
     def test_style_formats(self):
         conf = self.get_conf()
-        self.assertEqual(len(conf['tiny']['style_formats']), 5)
\ No newline at end of file
+        self.assertEqual(len(conf['tiny']['style_formats']), 5)
+
+    def test_other_settings(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
+        settings.other_settings = u'{"foo": "bar"}'
+        conf = self.get_conf()
+        self.assertEqual(conf['tiny']['foo'], 'bar')


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-01T20:27:05+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/4e78b7d07b3dd8c1efaf19853fa67136cb3dd50d

Merge pull request #1115 from plone/feat-tinymce-other-settings

feat: allow all TinyMCE settings to be set from control panel

Files changed:
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/tinymce.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/patterns/__init__.py
M Products/CMFPlone/tests/testPatternSettings.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 424ab44..a38fff2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,7 +8,8 @@ Changelog
 5.0.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Allow all TinyMCE settings to be set from control panel.
+  [Gagaro]
 
 
 5.0 (2015-09-27)
diff --git a/Products/CMFPlone/controlpanel/browser/tinymce.py b/Products/CMFPlone/controlpanel/browser/tinymce.py
index 2770748..106b82b 100644
--- a/Products/CMFPlone/controlpanel/browser/tinymce.py
+++ b/Products/CMFPlone/controlpanel/browser/tinymce.py
@@ -2,6 +2,7 @@
 from Products.CMFPlone.interfaces import ITinyMCELayoutSchema
 from Products.CMFPlone.interfaces import ITinyMCESpellCheckerSchema
 from Products.CMFPlone.interfaces import ITinyMCEResourceTypesSchema
+from Products.CMFPlone.interfaces import ITinyMCEAdvancedSchema
 from Products.CMFPlone.interfaces import ITinyMCESchema
 from Products.CMFPlone.interfaces import ITinyMCEPluginSchema
 from plone.app.registry.browser import controlpanel
@@ -25,6 +26,11 @@ class TinyMCEResourceTypesForm(group.GroupForm):
     fields = field.Fields(ITinyMCEResourceTypesSchema)
 
 
+class TinyMCEAdvancedForm(group.GroupForm):
+    label = _(u"Advanced")
+    fields = field.Fields(ITinyMCEAdvancedSchema)
+
+
 class TinyMCEControlPanelForm(controlpanel.RegistryEditForm):
 
     id = "TinyMCEControlPanel"
@@ -33,7 +39,7 @@ class TinyMCEControlPanelForm(controlpanel.RegistryEditForm):
     schema_prefix = "plone"
     fields = field.Fields(ITinyMCELayoutSchema)
     groups = (TinyMCEPluginForm, TinyMCESpellCheckerForm,
-              TinyMCEResourceTypesForm)
+              TinyMCEResourceTypesForm, TinyMCEAdvancedForm)
 
     def updateFields(self):
         super(TinyMCEControlPanelForm, self).updateFields()
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 815bd50..464bc41 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -22,6 +22,7 @@
 from controlpanel import ITinyMCELayoutSchema
 from controlpanel import ITinyMCESpellCheckerSchema
 from controlpanel import ITinyMCEResourceTypesSchema
+from controlpanel import ITinyMCEAdvancedSchema
 from controlpanel import ITinyMCESchema
 from controlpanel import ITinyMCEPluginSchema
 from controlpanel import ITypesSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index c91f78a..2f61033 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -763,11 +763,24 @@ class ITinyMCEResourceTypesSchema(Interface):
         required=False)
 
 
+class ITinyMCEAdvancedSchema(Interface):
+    """This interface defines the resource types properties."""
+
+    other_settings = schema.Text(
+        title=_('label_tinymce_other_settings', 'Other settings'),
+        description=_('hint_tinymce_other_settings',
+                      default='Other TinyMCE configuration formatted as JSON.'),
+        required=False,
+        default=u"{}",
+    )
+
+
 class ITinyMCESchema(
     ITinyMCELayoutSchema,
     ITinyMCEPluginSchema,
     ITinyMCESpellCheckerSchema,
-    ITinyMCEResourceTypesSchema
+    ITinyMCEResourceTypesSchema,
+    ITinyMCEAdvancedSchema
 ):
     """TinyMCE Schema"""
 
diff --git a/Products/CMFPlone/patterns/__init__.py b/Products/CMFPlone/patterns/__init__.py
index c4a0ad5..c0466b4 100644
--- a/Products/CMFPlone/patterns/__init__.py
+++ b/Products/CMFPlone/patterns/__init__.py
@@ -161,6 +161,9 @@ def get_tiny_config(self):
             except ValueError:
                 pass
 
+        if settings.other_settings:
+            tiny_config.update(json.loads(settings.other_settings))
+
         return tiny_config
 
 
diff --git a/Products/CMFPlone/tests/testPatternSettings.py b/Products/CMFPlone/tests/testPatternSettings.py
index ed9b3ee..afded69 100644
--- a/Products/CMFPlone/tests/testPatternSettings.py
+++ b/Products/CMFPlone/tests/testPatternSettings.py
@@ -25,4 +25,11 @@ def test_atd_included(self):
 
     def test_style_formats(self):
         conf = self.get_conf()
-        self.assertEqual(len(conf['tiny']['style_formats']), 5)
\ No newline at end of file
+        self.assertEqual(len(conf['tiny']['style_formats']), 5)
+
+    def test_other_settings(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
+        settings.other_settings = u'{"foo": "bar"}'
+        conf = self.get_conf()
+        self.assertEqual(conf['tiny']['foo'], 'bar')


