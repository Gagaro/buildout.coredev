Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-20T17:13:08+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/7720f6afb05e4b68e92e7440bfe85c54f3e0ce44

Move portal/site properties values into the configuration registry.

commit afafa9cd4a0bf3a13d44c4bbf572af0eb0ebe1a8
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sun Sep 20 12:20:10 2015 +0200

    Remove default-charset setting, we've previously declared a utf-8-only poicy.

commit a8bbc6caaeedc1629f8e510b73a765ddce12fee2
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 18:43:49 2015 +0200

    Restore accidentally-removed control panel adapter

    This reverts commit d30c7a6f8d92fb6391c183467e7c7d0528dfa821.

commit 1eb44894761b9d6ba6da846696663d6415709e4a
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 18:27:09 2015 +0200

    Make these ASCII fields instead.

commit 566fbf558867a28a9611f3c8bb2aef98b7da570b
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 16:50:41 2015 +0200

    allowRolesToAddKeywords -&gt; roles_allowed_to_add_keywords

commit 240df425424784ead21ab87f677a823fc9171ff6
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 16:09:00 2015 +0200

    Fail nicely if mail schema has not yet been upgraded.

commit 09e8ca7a0e00661332c05c854e1a8a3fd635bebd
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 15:58:47 2015 +0200

    Move email_charset to the registry.

commit b8d7f231932ac23c8373a7cf9a14f0e1edbc7600
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 15:44:48 2015 +0200

    Move email_charset to registry

commit feb9796ff1907d8804c4ef91a6a5ce9c80b26f81
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 15:43:25 2015 +0200

    parentMetaTypesNotToQuery -&gt; parent_types_not_to_query

commit 5f88c8dc6ee37cc877da0cd33be3b5db196fa8b2
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 15:29:38 2015 +0200

    Move default_charset to the registry.

commit 8e5def7be5efce33f62d126eb9f1a4388590332a
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 11:53:32 2015 +0200

    remove properties search_results_description_length and ellipsis

commit accca49d96df6afa88f09e2168c116fdfea47bd9
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 07:48:58 2015 +0200

    fix test

commit d3002418c7df7c677b0baf986e44249c0e3ed027
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 07:42:33 2015 +0200

    default_page_types is now a list

commit fb0975cf18e76932b38e3bb6cc7d057d152f208d
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 00:39:32 2015 +0200

    fix tests for migrated portal-properties

commit 8f04268591ae462adc1c1d4185bc767c42ff742b
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 00:39:46 2015 +0200

    Remove showAllParents

commit e2450b87300c83151e572b0855c350c6ce51422b
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 00:30:18 2015 +0200

    Fix test

commit 7c6d2b88b061bc7bf258aa2232d2ac7ff625e903
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 00:23:37 2015 +0200

    Fix import

commit dbd90d3087aeacbf87522566ef81fc03a9f42e79
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 00:01:50 2015 +0200

    Remove global properties for navtree settings. Prefer local ones

commit 6635e02a0a125de1d1de76aa1880526c527043c3
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 23:36:15 2015 +0200

    Move default_page to the registry.

commit 556f2b16d4dd81595f1aaf131be8082a5b85e5fe
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Fri Sep 18 18:10:49 2015 +0200

    unicodify

commit 836e8d0a4e7770a445f5fd7839941e92bd53d6e1
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Fri Sep 18 16:35:40 2015 +0200

    fix typeerror

commit d8e1bf6a270f2620cc2fd372169c6563595fbaa0
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Fri Sep 18 15:55:47 2015 +0200

    remove duplicate

commit b169fd9367341db7201a2d0f0b09169db61ffaaf
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Fri Sep 18 15:44:36 2015 +0200

    add default_page_types to registry, add button to content-controlpanel

commit d400cac0108a21820c6673ccc948b2f04a14e0b9
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 15:25:36 2015 +0200

    Remove currentFolderOnlyInNavtree in favor of a portlet-local setting

commit 062d8ced05461eddcfae53f9e326c86fe07cf960
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 15:16:26 2015 +0200

    Move sitemap depth property to the registry

commit 57e641382ccb3117e52c969452fb467f46bfb6c4
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 15:09:09 2015 +0200

    Whitespace

commit ea6d76ead3cd6510f786826f35f86611e1957bcf
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 14:47:42 2015 +0200

    This template doesn't like the get syntax, throws an extra error.

commit 66b3c5cc43495e6d590f1cc8183feccbb745d847
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 13:40:07 2015 +0200

    Not necessary to test this anymore

commit 8b476296556d0147bbab8d37e9596209fc31b213
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 13:30:36 2015 +0200

    Fix setting of navtree root value

commit edeec5f7080bdac240c56dd5454faa0bf45280b4
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 13:11:30 2015 +0200

    Pull migrated settings from the registry.

commit 973ef2915cb884f11ae6995f2ae8553026dbb77f
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 13:10:57 2015 +0200

    Make sure to include actions in site nav

commit c5bce8ee42800a823e88515a78dbbbed3b34a535
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 11:06:30 2015 +0200

    not entirely sure why this was breaking tests, but meh.

commit bf17117274340b03c8656703177d22b25ab0133c
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 10:30:26 2015 +0200

    Update docstring to match what this test actually tests.

commit 01ae370e605d512940feec87ae7135eaf18657e5
Author: esteele &lt;eric@esteele.net&gt;
Date:   Fri Sep 18 09:48:44 2015 +0200

    Fix registry id

commit 0e4366a162cdbef9a6151ba8cc88c22e5c02bfcc
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 23:13:59 2015 +0200

    Fix registry id

commit 99077bdd26235b62411d6bf32c6559b9c76cb063
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 19:06:51 2015 +0200

    Use registry lookup for types_use_view_action_in_listings

commit 03c111397fa24a9774b632ad5bd34b6f2a2df85d
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 17:39:30 2015 +0200

    Be defensive in lookups so that unmigrated sites aren't broken.

commit d7d0ab50ce9441e06c84bd1b89de1a32bd98eeb9
Author: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Date:   Thu Sep 17 17:01:05 2015 +0200

    fix test

commit 0f812928402caa5418d77f923ac19d2f0f5bfbfe
Author: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Date:   Thu Sep 17 16:34:13 2015 +0200

    use ITypeSchema registry instead of site props for view actions detection

commit c8c026d5636207a472a5382b5cdf99e0e6c776e6
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 16:22:53 2015 +0200

    Remove unused test.

commit 0c6933a6ba9335ab786d6614862c69368939f28c
Author: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Date:   Thu Sep 17 15:37:20 2015 +0200

    bunch of navtree properties more handled now, some bugs left

commit 4c5843d45c6fa45bed6f2003ecce65650533c4de
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 15:24:43 2015 +0200

    Remove vocabulary constraints

    Remove vocab constraints on types_link_to_folder_contents and types_use_view_action_in_listings. The registry import step may happen before types are added, so we're unable to cleanly add values to these fields using registry.xml. Since the values are only ever referenced as strings (type_name in types_list) we can get away with potential junk values.

commit 65c49117dbb1aa3fcdf20298fb7d887f81c168fd
Author: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Date:   Thu Sep 17 12:45:27 2015 +0200

    unifie use of navigation_settings

commit 196c6f7fc3ba82420df80ca582fddb99a188f255
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 12:26:34 2015 +0200

    Move typesUseViewActionInListings to the registry.

commit 2e872e32a95060d53cdc1754f8a0ea9a90697710
Author: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Date:   Thu Sep 17 11:57:46 2015 +0200

    bbb adapter

commit aeacdda2d6be1330017b5085f45bbe2d64cbc44b
Author: esteele &lt;eric@esteele.net&gt;
Date:   Thu Sep 17 10:34:22 2015 +0200

    Add ITypesSchema to registry.

commit 8106d015c6a8640e42460e5eb9c04663ce367769
Author: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Date:   Wed Sep 16 17:17:45 2015 +0200

    add navigation root registry value

commit c81a4f98d64b20d72310fe669f3a0bcaa0e2273b
Author: esteele &lt;eric@esteele.net&gt;
Date:   Wed Sep 16 16:56:28 2015 +0200

    Change source for types_link_to_folder_contents

commit 0927d30edf69044f2d6db4ebdc56720fd1c8819b
Author: esteele &lt;eric@esteele.net&gt;
Date:   Wed Sep 16 16:39:54 2015 +0200

    Move redirect_links to the registry.

commit 2737d95587271ce970edbf174ac0319abb0bca74
Author: esteele &lt;eric@esteele.net&gt;
Date:   Wed Sep 16 15:46:35 2015 +0200

    Remove typesLinkToFolderContentsInFC

commit f63266ee075011af88c291479a6bd033f1e2667b
Author: esteele &lt;eric@esteele.net&gt;
Date:   Wed Sep 16 15:36:12 2015 +0200

    Add types_link_to_folder_contents to registry.

commit 2b268cda1da170e795b37dd85c2e6de8231c00c6
Author: esteele &lt;eric@esteele.net&gt;
Date:   Wed Sep 16 11:46:34 2015 +0200

    Remove mark_special_links property, move to registry.

commit f582d3c67c22b095986e6016c0f27adc0689c7a8
Author: esteele &lt;eric@esteele.net&gt;
Date:   Tue Sep 15 17:51:23 2015 +0200

    Move to a new schema, so we can use it in the theming control panel.

commit 27bbf3d97d8aaeaa3118bec130fcae20f7aa6738
Author: esteele &lt;eric@esteele.net&gt;
Date:   Mon Sep 14 18:06:51 2015 +0200

    Changelog

    # Conflicts:
    #	CHANGES.rst

commit c1fbc6577a9b4a3cc664142871979bd56fad1c22
Author: esteele &lt;eric@esteele.net&gt;
Date:   Mon Sep 14 17:32:58 2015 +0200

    Move external_links_open_new_window to the registry

Files changed:
M CHANGES.rst
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/browser/author.py
M Products/CMFPlone/browser/contact_info.py
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/browser/navtree.py
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/sendto.py
M Products/CMFPlone/browser/syndication/adapters.py
M Products/CMFPlone/browser/templates/contact-info-email.pt
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/browser/templates/sendto_template.pt
M Products/CMFPlone/controlpanel/bbb/__init__.py
M Products/CMFPlone/controlpanel/bbb/navigation.py
M Products/CMFPlone/controlpanel/browser/mail.py
M Products/CMFPlone/controlpanel/browser/overview.py
M Products/CMFPlone/controlpanel/browser/site.py
M Products/CMFPlone/controlpanel/browser/types.pt
M Products/CMFPlone/controlpanel/browser/types.py
M Products/CMFPlone/defaultpage.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/patterns/__init__.py
M Products/CMFPlone/profiles/default/properties.xml
M Products/CMFPlone/profiles/default/propertiestool.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
M Products/CMFPlone/skins/plone_content/folder_listing.pt
M Products/CMFPlone/skins/plone_templates/default_error_message.pt
M Products/CMFPlone/tests/link_redirect_view.txt
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testNavTree.py
M Products/CMFPlone/tests/testNavigationView.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testQueryCatalog.py
M Products/CMFPlone/tests/testRegistrationTool.py
M Products/CMFPlone/tests/test_defaultpage.py
M Products/CMFPlone/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4840683..f88e674 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -22,6 +22,9 @@ Changelog
 - Hide document byline viewlet by default.
   [esteele]
 
+- Move portal property email_charset to the registry.
+  [esteele]
+
 - Fix #950: Missing personal toolbar when expanding the horizontal toolbar
   [ichim-david]
 
@@ -31,6 +34,8 @@ Changelog
 - Move calendar_starting_year and calendar_future_years_available to
   registry and Products.Archetypes.
   [pbauer]
+- Use registry lookup for types_use_view_action_in_listings
+  [esteele]
 
 - Add view @@hero to be included by plonetheme.barceloneta with diazo.
   [pbauer]
@@ -40,6 +45,8 @@ Changelog
 
 - remove unused code to create NavTree probably left from Plone 3.0 times
   and since a while handled by plone.app.portlets.
+
+- add navigation root registry value
   [jensens]
 
 - Implement new feed syndication using `NewsML 1 <http://iptc.org/standards/newsml-1/>`_,
@@ -49,6 +56,9 @@ Changelog
 - provide positive number validator
   [vangheem]
 
+- Move external_links_open_new_window, redirect_links to the registry.
+  [esteele]
+
 - Remove invalid_ids portal property as it isn't used.
   [esteele]
 
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index 6e6000e..7d0b713 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -373,7 +373,8 @@ def mailPassword(self, login, REQUEST, immediate=False):
         reset_tool = getToolByName(self, 'portal_password_reset')
         reset = reset_tool.requestReset(member.getId())
 
-        encoding = getUtility(ISiteRoot).getProperty('email_charset', 'utf-8')
+        registry = getUtility(IRegistry)
+        encoding = registry.get('plone.email_charset', 'utf-8')
         mail_text = self.mail_password_template(
             self, REQUEST, member=member, reset=reset,
             password=member.getPassword(), charset=encoding)
@@ -425,7 +426,8 @@ def registeredNotify(self, new_member_id):
         # Rather than have the template try to use the mailhost, we will
         # render the message ourselves and send it from here (where we
         # don't need to worry about 'UseMailHost' permissions).
-        encoding = getUtility(ISiteRoot).getProperty('email_charset', 'utf-8')
+        registry = getUtility(IRegistry)
+        encoding = registry.get('plone.email_charset', 'utf-8')
         mail_text = self.registered_notify_template(
             self, self.REQUEST, member=member, reset=reset, email=email,
             charset=encoding)
diff --git a/Products/CMFPlone/browser/author.py b/Products/CMFPlone/browser/author.py
index 0f71927..66bb948 100644
--- a/Products/CMFPlone/browser/author.py
+++ b/Products/CMFPlone/browser/author.py
@@ -97,7 +97,8 @@ def handle_send(self, action):
         )
 
         mail_host = getUtility(IMailHost)
-        email_charset = self.portal.getProperty('email_charset')
+        registry = getUtility(IRegistry)
+        email_charset = registry.get('plone.email_charset', 'utf-8')
 
         try:
             message = self.feedback_template(
diff --git a/Products/CMFPlone/browser/contact_info.py b/Products/CMFPlone/browser/contact_info.py
index 3e5a50d..189c5f6 100644
--- a/Products/CMFPlone/browser/contact_info.py
+++ b/Products/CMFPlone/browser/contact_info.py
@@ -59,7 +59,8 @@ def send_message(self, data):
         mail_settings = registry.forInterface(IMailSchema, prefix='plone')
         send_to_address = mail_settings.email_from_address
         from_address = mail_settings.email_from_address
-        encoding = portal.getProperty('email_charset')
+        registry = getUtility(IRegistry)
+        encoding = registry.get('plone.email_charset', 'utf-8')
         host = getToolByName(self.context, 'MailHost')
 
         data['url'] = portal.absolute_url()
diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py
index 8af53d6..ae5bd2e 100644
--- a/Products/CMFPlone/browser/navigation.py
+++ b/Products/CMFPlone/browser/navigation.py
@@ -13,6 +13,7 @@
 from Products.CMFPlone.browser.navtree import SitemapQueryBuilder
 from Products.CMFPlone.interfaces import IHideFromBreadcrumbs
 from Products.CMFPlone.interfaces import INavigationSchema
+from Products.CMFPlone.interfaces import ITypesSchema
 from Products.Five import BrowserView
 from zope.component import getMultiAdapter
 from zope.component import getUtility
@@ -39,10 +40,9 @@ def get_id(item):
 
 
 def get_view_url(context):
-    props = getToolByName(context, 'portal_properties')
-    stp = props.site_properties
-    view_action_types = stp.getProperty('typesUseViewActionInListings', ())
-
+    registry = getUtility(IRegistry)
+    view_action_types = registry.get(
+        'plone.types_use_view_action_in_listings', [])
     item_url = get_url(context)
     name = get_id(context)
 
@@ -61,44 +61,41 @@ def siteMap(self):
 
         queryBuilder = SitemapQueryBuilder(context)
         query = queryBuilder()
-
         strategy = getMultiAdapter((context, self), INavtreeStrategy)
 
-        return buildFolderTree(context, obj=context,
-                               query=query, strategy=strategy)
+        return buildFolderTree(
+            context, obj=context,
+            query=query, strategy=strategy
+        )
 
 
 @implementer(INavigationTabs)
 class CatalogNavigationTabs(BrowserView):
 
     def _getNavQuery(self):
-        context = self.context
-        navtree_properties = self.navtree_properties
-
-        customQuery = getattr(context, 'getCustomNavQuery', False)
-        if customQuery is not None and utils.safe_callable(customQuery):
-            query = customQuery()
-        else:
-            query = {}
-
-        rootPath = getNavigationRoot(context)
-        query['path'] = {'query': rootPath, 'depth': 1}
-
+                # check whether we only want actions
         registry = getUtility(IRegistry)
         navigation_settings = registry.forInterface(
             INavigationSchema,
             prefix="plone",
             check=False
         )
-        displayed_types = navigation_settings.displayed_types
-        query['portal_type'] = [t for t in displayed_types]
+        customQuery = getattr(self.context, 'getCustomNavQuery', False)
+        if customQuery is not None and utils.safe_callable(customQuery):
+            query = customQuery()
+        else:
+            query = {}
 
-        sortAttribute = navtree_properties.getProperty('sortAttribute', None)
-        if sortAttribute is not None:
-            query['sort_on'] = sortAttribute
-            sortOrder = navtree_properties.getProperty('sortOrder', None)
-            if sortOrder is not None:
-                query['sort_order'] = sortOrder
+        query['path'] = {
+            'query': getNavigationRoot(self.context),
+            'depth': 1
+        }
+        query['portal_type'] = [t for t in navigation_settings.displayed_types]
+        query['sort_on'] = navigation_settings.sort_tabs_on
+        if navigation_settings.sort_tabs_reversed:
+            query['sort_order'] = 'reverse'
+        else:
+            query['sort_order'] = 'ascending'
 
         if navigation_settings.filter_on_workflow:
             query['review_state'] = navigation_settings.workflow_states_to_show
@@ -112,62 +109,56 @@ def _getNavQuery(self):
 
     def topLevelTabs(self, actions=None, category='portal_tabs'):
         context = aq_inner(self.context)
-
+        registry = getUtility(IRegistry)
+        navigation_settings = registry.forInterface(
+            INavigationSchema,
+            prefix="plone",
+            check=False
+        )
         mtool = getToolByName(context, 'portal_membership')
         member = mtool.getAuthenticatedMember().id
-
-        portal_properties = getToolByName(context, 'portal_properties')
-        self.navtree_properties = getattr(portal_properties,
-                                          'navtree_properties')
-        self.site_properties = getattr(portal_properties,
-                                       'site_properties')
-        self.portal_catalog = getToolByName(context, 'portal_catalog')
+        catalog = getToolByName(context, 'portal_catalog')
 
         if actions is None:
-            context_state = getMultiAdapter((context, self.request),
-                                            name=u'plone_context_state')
+            context_state = getMultiAdapter(
+                (context, self.request),
+                name=u'plone_context_state'
+            )
             actions = context_state.actions(category)
 
         # Build result dict
         result = []
         # first the actions
-        if actions is not None:
-            for actionInfo in actions:
-                data = actionInfo.copy()
-                data['name'] = data['title']
-                result.append(data)
+        for actionInfo in actions:
+            data = actionInfo.copy()
+            data['name'] = data['title']
+            result.append(data)
 
         # check whether we only want actions
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(
-            INavigationSchema,
-            prefix="plone",
-            check=False
-        )
         if not navigation_settings.generate_tabs:
             return result
 
         query = self._getNavQuery()
 
-        rawresult = self.portal_catalog.searchResults(query)
+        rawresult = catalog.searchResults(query)
 
-        def get_link_url(item):
-            linkremote = item.getRemoteUrl and not member == item.Creator
-            if linkremote:
+        def _get_url(item):
+            if item.getRemoteUrl and not member == item.Creator:
                 return (get_id(item), item.getRemoteUrl)
-            else:
-                return False
+            return get_view_url(item)
 
         # now add the content to results
-        idsNotToList = self.navtree_properties.getProperty('idsNotToList', ())
         for item in rawresult:
-            if not (item.getId in idsNotToList or item.exclude_from_nav):
-                id, item_url = get_link_url(item) or get_view_url(item)
-                data = {'name': utils.pretty_title_or_id(context, item),
-                        'id': item.getId,
-                        'url': item_url,
-                        'description': item.Description}
-                result.append(data)
+            if item.exclude_from_nav:
+                continue
+            cid, item_url = _get_url(item)
+            data = {
+                'name': utils.pretty_title_or_id(context, item),
+                'id': item.getId,
+                'url': item_url,
+                'description': item.Description
+            }
+            result.append(data)
 
         return result
 
@@ -177,19 +168,18 @@ class CatalogNavigationBreadcrumbs(BrowserView):
 
     def breadcrumbs(self):
         context = aq_inner(self.context)
-        request = self.request
-        ct = getToolByName(context, 'portal_catalog')
+        catalog = getToolByName(context, 'portal_catalog')
         query = {}
 
         # Check to see if the current page is a folder default view, if so
         # get breadcrumbs from the parent folder
-        if utils.isDefaultPage(context, request):
+        if utils.isDefaultPage(context, self.request):
             currentPath = '/'.join(utils.parent(context).getPhysicalPath())
         else:
             currentPath = '/'.join(context.getPhysicalPath())
         query['path'] = {'query': currentPath, 'navtree': 1, 'depth': 0}
 
-        rawresult = ct(**query)
+        rawresult = catalog(**query)
 
         # Sort items on path length
         dec_result = [(len(r.getPath()), r) for r in rawresult]
@@ -207,9 +197,11 @@ def breadcrumbs(self):
             if rootPath.startswith(itemPath):
                 continue
 
-            id, item_url = get_view_url(item)
-            data = {'Title': utils.pretty_title_or_id(context, item),
-                    'absolute_url': item_url}
+            cid, item_url = get_view_url(item)
+            data = {
+                'Title': utils.pretty_title_or_id(context, item),
+                'absolute_url': item_url
+            }
             result.append(data)
         return result
 
@@ -249,8 +241,8 @@ def breadcrumbs(self):
            and not rootPath.startswith(itemPath):
             base += ({
                 'absolute_url': item_url,
-                'Title': utils.pretty_title_or_id(context, context), },
-            )
+                'Title': utils.pretty_title_or_id(context, context),
+            },)
         return base
 
 
diff --git a/Products/CMFPlone/browser/navtree.py b/Products/CMFPlone/browser/navtree.py
index f88070d..587cce5 100644
--- a/Products/CMFPlone/browser/navtree.py
+++ b/Products/CMFPlone/browser/navtree.py
@@ -1,26 +1,22 @@
+# -*- coding: utf-8 -*-
 # This module contains a function to help build navigation-tree-like structures
 # from catalog queries. It also contains a standard implementation of the
 # strategy/filtering method that uses Plone's navtree_properties to construct
 # navtrees.
-
-from zope.interface import implements
-from zope.component import getMultiAdapter, queryUtility
-from zope.component import getUtility
-
+from AccessControl import ModuleSecurityInfo
+from Acquisition import aq_inner
 from plone.app.layout.navigation.interfaces import INavigationQueryBuilder
 from plone.app.layout.navigation.interfaces import INavtreeStrategy
-
 from plone.app.layout.navigation.navtree import NavtreeStrategyBase
 from plone.app.layout.navigation.root import getNavigationRoot
-
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
-
-from AccessControl import ModuleSecurityInfo
-from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.CMFPlone.interfaces import INavigationSchema
+from zope.component import getMultiAdapter, queryUtility
+from zope.component import getUtility
+from zope.interface import implementer
 
 # Strategy objects for the navtree creation code. You can subclass these
 # to expand the default navtree behaviour, and pass instances of your
@@ -30,14 +26,16 @@
 security.declarePrivate('plone')
 security.declarePrivate('utils')
 
+
+@implementer(INavigationQueryBuilder)
 class NavtreeQueryBuilder(object):
     """Build a navtree query based on the settings in navtree_properties
     """
-    implements(INavigationQueryBuilder)
 
     def __init__(self, context):
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
+        registry = getUtility(IRegistry)
+        navigation_settings = registry.forInterface(INavigationSchema,
+                                                    prefix="plone")
 
         # Acquire a custom nav query if available
         customQuery = getattr(context, 'getCustomNavQuery', None)
@@ -60,9 +58,7 @@ def __init__(self, context):
         else:
             query['path'] = {'query': currentPath, 'navtree': 1}
 
-        topLevel = navtree_properties.getProperty('topLevel', 0)
-        if topLevel and topLevel > 0:
-            query['path']['navtree_start'] = topLevel + 1
+        query['path']['navtree_start'] = 0
 
         # XXX: It'd make sense to use 'depth' for bottomLevel, but it doesn't
         # seem to work with EPI.
@@ -71,18 +67,15 @@ def __init__(self, context):
         query['portal_type'] = utils.typesToList(context)
 
         # Apply the desired sort
-        sortAttribute = navtree_properties.getProperty('sortAttribute', None)
+        sortAttribute = navigation_settings.sort_tabs_on
         if sortAttribute is not None:
             query['sort_on'] = sortAttribute
-            sortOrder = navtree_properties.getProperty('sortOrder', None)
-            if sortOrder is not None:
-                query['sort_order'] = sortOrder
+            if navigation_settings.sort_tabs_reversed:
+                query['sort_order'] = 'desc'
+            else:
+                query['sort_order'] = 'asc'
 
         # Filter on workflow states, if enabled
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(INavigationSchema,
-                                                    prefix="plone")
-
         if navigation_settings.filter_on_workflow:
             query['review_state'] = navigation_settings.workflow_states_to_show
 
@@ -99,58 +92,41 @@ class SitemapQueryBuilder(NavtreeQueryBuilder):
     def __init__(self, context):
         NavtreeQueryBuilder.__init__(self, context)
         portal_url = getToolByName(context, 'portal_url')
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
-        sitemapDepth = navtree_properties.getProperty('sitemapDepth', 2)
+        registry = getUtility(IRegistry)
+        sitemap_depth = registry.get('plone.sitemap_depth', 3)
         self.query['path'] = {'query': portal_url.getPortalPath(),
-                              'depth': sitemapDepth}
+                              'depth': sitemap_depth}
 
 
+@implementer(INavtreeStrategy)
 class SitemapNavtreeStrategy(NavtreeStrategyBase):
     """The navtree building strategy used by the sitemap, based on
     navtree_properties
     """
-    implements(INavtreeStrategy)
-    #adapts(*, ISiteMap)
 
     def __init__(self, context, view=None):
         self.context = context
 
         portal_url = getToolByName(context, 'portal_url')
         self.portal = portal_url.getPortalObject()
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
-        site_properties = getattr(portal_properties, 'site_properties')
-        self.excludedIds = {}
-        for id in navtree_properties.getProperty('idsNotToList', ()):
-            self.excludedIds[id] = True
-        self.parentTypesNQ = \
-            navtree_properties.getProperty('parentMetaTypesNotToQuery', ())
-        self.viewActionTypes = \
-            site_properties.getProperty('typesUseViewActionInListings', ())
-
-        self.showAllParents = \
-            navtree_properties.getProperty('showAllParents', True)
+        registry = getUtility(IRegistry)
+        self.parentTypesNQ = registry.get(
+            'plone.parent_types_not_to_query', [])
+        self.viewActionTypes = registry.get(
+            'plone.types_use_view_action_in_listings', [])
+
+        self.showAllParents = True
         self.rootPath = getNavigationRoot(context)
 
         membership = getToolByName(context, 'portal_membership')
         self.memberId = membership.getAuthenticatedMember().getId()
 
     def nodeFilter(self, node):
-        item = node['item']
-        if getattr(item, 'getId', None) in self.excludedIds:
-            return False
-        elif getattr(item, 'exclude_from_nav', False):
-            return False
-        else:
-            return True
+        return not getattr(node['item'], 'exclude_from_nav', False)
 
     def subtreeFilter(self, node):
         portalType = getattr(node['item'], 'portal_type', None)
-        if portalType is not None and portalType in self.parentTypesNQ:
-            return False
-        else:
-            return True
+        return portalType is None or portalType not in self.parentTypesNQ
 
     def decoratorFactory(self, node):
         context = aq_inner(self.context)
@@ -195,13 +171,15 @@ def decoratorFactory(self, node):
         # BBB getRemoteUrl and link_remote are deprecated, remove in Plone 4
         newNode['getRemoteUrl'] = getattr(item, 'getRemoteUrl', None)
         newNode['useRemoteUrl'] = useRemoteUrl
-        newNode['link_remote'] = newNode['getRemoteUrl'] \
-                                 and newNode['Creator'] != self.memberId
+        newNode['link_remote'] = (
+            newNode['getRemoteUrl'] and newNode['Creator'] != self.memberId
+        )
 
         idnormalizer = queryUtility(IIDNormalizer)
         newNode['normalized_portal_type'] = idnormalizer.normalize(portalType)
-        newNode['normalized_review_state'] = \
-            idnormalizer.normalize(newNode['review_state'])
+        newNode['normalized_review_state'] = idnormalizer.normalize(
+            newNode['review_state']
+        )
         newNode['normalized_id'] = idnormalizer.normalize(newNode['id'])
 
         return newNode
@@ -215,18 +193,13 @@ def showChildrenOf(self, object):
         return True
 
 
+@implementer(INavtreeStrategy)
 class DefaultNavtreeStrategy(SitemapNavtreeStrategy):
     """The navtree strategy used for the default navigation portlet
     """
-    implements(INavtreeStrategy)
-    #adapts(*, INavigationTree)
 
     def __init__(self, context, view=None):
         SitemapNavtreeStrategy.__init__(self, context, view)
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
-        # XXX: We can't do this with a 'depth' query to EPI...
-        self.bottomLevel = navtree_properties.getProperty('bottomLevel', 0)
         if view is not None:
             self.rootPath = view.navigationTreeRootPath()
         else:
@@ -234,10 +207,9 @@ def __init__(self, context, view=None):
 
     def subtreeFilter(self, node):
         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)
-        if sitemapDecision == False:
+        if not sitemapDecision:
             return False
         depth = node.get('depth', 0)
         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:
             return False
-        else:
-            return True
+        return True
diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py
index eb3c655..b502c90 100644
--- a/Products/CMFPlone/browser/search.py
+++ b/Products/CMFPlone/browser/search.py
@@ -10,6 +10,7 @@
 from plone.registry.interfaces import IRegistry
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
+from zope.component import getUtility
 from zope.i18nmessageid import MessageFactory
 from zope.publisher.browser import BrowserView
 
@@ -209,9 +210,9 @@ def __call__(self):
         length = registry.get('plone.search_results_description_length')
         plone_view = getMultiAdapter(
             (self.context, self.request), name='plone')
-        props = getToolByName(self.context, 'portal_properties')
-        stp = props.site_properties
-        view_action_types = stp.getProperty('typesUseViewActionInListings', ())
+        registry = getUtility(IRegistry)
+        view_action_types = registry.get(
+            'plone.types_use_view_action_in_listings', [])
         for item in batch:
             url = item.getURL()
             if item.portal_type in view_action_types:
diff --git a/Products/CMFPlone/browser/sendto.py b/Products/CMFPlone/browser/sendto.py
index 342201f..47a38aa 100644
--- a/Products/CMFPlone/browser/sendto.py
+++ b/Products/CMFPlone/browser/sendto.py
@@ -74,7 +74,8 @@ def handle_send(self, action):
         try:
             # Sends a link of a page to someone.
             host = getUtility(IMailHost)
-            encoding = site.getProperty('email_charset')
+            registry = getUtility(IRegistry)
+            encoding = registry.get('plone.email_charset', 'utf-8')
 
             if not envelope_from:
                 envelope_from = send_from_address
diff --git a/Products/CMFPlone/browser/syndication/adapters.py b/Products/CMFPlone/browser/syndication/adapters.py
index 113049c..6c5b625 100644
--- a/Products/CMFPlone/browser/syndication/adapters.py
+++ b/Products/CMFPlone/browser/syndication/adapters.py
@@ -3,6 +3,7 @@
 from zope.interface import implements
 from zope.interface import Interface
 from zope.component import queryMultiAdapter
+from zope.component import getUtility
 
 from DateTime import DateTime
 from OFS.interfaces import IItem
@@ -16,6 +17,7 @@
 from Products.CMFPlone.interfaces.syndication import IFeedSettings
 from Products.CMFPlone.utils import getSiteLogo
 
+from plone.registry.interfaces import IRegistry
 from plone.uuid.interfaces import IUUID
 from zope.cachedescriptors.property import Lazy as lazy_property
 
@@ -41,10 +43,9 @@ def __init__(self, context):
         self.site = getSite()
         if self.show_about:
             self.pm = getToolByName(self.context, 'portal_membership')
-        pprops = getToolByName(self.context, 'portal_properties')
-        self.site_props = pprops.site_properties
-        self.view_action_types = self.site_props.getProperty(
-            'typesUseViewActionInListings', ('File', 'Image'))
+        registry = getUtility(IRegistry)
+        self.view_action_types = registry.get(
+            'plone.types_use_view_action_in_listings', [])
 
     @lazy_property
     def show_about(self):
diff --git a/Products/CMFPlone/browser/templates/contact-info-email.pt b/Products/CMFPlone/browser/templates/contact-info-email.pt
index d15534a..0675b8c 100644
--- a/Products/CMFPlone/browser/templates/contact-info-email.pt
+++ b/Products/CMFPlone/browser/templates/contact-info-email.pt
@@ -5,8 +5,8 @@
      i18n:domain="plone"
      tal:omit-tag=""
      tal:define="portal context/@@plone_portal_state/portal;
-                 charset portal/email_charset|string:utf-8;
-                 from_name python:context.portal_registry['plone.email_from_name'];
+                 charset python:context.portal_registry.get('plone.email_charset', 'utf-8');
+                 from_name python:context.portal_registry.get('plone.email_from_name', '');
                  dummy python:request.RESPONSE.setHeader('Content-Type', 'text/plain;;charset=%s' % charset);"
 ><span tal:omit-tag="" tal:content="options/message | nothing" />
 
diff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt
index dc2587b..e01b2b6 100644
--- a/Products/CMFPlone/browser/templates/search.pt
+++ b/Products/CMFPlone/browser/templates/search.pt
@@ -220,8 +220,7 @@
                       <metal:results tal:condition="batch"
                                      tal:define="isAnon context/@@plone_portal_state/anonymous;
                                                  toLocalizedTime nocall: context/@@plone/toLocalizedTime;
-                                                 site_properties context/portal_properties/site_properties;
-                                                 use_view_action site_properties/typesUseViewActionInListings|python:();
+                                                 use_view_action python:context.portal_registry.get('plone.types_use_view_action_in_listings', []);
                                                  allowAnonymousViewAbout python:context.portal_registry['plone.allow_anon_views_about'];
                                                  show_about python:not isAnon or allowAnonymousViewAbout;">
                         <ol class="searchResults">
diff --git a/Products/CMFPlone/browser/templates/sendto_template.pt b/Products/CMFPlone/browser/templates/sendto_template.pt
index a83e4d2..904beec 100644
--- a/Products/CMFPlone/browser/templates/sendto_template.pt
+++ b/Products/CMFPlone/browser/templates/sendto_template.pt
@@ -5,7 +5,7 @@
      i18n:domain="plone"
      tal:omit-tag=""
      tal:define="utool nocall:context/portal_url;
-                 charset context/email_charset|string:utf-8;
+                 charset python:context.portal_registry.get('email_charset', 'utf-8');
                  dummy python:request.RESPONSE.setHeader('Content-Type', 'text/html;;charset=%s' % charset)"
 ><div i18n:translate="sendto_mailtemplate_body" tal:omit-tag="">
 This link is sent to you from <span i18n:name="portal_url" tal:omit-tag="" tal:replace="structure utool" />
diff --git a/Products/CMFPlone/controlpanel/bbb/__init__.py b/Products/CMFPlone/controlpanel/bbb/__init__.py
index e69de29..5941601 100644
--- a/Products/CMFPlone/controlpanel/bbb/__init__.py
+++ b/Products/CMFPlone/controlpanel/bbb/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-`
diff --git a/Products/CMFPlone/controlpanel/bbb/navigation.py b/Products/CMFPlone/controlpanel/bbb/navigation.py
index 410a533..ba396a7 100644
--- a/Products/CMFPlone/controlpanel/bbb/navigation.py
+++ b/Products/CMFPlone/controlpanel/bbb/navigation.py
@@ -1,22 +1,23 @@
 # -*- coding: utf-8 -*-
+from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import INavigationSchema
 from Products.CMFPlone.interfaces import IPloneSiteRoot
-from plone.registry.interfaces import IRegistry
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import getUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@adapter(IPloneSiteRoot)
+@implementer(INavigationSchema)
 class NavigationControlPanelAdapter(object):
 
-    adapts(IPloneSiteRoot)
-    implements(INavigationSchema)
-
     def __init__(self, context):
         self.context = context
         registry = getUtility(IRegistry)
         self.navigation_settings = registry.forInterface(
-            INavigationSchema, prefix="plone")
+            INavigationSchema,
+            prefix="plone"
+        )
 
     def get_generate_tabs(self):
         return self.navigation_settings.generate_tabs
@@ -73,3 +74,11 @@ def set_workflow_states_to_show(self, value):
     workflow_states_to_show = property(
         get_workflow_states_to_show,
         set_workflow_states_to_show)
+
+    @property
+    def root(self):
+        return self.navigation_settings.root
+
+    @root.setter
+    def root(self, value):
+        self.navigation_settings.root = value
diff --git a/Products/CMFPlone/controlpanel/browser/mail.py b/Products/CMFPlone/controlpanel/browser/mail.py
index 607891d..a8fa85a 100644
--- a/Products/CMFPlone/controlpanel/browser/mail.py
+++ b/Products/CMFPlone/controlpanel/browser/mail.py
@@ -60,7 +60,7 @@ def handle_test_action(self, action):
                    "working!\n\n"
                    "Have a nice day.\n\n"
                    "Love,\n\nPlone")
-        email_charset = self.context.getProperty('email_charset')
+        email_charset = mail_settings.email_charset
         subject = "Test e-mail from Plone"
 
         # Make the timeout incredibly short. This is enough time for most mail
diff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py
index 9b4507d..b092331 100644
--- a/Products/CMFPlone/controlpanel/browser/overview.py
+++ b/Products/CMFPlone/controlpanel/browser/overview.py
@@ -73,7 +73,8 @@ def upgrade_warning(self):
 
     def mailhost_warning(self):
         registry = getUtility(IRegistry)
-        mail_settings = registry.forInterface(IMailSchema, prefix='plone')
+        mail_settings = registry.forInterface(
+            IMailSchema, prefix='plone', check=False)
         mailhost = mail_settings.smtp_host
         email = mail_settings.email_from_address
         if mailhost and email:
diff --git a/Products/CMFPlone/controlpanel/browser/site.py b/Products/CMFPlone/controlpanel/browser/site.py
index 93a2f1c..a01cda5 100644
--- a/Products/CMFPlone/controlpanel/browser/site.py
+++ b/Products/CMFPlone/controlpanel/browser/site.py
@@ -3,6 +3,7 @@
 from Products.CMFPlone.interfaces import ISiteSchema
 from plone.app.registry.browser import controlpanel
 from plone.formwidget.namedfile.widget import NamedImageFieldWidget
+from z3c.form import interfaces
 
 
 class SiteControlPanelForm(controlpanel.RegistryEditForm):
@@ -17,6 +18,11 @@ def updateFields(self):
         super(SiteControlPanelForm, self).updateFields()
         self.fields['site_logo'].widgetFactory = NamedImageFieldWidget
 
+    def updateWidgets(self):
+        super(SiteControlPanelForm, self).updateWidgets()
+        # hide the default_page field/widgets
+        self.widgets['default_page'].mode = interfaces.HIDDEN_MODE
+
 
 class SiteControlPanel(controlpanel.ControlPanelFormWrapper):
     form = SiteControlPanelForm
diff --git a/Products/CMFPlone/controlpanel/browser/types.pt b/Products/CMFPlone/controlpanel/browser/types.pt
index c6f52bb..1bc6d9d 100644
--- a/Products/CMFPlone/controlpanel/browser/types.pt
+++ b/Products/CMFPlone/controlpanel/browser/types.pt
@@ -93,6 +93,15 @@
                         </label>
                         <br />
 
+                        <input id="default_page_type"
+                               type="checkbox"
+                               class="noborder"
+                               name="default_page_type"
+                               tal:attributes="checked python: view.is_default_page_type() and 'checked' or None" />
+                        <label for="default_page_type" i18n:translate="types_controlpanel_default_page_type">
+                            Can be used as a default page
+                        </label>
+                        <br />
 
                         <tal:block tal:condition="python:type_id=='Link'">
 
diff --git a/Products/CMFPlone/controlpanel/browser/types.py b/Products/CMFPlone/controlpanel/browser/types.py
index 10663e0..0a76e78 100644
--- a/Products/CMFPlone/controlpanel/browser/types.py
+++ b/Products/CMFPlone/controlpanel/browser/types.py
@@ -121,9 +121,6 @@ def __call__(self):
                 portal_types = getToolByName(self.context, 'portal_types')
                 portal_repository = getToolByName(self.context,
                                                   'portal_repository')
-                portal_properties = getToolByName(self.context,
-                                                  'portal_properties')
-                site_properties = getattr(portal_properties, 'site_properties')
 
                 fti = getattr(portal_types, type_id)
 
@@ -154,7 +151,7 @@ def __call__(self):
                     else:
                         # check if we should add
                         if type_id not in versionable_types:
-                            versionable_types.append(type_id)
+                            versionable_types.append(safe_unicode(type_id))
                         self.add_versioning_behavior(fti)
 
                     for policy in portal_repository.listPolicies():
@@ -174,9 +171,10 @@ def __call__(self):
                         versionable_types
                     )
 
-                searchable = form.get('searchable', False)
-
+                # Set Registry-entries
                 registry = getUtility(IRegistry)
+
+                searchable = form.get('searchable', False)
                 site_settings = registry.forInterface(
                     ISearchSchema, prefix="plone")
                 blacklisted = [i for i in site_settings.types_not_searched]
@@ -186,10 +184,19 @@ def __call__(self):
                     blacklisted.append(type_id)
                 site_settings.types_not_searched = tuple(blacklisted)
 
+                default_page_type = form.get('default_page_type', False)
+                types_settings = registry.forInterface(
+                    ITypesSchema, prefix="plone")
+                default_page_types = [
+                    safe_unicode(i) for i in types_settings.default_page_types]
+                if default_page_type and type_id not in default_page_types:
+                    default_page_types.append(safe_unicode(type_id))
+                elif not default_page_type and type_id in default_page_types:
+                    default_page_types.remove(type_id)
+                types_settings.default_page_types = default_page_types
+
                 redirect_links = form.get('redirect_links', False)
-                site_properties.manage_changeProperties(
-                    redirect_links=redirect_links
-                )
+                types_settings.redirect_links = redirect_links
 
             # Update workflow
             if self.have_new_workflow() \
@@ -318,12 +325,17 @@ def is_searchable(self):
         blacklisted = settings.types_not_searched
         return (self.type_id not in blacklisted)
 
+    def is_default_page_type(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITypesSchema, prefix="plone")
+        return self.type_id in settings.default_page_types
+
     def is_redirect_links_enabled(self):
-        context = aq_inner(self.context)
-        portal_properties = getToolByName(context, 'portal_properties')
-        site_props = portal_properties.site_properties
-        return self.type_id == 'Link' \
-            and site_props.getProperty('redirect_links') or False
+        if self.type_id == 'Link':
+            registry = getUtility(IRegistry)
+            settings = registry.forInterface(ITypesSchema, prefix="plone")
+            return settings.redirect_links
+        return False
 
     @memoize
     def current_workflow(self):
diff --git a/Products/CMFPlone/defaultpage.py b/Products/CMFPlone/defaultpage.py
index 365a8d2..c274291 100644
--- a/Products/CMFPlone/defaultpage.py
+++ b/Products/CMFPlone/defaultpage.py
@@ -2,11 +2,13 @@
 from Acquisition import aq_base
 from Acquisition import aq_parent
 from Acquisition import aq_inner
+from plone.registry.interfaces import IRegistry
 from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
 from Products.CMFCore.interfaces import IFolderish
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
+from zope.component import getUtility
 from zope.component import queryAdapter
 from zope.component import queryUtility
 from zope.component import queryMultiAdapter
@@ -87,13 +89,10 @@ def get_default_page(context):
             return page
 
     # 4. Test for default sitewide default_page setting
-    pp = getattr(portal, 'portal_properties', None)
-    if pp is not None:
-        site_properties = getattr(pp, 'site_properties', None)
-        if site_properties is not None:
-            for page in site_properties.getProperty('default_page', []):
-                if page in ids:
-                    return page
+    registry = getUtility(IRegistry)
+    for page in registry.get('plone.default_page', []):
+        if page in ids:
+            return page
 
 
 def is_default_page(container, obj):
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 3885e19..815bd50 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -10,6 +10,7 @@
 from controlpanel import IEditingSchema
 from controlpanel import ILanguageSchema
 from controlpanel import IFilterSchema
+from controlpanel import ILinkSchema
 from controlpanel import ILoginSchema
 from controlpanel import IMaintenanceSchema
 from controlpanel import IMailSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 2df5602..b27bd2c 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -803,6 +803,40 @@ class INavigationSchema(Interface):
         default=True,
         required=False)
 
+    sort_tabs_on = schema.Choice(
+        title=_(u"Sort tabs on"),
+        description=_(
+            u"Index used to sort the tabs"
+        ),
+        required=True,
+        default=u'getObjPositionInParent',
+        vocabulary=SimpleVocabulary([
+            # there is no vocabulary of sortable indexes by now, so hard code
+            # some options here
+            SimpleTerm(
+                'getObjPositionInParent',
+                'getObjPositionInParent',
+                _(u'Position in Parent')
+            ),
+            SimpleTerm(
+                'sortable_title',
+                'sortable_title',
+                _(u'Title')
+            ),
+            SimpleTerm(
+                'getId',
+                'getId',
+                _(u'Short Name (ID)')
+            ),
+        ]),
+    )
+    sort_tabs_reversed = schema.Bool(
+        title=_(u"Reversed sort order for tabs."),
+        description=_(
+            u"Sort tabs in descending."),
+        default=False,
+        required=False)
+
     displayed_types = schema.Tuple(
         title=_(u"Displayed content types"),
         description=_(
@@ -847,6 +881,32 @@ class INavigationSchema(Interface):
         default=True,
         required=False)
 
+    root = schema.TextLine(
+        title=_(
+            u"Root"),
+        description=_(
+            u"Path to be used as navigation root, relative to Plone site root."
+            u"Starts with '/'"
+        ),
+        default=u'/',
+        required=True
+    )
+
+    sitemap_depth = schema.Int(
+        title=_(u"Sitemap depth"),
+        description=_(u"Number of folder levels to show in the site map."),
+        default=3,
+        required=True
+    )
+
+    parent_types_not_to_query = schema.List(
+        title=_(u"Hide children of these types"),
+        description=_(u"Hide content inside the following types in Navigation."),
+        default=[u'TempFolder'],
+        value_type=schema.TextLine(),
+        required=False,
+    )
+
 
 class ISearchSchema(Interface):
 
@@ -1044,6 +1104,34 @@ class ISiteSchema(Interface):
         required=False,
     )
 
+    default_page = schema.List(
+        title=_(u'Default page ids'),
+        description=_(
+            u"Select which ids can act as fallback default pages for",
+            u"a container."
+        ),
+        required=True,
+        default=[u'index_html',
+                 u'index.html',
+                 u'index.htm',
+                 u'FrontPage'],
+        value_type=schema.TextLine()
+    )
+
+    roles_allowed_to_add_keywords = schema.List(
+        title=_(u'Roles that can add keywords'),
+        description=_(
+            u"help_allow_roles_to_add_keywords",
+            default=u"Only the following roles can add new keywords "),
+        required=False,
+        default=[
+            u"Manager",
+            u"Site Administrator",
+            u"Reviewer",
+        ],
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"),
+    )
+
 
 class IDateAndTimeSchema(Interface):
     """Controlpanel settings for date and time related settings.
@@ -1082,8 +1170,57 @@ class IDateAndTimeSchema(Interface):
 
 
 class ITypesSchema(Interface):
+    """Controlpanel settings for the types settings.
     """
-    """
+    types_link_to_folder_contents = schema.List(
+        title=_(u'Types linking to folder contents in folder contents view'),
+        description=_(
+            u"help_types_link_to_folder_contents",
+            default=u"When clicking items in folder contents view, these "
+                    u"types will display their contents instead of using "
+                    u"their default view."),
+        required=False,
+        default=[u'Folder'],
+        value_type=schema.TextLine()
+    )
+
+    types_use_view_action_in_listings = schema.List(
+        title=_(u'Types which use the view action in listing views.'),
+        description=_(
+            u"help_types_use_view_action_in_listings",
+            default=u"When clicking items in listing views, these "
+                    u"types will use the '/view' action instead of using "
+                    u"their default view."),
+        required=False,
+        default=[u'Image',
+                 u'File'],
+        value_type=schema.TextLine(),
+    )
+
+    redirect_links = schema.Bool(
+        title=_(u"Redirect links"),
+        description=_(
+            u"help_redirect_links",
+            default=u"When clicking on a Link type, should the user be "
+                    u"taken to the default view or be redirected to the "
+                    u"Link's URL?"),
+        required=False,
+        default=True
+    )
+
+    default_page_types = schema.List(
+        title=_(u"Types that can be set as a default page"),
+        description=_(
+            u"The content types that should be available for selection "
+            u"when setting a defult page."),
+        required=False,
+        default=[
+            u'Document',
+            u'Event',
+            u'News Item',
+        ],
+        value_type=schema.TextLine()
+    )
 
 
 class IMailSchema(Interface):
@@ -1155,6 +1292,13 @@ class IMailSchema(Interface):
         default=None,
         required=True)
 
+    email_charset = schema.ASCIILine(
+        title=_(u"Email characterset"),
+        description=_(u'Characterset to use when sending emails.'),
+        default='utf-8',
+        required=True,
+    )
+
 
 class IMarkupSchema(Interface):
 
@@ -1311,3 +1455,18 @@ class ILoginSchema(Interface):
         default=False,
         required=False
     )
+
+
+class ILinkSchema(Interface):
+
+    external_links_open_new_window = schema.Bool(
+        title=_(u'Open external links in new a window'),
+        description=_(u''),
+        default=False,
+        required=False)
+
+    mark_special_links = schema.Bool(
+        title=_(u'Mark special links'),
+        description=_(u'Marks external or special protocol links with class.'),
+        default=True,
+        required=False)
diff --git a/Products/CMFPlone/patterns/__init__.py b/Products/CMFPlone/patterns/__init__.py
index 4bd1375..da714ad 100644
--- a/Products/CMFPlone/patterns/__init__.py
+++ b/Products/CMFPlone/patterns/__init__.py
@@ -1,6 +1,7 @@
 from borg.localrole.interfaces import IFactoryTempFolder
 from Products.CMFPlone.interfaces import IPatternsSettings
 from Products.CMFPlone.interfaces import ITinyMCESchema
+from Products.CMFPlone.interfaces import ILinkSchema
 from zope.interface import implements
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
@@ -169,14 +170,14 @@ def __init__(self, context, request, field):
 
     def mark_special_links(self):
         result = {}
-        properties = getToolByName(self.context, "portal_properties")
-        props = getattr(properties, 'site_properties')
-
-        if not props:
-            return result
-        msl = props.getProperty('mark_special_links', 'false')
-        elonw = props.getProperty('external_links_open_new_window', 'false')
-        if msl == 'true' or elonw == 'true':
+
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ILinkSchema, prefix="plone", check=False)
+
+        msl = settings.mark_special_links
+        elonw = settings.external_links_open_new_window
+        if msl or elonw:
             result = {'data-pat-markspeciallinks':
                       ('{"external_links_open_new_window": "%s",'
                        '"mark_special_links": "%s"}' % (elonw, msl))}
diff --git a/Products/CMFPlone/profiles/default/properties.xml b/Products/CMFPlone/profiles/default/properties.xml
index 9f2f3a3..0f396ad 100644
--- a/Products/CMFPlone/profiles/default/properties.xml
+++ b/Products/CMFPlone/profiles/default/properties.xml
@@ -2,5 +2,4 @@
 <site>
  <property name="title">Site</property>
  <property name="description"></property>
- <property name="email_charset" type="string">utf-8</property>
 </site>
diff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml
index 43a15c3..ed30e6f 100644
--- a/Products/CMFPlone/profiles/default/propertiestool.xml
+++ b/Products/CMFPlone/profiles/default/propertiestool.xml
@@ -2,67 +2,8 @@
 <object name="portal_properties" meta_type="Plone Properties Tool">
  <object name="navtree_properties" meta_type="Plone Property Sheet">
   <property name="title">NavigationTree properties</property>
-  <property name="sortAttribute"
-     type="string">getObjPositionInParent</property>
-  <property name="sortOrder" type="string">asc</property>
-  <property name="sitemapDepth" type="int">3</property>
-  <property name="name" type="string"></property>
-  <property name="root" type="string">/</property>
-  <property name="currentFolderOnlyInNavtree" type="boolean">False</property>
-  <property name="includeTop" type="boolean">True</property>
-  <property name="topLevel" type="int">0</property>
-  <property name="bottomLevel" type="int">0</property>
-  <property name="showAllParents" type="boolean">True</property>
-  <property name="idsNotToList" type="lines"/>
-  <property name="parentMetaTypesNotToQuery" type="lines">
-   <element value="TempFolder"/>
-  </property>
-  <property name="metaTypesNotToList" type="lines">
-   <element value="ATBooleanCriterion"/>
-   <element value="ATDateCriteria"/>
-   <element value="ATDateRangeCriterion"/>
-   <element value="ATListCriterion"/>
-   <element value="ATPortalTypeCriterion"/>
-   <element value="ATReferenceCriterion"/>
-   <element value="ATSelectionCriterion"/>
-   <element value="ATSimpleIntCriterion"/>
-   <element value="ATSimpleStringCriterion"/>
-   <element value="ATSortCriterion"/>
-   <element value="ChangeSet"/>
-   <element value="Discussion Item"/>
-   <element value="Plone Site"/>
-   <element value="TempFolder"/>
-   <element value="ATCurrentAuthorCriterion"/>
-   <element value="ATPathCriterion"/>
-   <element value="ATRelativePathCriterion"/>
-  </property>
  </object>
  <object name="site_properties" meta_type="Plone Property Sheet">
   <property name="title">Site wide properties</property>
-  <property name="default_charset" type="string">utf-8</property>
-  <property name="allowRolesToAddKeywords" type="lines">
-   <element value="Manager"/>
-   <element value="Site Administrator"/>
-   <element value="Reviewer"/>
-  </property>
-  <property name="default_page" type="lines">
-   <element value="index_html"/>
-   <element value="index.html"/>
-   <element value="index.htm"/>
-   <element value="FrontPage"/>
-  </property>
-  <property name="search_results_description_length" type="int">160</property>
-  <property name="ellipsis" type="string">...</property>
-  <property name="typesLinkToFolderContentsInFC" type="lines">
-   <element value="Folder"/>
-  </property>
-  <property name="typesUseViewActionInListings" type="lines">
-   <element value="Image"/>
-   <element value="File"/>
-  </property>
-  <property name="external_links_open_new_window"
-     type="string">false</property>
-  <property name="mark_special_links" type="string">false</property>
-  <property name="redirect_links" type="boolean">True</property>
  </object>
 </object>
diff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml
index 6d06a66..c4d4de1 100644
--- a/Products/CMFPlone/profiles/dependencies/registry.xml
+++ b/Products/CMFPlone/profiles/dependencies/registry.xml
@@ -26,6 +26,8 @@
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.ISocialMediaSchema"
            prefix="plone" />
+  <records interface="Products.CMFPlone.interfaces.ITypesSchema"
+           prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IImagingSchema"
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.ILoginSchema"
diff --git a/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt b/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
index 9d8c98f..5ff3b8c 100644
--- a/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
+++ b/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
@@ -22,7 +22,7 @@
                      item_layout here/getLayout;
                      override python: {'Link': 'link_view'};
                      item_macro python:path('here/%s/macros/content-core | nothing' % override.get(item_type, item_layout));
-                     use_view_action site_properties/typesUseViewActionInListings|python:();
+                     use_view_action python:context.portal_registry.get('plone.types_use_view_action_in_listings', []);
                      item_url context/absolute_url;
                      normalizeString nocall: context/plone_utils/normalizeString;
                      item_type_class python: 'contenttype-' + normalizeString(item_type);
diff --git a/Products/CMFPlone/skins/plone_content/folder_listing.pt b/Products/CMFPlone/skins/plone_content/folder_listing.pt
index 7494c36..a445389 100644
--- a/Products/CMFPlone/skins/plone_content/folder_listing.pt
+++ b/Products/CMFPlone/skins/plone_content/folder_listing.pt
@@ -30,8 +30,7 @@
                         more_url more_url|request/more_url|string:folder_contents;
                         is_a_topic python:context.portal_type=='Topic';
                         folderContents folderContents|nothing; folderContents python:folderContents or is_a_topic and context.queryCatalog(batch=True, **contentFilter) or context.getFolderContents(contentFilter, batch=True, b_size=limit_display or 100);
-                        site_properties context/portal_properties/site_properties;
-                        use_view_action site_properties/typesUseViewActionInListings|python:();
+                        use_view_action python:context.portal_registry['plone.types_use_view_action_in_listings'];
                         Batch python:modules['Products.CMFPlone'].Batch;
                         b_start python:request.get('b_start', 0);
                         batch python:folderContents if isinstance(folderContents, Batch) else Batch(folderContents, limit_display or 100, int(b_start), orphan=1);
diff --git a/Products/CMFPlone/skins/plone_templates/default_error_message.pt b/Products/CMFPlone/skins/plone_templates/default_error_message.pt
index a77f725..37352a9 100644
--- a/Products/CMFPlone/skins/plone_templates/default_error_message.pt
+++ b/Products/CMFPlone/skins/plone_templates/default_error_message.pt
@@ -60,10 +60,9 @@
                     <tal:suggestions define="first_parent redirection_view/find_first_parent;
                                              similar_items redirection_view/search_for_similar;
                                              plone_view context/@@plone;
-                                             site_properties context/portal_properties/site_properties;
-                                             use_view_action site_properties/typesUseViewActionInListings|python:();
-                                             desc_length site_properties/search_results_description_length;
-                                             desc_ellipsis site_properties/ellipsis;
+                                             registry context/portal_registry;
+                                             use_view_action python:registry['plone.types_use_view_action_in_listings'];
+                                             desc_length python:registry['plone.search_results_description_length'];
                                              normalizeString nocall:plone_view/normalizeString;"
                                      condition="python:first_parent is not None or similar_items">
 
@@ -79,7 +78,7 @@
                                 <a href="${url}"
                                    tal:define="item_wf_state_class python:' state-' + context.portal_workflow.getInfoFor(first_parent, 'review_state', '');"
                                    tal:attributes="class python:'contenttype-' + normalizeString(result_type) + item_wf_state_class">${first_parent/Title}</a>
-                                <span tal:content="python:plone_view.cropText(first_parent.Description(), desc_length, desc_ellipsis)" class="discreet"> Description </span>
+                                <span tal:content="python:plone_view.cropText(first_parent.Description(), desc_length)" class="discreet"> Description </span>
                             </li>
                         </tal:firstparent>
 
@@ -90,7 +89,7 @@
                                 <a href="${url}"
                                    tal:define="item_wf_state_class string: state-${similar/review_state};"
                                    tal:attributes="class python:'contenttype-' + normalizeString(result_type) + item_wf_state_class">${similar/pretty_title_or_id}</a>
-                                <span tal:content="python:plone_view.cropText(similar.Description or '', desc_length, desc_ellipsis)" class="discreet"> Description </span>
+                                <span tal:content="python:plone_view.cropText(similar.Description or '', desc_length)" class="discreet"> Description </span>
                             </li>
                         </tal:similar>
 
diff --git a/Products/CMFPlone/tests/link_redirect_view.txt b/Products/CMFPlone/tests/link_redirect_view.txt
index 341503b..fe431b8 100644
--- a/Products/CMFPlone/tests/link_redirect_view.txt
+++ b/Products/CMFPlone/tests/link_redirect_view.txt
@@ -29,7 +29,7 @@ the 'redirect_links' property is on by default::
 But if we turn off 'redirect_links', visiting the link should redirect us to
 plone.org::
 
-  >>> self.portal.portal_properties.site_properties.redirect_links = False
+  >>> self.portal.portal_registry['plone.redirect_links'] = False
   >>> transaction.commit()
   >>> browser.open('http://nohost/plone/link')
   >>> browser.url
@@ -38,7 +38,7 @@ plone.org::
 Now let's log in as someone who is allowed to edit the link.  They won't get
 redirected, even though 'redirect_links' is re-enabled::
 
-  >>> self.portal.portal_properties.site_properties.redirect_links = True
+  >>> self.portal.portal_registry['plone.redirect_links'] = True
   >>> transaction.commit()
   >>> browser.open('http://nohost/plone/login')
   >>> browser.getControl('Login Name').value = TEST_USER_NAME
@@ -56,7 +56,7 @@ for anonymous users::
 
 If we turn redirect_links back off, that message should not be present::
 
-  >>> self.portal.portal_properties.site_properties.redirect_links = False
+  >>> self.portal.portal_registry['plone.redirect_links'] = False
   >>> transaction.commit()
   >>> browser.open('http://nohost/plone/link')
   >>> browser.url
@@ -80,7 +80,7 @@ Therefore we change the location of the link and set it as default view for the
 
 We turn on the redirect_link option again and create a browser for anonymous users:
 
-  >>> self.portal.portal_properties.site_properties.redirect_links = True
+  >>> self.portal.portal_registry['plone.redirect_links'] = True
   >>> transaction.commit()
   >>> anon = Browser(app)
   >>> anon.handleErrors = False
diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index 11cfc79..b523944 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -4,13 +4,13 @@
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing import setRoles
 from plone.namedfile.file import NamedBlobFile
+from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
 from Products.CMFPlone.utils import _createObjectByType
 from Products.CMFPlone.PloneFolder import ReplaceableWrapper
-from zope.event import notify
-from zope.traversing.interfaces import BeforeTraverseEvent
+from zope.component import getUtility
 import difflib
 import re
 import transaction
@@ -138,8 +138,8 @@ def testBrowserDefaultMixinFolderIndexHtml(self):
                          (self.portal.folder, ['index_html'],))
 
     def testBrowserDefaultMixinFolderGlobalDefaultPage(self):
-        getToolByName(self.portal, "portal_properties") \
-            .site_properties.manage_changeProperties(default_page=['foo'])
+        registry = getUtility(IRegistry)
+        registry['plone.default_page'] = [u'foo']
         self.portal.folder.invokeFactory('Document', 'foo')
         self.assertEqual(self.putils.browserDefault(self.portal.folder),
                          (self.portal.folder, ['foo']))
@@ -233,11 +233,11 @@ def testFolderDefaultPageSameAsSelfWithPageMissing(self):
         )
 
     def testDefaultPageSetting(self):
-        sp = getToolByName(self.portal, "portal_properties").site_properties
-        default = sp.getProperty('default_page', [])
+        registry = getUtility(IRegistry)
+        default = registry.get('plone.default_page', [])
         self.assertEqual(
             default,
-            ('index_html', 'index.html', 'index.htm', 'FrontPage')
+            [u'index_html', u'index.html', u'index.htm', u'FrontPage']
             )
 
 
diff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py
index ceb8c8f..91c046b 100644
--- a/Products/CMFPlone/tests/testNavTree.py
+++ b/Products/CMFPlone/tests/testNavTree.py
@@ -464,7 +464,7 @@ def testCurrentParent(self):
 class TestNavigationRoot(PloneTestCase.PloneTestCase):
 
     def testGetNavigationRootPropertyNotSet(self):
-        self.portal.portal_properties.navtree_properties._delProperty('root')
+        self.portal.portal_registry['plone.root'] = u'/'
         root = getNavigationRoot(self.portal)
         self.assertEqual(root, '/'.join(self.portal.getPhysicalPath()))
 
@@ -484,8 +484,7 @@ def testGetNavigationRootPropertyIsFolder(self):
         folderPath = '/'.join(self.folder.getPhysicalPath())
         portalPath = '/'.join(self.portal.getPhysicalPath())
         relativePath = folderPath[len(portalPath):]
-        self.portal.portal_properties.navtree_properties \
-                .manage_changeProperties(root=relativePath)
+        self.portal.portal_registry['plone.root'] = unicode(relativePath)
         root = getNavigationRoot(self.portal)
         self.assertEqual(root, folderPath)
 
diff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py
index 4a38956..f42ed0e 100644
--- a/Products/CMFPlone/tests/testNavigationView.py
+++ b/Products/CMFPlone/tests/testNavigationView.py
@@ -1,19 +1,18 @@
-from zope.component import getUtility
-from zope.interface import directlyProvides
+# -*- coding: utf-8 -*-
 from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import INavigationSchema
-
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone.tests import dummy
-from Products.CMFPlone.tests.utils import validateCSSIdentifier
-from Products.CMFPlone.tests.utils import folder_position
-
-#from Products.CMFPlone.browser.navigation import CatalogNavigationTree
-from Products.CMFPlone.browser.navigation import CatalogSiteMap
-from Products.CMFPlone.browser.navigation import CatalogNavigationTabs
 from Products.CMFPlone.browser.navigation import CatalogNavigationBreadcrumbs
+from Products.CMFPlone.browser.navigation import CatalogNavigationTabs
+from Products.CMFPlone.browser.navigation import CatalogSiteMap
 from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs
 from Products.CMFPlone.interfaces import IHideFromBreadcrumbs
+from Products.CMFPlone.interfaces import INavigationSchema
+from Products.CMFPlone.interfaces import ITypesSchema
+from Products.CMFPlone.tests import dummy
+from Products.CMFPlone.tests import PloneTestCase
+from Products.CMFPlone.tests.utils import folder_position
+from Products.CMFPlone.tests.utils import validateCSSIdentifier
+from zope.component import getUtility
+from zope.interface import directlyProvides
 
 portal_name = PloneTestCase.portal_name
 
@@ -29,6 +28,11 @@ def afterSetUp(self):
         self.request = self.app.REQUEST
         self.populateSite()
         self.setupAuthenticator()
+        registry = getUtility(IRegistry)
+        self.navigation_settings = registry.forInterface(
+            INavigationSchema,
+            prefix='plone'
+        )
 
     def populateSite(self):
         self.setRoles(['Manager'])
@@ -78,41 +82,12 @@ def testNavTreeExcludesItemsWithExcludeProperty(self):
             if c['item'].getPath() == '/plone/folder2':
                 self.fail()
 
-    def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
+    def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProp(self):
+        # Make sure excluded items are not included in the navtree
         self.portal.folder2.setExcludeFromNav(True)
         self.portal.folder2.reindexObject()
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(showAllParents=True)
-        view = self.view_class(self.portal.folder2.doc21, self.request)
-        tree = view.navigationTree()
-        self.assertTrue(tree)
-        found = False
-        for c in tree['children']:
-            if c['item'].getPath() == '/plone/folder2':
-                found = True
-                break
-        self.assertTrue(found)
+        self.navigation_settings.show_excluded_items = True
 
-    def testNavTreeExcludesItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'])
-        view = self.view_class(self.portal.folder1.doc11, self.request)
-        tree = view.navigationTree()
-        self.assertTrue(tree)
-        for c in tree['children']:
-            if c['item'].getPath() == '/plone/folder2':
-                self.fail()
-
-    def testShowAllParentsOverridesNavTreeExcludesItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'],
-                                    showAllParents=True)
         view = self.view_class(self.portal.folder2.doc21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
@@ -130,20 +105,11 @@ def testNavTreeExcludesDefaultPage(self):
         tree = view.navigationTree()
         self.assertTrue(tree)
         # Ensure that our 'doc21' default page is not in the tree.
-        self.assertEqual([c for c in tree['children'][-1]['children']
-                             if c['item'].getPath()[-5:] == 'doc21'], [])
-
-    def testNavTreeMarksParentMetaTypesNotToQuery(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property get no_display set to True
-        view = self.view_class(self.portal.folder2.file21, self.request)
-        tree = view.navigationTree()
-        self.assertEqual(tree['children'][-1]['show_children'], True)
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
-        view = self.view_class(self.portal.folder2.file21, self.request)
-        tree = view.navigationTree()
-        self.assertEqual(tree['children'][-1]['show_children'], False)
+        self.assertEqual(
+            [c for c in tree['children'][-1]['children']
+             if c['item'].getPath()[-5:] == 'doc21'],
+            []
+        )
 
     def testCreateNavTreeWithLink(self):
         # BBB getRemoteURL deprecated, remove in Plone 4
@@ -153,22 +119,25 @@ def testCreateNavTreeWithLink(self):
             if child['portal_type'] != 'Link':
                 self.assertFalse(child['item'].getRemoteUrl)
             if child['Title'] == 'link1':
-                self.assertEqual(child['item'].getRemoteUrl,
-                                     'http://plone.org')
+                self.assertEqual(
+                    child['item'].getRemoteUrl,
+                    'http://plone.org'
+                )
 
     def testNonStructuralFolderHidesChildren(self):
-        # Make sure NonStructuralFolders act as if parentMetaTypesNotToQuery
+        # Make sure NonStructuralFolders act as if parent_types_not_to_query
         # is set.
         f = dummy.NonStructuralFolder('ns_folder')
         self.folder._setObject('ns_folder', f)
         self.portal.portal_catalog.reindexObject(self.folder.ns_folder)
         self.portal.portal_catalog.reindexObject(self.folder)
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/Members/test_user_1_')
+        self.navigation_settings.root = '/Members/test_user_1_'
         view = self.view_class(self.folder.ns_folder, self.request)
         tree = view.navigationTree()
-        self.assertEqual(tree['children'][0]['item'].getPath(),
-                                '/plone/Members/test_user_1_/ns_folder')
+        self.assertEqual(
+            tree['children'][0]['item'].getPath(),
+            '/plone/Members/test_user_1_/ns_folder'
+        )
         self.assertEqual(len(tree['children'][0]['children']), 0)
 
     def testTopLevel(self):
@@ -177,8 +146,10 @@ def testTopLevel(self):
         view = self.view_class(self.portal.folder2.file21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
-        self.assertEqual(tree['children'][-1]['item'].getPath(),
-                         '/plone/folder2/file21')
+        self.assertEqual(
+            tree['children'][-1]['item'].getPath(),
+            '/plone/folder2/file21'
+        )
 
     def testTopLevelWithContextAboveLevel(self):
         ntp = self.portal.portal_properties.navtree_properties
@@ -199,8 +170,9 @@ def testTopLevelTooDeep(self):
     def testTopLevelWithNavigationRoot(self):
         self.portal.folder2.invokeFactory('Folder', 'folder21')
         self.portal.folder2.folder21.invokeFactory('Document', 'doc211')
+        self.navigation_settings.root = '/folder2'
         ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(topLevel=1, root='/folder2')
+        ntp.manage_changeProperties(topLevel=1)
         view = self.view_class(self.portal.folder2.folder21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
@@ -209,8 +181,6 @@ def testTopLevelWithNavigationRoot(self):
                          '/plone/folder2/folder21/doc211')
 
     def testTopLevelWithPortalFactory(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(topLevel=1)
         id = self.portal.generateUniqueId('Document')
         typeName = 'Document'
         newObject = self.portal.folder1.restrictedTraverse(
@@ -245,8 +215,7 @@ def testBottomLevelStopsAtFolder(self):
         self.assertEqual(len(tree['children'][-1]['children']), 0)
 
     def testNoRootSet(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='')
+        self.navigation_settings.root = u''
         view = self.view_class(self.portal.folder2.file21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
@@ -254,8 +223,7 @@ def testNoRootSet(self):
                          '/plone/folder2')
 
     def testRootIsPortal(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/')
+        self.navigation_settings.root = u'/'
         view = self.view_class(self.portal.folder2.file21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
@@ -263,8 +231,7 @@ def testRootIsPortal(self):
                          '/plone/folder2')
 
     def testRootIsNotPortal(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/folder2')
+        self.navigation_settings.root = u'/folder2'
         view = self.view_class(self.portal.folder2.file21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
@@ -272,8 +239,7 @@ def testRootIsNotPortal(self):
                          '/plone/folder2/doc21')
 
     def testRootDoesNotExist(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/dodo')
+        self.navigation_settings.root = u'/dodo'
         view = self.view_class(self.portal.folder2.file21, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
@@ -281,31 +247,35 @@ def testRootDoesNotExist(self):
         self.assertEqual(len(tree['children']), 0)
 
     def testAboveRoot(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/folder2')
+        self.navigation_settings.root = u'/folder2'
         view = self.view_class(self.portal, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
-        self.assertEqual(tree['children'][0]['item'].getPath(),
-                         '/plone/folder2/doc21')
+        self.assertEqual(
+            tree['children'][0]['item'].getPath(),
+            '/plone/folder2/doc21'
+        )
 
     def testOutsideRoot(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/folder2')
+        self.navigation_settings.root = u'/folder2'
         view = self.view_class(self.portal.folder1, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
-        self.assertEqual(tree['children'][0]['item'].getPath(),
-                         '/plone/folder2/doc21')
+        self.assertEqual(
+            tree['children'][0]['item'].getPath(),
+            '/plone/folder2/doc21'
+        )
 
     def testRootIsCurrent(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(currentFolderOnlyInNavtree=True)
-        view = self.view_class(self.portal.folder2, self.request)
+        view = self.view_class(self.portal.folder2,
+                               self.request,
+                               currentFolderOnly=True)
         tree = view.navigationTree()
         self.assertTrue(tree)
-        self.assertEqual(tree['children'][0]['item'].getPath(),
-                         '/plone/folder2/doc21')
+        self.assertEqual(
+            tree['children'][0]['item'].getPath(),
+            '/plone/folder2/doc21'
+        )
 
     def testCustomQuery(self):
         # Try a custom query script for the navtree that returns only published
@@ -324,14 +294,14 @@ def testCustomQuery(self):
         tree = view.navigationTree()
         self.assertTrue(tree)
         self.assertTrue('children' in tree)
-        #Should only contain current object
+        # Should only contain current object
         self.assertEqual(len(tree['children']), 1)
-        #change workflow for folder1
+        # change workflow for folder1
         workflow.doActionFor(self.portal.folder1, 'publish')
         self.portal.folder1.reindexObject()
         view = self.view_class(self.portal.folder2, self.request)
         tree = view.navigationTree()
-        #Should only contain current object and published folder
+        # Should only contain current object and published folder
         self.assertEqual(len(tree['children']), 2)
 
     def testStateFiltering(self):
@@ -341,23 +311,20 @@ def testStateFiltering(self):
         self.portal._delObject('events')
         workflow = self.portal.portal_workflow
 
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(INavigationSchema, prefix='plone')
-
-        settings.workflow_states_to_show = ('published',)
-        settings.filter_on_workflow = True
+        self.navigation_settings.workflow_states_to_show = ('published',)
+        self.navigation_settings.filter_on_workflow = True
         view = self.view_class(self.portal.folder2, self.request)
         tree = view.navigationTree()
         self.assertTrue(tree)
         self.assertTrue('children' in tree)
-        #Should only contain current object
+        # Should only contain current object
         self.assertEqual(len(tree['children']), 1)
-        #change workflow for folder1
+        # change workflow for folder1
         workflow.doActionFor(self.portal.folder1, 'publish')
         self.portal.folder1.reindexObject()
         view = self.view_class(self.portal.folder2, self.request)
         tree = view.navigationTree()
-        #Should only contain current object and published folder
+        # Should only contain current object and published folder
         self.assertEqual(len(tree['children']), 2)
 
 
@@ -372,6 +339,11 @@ def afterSetUp(self):
         self.request = self.app.REQUEST
         # Apply a default layer for view lookups to work in Zope 2.9+
         self.populateSite()
+        registry = getUtility(IRegistry)
+        self.navigation_settings = registry.forInterface(
+            INavigationSchema,
+            prefix='plone'
+        )
 
     def populateSite(self):
         self.setRoles(['Manager'])
@@ -401,7 +373,8 @@ def testCreateSitemap(self):
 
     def testComplexSitemap(self):
         # create and test a reasonabley complex sitemap
-        path = lambda x: '/'.join(x.getPhysicalPath())
+        def path(x):
+            return '/'.join(x.getPhysicalPath())
         # We do this in a strange order in order to maximally demonstrate the
         # bug
         folder1 = self.portal.folder1
@@ -422,8 +395,7 @@ def testComplexSitemap(self):
         subfolder221 = subfolder22.subfolder221
 
         # Increase depth
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(sitemapDepth=5)
+        self.portal.portal_registry['plone.sitemap_depth'] = 5
 
         view = self.view_class(self.portal, self.request)
         sitemap = view.siteMap()
@@ -483,8 +455,7 @@ def testSitemapUnchangedWithBottomLevel(self):
             self.assertTrue(len(sitemap['children'][-1]['children']) > 0)
 
     def testSitemapWithNavigationRoot(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/folder2')
+        self.navigation_settings.root = u'/folder2'
         view = self.view_class(self.portal, self.request)
         sitemap = view.siteMap()
         self.assertEqual(sitemap['children'][-1]['item'].getPath(),
@@ -503,6 +474,14 @@ def afterSetUp(self):
         self.request = self.app.REQUEST
         self.populateSite()
 
+    @property
+    def navigation_settings(self):
+        registry = getUtility(IRegistry)
+        return registry.forInterface(
+            INavigationSchema,
+            prefix='plone'
+        )
+
     def populateSite(self):
         self.setRoles(['Manager'])
         self.portal.invokeFactory('Document', 'doc1')
@@ -516,16 +495,13 @@ def testCreateTopLevelTabs(self):
         # See if we can create one at all
         view = self.view_class(self.portal, self.request)
 
-        #Everything shows up by default
+        # Everything shows up by default
         tabs = view.topLevelTabs(actions=[])
         self.assertTrue(tabs)
         self.assertEqual(len(tabs), 8)
 
-        #Only the folders show up (Members, news, events, folder1, folder2)
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(INavigationSchema,
-                                                    prefix="plone")
-        navigation_settings.nonfolderish_tabs = False
+        # Only the folders show up (Members, news, events, folder1, folder2)
+        self.navigation_settings.nonfolderish_tabs = False
         tabs = view.topLevelTabs(actions=[])
         self.assertEqual(len(tabs), 5)
 
@@ -538,9 +514,9 @@ def testTabsRespectFolderOrder(self):
         folder_position(self.portal, 'up', 'folder2')
         view = self.view_class(self.portal, self.request)
         tabs2 = view.topLevelTabs(actions=[])
-        #Same number of objects
+        # Same number of objects
         self.assertEqual(len(tabs1), len(tabs2))
-        #Different order
+        # Different order
         self.assertTrue(tabs1 != tabs2)
 
     def testCustomQuery(self):
@@ -558,14 +534,14 @@ def testCustomQuery(self):
             self.portal.getCustomNavQuery(), {"review_state": "published"})
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
-        #Should contain no folders
+        # Should contain no folders
         self.assertEqual(len(tabs), 0)
-        #change workflow for folder1
+        # change workflow for folder1
         workflow.doActionFor(self.portal.folder1, 'publish')
         self.portal.folder1.reindexObject()
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
-        #Should only contain the published folder
+        # Should only contain the published folder
         self.assertEqual(len(tabs), 1)
 
     def testStateFiltering(self):
@@ -575,32 +551,24 @@ def testStateFiltering(self):
         self.portal._delObject('events')
         workflow = self.portal.portal_workflow
 
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(
-            INavigationSchema,
-            prefix="plone"
-        )
-        navigation_settings.workflow_states_to_show = ('published',)
-        navigation_settings.filter_on_workflow = True
+        self.navigation_settings.workflow_states_to_show = ('published',)
+        self.navigation_settings.filter_on_workflow = True
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
-        #Should contain no folders
+        # Should contain no folders
         self.assertEqual(len(tabs), 0)
-        #change workflow for folder1
+        # change workflow for folder1
         workflow.doActionFor(self.portal.folder1, 'publish')
         self.portal.folder1.reindexObject()
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
-        #Should only contain the published folder
+        # Should only contain the published folder
         self.assertEqual(len(tabs), 1)
 
-    def testDisableTopLevelTabs(self):
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(
-            INavigationSchema,
-            prefix="plone"
-        )
-        navigation_settings.generate_tabs = False
+    def testDisableFolderTabs(self):
+        # Setting the site_property disable_folder_sections should remove
+        # all folder based tabs
+        self.navigation_settings.generate_tabs = False
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
         self.assertEqual(tabs, [])
@@ -620,43 +588,31 @@ def testTabsExcludeItemsWithExcludeProperty(self):
         self.assertFalse('folder2' in tab_names)
 
     def testTabsRespectsTypesWithViewAction(self):
-        # With a type in typesUseViewActionInListings as current action it
+        # With a type in types_use_view_action_in_listings as current action it
         # should return a tab which has '/view' appended to the url
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
         self.assertTrue(tabs)
         # Fail if 'view' is used for folder
         self.assertFalse(tabs[-1]['url'][-5:] == '/view')
-        # Add Folder to site_property
-        props = self.portal.portal_properties.site_properties
-        props.manage_changeProperties(
-            typesUseViewActionInListings=['Image', 'File', 'Folder'])
+        # Add Folder to type settings
+        registry = getUtility(IRegistry)
+        type_settings = registry.forInterface(
+            ITypesSchema,
+            prefix="plone",
+            check=False
+        )
+        type_settings.types_use_view_action_in_listings = [
+            u'Image', u'File', u'Folder'
+        ]
         # Verify that we have '/view'
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
         self.assertTrue(tabs)
         self.assertEqual(tabs[-1]['url'][-5:], '/view')
 
-    def testTabsExcludeItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property get purged
-        view = self.view_class(self.portal, self.request)
-        tabs = view.topLevelTabs(actions=[])
-        orig_len = len(tabs)
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'])
-        view = self.view_class(self.portal, self.request)
-        tabs = view.topLevelTabs(actions=[])
-        self.assertTrue(tabs)
-        self.assertEqual(len(tabs), orig_len - 1)
-        tab_names = [t['id'] for t in tabs]
-        self.assertFalse('folder2' in tab_names)
-
     def testTabsExcludeNonFolderishItems(self):
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(INavigationSchema,
-                                                    prefix="plone")
-        navigation_settings.nonfolderish_tabs = False
+        self.navigation_settings.nonfolderish_tabs = False
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
         orig_len = len(tabs)
@@ -668,22 +624,10 @@ def testTabsExcludeNonFolderishItems(self):
         self.assertEqual(len(tabs), orig_len)
 
     def testRootBelowPortalRoot(self):
-
         self.setRoles(['Manager'])
-        self.portal.folder1.invokeFactory('Document', 'doc1')
-        self.portal.folder1.invokeFactory('Document', 'doc2')
-        self.portal.folder1.invokeFactory('Document', 'doc3')
-        self.portal.folder1.invokeFactory('Folder', 'folder1')
-        self.portal.folder1.invokeFactory('Folder', 'folder2')
+        self.portal.manage_delObjects(['news', 'events', 'Members'])
         self.setRoles(['Member'])
-
-        self.portal.portal_properties.navtree_properties.root = '/folder1'
-
-        registry = getUtility(IRegistry)
-        navigation_settings = registry.forInterface(INavigationSchema,
-                                                    prefix="plone")
-        navigation_settings.nonfolderish_tabs = False
-
+        self.navigation_settings.nonfolderish_tabs = False
         view = self.view_class(self.portal, self.request)
         tabs = view.topLevelTabs(actions=[])
         self.assertTrue(tabs)
@@ -723,7 +667,7 @@ def testLinkRemoteUrlsUsedUnlessLinkCreator(self):
 
 
 class TestCatalogPortalTabs(TestBasePortalTabs):
-        view_class = CatalogNavigationTabs
+    view_class = CatalogNavigationTabs
 
 
 class TestBaseBreadCrumbs(PloneTestCase.PloneTestCase):
@@ -735,6 +679,11 @@ class TestBaseBreadCrumbs(PloneTestCase.PloneTestCase):
     def afterSetUp(self):
         self.request = self.app.REQUEST
         self.populateSite()
+        registry = getUtility(IRegistry)
+        self.navigation_settings = registry.forInterface(
+            INavigationSchema,
+            prefix='plone'
+        )
 
     def populateSite(self):
         self.setRoles(['Manager'])
@@ -756,7 +705,7 @@ def testCreateBreadCrumbs(self):
                          doc.aq_parent.absolute_url())
 
     def testBreadcrumbsRespectTypesWithViewAction(self):
-        # With a type in typesUseViewActionInListings as current action it
+        # With a type in types_use_view_action_in_listings as current action it
         # should return a breadcrumb which has '/view' appended to the url
         view = self.view_class(self.portal.folder1.file11, self.request)
         crumbs = view.breadcrumbs()
@@ -764,8 +713,8 @@ def testBreadcrumbsRespectTypesWithViewAction(self):
         self.assertEqual(crumbs[-1]['absolute_url'][-5:], '/view')
 
     def testBreadcrumbsStopAtNavigationRoot(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(topLevel=1, root='/folder1')
+        self.navigation_settings.top_level = 1
+        self.navigation_settings.root = u'/folder1'
         view = self.view_class(self.portal.folder1.doc11, self.request)
         crumbs = view.breadcrumbs()
         self.assertTrue(crumbs)
diff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py
index b867160..c49d3e7 100644
--- a/Products/CMFPlone/tests/testPloneTool.py
+++ b/Products/CMFPlone/tests/testPloneTool.py
@@ -563,7 +563,7 @@ def testCreateBreadCrumbs(self):
                          doc.aq_parent.absolute_url())
 
     def testBreadcrumbsRespectTypesWithViewAction(self):
-        # With a type in typesUseViewActionInListings as current action it
+        # With a type in types_use_view_action_in_listings as current action it
         # should return a breadcrumb which has '/view' appended to the url
         file = self.portal.folder1.file11
         crumbs = self.utils.createBreadCrumbs(file)
diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py
index 79901d2..c8c5d62 100644
--- a/Products/CMFPlone/tests/testPortalCreation.py
+++ b/Products/CMFPlone/tests/testPortalCreation.py
@@ -181,16 +181,22 @@ def testFormToolTipsProperty(self):
 
     def testNavTreeProperties(self):
         # navtree_properties should contain the new properties
-        self.assertTrue(self.properties.navtree_properties.hasProperty('metaTypesNotToList'))
-        self.assertTrue(self.properties.navtree_properties.hasProperty('parentMetaTypesNotToQuery'))
-        self.assertTrue(self.properties.navtree_properties.hasProperty('sortAttribute'))
-        self.assertTrue(self.properties.navtree_properties.hasProperty('sortOrder'))
-        self.assertTrue(self.properties.navtree_properties.hasProperty('sitemapDepth'))
-        self.assertTrue(self.properties.navtree_properties.hasProperty('showAllParents'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty('parentMetaTypesNotToQuery'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty('sitemapDepth'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty('showAllParents'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty('metaTypesNotToList'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty('sortAttribute'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty('sortOrder'))
 
         registry = getUtility(IRegistry)
         self.assertTrue('plone.workflow_states_to_show' in registry)
         self.assertTrue('plone.filter_on_workflow' in registry)
+        self.assertTrue('plone.sitemap_depth' in registry)
+        self.assertTrue('plone.root' in registry)
+        self.assertTrue('plone.sort_tabs_on' in registry)
+        self.assertTrue('plone.sort_tabs_reversed' in registry)
+        self.assertTrue('plone.displayed_types' in registry)
+        self.assertTrue('plone.parent_types_not_to_query' in registry)
 
     def testSitemapAction(self):
         # There should be a sitemap action
@@ -213,18 +219,11 @@ def testUnfriendlyTypesProperty(self):
         self.assertTrue('Plone Site' in settings.types_not_searched)
 
     def testNonDefaultPageTypes(self):
-        # We should have a default_page_types property
-        self.assertTrue(
-            self.properties.site_properties.hasProperty('default_page_types')
-        )
-        self.assertTrue(
-            'Folder' not in
-            self.properties.site_properties.getProperty('default_page_types')
-        )
-        self.assertTrue(
-            'Topic' in
-            self.properties.site_properties.getProperty('default_page_types')
-        )
+        # We should have a default_page_types setting
+        registry = self.portal.portal_registry
+        self.assertIn('plone.default_page_types', registry)
+        self.assertNotIn(u'Folder', registry['plone.default_page_types'])
+        self.assertIn(u'Document', registry['plone.default_page_types'])
 
     def testNoMembersAction(self):
         # There should not be a Members action
@@ -398,11 +397,6 @@ def testExtEditorMemberdataProperty(self):
         # portal_memberdata should have a location property
         self.assertEqual(self.memberdata.getProperty('ext_editor'), 0)
 
-    def testTypesUseViewActionInListingsProperty(self):
-        # site_properties should have the typesUseViewActionInListings property
-        self.assertTrue(self.properties.site_properties.hasProperty(
-                            'typesUseViewActionInListings'))
-
     def testSiteSetupActionIsPresent(self):
         actions = self.actions.listActions()
         self.assertEqual(
@@ -425,9 +419,9 @@ def testEnableLivesearchProperty(self):
         self.assertTrue('plone.enable_livesearch' in registry)
 
     def testRedirectLinksProperty(self):
-        self.assertTrue(self.properties.site_properties \
-            .hasProperty('redirect_links'))
-        self.assertEqual(True, self.properties.site_properties.redirect_links)
+        registry = getUtility(IRegistry)
+        self.assertTrue('plone.redirect_links' in registry)
+        self.assertEqual(True, registry['plone.redirect_links'])
 
     def testLinkDefaultView(self):
         self.assertEqual(self.types.Link.default_view, 'link_redirect_view')
@@ -642,22 +636,6 @@ def testConfigurableSafeHtmlTransform(self):
         except (AttributeError, KeyError):
             self.fail('safe_html transformation not updated')
 
-    def testNavtreePropertiesNormalized(self):
-        ntp = self.portal.portal_properties.navtree_properties
-        toRemove = ['skipIndex_html', 'showMyUserFolderOnly',
-                    'showFolderishSiblingsOnly', 'showFolderishChildrenOnly',
-                    'showNonFolderishObject', 'showTopicResults',
-                    'rolesSeeContentView', 'rolesSeeUnpublishedContent',
-                    'rolesSeeContentsView ', 'batchSize', 'sortCriteria',
-                    'croppingLength', 'forceParentsInBatch',
-                    'rolesSeeHiddenContent', 'typesLinkToFolderContents']
-        toAdd = {'name': '', 'root': '/', 'currentFolderOnlyInNavtree': False}
-        for property in toRemove:
-            self.assertEqual(ntp.getProperty(property, None), None)
-        for property, value in toAdd.items():
-            self.assertEqual(ntp.getProperty(property), value)
-        self.assertEqual(ntp.getProperty('bottomLevel'), 0)
-
     def testvcXMLRPCRemoved(self):
         # vcXMLRPC.js should no longer be registered
         self.assertFalse('vcXMLRPC.js' in self.javascripts.getResourceIds())
diff --git a/Products/CMFPlone/tests/testQueryCatalog.py b/Products/CMFPlone/tests/testQueryCatalog.py
index 846b279..6944bf1 100644
--- a/Products/CMFPlone/tests/testQueryCatalog.py
+++ b/Products/CMFPlone/tests/testQueryCatalog.py
@@ -1,14 +1,14 @@
+# -*- coding: utf-8 -*-
 # Test queryCatalog and plone search forms
-
-from zope.component import getMultiAdapter
-from Products.CMFPlone.tests import PloneTestCase
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import INavigationSchema
 from Products.CMFPlone.interfaces import ISearchSchema
-from Products.ZCTextIndex.ParseTree import ParseError
 from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
+from Products.CMFPlone.tests import PloneTestCase
+from Products.ZCTextIndex.ParseTree import ParseError
 from zExceptions import NotFound
-import types
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 
 
 class TestQueryCatalog(PloneTestCase.PloneTestCase):
@@ -28,7 +28,7 @@ def stripStuff(self, query_dict):
         # strip portal_types and show_inactive parameter which is
         # auto-set with types blacklisting. Useful to simplify test
         # assertions when we don't care
-        if type(query_dict) == types.DictType:
+        if isinstance(query_dict, dict):
             for ignore in ['portal_type', 'show_inactive']:
                 if ignore in query_dict:
                     del query_dict[ignore]
@@ -114,13 +114,17 @@ def testBlacklistedTypes(self):
 
     def testNavigationRoot(self):
         request = {'SearchableText': 'a*'}
-        ntp = self.portal.portal_properties.navtree_properties
-        ntp.root = '/'
+        registry = getUtility(IRegistry)
+        navigation_settings = registry.forInterface(
+            INavigationSchema,
+            prefix='plone'
+        )
+        navigation_settings.root = u'/'
         qry = self.folder.queryCatalog(request, use_navigation_root=True)
         self.assertEqual('/'.join(self.portal.getPhysicalPath()), qry['path'])
         self.setRoles(('Manager',))
         self.portal.invokeFactory('Folder', 'foo')
-        ntp.root = '/foo'
+        navigation_settings.root = u'/foo'
         qry = self.folder.queryCatalog(request, use_navigation_root=True)
         self.assertEqual(
             '/'.join(self.portal.foo.getPhysicalPath()),
@@ -154,7 +158,7 @@ def stripStuff(self, query_dict):
         # strip portal_types and show_inactive parameter which is
         # auto-set with types blacklisting. Useful to simplify test
         # assertions when we don't care
-        if type(query_dict) == types.DictType:
+        if isinstance(query_dict, dict):
             for ignore in ['portal_type', 'show_inactive']:
                 if ignore in query_dict:
                     del query_dict[ignore]
diff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py
index 1097694..f354ee2 100644
--- a/Products/CMFPlone/tests/testRegistrationTool.py
+++ b/Products/CMFPlone/tests/testRegistrationTool.py
@@ -157,7 +157,7 @@ def testRegisteredNotifyEncoding(self):
         mail_settings.email_from_address = 'bar@baz.com'
 
         # Set the portal email encoding
-        self.portal.email_charset = 'us-ascii'
+        mail_settings.email_charset = 'us-ascii'
 
         # Notify the registered user
         self.registration.registeredNotify(member_id)
@@ -217,7 +217,7 @@ def testMailPasswordEncoding(self):
         mail_settings.email_from_address = 'bar@baz.com'
 
         # Set the portal email encoding
-        self.portal.email_charset = 'us-ascii'
+        mail_settings.email_charset = 'us-ascii'
 
         from zope.publisher.browser import TestRequest
         self.registration.mailPassword(member_id, TestRequest())
diff --git a/Products/CMFPlone/tests/test_defaultpage.py b/Products/CMFPlone/tests/test_defaultpage.py
index 44355fd..4dfd670 100644
--- a/Products/CMFPlone/tests/test_defaultpage.py
+++ b/Products/CMFPlone/tests/test_defaultpage.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
@@ -110,8 +112,8 @@ def test_get_default_page_step_3_2(self):
     def test_get_default_page_step_4(self):
         # 4. Else, look up the property default_page in site_properties for
         #   magic ids and test these
-        sp = self.portal.portal_properties.site_properties
-        sp.manage_changeProperties(default_page=('d1',))
+        registry = getUtility(IRegistry)
+        registry['plone.default_page'] = [u'd1']
         self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
 
         from Products.CMFPlone.defaultpage import get_default_page
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 276e52a..5cf579e 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -208,12 +208,7 @@ def getEmptyTitle(context, translated=True):
 
 def typesToList(context):
     registry = getUtility(IRegistry)
-    from Products.CMFPlone.interfaces import INavigationSchema
-    navigation_settings = registry.forInterface(
-        INavigationSchema,
-        prefix='plone'
-    )
-    return navigation_settings.displayed_types
+    return registry.get('plone.displayed_types', ())
 
 
 def normalizeString(text, context=None, encoding=None):


