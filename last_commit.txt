Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-01-26T23:18:35-06:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/853317c3e34027f11e7cf7721891d57889f874a5

date field is tested with new widgets

Files changed:
M Products/CMFPlone/tests/testDateTimeIntegration.py

diff --git a/Products/CMFPlone/tests/testDateTimeIntegration.py b/Products/CMFPlone/tests/testDateTimeIntegration.py
index 5205a2f..613832e 100644
--- a/Products/CMFPlone/tests/testDateTimeIntegration.py
+++ b/Products/CMFPlone/tests/testDateTimeIntegration.py
@@ -53,92 +53,3 @@ def testExpirationDate(self):
         expired = obj.ExpirationDate()      # the string representation...
         expired = DateTime(expired)         # is usually parsed again in Plone
         self.assertTrue(date.equalTo(expired), (date, expired))
-
-
-class DateTimeFunctionalTests(PloneTestCase):
-
-    def testNonDSTPublicationDateRemainsUnchangedThroughEdit(self):
-        # this test is for a date when daylight savings time is not in effect
-        self.setRoles(('Manager',))
-        obj = self.portal['front-page']
-        # the test is performed in the local timezone, and in 2 two alternate
-        # timezones (to make sure one is different from the local timezone)
-        for tz in ('', ' US/Central', ' US/Eastern'):
-            # save the time represented in the specified time zone
-            obj.setEffectiveDate('2020-02-20 00:00%s' % tz)
-            self.assertTrue(obj.effective_date.ISO8601().startswith(
-                '2020-02-20T00:00:00'))
-            start_value = obj.effective_date
-            browser = self.getBrowser()
-            browser.open(obj.absolute_url())
-            browser.getLink('Edit').click()
-            # Time should appear on the edit page in the timezone that was
-            # local for that date (not always the same, due to DST)
-            local_zone = start_value.localZone(
-                            localtime(start_value.timeTime()))
-            local_start_value = start_value.toZone(local_zone)
-            localHour = local_start_value.h_12()
-            localAMPM = local_start_value.ampm().upper()
-            self.assertEqual(
-                   localHour,
-                   int(browser.getControl(name='effectiveDate_hour').value[0]))
-            self.assertEqual(
-                           [localAMPM],
-                           browser.getControl(name='effectiveDate_ampm').value)
-            if not tz:
-                self.assertEqual(12, localHour)
-            browser.getControl('Save').click()
-            # Time is saved in the local timezone for the given date
-            self.assertEqual(local_start_value.tzoffset(),
-                             obj.effective_date.tzoffset())
-            # but should be equivalent to the original time
-            self.assertTrue(start_value.equalTo(obj.effective_date))
-
-    def testDSTPublicationDateRemainsUnchangedThroughEdit(self):
-        # this test is for a date when daylight savings time is in effect
-        self.setRoles(('Manager',))
-        obj = self.portal['front-page']
-        # the test is performed in the local timezone, and in 2 two alternate
-        # timezones (to make sure one is different from the local timezone)
-        for tz in ('', ' GMT-6', ' GMT-5'):
-            # save the time represented in the specified time zone
-            obj.setEffectiveDate('2020-06-20 16:00%s' % tz)
-            self.assertTrue(obj.effective_date.ISO8601().startswith(
-                '2020-06-20T16:00:00'))
-            start_value = obj.effective_date
-            browser = self.getBrowser()
-            browser.open(obj.absolute_url())
-            browser.getLink('Edit').click()
-            # Time should appear on the edit page in the timezone that was
-            # local for that date (not always the same, due to DST)
-            local_zone = start_value.localZone(
-                            localtime(start_value.timeTime()))
-            local_start_value = start_value.toZone(local_zone)
-            localHour = local_start_value.h_12()
-            localAMPM = local_start_value.ampm().upper()
-            self.assertEqual(
-                   localHour,
-                   int(browser.getControl(name='effectiveDate_hour').value[0]))
-            self.assertEqual(
-                   [localAMPM],
-                   browser.getControl(name='effectiveDate_ampm').value)
-            if not tz:
-                self.assertEqual(4, localHour)
-            browser.getControl('Save').click()
-            # Time is saved in the local timezone for the given date
-            self.assertEqual(local_start_value.tzoffset(),
-                             obj.effective_date.tzoffset())
-            # but should be equivalent to the original time
-            self.assertTrue(start_value.equalTo(obj.effective_date))
-
-    def testRespectDaylightSavingTime(self):
-        """ When saving dates, the date's timezone and Daylight Saving Time
-            has to be respected.
-            See Products.Archetypes.Field.DateTimeField.set
-        """
-        self.setRoles(('Manager',))
-        obj = self.portal['front-page']
-        obj.setEffectiveDate('2010-01-01 10:00 Europe/Belgrade')
-        obj.setExpirationDate('2010-06-01 10:00 Europe/Belgrade')
-        self.assertTrue(obj.effective_date.tzoffset() == 3600)
-        self.assertTrue(obj.expiration_date.tzoffset() == 7200)


