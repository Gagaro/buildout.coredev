Repository: Products.CMFQuickInstallerTool
Branch: refs/heads/master
Date: 2015-06-07T13:25:00+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFQuickInstallerTool/commit/9fd493fa28da3d600a3a0341abcbd2ae3ce21eff

run uninstall-profile on uninstalling

Files changed:
M CHANGES.rst
M Products/CMFQuickInstallerTool/InstalledProduct.py
M Products/CMFQuickInstallerTool/QuickInstallerTool.py
M Products/CMFQuickInstallerTool/utils.py
M README.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index ad60c97..568e373 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 3.0.9 (unreleased)
 ------------------
 
+- When uninstalling always run a profile 'uninstall' if no other
+  uninstall-method is found.
+  Fixes https://github.com/plone/Products.CMFQuickInstallerTool/issues/4
+  [pbauer]
+
 - Readded doctests which were not run after port to plone.app.testing
   [tomgross]
 
diff --git a/Products/CMFQuickInstallerTool/InstalledProduct.py b/Products/CMFQuickInstallerTool/InstalledProduct.py
index e8aad08..b9fae50 100644
--- a/Products/CMFQuickInstallerTool/InstalledProduct.py
+++ b/Products/CMFQuickInstallerTool/InstalledProduct.py
@@ -288,6 +288,14 @@ def uninstall(self, cascade=default_cascade, reinstall=False, REQUEST=None):
                 # XXX log it
             except TypeError:
                 res = uninstaller(portal)
+        elif not reinstall:
+            # If there is no uninstall-method we run a uninstall-profile
+            qi = getToolByName(self, 'portal_quickinstaller')
+            uninstall_profile = qi.getUninstallProfile(self.id)
+            if uninstall_profile:
+                portal_setup = getToolByName(self, 'portal_setup')
+                portal_setup.runAllImportStepsFromProfile(
+                    'profile-%s' % uninstall_profile['id'])
 
         if beforeUninstall:
             beforeUninstall = beforeUninstall.__of__(portal)
diff --git a/Products/CMFQuickInstallerTool/QuickInstallerTool.py b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
index cc09074..b8365e3 100644
--- a/Products/CMFQuickInstallerTool/QuickInstallerTool.py
+++ b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
@@ -41,6 +41,9 @@
 
 logger = logging.getLogger('CMFQuickInstallerTool')
 
+# By convention the uninstall-profile is called 'uninstall'
+UNINSTALL_ID = 'uninstall'
+
 
 class AlreadyInstalled(Exception):
     """ Would be nice to say what Product was trying to be installed """
@@ -132,6 +135,25 @@ def getInstallProfile(self, productname):
             return profiles[0]
         return None
 
+    security.declareProtected(ManagePortal, 'getUninstallProfile')
+
+    def getUninstallProfile(self, productname):
+        """ Return the uninstaller profile id
+        """
+        portal_setup = getToolByName(self, 'portal_setup')
+        profiles = portal_setup.listProfileInfo()
+
+        # We are only interested in extension profiles for the product
+        profiles = [prof for prof in profiles if
+                    prof['type'] == EXTENSION and
+                    (prof['product'] == productname or
+                     prof['product'] == 'Products.%s' % productname)]
+        if profiles:
+            for profile in profiles:
+                if profile['id'].split(':')[-1] == UNINSTALL_ID:
+                    return profile
+        return None
+
     security.declareProtected(ManagePortal, 'getInstallMethod')
 
     def getInstallMethod(self, productname):
diff --git a/Products/CMFQuickInstallerTool/utils.py b/Products/CMFQuickInstallerTool/utils.py
index d0140e9..dc3668b 100644
--- a/Products/CMFQuickInstallerTool/utils.py
+++ b/Products/CMFQuickInstallerTool/utils.py
@@ -22,6 +22,8 @@
     'ZODBMountPoint', 'ZReST', 'ZSQLMethods',
 ])
 
+UNINSTALL_ID = 'uninstalled'
+
 
 def updatelist(a, b, c=None):
     for l in b:
diff --git a/README.rst b/README.rst
index 549e20b..03e1fc1 100644
--- a/README.rst
+++ b/README.rst
@@ -13,12 +13,12 @@ the information about the installed products.
 The requirements for a product to be installable with QuickInstallerTool are
 quite simple (almost all existing CMF  products fulfill them)::
 
-  External Product:  The product has to implement an external 
-                     method 'install' in a python module 'Install.py' 
+  External Product:  The product has to implement an external
+                     method 'install' in a python module 'Install.py'
                      in its Extensions directory.
-                     
+
                      OR
-                     
+
                      The product ships with a GenericSetup extension profile
                      and has no install method. It can still use an uninstall
                      method for custom uninstallation tasks though.
@@ -52,13 +52,16 @@ Customized uninstall
 In order to use a customize uninstall, the following
 requirements must be met::
 
-  External Product:  The product has to implement an external 
-                     method 'uninstall in a python module 'Install.py' 
+  External Product:  The product has to implement an external
+                     method 'uninstall in a python module 'Install.py'
                      in its Extensions directory.
 
 Please note that the customized uninstall method is invoked before (and in
 addition to) the standard removal of objects.
 
+Alternatively you can register a profile 'uninstall'. That will be run on
+uninstall if ther is no method 'uninstall'.
+
 Install:
 --------
 


Repository: Products.CMFQuickInstallerTool
Branch: refs/heads/master
Date: 2015-06-07T13:32:18+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFQuickInstallerTool/commit/6e48324376b7f89b5535cea68c0a03e1e45092c2

test running uninstall-profile on uninstalling

Files changed:
A Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml
A Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml
M Products/CMFQuickInstallerTool/tests/install.txt

diff --git a/Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml b/Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml
new file mode 100644
index 0000000..bd00139
--- /dev/null
+++ b/Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<object name="portal_properties" meta_type="Plone Properties Tool">
+ <object name="site_properties" meta_type="Plone Property Sheet">
+  <property name="default_page_types" type="lines" purge="False">
+   <element value="UninstallTest"/>
+  </property>
+ </object>
+</object>
diff --git a/Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml b/Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml
new file mode 100644
index 0000000..801a019
--- /dev/null
+++ b/Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<object name="portal_properties" meta_type="Plone Properties Tool">
+ <object name="site_properties" meta_type="Plone Property Sheet">
+  <property name="default_page_types" type="lines" purge="False">
+   <element value="UninstallTest" remove="True" />
+  </property>
+ </object>
+</object>
diff --git a/Products/CMFQuickInstallerTool/tests/install.txt b/Products/CMFQuickInstallerTool/tests/install.txt
index 9cf49b3..e091d85 100644
--- a/Products/CMFQuickInstallerTool/tests/install.txt
+++ b/Products/CMFQuickInstallerTool/tests/install.txt
@@ -150,3 +150,92 @@ Uninstall the product and confirm the content is still there
   >>> qi.uninstallProducts(products=['QITest'])
   >>> 'test' in portal.objectIds()
   True
+
+
+Test getUninstallProfile method
+-------------------------------
+
+  >>> sys.modules['Products.QITest3'] = tests
+  >>> qi.installProducts(products=['QITest3'])
+  '...Installed Products...QITest3:ok:...'
+
+  >>> qi.getUninstallProfile('QITest3')
+  >>> _profile_registry.registerProfile('uninstall', 'Test',
+  ...     '', interfaces.__path__[0], 'QITest3', 2)
+  >>> uninstall = qi.getUninstallProfile('QITest3')
+  >>> uninstall['id']
+  'QITest3:uninstall'
+
+Cleanup
+
+  >>> qi.uninstallProducts(products=['QITest3'])
+
+
+Uninstalling should run the uninstall-profile
+---------------------------------------------
+
+We need to test against a step that is not auto-removed by _cascadeRemove,
+so we add "UninstallTest" to default_page_types in site_properties via
+a propertiestool.xml.
+
+Create a dummy product
+
+  >>> sys.modules['Products.QITest4'] = tests
+
+Make sure there is no dummy in site_properties
+
+  >>> portal_properties = portal.portal_properties
+  >>> portal_properties
+  <PropertiesTool at /plone/portal_properties>
+  >>> sp = portal_properties.site_properties
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  False
+
+Installing the product should not run any profile and thus set no properties.
+
+  >>> qi.installProducts(products=['QITest4'])
+  '...Installed Products...QITest4:ok:...'
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  False
+
+Register a 'default'-profile that points to profiles/test
+
+  >>> interfaces_path = interfaces.__path__[0]
+  >>> default_path = interfaces_path[:-11] + '/profiles/test'
+  >>> _profile_registry.registerProfile('default', 'UninstallTest', '', default_path, 'QITest4', 2)
+
+Installing the product now runs the default-profile.
+
+  >>> qi.installProducts(products=['QITest4'])
+  '...Installed Products...QITest4:ok:...'
+
+Make sure the property was set by the default-profile.
+
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  True
+
+There is no uninstall-profile yet, so the property is kept on uninstalling.
+
+  >>> qi.getUninstallProfile('QITest4')
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  True
+
+Install again.
+
+  >>> qi.installProducts(products=['QITest4'])
+  '...Installed Products...QITest4:ok:...'
+
+Register a uninstall profile that points to the profiles/test_uninstall
+
+  >>> uninstall_path = interfaces_path[:-11] + '/profiles/test_uninstall'
+  >>> _profile_registry.registerProfile('uninstall', 'UninstallTest', '', uninstall_path, 'QITest4', 2)
+
+  >>> uninstall = qi.getUninstallProfile('QITest4')
+  >>> uninstall['id']
+  'QITest4:uninstall'
+
+Uninstalling now runs the uninstall-profile, thus removing the property.
+
+  >>> qi.uninstallProducts(products=['QITest4'])
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  False


Repository: Products.CMFQuickInstallerTool
Branch: refs/heads/master
Date: 2015-06-07T17:00:56-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFQuickInstallerTool/commit/3bca4b7a73cd9a9f2599287e6ef5f9fb29da7405

Merge pull request #6 from plone/uninstall-profile

run uninstall-profile on uninstalling

Files changed:
A Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml
A Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml
M CHANGES.rst
M Products/CMFQuickInstallerTool/InstalledProduct.py
M Products/CMFQuickInstallerTool/QuickInstallerTool.py
M Products/CMFQuickInstallerTool/tests/install.txt
M Products/CMFQuickInstallerTool/utils.py
M README.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index ad60c97..568e373 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 3.0.9 (unreleased)
 ------------------
 
+- When uninstalling always run a profile 'uninstall' if no other
+  uninstall-method is found.
+  Fixes https://github.com/plone/Products.CMFQuickInstallerTool/issues/4
+  [pbauer]
+
 - Readded doctests which were not run after port to plone.app.testing
   [tomgross]
 
diff --git a/Products/CMFQuickInstallerTool/InstalledProduct.py b/Products/CMFQuickInstallerTool/InstalledProduct.py
index e8aad08..b9fae50 100644
--- a/Products/CMFQuickInstallerTool/InstalledProduct.py
+++ b/Products/CMFQuickInstallerTool/InstalledProduct.py
@@ -288,6 +288,14 @@ def uninstall(self, cascade=default_cascade, reinstall=False, REQUEST=None):
                 # XXX log it
             except TypeError:
                 res = uninstaller(portal)
+        elif not reinstall:
+            # If there is no uninstall-method we run a uninstall-profile
+            qi = getToolByName(self, 'portal_quickinstaller')
+            uninstall_profile = qi.getUninstallProfile(self.id)
+            if uninstall_profile:
+                portal_setup = getToolByName(self, 'portal_setup')
+                portal_setup.runAllImportStepsFromProfile(
+                    'profile-%s' % uninstall_profile['id'])
 
         if beforeUninstall:
             beforeUninstall = beforeUninstall.__of__(portal)
diff --git a/Products/CMFQuickInstallerTool/QuickInstallerTool.py b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
index cc09074..b8365e3 100644
--- a/Products/CMFQuickInstallerTool/QuickInstallerTool.py
+++ b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
@@ -41,6 +41,9 @@
 
 logger = logging.getLogger('CMFQuickInstallerTool')
 
+# By convention the uninstall-profile is called 'uninstall'
+UNINSTALL_ID = 'uninstall'
+
 
 class AlreadyInstalled(Exception):
     """ Would be nice to say what Product was trying to be installed """
@@ -132,6 +135,25 @@ def getInstallProfile(self, productname):
             return profiles[0]
         return None
 
+    security.declareProtected(ManagePortal, 'getUninstallProfile')
+
+    def getUninstallProfile(self, productname):
+        """ Return the uninstaller profile id
+        """
+        portal_setup = getToolByName(self, 'portal_setup')
+        profiles = portal_setup.listProfileInfo()
+
+        # We are only interested in extension profiles for the product
+        profiles = [prof for prof in profiles if
+                    prof['type'] == EXTENSION and
+                    (prof['product'] == productname or
+                     prof['product'] == 'Products.%s' % productname)]
+        if profiles:
+            for profile in profiles:
+                if profile['id'].split(':')[-1] == UNINSTALL_ID:
+                    return profile
+        return None
+
     security.declareProtected(ManagePortal, 'getInstallMethod')
 
     def getInstallMethod(self, productname):
diff --git a/Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml b/Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml
new file mode 100644
index 0000000..bd00139
--- /dev/null
+++ b/Products/CMFQuickInstallerTool/profiles/test/propertiestool.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<object name="portal_properties" meta_type="Plone Properties Tool">
+ <object name="site_properties" meta_type="Plone Property Sheet">
+  <property name="default_page_types" type="lines" purge="False">
+   <element value="UninstallTest"/>
+  </property>
+ </object>
+</object>
diff --git a/Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml b/Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml
new file mode 100644
index 0000000..801a019
--- /dev/null
+++ b/Products/CMFQuickInstallerTool/profiles/test_uninstall/propertiestool.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<object name="portal_properties" meta_type="Plone Properties Tool">
+ <object name="site_properties" meta_type="Plone Property Sheet">
+  <property name="default_page_types" type="lines" purge="False">
+   <element value="UninstallTest" remove="True" />
+  </property>
+ </object>
+</object>
diff --git a/Products/CMFQuickInstallerTool/tests/install.txt b/Products/CMFQuickInstallerTool/tests/install.txt
index 9cf49b3..e091d85 100644
--- a/Products/CMFQuickInstallerTool/tests/install.txt
+++ b/Products/CMFQuickInstallerTool/tests/install.txt
@@ -150,3 +150,92 @@ Uninstall the product and confirm the content is still there
   >>> qi.uninstallProducts(products=['QITest'])
   >>> 'test' in portal.objectIds()
   True
+
+
+Test getUninstallProfile method
+-------------------------------
+
+  >>> sys.modules['Products.QITest3'] = tests
+  >>> qi.installProducts(products=['QITest3'])
+  '...Installed Products...QITest3:ok:...'
+
+  >>> qi.getUninstallProfile('QITest3')
+  >>> _profile_registry.registerProfile('uninstall', 'Test',
+  ...     '', interfaces.__path__[0], 'QITest3', 2)
+  >>> uninstall = qi.getUninstallProfile('QITest3')
+  >>> uninstall['id']
+  'QITest3:uninstall'
+
+Cleanup
+
+  >>> qi.uninstallProducts(products=['QITest3'])
+
+
+Uninstalling should run the uninstall-profile
+---------------------------------------------
+
+We need to test against a step that is not auto-removed by _cascadeRemove,
+so we add "UninstallTest" to default_page_types in site_properties via
+a propertiestool.xml.
+
+Create a dummy product
+
+  >>> sys.modules['Products.QITest4'] = tests
+
+Make sure there is no dummy in site_properties
+
+  >>> portal_properties = portal.portal_properties
+  >>> portal_properties
+  <PropertiesTool at /plone/portal_properties>
+  >>> sp = portal_properties.site_properties
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  False
+
+Installing the product should not run any profile and thus set no properties.
+
+  >>> qi.installProducts(products=['QITest4'])
+  '...Installed Products...QITest4:ok:...'
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  False
+
+Register a 'default'-profile that points to profiles/test
+
+  >>> interfaces_path = interfaces.__path__[0]
+  >>> default_path = interfaces_path[:-11] + '/profiles/test'
+  >>> _profile_registry.registerProfile('default', 'UninstallTest', '', default_path, 'QITest4', 2)
+
+Installing the product now runs the default-profile.
+
+  >>> qi.installProducts(products=['QITest4'])
+  '...Installed Products...QITest4:ok:...'
+
+Make sure the property was set by the default-profile.
+
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  True
+
+There is no uninstall-profile yet, so the property is kept on uninstalling.
+
+  >>> qi.getUninstallProfile('QITest4')
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  True
+
+Install again.
+
+  >>> qi.installProducts(products=['QITest4'])
+  '...Installed Products...QITest4:ok:...'
+
+Register a uninstall profile that points to the profiles/test_uninstall
+
+  >>> uninstall_path = interfaces_path[:-11] + '/profiles/test_uninstall'
+  >>> _profile_registry.registerProfile('uninstall', 'UninstallTest', '', uninstall_path, 'QITest4', 2)
+
+  >>> uninstall = qi.getUninstallProfile('QITest4')
+  >>> uninstall['id']
+  'QITest4:uninstall'
+
+Uninstalling now runs the uninstall-profile, thus removing the property.
+
+  >>> qi.uninstallProducts(products=['QITest4'])
+  >>> 'UninstallTest' in sp.getProperty('default_page_types', [])
+  False
diff --git a/Products/CMFQuickInstallerTool/utils.py b/Products/CMFQuickInstallerTool/utils.py
index d0140e9..dc3668b 100644
--- a/Products/CMFQuickInstallerTool/utils.py
+++ b/Products/CMFQuickInstallerTool/utils.py
@@ -22,6 +22,8 @@
     'ZODBMountPoint', 'ZReST', 'ZSQLMethods',
 ])
 
+UNINSTALL_ID = 'uninstalled'
+
 
 def updatelist(a, b, c=None):
     for l in b:
diff --git a/README.rst b/README.rst
index 549e20b..03e1fc1 100644
--- a/README.rst
+++ b/README.rst
@@ -13,12 +13,12 @@ the information about the installed products.
 The requirements for a product to be installable with QuickInstallerTool are
 quite simple (almost all existing CMF  products fulfill them)::
 
-  External Product:  The product has to implement an external 
-                     method 'install' in a python module 'Install.py' 
+  External Product:  The product has to implement an external
+                     method 'install' in a python module 'Install.py'
                      in its Extensions directory.
-                     
+
                      OR
-                     
+
                      The product ships with a GenericSetup extension profile
                      and has no install method. It can still use an uninstall
                      method for custom uninstallation tasks though.
@@ -52,13 +52,16 @@ Customized uninstall
 In order to use a customize uninstall, the following
 requirements must be met::
 
-  External Product:  The product has to implement an external 
-                     method 'uninstall in a python module 'Install.py' 
+  External Product:  The product has to implement an external
+                     method 'uninstall in a python module 'Install.py'
                      in its Extensions directory.
 
 Please note that the customized uninstall method is invoked before (and in
 addition to) the standard removal of objects.
 
+Alternatively you can register a profile 'uninstall'. That will be run on
+uninstall if ther is no method 'uninstall'.
+
 Install:
 --------
 


