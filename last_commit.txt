Repository: mockup


Branch: refs/heads/master
Date: 2015-09-08T12:51:59+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/mockup/commit/f0bc0b65cb8ae66d33ffbcc1738b545ff44a035e

tinyMCE inline editing
Add option to use tinyMCE inline on a contenteditable div. The pattern creates
the contenteditable div from the textarea, copies it's content to it and
handles saving changed data back to the textarea on form submit.

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/pattern.js
M mockup/tests/pattern-tinymce-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 94e5195..59e7da5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,10 +1,13 @@
 Changelog
 =========
 
-2.0.7 (Unreleased)
+2.0.8 (Unreleased)
 ------------------
 
-- No changes yet.
+- Add option to use tinyMCE inline on a contenteditable div. The pattern
+  creates the contenteditable div from the textarea, copies it's content to it
+  and handles saving changed data back to the textarea on form submit.
+  [thet]
 
 
 2.0.7 (2015-09-07)
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index ce3ee1e..8f10c1d 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -10,7 +10,7 @@
  *    folderTypes(string): TODO ('Folder,Plone Site')
  *    linkableTypes(string): TODO ('Document,Event,File,Folder,Image,News Item,Topic')
  *    tiny(object): TODO ({ plugins: [ "advlist autolink lists charmap print preview anchor", "usearchreplace visualblocks code fullscreen autoresize", "insertdatetime media table contextmenu paste plonelink ploneimage" ], menubar: "edit table format tools view insert",
-toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | unlink plonelink ploneimage", autoresize_max_height: 1500 })
+ toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | unlink plonelink ploneimage", autoresize_max_height: 1500, inline: false })
  *    prependToUrl(string): Text to prepend to generated internal urls. ('')
  *    appendToUrl(string): Text to append to generated internal urls. ('')
  *    prependToScalePart(string): Text to prepend to generated image scale url part. ('/imagescale/')
@@ -27,6 +27,10 @@ toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignrig
  *
  *    {{ example-2 }}
  *
+ *    # Inline editing
+ *
+ *    {{ example-3 }}
+ *
  * Example: example-1
  *    <form>
  *      <textarea class="pat-tinymce"
@@ -43,6 +47,14 @@ toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignrig
  *                            }'></textarea>
  *    </form>
  *
+ * Example: example-3
+ *    <form>
+ *      <textarea class="pat-tinymce" data-pat-tinymce='{"tiny": {"inline": true}}'>
+ *        <h3>I'm a content editable</h3>
+ *        <p>Try to edit me!</p>
+ *      </textarea>
+ *    </form>
+ *
  */
 
 define([
@@ -174,7 +186,8 @@ define([
                  'bullist numlist outdent indent | ' +
                  'unlink plonelink ploneimage',
         //'autoresize_max_height': 900,
-        'height': 400
+        'height': 400,
+        inline: false
       }
     },
     addLinkClicked: function() {
@@ -332,7 +345,8 @@ define([
       // tiny needs an id in order to initialize. Creat it if not set.
       var id = utils.setId(self.$el);
       var tinyOptions = self.options.tiny;
-      tinyOptions.selector = '#' + id;
+      var tinyId = tinyOptions.inline ? id + '-editable' : id;  // when displaying tinyMCE inline, a separate div is created.
+      tinyOptions.selector = '#' + tinyId;
       tinyOptions.addLinkClicked = function() {
         self.addLinkClicked.apply(self, []);
       };
@@ -372,14 +386,27 @@ define([
           self.options.imageTypes = self.options.imageTypes.split(',');
         }
 
+        if (tinyOptions.inline === true) {
+          // create a div, which will be made content-editable by tinyMCE and
+          // copy contents from textarea to it. Then hide textarea.
+          self.$el.after('<div id="' + tinyId + '">' + self.$el.val() + '</div>');
+          self.$el.hide();
+        }
+
         tinymce.init(tinyOptions);
-        self.tiny = tinymce.get(id);
+        self.tiny = tinymce.get(tinyId);
 
         /* tiny really should be doing this by default
          * but this fixes overlays not saving data */
         var $form = self.$el.parents('form');
         $form.on('submit', function() {
-          self.tiny.save();
+          if (tinyOptions.inline === true) {
+            // save back from contenteditable to textarea
+            self.$el.val(self.tiny.getContent());
+          } else {
+            // normal case
+            self.tiny.save();
+          }
         });
       });
     },
diff --git a/mockup/tests/pattern-tinymce-test.js b/mockup/tests/pattern-tinymce-test.js
index 5277e0f..b1590b4 100644
--- a/mockup/tests/pattern-tinymce-test.js
+++ b/mockup/tests/pattern-tinymce-test.js
@@ -387,6 +387,33 @@ define([
       expect(pattern.linkModal.linkTypes.anchor.toUrl()).to.equal('#foobar');
     });
 
+    it('test inline tinyMCE roundtrip', function() {
+      var $container = $(
+       '<form>' +
+       '<textarea class="pat-tinymce" data-pat-tinymce=\'{"tiny": {"inline": true}}\'>' +
+       '<h1>just testing</h1>' +
+       '</textarea>' +
+       '</form>'
+      ).appendTo('body');
+      registry.scan($container);
+
+      var $el = $container.find('textarea');
+      var id = $el.attr('id');
+
+      var $editable = $container.find('#' + id + '-editable');
+
+      // check, if everything is in place
+      expect($editable.is('div')).to.be.equal(true);
+      expect($editable.html()).to.be.equal($el.val());
+
+      // check, if changes are submitted on form submit
+      var changed_txt = 'changed contents';
+      $editable.html(changed_txt);
+      var $form = $container.find('form');
+      $container.trigger('submit');
+      expect($el.val()).to.be.equal(changed_txt);
+    });
+
   });
 
 });


Repository: mockup


Branch: refs/heads/master
Date: 2015-09-08T09:58:25-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/66ced10c8da09fa633d72383b81876966c8d6ba7

Merge pull request #568 from plone/thet-tinymce-inline

tinyMCE inline editing

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/pattern.js
M mockup/tests/pattern-tinymce-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 94e5195..59e7da5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,10 +1,13 @@
 Changelog
 =========
 
-2.0.7 (Unreleased)
+2.0.8 (Unreleased)
 ------------------
 
-- No changes yet.
+- Add option to use tinyMCE inline on a contenteditable div. The pattern
+  creates the contenteditable div from the textarea, copies it's content to it
+  and handles saving changed data back to the textarea on form submit.
+  [thet]
 
 
 2.0.7 (2015-09-07)
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index ce3ee1e..8f10c1d 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -10,7 +10,7 @@
  *    folderTypes(string): TODO ('Folder,Plone Site')
  *    linkableTypes(string): TODO ('Document,Event,File,Folder,Image,News Item,Topic')
  *    tiny(object): TODO ({ plugins: [ "advlist autolink lists charmap print preview anchor", "usearchreplace visualblocks code fullscreen autoresize", "insertdatetime media table contextmenu paste plonelink ploneimage" ], menubar: "edit table format tools view insert",
-toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | unlink plonelink ploneimage", autoresize_max_height: 1500 })
+ toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | unlink plonelink ploneimage", autoresize_max_height: 1500, inline: false })
  *    prependToUrl(string): Text to prepend to generated internal urls. ('')
  *    appendToUrl(string): Text to append to generated internal urls. ('')
  *    prependToScalePart(string): Text to prepend to generated image scale url part. ('/imagescale/')
@@ -27,6 +27,10 @@ toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignrig
  *
  *    {{ example-2 }}
  *
+ *    # Inline editing
+ *
+ *    {{ example-3 }}
+ *
  * Example: example-1
  *    <form>
  *      <textarea class="pat-tinymce"
@@ -43,6 +47,14 @@ toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignrig
  *                            }'></textarea>
  *    </form>
  *
+ * Example: example-3
+ *    <form>
+ *      <textarea class="pat-tinymce" data-pat-tinymce='{"tiny": {"inline": true}}'>
+ *        <h3>I'm a content editable</h3>
+ *        <p>Try to edit me!</p>
+ *      </textarea>
+ *    </form>
+ *
  */
 
 define([
@@ -174,7 +186,8 @@ define([
                  'bullist numlist outdent indent | ' +
                  'unlink plonelink ploneimage',
         //'autoresize_max_height': 900,
-        'height': 400
+        'height': 400,
+        inline: false
       }
     },
     addLinkClicked: function() {
@@ -332,7 +345,8 @@ define([
       // tiny needs an id in order to initialize. Creat it if not set.
       var id = utils.setId(self.$el);
       var tinyOptions = self.options.tiny;
-      tinyOptions.selector = '#' + id;
+      var tinyId = tinyOptions.inline ? id + '-editable' : id;  // when displaying tinyMCE inline, a separate div is created.
+      tinyOptions.selector = '#' + tinyId;
       tinyOptions.addLinkClicked = function() {
         self.addLinkClicked.apply(self, []);
       };
@@ -372,14 +386,27 @@ define([
           self.options.imageTypes = self.options.imageTypes.split(',');
         }
 
+        if (tinyOptions.inline === true) {
+          // create a div, which will be made content-editable by tinyMCE and
+          // copy contents from textarea to it. Then hide textarea.
+          self.$el.after('<div id="' + tinyId + '">' + self.$el.val() + '</div>');
+          self.$el.hide();
+        }
+
         tinymce.init(tinyOptions);
-        self.tiny = tinymce.get(id);
+        self.tiny = tinymce.get(tinyId);
 
         /* tiny really should be doing this by default
          * but this fixes overlays not saving data */
         var $form = self.$el.parents('form');
         $form.on('submit', function() {
-          self.tiny.save();
+          if (tinyOptions.inline === true) {
+            // save back from contenteditable to textarea
+            self.$el.val(self.tiny.getContent());
+          } else {
+            // normal case
+            self.tiny.save();
+          }
         });
       });
     },
diff --git a/mockup/tests/pattern-tinymce-test.js b/mockup/tests/pattern-tinymce-test.js
index 5277e0f..b1590b4 100644
--- a/mockup/tests/pattern-tinymce-test.js
+++ b/mockup/tests/pattern-tinymce-test.js
@@ -387,6 +387,33 @@ define([
       expect(pattern.linkModal.linkTypes.anchor.toUrl()).to.equal('#foobar');
     });
 
+    it('test inline tinyMCE roundtrip', function() {
+      var $container = $(
+       '<form>' +
+       '<textarea class="pat-tinymce" data-pat-tinymce=\'{"tiny": {"inline": true}}\'>' +
+       '<h1>just testing</h1>' +
+       '</textarea>' +
+       '</form>'
+      ).appendTo('body');
+      registry.scan($container);
+
+      var $el = $container.find('textarea');
+      var id = $el.attr('id');
+
+      var $editable = $container.find('#' + id + '-editable');
+
+      // check, if everything is in place
+      expect($editable.is('div')).to.be.equal(true);
+      expect($editable.html()).to.be.equal($el.val());
+
+      // check, if changes are submitted on form submit
+      var changed_txt = 'changed contents';
+      $editable.html(changed_txt);
+      var $form = $container.find('form');
+      $container.trigger('submit');
+      expect($el.val()).to.be.equal(changed_txt);
+    });
+
   });
 
 });


