Repository: plone.testing


Branch: refs/heads/master
Date: 2015-08-12T15:48:04+02:00
Author: Patrick Gerken () <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/plone.testing/commit/2c7d1b4350bad8606869bc0b5c963d0bf140f98f

fix(ex_handling): Don't let finally block mask ex

We have a project with test code which utilizes collective.solr which
utilizes collective.indexing which pushes index operations to the
pre commit phase.
In our case an exception was then thrown during commit within
the zopeApp context.
closing the connection in the finally statement raised another exception
because of the unclean state left by the first exception.
This exception in the finally block totally masked the original
exception, hindering bug fixing.

Files changed:
M CHANGES.rst
M src/plone/testing/z2.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fc10a43..95f4351 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 4.0.15 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Prevent exception masking in finally clause of zopeApp context
+  [do3cc]
 
 
 4.0.14 (2015-07-29)
diff --git a/src/plone/testing/z2.py b/src/plone/testing/z2.py
index bc68839..04e00f8 100644
--- a/src/plone/testing/z2.py
+++ b/src/plone/testing/z2.py
@@ -253,18 +253,37 @@ def zopeApp(db=None, connection=None, environ=None):
     if connection is None:
         connection = app._p_jar
 
+    # exceptions in finally clauses can mask exceptions
+    # in the preceeding code block. So we catch
+    # every exception and throw it instead of the exception
+    # in the finally clause
+    inner_exception = None
     try:
         yield app
-    except:
-        transaction.abort()
+    except Exception, e:
+        inner_exception = e
+        try:
+            transaction.abort()
+        except Exception, e:
+            inner_exception = e
+            raise
         raise
     else:
-        transaction.commit()
+        try:
+            transaction.commit()
+        except Exception, e:
+            inner_exception = e
     finally:
-        app.REQUEST.close()
-
-        if closeConn:
-            connection.close()
+        try:
+            app.REQUEST.close()
+
+            if closeConn:
+                connection.close()
+        except:
+            if inner_exception:
+                raise inner_exception
+            else:
+                raise
 
 # Startup layer - you probably don't want to use this one directly
 


Repository: plone.testing


Branch: refs/heads/master
Date: 2015-08-13T08:53:54+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.testing/commit/75488ff60f5ea65f344cc173fa06a5252c8f1a58

Merge pull request #15 from plone/less_exception_masking

fix(ex_handling): Don't let finally block mask ex

Files changed:
M CHANGES.rst
M src/plone/testing/z2.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fc10a43..95f4351 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 4.0.15 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Prevent exception masking in finally clause of zopeApp context
+  [do3cc]
 
 
 4.0.14 (2015-07-29)
diff --git a/src/plone/testing/z2.py b/src/plone/testing/z2.py
index bc68839..04e00f8 100644
--- a/src/plone/testing/z2.py
+++ b/src/plone/testing/z2.py
@@ -253,18 +253,37 @@ def zopeApp(db=None, connection=None, environ=None):
     if connection is None:
         connection = app._p_jar
 
+    # exceptions in finally clauses can mask exceptions
+    # in the preceeding code block. So we catch
+    # every exception and throw it instead of the exception
+    # in the finally clause
+    inner_exception = None
     try:
         yield app
-    except:
-        transaction.abort()
+    except Exception, e:
+        inner_exception = e
+        try:
+            transaction.abort()
+        except Exception, e:
+            inner_exception = e
+            raise
         raise
     else:
-        transaction.commit()
+        try:
+            transaction.commit()
+        except Exception, e:
+            inner_exception = e
     finally:
-        app.REQUEST.close()
-
-        if closeConn:
-            connection.close()
+        try:
+            app.REQUEST.close()
+
+            if closeConn:
+                connection.close()
+        except:
+            if inner_exception:
+                raise inner_exception
+            else:
+                raise
 
 # Startup layer - you probably don't want to use this one directly
 


