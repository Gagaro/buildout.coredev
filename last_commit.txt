Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-10-08T11:23:28+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.intelligenttext/commit/7e139e4921d50156dbfcca4664ba09c912c7b197

Minor cleanup (pep8, readability, ReST)

Files changed:
A plone/intelligenttext/README.rst
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/intelligenttext/__init__.py
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M setup.py
D plone/intelligenttext/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 75ab534..54521a2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,6 +5,9 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- Minor cleanup (pep8, readability, ReST)
+  [jensens]
+
 - Make compatible with Python 3.
   [davisagli]
 
diff --git a/README.rst b/README.rst
index 5acdc1c..bdb9547 100644
--- a/README.rst
+++ b/README.rst
@@ -4,4 +4,9 @@ plone.intelligenttext
 Overview
 --------
 
-Provides transforms from text/x-web-intelligent to text/html and vice versa.
+Provides transforms from ``text/x-web-intelligent`` to ``text/html`` and vice versa.
+
+Line breaks and indentation is preserved, and web and email addresses are made into clickable links.
+Links get a ``rel="nofollow"`` to make this less interesting for spammers.
+
+This package works in pure Python 2.7 and 3.0 and has no dependency on Plone.
diff --git a/plone/__init__.py b/plone/__init__.py
index de40ea7..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/intelligenttext/README.rst b/plone/intelligenttext/README.rst
new file mode 100644
index 0000000..acf0453
--- /dev/null
+++ b/plone/intelligenttext/README.rst
@@ -0,0 +1,286 @@
+Intelligent text
+================
+
+This package contains a transform that is capable converting plain text into HTML.
+
+Line breaks and indentation is preserved, and web and email addresses are made into clickable links.
+
+Intended use is for example for portal_transforms in CMF.
+
+Basic usage
+-----------
+
+The basic usage is turning intelligenttext into html::
+
+    >>> from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
+    >>> text = 'Go to http://plone.org'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>
+
+And the other way around::
+
+    >>> from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
+    >>> html = 'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(html))
+    Go to http://plone.org
+
+
+Intelligent text to html
+------------------------
+
+We can get a hyperlink.
+We always add rel="nofollow" to make this less interesting for spammers::
+
+    >>> orig = "A test http://test.com"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="http://test.com" rel="nofollow">http://test.com</a>
+
+An email address should be clickable too::
+
+    >>> orig = "A test test@test.com of mailto"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto
+
+Some basic fallback would be nice::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(None))
+
+Text, links and email addressed can be split over multiple lines::
+
+    >>> orig = """A test
+    ... URL: http://test.com End
+    ... Mail: test@test.com End
+    ... URL: http://foo.com End"""
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End
+
+
+Having the links at the end of the line should not have adverse effects::
+
+    >>> orig = """A test
+    ... URL: http://test.com
+    ... Mail: test@test.com
+    ... URL: http://foo.com"""
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
+
+
+Indentation should be preserved::
+
+    >>> orig = """A test
+    ...   URL: http://test.com
+    ...     Mail: test@test.com
+    ...       URL: http://foo.com"""
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
+    >>> convertWebIntelligentPlainTextToHtml(orig).count(b'&nbsp;')
+    12
+
+HTML entities should be escaped::
+
+    >>> orig = "Some & funny < characters"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    Some &amp; funny &lt; characters
+
+Accentuated characters, like in French, should be html escaped::
+
+    >>> orig = "The French use é à ô ù à and ç."
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.
+
+Links with ampersands in them should be handled correctly::
+
+    >>> orig = "http://google.com/ask?question=everything&answer=42"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    <a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>
+
+We want to make sure that the text representation of long urls is not too long::
+
+    >>> url0 = "http://verylonghost.longsubdomain.veryverylongdomain.com/index.html"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url0))
+    <a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>
+    >>> url1 = "http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url1))
+    <a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>
+    >>> url2 = "https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url2))
+    <a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>
+
+If there is a url in brackets, the link should not contain one of the brackets::
+
+    >>> bracket_url = "<http://plone.org/products/poi/issues/155>"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(bracket_url))
+    &lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;
+
+Port numbers should be recognized as linkworthy::
+
+    >>> url = "http://plone3.freeman-centre.ac.uk:8080/caldav"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>
+
+localhost should be good::
+
+    >>> url = "http://localhost:8080/"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>
+
+Check ip numbers too while we are at it::
+
+    >>> url = "http://127.0.0.1:8080/"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://255.255.255.255"))
+    <a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://0.0.0.0"))
+    <a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>
+
+
+ftp is accepted::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml("ftp://localhost"))
+    <a href="ftp://localhost" rel="nofollow">ftp://localhost</a>
+
+https is accepted::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml("https://localhost"))
+    <a href="https://localhost" rel="nofollow">https://localhost</a>
+
+Unicode should be fine too::
+
+    >>> text = u"Línk tö http://foo.ni"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    L&iacute;nk t&ouml; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
+
+Leading whitespace is converted to non breaking spaces to preserve indentation::
+
+    >>> text = "Some text.\n    And some indentation."
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.
+
+Leading tabs are converted to spaces.  The default is ``4``::
+
+    >>> text = "Before the tab:\n\tand after the tab."
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
+
+You can specify a different tab width::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width=2))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
+
+In case the tab width is not an integer, we try to convert it::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='2'))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
+
+When that fails we fall back to 4 spaces::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='1.5'))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
+
+
+Html to intelligent text
+------------------------
+
+We want the transform to work the other way around too.
+For starters this means that tags must be stripped::
+
+    >>> orig = "Some <b>bold</b> text."
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some bold text.
+
+Some basic fallback would be nice::
+
+    >>> bprint(convertHtmlToWebIntelligentPlainText(None))
+
+Line breaks need to be handled.::
+
+    >>> orig = "Some<br/>broken<BR/>text<br />"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some
+    broken
+    text
+
+Starting blocks::
+
+    >>> orig = "A block<dt>there</dt>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A block
+    <BLANKLINE>
+    there
+
+Ending blocks::
+
+    >>> orig = "<p>Paragraph</p>Other stuff"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Paragraph
+    <BLANKLINE>
+    Other stuff
+
+Indenting blocks::
+
+    >>> orig = "An<blockquote>Indented blockquote</blockquote>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An
+    <BLANKLINE>
+      Indented blockquote
+
+Lists::
+
+    >>> orig = "A list<ul><li>Foo</li><li>Bar</li></ul>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A list
+    <BLANKLINE>
+      - Foo
+        - Bar
+
+Non breaking spaces::
+
+    >>> orig = "Some space &nbsp;&nbsp;here"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some space   here
+
+Angles::
+
+    >>> orig = "Watch &lt;this&gt; and &lsaquo;that&rsaquo;"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Watch <this> and &#8249;that&#8250;
+
+Bullets::
+
+    >>> orig = "A &bull; bullet"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8226; bullet
+
+Ampersands::
+
+    >>> orig = "An &amp; ampersand"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An & ampersand
+
+Entities::
+
+    >>> orig = "A &mdash; dash"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8212; dash
+
+Pre formatted text::
+
+    >>> orig = "A <pre>  pre\n  section</pre>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A
+    <BLANKLINE>
+      pre
+      section
+
+White space::
+    >>> orig = "A \n\t spaceful, <b>  tag-filled</b>, <b> <i>  snippet\n</b></i>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A spaceful, tag-filled, snippet
+
+
+Credits
+-------
+
+- Started by Martin Aspeli
+- Contributions from the Plone Community
diff --git a/plone/intelligenttext/README.txt b/plone/intelligenttext/README.txt
deleted file mode 100644
index cac09e9..0000000
--- a/plone/intelligenttext/README.txt
+++ /dev/null
@@ -1,281 +0,0 @@
-Intelligent text
-================
-
-Started by Martin Aspeli
-
-This package contains a and a transform (for example for
-portal_transforms in CMF) that is capable converting plain text into
-HTML where line breaks and indentation is preserved, and web and email
-addresses are made into clickable links.
-
-Basic usage
------------
-
-The basic usage is turning intelligenttext into html:
-
-    >>> from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
-    >>> text = 'Go to http://plone.org'
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>
-
-And the other way around:
-
-    >>> from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
-    >>> html = 'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
-    >>> bprint(convertHtmlToWebIntelligentPlainText(html))
-    Go to http://plone.org
-
-
-Intelligent text to html
-------------------------
-
-We can get a hyperlink.  We always add rel="nofollow" to make this
-less interesting for spammers.
-
-    >>> orig = "A test http://test.com"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test <a href="http://test.com" rel="nofollow">http://test.com</a>
-
-An email address should be clickable too:
-
-    >>> orig = "A test test@test.com of mailto"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto
-
-Some basic fallback would be nice:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(None))
-
-Text, links and email addressed can be split over multiple lines.
-
-    >>> orig = """A test
-    ... URL: http://test.com End
-    ... Mail: test@test.com End
-    ... URL: http://foo.com End"""
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End
-
-
-Having the links at the end of the line should not have adverse effects.
-
-    >>> orig = """A test
-    ... URL: http://test.com
-    ... Mail: test@test.com
-    ... URL: http://foo.com"""
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
-
-
-Indentation should be preserved.
-
-    >>> orig = """A test
-    ...   URL: http://test.com
-    ...     Mail: test@test.com
-    ...       URL: http://foo.com"""
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
-    >>> convertWebIntelligentPlainTextToHtml(orig).count(b'&nbsp;')
-    12
-
-HTML entities should be escaped.
-
-    >>> orig = "Some & funny < characters"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    Some &amp; funny &lt; characters
-
-Accentuated characters, like in French, should be html escaped.
-
-    >>> orig = "The French use é à ô ù à and ç."
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.
-
-Links with ampersands in them should be handled correctly.
-
-    >>> orig = "http://google.com/ask?question=everything&answer=42"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    <a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>
-
-We want to make sure that the text representation of long urls is not too long.
-
-    >>> url0 = "http://verylonghost.longsubdomain.veryverylongdomain.com/index.html"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url0))
-    <a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>
-    >>> url1 = "http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url1))
-    <a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>
-    >>> url2 = "https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url2))
-    <a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>
-
-If there is a url in brackets, the link should not contain one of the brackets.
-
-    >>> bracket_url = "<http://plone.org/products/poi/issues/155>"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(bracket_url))
-    &lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;
-
-Port numbers should be recognized as linkworthy.
-
-    >>> url = "http://plone3.freeman-centre.ac.uk:8080/caldav"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
-    <a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>
-
-localhost should be good.
-
-    >>> url = "http://localhost:8080/"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
-    <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>
-
-Check ip numbers too while we are at it.
-
-    >>> url = "http://127.0.0.1:8080/"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
-    <a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>
-    >>> bprint(convertWebIntelligentPlainTextToHtml("http://255.255.255.255"))
-    <a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>
-    >>> bprint(convertWebIntelligentPlainTextToHtml("http://0.0.0.0"))
-    <a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>
-
-
-ftp is accepted.
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml("ftp://localhost"))
-    <a href="ftp://localhost" rel="nofollow">ftp://localhost</a>
-
-https is accepted.
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml("https://localhost"))
-    <a href="https://localhost" rel="nofollow">https://localhost</a>
-
-Unicode should be fine too.
-
-    >>> text = u"Línk tö http://foo.ni"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    L&iacute;nk t&ouml; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
-
-Leading whitespace is converted to non breaking spaces to preserve
-indentation:
-
-    >>> text = "Some text.\n    And some indentation."
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.
-
-Leading tabs are converted to spaces.  The default is 4:
-
-    >>> text = "Before the tab:\n\tand after the tab."
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
-
-You can specify a different tab width:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width=2))
-    Before the tab:<br />&nbsp;&nbsp;and after the tab.
-
-In case the tab width is not an integer, we try to convert it:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='2'))
-    Before the tab:<br />&nbsp;&nbsp;and after the tab.
-
-When that fails we fall back to 4 spaces:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='1.5'))
-    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
-
-
-Html to intelligent text
-------------------------
-
-We want the transform to work the other way around too.  For starters
-this means that tags must be stripped.
-
-    >>> orig = "Some <b>bold</b> text."
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Some bold text.
-
-Some basic fallback would be nice:
-
-    >>> bprint(convertHtmlToWebIntelligentPlainText(None))
-
-Line breaks need to be handled.
-
-    >>> orig = "Some<br/>broken<BR/>text<br />"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Some
-    broken
-    text
-
-Starting blocks:
-
-    >>> orig = "A block<dt>there</dt>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A block
-    <BLANKLINE>
-    there
-
-Ending blocks:
-
-    >>> orig = "<p>Paragraph</p>Other stuff"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Paragraph
-    <BLANKLINE>
-    Other stuff
-
-Indenting blocks:
-
-    >>> orig = "An<blockquote>Indented blockquote</blockquote>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    An
-    <BLANKLINE>
-      Indented blockquote
-
-Lists:
-
-    >>> orig = "A list<ul><li>Foo</li><li>Bar</li></ul>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A list
-    <BLANKLINE>
-      - Foo
-        - Bar
-
-Non breaking spaces:
-
-    >>> orig = "Some space &nbsp;&nbsp;here"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Some space   here
-
-Angles:
-
-    >>> orig = "Watch &lt;this&gt; and &lsaquo;that&rsaquo;"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Watch <this> and &#8249;that&#8250;
-
-Bullets:
-
-    >>> orig = "A &bull; bullet"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A &#8226; bullet
-
-Ampersands:
-
-    >>> orig = "An &amp; ampersand"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    An & ampersand
-
-Entities:
-
-    >>> orig = "A &mdash; dash"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A &#8212; dash
-
-Pre formatted text:
-
-    >>> orig = "A <pre>  pre\n  section</pre>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A 
-    <BLANKLINE>
-      pre
-      section
-
-White space:
-    >>> orig = "A \n\t spaceful, <b>  tag-filled</b>, <b> <i>  snippet\n</b></i>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A spaceful, tag-filled, snippet 
diff --git a/plone/intelligenttext/__init__.py b/plone/intelligenttext/__init__.py
index 792d600..40a96af 100644
--- a/plone/intelligenttext/__init__.py
+++ b/plone/intelligenttext/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py
index 5a653a8..c36534f 100644
--- a/plone/intelligenttext/tests.py
+++ b/plone/intelligenttext/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import doctest
 import unittest
 
@@ -12,8 +13,10 @@ def bprint(s):
 
 def test_suite():
     return unittest.TestSuite([
-        doctest.DocFileSuite('README.txt',
-                             globs={'bprint': bprint},
-                             encoding='utf-8',
-                             optionflags=optionflags,)
-        ])
+        doctest.DocFileSuite(
+            'README.rst',
+            globs={'bprint': bprint},
+            encoding='utf-8',
+            optionflags=optionflags,
+        )
+    ])
diff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py
index bcce5b9..58e237b 100644
--- a/plone/intelligenttext/transforms.py
+++ b/plone/intelligenttext/transforms.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import re
 import sys
 
@@ -17,9 +18,15 @@ def safe_decode(s, encoding='utf-8', errors='strict'):
 
 
 class WebIntelligentToHtmlConverter(object):
-    urlRegexp = re.compile(r'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\b(?::\d+)?(?:\/[^"\'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^"\'<>()\[\]{}\s\x7f-\xff]+)*)?)', re.I|re.S|re.U)
-    emailRegexp = re.compile(r'["=]?(\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\.[A-Z]{2,4}\b)', re.I|re.S|re.U)
-    indentRegexp = re.compile(r'^(\s+)', re.M|re.U)
+    urlRegexp = re.compile(
+        r'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\b(?::\d+)?(?:\/[^"\'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^"\'<>()\[\]{}\s\x7f-\xff]+)*)?)',
+        re.I | re.S | re.U
+    )
+    emailRegexp = re.compile(
+        r'["=]?(\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\.[A-Z]{2,4}\b)',
+        re.I | re.S | re.U
+    )
+    indentRegexp = re.compile(r'^(\s+)', re.M | re.U)
 
     def __init__(self, orig, tab_width=4):
         self.orig = orig
@@ -106,6 +113,7 @@ def indentWhitespace(self, match):
         indent = indent.replace(' ', '&nbsp;')
         return indent.replace('\t', '&nbsp;' * self.tab_width)
 
+
 def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):
     """Converts text/x-web-intelligent to text/html
     """
@@ -113,10 +121,11 @@ def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):
         # tab_width could be a string like '4'
         tab_width = int(tab_width)
     except ValueError:
-        tab_width=4
+        tab_width = 4
 
     return WebIntelligentToHtmlConverter(orig, tab_width)()
 
+
 def convertHtmlToWebIntelligentPlainText(orig):
     """Converts text/html to text/x-web-intelligent.
     """
@@ -162,7 +171,10 @@ def fixTagWhitespace(match):
         # Do &lt; and &gt; later, else we may be creating what looks like
         # tags
         if entity != 'lt' and entity != 'gt' and entity != 'amp':
-            text = text.replace('&' + entity + ';', '&#' + str(codepoint) + ';')
+            text = text.replace(
+                '&' + entity + ';',
+                '&#' + str(codepoint) + ';'
+            )
 
     # XXX: Remove <head>, <script>, <style> ?
 
diff --git a/setup.py b/setup.py
index b686623..8757b82 100644
--- a/setup.py
+++ b/setup.py
@@ -2,31 +2,35 @@
 
 version = '2.1.0.dev0'
 
-setup(name='plone.intelligenttext',
-      version=version,
-      description="Provides transforms from text/x-web-intelligent to "
-                  "text/html and vice versa.",
-      long_description=open("README.rst").read() + "\n" +
-                       open("CHANGES.rst").read(),
-      classifiers=[
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-        ],
-      keywords='',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.intelligenttext',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      test_suite="plone.intelligenttext.tests.test_suite",
-      install_requires=[
-        'setuptools',
+setup(
+    name='plone.intelligenttext',
+    version=version,
+    description="Provides transforms from text/x-web-intelligent to "
+                "text/html and vice versa.",
+    long_description=(
+        open("README.rst").read() +
+        "\n" +
+        open("CHANGES.rst").read()
+    ),
+    classifiers=[
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
       ],
-      )
+    keywords='',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.intelligenttext',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    test_suite="plone.intelligenttext.tests.test_suite",
+    install_requires=[
+      'setuptools',
+    ],
+)


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-10-08T11:38:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.intelligenttext/commit/63873e7cedaefb91b5ef861b7e95f24d94dde4be

fix original typo

Files changed:
M README.rst
M plone/intelligenttext/README.rst

diff --git a/README.rst b/README.rst
index bdb9547..948e617 100644
--- a/README.rst
+++ b/README.rst
@@ -6,7 +6,7 @@ Overview
 
 Provides transforms from ``text/x-web-intelligent`` to ``text/html`` and vice versa.
 
-Line breaks and indentation is preserved, and web and email addresses are made into clickable links.
+Line breaks and indentation are preserved, and web and email addresses are made into clickable links.
 Links get a ``rel="nofollow"`` to make this less interesting for spammers.
 
 This package works in pure Python 2.7 and 3.0 and has no dependency on Plone.
diff --git a/plone/intelligenttext/README.rst b/plone/intelligenttext/README.rst
index acf0453..653b726 100644
--- a/plone/intelligenttext/README.rst
+++ b/plone/intelligenttext/README.rst
@@ -3,7 +3,7 @@ Intelligent text
 
 This package contains a transform that is capable converting plain text into HTML.
 
-Line breaks and indentation is preserved, and web and email addresses are made into clickable links.
+Line breaks and indentation are preserved, and web and email addresses are made into clickable links.
 
 Intended use is for example for portal_transforms in CMF.
 


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-10-08T11:45:33+01:00
Author: Adam Forsythe-Cheasley (adamcheasley) <adam@netsight.co.uk>
Commit: https://github.com/plone/plone.intelligenttext/commit/d2a0d58617451ff558f640fe975c0b5b1b17df0d

Merge pull request #3 from plone/jensens-cleanup

Minor cleanup (pep8, readability, ReST)

Files changed:
A plone/intelligenttext/README.rst
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/intelligenttext/__init__.py
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M setup.py
D plone/intelligenttext/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 75ab534..54521a2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,6 +5,9 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- Minor cleanup (pep8, readability, ReST)
+  [jensens]
+
 - Make compatible with Python 3.
   [davisagli]
 
diff --git a/README.rst b/README.rst
index 5acdc1c..948e617 100644
--- a/README.rst
+++ b/README.rst
@@ -4,4 +4,9 @@ plone.intelligenttext
 Overview
 --------
 
-Provides transforms from text/x-web-intelligent to text/html and vice versa.
+Provides transforms from ``text/x-web-intelligent`` to ``text/html`` and vice versa.
+
+Line breaks and indentation are preserved, and web and email addresses are made into clickable links.
+Links get a ``rel="nofollow"`` to make this less interesting for spammers.
+
+This package works in pure Python 2.7 and 3.0 and has no dependency on Plone.
diff --git a/plone/__init__.py b/plone/__init__.py
index de40ea7..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/intelligenttext/README.rst b/plone/intelligenttext/README.rst
new file mode 100644
index 0000000..653b726
--- /dev/null
+++ b/plone/intelligenttext/README.rst
@@ -0,0 +1,286 @@
+Intelligent text
+================
+
+This package contains a transform that is capable converting plain text into HTML.
+
+Line breaks and indentation are preserved, and web and email addresses are made into clickable links.
+
+Intended use is for example for portal_transforms in CMF.
+
+Basic usage
+-----------
+
+The basic usage is turning intelligenttext into html::
+
+    >>> from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
+    >>> text = 'Go to http://plone.org'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>
+
+And the other way around::
+
+    >>> from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
+    >>> html = 'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(html))
+    Go to http://plone.org
+
+
+Intelligent text to html
+------------------------
+
+We can get a hyperlink.
+We always add rel="nofollow" to make this less interesting for spammers::
+
+    >>> orig = "A test http://test.com"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="http://test.com" rel="nofollow">http://test.com</a>
+
+An email address should be clickable too::
+
+    >>> orig = "A test test@test.com of mailto"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto
+
+Some basic fallback would be nice::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(None))
+
+Text, links and email addressed can be split over multiple lines::
+
+    >>> orig = """A test
+    ... URL: http://test.com End
+    ... Mail: test@test.com End
+    ... URL: http://foo.com End"""
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End
+
+
+Having the links at the end of the line should not have adverse effects::
+
+    >>> orig = """A test
+    ... URL: http://test.com
+    ... Mail: test@test.com
+    ... URL: http://foo.com"""
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
+
+
+Indentation should be preserved::
+
+    >>> orig = """A test
+    ...   URL: http://test.com
+    ...     Mail: test@test.com
+    ...       URL: http://foo.com"""
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
+    >>> convertWebIntelligentPlainTextToHtml(orig).count(b'&nbsp;')
+    12
+
+HTML entities should be escaped::
+
+    >>> orig = "Some & funny < characters"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    Some &amp; funny &lt; characters
+
+Accentuated characters, like in French, should be html escaped::
+
+    >>> orig = "The French use é à ô ù à and ç."
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.
+
+Links with ampersands in them should be handled correctly::
+
+    >>> orig = "http://google.com/ask?question=everything&answer=42"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    <a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>
+
+We want to make sure that the text representation of long urls is not too long::
+
+    >>> url0 = "http://verylonghost.longsubdomain.veryverylongdomain.com/index.html"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url0))
+    <a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>
+    >>> url1 = "http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url1))
+    <a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>
+    >>> url2 = "https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url2))
+    <a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>
+
+If there is a url in brackets, the link should not contain one of the brackets::
+
+    >>> bracket_url = "<http://plone.org/products/poi/issues/155>"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(bracket_url))
+    &lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;
+
+Port numbers should be recognized as linkworthy::
+
+    >>> url = "http://plone3.freeman-centre.ac.uk:8080/caldav"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>
+
+localhost should be good::
+
+    >>> url = "http://localhost:8080/"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>
+
+Check ip numbers too while we are at it::
+
+    >>> url = "http://127.0.0.1:8080/"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://255.255.255.255"))
+    <a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://0.0.0.0"))
+    <a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>
+
+
+ftp is accepted::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml("ftp://localhost"))
+    <a href="ftp://localhost" rel="nofollow">ftp://localhost</a>
+
+https is accepted::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml("https://localhost"))
+    <a href="https://localhost" rel="nofollow">https://localhost</a>
+
+Unicode should be fine too::
+
+    >>> text = u"Línk tö http://foo.ni"
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    L&iacute;nk t&ouml; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
+
+Leading whitespace is converted to non breaking spaces to preserve indentation::
+
+    >>> text = "Some text.\n    And some indentation."
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.
+
+Leading tabs are converted to spaces.  The default is ``4``::
+
+    >>> text = "Before the tab:\n\tand after the tab."
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
+
+You can specify a different tab width::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width=2))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
+
+In case the tab width is not an integer, we try to convert it::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='2'))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
+
+When that fails we fall back to 4 spaces::
+
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='1.5'))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
+
+
+Html to intelligent text
+------------------------
+
+We want the transform to work the other way around too.
+For starters this means that tags must be stripped::
+
+    >>> orig = "Some <b>bold</b> text."
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some bold text.
+
+Some basic fallback would be nice::
+
+    >>> bprint(convertHtmlToWebIntelligentPlainText(None))
+
+Line breaks need to be handled.::
+
+    >>> orig = "Some<br/>broken<BR/>text<br />"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some
+    broken
+    text
+
+Starting blocks::
+
+    >>> orig = "A block<dt>there</dt>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A block
+    <BLANKLINE>
+    there
+
+Ending blocks::
+
+    >>> orig = "<p>Paragraph</p>Other stuff"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Paragraph
+    <BLANKLINE>
+    Other stuff
+
+Indenting blocks::
+
+    >>> orig = "An<blockquote>Indented blockquote</blockquote>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An
+    <BLANKLINE>
+      Indented blockquote
+
+Lists::
+
+    >>> orig = "A list<ul><li>Foo</li><li>Bar</li></ul>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A list
+    <BLANKLINE>
+      - Foo
+        - Bar
+
+Non breaking spaces::
+
+    >>> orig = "Some space &nbsp;&nbsp;here"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some space   here
+
+Angles::
+
+    >>> orig = "Watch &lt;this&gt; and &lsaquo;that&rsaquo;"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Watch <this> and &#8249;that&#8250;
+
+Bullets::
+
+    >>> orig = "A &bull; bullet"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8226; bullet
+
+Ampersands::
+
+    >>> orig = "An &amp; ampersand"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An & ampersand
+
+Entities::
+
+    >>> orig = "A &mdash; dash"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8212; dash
+
+Pre formatted text::
+
+    >>> orig = "A <pre>  pre\n  section</pre>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A
+    <BLANKLINE>
+      pre
+      section
+
+White space::
+    >>> orig = "A \n\t spaceful, <b>  tag-filled</b>, <b> <i>  snippet\n</b></i>"
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A spaceful, tag-filled, snippet
+
+
+Credits
+-------
+
+- Started by Martin Aspeli
+- Contributions from the Plone Community
diff --git a/plone/intelligenttext/README.txt b/plone/intelligenttext/README.txt
deleted file mode 100644
index cac09e9..0000000
--- a/plone/intelligenttext/README.txt
+++ /dev/null
@@ -1,281 +0,0 @@
-Intelligent text
-================
-
-Started by Martin Aspeli
-
-This package contains a and a transform (for example for
-portal_transforms in CMF) that is capable converting plain text into
-HTML where line breaks and indentation is preserved, and web and email
-addresses are made into clickable links.
-
-Basic usage
------------
-
-The basic usage is turning intelligenttext into html:
-
-    >>> from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
-    >>> text = 'Go to http://plone.org'
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>
-
-And the other way around:
-
-    >>> from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
-    >>> html = 'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
-    >>> bprint(convertHtmlToWebIntelligentPlainText(html))
-    Go to http://plone.org
-
-
-Intelligent text to html
-------------------------
-
-We can get a hyperlink.  We always add rel="nofollow" to make this
-less interesting for spammers.
-
-    >>> orig = "A test http://test.com"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test <a href="http://test.com" rel="nofollow">http://test.com</a>
-
-An email address should be clickable too:
-
-    >>> orig = "A test test@test.com of mailto"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto
-
-Some basic fallback would be nice:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(None))
-
-Text, links and email addressed can be split over multiple lines.
-
-    >>> orig = """A test
-    ... URL: http://test.com End
-    ... Mail: test@test.com End
-    ... URL: http://foo.com End"""
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End
-
-
-Having the links at the end of the line should not have adverse effects.
-
-    >>> orig = """A test
-    ... URL: http://test.com
-    ... Mail: test@test.com
-    ... URL: http://foo.com"""
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
-
-
-Indentation should be preserved.
-
-    >>> orig = """A test
-    ...   URL: http://test.com
-    ...     Mail: test@test.com
-    ...       URL: http://foo.com"""
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
-    >>> convertWebIntelligentPlainTextToHtml(orig).count(b'&nbsp;')
-    12
-
-HTML entities should be escaped.
-
-    >>> orig = "Some & funny < characters"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    Some &amp; funny &lt; characters
-
-Accentuated characters, like in French, should be html escaped.
-
-    >>> orig = "The French use é à ô ù à and ç."
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.
-
-Links with ampersands in them should be handled correctly.
-
-    >>> orig = "http://google.com/ask?question=everything&answer=42"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
-    <a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>
-
-We want to make sure that the text representation of long urls is not too long.
-
-    >>> url0 = "http://verylonghost.longsubdomain.veryverylongdomain.com/index.html"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url0))
-    <a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>
-    >>> url1 = "http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url1))
-    <a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>
-    >>> url2 = "https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url2))
-    <a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>
-
-If there is a url in brackets, the link should not contain one of the brackets.
-
-    >>> bracket_url = "<http://plone.org/products/poi/issues/155>"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(bracket_url))
-    &lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;
-
-Port numbers should be recognized as linkworthy.
-
-    >>> url = "http://plone3.freeman-centre.ac.uk:8080/caldav"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
-    <a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>
-
-localhost should be good.
-
-    >>> url = "http://localhost:8080/"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
-    <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>
-
-Check ip numbers too while we are at it.
-
-    >>> url = "http://127.0.0.1:8080/"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
-    <a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>
-    >>> bprint(convertWebIntelligentPlainTextToHtml("http://255.255.255.255"))
-    <a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>
-    >>> bprint(convertWebIntelligentPlainTextToHtml("http://0.0.0.0"))
-    <a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>
-
-
-ftp is accepted.
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml("ftp://localhost"))
-    <a href="ftp://localhost" rel="nofollow">ftp://localhost</a>
-
-https is accepted.
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml("https://localhost"))
-    <a href="https://localhost" rel="nofollow">https://localhost</a>
-
-Unicode should be fine too.
-
-    >>> text = u"Línk tö http://foo.ni"
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    L&iacute;nk t&ouml; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
-
-Leading whitespace is converted to non breaking spaces to preserve
-indentation:
-
-    >>> text = "Some text.\n    And some indentation."
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.
-
-Leading tabs are converted to spaces.  The default is 4:
-
-    >>> text = "Before the tab:\n\tand after the tab."
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
-
-You can specify a different tab width:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width=2))
-    Before the tab:<br />&nbsp;&nbsp;and after the tab.
-
-In case the tab width is not an integer, we try to convert it:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='2'))
-    Before the tab:<br />&nbsp;&nbsp;and after the tab.
-
-When that fails we fall back to 4 spaces:
-
-    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='1.5'))
-    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
-
-
-Html to intelligent text
-------------------------
-
-We want the transform to work the other way around too.  For starters
-this means that tags must be stripped.
-
-    >>> orig = "Some <b>bold</b> text."
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Some bold text.
-
-Some basic fallback would be nice:
-
-    >>> bprint(convertHtmlToWebIntelligentPlainText(None))
-
-Line breaks need to be handled.
-
-    >>> orig = "Some<br/>broken<BR/>text<br />"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Some
-    broken
-    text
-
-Starting blocks:
-
-    >>> orig = "A block<dt>there</dt>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A block
-    <BLANKLINE>
-    there
-
-Ending blocks:
-
-    >>> orig = "<p>Paragraph</p>Other stuff"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Paragraph
-    <BLANKLINE>
-    Other stuff
-
-Indenting blocks:
-
-    >>> orig = "An<blockquote>Indented blockquote</blockquote>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    An
-    <BLANKLINE>
-      Indented blockquote
-
-Lists:
-
-    >>> orig = "A list<ul><li>Foo</li><li>Bar</li></ul>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A list
-    <BLANKLINE>
-      - Foo
-        - Bar
-
-Non breaking spaces:
-
-    >>> orig = "Some space &nbsp;&nbsp;here"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Some space   here
-
-Angles:
-
-    >>> orig = "Watch &lt;this&gt; and &lsaquo;that&rsaquo;"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    Watch <this> and &#8249;that&#8250;
-
-Bullets:
-
-    >>> orig = "A &bull; bullet"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A &#8226; bullet
-
-Ampersands:
-
-    >>> orig = "An &amp; ampersand"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    An & ampersand
-
-Entities:
-
-    >>> orig = "A &mdash; dash"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A &#8212; dash
-
-Pre formatted text:
-
-    >>> orig = "A <pre>  pre\n  section</pre>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A 
-    <BLANKLINE>
-      pre
-      section
-
-White space:
-    >>> orig = "A \n\t spaceful, <b>  tag-filled</b>, <b> <i>  snippet\n</b></i>"
-    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
-    A spaceful, tag-filled, snippet 
diff --git a/plone/intelligenttext/__init__.py b/plone/intelligenttext/__init__.py
index 792d600..40a96af 100644
--- a/plone/intelligenttext/__init__.py
+++ b/plone/intelligenttext/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py
index 5a653a8..c36534f 100644
--- a/plone/intelligenttext/tests.py
+++ b/plone/intelligenttext/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import doctest
 import unittest
 
@@ -12,8 +13,10 @@ def bprint(s):
 
 def test_suite():
     return unittest.TestSuite([
-        doctest.DocFileSuite('README.txt',
-                             globs={'bprint': bprint},
-                             encoding='utf-8',
-                             optionflags=optionflags,)
-        ])
+        doctest.DocFileSuite(
+            'README.rst',
+            globs={'bprint': bprint},
+            encoding='utf-8',
+            optionflags=optionflags,
+        )
+    ])
diff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py
index bcce5b9..58e237b 100644
--- a/plone/intelligenttext/transforms.py
+++ b/plone/intelligenttext/transforms.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import re
 import sys
 
@@ -17,9 +18,15 @@ def safe_decode(s, encoding='utf-8', errors='strict'):
 
 
 class WebIntelligentToHtmlConverter(object):
-    urlRegexp = re.compile(r'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\b(?::\d+)?(?:\/[^"\'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^"\'<>()\[\]{}\s\x7f-\xff]+)*)?)', re.I|re.S|re.U)
-    emailRegexp = re.compile(r'["=]?(\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\.[A-Z]{2,4}\b)', re.I|re.S|re.U)
-    indentRegexp = re.compile(r'^(\s+)', re.M|re.U)
+    urlRegexp = re.compile(
+        r'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\b(?::\d+)?(?:\/[^"\'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^"\'<>()\[\]{}\s\x7f-\xff]+)*)?)',
+        re.I | re.S | re.U
+    )
+    emailRegexp = re.compile(
+        r'["=]?(\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\.[A-Z]{2,4}\b)',
+        re.I | re.S | re.U
+    )
+    indentRegexp = re.compile(r'^(\s+)', re.M | re.U)
 
     def __init__(self, orig, tab_width=4):
         self.orig = orig
@@ -106,6 +113,7 @@ def indentWhitespace(self, match):
         indent = indent.replace(' ', '&nbsp;')
         return indent.replace('\t', '&nbsp;' * self.tab_width)
 
+
 def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):
     """Converts text/x-web-intelligent to text/html
     """
@@ -113,10 +121,11 @@ def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):
         # tab_width could be a string like '4'
         tab_width = int(tab_width)
     except ValueError:
-        tab_width=4
+        tab_width = 4
 
     return WebIntelligentToHtmlConverter(orig, tab_width)()
 
+
 def convertHtmlToWebIntelligentPlainText(orig):
     """Converts text/html to text/x-web-intelligent.
     """
@@ -162,7 +171,10 @@ def fixTagWhitespace(match):
         # Do &lt; and &gt; later, else we may be creating what looks like
         # tags
         if entity != 'lt' and entity != 'gt' and entity != 'amp':
-            text = text.replace('&' + entity + ';', '&#' + str(codepoint) + ';')
+            text = text.replace(
+                '&' + entity + ';',
+                '&#' + str(codepoint) + ';'
+            )
 
     # XXX: Remove <head>, <script>, <style> ?
 
diff --git a/setup.py b/setup.py
index b686623..8757b82 100644
--- a/setup.py
+++ b/setup.py
@@ -2,31 +2,35 @@
 
 version = '2.1.0.dev0'
 
-setup(name='plone.intelligenttext',
-      version=version,
-      description="Provides transforms from text/x-web-intelligent to "
-                  "text/html and vice versa.",
-      long_description=open("README.rst").read() + "\n" +
-                       open("CHANGES.rst").read(),
-      classifiers=[
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-        ],
-      keywords='',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.intelligenttext',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      test_suite="plone.intelligenttext.tests.test_suite",
-      install_requires=[
-        'setuptools',
+setup(
+    name='plone.intelligenttext',
+    version=version,
+    description="Provides transforms from text/x-web-intelligent to "
+                "text/html and vice versa.",
+    long_description=(
+        open("README.rst").read() +
+        "\n" +
+        open("CHANGES.rst").read()
+    ),
+    classifiers=[
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
       ],
-      )
+    keywords='',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.intelligenttext',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    test_suite="plone.intelligenttext.tests.test_suite",
+    install_requires=[
+      'setuptools',
+    ],
+)


