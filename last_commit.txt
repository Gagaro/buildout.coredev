Repository: Products.Marshall


Branch: refs/heads/master
Date: 2015-01-22T10:22:32Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.Marshall/commit/4937ffc9955237369bb96271127ad53d54c65546

cleanups reported by frosted

Files changed:
M Products/Marshall/export.py
M Products/Marshall/expression.py
M Products/Marshall/handlers/__init__.py
M Products/Marshall/handlers/atxml.py
M Products/Marshall/handlers/simple.py
M Products/Marshall/interfaces/__init__.py
M Products/Marshall/interfaces/predicate.py
M Products/Marshall/namespaces/cmfns.py
M Products/Marshall/namespaces/dcns.py
M Products/Marshall/namespaces/uuns.py
M Products/Marshall/predicates/__init__.py
M Products/Marshall/profile.py
M Products/Marshall/registry.py
M Products/Marshall/tests/test_marshall.py
M Products/Marshall/tests/test_predicate.py
M Products/Marshall/utils/upload.py

diff --git a/Products/Marshall/export.py b/Products/Marshall/export.py
index d96cd90..4ec9d81 100644
--- a/Products/Marshall/export.py
+++ b/Products/Marshall/export.py
@@ -16,19 +16,15 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 
 import os
-import tempfile
 import zipfile
-import shutil
 from cStringIO import StringIO
 from App.class_init import InitializeClass
 from ExtensionClass import Base
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.permissions import ManagePortal
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 
diff --git a/Products/Marshall/expression.py b/Products/Marshall/expression.py
index 097a055..7b985e4 100644
--- a/Products/Marshall/expression.py
+++ b/Products/Marshall/expression.py
@@ -18,13 +18,10 @@
 """
 Persistent TALES Expression. Highly inspired (read copied)
 from CMFCore's Expression.
-
-$Id$
 """
 
 from Persistence import Persistent
 from App.class_init import InitializeClass
-from Acquisition import aq_inner, aq_parent
 from AccessControl import getSecurityManager, ClassSecurityInfo
 
 from Products.PageTemplates.Expressions import getEngine
diff --git a/Products/Marshall/handlers/__init__.py b/Products/Marshall/handlers/__init__.py
index f898328..2061060 100644
--- a/Products/Marshall/handlers/__init__.py
+++ b/Products/Marshall/handlers/__init__.py
@@ -18,7 +18,6 @@
 """
 """
 
-from Products.Marshall.config import hasLibxml2
 from Products.Marshall.registry import registerComponent
 
 # Register default Archetypes marshallers
@@ -30,12 +29,5 @@
 registerComponent('rfc822', 'RFC822 Marshaller',
                   RFC822Marshaller)
 
-if hasLibxml2:
-    # Now register our own xml marshallers
-    from Products.Marshall.handlers.simple import SimpleXMLMarshaller
-
-    registerComponent('simple_xml', 'Simple XML Marshaller',
-                      SimpleXMLMarshaller)
-
 from Products.Marshall.handlers.atxml import ATXMLMarshaller
 registerComponent('atxml', 'ATXML Marshaller', ATXMLMarshaller)
diff --git a/Products/Marshall/handlers/atxml.py b/Products/Marshall/handlers/atxml.py
index 91a69ef..9b0fcbc 100644
--- a/Products/Marshall/handlers/atxml.py
+++ b/Products/Marshall/handlers/atxml.py
@@ -88,7 +88,7 @@ def get(self, clear=False):
 
     def clear(self):
         tid = thread.get_ident()
-        msgs = self.msgs[tid] = []
+        self.msgs[tid] = []
 
 
 class XmlNamespace(object):
@@ -305,7 +305,6 @@ def __init__(self, demarshall_hook=None, marshall_hook=None,
             self.namespace = config.AT_NS
 
     def getFieldNamespace(self, field):
-        namespaces = self.getNamespaceURIMap()
         # Flatten ns into (ns, attr) tuples
         flat_ns = []
         [flat_ns.extend(zip((n,) * len(n.attrs), n.attrs)) for
@@ -323,7 +322,7 @@ def getNamespaceURIMap(self):
     def getNamespacePrefixMap(self):
         """ Mapping of prefix -> xmlns URI
         """
-        prefix_map = dict([(ns.prefix, ns.xmlns) for ns in self.namespaces])
+        return dict([(ns.prefix, ns.xmlns) for ns in self.namespaces])
 
     def getNamespaces(self, namespaces=None):
         if namespaces is None:
diff --git a/Products/Marshall/handlers/simple.py b/Products/Marshall/handlers/simple.py
index 15110e7..7b2ce0e 100644
--- a/Products/Marshall/handlers/simple.py
+++ b/Products/Marshall/handlers/simple.py
@@ -16,22 +16,11 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id: _xml.py 2994 2004-09-09 12:22:37Z dreamcatcher $
 """
 
-import os
-import thread
 from types import ListType, TupleType
 from xml.dom import minidom
-from cStringIO import StringIO
-from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from Products.Archetypes.Marshall import Marshaller
-from Products.Archetypes.Field import ReferenceField
-from Products.Archetypes.config import REFERENCE_CATALOG, UUID_ATTR
-from Products.Archetypes.debug import log
-from Products.Marshall.config import AT_NS, CMF_NS, ATXML_SCHEMA
-from Products.Marshall.exceptions import MarshallingException
 
 import libxml2
 libxml2.initParser()
diff --git a/Products/Marshall/interfaces/__init__.py b/Products/Marshall/interfaces/__init__.py
index 63a81ef..37f46ea 100644
--- a/Products/Marshall/interfaces/__init__.py
+++ b/Products/Marshall/interfaces/__init__.py
@@ -16,7 +16,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 from zope.interface import Interface
 from Products.Marshall.interfaces.predicate import IPredicate
diff --git a/Products/Marshall/interfaces/predicate.py b/Products/Marshall/interfaces/predicate.py
index 5c66448..22cb956 100644
--- a/Products/Marshall/interfaces/predicate.py
+++ b/Products/Marshall/interfaces/predicate.py
@@ -17,8 +17,6 @@
 #
 """
 Interfaces for Predicate
-
-$Id$
 """
 
 from zope.interface import Interface
diff --git a/Products/Marshall/namespaces/cmfns.py b/Products/Marshall/namespaces/cmfns.py
index 04cbb38..c4fc4b8 100644
--- a/Products/Marshall/namespaces/cmfns.py
+++ b/Products/Marshall/namespaces/cmfns.py
@@ -23,11 +23,9 @@
 
 Created: 10/11/2004
 Author: Kapil Thangavelu <k_vertigo@objectrealms.net>
-$Id: $
 """
 
 from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from Products.Marshall import config
 from Products.Marshall.handlers.atxml import XmlNamespace
 from Products.Marshall.handlers.atxml import SchemaAttribute
@@ -153,7 +151,7 @@ def processXml(self, context, ctx_node):
 
         while context.reader.MoveToNextAttribute():
             if context.reader.LocalName() == 'user_id':
-                user_id = reader.Value()
+                user_id = context.reader.Value()
             elif context.reader.LocalName() == 'role':
                 role = context.reader.Value()
 
@@ -214,10 +212,7 @@ def get(self, instance):
 
     def deserialize(self, instance, ns_data):
         wf_records = ns_data.get(self.name, {})
-        wf_tool = getToolByName(instance, 'portal_workflow')
-
         for wf_id in wf_records:
-            #history = list(instance.workflow_history.setdefault(wf_id, ()))
             history = []
             for record in wf_records[wf_id]:
                 history.append(record)
diff --git a/Products/Marshall/namespaces/dcns.py b/Products/Marshall/namespaces/dcns.py
index 203cb05..e1c9391 100644
--- a/Products/Marshall/namespaces/dcns.py
+++ b/Products/Marshall/namespaces/dcns.py
@@ -19,10 +19,7 @@
 ##################################################################
 
 """
-$Id: $
 """
-
-from Products.CMFCore.utils import getToolByName
 from Products.Marshall.handlers.atxml import XmlNamespace
 from Products.Marshall.handlers.atxml import SchemaAttribute
 
diff --git a/Products/Marshall/namespaces/uuns.py b/Products/Marshall/namespaces/uuns.py
index 9fdee6f..a32b237 100644
--- a/Products/Marshall/namespaces/uuns.py
+++ b/Products/Marshall/namespaces/uuns.py
@@ -19,14 +19,12 @@
 ##################################################################
 
 """
-$Id: $
 """
 
 # Georg Gogo. BERNHARD: UUencoded pluggable namespace for all at fields
 
 #from DateTime import DateTime
 from Products.Marshall.public import XmlNamespace, SchemaAttribute
-from Products.Archetypes import public as atapi
 from cStringIO import StringIO
 
 import base64
diff --git a/Products/Marshall/predicates/__init__.py b/Products/Marshall/predicates/__init__.py
index b47270a..919b275 100644
--- a/Products/Marshall/predicates/__init__.py
+++ b/Products/Marshall/predicates/__init__.py
@@ -16,7 +16,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 
 from _base import Predicate, constructors, manage_addPredicate
diff --git a/Products/Marshall/profile.py b/Products/Marshall/profile.py
index 6c63f40..18da7ce 100644
--- a/Products/Marshall/profile.py
+++ b/Products/Marshall/profile.py
@@ -16,22 +16,14 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id: config.py 7851 2007-03-31 13:01:43Z seletz $
 """
 
-from StringIO import StringIO
-
 from zope.interface import implements
 
 from Products.GenericSetup.interfaces import IFilesystemExporter
 from Products.GenericSetup.interfaces import IFilesystemImporter
-from Products.GenericSetup.content import FauxDAVRequest
-from Products.GenericSetup.content import FauxDAVResponse
 from Products.GenericSetup.utils import ExportConfiguratorBase
 from Products.GenericSetup.utils import ImportConfiguratorBase
-from Products.GenericSetup.utils import _getDottedName
-from Products.GenericSetup.utils import _resolveDottedName
-from Products.GenericSetup.utils import CONVERTER
 from Products.GenericSetup.utils import DEFAULT
 from Products.GenericSetup.utils import KEY
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
@@ -191,10 +183,4 @@ def import_(self, import_context, subdir, root=False):
             import_context.note('SGAIFA',
                                 'no %s in %s' % (_FILENAME, subdir))
         else:
-            request = FauxDAVRequest(BODY=data, BODYFILE=StringIO(data))
-            response = FauxDAVResponse()
-            _updatePluginRegistry(self.context,
-                                  data,
-                                  import_context.shouldPurge(),
-                                  import_context.getEncoding(),
-                                 )
+            pass
diff --git a/Products/Marshall/registry.py b/Products/Marshall/registry.py
index a83abc6..343a3b6 100644
--- a/Products/Marshall/registry.py
+++ b/Products/Marshall/registry.py
@@ -16,16 +16,14 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 
 from zope.interface import implements
 
 from OFS.OrderedFolder import OrderedFolder
-from Persistence import PersistentMapping
 from App.class_init import InitializeClass
 from AccessControl import ClassSecurityInfo
-from AccessControl.Permissions import view, manage_properties
+from AccessControl.Permissions import view
 
 from Products.Marshall.interfaces import IPredicate
 from Products.Marshall.interfaces import IMarshallRegistry
diff --git a/Products/Marshall/tests/test_marshall.py b/Products/Marshall/tests/test_marshall.py
index 368e9b2..8b39ba3 100644
--- a/Products/Marshall/tests/test_marshall.py
+++ b/Products/Marshall/tests/test_marshall.py
@@ -8,10 +8,13 @@
 from Products.Marshall import registry
 from Products.Marshall.registry import Registry
 from Products.Marshall.registry import getComponent
-from Products.Marshall.exceptions import MarshallingException
 from Products.Marshall.tests import PACKAGE_HOME
-from Products.Marshall.tests.examples import person
 from Products.Marshall.tests.examples import blob
+
+from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
+from plone.testing import layered
+
+
 tool_id = Registry.id
 
 
@@ -88,9 +91,6 @@ def test_blob_text_html(self):
 
 def test_suite():
     import unittest
-    from doctest import DocFileSuite
-    from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
-    from plone.testing import layered
     suite = unittest.TestSuite()
 
     suite.addTest(layered(doctest.DocFileSuite(
diff --git a/Products/Marshall/tests/test_predicate.py b/Products/Marshall/tests/test_predicate.py
index 3a3d559..37a1034 100644
--- a/Products/Marshall/tests/test_predicate.py
+++ b/Products/Marshall/tests/test_predicate.py
@@ -164,22 +164,6 @@ def test_xmlns_element(self):
         self.assertEquals(self.get(None, data=bad_data), ())
         self.assertEquals(self.get(None, data=''), ())
 
-    def test_xmlns_element(self):
-        p = add_predicate(
-            self.tool,
-            id='xmlns_attr',
-            title='xmlns',
-            predicate='xmlns_attr',
-            expression='',
-            component_name='primary_field')
-        p.edit(element_name='test', value=None)
-        data = """<?xml version="1.0" encoding="UTF-8"?>
-        <test>
-           Doesn't Matter
-        </test>
-        """
-        self.assertEquals(self.get(None, data=data), ('primary_field',))
-
     def test_xmlns_element_ns(self):
         p = add_predicate(
             self.tool,
diff --git a/Products/Marshall/utils/upload.py b/Products/Marshall/utils/upload.py
index d40c581..3250de7 100644
--- a/Products/Marshall/utils/upload.py
+++ b/Products/Marshall/utils/upload.py
@@ -29,14 +29,10 @@
 If you want to use this for content without ATXML files,
 set the ATXML extension as the content
 
-$Id: __init__.py 2886 2004-08-25 03:51:04Z dreamcatcher $
 """
 
 import os, sys, time
-import httplib, urllib
-import string
 from optparse import OptionParser
-from base64 import encodestring
 from WebDAV import davlib     # not the standard davlib
 from xml.dom import minidom
 


Repository: Products.Marshall


Branch: refs/heads/master
Date: 2015-01-22T10:36:58Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.Marshall/commit/7034a476ceb70838a23994551043a4efaf879bdb

remove obsolete simple xml marshall

Files changed:
D Products/Marshall/handlers/simple.py

diff --git a/Products/Marshall/handlers/simple.py b/Products/Marshall/handlers/simple.py
deleted file mode 100644
index 7b2ce0e..0000000
--- a/Products/Marshall/handlers/simple.py
+++ /dev/null
@@ -1,80 +0,0 @@
-# Marshall: A framework for pluggable marshalling policies
-# Copyright (C) 2004 Enfold Systems, LLC
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-"""
-"""
-
-from types import ListType, TupleType
-from xml.dom import minidom
-from Products.Archetypes.Marshall import Marshaller
-
-import libxml2
-libxml2.initParser()
-
-
-class SimpleXMLMarshaller(Marshaller):
-
-    __name__ = 'Simple XML Marshaller'
-
-    def demarshall(self, instance, data, **kwargs):
-        doc = libxml2.parseDoc(data)
-        p = instance.getPrimaryField()
-        pname = p and p.getName() or None
-        try:
-            fields = [f for f in instance.Schema().fields()
-                      if f.getName() != pname]
-            for f in fields:
-                items = doc.xpathEval('/*/%s' % f.getName())
-                if not len(items):
-                    continue
-                # Note that we ignore all but the first element if
-                # we get more than one
-                value = items[0].children
-                if not value:
-                    continue
-                mutator = f.getMutator(instance)
-                if mutator is not None:
-                    mutator(value.content.strip())
-        finally:
-            doc.freeDoc()
-
-    def marshall(self, instance, **kwargs):
-        response = minidom.Document()
-        doc = response.createElement(instance.portal_type.lower())
-        response.appendChild(doc)
-
-        p = instance.getPrimaryField()
-        pname = p and p.getName() or None
-        fields = [f for f in instance.Schema().fields()
-                  if f.getName() != pname]
-
-        for f in fields:
-            value = instance[f.getName()]
-            values = [value]
-            if type(value) in [ListType, TupleType]:
-                values = [str(v) for v in value]
-            elm = response.createElement(f.getName())
-            for value in values:
-                value = response.createTextNode(str(value))
-                elm.appendChild(value)
-            doc.appendChild(elm)
-
-        content_type = 'text/xml'
-        data = response.toprettyxml().encode('utf-8')
-        length = len(data)
-
-        return (content_type, length, data)


Repository: Products.Marshall


Branch: refs/heads/master
Date: 2015-01-22T10:37:50Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.Marshall/commit/8e2ef9574ee7bc1ae7adbc1bcd977fbba758d890

document changes

Files changed:
M CHANGES.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index 7c66e28..a11fff7 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -7,6 +7,8 @@ Changelog
 - Ported tests to plone.app.testing
   [tomgross]
 
+- Removed libxml2 based marshalling
+  [tomgross]
 
 2.1.3 (2014-04-16)
 ------------------


Repository: Products.Marshall


Branch: refs/heads/master
Date: 2015-09-23T12:55:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.Marshall/commit/89742e0104777d39013718ab6be5811ab221f600

Merge pull request #3 from plone/tomgross-cleanup

cleanups reported by frosted

Files changed:
M CHANGES.txt
M Products/Marshall/export.py
M Products/Marshall/expression.py
M Products/Marshall/handlers/__init__.py
M Products/Marshall/handlers/atxml.py
M Products/Marshall/interfaces/__init__.py
M Products/Marshall/interfaces/predicate.py
M Products/Marshall/namespaces/cmfns.py
M Products/Marshall/namespaces/dcns.py
M Products/Marshall/namespaces/uuns.py
M Products/Marshall/predicates/__init__.py
M Products/Marshall/profile.py
M Products/Marshall/registry.py
M Products/Marshall/tests/test_marshall.py
M Products/Marshall/tests/test_predicate.py
M Products/Marshall/utils/upload.py
D Products/Marshall/handlers/simple.py

diff --git a/CHANGES.txt b/CHANGES.txt
index d694102..5761784 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -13,6 +13,8 @@ Changelog
 - Ported tests to plone.app.testing
   [tomgross]
 
+- Removed libxml2 based marshalling
+  [tomgross]
 
 2.1.3 (2014-04-16)
 ------------------
diff --git a/Products/Marshall/export.py b/Products/Marshall/export.py
index d96cd90..4ec9d81 100644
--- a/Products/Marshall/export.py
+++ b/Products/Marshall/export.py
@@ -16,19 +16,15 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 
 import os
-import tempfile
 import zipfile
-import shutil
 from cStringIO import StringIO
 from App.class_init import InitializeClass
 from ExtensionClass import Base
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.permissions import ManagePortal
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 
diff --git a/Products/Marshall/expression.py b/Products/Marshall/expression.py
index 097a055..7b985e4 100644
--- a/Products/Marshall/expression.py
+++ b/Products/Marshall/expression.py
@@ -18,13 +18,10 @@
 """
 Persistent TALES Expression. Highly inspired (read copied)
 from CMFCore's Expression.
-
-$Id$
 """
 
 from Persistence import Persistent
 from App.class_init import InitializeClass
-from Acquisition import aq_inner, aq_parent
 from AccessControl import getSecurityManager, ClassSecurityInfo
 
 from Products.PageTemplates.Expressions import getEngine
diff --git a/Products/Marshall/handlers/__init__.py b/Products/Marshall/handlers/__init__.py
index f898328..2061060 100644
--- a/Products/Marshall/handlers/__init__.py
+++ b/Products/Marshall/handlers/__init__.py
@@ -18,7 +18,6 @@
 """
 """
 
-from Products.Marshall.config import hasLibxml2
 from Products.Marshall.registry import registerComponent
 
 # Register default Archetypes marshallers
@@ -30,12 +29,5 @@
 registerComponent('rfc822', 'RFC822 Marshaller',
                   RFC822Marshaller)
 
-if hasLibxml2:
-    # Now register our own xml marshallers
-    from Products.Marshall.handlers.simple import SimpleXMLMarshaller
-
-    registerComponent('simple_xml', 'Simple XML Marshaller',
-                      SimpleXMLMarshaller)
-
 from Products.Marshall.handlers.atxml import ATXMLMarshaller
 registerComponent('atxml', 'ATXML Marshaller', ATXMLMarshaller)
diff --git a/Products/Marshall/handlers/atxml.py b/Products/Marshall/handlers/atxml.py
index 91a69ef..9b0fcbc 100644
--- a/Products/Marshall/handlers/atxml.py
+++ b/Products/Marshall/handlers/atxml.py
@@ -88,7 +88,7 @@ def get(self, clear=False):
 
     def clear(self):
         tid = thread.get_ident()
-        msgs = self.msgs[tid] = []
+        self.msgs[tid] = []
 
 
 class XmlNamespace(object):
@@ -305,7 +305,6 @@ def __init__(self, demarshall_hook=None, marshall_hook=None,
             self.namespace = config.AT_NS
 
     def getFieldNamespace(self, field):
-        namespaces = self.getNamespaceURIMap()
         # Flatten ns into (ns, attr) tuples
         flat_ns = []
         [flat_ns.extend(zip((n,) * len(n.attrs), n.attrs)) for
@@ -323,7 +322,7 @@ def getNamespaceURIMap(self):
     def getNamespacePrefixMap(self):
         """ Mapping of prefix -> xmlns URI
         """
-        prefix_map = dict([(ns.prefix, ns.xmlns) for ns in self.namespaces])
+        return dict([(ns.prefix, ns.xmlns) for ns in self.namespaces])
 
     def getNamespaces(self, namespaces=None):
         if namespaces is None:
diff --git a/Products/Marshall/handlers/simple.py b/Products/Marshall/handlers/simple.py
deleted file mode 100644
index 15110e7..0000000
--- a/Products/Marshall/handlers/simple.py
+++ /dev/null
@@ -1,91 +0,0 @@
-# Marshall: A framework for pluggable marshalling policies
-# Copyright (C) 2004 Enfold Systems, LLC
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-"""
-$Id: _xml.py 2994 2004-09-09 12:22:37Z dreamcatcher $
-"""
-
-import os
-import thread
-from types import ListType, TupleType
-from xml.dom import minidom
-from cStringIO import StringIO
-from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.Archetypes.Marshall import Marshaller
-from Products.Archetypes.Field import ReferenceField
-from Products.Archetypes.config import REFERENCE_CATALOG, UUID_ATTR
-from Products.Archetypes.debug import log
-from Products.Marshall.config import AT_NS, CMF_NS, ATXML_SCHEMA
-from Products.Marshall.exceptions import MarshallingException
-
-import libxml2
-libxml2.initParser()
-
-
-class SimpleXMLMarshaller(Marshaller):
-
-    __name__ = 'Simple XML Marshaller'
-
-    def demarshall(self, instance, data, **kwargs):
-        doc = libxml2.parseDoc(data)
-        p = instance.getPrimaryField()
-        pname = p and p.getName() or None
-        try:
-            fields = [f for f in instance.Schema().fields()
-                      if f.getName() != pname]
-            for f in fields:
-                items = doc.xpathEval('/*/%s' % f.getName())
-                if not len(items):
-                    continue
-                # Note that we ignore all but the first element if
-                # we get more than one
-                value = items[0].children
-                if not value:
-                    continue
-                mutator = f.getMutator(instance)
-                if mutator is not None:
-                    mutator(value.content.strip())
-        finally:
-            doc.freeDoc()
-
-    def marshall(self, instance, **kwargs):
-        response = minidom.Document()
-        doc = response.createElement(instance.portal_type.lower())
-        response.appendChild(doc)
-
-        p = instance.getPrimaryField()
-        pname = p and p.getName() or None
-        fields = [f for f in instance.Schema().fields()
-                  if f.getName() != pname]
-
-        for f in fields:
-            value = instance[f.getName()]
-            values = [value]
-            if type(value) in [ListType, TupleType]:
-                values = [str(v) for v in value]
-            elm = response.createElement(f.getName())
-            for value in values:
-                value = response.createTextNode(str(value))
-                elm.appendChild(value)
-            doc.appendChild(elm)
-
-        content_type = 'text/xml'
-        data = response.toprettyxml().encode('utf-8')
-        length = len(data)
-
-        return (content_type, length, data)
diff --git a/Products/Marshall/interfaces/__init__.py b/Products/Marshall/interfaces/__init__.py
index 63a81ef..37f46ea 100644
--- a/Products/Marshall/interfaces/__init__.py
+++ b/Products/Marshall/interfaces/__init__.py
@@ -16,7 +16,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 from zope.interface import Interface
 from Products.Marshall.interfaces.predicate import IPredicate
diff --git a/Products/Marshall/interfaces/predicate.py b/Products/Marshall/interfaces/predicate.py
index 5c66448..22cb956 100644
--- a/Products/Marshall/interfaces/predicate.py
+++ b/Products/Marshall/interfaces/predicate.py
@@ -17,8 +17,6 @@
 #
 """
 Interfaces for Predicate
-
-$Id$
 """
 
 from zope.interface import Interface
diff --git a/Products/Marshall/namespaces/cmfns.py b/Products/Marshall/namespaces/cmfns.py
index 04cbb38..c4fc4b8 100644
--- a/Products/Marshall/namespaces/cmfns.py
+++ b/Products/Marshall/namespaces/cmfns.py
@@ -23,11 +23,9 @@
 
 Created: 10/11/2004
 Author: Kapil Thangavelu <k_vertigo@objectrealms.net>
-$Id: $
 """
 
 from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from Products.Marshall import config
 from Products.Marshall.handlers.atxml import XmlNamespace
 from Products.Marshall.handlers.atxml import SchemaAttribute
@@ -153,7 +151,7 @@ def processXml(self, context, ctx_node):
 
         while context.reader.MoveToNextAttribute():
             if context.reader.LocalName() == 'user_id':
-                user_id = reader.Value()
+                user_id = context.reader.Value()
             elif context.reader.LocalName() == 'role':
                 role = context.reader.Value()
 
@@ -214,10 +212,7 @@ def get(self, instance):
 
     def deserialize(self, instance, ns_data):
         wf_records = ns_data.get(self.name, {})
-        wf_tool = getToolByName(instance, 'portal_workflow')
-
         for wf_id in wf_records:
-            #history = list(instance.workflow_history.setdefault(wf_id, ()))
             history = []
             for record in wf_records[wf_id]:
                 history.append(record)
diff --git a/Products/Marshall/namespaces/dcns.py b/Products/Marshall/namespaces/dcns.py
index 203cb05..e1c9391 100644
--- a/Products/Marshall/namespaces/dcns.py
+++ b/Products/Marshall/namespaces/dcns.py
@@ -19,10 +19,7 @@
 ##################################################################
 
 """
-$Id: $
 """
-
-from Products.CMFCore.utils import getToolByName
 from Products.Marshall.handlers.atxml import XmlNamespace
 from Products.Marshall.handlers.atxml import SchemaAttribute
 
diff --git a/Products/Marshall/namespaces/uuns.py b/Products/Marshall/namespaces/uuns.py
index 9fdee6f..a32b237 100644
--- a/Products/Marshall/namespaces/uuns.py
+++ b/Products/Marshall/namespaces/uuns.py
@@ -19,14 +19,12 @@
 ##################################################################
 
 """
-$Id: $
 """
 
 # Georg Gogo. BERNHARD: UUencoded pluggable namespace for all at fields
 
 #from DateTime import DateTime
 from Products.Marshall.public import XmlNamespace, SchemaAttribute
-from Products.Archetypes import public as atapi
 from cStringIO import StringIO
 
 import base64
diff --git a/Products/Marshall/predicates/__init__.py b/Products/Marshall/predicates/__init__.py
index b47270a..919b275 100644
--- a/Products/Marshall/predicates/__init__.py
+++ b/Products/Marshall/predicates/__init__.py
@@ -16,7 +16,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 
 from _base import Predicate, constructors, manage_addPredicate
diff --git a/Products/Marshall/profile.py b/Products/Marshall/profile.py
index 6c63f40..18da7ce 100644
--- a/Products/Marshall/profile.py
+++ b/Products/Marshall/profile.py
@@ -16,22 +16,14 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id: config.py 7851 2007-03-31 13:01:43Z seletz $
 """
 
-from StringIO import StringIO
-
 from zope.interface import implements
 
 from Products.GenericSetup.interfaces import IFilesystemExporter
 from Products.GenericSetup.interfaces import IFilesystemImporter
-from Products.GenericSetup.content import FauxDAVRequest
-from Products.GenericSetup.content import FauxDAVResponse
 from Products.GenericSetup.utils import ExportConfiguratorBase
 from Products.GenericSetup.utils import ImportConfiguratorBase
-from Products.GenericSetup.utils import _getDottedName
-from Products.GenericSetup.utils import _resolveDottedName
-from Products.GenericSetup.utils import CONVERTER
 from Products.GenericSetup.utils import DEFAULT
 from Products.GenericSetup.utils import KEY
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
@@ -191,10 +183,4 @@ def import_(self, import_context, subdir, root=False):
             import_context.note('SGAIFA',
                                 'no %s in %s' % (_FILENAME, subdir))
         else:
-            request = FauxDAVRequest(BODY=data, BODYFILE=StringIO(data))
-            response = FauxDAVResponse()
-            _updatePluginRegistry(self.context,
-                                  data,
-                                  import_context.shouldPurge(),
-                                  import_context.getEncoding(),
-                                 )
+            pass
diff --git a/Products/Marshall/registry.py b/Products/Marshall/registry.py
index a83abc6..343a3b6 100644
--- a/Products/Marshall/registry.py
+++ b/Products/Marshall/registry.py
@@ -16,16 +16,14 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 """
-$Id$
 """
 
 from zope.interface import implements
 
 from OFS.OrderedFolder import OrderedFolder
-from Persistence import PersistentMapping
 from App.class_init import InitializeClass
 from AccessControl import ClassSecurityInfo
-from AccessControl.Permissions import view, manage_properties
+from AccessControl.Permissions import view
 
 from Products.Marshall.interfaces import IPredicate
 from Products.Marshall.interfaces import IMarshallRegistry
diff --git a/Products/Marshall/tests/test_marshall.py b/Products/Marshall/tests/test_marshall.py
index 368e9b2..8b39ba3 100644
--- a/Products/Marshall/tests/test_marshall.py
+++ b/Products/Marshall/tests/test_marshall.py
@@ -8,10 +8,13 @@
 from Products.Marshall import registry
 from Products.Marshall.registry import Registry
 from Products.Marshall.registry import getComponent
-from Products.Marshall.exceptions import MarshallingException
 from Products.Marshall.tests import PACKAGE_HOME
-from Products.Marshall.tests.examples import person
 from Products.Marshall.tests.examples import blob
+
+from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
+from plone.testing import layered
+
+
 tool_id = Registry.id
 
 
@@ -88,9 +91,6 @@ def test_blob_text_html(self):
 
 def test_suite():
     import unittest
-    from doctest import DocFileSuite
-    from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
-    from plone.testing import layered
     suite = unittest.TestSuite()
 
     suite.addTest(layered(doctest.DocFileSuite(
diff --git a/Products/Marshall/tests/test_predicate.py b/Products/Marshall/tests/test_predicate.py
index 3a3d559..37a1034 100644
--- a/Products/Marshall/tests/test_predicate.py
+++ b/Products/Marshall/tests/test_predicate.py
@@ -164,22 +164,6 @@ def test_xmlns_element(self):
         self.assertEquals(self.get(None, data=bad_data), ())
         self.assertEquals(self.get(None, data=''), ())
 
-    def test_xmlns_element(self):
-        p = add_predicate(
-            self.tool,
-            id='xmlns_attr',
-            title='xmlns',
-            predicate='xmlns_attr',
-            expression='',
-            component_name='primary_field')
-        p.edit(element_name='test', value=None)
-        data = """<?xml version="1.0" encoding="UTF-8"?>
-        <test>
-           Doesn't Matter
-        </test>
-        """
-        self.assertEquals(self.get(None, data=data), ('primary_field',))
-
     def test_xmlns_element_ns(self):
         p = add_predicate(
             self.tool,
diff --git a/Products/Marshall/utils/upload.py b/Products/Marshall/utils/upload.py
index d40c581..3250de7 100644
--- a/Products/Marshall/utils/upload.py
+++ b/Products/Marshall/utils/upload.py
@@ -29,14 +29,10 @@
 If you want to use this for content without ATXML files,
 set the ATXML extension as the content
 
-$Id: __init__.py 2886 2004-08-25 03:51:04Z dreamcatcher $
 """
 
 import os, sys, time
-import httplib, urllib
-import string
 from optparse import OptionParser
-from base64 import encodestring
 from WebDAV import davlib     # not the standard davlib
 from xml.dom import minidom
 


