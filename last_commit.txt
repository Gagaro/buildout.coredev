Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-07-16T12:56:20+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/c32214f347c45562e4a8ba01213791f7ae3eeea2

make sure when copying themes that you try to modify the base urls
  to match the new theme are all the manifest.cfg settings

Files changed:
M CHANGES.rst
M src/plone/app/theming/tests/secondary-theme/manifest.cfg
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 76a3d3e..6a7aa53 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 1.2.7 (unreleased)
 ------------------
 
+- make sure when copying themes that you try to modify the base urls
+  to match the new theme are all the manifest.cfg settings
+  [vangheem]
+
 - implement switchable theming policy API, re-implement theme caching
   [gyst]
 
diff --git a/src/plone/app/theming/tests/secondary-theme/manifest.cfg b/src/plone/app/theming/tests/secondary-theme/manifest.cfg
index 67fcec3..388410f 100644
--- a/src/plone/app/theming/tests/secondary-theme/manifest.cfg
+++ b/src/plone/app/theming/tests/secondary-theme/manifest.cfg
@@ -4,3 +4,14 @@ description = Secondary theme for testing
 doctype = <!DOCTYPE html>
 prefix = /++theme++secondary-test-theme
 rules = /++theme++secondary-test-theme/rules.xml
+
+enabled-bundles = plone
+disabled-bundles = foobar
+
+development-css = /++theme++secondary-theme/less/barceloneta.plone.less
+production-css = /++theme++secondary-theme/less/barceloneta-compiled.css
+tinymce-content-css = /++theme++secondary-theme/less/barceloneta-compiled.css
+
+development-js = /++theme++secondary-theme/script.js
+production-js = /++theme++secondary-theme/script.min.js
+
diff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py
index 1f846ec..6f93981 100644
--- a/src/plone/app/theming/tests/test_utils.py
+++ b/src/plone/app/theming/tests/test_utils.py
@@ -213,6 +213,26 @@ def test_createThemeFromTemplate_custom_prefix(self):
                                             RULE_FILENAME)
         self.assertEqual(theme.rules, expected_rules)
 
+        self.assertEqual(theme.enabled_bundles, ['plone'])
+        self.assertEqual(theme.disabled_bundles, ['foobar'])
+
+        expected_dev_css = u"/++%s++%s/less/barceloneta.plone.less" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_css = u"/++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_tinymce = u"/++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_css, expected_dev_css)
+        self.assertEqual(theme.production_css, expected_prod_css)
+        self.assertEqual(theme.tinymce_content_css, expected_tinymce)
+
+        expected_dev_js = u"/++%s++%s/script.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_js = u"/++%s++%s/script.min.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_js, expected_dev_js)
+        self.assertEqual(theme.production_js, expected_prod_js)
+
 
 class TestUnit(unittest.TestCase):
 
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 0e40ec0..9dccc3f 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -528,6 +528,20 @@ def createThemeFromTemplate(title, description, baseOn='template'):
                                    rule_file_name)
         manifest.set('theme', 'rules', rules)
 
+    paths_to_fix = ['development-css', 'production-css', 'tinymce-content-css',
+                    'development-js', 'production-js']
+    for var_path in paths_to_fix:
+        if not manifest.has_option('theme', var_path):
+            continue
+        val = manifest.get('theme', var_path)
+        if not val:
+            continue
+        template_prefix = '/++%s++%s/' % (THEME_RESOURCE_NAME, baseOn)
+        if val.startswith(template_prefix):
+            # okay, fix
+            val = val.replace(template_prefix, '/++%s++%s/' % (THEME_RESOURCE_NAME, themeName))
+            manifest.set('theme', var_path, val)
+
     manifestContents = StringIO()
     manifest.write(manifestContents)
     target.writeFile(MANIFEST_FILENAME, manifestContents)


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-07-16T14:08:47+02:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/5c2025a2d33785d36f0430c074e2124d87e46360

Merge pull request #66 from plone/copy-theme-params

make sure when copying themes that you try to modify the base urls

Files changed:
M CHANGES.rst
M src/plone/app/theming/tests/secondary-theme/manifest.cfg
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 76a3d3e..6a7aa53 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 1.2.7 (unreleased)
 ------------------
 
+- make sure when copying themes that you try to modify the base urls
+  to match the new theme are all the manifest.cfg settings
+  [vangheem]
+
 - implement switchable theming policy API, re-implement theme caching
   [gyst]
 
diff --git a/src/plone/app/theming/tests/secondary-theme/manifest.cfg b/src/plone/app/theming/tests/secondary-theme/manifest.cfg
index 67fcec3..388410f 100644
--- a/src/plone/app/theming/tests/secondary-theme/manifest.cfg
+++ b/src/plone/app/theming/tests/secondary-theme/manifest.cfg
@@ -4,3 +4,14 @@ description = Secondary theme for testing
 doctype = <!DOCTYPE html>
 prefix = /++theme++secondary-test-theme
 rules = /++theme++secondary-test-theme/rules.xml
+
+enabled-bundles = plone
+disabled-bundles = foobar
+
+development-css = /++theme++secondary-theme/less/barceloneta.plone.less
+production-css = /++theme++secondary-theme/less/barceloneta-compiled.css
+tinymce-content-css = /++theme++secondary-theme/less/barceloneta-compiled.css
+
+development-js = /++theme++secondary-theme/script.js
+production-js = /++theme++secondary-theme/script.min.js
+
diff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py
index 1f846ec..6f93981 100644
--- a/src/plone/app/theming/tests/test_utils.py
+++ b/src/plone/app/theming/tests/test_utils.py
@@ -213,6 +213,26 @@ def test_createThemeFromTemplate_custom_prefix(self):
                                             RULE_FILENAME)
         self.assertEqual(theme.rules, expected_rules)
 
+        self.assertEqual(theme.enabled_bundles, ['plone'])
+        self.assertEqual(theme.disabled_bundles, ['foobar'])
+
+        expected_dev_css = u"/++%s++%s/less/barceloneta.plone.less" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_css = u"/++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_tinymce = u"/++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_css, expected_dev_css)
+        self.assertEqual(theme.production_css, expected_prod_css)
+        self.assertEqual(theme.tinymce_content_css, expected_tinymce)
+
+        expected_dev_js = u"/++%s++%s/script.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_js = u"/++%s++%s/script.min.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_js, expected_dev_js)
+        self.assertEqual(theme.production_js, expected_prod_js)
+
 
 class TestUnit(unittest.TestCase):
 
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 0e40ec0..9dccc3f 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -528,6 +528,20 @@ def createThemeFromTemplate(title, description, baseOn='template'):
                                    rule_file_name)
         manifest.set('theme', 'rules', rules)
 
+    paths_to_fix = ['development-css', 'production-css', 'tinymce-content-css',
+                    'development-js', 'production-js']
+    for var_path in paths_to_fix:
+        if not manifest.has_option('theme', var_path):
+            continue
+        val = manifest.get('theme', var_path)
+        if not val:
+            continue
+        template_prefix = '/++%s++%s/' % (THEME_RESOURCE_NAME, baseOn)
+        if val.startswith(template_prefix):
+            # okay, fix
+            val = val.replace(template_prefix, '/++%s++%s/' % (THEME_RESOURCE_NAME, themeName))
+            manifest.set('theme', var_path, val)
+
     manifestContents = StringIO()
     manifest.write(manifestContents)
     target.writeFile(MANIFEST_FILENAME, manifestContents)


