Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-11-05T13:37:11+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/489117c1e84ac5db3d11e72d0284bcdd0bb7ff2e

IRichText indexing for all and html to plain transform
Do a ``IRichText`` text indexing on all registered SearchableText indexers by doing it as part of the base ``SearchableText`` function. Convert the text from the source mimetype to ``text/plain``.

Files changed:
M CHANGES.rst
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/tests/test_indexes.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7ce2ab2..e78d190 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,11 @@ New:
 
 Fixes:
 
+- Do a ``IRichText`` text indexing on all registered SearchableText indexers by
+  doing it as part of the base ``SearchableText`` function. Convert the text
+  from the source mimetype to ``text/plain``.
+  [thet]
+
 - Add ``getRawQuery`` method to Collection content type for backward compatibility with Archetypes API.
   Fixes (partially) https://github.com/plone/plone.app.contenttypes/issues/283.
   [hvelarde]
@@ -21,7 +26,7 @@ Fixes:
 
 Fixes:
 
-- Fixed custom migration from and to types with spaces in the type-name.
+- Fix custom migration from and to types with spaces in the type-name.
   [pbauer]
 
 - Fixed full_view when content is not IUUIDAware (like the portal).
diff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py
index e78d55b..db06bb3 100644
--- a/plone/app/contenttypes/indexers.py
+++ b/plone/app/contenttypes/indexers.py
@@ -3,6 +3,7 @@
 from Products.CMFPlone.utils import safe_unicode
 from ZODB.POSException import ConflictError
 from logging import getLogger
+from plone.app.contenttypes.behaviors.richtext import IRichText
 from plone.app.contenttypes.interfaces import IDocument
 from plone.app.contenttypes.interfaces import IFile
 from plone.app.contenttypes.interfaces import IFolder
@@ -10,6 +11,7 @@
 from plone.app.contenttypes.interfaces import ILink
 from plone.app.contenttypes.interfaces import INewsItem
 from plone.app.contenttypes.utils import replace_link_variables_by_paths
+from plone.app.textfield.value import IRichTextValue
 from plone.indexer.decorator import indexer
 from plone.rfc822.interfaces import IPrimaryFieldInfo
 
@@ -32,26 +34,35 @@ def _unicode_save_string_concat(*args):
     return result
 
 
-def SearchableText(obj, text=False):
+def SearchableText(obj):
+    text = u""
+    richtext = IRichText(obj, None)
+    if richtext:
+        textvalue = richtext.text
+        if IRichTextValue.providedBy(textvalue):
+            transforms = getToolByName(obj, 'portal_transforms')
+            text = transforms.convertTo(
+                'text/plain',
+                textvalue.output.encode('utf8'),
+                mimetype=textvalue.mimeType,
+            ).getData().strip()
+
     return u" ".join((
         safe_unicode(obj.id),
         safe_unicode(obj.title) or u"",
         safe_unicode(obj.description) or u"",
+        safe_unicode(text)
     ))
 
 
 @indexer(INewsItem)
 def SearchableText_news(obj):
-    if obj.text is None or obj.text.output is None:
-        return SearchableText(obj)
-    return _unicode_save_string_concat(SearchableText(obj), obj.text.output)
+    return _unicode_save_string_concat(SearchableText(obj))
 
 
 @indexer(IDocument)
 def SearchableText_document(obj):
-    if obj.text is None or obj.text.output is None:
-        return SearchableText(obj)
-    return _unicode_save_string_concat(SearchableText(obj), obj.text.output)
+    return _unicode_save_string_concat(SearchableText(obj))
 
 
 @indexer(IFile)
diff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py
index 1fd10a1..3c1e17d 100644
--- a/plone/app/contenttypes/tests/test_indexes.py
+++ b/plone/app/contenttypes/tests/test_indexes.py
@@ -150,6 +150,24 @@ def test_text_in_searchable_text_index(self):
             '/plone/folder/document'
         )
 
+    def test_html_stripped_searchable_text_index(self):
+        """Ensure, html tags are stripped out from the content and not indexed.
+        """
+        self.document.text = RichTextValue(
+            u'<p>Lorem <b>ipsum</b></p>',
+            mimeType='text/html',
+            outputMimeType='text/html'
+        )
+        self.document.reindexObject()
+        brains = self.catalog.searchResults(dict(
+            SearchableText=u'Lorem ipsum',
+        ))
+        self.assertEqual(len(brains), 1)
+        rid = brains[0].getRID()
+        index_data = self.catalog.getIndexDataForRID(rid)
+        self.assertEqual(index_data['SearchableText'].count('p'), 0)
+        self.assertEqual(index_data['SearchableText'].count('b'), 0)
+
     def test_file_fulltext_in_searchable_text_index_string(self):
         from plone.namedfile.file import NamedBlobFile
         data = ("Lorem ipsum. Köln <!-- ...oder München, das ist hier die "


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-11-05T13:37:37+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/eb0597833d4fe4bbf4dcf70adf2f7ed39558d4e5

Merge pull request #288 from plone/thet-seachabletext

IRichText indexing for all and html to plain transform

Files changed:
M CHANGES.rst
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/tests/test_indexes.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7ce2ab2..e78d190 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,11 @@ New:
 
 Fixes:
 
+- Do a ``IRichText`` text indexing on all registered SearchableText indexers by
+  doing it as part of the base ``SearchableText`` function. Convert the text
+  from the source mimetype to ``text/plain``.
+  [thet]
+
 - Add ``getRawQuery`` method to Collection content type for backward compatibility with Archetypes API.
   Fixes (partially) https://github.com/plone/plone.app.contenttypes/issues/283.
   [hvelarde]
@@ -21,7 +26,7 @@ Fixes:
 
 Fixes:
 
-- Fixed custom migration from and to types with spaces in the type-name.
+- Fix custom migration from and to types with spaces in the type-name.
   [pbauer]
 
 - Fixed full_view when content is not IUUIDAware (like the portal).
diff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py
index e78d55b..db06bb3 100644
--- a/plone/app/contenttypes/indexers.py
+++ b/plone/app/contenttypes/indexers.py
@@ -3,6 +3,7 @@
 from Products.CMFPlone.utils import safe_unicode
 from ZODB.POSException import ConflictError
 from logging import getLogger
+from plone.app.contenttypes.behaviors.richtext import IRichText
 from plone.app.contenttypes.interfaces import IDocument
 from plone.app.contenttypes.interfaces import IFile
 from plone.app.contenttypes.interfaces import IFolder
@@ -10,6 +11,7 @@
 from plone.app.contenttypes.interfaces import ILink
 from plone.app.contenttypes.interfaces import INewsItem
 from plone.app.contenttypes.utils import replace_link_variables_by_paths
+from plone.app.textfield.value import IRichTextValue
 from plone.indexer.decorator import indexer
 from plone.rfc822.interfaces import IPrimaryFieldInfo
 
@@ -32,26 +34,35 @@ def _unicode_save_string_concat(*args):
     return result
 
 
-def SearchableText(obj, text=False):
+def SearchableText(obj):
+    text = u""
+    richtext = IRichText(obj, None)
+    if richtext:
+        textvalue = richtext.text
+        if IRichTextValue.providedBy(textvalue):
+            transforms = getToolByName(obj, 'portal_transforms')
+            text = transforms.convertTo(
+                'text/plain',
+                textvalue.output.encode('utf8'),
+                mimetype=textvalue.mimeType,
+            ).getData().strip()
+
     return u" ".join((
         safe_unicode(obj.id),
         safe_unicode(obj.title) or u"",
         safe_unicode(obj.description) or u"",
+        safe_unicode(text)
     ))
 
 
 @indexer(INewsItem)
 def SearchableText_news(obj):
-    if obj.text is None or obj.text.output is None:
-        return SearchableText(obj)
-    return _unicode_save_string_concat(SearchableText(obj), obj.text.output)
+    return _unicode_save_string_concat(SearchableText(obj))
 
 
 @indexer(IDocument)
 def SearchableText_document(obj):
-    if obj.text is None or obj.text.output is None:
-        return SearchableText(obj)
-    return _unicode_save_string_concat(SearchableText(obj), obj.text.output)
+    return _unicode_save_string_concat(SearchableText(obj))
 
 
 @indexer(IFile)
diff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py
index 1fd10a1..3c1e17d 100644
--- a/plone/app/contenttypes/tests/test_indexes.py
+++ b/plone/app/contenttypes/tests/test_indexes.py
@@ -150,6 +150,24 @@ def test_text_in_searchable_text_index(self):
             '/plone/folder/document'
         )
 
+    def test_html_stripped_searchable_text_index(self):
+        """Ensure, html tags are stripped out from the content and not indexed.
+        """
+        self.document.text = RichTextValue(
+            u'<p>Lorem <b>ipsum</b></p>',
+            mimeType='text/html',
+            outputMimeType='text/html'
+        )
+        self.document.reindexObject()
+        brains = self.catalog.searchResults(dict(
+            SearchableText=u'Lorem ipsum',
+        ))
+        self.assertEqual(len(brains), 1)
+        rid = brains[0].getRID()
+        index_data = self.catalog.getIndexDataForRID(rid)
+        self.assertEqual(index_data['SearchableText'].count('p'), 0)
+        self.assertEqual(index_data['SearchableText'].count('b'), 0)
+
     def test_file_fulltext_in_searchable_text_index_string(self):
         from plone.namedfile.file import NamedBlobFile
         data = ("Lorem ipsum. Köln <!-- ...oder München, das ist hier die "


