Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-22T21:33:36+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/b48e4ab7726f33ee433cd69540179b15dc8994fa

also add timezone class to event_summary template.

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_summary.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 225e963..9a960fa 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,8 @@ Changelog
   Collection's query.
   [thet]
 
-- Add a CSS class for the timezone in the events portlet.
+- Add a CSS class for the timezone in the events portlet and the
+  ``event_summary`` view.
   [mitakas]
 
 
diff --git a/plone/app/event/browser/event_summary.pt b/plone/app/event/browser/event_summary.pt
index b8a0ae7..70187b3 100644
--- a/plone/app/event/browser/event_summary.pt
+++ b/plone/app/event/browser/event_summary.pt
@@ -34,7 +34,8 @@
                       start_utcdelta python:data.start.tzinfo.utcoffset(data.start);
                       start_utcoffset python:(start_utcdelta.days*86400+start_utcdelta.seconds)*100/60/60;">
           <tal:date replace="structure python:view.formatted_date(context)" />
-          <span tal:condition="start_tzname">
+          <span class="timezone"
+              tal:condition="start_tzname">
             (<tal:tzname replace="start_tzname">timezone name</tal:tzname> / UTC<tal:tzoffset replace="start_utcoffset" />)
           </span>
         </span>


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-22T21:34:00+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/a92e6ba060c5f7a55867d9df4c0cb4fb83a475a9

In the event_summary view, change the event-timezone list-item class to event-date.

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_summary.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a960fa..9a88cee 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,6 +19,10 @@ Changelog
   ``event_summary`` view.
   [mitakas]
 
+- In the ``event_summary`` view, change the ``event-timezone`` list-item class
+  to ``event-date``.
+  [thet]
+
 
 2.0a7 (2015-03-13)
 ------------------
diff --git a/plone/app/event/browser/event_summary.pt b/plone/app/event/browser/event_summary.pt
index 70187b3..7921d84 100644
--- a/plone/app/event/browser/event_summary.pt
+++ b/plone/app/event/browser/event_summary.pt
@@ -28,7 +28,7 @@
     </tal:cond>
 
     <tal:cond condition="python:'date' not in excludes">
-      <li class="event-timezone">
+      <li class="event-date">
         <strong i18n:translate="event_when">When</strong>
         <span tal:define="start_tzname data/timezone;
                       start_utcdelta python:data.start.tzinfo.utcoffset(data.start);


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-23T09:55:51+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/52d5ea5f34ed38cfc170cef3567819b585c75ef5

Change adapts and implements to their decorator equivalents adapter and implementer.

Files changed:
M CHANGES.rst
M plone/app/event/dx/behaviors.py
M plone/app/event/dx/traverser.py
M plone/app/event/ical/exporter.py
M plone/app/event/ical/importer.py
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py
M plone/app/event/recurrence.py
M plone/app/event/setuphandlers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a88cee..2a7ec46 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 2.0a8 (unreleased)
 ------------------
 
+- Change ``adapts`` and ``implements`` to their decorator equivalents
+  ``adapter`` and ``implementer``.
+  [thet]
+
 - Change ``event_listing`` to search only in current context and below, not the
   whole portal by default. Remove the setting ``current_folder_only``, which
   was annotated to the context. Since the collection support is much better now,
diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py
index f264bd9..f28e97d 100644
--- a/plone/app/event/dx/behaviors.py
+++ b/plone/app/event/dx/behaviors.py
@@ -30,11 +30,9 @@
 from z3c.form.widget import FieldWidget
 from zope import schema
 from zope.component import adapter
-from zope.component import adapts
 from zope.interface import Invalid
 from zope.interface import alsoProvides
 from zope.interface import implementer
-from zope.interface import implements
 from zope.interface import invariant
 from zope.interface import provider
 from zope.schema.interfaces import IContextAwareDefaultFactory
@@ -363,12 +361,12 @@ def searchable_text_indexer(obj):
 
 # Object adapters
 
+@adapter(IDXEvent)
+@implementer(IEventAccessor)
 class EventAccessor(object):
     """Generic event accessor adapter implementation for Dexterity content
        objects.
     """
-    implements(IEventAccessor)
-    adapts(IDXEvent)
 
     def __init__(self, context):
         object.__setattr__(self, 'context', context)
diff --git a/plone/app/event/dx/traverser.py b/plone/app/event/dx/traverser.py
index e6b402f..165f1fa 100644
--- a/plone/app/event/dx/traverser.py
+++ b/plone/app/event/dx/traverser.py
@@ -1,17 +1,17 @@
 from plone.app.event.recurrence import OccurrenceTraverser as DefaultTraverser
 from plone.app.event.dx.interfaces import IDXEventRecurrence
 from plone.dexterity.browser.traversal import DexterityPublishTraverse
-from zope.component import adapts
+from zope.component import adapter
 from zope.publisher.interfaces.browser import IBrowserRequest
 
 
+@adapter(IDXEventRecurrence, IBrowserRequest)
 class OccurrenceTraverser(DefaultTraverser):
     """Occurrence Traverser for Dexterity based contexts.
 
     Please note: here is not ImageTraverser support included, since accessing
     images is done by calling the @@images view.
     """
-    adapts(IDXEventRecurrence, IBrowserRequest)
 
     def fallbackTraverse(self, request, name):
         return DexterityPublishTraverse(
diff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py
index b11d3af..273034e 100644
--- a/plone/app/event/ical/exporter.py
+++ b/plone/app/event/ical/exporter.py
@@ -14,7 +14,6 @@
 from plone.event.utils import tzdel
 from plone.event.utils import utc
 from zope.interface import implementer
-from zope.interface import implements
 from zope.publisher.browser import BrowserView
 
 import icalendar
@@ -189,10 +188,10 @@ def calendar_from_collection(context):
     return construct_icalendar(context, result)
 
 
+@implementer(IICalendarEventComponent)
 class ICalendarEventComponent(object):
     """Returns an icalendar object of the event.
     """
-    implements(IICalendarEventComponent)
 
     def __init__(self, context):
         self.context = context
diff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py
index 4aaa950..a366da9 100644
--- a/plone/app/event/ical/importer.py
+++ b/plone/app/event/ical/importer.py
@@ -17,12 +17,12 @@
 from z3c.form import button
 from z3c.form import form, field
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.container.interfaces import INameChooser
 from zope.event import notify
 from zope.interface import Interface
 from zope.interface import alsoProvides, noLongerProvides
-from zope.interface import implements
+from zope.interface import implementer
 from zope.lifecycleevent import ObjectModifiedEvent
 
 import datetime
@@ -277,11 +277,11 @@ class IIcalendarImportSettings(Interface):
     )
 
 
+@adapter(Interface)
+@implementer(IIcalendarImportSettings)
 class IcalendarImportSettings(AnnotationAdapter):
     """Annotation Adapter for IIcalendarImportSettings.
     """
-    implements(IIcalendarImportSettings)
-    adapts(Interface)
     #adapts(IFolder) ## ?? TODO: when adapting this in z3c.form, why is a
                      ## ATFolder not adaptable to this adapter, when it
                      ## implements IFolder?
diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py
index bd2049c..4dda7bb 100644
--- a/plone/app/event/portlets/portlet_calendar.py
+++ b/plone/app/event/portlets/portlet_calendar.py
@@ -16,9 +16,9 @@
 from plone.portlets.interfaces import IPortletDataProvider
 from zExceptions import NotFound
 from zope import schema
-from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
 from zope.component.hooks import getSite
+from zope.i18nmessageid import MessageFactory
+from zope.interface import implementer
 
 import calendar
 import json
@@ -54,8 +54,8 @@ class ICalendarPortlet(IPortletDataProvider):
     )
 
 
+@implementer(ICalendarPortlet)
 class Assignment(base.Assignment):
-    implements(ICalendarPortlet)
     title = _(u'Calendar')
 
     # reduce upgrade pain
diff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py
index ad9c597..354bada 100644
--- a/plone/app/event/portlets/portlet_events.py
+++ b/plone/app/event/portlets/portlet_events.py
@@ -18,7 +18,7 @@
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.contentprovider.interfaces import IContentProvider
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class IEventsPortlet(IPortletDataProvider):
@@ -54,8 +54,8 @@ class IEventsPortlet(IPortletDataProvider):
     )
 
 
+@implementer(IEventsPortlet)
 class Assignment(base.Assignment):
-    implements(IEventsPortlet)
 
     # reduce upgrade pain
     search_base = None
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index ee5aec0..0c4e6e2 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -10,9 +10,9 @@
 from plone.event.recurrence import recurrence_sequence_ical
 from plone.event.utils import is_same_day
 from plone.namedfile.scaling import ImageScale as DXImageScaling
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import Interface
-from zope.interface import implements
+from zope.interface import implementer
 from zope.publisher.interfaces.browser import IBrowserRequest
 
 try:
@@ -37,11 +37,11 @@ class IDXEvent(Interface):
     pass
 
 
+@adapter(IEventRecurrence)
+@implementer(IRecurrenceSupport)
 class RecurrenceSupport(object):
     """IRecurrenceSupport Adapter.
     """
-    implements(IRecurrenceSupport)
-    adapts(IEventRecurrence)
 
     def __init__(self, context):
         self.context = context
@@ -98,13 +98,13 @@ def get_obj(start):
             yield get_obj(start)
 
 
+@adapter(IEventRecurrence, IBrowserRequest)
 class OccurrenceTraverser(DefaultPublishTraverse):
     """Generic Occurrence traverser.
 
     Please note: the .at and .dx subpackages implement their own Occurrence
     traversers.
     """
-    adapts(IEventRecurrence, IBrowserRequest)
 
     def publishTraverse(self, request, name):
         context = self.context
@@ -121,11 +121,11 @@ def fallbackTraverse(self, request, name):
         return super(OccurrenceTraverser, self).publishTraverse(request, name)
 
 
+@implementer(IOccurrence)
 class Occurrence(SimpleItem):
     """Transient Occurrence object, representing an individual event in a
     recurrecne set.
     """
-    implements(IOccurrence)
 
     def __init__(self, id, start, end):
         self.id = id
@@ -134,11 +134,11 @@ def __init__(self, id, start, end):
         self.portal_type = 'Occurrence'
 
 
+@adapter(IOccurrence)
+@implementer(IEventAccessor)
 class EventOccurrenceAccessor(object):
     """Generic event accessor adapter implementation for Occurrence objects.
     """
-    implements(IEventAccessor)
-    adapts(IOccurrence)
 
     def __init__(self, context):
         object.__setattr__(self, 'context', context)
diff --git a/plone/app/event/setuphandlers.py b/plone/app/event/setuphandlers.py
index 47bc18b..612f4d8 100644
--- a/plone/app/event/setuphandlers.py
+++ b/plone/app/event/setuphandlers.py
@@ -1,7 +1,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import INonInstallable
 from Products.ZCatalog.Catalog import CatalogError
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 
@@ -9,8 +9,8 @@
 logger = logging.getLogger(__name__)
 
 
+@implementer(INonInstallable)
 class HiddenProfiles(object):
-    implements(INonInstallable)
 
     def getNonInstallableProfiles(self):
         """Prevents profiles, which should not be user-installable from showing


