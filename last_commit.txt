Repository: plone.app.layout
Branch: refs/heads/master
Date: 2015-04-13T22:49:57+02:00
Author: Patrick Gerken (do3cc) <do3cc@patrick-gerken.de>
Commit: https://github.com/plone/plone.app.layout/commit/b4e2c0f4787b70c90b1760c436344bbd24571767

Updating tests to handle new plone.app.testing

Files changed:
M plone/app/layout/globals/tests/test_portal.py

diff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py
index 56e7f3a..f7cc632 100644
--- a/plone/app/layout/globals/tests/test_portal.py
+++ b/plone/app/layout/globals/tests/test_portal.py
@@ -1,11 +1,13 @@
-from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILanguageSchema
 from Products.CMFPlone.interfaces import ISiteSchema
 from plone.app.layout.globals.tests.base import GlobalsTestCase
 from plone.app.layout.navigation.interfaces import INavigationRoot
 from plone.app.layout.navigation.root import getNavigationRoot
-from zope.i18n.locales import locales
+from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
-
+from zope.event import notify
+from zope.i18n.locales import locales
+from zope.traversing.interfaces import BeforeTraverseEvent
 import zope.interface
 
 
@@ -94,8 +96,19 @@ def test_language(self):
         self.assertEqual(self.view.language(), 'no')
 
     def test_locale(self):
-        self.app.REQUEST.set('HTTP_ACCEPT_LANGUAGE', 'no')
+        # Set up registry so that no is an accepted language and that the
+        # language information from the request is actually being used.
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        settings.use_request_negotiation = True
+        settings.available_languages.append('no')
+
         no = locales.getLocale('no', None, None)
+        self.app.REQUEST.set('HTTP_ACCEPT_LANGUAGE', 'no')
+
+        # Push request through the BeforeTraverseEvent handler again to
+        # update language settings
+        notify(BeforeTraverseEvent(self.portal, self.portal.REQUEST))
         self.assertEqual(self.view.locale(), no)
 
     def test_is_not_rtl(self):


