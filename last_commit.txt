Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T11:42:51-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/9c29a92ba3986cbbb286c4fa045a4b97b7e708a3

Add new schema for login settings

Files changed:
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/dependencies/registry.xml

diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 10fdfef..3885e19 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -10,6 +10,7 @@
 from controlpanel import IEditingSchema
 from controlpanel import ILanguageSchema
 from controlpanel import IFilterSchema
+from controlpanel import ILoginSchema
 from controlpanel import IMaintenanceSchema
 from controlpanel import IMailSchema
 from controlpanel import IMarkupSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 911f867..9c9b47f 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1285,3 +1285,43 @@ class IImagingSchema(Interface):
         max=95,
         default=88
     )
+
+
+class ILoginSchema(Interface):
+
+    auth_cookie_length = schema.Int(
+        title=_(u'Auth cookie length'),
+        default=0,
+        required=False
+    )
+
+    verify_login_name = schema.Bool(
+        title=_(u'Verify login name'),
+        default=True,
+        required=False
+    )
+
+    allow_external_login_sites = schema.Tuple(
+        title=_(u'Allow external login sites'),
+        default=(),
+        value_type=schema.ASCIILine(),
+        required=False
+    )
+
+    external_login_url = schema.ASCIILine(
+        title=_(u'External login url'),
+        default=None,
+        required=False
+    )
+
+    external_logout_url = schema.ASCIILine(
+        title=_(u'External logout url'),
+        default=None,
+        required=False
+    )
+
+    external_login_iframe = schema.Bool(
+        title=_(u'External login iframe'),
+        default=False,
+        required=False
+    )
diff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml
index 88e5270..6d06a66 100644
--- a/Products/CMFPlone/profiles/dependencies/registry.xml
+++ b/Products/CMFPlone/profiles/dependencies/registry.xml
@@ -28,6 +28,8 @@
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IImagingSchema"
            prefix="plone" />
+  <records interface="Products.CMFPlone.interfaces.ILoginSchema"
+           prefix="plone" />
   <record interface="Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings" field="resourceBundlesForThemes">
     <value purge="false">
       <element key="(default)">


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T11:42:51-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/1a6fba0c35286f4b0baef55ea5fa00985bfa8b5b

Migrate auth_cookie_length to the registry

Files changed:
M Products/CMFPlone/profiles/default/propertiestool.xml
M Products/CMFPlone/skins/plone_scripts/setAuthCookie.py

diff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml
index a88eebc..7e3a902 100644
--- a/Products/CMFPlone/profiles/default/propertiestool.xml
+++ b/Products/CMFPlone/profiles/default/propertiestool.xml
@@ -45,7 +45,6 @@
    <element value="Site Administrator"/>
    <element value="Reviewer"/>
   </property>
-  <property name="auth_cookie_length" type="int">0</property>
   <property name="calendar_starting_year" type="int">2001</property>
   <property name="calendar_future_years_available" type="int">5</property>
   <property name="invalid_ids" type="lines">
diff --git a/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py b/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
index e9956d3..02a3a93 100644
--- a/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
+++ b/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
@@ -3,7 +3,7 @@
 ##parameters=resp, cookie_name, cookie_value
 
 try:
-    length = context.portal_properties.site_properties.auth_cookie_length
+    length = context.portal_registry['plone.auth_cookie_length']
 except AttributeError:
     length = 0
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T11:42:51-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/93d51761d7d7f1a5a671af982902d594fe0a9f73

Move allow_external_login_sites to the registry

Files changed:
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/profiles/default/propertiestool.xml
M Products/CMFPlone/tests/testSSOLogin.py

diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index bb0b9e8..ad85e53 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -3,7 +3,9 @@
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILoginSchema
 from posixpath import normpath
 from urlparse import urlparse, urljoin
 import re
@@ -65,8 +67,9 @@ def isURLInPortal(self, url, context=None):
         if host == u_host and u_path.startswith(path):
             return True
 
-        props = getToolByName(self, 'portal_properties').site_properties
-        for external_site in props.getProperty('allow_external_login_sites', []):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILoginSchema, prefix='plone')
+        for external_site in settings.allow_external_login_sites:
             _, host, path, _, _, _ = urlparse(external_site)
             if not path.endswith('/'):
                 path += '/'
diff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml
index 7e3a902..ce0a847 100644
--- a/Products/CMFPlone/profiles/default/propertiestool.xml
+++ b/Products/CMFPlone/profiles/default/propertiestool.xml
@@ -70,7 +70,6 @@
      type="string">false</property>
   <property name="mark_special_links" type="string">false</property>
   <property name="redirect_links" type="boolean">True</property>
-  <property name="allow_external_login_sites" type="lines"/>
   <property name="external_login_url" type="string"/>
   <property name="external_logout_url" type="string"/>
   <property name="external_login_iframe" type="boolean"/>
diff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py
index a19be23..ef6369c 100644
--- a/Products/CMFPlone/tests/testSSOLogin.py
+++ b/Products/CMFPlone/tests/testSSOLogin.py
@@ -3,6 +3,9 @@
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing import TEST_USER_ROLES
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILoginSchema
 from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
 from Products.CMFPlone.factory import addPloneSite
 import transaction
@@ -32,13 +35,11 @@ def afterSetUp(self):
         for role in TEST_USER_ROLES:
             portal.acl_users.portal_role_manager.doAssignRoleToPrincipal(TEST_USER_ID, role)
 
+        registry = self.login_portal.portal_registry
+
         # Configure the login portal to allow logins from our sites.
-        self.login_portal.portal_properties.site_properties._updateProperty(
-            'allow_external_login_sites', [
-                self.portal.absolute_url(),
-                self.another_portal.absolute_url(),
-                ]
-            )
+        registry['plone.allow_external_login_sites'] = (self.portal.absolute_url(),
+                                                        self.another_portal.absolute_url())
 
         # Configure our sites to use the login portal for logins and logouts
         login_portal_url = self.login_portal.absolute_url()


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T11:42:51-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/ade8321e38626d8a5b95365b4b96add78ddd4988

Migrate external_login_url, external_logout_url, external_login_iframe, verify_login_name

Files changed:
M Products/CMFPlone/profiles/default/propertiestool.xml
M Products/CMFPlone/skins/plone_login/login.py
M Products/CMFPlone/skins/plone_login/login_form.cpt
M Products/CMFPlone/skins/plone_login/login_form_validate.vpy
M Products/CMFPlone/skins/plone_login/logout.cpy
M Products/CMFPlone/tests/testSSOLogin.py

diff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml
index ce0a847..c89e67b 100644
--- a/Products/CMFPlone/profiles/default/propertiestool.xml
+++ b/Products/CMFPlone/profiles/default/propertiestool.xml
@@ -65,13 +65,9 @@
    <element value="Image"/>
    <element value="File"/>
   </property>
-  <property name="verify_login_name" type="boolean">True</property>
   <property name="external_links_open_new_window"
      type="string">false</property>
   <property name="mark_special_links" type="string">false</property>
   <property name="redirect_links" type="boolean">True</property>
-  <property name="external_login_url" type="string"/>
-  <property name="external_logout_url" type="string"/>
-  <property name="external_login_iframe" type="boolean"/>
  </object>
 </object>
diff --git a/Products/CMFPlone/skins/plone_login/login.py b/Products/CMFPlone/skins/plone_login/login.py
index e94d6c4..7d5956e 100644
--- a/Products/CMFPlone/skins/plone_login/login.py
+++ b/Products/CMFPlone/skins/plone_login/login.py
@@ -17,9 +17,8 @@
     return context.restrictedTraverse('external_login_return')()
 
 # Handle login on this portal where login is internal
-site_properties = context.portal_properties.site_properties
-external_login_url = site_properties.getProperty('external_login_url')
-external_login_iframe = site_properties.getProperty('external_login_iframe')
+external_login_url = context.portal_registry['plone.external_login_url']
+external_login_iframe = context.portal_registry['plone.external_login_iframe']
 if not external_login_url or external_login_iframe:
     return context.restrictedTraverse('login_form')()
 
diff --git a/Products/CMFPlone/skins/plone_login/login_form.cpt b/Products/CMFPlone/skins/plone_login/login_form.cpt
index 6e7e1a9..41d22ac 100644
--- a/Products/CMFPlone/skins/plone_login/login_form.cpt
+++ b/Products/CMFPlone/skins/plone_login/login_form.cpt
@@ -31,10 +31,9 @@
                         ac_persist auth/persist_cookie|nothing;
                         login_name python:request.get('login_name', request.get(ac_name, ''));
                         checkPermission nocall: context/portal_membership/checkPermission;
-                        site_properties context/portal_properties/site_properties;
                         use_email_as_login python:context.portal_registry['plone.use_email_as_login'];
-                        external_login_url site_properties/external_login_url|nothing;
-                        external_login_iframe site_properties/external_login_iframe|nothing;
+                        external_login_url python:context.portal_registry['plone.external_login_url'];
+                        external_login_iframe python:context.portal_registry['plone.external_login_iframe'];
                         mail_password python:test(checkPermission('Mail forgotten password', context), portal_url + '/mail_password_form', '');
                         mail_password_url request/mail_password_url|nothing;
                         mail_password_url python:test(mail_password_url and isURLInPortal(mail_password_url), mail_password_url, mail_password);
@@ -50,6 +49,13 @@
                         target python:test(target in ('_parent', '_top', '_blank', '_self'), target, None);
                         ztu modules/ZTUtils;">
 
+  <span>external_login_url: ${external_login_url}</span>
+  <span>external_login_iframe: ${external_login_iframe}</span>
+  <span>use_iframe: ${use_iframe}</span>
+  <span>use_external: ${use_external}</span>
+  <span>request/mail_password_url: ${request/mail_password_url|nothing}</span>
+  <span>in portal: ${python:isURLInPortal(mail_password_url)}</span>
+
             <div class="portalMessage error pat-cookietrigger" style="display:none">
                 <strong i18n:translate="">
                     Error
diff --git a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy
index 7520e1b..85d651e 100644
--- a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy
+++ b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy
@@ -25,7 +25,6 @@ if js_enabled and not cookies_enabled:
 
 mt=context.portal_membership
 if mt.isAnonymousUser():
-    props = getToolByName(context, 'portal_properties').site_properties
     email_login = context.portal_registry['plone.use_email_as_login']
     if js_enabled:  # javascript is enabled - we can diagnose the failure
         # using cookie authentication?
@@ -53,7 +52,7 @@ if mt.isAnonymousUser():
                         ac_password,
                         _(u'Please enter your password.'),
                         'password_required')
-            verify_login_name = props.getProperty('verify_login_name', 0)
+            verify_login_name = context.portal_registry['plone.verify_login_name']
             if user_name and verify_login_name:
                 # XXX mixing up username and loginname here
                 if mt.getMemberById(user_name) is None:
diff --git a/Products/CMFPlone/skins/plone_login/logout.cpy b/Products/CMFPlone/skins/plone_login/logout.cpy
index 8ea3919..125e46b 100644
--- a/Products/CMFPlone/skins/plone_login/logout.cpy
+++ b/Products/CMFPlone/skins/plone_login/logout.cpy
@@ -24,8 +24,7 @@ if (next is not None and context.portal_url.isURLInPortal(next)):
     target_url = next
 else:
     target_url = request.URL1 + '/logged_out'
-    site_properties = context.portal_properties.site_properties
-    external_logout_url = site_properties.getProperty('external_logout_url')
+    external_logout_url = context.portal_registry['plone.external_logout_url']
     if external_logout_url:
         target_url = "%s?next=%s" % (external_logout_url, target_url)
 
diff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py
index ef6369c..9af633f 100644
--- a/Products/CMFPlone/tests/testSSOLogin.py
+++ b/Products/CMFPlone/tests/testSSOLogin.py
@@ -44,11 +44,9 @@ def afterSetUp(self):
         # Configure our sites to use the login portal for logins and logouts
         login_portal_url = self.login_portal.absolute_url()
         for portal in (self.portal, self.another_portal):
-            site_properties = portal.portal_properties.site_properties
-            site_properties._updateProperty('external_login_url',
-                                            login_portal_url + '/login')
-            site_properties._updateProperty('external_logout_url',
-                                            login_portal_url + '/logout')
+            reg = portal.portal_registry
+            reg['plone.external_login_url'] = login_portal_url + '/login'
+            reg['plone.external_logout_url'] = login_portal_url + '/logout'
 
         # Configure all sites to use a shared secret and set cookies per path
         # (normally they would have different domains.)
@@ -131,8 +129,7 @@ def afterSetUp(self):
         SSOLoginTestCase.afterSetUp(self)
         # Configure our sites to use the iframe
         for portal in (self.portal, self.another_portal):
-            site_properties = portal.portal_properties.site_properties
-            site_properties._updateProperty('external_login_iframe', True)
+            portal.portal_registry['plone.external_login_iframe'] = True
         transaction.commit()
 
     def test_loginAndLogoutSSO(self):


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T11:42:51-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/4837bee013168b2ca2803a40d5f399e69205c536

Create a dummy registry to test external sites info

Files changed:
M Products/CMFPlone/tests/testURLTool.py

diff --git a/Products/CMFPlone/tests/testURLTool.py b/Products/CMFPlone/tests/testURLTool.py
index d9ec743..668ef2f 100644
--- a/Products/CMFPlone/tests/testURLTool.py
+++ b/Products/CMFPlone/tests/testURLTool.py
@@ -5,6 +5,9 @@
 from Products.CMFCore.tests.base.dummy import DummyContent
 
 from Acquisition import aq_parent
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILoginSchema
+from zope.component import getSiteManager
 
 
 class DummyFolder(DummyFolder):
@@ -12,20 +15,27 @@ def absolute_url(self):
         return '/'.join([aq_parent(self).absolute_url(), self.getId()])
 
 
-class DummyProperties(DummyContent):
-
-    _allow_external_login_sites = [
+class DummyLoginSettings():
+    allow_external_login_sites = [
         'http://external1',
         'http://external2/',
         'http://external3/site',
         'http://external4/site/'
         ]
 
-    def getProperty(self, name, default=None):
-        if name == 'allow_external_login_sites':
-            return self._allow_external_login_sites
+class DummyRegistry(DummyContent):
+
+
+    def __getitem__(self, name, default=None):
+        if name == 'plone.allow_external_login_sites':
+            return DummyLoginSettings().allow_external_login_sites
         return default
 
+    def forInterface(self, iface, prefix=''):
+    	if iface == ILoginSchema:
+    		return DummyLoginSettings()
+
+
 
 class TestURLTool(unittest.TestCase):
 
@@ -33,9 +43,10 @@ def setUp(self):
         self.site = DummySite(id='foo')
         self.site._setObject('foo', DummyFolder(id='foo'))
         self.site.foo._setObject('doc1', DummyContent(id='doc1'))
-        self.site.portal_properties = DummyProperties(id='portal_properties')
-        self.site.portal_properties.site_properties = \
-            DummyProperties(id='site_properties')
+        mock_registry = DummyRegistry(id='portal_registry')
+        self.site.portal_registry = mock_registry
+        sm = getSiteManager()
+        sm.registerUtility(component=mock_registry, provided=IRegistry)
 
     def _makeOne(self, *args, **kw):
         from Products.CMFPlone.URLTool import URLTool


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T11:49:09-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/00691076310ee2cd2c40ad9a87da22c4c6e912a6

Changelog entry

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 6fa8d96..a706a1b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,9 @@ Changelog
 5.0rc2 (unreleased)
 -------------------
 
+- Move login properties to the configuration registry.
+  [esteele]
+
 - Fix changing searchable in types-controlpanel.
   Fix https://github.com/plone/Products.CMFPlone/issues/926
   [pbauer]


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-11T12:21:42-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3a58272fa03bbb3119920d123998dcdae36e8720

Merge pull request #954 from plone/login_settings_migration

Login settings migration

Files changed:
M CHANGES.rst
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/default/propertiestool.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/skins/plone_login/login.py
M Products/CMFPlone/skins/plone_login/login_form.cpt
M Products/CMFPlone/skins/plone_login/login_form_validate.vpy
M Products/CMFPlone/skins/plone_login/logout.cpy
M Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
M Products/CMFPlone/tests/testSSOLogin.py
M Products/CMFPlone/tests/testURLTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0181c1b..f3b7161 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,9 @@ Changelog
 5.0rc2 (unreleased)
 -------------------
 
+- Move login properties to the configuration registry.
+  [esteele]
+
 - Fix changing searchable in types-controlpanel.
   Fix https://github.com/plone/Products.CMFPlone/issues/926
   [pbauer]
diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index bb0b9e8..ad85e53 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -3,7 +3,9 @@
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILoginSchema
 from posixpath import normpath
 from urlparse import urlparse, urljoin
 import re
@@ -65,8 +67,9 @@ def isURLInPortal(self, url, context=None):
         if host == u_host and u_path.startswith(path):
             return True
 
-        props = getToolByName(self, 'portal_properties').site_properties
-        for external_site in props.getProperty('allow_external_login_sites', []):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILoginSchema, prefix='plone')
+        for external_site in settings.allow_external_login_sites:
             _, host, path, _, _, _ = urlparse(external_site)
             if not path.endswith('/'):
                 path += '/'
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 10fdfef..3885e19 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -10,6 +10,7 @@
 from controlpanel import IEditingSchema
 from controlpanel import ILanguageSchema
 from controlpanel import IFilterSchema
+from controlpanel import ILoginSchema
 from controlpanel import IMaintenanceSchema
 from controlpanel import IMailSchema
 from controlpanel import IMarkupSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 911f867..9c9b47f 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1285,3 +1285,43 @@ class IImagingSchema(Interface):
         max=95,
         default=88
     )
+
+
+class ILoginSchema(Interface):
+
+    auth_cookie_length = schema.Int(
+        title=_(u'Auth cookie length'),
+        default=0,
+        required=False
+    )
+
+    verify_login_name = schema.Bool(
+        title=_(u'Verify login name'),
+        default=True,
+        required=False
+    )
+
+    allow_external_login_sites = schema.Tuple(
+        title=_(u'Allow external login sites'),
+        default=(),
+        value_type=schema.ASCIILine(),
+        required=False
+    )
+
+    external_login_url = schema.ASCIILine(
+        title=_(u'External login url'),
+        default=None,
+        required=False
+    )
+
+    external_logout_url = schema.ASCIILine(
+        title=_(u'External logout url'),
+        default=None,
+        required=False
+    )
+
+    external_login_iframe = schema.Bool(
+        title=_(u'External login iframe'),
+        default=False,
+        required=False
+    )
diff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml
index a88eebc..c89e67b 100644
--- a/Products/CMFPlone/profiles/default/propertiestool.xml
+++ b/Products/CMFPlone/profiles/default/propertiestool.xml
@@ -45,7 +45,6 @@
    <element value="Site Administrator"/>
    <element value="Reviewer"/>
   </property>
-  <property name="auth_cookie_length" type="int">0</property>
   <property name="calendar_starting_year" type="int">2001</property>
   <property name="calendar_future_years_available" type="int">5</property>
   <property name="invalid_ids" type="lines">
@@ -66,14 +65,9 @@
    <element value="Image"/>
    <element value="File"/>
   </property>
-  <property name="verify_login_name" type="boolean">True</property>
   <property name="external_links_open_new_window"
      type="string">false</property>
   <property name="mark_special_links" type="string">false</property>
   <property name="redirect_links" type="boolean">True</property>
-  <property name="allow_external_login_sites" type="lines"/>
-  <property name="external_login_url" type="string"/>
-  <property name="external_logout_url" type="string"/>
-  <property name="external_login_iframe" type="boolean"/>
  </object>
 </object>
diff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml
index 88e5270..6d06a66 100644
--- a/Products/CMFPlone/profiles/dependencies/registry.xml
+++ b/Products/CMFPlone/profiles/dependencies/registry.xml
@@ -28,6 +28,8 @@
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IImagingSchema"
            prefix="plone" />
+  <records interface="Products.CMFPlone.interfaces.ILoginSchema"
+           prefix="plone" />
   <record interface="Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings" field="resourceBundlesForThemes">
     <value purge="false">
       <element key="(default)">
diff --git a/Products/CMFPlone/skins/plone_login/login.py b/Products/CMFPlone/skins/plone_login/login.py
index e94d6c4..7d5956e 100644
--- a/Products/CMFPlone/skins/plone_login/login.py
+++ b/Products/CMFPlone/skins/plone_login/login.py
@@ -17,9 +17,8 @@
     return context.restrictedTraverse('external_login_return')()
 
 # Handle login on this portal where login is internal
-site_properties = context.portal_properties.site_properties
-external_login_url = site_properties.getProperty('external_login_url')
-external_login_iframe = site_properties.getProperty('external_login_iframe')
+external_login_url = context.portal_registry['plone.external_login_url']
+external_login_iframe = context.portal_registry['plone.external_login_iframe']
 if not external_login_url or external_login_iframe:
     return context.restrictedTraverse('login_form')()
 
diff --git a/Products/CMFPlone/skins/plone_login/login_form.cpt b/Products/CMFPlone/skins/plone_login/login_form.cpt
index 6e7e1a9..41d22ac 100644
--- a/Products/CMFPlone/skins/plone_login/login_form.cpt
+++ b/Products/CMFPlone/skins/plone_login/login_form.cpt
@@ -31,10 +31,9 @@
                         ac_persist auth/persist_cookie|nothing;
                         login_name python:request.get('login_name', request.get(ac_name, ''));
                         checkPermission nocall: context/portal_membership/checkPermission;
-                        site_properties context/portal_properties/site_properties;
                         use_email_as_login python:context.portal_registry['plone.use_email_as_login'];
-                        external_login_url site_properties/external_login_url|nothing;
-                        external_login_iframe site_properties/external_login_iframe|nothing;
+                        external_login_url python:context.portal_registry['plone.external_login_url'];
+                        external_login_iframe python:context.portal_registry['plone.external_login_iframe'];
                         mail_password python:test(checkPermission('Mail forgotten password', context), portal_url + '/mail_password_form', '');
                         mail_password_url request/mail_password_url|nothing;
                         mail_password_url python:test(mail_password_url and isURLInPortal(mail_password_url), mail_password_url, mail_password);
@@ -50,6 +49,13 @@
                         target python:test(target in ('_parent', '_top', '_blank', '_self'), target, None);
                         ztu modules/ZTUtils;">
 
+  <span>external_login_url: ${external_login_url}</span>
+  <span>external_login_iframe: ${external_login_iframe}</span>
+  <span>use_iframe: ${use_iframe}</span>
+  <span>use_external: ${use_external}</span>
+  <span>request/mail_password_url: ${request/mail_password_url|nothing}</span>
+  <span>in portal: ${python:isURLInPortal(mail_password_url)}</span>
+
             <div class="portalMessage error pat-cookietrigger" style="display:none">
                 <strong i18n:translate="">
                     Error
diff --git a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy
index 7520e1b..85d651e 100644
--- a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy
+++ b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy
@@ -25,7 +25,6 @@ if js_enabled and not cookies_enabled:
 
 mt=context.portal_membership
 if mt.isAnonymousUser():
-    props = getToolByName(context, 'portal_properties').site_properties
     email_login = context.portal_registry['plone.use_email_as_login']
     if js_enabled:  # javascript is enabled - we can diagnose the failure
         # using cookie authentication?
@@ -53,7 +52,7 @@ if mt.isAnonymousUser():
                         ac_password,
                         _(u'Please enter your password.'),
                         'password_required')
-            verify_login_name = props.getProperty('verify_login_name', 0)
+            verify_login_name = context.portal_registry['plone.verify_login_name']
             if user_name and verify_login_name:
                 # XXX mixing up username and loginname here
                 if mt.getMemberById(user_name) is None:
diff --git a/Products/CMFPlone/skins/plone_login/logout.cpy b/Products/CMFPlone/skins/plone_login/logout.cpy
index 8ea3919..125e46b 100644
--- a/Products/CMFPlone/skins/plone_login/logout.cpy
+++ b/Products/CMFPlone/skins/plone_login/logout.cpy
@@ -24,8 +24,7 @@ if (next is not None and context.portal_url.isURLInPortal(next)):
     target_url = next
 else:
     target_url = request.URL1 + '/logged_out'
-    site_properties = context.portal_properties.site_properties
-    external_logout_url = site_properties.getProperty('external_logout_url')
+    external_logout_url = context.portal_registry['plone.external_logout_url']
     if external_logout_url:
         target_url = "%s?next=%s" % (external_logout_url, target_url)
 
diff --git a/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py b/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
index e9956d3..02a3a93 100644
--- a/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
+++ b/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py
@@ -3,7 +3,7 @@
 ##parameters=resp, cookie_name, cookie_value
 
 try:
-    length = context.portal_properties.site_properties.auth_cookie_length
+    length = context.portal_registry['plone.auth_cookie_length']
 except AttributeError:
     length = 0
 
diff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py
index a19be23..9af633f 100644
--- a/Products/CMFPlone/tests/testSSOLogin.py
+++ b/Products/CMFPlone/tests/testSSOLogin.py
@@ -3,6 +3,9 @@
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing import TEST_USER_ROLES
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILoginSchema
 from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
 from Products.CMFPlone.factory import addPloneSite
 import transaction
@@ -32,22 +35,18 @@ def afterSetUp(self):
         for role in TEST_USER_ROLES:
             portal.acl_users.portal_role_manager.doAssignRoleToPrincipal(TEST_USER_ID, role)
 
+        registry = self.login_portal.portal_registry
+
         # Configure the login portal to allow logins from our sites.
-        self.login_portal.portal_properties.site_properties._updateProperty(
-            'allow_external_login_sites', [
-                self.portal.absolute_url(),
-                self.another_portal.absolute_url(),
-                ]
-            )
+        registry['plone.allow_external_login_sites'] = (self.portal.absolute_url(),
+                                                        self.another_portal.absolute_url())
 
         # Configure our sites to use the login portal for logins and logouts
         login_portal_url = self.login_portal.absolute_url()
         for portal in (self.portal, self.another_portal):
-            site_properties = portal.portal_properties.site_properties
-            site_properties._updateProperty('external_login_url',
-                                            login_portal_url + '/login')
-            site_properties._updateProperty('external_logout_url',
-                                            login_portal_url + '/logout')
+            reg = portal.portal_registry
+            reg['plone.external_login_url'] = login_portal_url + '/login'
+            reg['plone.external_logout_url'] = login_portal_url + '/logout'
 
         # Configure all sites to use a shared secret and set cookies per path
         # (normally they would have different domains.)
@@ -130,8 +129,7 @@ def afterSetUp(self):
         SSOLoginTestCase.afterSetUp(self)
         # Configure our sites to use the iframe
         for portal in (self.portal, self.another_portal):
-            site_properties = portal.portal_properties.site_properties
-            site_properties._updateProperty('external_login_iframe', True)
+            portal.portal_registry['plone.external_login_iframe'] = True
         transaction.commit()
 
     def test_loginAndLogoutSSO(self):
diff --git a/Products/CMFPlone/tests/testURLTool.py b/Products/CMFPlone/tests/testURLTool.py
index d9ec743..668ef2f 100644
--- a/Products/CMFPlone/tests/testURLTool.py
+++ b/Products/CMFPlone/tests/testURLTool.py
@@ -5,6 +5,9 @@
 from Products.CMFCore.tests.base.dummy import DummyContent
 
 from Acquisition import aq_parent
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ILoginSchema
+from zope.component import getSiteManager
 
 
 class DummyFolder(DummyFolder):
@@ -12,20 +15,27 @@ def absolute_url(self):
         return '/'.join([aq_parent(self).absolute_url(), self.getId()])
 
 
-class DummyProperties(DummyContent):
-
-    _allow_external_login_sites = [
+class DummyLoginSettings():
+    allow_external_login_sites = [
         'http://external1',
         'http://external2/',
         'http://external3/site',
         'http://external4/site/'
         ]
 
-    def getProperty(self, name, default=None):
-        if name == 'allow_external_login_sites':
-            return self._allow_external_login_sites
+class DummyRegistry(DummyContent):
+
+
+    def __getitem__(self, name, default=None):
+        if name == 'plone.allow_external_login_sites':
+            return DummyLoginSettings().allow_external_login_sites
         return default
 
+    def forInterface(self, iface, prefix=''):
+    	if iface == ILoginSchema:
+    		return DummyLoginSettings()
+
+
 
 class TestURLTool(unittest.TestCase):
 
@@ -33,9 +43,10 @@ def setUp(self):
         self.site = DummySite(id='foo')
         self.site._setObject('foo', DummyFolder(id='foo'))
         self.site.foo._setObject('doc1', DummyContent(id='doc1'))
-        self.site.portal_properties = DummyProperties(id='portal_properties')
-        self.site.portal_properties.site_properties = \
-            DummyProperties(id='site_properties')
+        mock_registry = DummyRegistry(id='portal_registry')
+        self.site.portal_registry = mock_registry
+        sm = getSiteManager()
+        sm.registerUtility(component=mock_registry, provided=IRegistry)
 
     def _makeOne(self, *args, **kw):
         from Products.CMFPlone.URLTool import URLTool


