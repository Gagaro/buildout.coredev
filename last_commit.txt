Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-05-01T10:55:04-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/b63dcaffb25b1f3e90d66683e94aada9853d24c6

also be able to disable a resource without removing it

Files changed:
M Products/CMFPlone/resources/exportimport/resourceregistry.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/Products/CMFPlone/resources/exportimport/resourceregistry.py b/Products/CMFPlone/resources/exportimport/resourceregistry.py
index a4cdec3..5801667 100644
--- a/Products/CMFPlone/resources/exportimport/resourceregistry.py
+++ b/Products/CMFPlone/resources/exportimport/resourceregistry.py
@@ -110,6 +110,9 @@ def _importNode(self, node):
                 elif self.resource_type == 'stylesheet':
                     proxy.css = [data['url']]
                 if 'enabled' in data and not data['enabled']:
+                    # if we are disabling it, we need to remove from legacy resources
+                    if res_id in legacy.resources:
+                        legacy.resources.remove(res_id)
                     continue
                 if res_id in legacy.resources:
                     # remove here so we can possible re-insert into whatever
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 366a98f..aa19ef2 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -117,12 +117,13 @@ def _get_legacy_bundle(self):
         return getUtility(IRegistry).collectionOfInterface(
             IBundleRegistry, prefix="plone.bundles", check=False)['plone-legacy']
 
-    def _get_resource_dom(self, name='++resource++/resource.js', remove=False):
+    def _get_resource_dom(self, name='++resource++/resource.js',
+                          remove=False, enabled=True):
         return parseString("""
             <object>
-                <javascript id="%s" remove="%s" enabled="true" />
+                <javascript id="%s" remove="%s" enabled="%s" />
             </object>
-            """ % (name, str(remove)))
+            """ % (name, str(remove), str(enabled).lower()))
 
     def test_resource_blacklist(self):
         # Ensure that blacklisted resources aren't imported
@@ -209,3 +210,22 @@ def test_insert_before(self):
         importer._importNode(foobar.documentElement)
         resources = self._get_legacy_bundle().resources
         self.assertTrue(resources.index('one') - 1, resources.index('foobar-js'))
+
+    def test_be_able_to_disable_but_not_remove(self):
+        importer = self._get_importer()
+
+        # inserter it
+        dom = self._get_resource_dom()
+        importer._importNode(dom.documentElement)
+
+        resources = self._get_legacy_bundle().resources[:]
+        js_files = [x.js for x in self._get_resources().values()]
+
+        # import again
+        dom = self._get_resource_dom(enabled=False)
+        importer._importNode(dom.documentElement)
+
+        self.assertEquals(len(resources) - 1,
+                          len(self._get_legacy_bundle().resources))
+        self.assertEquals(len(js_files),
+                          len([x.js for x in self._get_resources().values()]))
\ No newline at end of file


