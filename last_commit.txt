Repository: plone.app.caching
Branch: refs/heads/master
Date: 2015-06-09T09:48:52-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/b1c75b38aa1a05d278cfbcbac1a15be87ded0461

correctly create purge paths for root of site, prevent double slashes
  and the empty root of site(no trailing slash) not getting a purge
  path generated

Files changed:
M CHANGES.rst
M plone/app/caching/purge.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_purge.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 02c0ecb..2af827c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,10 @@ Changelog
 1.2.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- correctly create purge paths for root of site, prevent double slashes
+  and the empty root of site(no trailing slash) not getting a purge
+  path generated
+  [vangheem]
 
 
 1.2.4 (2015-06-05)
diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py
index 9d1c112..ccf627a 100644
--- a/plone/app/caching/purge.py
+++ b/plone/app/caching/purge.py
@@ -68,8 +68,20 @@ def getRelativePaths(self):
             if parentDefaultView == self.context.getId():
                 parentPrefix = '/' + parent.virtual_url_path()
                 paths.append(parentPrefix)
-                paths.append(parentPrefix  + '/')
-                paths.append(parentPrefix  + '/view')
+                if parentPrefix == '/':
+                    # special handling for site root since parentPrefix
+                    # does not make sense in that case.
+                    # Additionally, empty site roots were not getting
+                    # purge paths /VirtualHostBase/http/site.com:80/site1/VirtualHostRoot/_vh_site1/
+                    # was getting generated but not
+                    # /VirtualHostBase/http/site.com:80/site1/VirtualHostRoot/_vh_site1
+                    # which would translate to http://site.come/ getting invalidated
+                    # but not http://site.come
+                    paths.append('')
+                    paths.append('/view')
+                else:
+                    paths.append(parentPrefix + '/')
+                    paths.append(parentPrefix + '/view')
 
         return paths
 
@@ -106,11 +118,10 @@ def getRelativePaths(self):
                     if rewriter is None:
                         yield relativePath
                     else:
-                        rewrittenPaths = rewriter(relativePath) or [] # None -> []
+                        rewrittenPaths = rewriter(relativePath) or []  # None -> []
                         for rewrittenPath in rewrittenPaths:
                             yield rewrittenPath
 
-
     def getAbsolutePaths(self):
         root = self._getRoot()
         if root is None:
@@ -158,9 +169,9 @@ def getRelativePaths(self):
 
             def fieldFilter(field):
                 return ((IBlobField.providedBy(field) or
-                    IFileField.providedBy(field) or
-                    IImageField.providedBy(field))
-                    and not ITextField.providedBy(field))
+                        IFileField.providedBy(field) or
+                        IImageField.providedBy(field))
+                        and not ITextField.providedBy(field))
 
             seenDownloads = False
 
@@ -197,4 +208,3 @@ def purgeOnMovedOrRemoved(object, event):
     if event.oldName is not None and event.oldParent is not None:
         if isPurged(object):
             notify(Purge(object))
-
diff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py
index 414e7f8..06ada0a 100644
--- a/plone/app/caching/testing.py
+++ b/plone/app/caching/testing.py
@@ -13,7 +13,15 @@
 
 from plone.cachepurging.interfaces import IPurger
 
-from plone.protect.authenticator import _getKeyring
+try:
+    from plone.protect.authenticator import _getKeyring
+except ImportError:
+    # so we can run tests on plone 4.3
+    from plone.keyring.interfaces import IKeyManager
+    def _getKeyring(username):
+        manager = getUtility(IKeyManager)
+        return manager['_system']
+
 import hmac
 from hashlib import sha1 as sha
 
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index cdd819d..55b9564 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -61,7 +61,7 @@ class FauxNonContent(Explicit):
 
     def __init__(self, name=None):
         self.__name__ = name
-        self.__parent__ = None # may be overridden by acquisition
+        self.__parent__ = None  # may be overridden by acquisition
 
     def getId(self):
         return self.__name__
@@ -167,7 +167,7 @@ def test_no_default_view(self):
         purger = ContentPurgePaths(context)
 
         self.assertEqual(['/foo/', '/foo/view'],
-                          list(purger.getRelativePaths()))
+                         list(purger.getRelativePaths()))
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
     def test_default_view(self):
@@ -175,7 +175,7 @@ def test_default_view(self):
         purger = ContentPurgePaths(context)
 
         self.assertEqual(['/foo/', '/foo/view', '/foo/default-view'],
-                          list(purger.getRelativePaths()))
+                         list(purger.getRelativePaths()))
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
     def test_parent_not_default_view(self):
@@ -183,16 +183,16 @@ def test_parent_not_default_view(self):
         purger = ContentPurgePaths(context)
 
         self.assertEqual(['/bar/foo/', '/bar/foo/view', '/bar/foo/default-view'],
-                          list(purger.getRelativePaths()))
+                         list(purger.getRelativePaths()))
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
     def test_parent_default_view(self):
         context = FauxContent('default-view').__of__(FauxContent('bar'))
         purger = ContentPurgePaths(context)
 
-        self.assertEqual(['/bar/default-view/', '/bar/default-view/view', '/bar/default-view/default-view',
-                           '/bar', '/bar/', '/bar/view'],
-                          list(purger.getRelativePaths()))
+        self.assertEqual(['/bar/default-view/', '/bar/default-view/view',
+                          '/bar/default-view/default-view', '/bar', '/bar/', '/bar/view'],
+                         list(purger.getRelativePaths()))
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
 class TestDiscussionItemPurgePaths(unittest.TestCase):
@@ -312,43 +312,44 @@ def test_file_image_fields(self):
 
         class ATMultipleFields(atapi.BaseContent):
             schema = atapi.Schema((
-                    atapi.StringField('foo'),
-                    atapi.FileField('file1'),
-                    atapi.ImageField('image1'),
-                    atapi.ImageField('image2', sizes={'mini': (50,50), 'normal' : (100,100)}),
-                    BlobField('blob1'),
-                ))
+                atapi.StringField('foo'),
+                atapi.FileField('file1'),
+                atapi.ImageField('image1'),
+                atapi.ImageField('image2', sizes={'mini': (50, 50), 'normal': (100, 100)}),
+                BlobField('blob1'),
+            ))
 
         root = FauxContent('')
         context = ATMultipleFields('foo').__of__(root)
         purger = ObjectFieldPurgePaths(context)
 
         self.assertEqual(['/foo/download', '/foo/at_download',
-                           '/foo/at_download/file1', '/foo/file1',
-                           '/foo/at_download/image1', '/foo/image1','/foo/image1_thumb',
-                           '/foo/at_download/image2', '/foo/image2', '/foo/image2_mini', '/foo/image2_normal',
-                           '/foo/at_download/blob1', '/foo/blob1'],
-                           list(purger.getRelativePaths()))
+                          '/foo/at_download/file1', '/foo/file1',
+                          '/foo/at_download/image1', '/foo/image1', '/foo/image1_thumb',
+                          '/foo/at_download/image2', '/foo/image2', '/foo/image2_mini',
+                          '/foo/image2_normal', '/foo/at_download/blob1', '/foo/blob1'],
+                         list(purger.getRelativePaths()))
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
     def test_file_image_text_fields(self):
 
         class ATMultipleFields(atapi.BaseContent):
             schema = atapi.Schema((
-                    atapi.StringField('foo'),
-                    atapi.FileField('file1'),
-                    atapi.ImageField('image1'),
-                    atapi.ImageField('image2', sizes={'mini': (50,50), 'normal' : (100,100)}),
-                    atapi.TextField('text'),
-                ))
+                atapi.StringField('foo'),
+                atapi.FileField('file1'),
+                atapi.ImageField('image1'),
+                atapi.ImageField('image2', sizes={'mini': (50, 50), 'normal': (100, 100)}),
+                atapi.TextField('text'),
+            ))
 
         root = FauxContent('')
         context = ATMultipleFields('foo').__of__(root)
         purger = ObjectFieldPurgePaths(context)
 
         self.assertEqual(['/foo/download', '/foo/at_download',
-                           '/foo/at_download/file1', '/foo/file1',
-                           '/foo/at_download/image1', '/foo/image1','/foo/image1_thumb',
-                           '/foo/at_download/image2', '/foo/image2', '/foo/image2_mini', '/foo/image2_normal'],
-                           list(purger.getRelativePaths()))
+                          '/foo/at_download/file1', '/foo/file1',
+                          '/foo/at_download/image1', '/foo/image1', '/foo/image1_thumb',
+                          '/foo/at_download/image2', '/foo/image2', '/foo/image2_mini',
+                          '/foo/image2_normal'],
+                         list(purger.getRelativePaths()))
         self.assertEqual([], list(purger.getAbsolutePaths()))


