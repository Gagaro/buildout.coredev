Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-06-01T18:21:13+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/3cabe634e3b56cf3dacfe38e0ba8ebf7759647bc

Replace filter and language control panel with bbb imports.

Files changed:
M plone/app/controlpanel/filter.py
M plone/app/controlpanel/language.py
D plone/app/controlpanel/skins.py
D plone/app/controlpanel/types.pt

diff --git a/plone/app/controlpanel/filter.py b/plone/app/controlpanel/filter.py
index 2d4e0ed..7ee5d3a 100644
--- a/plone/app/controlpanel/filter.py
+++ b/plone/app/controlpanel/filter.py
@@ -1,305 +1,7 @@
-from plone.fieldsets.fieldsets import FormFieldsets
-
-from zope.interface import Interface
-from zope.component import adapts
-from zope.interface import implements
-from zope import schema
-from zope.formlib.widget import CustomWidgetFactory
-from zope.formlib.objectwidget import ObjectWidget
-from zope.formlib.sequencewidget import ListSequenceWidget
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
-
-from form import ControlPanelForm
-
-XHTML_TAGS = set(
-    'a abbr acronym address area b base bdo big blockquote body br '
-    'button caption cite code col colgroup dd del div dfn dl dt em '
-    'fieldset form h1 h2 h3 h4 h5 h6 head hr html i img input ins kbd '
-    'label legend li link map meta noscript object ol optgroup option '
-    'p param pre q samp script select small span strong style sub sup '
-    'table tbody td textarea tfoot th thead title tr tt ul var'.split())
-
-
-class ITagAttrPair(Interface):
-    tags = schema.TextLine(title=u"tags")
-    attributes = schema.TextLine(title=u"attributes")
-
-class TagAttrPair:
-    implements(ITagAttrPair)
-    def __init__(self, tags='', attributes=''):
-        self.tags = tags
-        self.attributes = attributes
-
-class IFilterTagsSchema(Interface):
-
-    disable_filtering = schema.Bool(
-        title=_(u'Disable html filtering'),
-        description=_(u'Warning, disabling can be potentially dangereous. '
-                      u'Only disable if you know what you are doing.'),
-        default=False,
-        required=False)
-
-    nasty_tags = schema.List(
-        title=_(u'Nasty tags'),
-        description=_(u"These tags, and their content are completely blocked "
-                      "when a page is saved or rendered."),
-        default=[u'applet', u'embed', u'object', u'script'],
-        value_type=schema.TextLine(),
-        required=False)
-
-    stripped_tags = schema.List(
-        title=_(u'Stripped tags'),
-        description=_(u"These tags are stripped when saving or rendering, "
-                      "but any content is preserved."),
-        default=[u'font', ],
-        value_type=schema.TextLine(),
-        required=False)
-
-    custom_tags = schema.List(
-        title=_(u'Custom tags'),
-        description=_(u"Add tag names here for tags which are not part of "
-                      "XHTML but which should be permitted."),
-        default=[],
-        value_type=schema.TextLine(),
-        required=False)
-
-
-class IFilterAttributesSchema(Interface):
-    stripped_attributes = schema.List(
-        title=_(u'Stripped attributes'),
-        description=_(u"These attributes are stripped from any tag when "
-                      "saving."),
-        default=(u'dir lang valign halign border frame rules cellspacing '
-                 'cellpadding bgcolor').split(),
-        value_type=schema.TextLine(),
-        required=False)
-
-    stripped_combinations = schema.List(
-        title=_(u'Stripped combinations'),
-        description=_(u"These attributes are stripped from those tags when "
-                      "saving."),
-        default=[],
-        #default=u'dir lang valign halign border frame rules cellspacing cellpadding bgcolor'.split()
-        value_type=schema.Object(ITagAttrPair, title=u"combination"),
-        required=False)
-
-class IFilterEditorSchema(Interface):
-    style_whitelist = schema.List(
-        title=_(u'Permitted properties'),
-        description=_(u'These CSS properties are allowed in style attributes.'),
-        default=u'text-align list-style-type float text-decoration'.split(),
-        value_type=schema.TextLine(),
-        required=False)
-
-    class_blacklist = schema.List(
-        title=_(u'Filtered classes'),
-        description=_(u'These class names are not allowed in class '
-                      'attributes.'),
-        default=[],
-        value_type=schema.TextLine(),
-        required=False)
-
-
-class IFilterSchema(IFilterTagsSchema, IFilterAttributesSchema,
-                    IFilterEditorSchema):
-    """Combined schema for the adapter lookup.
-    """
-
-class FilterControlPanelAdapter(object):
-    adapts(IPloneSiteRoot)
-    implements(IFilterSchema)
-
-    def __init__(self, context):
-        self.context = context
-        self.transform = getattr(
-            getToolByName(context, 'portal_transforms'), 'safe_html')
-        self.kupu_tool = getToolByName(context, 'kupu_library_tool', None)
-        self.encoding = 'utf-8'
-
-    def _settransform(self, **kwargs):
-        # Cannot pass a dict to set transform parameters, it has
-        # to be separate keys and values
-        # Also the transform requires all dictionary values to be set
-        # at the same time: other values may be present but are not
-        # required.
-        for k in ('valid_tags', 'nasty_tags'):
-            if k not in kwargs:
-                kwargs[k] = self.transform.get_parameter_value(k)
-
-        for k in list(kwargs):
-            if isinstance(kwargs[k], dict):
-                v = kwargs[k]
-                kwargs[k+'_key'] = v.keys()
-                kwargs[k+'_value'] = [str(s) for s in v.values()]
-                del kwargs[k]
-        self.transform.set_parameters(**kwargs)
-        self.transform._p_changed = True
-        self.transform.reload()
-
-    @apply
-    def disable_filtering():
-        def get(self):
-            return bool(
-                self.transform.get_parameter_value('disable_transform'))
-        def set(self, value):
-            self.transform._config['disable_transform'] = int(value)
-            self.transform._p_changed = True
-            self.transform.reload()
-        return property(get, set)
-
-    @apply
-    def nasty_tags():
-        def get(self):
-            return sorted(self.transform.get_parameter_value('nasty_tags'))
-        def set(self, value):
-            value = dict.fromkeys(value, 1)
-            valid = self.transform.get_parameter_value('valid_tags')
-            for v in value:
-                if v in valid:
-                    del valid[v]
-            self._settransform(nasty_tags=value, valid_tags=valid)
-        return property(get, set)
-
-    @apply
-    def stripped_tags():
-        def get(self):
-            valid = set(self.transform.get_parameter_value('valid_tags'))
-            stripped = XHTML_TAGS - valid
-            return sorted(stripped)
-        def set_(self, value):
-            valid = dict(self.transform.get_parameter_value('valid_tags'))
-            stripped = set(value)
-            for v in XHTML_TAGS:
-                if v in stripped:
-                    if v in valid:
-                        del valid[v]
-                else:
-                    valid[v] = VALID_TAGS.get(v, 1)
-
-            # Nasty tags must never be valid
-            for v in self.nasty_tags:
-                if v in valid:
-                    del valid[v]
-            self._settransform(valid_tags=valid)
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.set_stripped_tags(value)
-
-        return property(get, set_)
-
-    @apply
-    def custom_tags():
-        def get(self):
-            valid = set(self.transform.get_parameter_value('valid_tags'))
-            custom = valid - XHTML_TAGS
-            return sorted(custom)
-        def set_(self, value):
-            valid = dict(self.transform.get_parameter_value('valid_tags'))
-            # Remove all non-standard tags
-            for v in valid.keys():
-                if v not in XHTML_TAGS:
-                    del valid[v]
-            # Now add in the custom tags
-            for v in value:
-                if v not in valid:
-                    valid[v] = 1
-
-            self._settransform(valid_tags=valid)
-
-        return property(get, set_)
-
-
-    @apply
-    def style_whitelist():
-        def get(self):
-            return self.transform.get_parameter_value('style_whitelist')
-        def set(self, value):
-            self._settransform(style_whitelist = list(value))
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.style_whitelist = list(value)
-        return property(get, set)
-
-    @apply
-    def class_blacklist():
-        '''Ideally the form should allow setting a class whitelist,
-        but that will have to be added later.'''
-        def get(self):
-            return self.transform.get_parameter_value('class_blacklist')
-        def set(self, value):
-            self._settransform(class_blacklist = list(value))
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.class_blacklist = list(value)
-        return property(get, set)
-
-    @apply
-    def stripped_attributes():
-        def get(self):
-            return self.transform.get_parameter_value('stripped_attributes')
-        def set(self, value):
-            self._settransform(stripped_attributes = value)
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.set_stripped_attributes(value)
-        return property(get, set)
-
-    @apply
-    def stripped_combinations():
-        def get(self):
-            stripped = []
-            sc = self.transform.get_parameter_value('stripped_combinations')
-            for k in sc.keys():
-                stripped.append(TagAttrPair(k, sc[k]))
-            return stripped
-        def set(self, value):
-            stripped = []
-            strippeddict = {}
-            for ta in value:
-                strippeddict[ta.tags] = ta.attributes
-                tags = ta.tags.replace(',', ' ').split()
-                attributes = ta.attributes.replace(',', ' ').split()
-                stripped.append((tags,attributes))
-
-            self._settransform(stripped_combinations = strippeddict)
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.set_stripped_combinations(stripped)
-        return property(get, set)
-
-
-filtertagset = FormFieldsets(IFilterTagsSchema)
-filtertagset.id = 'filtertags'
-filtertagset.label = _(u'label_filtertags', default=u'Tags')
-
-filterattributes = FormFieldsets(IFilterAttributesSchema)
-filterattributes.id = 'filterattributes'
-filterattributes.label = _(u'label_filterattributes', default=u'Attributes')
-
-filtereditor = FormFieldsets(IFilterEditorSchema)
-filtereditor.id = 'filtereditor'
-filtereditor.label = _(u'filterstyles', default=u'Styles')
-
-tagattr_widget = CustomWidgetFactory(ObjectWidget, TagAttrPair)
-combination_widget = CustomWidgetFactory(ListSequenceWidget,
-                                         subwidget=tagattr_widget)
-
-class FilterControlPanel(ControlPanelForm):
-
-    form_fields = FormFieldsets(filtertagset, filterattributes, filtereditor)
-    form_fields['stripped_combinations'].custom_widget = combination_widget
-
-    label = _("HTML Filter settings")
-    description = _("Plone filters HTML tags that are considered security "
-                    "risks. Be aware of the implications before making "
-                    "changes below. By default only tags defined in XHTML "
-                    "are permitted. In particular, to allow 'embed' as a tag "
-                    "you must both remove it from 'Nasty tags' and add it to "
-                    "'Custom tags'. Although the form will update "
-                    "immediately to show any changes you make, your changes "
-                    "are not saved until you press the 'Save' button.")
-    form_name = _("HTML Filter settings")
+# Control panels for Plone 5 have been moved to CMFPlone. We keep those imports
+# for backwards compatibility.
+from Products.CMFPlone.interfaces import IFilterTagsSchema  # noqa
+from Products.CMFPlone.interfaces import IFilterAttributesSchema  # noqa
+from Products.CMFPlone.interfaces import IFilterEditorSchema  # noqa
+from Products.CMFPlone.controlpanel.filter import FilterControlPanel  # noqa
+from Products.CMFPlone.controlpanel.bbb.filter import FilterControlPanelAdapter  # noqa
diff --git a/plone/app/controlpanel/language.py b/plone/app/controlpanel/language.py
index 52ec270..e0aed9c 100644
--- a/plone/app/controlpanel/language.py
+++ b/plone/app/controlpanel/language.py
@@ -1,97 +1,5 @@
-from plone.app.form.widgets import LanguageDropdownChoiceWidget
-
-from zope.formlib.form import FormFields
-from zope.interface import Interface
-from zope.component import adapts
-from zope.interface import implements
-from zope.schema import Bool
-from zope.schema import Choice
-
-from Acquisition import aq_inner
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.controlpanel.form import ControlPanelForm
-
-
-class ILanguageSelectionSchema(Interface):
-
-    use_combined_language_codes = Bool(
-        title=_(u'label_allow_combined_language_codes',
-                default=u"Show country-specific language variants"),
-        description=_(u"help_allow_combined_language_codes",
-                      default=u"Examples: pt-br (Brazilian Portuguese), "
-                               "en-us (American English) etc."),
-        default=False,
-        required=False)
-
-    default_language = Choice(
-        title=_(u"heading_site_language",
-                default=u"Site language"),
-        description=_(u"description_site_language",
-                      default=u"The language used for the content and the UI "
-                               "of this site."),
-        required=True,
-        vocabulary="plone.app.vocabularies.AvailableContentLanguages")
-
-
-class LanguageControlPanelAdapter(object):
-
-    adapts(IPloneSiteRoot)
-    implements(ILanguageSelectionSchema)
-
-    def __init__(self, context):
-        self.context = getToolByName(context, 'portal_languages')
-        self.encoding = 'utf-8'
-
-    def get_default_language(self):
-        return aq_inner(self.context).getDefaultLanguage()
-
-    def set_default_language(self, value):
-        context = aq_inner(self.context)
-        if isinstance(value, tuple):
-            value = value[0]
-        supported_langs = context.getSupportedLanguages()
-        if value not in supported_langs:
-            context.supported_langs = [value]
-        context.setDefaultLanguage(value)
-
-    default_language = property(get_default_language,
-                                set_default_language)
-
-    def get_use_combined_language_codes(self):
-        return aq_inner(self.context).use_combined_language_codes
-
-    def set_use_combined_language_codes(self, value):
-        context = aq_inner(self.context)
-        # We are disabling the combined codes, but still have one selected
-        # as the default.
-        default = context.getDefaultLanguage()
-        if len(default.split('-')) > 1:
-            # XXX This should be done in some kind of validate method instead,
-            # but I have no time to figure out that part of formlib right now
-            request = context.REQUEST
-            message = _(u"You cannot disable country-specific language "
-                         "variants, please choose a different site "
-                         "language first.")
-            IStatusMessage(request).addStatusMessage(message, type='error')
-        else:
-            context.use_combined_language_codes = value
-
-    use_combined_language_codes = property(get_use_combined_language_codes,
-                                           set_use_combined_language_codes)
-
-
-class LanguageControlPanel(ControlPanelForm):
-
-    form_fields = FormFields(ILanguageSelectionSchema)
-    form_fields['default_language'].custom_widget = LanguageDropdownChoiceWidget
-
-    label = _(u"heading_language_settings", default="Language Settings")
-    description = _(u"description_language_settings",
-                    default="Settings related to interface languages and "
-                            "content translations.")
-    form_name = _(u"heading_language_settings", default="Language Settings")
+# Control panels for Plone 5 have been moved to CMFPlone. We keep those imports
+# for backwards compatibility.
+from Products.CMFPlone.interfaces import ILanguageSelectionSchema  # noqa
+from Products.CMFPlone.controlpanel.language import LanguageControlPanel  # noqa
+from Products.CMFPlone.controlpanel.bbb.language import LanguageControlPanelAdapter  # noqa
diff --git a/plone/app/controlpanel/skins.py b/plone/app/controlpanel/skins.py
deleted file mode 100644
index dc68654..0000000
--- a/plone/app/controlpanel/skins.py
+++ /dev/null
@@ -1,151 +0,0 @@
-from zope.interface import Interface
-from zope.component import adapts
-from zope.formlib.form import FormFields
-from zope.interface import implements
-from zope.schema import Bool
-from zope.schema import Choice
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-
-from form import ControlPanelForm
-from widgets import DropdownChoiceWidget
-
-from zope.schema.vocabulary import SimpleTerm
-from zope.schema.vocabulary import SimpleVocabulary
-
-ICON_VISIBILITY_CHOICES = {
-    _(u"Only for users who are logged in"): 'authenticated',
-    _(u"Never show icons"): 'disabled',
-    _(u"Always show icons"): 'enabled',
-}
-
-ICON_VISIBILITY_VOCABULARY = SimpleVocabulary(
-    [SimpleTerm(v, v, k) for k, v in ICON_VISIBILITY_CHOICES.items()]
-    )
-
-
-class ISkinsSchema(Interface):
-
-    theme = Choice(title=_(u'Default theme'),
-                  description=_(u'''Select the default theme for the site.'''),
-                  required=True,
-                  missing_value=tuple(),
-                  vocabulary="plone.app.vocabularies.Skins")
-
-    mark_special_links = Bool(title=_(u'Mark external links'),
-                              description=_(u"If enabled all external links "
-                                             "will be marked with link type "
-                                             "specific icons."),
-                              default=True)
-
-    ext_links_open_new_window = Bool(title=_(u"External links open in new "
-                                              "window"),
-                                     description=_(u"If enabled all external "
-                                                    "links in the content "
-                                                    "region open in a new "
-                                                    "window."),
-                                     default=False)
-
-    icon_visibility = Choice(title=_(u'Show content type icons'),
-                             description=_(u"If disabled the content icons "
-                                            "in folder listings and portlets "
-                                            "won't be visible."),
-                             vocabulary=ICON_VISIBILITY_VOCABULARY)
-
-
-class SkinsControlPanelAdapter(object):
-
-    adapts(IPloneSiteRoot)
-    implements(ISkinsSchema)
-
-    def __init__(self, context):
-        super(SkinsControlPanelAdapter, self).__init__(context)
-        self.context = getToolByName(context, 'portal_skins')
-        self.jstool = getToolByName(context, 'portal_javascripts')
-        self.csstool = getToolByName(context, 'portal_css')
-        ptool = getToolByName(context, 'portal_properties')
-        self.props = ptool.site_properties
-        self.themeChanged = False
-        self.encoding = 'utf-8'
-
-    def get_theme(self):
-        return self.context.getDefaultSkin()
-
-    def set_theme(self, value):
-        self.themeChanged = True
-        self.context.default_skin = value
-
-    theme = property(get_theme, set_theme)
-
-    def _update_jsreg_mark_special(self):
-        resource = self.jstool.getResource('mark_special_links.js')
-        if resource is None:
-            return
-        resource.setEnabled(
-            self.mark_special_links or self.ext_links_open_new_window
-            )
-        self.jstool.cookResources()
-
-    def get_mark_special_links(self):
-        msl = getattr(self.props, 'mark_special_links', False)
-        if msl == 'true':
-            return True
-        return False
-
-        # return self.jstool.getResource('mark_special_links.js').getEnabled()
-
-    def set_mark_special_links(self, value):
-        if value:
-            mark_special_links='true'
-        else:
-            mark_special_links='false'
-        if self.props.hasProperty('mark_special_links'):
-            self.props.manage_changeProperties(mark_special_links=mark_special_links)
-        else:
-            self.props.manage_addProperty('mark_special_links', mark_special_links, 'string')
-        self._update_jsreg_mark_special()
-
-    mark_special_links = property(get_mark_special_links,
-                                  set_mark_special_links)
-
-    def get_ext_links_open_new_window(self):
-        elonw = self.props.external_links_open_new_window
-        if elonw == 'true':
-            return True
-        return False
-
-    def set_ext_links_open_new_window(self, value):
-        if value:
-            self.props.manage_changeProperties(external_links_open_new_window='true')
-        else:
-            self.props.manage_changeProperties(external_links_open_new_window='false')
-        self._update_jsreg_mark_special()
-
-    ext_links_open_new_window = property(get_ext_links_open_new_window,
-                                         set_ext_links_open_new_window)
-
-    def get_icon_visibility(self):
-        return self.props.icon_visibility
-
-    def set_icon_visibility(self, value):
-        self.props.manage_changeProperties(icon_visibility=value)
-
-    icon_visibility = property(get_icon_visibility,set_icon_visibility)
-
-
-class SkinsControlPanel(ControlPanelForm):
-
-    form_fields = FormFields(ISkinsSchema)
-    form_fields['theme'].custom_widget = DropdownChoiceWidget
-
-    label = _("Theme settings")
-    description = _("Settings that affect the site's look and feel.")
-    form_name = _("Theme settings")
-
-    def _on_save(self, data=None):
-        # Force a refresh of the page so that a new theme choice fully takes
-        # effect.
-        if not self.errors and self.adapters['ISkinsSchema'].themeChanged:
-            self.request.response.redirect(self.request.URL)
diff --git a/plone/app/controlpanel/types.pt b/plone/app/controlpanel/types.pt
deleted file mode 100644
index 8c1c8ce..0000000
--- a/plone/app/controlpanel/types.pt
+++ /dev/null
@@ -1,271 +0,0 @@
-<html xmlns="http://www.w3.org/1999/xhtml"
-      xmlns:metal="http://xml.zope.org/namespaces/metal"
-      xmlns:tal="http://xml.zope.org/namespaces/tal"
-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
-      xml:lang="en" lang="en"
-      metal:use-macro="context/prefs_main_template/macros/master"
-      i18n:domain="plone">
-
-<body>
-
-<metal:main metal:fill-slot="prefs_configlet_main">
-
-    <h1 class="documentFirstHeading"
-        i18n:translate="heading_type_settings">Type Settings</h1>
-
-    <div class="documentDescription" i18n:translate="description_types_setup">
-        Workflow, visibility and versioning settings for your content types.
-    </div>
-
-    <div id="content-core">
-        <form method="post"
-              tal:define="type_id view/type_id"
-              tal:attributes="action string:${context/absolute_url}/@@types-controlpanel">
-
-            <input type="hidden" name="form.submitted:boolean" value="True" />
-            <input type="hidden" name="old_type_id" tal:attributes="value type_id" />
-
-            <fieldset>
-                <legend>
-                    <select name="type_id" onchange="form.submit()">
-
-                        <tal:option repeat="selectable view/selectable_types">
-                            <option tal:content="selectable/title" i18n:translate=""
-                                    tal:attributes="value selectable/id;
-                                                    selected python:type_id == selectable['id'] and 'selected' or None">
-                                    Content type
-                            </option>
-                        </tal:option>
-                        <option
-                            value=""
-                            i18n:translate="label_default_type"
-                            tal:attributes="selected python:type_id == '' and 'selected' or None">
-                          (Default)
-                        </option>
-                    </select>
-                    <noscript>
-                        <input type="submit"
-                               name="form.button.SelectContentType"
-                               class="standalone"
-                               value="Change"
-                               i18n:attributes="value label_change;" />
-                    </noscript>
-               </legend>
-
-               <tal:block tal:condition="python:type_id!=''">
-
-                   <p class="discreet"
-                      tal:content="view/selected_type_description"
-                      tal:condition="view/selected_type_description"
-                      i18n:translate="">
-                       Type description
-                   </p>
-
-                   <div class="field">
-                        <input id="addable"
-                               type="checkbox"
-                               class="noborder"
-                               name="addable:boolean"
-                               tal:attributes="checked python:view.is_addable() and 'checked' or None"
-                               />
-                        <label for="addable" i18n:translate="types_controlpanel_addable">
-                            Globally addable
-                        </label>
-                        <br />
-
-                        <input id="allow_discussion"
-                               type="checkbox"
-                               class="noborder"
-                               name="allow_discussion:boolean"
-                               tal:attributes="checked python:view.is_discussion_allowed() and 'checked' or None" />
-                        <label for="allow_discussion" i18n:translate="types_controlpanel_allow_discussion">
-                            Allow comments
-                        </label>
-                        <br />
-
-
-                        <input id="searchable"
-                               type="checkbox"
-                               class="noborder"
-                               name="searchable"
-                               tal:attributes="checked python: view.is_searchable() and 'checked' or None" />
-                        <label for="searchable" i18n:translate="types_controlpanel_searchable">
-                            Visible in searches
-                        </label>
-                        <br />
-
-
-                        <tal:block tal:condition="python:type_id=='Link'">
-
-                          <input id="redirect_links"
-                                 type="checkbox"
-                                 class="noborder"
-                                 name="redirect_links:boolean"
-                                 tal:attributes="checked python: view.is_redirect_links_enabled() and 'checked' or None" />
-                          <label for="redirect_links" i18n:translate="types_controlpanel_redirect_links">
-                              Redirect immediately to link target
-                          </label>
-
-                        </tal:block>
-                    </div>
-
-                    <div class="field">
-                        <label for="versionpolicy" i18n:translate="types_controlpanel_versionpolicy">
-                            Versioning policy:
-                        </label>
-                        <select id="versionpolicy" name="versionpolicy"
-                                tal:define="current_policy view/current_versioning_policy">
-                            <option tal:repeat="policy view/versioning_policies"
-                                    tal:attributes="value policy/id;
-                                                    selected python:policy['id']==current_policy and 'selected' or None"
-                                    tal:content="policy/title">No versioning</option>
-                        </select>
-                    </div>
-
-
-                    <div class="field">
-                        <a tal:attributes="href string:${context/absolute_url}/@@manage-content-type-portlets?key=${type_id}"
-                            i18n:translate="types_controlpanel_manage_portlets">
-                            Manage portlets assigned to this content type
-                        </a>
-                    </div>
-                </tal:block>
-
-                <tal:workflows define="current_wf view/current_workflow">
-
-                    <div class="field">
-                        <label i18n:translate="types_controlpanel_current_workflow">Current workflow:</label>
-                        <span tal:content="current_wf/title"
-                              i18n:translate="">Community Workflow</span>
-                    </div>
-
-                    <ul>
-                      <tal:list-type
-                        repeat="desc current_wf/description"
-                        condition="current_wf/description">
-                        <li tal:content="desc"
-                            i18n:translate="">Workflow description</li>
-                      </tal:list-type>
-                    </ul>
-
-                    <div class="field">
-                        <label for="new_workflow"
-                               i18n:translate="types_controlpanel_new_workflow">New workflow:</label>
-
-                        <select onchange="form.submit()" id="workflows" name="new_workflow"
-                            tal:define="selected_wf view/new_workflow">
-
-                            <tal:wfs repeat="wf view/available_workflows">
-                                <option i18n:translate=""
-                                        tal:content="wf/title"
-                                        tal:attributes="selected python:wf['id'] == selected_wf and 'selected' or None;
-                                                        value wf/id">Intranet Workflow
-                                </option>
-                            </tal:wfs>
-
-                            <option
-                                value="[none]"
-                                tal:attributes="selected python:selected_wf == '[none]' and 'selected' or None"
-                                i18n:translate="types_controlpanel_no_workflow">No Workflow</option>
-                        </select>
-                        <noscript>
-                            <input type="submit"
-                                   name="form.button.SelectWorkflow"
-                                   class="standalone"
-                                   value="Change"
-                                   i18n:attributes="value label_change;" />
-                        </noscript>
-                    </div>
-
-                    <input
-                        type="hidden"
-                        name="form.workflow.submitted:boolean"
-                        value="True"
-                        tal:condition="view/have_new_workflow"
-                        />
-                    <ul>
-                      <tal:list-type
-                        repeat="desc view/new_workflow_description"
-                        condition="view/new_workflow_description">
-                        <li tal:content="desc">Workflow description</li>
-                      </tal:list-type>
-                    </ul>
-
-                    <div tal:define="new_workflow view/new_workflow"
-                         tal:condition="python:view.have_new_workflow() and not view.new_workflow_is_none() and view.new_workflow_is_different()">
-
-                        <label for="states" i18n:translate="types_controlpanel_state_mapping">
-                            State Mapping
-                        </label>
-
-                        <div class="formHelp" i18n:translate="types_controlpanel_state_mapping_help">
-                            When changing workflows, you have to select a state equivalent in the
-                            new workflow.
-                        </div>
-
-                        <table id="states"
-                               class="listing nosort"
-                               tal:define="new_wf_states view/new_workflow_available_states">
-                            <thead>
-                                <tr>
-                                    <th i18n:translate="types_controlpanel_old_state">Old State</th>
-                                    <th i18n:translate="types_controlpanel_new_state">New State</th>
-                                </tr>
-                            </thead>
-                            <tbody>
-                                <tal:states repeat="state_map view/suggested_state_map">
-                                    <tr tal:define="oddrow repeat/state_map/odd;"
-                                        tal:attributes="class python:oddrow and 'odd' or 'even'">
-                                        <td>
-                                            <input type="hidden"
-                                                   tal:attributes="name string:new_wfstates.old_state:records;
-                                                                   value state_map/old_id" />
-                                            <span tal:content="state_map/old_title">Published</span>
-                                        </td>
-                                        <td>
-                                            <select tal:attributes="name string:new_wfstates.new_state:records">
-                                              <tal:states repeat="new_state new_wf_states">
-                                                <option
-                                                    tal:attributes="value new_state/id;
-                                                                    selected python:new_state['id'] == state_map['suggested_id'] and 'selected' or None"
-                                                    tal:content="new_state/title">Pending</option>
-                                              </tal:states>
-                                            </select>
-                                        </td>
-                                    </tr>
-                                </tal:states>
-                            </tbody>
-                        </table>
-                    </div>
-
-                </tal:workflows>
-
-                <div tal:condition="view/have_new_workflow" class="portalMessage info">
-                    <strong>Info</strong>
-                    <span i18n:translate="types_controlpanel_warn_remap">
-                        Changing the workflow of a type will take a while, and may slow down
-                        the site significantly while the content is updated to the new setting.
-                    </span>
-                </div>
-
-                <div class="formControls">
-                  <input type="submit"
-                         value="Apply Changes"
-                         name="form.button.Save"
-                         class="context"
-                         i18n:attributes="value label_apply_changes;" />
-                  <input type="submit"
-                         value="Cancel"
-                         name="form.button.Cancel"
-                         class="standalone"
-                         i18n:attributes="value label_cancel;" />
-                </div>
-
-            </fieldset>
-
-        </form>
-    </div>
-</metal:main>
-
-</body>
-</html>


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-06-01T21:26:29+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/563c8a3ae9d82d7eebbfdae11339a4bed98acf30

Merge pull request #52 from plone/tisto-cleanup-2

Replace filter and language control panel with bbb imports.

Files changed:
M plone/app/controlpanel/filter.py
M plone/app/controlpanel/language.py
D plone/app/controlpanel/skins.py
D plone/app/controlpanel/types.pt

diff --git a/plone/app/controlpanel/filter.py b/plone/app/controlpanel/filter.py
index 2d4e0ed..7ee5d3a 100644
--- a/plone/app/controlpanel/filter.py
+++ b/plone/app/controlpanel/filter.py
@@ -1,305 +1,7 @@
-from plone.fieldsets.fieldsets import FormFieldsets
-
-from zope.interface import Interface
-from zope.component import adapts
-from zope.interface import implements
-from zope import schema
-from zope.formlib.widget import CustomWidgetFactory
-from zope.formlib.objectwidget import ObjectWidget
-from zope.formlib.sequencewidget import ListSequenceWidget
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
-
-from form import ControlPanelForm
-
-XHTML_TAGS = set(
-    'a abbr acronym address area b base bdo big blockquote body br '
-    'button caption cite code col colgroup dd del div dfn dl dt em '
-    'fieldset form h1 h2 h3 h4 h5 h6 head hr html i img input ins kbd '
-    'label legend li link map meta noscript object ol optgroup option '
-    'p param pre q samp script select small span strong style sub sup '
-    'table tbody td textarea tfoot th thead title tr tt ul var'.split())
-
-
-class ITagAttrPair(Interface):
-    tags = schema.TextLine(title=u"tags")
-    attributes = schema.TextLine(title=u"attributes")
-
-class TagAttrPair:
-    implements(ITagAttrPair)
-    def __init__(self, tags='', attributes=''):
-        self.tags = tags
-        self.attributes = attributes
-
-class IFilterTagsSchema(Interface):
-
-    disable_filtering = schema.Bool(
-        title=_(u'Disable html filtering'),
-        description=_(u'Warning, disabling can be potentially dangereous. '
-                      u'Only disable if you know what you are doing.'),
-        default=False,
-        required=False)
-
-    nasty_tags = schema.List(
-        title=_(u'Nasty tags'),
-        description=_(u"These tags, and their content are completely blocked "
-                      "when a page is saved or rendered."),
-        default=[u'applet', u'embed', u'object', u'script'],
-        value_type=schema.TextLine(),
-        required=False)
-
-    stripped_tags = schema.List(
-        title=_(u'Stripped tags'),
-        description=_(u"These tags are stripped when saving or rendering, "
-                      "but any content is preserved."),
-        default=[u'font', ],
-        value_type=schema.TextLine(),
-        required=False)
-
-    custom_tags = schema.List(
-        title=_(u'Custom tags'),
-        description=_(u"Add tag names here for tags which are not part of "
-                      "XHTML but which should be permitted."),
-        default=[],
-        value_type=schema.TextLine(),
-        required=False)
-
-
-class IFilterAttributesSchema(Interface):
-    stripped_attributes = schema.List(
-        title=_(u'Stripped attributes'),
-        description=_(u"These attributes are stripped from any tag when "
-                      "saving."),
-        default=(u'dir lang valign halign border frame rules cellspacing '
-                 'cellpadding bgcolor').split(),
-        value_type=schema.TextLine(),
-        required=False)
-
-    stripped_combinations = schema.List(
-        title=_(u'Stripped combinations'),
-        description=_(u"These attributes are stripped from those tags when "
-                      "saving."),
-        default=[],
-        #default=u'dir lang valign halign border frame rules cellspacing cellpadding bgcolor'.split()
-        value_type=schema.Object(ITagAttrPair, title=u"combination"),
-        required=False)
-
-class IFilterEditorSchema(Interface):
-    style_whitelist = schema.List(
-        title=_(u'Permitted properties'),
-        description=_(u'These CSS properties are allowed in style attributes.'),
-        default=u'text-align list-style-type float text-decoration'.split(),
-        value_type=schema.TextLine(),
-        required=False)
-
-    class_blacklist = schema.List(
-        title=_(u'Filtered classes'),
-        description=_(u'These class names are not allowed in class '
-                      'attributes.'),
-        default=[],
-        value_type=schema.TextLine(),
-        required=False)
-
-
-class IFilterSchema(IFilterTagsSchema, IFilterAttributesSchema,
-                    IFilterEditorSchema):
-    """Combined schema for the adapter lookup.
-    """
-
-class FilterControlPanelAdapter(object):
-    adapts(IPloneSiteRoot)
-    implements(IFilterSchema)
-
-    def __init__(self, context):
-        self.context = context
-        self.transform = getattr(
-            getToolByName(context, 'portal_transforms'), 'safe_html')
-        self.kupu_tool = getToolByName(context, 'kupu_library_tool', None)
-        self.encoding = 'utf-8'
-
-    def _settransform(self, **kwargs):
-        # Cannot pass a dict to set transform parameters, it has
-        # to be separate keys and values
-        # Also the transform requires all dictionary values to be set
-        # at the same time: other values may be present but are not
-        # required.
-        for k in ('valid_tags', 'nasty_tags'):
-            if k not in kwargs:
-                kwargs[k] = self.transform.get_parameter_value(k)
-
-        for k in list(kwargs):
-            if isinstance(kwargs[k], dict):
-                v = kwargs[k]
-                kwargs[k+'_key'] = v.keys()
-                kwargs[k+'_value'] = [str(s) for s in v.values()]
-                del kwargs[k]
-        self.transform.set_parameters(**kwargs)
-        self.transform._p_changed = True
-        self.transform.reload()
-
-    @apply
-    def disable_filtering():
-        def get(self):
-            return bool(
-                self.transform.get_parameter_value('disable_transform'))
-        def set(self, value):
-            self.transform._config['disable_transform'] = int(value)
-            self.transform._p_changed = True
-            self.transform.reload()
-        return property(get, set)
-
-    @apply
-    def nasty_tags():
-        def get(self):
-            return sorted(self.transform.get_parameter_value('nasty_tags'))
-        def set(self, value):
-            value = dict.fromkeys(value, 1)
-            valid = self.transform.get_parameter_value('valid_tags')
-            for v in value:
-                if v in valid:
-                    del valid[v]
-            self._settransform(nasty_tags=value, valid_tags=valid)
-        return property(get, set)
-
-    @apply
-    def stripped_tags():
-        def get(self):
-            valid = set(self.transform.get_parameter_value('valid_tags'))
-            stripped = XHTML_TAGS - valid
-            return sorted(stripped)
-        def set_(self, value):
-            valid = dict(self.transform.get_parameter_value('valid_tags'))
-            stripped = set(value)
-            for v in XHTML_TAGS:
-                if v in stripped:
-                    if v in valid:
-                        del valid[v]
-                else:
-                    valid[v] = VALID_TAGS.get(v, 1)
-
-            # Nasty tags must never be valid
-            for v in self.nasty_tags:
-                if v in valid:
-                    del valid[v]
-            self._settransform(valid_tags=valid)
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.set_stripped_tags(value)
-
-        return property(get, set_)
-
-    @apply
-    def custom_tags():
-        def get(self):
-            valid = set(self.transform.get_parameter_value('valid_tags'))
-            custom = valid - XHTML_TAGS
-            return sorted(custom)
-        def set_(self, value):
-            valid = dict(self.transform.get_parameter_value('valid_tags'))
-            # Remove all non-standard tags
-            for v in valid.keys():
-                if v not in XHTML_TAGS:
-                    del valid[v]
-            # Now add in the custom tags
-            for v in value:
-                if v not in valid:
-                    valid[v] = 1
-
-            self._settransform(valid_tags=valid)
-
-        return property(get, set_)
-
-
-    @apply
-    def style_whitelist():
-        def get(self):
-            return self.transform.get_parameter_value('style_whitelist')
-        def set(self, value):
-            self._settransform(style_whitelist = list(value))
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.style_whitelist = list(value)
-        return property(get, set)
-
-    @apply
-    def class_blacklist():
-        '''Ideally the form should allow setting a class whitelist,
-        but that will have to be added later.'''
-        def get(self):
-            return self.transform.get_parameter_value('class_blacklist')
-        def set(self, value):
-            self._settransform(class_blacklist = list(value))
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.class_blacklist = list(value)
-        return property(get, set)
-
-    @apply
-    def stripped_attributes():
-        def get(self):
-            return self.transform.get_parameter_value('stripped_attributes')
-        def set(self, value):
-            self._settransform(stripped_attributes = value)
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.set_stripped_attributes(value)
-        return property(get, set)
-
-    @apply
-    def stripped_combinations():
-        def get(self):
-            stripped = []
-            sc = self.transform.get_parameter_value('stripped_combinations')
-            for k in sc.keys():
-                stripped.append(TagAttrPair(k, sc[k]))
-            return stripped
-        def set(self, value):
-            stripped = []
-            strippeddict = {}
-            for ta in value:
-                strippeddict[ta.tags] = ta.attributes
-                tags = ta.tags.replace(',', ' ').split()
-                attributes = ta.attributes.replace(',', ' ').split()
-                stripped.append((tags,attributes))
-
-            self._settransform(stripped_combinations = strippeddict)
-            # Set kupu attribute for backwards compatibility
-            if self.kupu_tool is not None:
-                self.kupu_tool.set_stripped_combinations(stripped)
-        return property(get, set)
-
-
-filtertagset = FormFieldsets(IFilterTagsSchema)
-filtertagset.id = 'filtertags'
-filtertagset.label = _(u'label_filtertags', default=u'Tags')
-
-filterattributes = FormFieldsets(IFilterAttributesSchema)
-filterattributes.id = 'filterattributes'
-filterattributes.label = _(u'label_filterattributes', default=u'Attributes')
-
-filtereditor = FormFieldsets(IFilterEditorSchema)
-filtereditor.id = 'filtereditor'
-filtereditor.label = _(u'filterstyles', default=u'Styles')
-
-tagattr_widget = CustomWidgetFactory(ObjectWidget, TagAttrPair)
-combination_widget = CustomWidgetFactory(ListSequenceWidget,
-                                         subwidget=tagattr_widget)
-
-class FilterControlPanel(ControlPanelForm):
-
-    form_fields = FormFieldsets(filtertagset, filterattributes, filtereditor)
-    form_fields['stripped_combinations'].custom_widget = combination_widget
-
-    label = _("HTML Filter settings")
-    description = _("Plone filters HTML tags that are considered security "
-                    "risks. Be aware of the implications before making "
-                    "changes below. By default only tags defined in XHTML "
-                    "are permitted. In particular, to allow 'embed' as a tag "
-                    "you must both remove it from 'Nasty tags' and add it to "
-                    "'Custom tags'. Although the form will update "
-                    "immediately to show any changes you make, your changes "
-                    "are not saved until you press the 'Save' button.")
-    form_name = _("HTML Filter settings")
+# Control panels for Plone 5 have been moved to CMFPlone. We keep those imports
+# for backwards compatibility.
+from Products.CMFPlone.interfaces import IFilterTagsSchema  # noqa
+from Products.CMFPlone.interfaces import IFilterAttributesSchema  # noqa
+from Products.CMFPlone.interfaces import IFilterEditorSchema  # noqa
+from Products.CMFPlone.controlpanel.filter import FilterControlPanel  # noqa
+from Products.CMFPlone.controlpanel.bbb.filter import FilterControlPanelAdapter  # noqa
diff --git a/plone/app/controlpanel/language.py b/plone/app/controlpanel/language.py
index 52ec270..e0aed9c 100644
--- a/plone/app/controlpanel/language.py
+++ b/plone/app/controlpanel/language.py
@@ -1,97 +1,5 @@
-from plone.app.form.widgets import LanguageDropdownChoiceWidget
-
-from zope.formlib.form import FormFields
-from zope.interface import Interface
-from zope.component import adapts
-from zope.interface import implements
-from zope.schema import Bool
-from zope.schema import Choice
-
-from Acquisition import aq_inner
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.controlpanel.form import ControlPanelForm
-
-
-class ILanguageSelectionSchema(Interface):
-
-    use_combined_language_codes = Bool(
-        title=_(u'label_allow_combined_language_codes',
-                default=u"Show country-specific language variants"),
-        description=_(u"help_allow_combined_language_codes",
-                      default=u"Examples: pt-br (Brazilian Portuguese), "
-                               "en-us (American English) etc."),
-        default=False,
-        required=False)
-
-    default_language = Choice(
-        title=_(u"heading_site_language",
-                default=u"Site language"),
-        description=_(u"description_site_language",
-                      default=u"The language used for the content and the UI "
-                               "of this site."),
-        required=True,
-        vocabulary="plone.app.vocabularies.AvailableContentLanguages")
-
-
-class LanguageControlPanelAdapter(object):
-
-    adapts(IPloneSiteRoot)
-    implements(ILanguageSelectionSchema)
-
-    def __init__(self, context):
-        self.context = getToolByName(context, 'portal_languages')
-        self.encoding = 'utf-8'
-
-    def get_default_language(self):
-        return aq_inner(self.context).getDefaultLanguage()
-
-    def set_default_language(self, value):
-        context = aq_inner(self.context)
-        if isinstance(value, tuple):
-            value = value[0]
-        supported_langs = context.getSupportedLanguages()
-        if value not in supported_langs:
-            context.supported_langs = [value]
-        context.setDefaultLanguage(value)
-
-    default_language = property(get_default_language,
-                                set_default_language)
-
-    def get_use_combined_language_codes(self):
-        return aq_inner(self.context).use_combined_language_codes
-
-    def set_use_combined_language_codes(self, value):
-        context = aq_inner(self.context)
-        # We are disabling the combined codes, but still have one selected
-        # as the default.
-        default = context.getDefaultLanguage()
-        if len(default.split('-')) > 1:
-            # XXX This should be done in some kind of validate method instead,
-            # but I have no time to figure out that part of formlib right now
-            request = context.REQUEST
-            message = _(u"You cannot disable country-specific language "
-                         "variants, please choose a different site "
-                         "language first.")
-            IStatusMessage(request).addStatusMessage(message, type='error')
-        else:
-            context.use_combined_language_codes = value
-
-    use_combined_language_codes = property(get_use_combined_language_codes,
-                                           set_use_combined_language_codes)
-
-
-class LanguageControlPanel(ControlPanelForm):
-
-    form_fields = FormFields(ILanguageSelectionSchema)
-    form_fields['default_language'].custom_widget = LanguageDropdownChoiceWidget
-
-    label = _(u"heading_language_settings", default="Language Settings")
-    description = _(u"description_language_settings",
-                    default="Settings related to interface languages and "
-                            "content translations.")
-    form_name = _(u"heading_language_settings", default="Language Settings")
+# Control panels for Plone 5 have been moved to CMFPlone. We keep those imports
+# for backwards compatibility.
+from Products.CMFPlone.interfaces import ILanguageSelectionSchema  # noqa
+from Products.CMFPlone.controlpanel.language import LanguageControlPanel  # noqa
+from Products.CMFPlone.controlpanel.bbb.language import LanguageControlPanelAdapter  # noqa
diff --git a/plone/app/controlpanel/skins.py b/plone/app/controlpanel/skins.py
deleted file mode 100644
index dc68654..0000000
--- a/plone/app/controlpanel/skins.py
+++ /dev/null
@@ -1,151 +0,0 @@
-from zope.interface import Interface
-from zope.component import adapts
-from zope.formlib.form import FormFields
-from zope.interface import implements
-from zope.schema import Bool
-from zope.schema import Choice
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-
-from form import ControlPanelForm
-from widgets import DropdownChoiceWidget
-
-from zope.schema.vocabulary import SimpleTerm
-from zope.schema.vocabulary import SimpleVocabulary
-
-ICON_VISIBILITY_CHOICES = {
-    _(u"Only for users who are logged in"): 'authenticated',
-    _(u"Never show icons"): 'disabled',
-    _(u"Always show icons"): 'enabled',
-}
-
-ICON_VISIBILITY_VOCABULARY = SimpleVocabulary(
-    [SimpleTerm(v, v, k) for k, v in ICON_VISIBILITY_CHOICES.items()]
-    )
-
-
-class ISkinsSchema(Interface):
-
-    theme = Choice(title=_(u'Default theme'),
-                  description=_(u'''Select the default theme for the site.'''),
-                  required=True,
-                  missing_value=tuple(),
-                  vocabulary="plone.app.vocabularies.Skins")
-
-    mark_special_links = Bool(title=_(u'Mark external links'),
-                              description=_(u"If enabled all external links "
-                                             "will be marked with link type "
-                                             "specific icons."),
-                              default=True)
-
-    ext_links_open_new_window = Bool(title=_(u"External links open in new "
-                                              "window"),
-                                     description=_(u"If enabled all external "
-                                                    "links in the content "
-                                                    "region open in a new "
-                                                    "window."),
-                                     default=False)
-
-    icon_visibility = Choice(title=_(u'Show content type icons'),
-                             description=_(u"If disabled the content icons "
-                                            "in folder listings and portlets "
-                                            "won't be visible."),
-                             vocabulary=ICON_VISIBILITY_VOCABULARY)
-
-
-class SkinsControlPanelAdapter(object):
-
-    adapts(IPloneSiteRoot)
-    implements(ISkinsSchema)
-
-    def __init__(self, context):
-        super(SkinsControlPanelAdapter, self).__init__(context)
-        self.context = getToolByName(context, 'portal_skins')
-        self.jstool = getToolByName(context, 'portal_javascripts')
-        self.csstool = getToolByName(context, 'portal_css')
-        ptool = getToolByName(context, 'portal_properties')
-        self.props = ptool.site_properties
-        self.themeChanged = False
-        self.encoding = 'utf-8'
-
-    def get_theme(self):
-        return self.context.getDefaultSkin()
-
-    def set_theme(self, value):
-        self.themeChanged = True
-        self.context.default_skin = value
-
-    theme = property(get_theme, set_theme)
-
-    def _update_jsreg_mark_special(self):
-        resource = self.jstool.getResource('mark_special_links.js')
-        if resource is None:
-            return
-        resource.setEnabled(
-            self.mark_special_links or self.ext_links_open_new_window
-            )
-        self.jstool.cookResources()
-
-    def get_mark_special_links(self):
-        msl = getattr(self.props, 'mark_special_links', False)
-        if msl == 'true':
-            return True
-        return False
-
-        # return self.jstool.getResource('mark_special_links.js').getEnabled()
-
-    def set_mark_special_links(self, value):
-        if value:
-            mark_special_links='true'
-        else:
-            mark_special_links='false'
-        if self.props.hasProperty('mark_special_links'):
-            self.props.manage_changeProperties(mark_special_links=mark_special_links)
-        else:
-            self.props.manage_addProperty('mark_special_links', mark_special_links, 'string')
-        self._update_jsreg_mark_special()
-
-    mark_special_links = property(get_mark_special_links,
-                                  set_mark_special_links)
-
-    def get_ext_links_open_new_window(self):
-        elonw = self.props.external_links_open_new_window
-        if elonw == 'true':
-            return True
-        return False
-
-    def set_ext_links_open_new_window(self, value):
-        if value:
-            self.props.manage_changeProperties(external_links_open_new_window='true')
-        else:
-            self.props.manage_changeProperties(external_links_open_new_window='false')
-        self._update_jsreg_mark_special()
-
-    ext_links_open_new_window = property(get_ext_links_open_new_window,
-                                         set_ext_links_open_new_window)
-
-    def get_icon_visibility(self):
-        return self.props.icon_visibility
-
-    def set_icon_visibility(self, value):
-        self.props.manage_changeProperties(icon_visibility=value)
-
-    icon_visibility = property(get_icon_visibility,set_icon_visibility)
-
-
-class SkinsControlPanel(ControlPanelForm):
-
-    form_fields = FormFields(ISkinsSchema)
-    form_fields['theme'].custom_widget = DropdownChoiceWidget
-
-    label = _("Theme settings")
-    description = _("Settings that affect the site's look and feel.")
-    form_name = _("Theme settings")
-
-    def _on_save(self, data=None):
-        # Force a refresh of the page so that a new theme choice fully takes
-        # effect.
-        if not self.errors and self.adapters['ISkinsSchema'].themeChanged:
-            self.request.response.redirect(self.request.URL)
diff --git a/plone/app/controlpanel/types.pt b/plone/app/controlpanel/types.pt
deleted file mode 100644
index 8c1c8ce..0000000
--- a/plone/app/controlpanel/types.pt
+++ /dev/null
@@ -1,271 +0,0 @@
-<html xmlns="http://www.w3.org/1999/xhtml"
-      xmlns:metal="http://xml.zope.org/namespaces/metal"
-      xmlns:tal="http://xml.zope.org/namespaces/tal"
-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
-      xml:lang="en" lang="en"
-      metal:use-macro="context/prefs_main_template/macros/master"
-      i18n:domain="plone">
-
-<body>
-
-<metal:main metal:fill-slot="prefs_configlet_main">
-
-    <h1 class="documentFirstHeading"
-        i18n:translate="heading_type_settings">Type Settings</h1>
-
-    <div class="documentDescription" i18n:translate="description_types_setup">
-        Workflow, visibility and versioning settings for your content types.
-    </div>
-
-    <div id="content-core">
-        <form method="post"
-              tal:define="type_id view/type_id"
-              tal:attributes="action string:${context/absolute_url}/@@types-controlpanel">
-
-            <input type="hidden" name="form.submitted:boolean" value="True" />
-            <input type="hidden" name="old_type_id" tal:attributes="value type_id" />
-
-            <fieldset>
-                <legend>
-                    <select name="type_id" onchange="form.submit()">
-
-                        <tal:option repeat="selectable view/selectable_types">
-                            <option tal:content="selectable/title" i18n:translate=""
-                                    tal:attributes="value selectable/id;
-                                                    selected python:type_id == selectable['id'] and 'selected' or None">
-                                    Content type
-                            </option>
-                        </tal:option>
-                        <option
-                            value=""
-                            i18n:translate="label_default_type"
-                            tal:attributes="selected python:type_id == '' and 'selected' or None">
-                          (Default)
-                        </option>
-                    </select>
-                    <noscript>
-                        <input type="submit"
-                               name="form.button.SelectContentType"
-                               class="standalone"
-                               value="Change"
-                               i18n:attributes="value label_change;" />
-                    </noscript>
-               </legend>
-
-               <tal:block tal:condition="python:type_id!=''">
-
-                   <p class="discreet"
-                      tal:content="view/selected_type_description"
-                      tal:condition="view/selected_type_description"
-                      i18n:translate="">
-                       Type description
-                   </p>
-
-                   <div class="field">
-                        <input id="addable"
-                               type="checkbox"
-                               class="noborder"
-                               name="addable:boolean"
-                               tal:attributes="checked python:view.is_addable() and 'checked' or None"
-                               />
-                        <label for="addable" i18n:translate="types_controlpanel_addable">
-                            Globally addable
-                        </label>
-                        <br />
-
-                        <input id="allow_discussion"
-                               type="checkbox"
-                               class="noborder"
-                               name="allow_discussion:boolean"
-                               tal:attributes="checked python:view.is_discussion_allowed() and 'checked' or None" />
-                        <label for="allow_discussion" i18n:translate="types_controlpanel_allow_discussion">
-                            Allow comments
-                        </label>
-                        <br />
-
-
-                        <input id="searchable"
-                               type="checkbox"
-                               class="noborder"
-                               name="searchable"
-                               tal:attributes="checked python: view.is_searchable() and 'checked' or None" />
-                        <label for="searchable" i18n:translate="types_controlpanel_searchable">
-                            Visible in searches
-                        </label>
-                        <br />
-
-
-                        <tal:block tal:condition="python:type_id=='Link'">
-
-                          <input id="redirect_links"
-                                 type="checkbox"
-                                 class="noborder"
-                                 name="redirect_links:boolean"
-                                 tal:attributes="checked python: view.is_redirect_links_enabled() and 'checked' or None" />
-                          <label for="redirect_links" i18n:translate="types_controlpanel_redirect_links">
-                              Redirect immediately to link target
-                          </label>
-
-                        </tal:block>
-                    </div>
-
-                    <div class="field">
-                        <label for="versionpolicy" i18n:translate="types_controlpanel_versionpolicy">
-                            Versioning policy:
-                        </label>
-                        <select id="versionpolicy" name="versionpolicy"
-                                tal:define="current_policy view/current_versioning_policy">
-                            <option tal:repeat="policy view/versioning_policies"
-                                    tal:attributes="value policy/id;
-                                                    selected python:policy['id']==current_policy and 'selected' or None"
-                                    tal:content="policy/title">No versioning</option>
-                        </select>
-                    </div>
-
-
-                    <div class="field">
-                        <a tal:attributes="href string:${context/absolute_url}/@@manage-content-type-portlets?key=${type_id}"
-                            i18n:translate="types_controlpanel_manage_portlets">
-                            Manage portlets assigned to this content type
-                        </a>
-                    </div>
-                </tal:block>
-
-                <tal:workflows define="current_wf view/current_workflow">
-
-                    <div class="field">
-                        <label i18n:translate="types_controlpanel_current_workflow">Current workflow:</label>
-                        <span tal:content="current_wf/title"
-                              i18n:translate="">Community Workflow</span>
-                    </div>
-
-                    <ul>
-                      <tal:list-type
-                        repeat="desc current_wf/description"
-                        condition="current_wf/description">
-                        <li tal:content="desc"
-                            i18n:translate="">Workflow description</li>
-                      </tal:list-type>
-                    </ul>
-
-                    <div class="field">
-                        <label for="new_workflow"
-                               i18n:translate="types_controlpanel_new_workflow">New workflow:</label>
-
-                        <select onchange="form.submit()" id="workflows" name="new_workflow"
-                            tal:define="selected_wf view/new_workflow">
-
-                            <tal:wfs repeat="wf view/available_workflows">
-                                <option i18n:translate=""
-                                        tal:content="wf/title"
-                                        tal:attributes="selected python:wf['id'] == selected_wf and 'selected' or None;
-                                                        value wf/id">Intranet Workflow
-                                </option>
-                            </tal:wfs>
-
-                            <option
-                                value="[none]"
-                                tal:attributes="selected python:selected_wf == '[none]' and 'selected' or None"
-                                i18n:translate="types_controlpanel_no_workflow">No Workflow</option>
-                        </select>
-                        <noscript>
-                            <input type="submit"
-                                   name="form.button.SelectWorkflow"
-                                   class="standalone"
-                                   value="Change"
-                                   i18n:attributes="value label_change;" />
-                        </noscript>
-                    </div>
-
-                    <input
-                        type="hidden"
-                        name="form.workflow.submitted:boolean"
-                        value="True"
-                        tal:condition="view/have_new_workflow"
-                        />
-                    <ul>
-                      <tal:list-type
-                        repeat="desc view/new_workflow_description"
-                        condition="view/new_workflow_description">
-                        <li tal:content="desc">Workflow description</li>
-                      </tal:list-type>
-                    </ul>
-
-                    <div tal:define="new_workflow view/new_workflow"
-                         tal:condition="python:view.have_new_workflow() and not view.new_workflow_is_none() and view.new_workflow_is_different()">
-
-                        <label for="states" i18n:translate="types_controlpanel_state_mapping">
-                            State Mapping
-                        </label>
-
-                        <div class="formHelp" i18n:translate="types_controlpanel_state_mapping_help">
-                            When changing workflows, you have to select a state equivalent in the
-                            new workflow.
-                        </div>
-
-                        <table id="states"
-                               class="listing nosort"
-                               tal:define="new_wf_states view/new_workflow_available_states">
-                            <thead>
-                                <tr>
-                                    <th i18n:translate="types_controlpanel_old_state">Old State</th>
-                                    <th i18n:translate="types_controlpanel_new_state">New State</th>
-                                </tr>
-                            </thead>
-                            <tbody>
-                                <tal:states repeat="state_map view/suggested_state_map">
-                                    <tr tal:define="oddrow repeat/state_map/odd;"
-                                        tal:attributes="class python:oddrow and 'odd' or 'even'">
-                                        <td>
-                                            <input type="hidden"
-                                                   tal:attributes="name string:new_wfstates.old_state:records;
-                                                                   value state_map/old_id" />
-                                            <span tal:content="state_map/old_title">Published</span>
-                                        </td>
-                                        <td>
-                                            <select tal:attributes="name string:new_wfstates.new_state:records">
-                                              <tal:states repeat="new_state new_wf_states">
-                                                <option
-                                                    tal:attributes="value new_state/id;
-                                                                    selected python:new_state['id'] == state_map['suggested_id'] and 'selected' or None"
-                                                    tal:content="new_state/title">Pending</option>
-                                              </tal:states>
-                                            </select>
-                                        </td>
-                                    </tr>
-                                </tal:states>
-                            </tbody>
-                        </table>
-                    </div>
-
-                </tal:workflows>
-
-                <div tal:condition="view/have_new_workflow" class="portalMessage info">
-                    <strong>Info</strong>
-                    <span i18n:translate="types_controlpanel_warn_remap">
-                        Changing the workflow of a type will take a while, and may slow down
-                        the site significantly while the content is updated to the new setting.
-                    </span>
-                </div>
-
-                <div class="formControls">
-                  <input type="submit"
-                         value="Apply Changes"
-                         name="form.button.Save"
-                         class="context"
-                         i18n:attributes="value label_apply_changes;" />
-                  <input type="submit"
-                         value="Cancel"
-                         name="form.button.Cancel"
-                         class="standalone"
-                         i18n:attributes="value label_cancel;" />
-                </div>
-
-            </fieldset>
-
-        </form>
-    </div>
-</metal:main>
-
-</body>
-</html>


