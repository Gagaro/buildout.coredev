Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-09-11T10:37:49-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/aab9939131a9eea6d10b0f91b4d90bd9b59bdda1

rewrite manifest from copied theme with relative paths also

Files changed:
A src/plone/app/theming/tests/another-theme/manifest.cfg
A src/plone/app/theming/tests/another-theme/rules.xml
M CHANGES.rst
M src/plone/app/theming/tests/configure.zcml
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2d3269a..874aff0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 1.2.11 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- rewrite manifest from copied theme with relative paths also
+  [vangheem]
 
 
 1.2.10 (2015-09-08)
diff --git a/src/plone/app/theming/tests/another-theme/manifest.cfg b/src/plone/app/theming/tests/another-theme/manifest.cfg
new file mode 100644
index 0000000..218a9b0
--- /dev/null
+++ b/src/plone/app/theming/tests/another-theme/manifest.cfg
@@ -0,0 +1,17 @@
+[theme]
+title = Another test theme
+description = Another theme for testing
+doctype = <!DOCTYPE html>
+prefix = ++theme++another-test-theme
+rules = ++theme++another-test-theme/rules.xml
+
+enabled-bundles = plone
+disabled-bundles = foobar
+
+development-css = ++theme++another-theme/less/barceloneta.plone.less
+production-css = ++theme++another-theme/less/barceloneta-compiled.css
+tinymce-content-css = ++theme++another-theme/less/barceloneta-compiled.css
+
+development-js = ++theme++another-theme/script.js
+production-js = ++theme++another-theme/script.min.js
+
diff --git a/src/plone/app/theming/tests/another-theme/rules.xml b/src/plone/app/theming/tests/another-theme/rules.xml
new file mode 100644
index 0000000..78ae654
--- /dev/null
+++ b/src/plone/app/theming/tests/another-theme/rules.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+</rules>
diff --git a/src/plone/app/theming/tests/configure.zcml b/src/plone/app/theming/tests/configure.zcml
index 43f4743..db95820 100644
--- a/src/plone/app/theming/tests/configure.zcml
+++ b/src/plone/app/theming/tests/configure.zcml
@@ -7,6 +7,7 @@
 
     <plone:static directory="resources" type="theme" />
     <plone:static directory="secondary-theme" name="secondary-theme" type="theme" />
+    <plone:static directory="another-theme" name="another-theme" type="theme" />
 
     <browser:page
         for="*"
diff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py
index 6f93981..2cb6e0a 100644
--- a/src/plone/app/theming/tests/test_utils.py
+++ b/src/plone/app/theming/tests/test_utils.py
@@ -233,6 +233,49 @@ def test_createThemeFromTemplate_custom_prefix(self):
         self.assertEqual(theme.development_js, expected_dev_js)
         self.assertEqual(theme.production_js, expected_prod_js)
 
+    def test_createThemeFromTemplate_rel_path(self):
+        from plone.app.theming.utils import createThemeFromTemplate
+        from plone.app.theming.utils import getAvailableThemes
+        from plone.app.theming.utils import getTheme
+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+        from plone.app.theming.interfaces import RULE_FILENAME
+        title = "copy of test theme with custom prefix"
+        description = "test theme creation"
+        themeName = createThemeFromTemplate(title, description,
+                                            baseOn="another-theme")
+        titles = [theme.title for theme in getAvailableThemes()]
+        self.assertTrue(title in titles)
+
+        theme = getTheme(themeName)
+        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,
+                                          title.replace(" ", "-"))
+        self.assertEqual(theme.absolutePrefix, expected_prefix)
+
+        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,
+                                           title.replace(" ", "-"),
+                                           RULE_FILENAME)
+        self.assertEqual(theme.rules, expected_rules)
+
+        self.assertEqual(theme.enabled_bundles, ['plone'])
+        self.assertEqual(theme.disabled_bundles, ['foobar'])
+
+        expected_dev_css = u"++%s++%s/less/barceloneta.plone.less" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_css = u"++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_tinymce = u"++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_css, expected_dev_css)
+        self.assertEqual(theme.production_css, expected_prod_css)
+        self.assertEqual(theme.tinymce_content_css, expected_tinymce)
+
+        expected_dev_js = u"++%s++%s/script.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_js = u"++%s++%s/script.min.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_js, expected_dev_js)
+        self.assertEqual(theme.production_js, expected_prod_js)
+
 
 class TestUnit(unittest.TestCase):
 
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 9dccc3f..2c00005 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -536,10 +536,10 @@ def createThemeFromTemplate(title, description, baseOn='template'):
         val = manifest.get('theme', var_path)
         if not val:
             continue
-        template_prefix = '/++%s++%s/' % (THEME_RESOURCE_NAME, baseOn)
-        if val.startswith(template_prefix):
+        template_prefix = '++%s++%s/' % (THEME_RESOURCE_NAME, baseOn)
+        if template_prefix in val:
             # okay, fix
-            val = val.replace(template_prefix, '/++%s++%s/' % (THEME_RESOURCE_NAME, themeName))
+            val = val.replace(template_prefix, '++%s++%s/' % (THEME_RESOURCE_NAME, themeName))
             manifest.set('theme', var_path, val)
 
     manifestContents = StringIO()


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-09-11T12:06:36-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/5986626103208d8627197b943c8fb48896b1c63c

Merge pull request #77 from plone/copy-theme-relative

rewrite manifest from copied theme with relative paths also

Files changed:
A src/plone/app/theming/tests/another-theme/manifest.cfg
A src/plone/app/theming/tests/another-theme/rules.xml
M CHANGES.rst
M src/plone/app/theming/tests/configure.zcml
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2d3269a..874aff0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 1.2.11 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- rewrite manifest from copied theme with relative paths also
+  [vangheem]
 
 
 1.2.10 (2015-09-08)
diff --git a/src/plone/app/theming/tests/another-theme/manifest.cfg b/src/plone/app/theming/tests/another-theme/manifest.cfg
new file mode 100644
index 0000000..218a9b0
--- /dev/null
+++ b/src/plone/app/theming/tests/another-theme/manifest.cfg
@@ -0,0 +1,17 @@
+[theme]
+title = Another test theme
+description = Another theme for testing
+doctype = <!DOCTYPE html>
+prefix = ++theme++another-test-theme
+rules = ++theme++another-test-theme/rules.xml
+
+enabled-bundles = plone
+disabled-bundles = foobar
+
+development-css = ++theme++another-theme/less/barceloneta.plone.less
+production-css = ++theme++another-theme/less/barceloneta-compiled.css
+tinymce-content-css = ++theme++another-theme/less/barceloneta-compiled.css
+
+development-js = ++theme++another-theme/script.js
+production-js = ++theme++another-theme/script.min.js
+
diff --git a/src/plone/app/theming/tests/another-theme/rules.xml b/src/plone/app/theming/tests/another-theme/rules.xml
new file mode 100644
index 0000000..78ae654
--- /dev/null
+++ b/src/plone/app/theming/tests/another-theme/rules.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<rules
+    xmlns="http://namespaces.plone.org/diazo"
+    xmlns:css="http://namespaces.plone.org/diazo/css"
+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+</rules>
diff --git a/src/plone/app/theming/tests/configure.zcml b/src/plone/app/theming/tests/configure.zcml
index 43f4743..db95820 100644
--- a/src/plone/app/theming/tests/configure.zcml
+++ b/src/plone/app/theming/tests/configure.zcml
@@ -7,6 +7,7 @@
 
     <plone:static directory="resources" type="theme" />
     <plone:static directory="secondary-theme" name="secondary-theme" type="theme" />
+    <plone:static directory="another-theme" name="another-theme" type="theme" />
 
     <browser:page
         for="*"
diff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py
index 6f93981..2cb6e0a 100644
--- a/src/plone/app/theming/tests/test_utils.py
+++ b/src/plone/app/theming/tests/test_utils.py
@@ -233,6 +233,49 @@ def test_createThemeFromTemplate_custom_prefix(self):
         self.assertEqual(theme.development_js, expected_dev_js)
         self.assertEqual(theme.production_js, expected_prod_js)
 
+    def test_createThemeFromTemplate_rel_path(self):
+        from plone.app.theming.utils import createThemeFromTemplate
+        from plone.app.theming.utils import getAvailableThemes
+        from plone.app.theming.utils import getTheme
+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+        from plone.app.theming.interfaces import RULE_FILENAME
+        title = "copy of test theme with custom prefix"
+        description = "test theme creation"
+        themeName = createThemeFromTemplate(title, description,
+                                            baseOn="another-theme")
+        titles = [theme.title for theme in getAvailableThemes()]
+        self.assertTrue(title in titles)
+
+        theme = getTheme(themeName)
+        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,
+                                          title.replace(" ", "-"))
+        self.assertEqual(theme.absolutePrefix, expected_prefix)
+
+        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,
+                                           title.replace(" ", "-"),
+                                           RULE_FILENAME)
+        self.assertEqual(theme.rules, expected_rules)
+
+        self.assertEqual(theme.enabled_bundles, ['plone'])
+        self.assertEqual(theme.disabled_bundles, ['foobar'])
+
+        expected_dev_css = u"++%s++%s/less/barceloneta.plone.less" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_css = u"++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_tinymce = u"++%s++%s/less/barceloneta-compiled.css" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_css, expected_dev_css)
+        self.assertEqual(theme.production_css, expected_prod_css)
+        self.assertEqual(theme.tinymce_content_css, expected_tinymce)
+
+        expected_dev_js = u"++%s++%s/script.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        expected_prod_js = u"++%s++%s/script.min.js" % (
+            THEME_RESOURCE_NAME, title.replace(" ", "-"))
+        self.assertEqual(theme.development_js, expected_dev_js)
+        self.assertEqual(theme.production_js, expected_prod_js)
+
 
 class TestUnit(unittest.TestCase):
 
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 9dccc3f..2c00005 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -536,10 +536,10 @@ def createThemeFromTemplate(title, description, baseOn='template'):
         val = manifest.get('theme', var_path)
         if not val:
             continue
-        template_prefix = '/++%s++%s/' % (THEME_RESOURCE_NAME, baseOn)
-        if val.startswith(template_prefix):
+        template_prefix = '++%s++%s/' % (THEME_RESOURCE_NAME, baseOn)
+        if template_prefix in val:
             # okay, fix
-            val = val.replace(template_prefix, '/++%s++%s/' % (THEME_RESOURCE_NAME, themeName))
+            val = val.replace(template_prefix, '++%s++%s/' % (THEME_RESOURCE_NAME, themeName))
             manifest.set('theme', var_path, val)
 
     manifestContents = StringIO()


