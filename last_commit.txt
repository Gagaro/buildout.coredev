Repository: mockup


Branch: refs/heads/master
Date: 2015-09-08T21:47:01-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/77c21596cfdb8b05a1b3d1a551c450be58fe9b1a

Use hash to keep autotoc position settings

Files changed:
M CHANGES.rst
M mockup/patterns/autotoc/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 655c941..464d15b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.0.9 (Unreleased)
 ------------------
 
+- Use hash to keep autotoc position settings
+  [vangheem]
+
 - Raise pat-modal ``z-index`` to make sure, it's displayed above anything else,
   e.g. TinyMCE's toolbar in inline editing mode.
   [thet]
diff --git a/mockup/patterns/autotoc/pattern.js b/mockup/patterns/autotoc/pattern.js
index a3f4070..6b240cd 100644
--- a/mockup/patterns/autotoc/pattern.js
+++ b/mockup/patterns/autotoc/pattern.js
@@ -110,27 +110,39 @@ define([
 
       var asTabs = self.$el.hasClass('autotabs');
 
+      var activeId = null;
+
       $(self.options.levels, self.$el).each(function(i) {
         var $level = $(this),
             id = $level.prop('id') ? $level.prop('id') :
                  $level.parents(self.options.section).prop('id');
-        if (!id) {
+        if (!id || $('#' + id).length > 0) {
           id = self.options.IDPrefix + self.name + '-' + i;
         }
+        if(window.location.hash === '#' + id){
+          activeId = id;
+        }
         $('<a/>')
           .appendTo(self.$toc)
           .text($level.text())
           .attr('id', id)
           .attr('href', '#' + id)
           .addClass(self.options.classLevelPrefixName + self.getLevel($level))
-          .on('click', function(e, doScroll) {
+          .on('click', function(e, options) {
             e.stopPropagation();
             e.preventDefault();
+            if(!options){
+              options = {
+                doScroll: true,
+                skipHash: false
+              };
+            }
+            var $el = $(this);
             self.$toc.children('.' + self.options.classActiveName).removeClass(self.options.classActiveName);
             self.$el.children('.' + self.options.classActiveName).removeClass(self.options.classActiveName);
             $(e.target).addClass(self.options.classActiveName);
             $level.parents(self.options.section).addClass(self.options.classActiveName);
-            if (doScroll !== false &&
+            if (options.doScroll !== false &&
                 self.options.scrollDuration &&
                 $level &&
                 !asTabs) {
@@ -142,11 +154,22 @@ define([
               self.$el.trigger('resize.plone-modal.patterns');
             }
             $(this).trigger('clicked');
+            if(!options.skipHash){
+              window.location.hash = $el.attr('id');
+            }
           });
       });
 
-      self.$toc.find('a').first().trigger('click', false);
-
+      if(activeId){
+        $('a#' + activeId).trigger('click', {
+          doScroll: true,
+          skipHash: true
+        });
+      }else{
+        self.$toc.find('a').first().trigger('click', {
+          doScroll: false,
+          skipHash: true});
+      }
     },
     getLevel: function($el) {
       var elementLevel = 0;


Repository: mockup


Branch: refs/heads/master
Date: 2015-09-09T00:01:21-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/mockup/commit/85a2355f239b4e0213ee33b02d9fa7499fe3545a

Merge pull request #572 from plone/autotoc-hash-positions

Use hash to keep autotoc position settings

Files changed:
M CHANGES.rst
M mockup/patterns/autotoc/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 655c941..464d15b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.0.9 (Unreleased)
 ------------------
 
+- Use hash to keep autotoc position settings
+  [vangheem]
+
 - Raise pat-modal ``z-index`` to make sure, it's displayed above anything else,
   e.g. TinyMCE's toolbar in inline editing mode.
   [thet]
diff --git a/mockup/patterns/autotoc/pattern.js b/mockup/patterns/autotoc/pattern.js
index a3f4070..6b240cd 100644
--- a/mockup/patterns/autotoc/pattern.js
+++ b/mockup/patterns/autotoc/pattern.js
@@ -110,27 +110,39 @@ define([
 
       var asTabs = self.$el.hasClass('autotabs');
 
+      var activeId = null;
+
       $(self.options.levels, self.$el).each(function(i) {
         var $level = $(this),
             id = $level.prop('id') ? $level.prop('id') :
                  $level.parents(self.options.section).prop('id');
-        if (!id) {
+        if (!id || $('#' + id).length > 0) {
           id = self.options.IDPrefix + self.name + '-' + i;
         }
+        if(window.location.hash === '#' + id){
+          activeId = id;
+        }
         $('<a/>')
           .appendTo(self.$toc)
           .text($level.text())
           .attr('id', id)
           .attr('href', '#' + id)
           .addClass(self.options.classLevelPrefixName + self.getLevel($level))
-          .on('click', function(e, doScroll) {
+          .on('click', function(e, options) {
             e.stopPropagation();
             e.preventDefault();
+            if(!options){
+              options = {
+                doScroll: true,
+                skipHash: false
+              };
+            }
+            var $el = $(this);
             self.$toc.children('.' + self.options.classActiveName).removeClass(self.options.classActiveName);
             self.$el.children('.' + self.options.classActiveName).removeClass(self.options.classActiveName);
             $(e.target).addClass(self.options.classActiveName);
             $level.parents(self.options.section).addClass(self.options.classActiveName);
-            if (doScroll !== false &&
+            if (options.doScroll !== false &&
                 self.options.scrollDuration &&
                 $level &&
                 !asTabs) {
@@ -142,11 +154,22 @@ define([
               self.$el.trigger('resize.plone-modal.patterns');
             }
             $(this).trigger('clicked');
+            if(!options.skipHash){
+              window.location.hash = $el.attr('id');
+            }
           });
       });
 
-      self.$toc.find('a').first().trigger('click', false);
-
+      if(activeId){
+        $('a#' + activeId).trigger('click', {
+          doScroll: true,
+          skipHash: true
+        });
+      }else{
+        self.$toc.find('a').first().trigger('click', {
+          doScroll: false,
+          skipHash: true});
+      }
     },
     getLevel: function($el) {
       var elementLevel = 0;


