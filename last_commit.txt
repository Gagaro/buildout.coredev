Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/7e9f68d55e2cc9dff77d762157f27de2d4ee93c9

Uncomment zcml registration for filter-controlpanel, moved to CMFPlone

Files changed:
M plone/app/controlpanel/configure.zcml

diff --git a/plone/app/controlpanel/configure.zcml b/plone/app/controlpanel/configure.zcml
index f912564..7170829 100644
--- a/plone/app/controlpanel/configure.zcml
+++ b/plone/app/controlpanel/configure.zcml
@@ -6,21 +6,23 @@
   <include package="Products.CMFCore" />
 
   <include file="permissions.zcml" />
-
+<!--
   <adapter factory=".filter.FilterControlPanelAdapter" />
-
+ -->
   <adapter factory=".language.LanguageControlPanelAdapter" />
 
   <adapter factory=".ram.RAMCacheControlPanelAdapter" />
 
   <adapter factory=".skins.SkinsControlPanelAdapter" />
 
+<!--
   <browser:page
       name="filter-controlpanel"
       for="Products.CMFPlone.interfaces.IPloneSiteRoot"
       class=".filter.FilterControlPanel"
       permission="plone.app.controlpanel.Filtering"
       />
+ -->
 
   <browser:page
       name="language-controlpanel"


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/e8ee075d7bae332be22cce9937bd618426f452be

Use new widget identifiers

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index 2044305..4e48885 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -21,13 +21,13 @@ Viewing the search control panel
 
 Click the save button without making any changes:
 
-    >>> browser.getControl(name="form.actions.save").click()
+    >>> browser.getControl(name="form.buttons.apply").click()
     >>> browser.url.endswith('filter-controlpanel')
     True
 
 We should get a status message:
 
-    >>> 'Changes saved.' in browser.contents
+    >>> 'Data successfully updated.' in browser.contents
     True
 
 Now click the cancel button:
@@ -112,7 +112,7 @@ Add a new nasty tag
 
     >>> browser.getControl("Add Nasty tags").click()
     >>> browser.getControl(name="form.nasty_tags.6.").value = "span"
-    >>> browser.getControl(name="form.actions.save").click()
+    >>> browser.getControl(name="form.buttons.apply").click()
     >>> print_all_of('nasty_tags')
     applet
     embed
@@ -130,7 +130,7 @@ Adding span to nasty tags should have automatically removed it from the valid ta
 Changing a permitted style:
 
     >>> browser.getControl(name="form.style_whitelist.2.").value = "color"
-    >>> browser.getControl(name="form.actions.save").click()
+    >>> browser.getControl(name="form.buttons.apply").click()
     >>> print_all_of('style_whitelist')
     text-align
     list-style-type
@@ -159,8 +159,8 @@ Try disabling safe html transform
 ---------------------------------
 
     >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-    >>> browser.getControl(name="form.disable_filtering").value = True
-    >>> browser.getControl(name="form.actions.save").click()
+    >>> browser.getControl(name="form.widgets.disable_filtering").value = True
+    >>> browser.getControl(name="form.buttons.apply").click()
     >>> safe_html._config['disable_transform']
     1
 
@@ -168,7 +168,7 @@ and re-enable
 
     >>> browser.open('http://nohost/plone/@@filter-controlpanel')
     >>> browser.getControl(name="form.disable_filtering").value = False
-    >>> browser.getControl(name="form.actions.save").click()
+    >>> browser.getControl(name="form.buttons.apply").click()
     >>> safe_html._config['disable_transform']
     0
 


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/eea280882d57e07e21f378a751c314c535e9a230

Cancel button was removed

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index 4e48885..f0c48ad 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -30,17 +30,6 @@ We should get a status message:
     >>> 'Data successfully updated.' in browser.contents
     True
 
-Now click the cancel button:
-
-    >>> browser.getControl(name="form.actions.cancel").click()
-    >>> browser.url.endswith('plone_control_panel')
-    True
-
-There should be still no changes:
-
-    >>> 'Changes canceled.' in browser.contents
-    True
-
 Look at the defaults
 --------------------
 


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/88ba48a1d840bfdfe550e393dd04fff78e1bf466

Fix print_all_of method in test

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index f0c48ad..c22f375 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -36,12 +36,12 @@ Look at the defaults
     >>> browser.open('http://nohost/plone/@@filter-controlpanel')
 
     >>> def print_all_of(fieldname):
-    ...     for i in xrange(sys.maxint):
-    ...         key = 'form.%s.%s.' % (fieldname, i)
-    ...         try:
-    ...             print browser.getControl(name=key).value
-    ...         except LookupError, e:
-    ...             break
+    ...     try:
+    ...         valuestring = browser.getControl(name='form.widgets.%s' % fieldname).value
+    ...     except LookupError:  # no such control
+    ...         valuestring = ''
+    ...     for value in [v for v in valuestring.split('\r\n') if v]:  # print non-empty only
+    ...         print value
 
     >>> print_all_of('nasty_tags')
     applet


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/b51411e4c5951f9507a46424d1532c51f2dce3c2

Make clicking a checkbox work

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index c22f375..eb4ff27 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -148,7 +148,11 @@ Try disabling safe html transform
 ---------------------------------
 
     >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-    >>> browser.getControl(name="form.widgets.disable_filtering").value = True
+    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
+    []
+    >>> browser.getControl(name="form.widgets.disable_filtering:list").controls[0].click()
+    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
+    ['selected']
     >>> browser.getControl(name="form.buttons.apply").click()
     >>> safe_html._config['disable_transform']
     1
@@ -156,7 +160,11 @@ Try disabling safe html transform
 and re-enable
 
     >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-    >>> browser.getControl(name="form.disable_filtering").value = False
+    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
+    ['selected']
+    >>> browser.getControl(name="form.widgets.disable_filtering:list").controls[0].click()
+    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
+    []
     >>> browser.getControl(name="form.buttons.apply").click()
     >>> safe_html._config['disable_transform']
     0


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/e464482d6024547753de1dbf3ad885a063045100

Fix way to add/replace tags

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index eb4ff27..96cb208 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -99,17 +99,11 @@ Changing some values
 
 Add a new nasty tag
 
-    >>> browser.getControl("Add Nasty tags").click()
-    >>> browser.getControl(name="form.nasty_tags.6.").value = "span"
+    >>> nasty_tags = browser.getControl(name="form.widgets.nasty_tags").value
+    >>> browser.getControl(name="form.widgets.nasty_tags").value = nasty_tags + '\r\rspan'
     >>> browser.getControl(name="form.buttons.apply").click()
-    >>> print_all_of('nasty_tags')
-    applet
-    embed
-    meta
-    object
-    script
-    span
-    style
+    >>> 'span' in browser.getControl(name="form.widgets.nasty_tags").value
+    True
 
     >>> print sorted(safe_html._config['nasty_tags'])
     [u'applet', u'embed', u'meta', u'object', u'script', u'span', u'style']
@@ -118,7 +112,8 @@ Adding span to nasty tags should have automatically removed it from the valid ta
 
 Changing a permitted style:
 
-    >>> browser.getControl(name="form.style_whitelist.2.").value = "color"
+    >>> style_whitelist = browser.getControl(name="form.widgets.style_whitelist").value
+    >>> browser.getControl(name="form.widgets.style_whitelist").value = style_whitelist.replace('float', 'color')
     >>> browser.getControl(name="form.buttons.apply").click()
     >>> print_all_of('style_whitelist')
     text-align


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/9058c402d2d3267126eabec771c0599acc7fa895

Revert "Use new widget identifiers"

This reverts commit 53d36788c4b69a4724f04081f483382812d913a2.

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index 96cb208..7a3e9d1 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -21,13 +21,13 @@ Viewing the search control panel
 
 Click the save button without making any changes:
 
-    >>> browser.getControl(name="form.buttons.apply").click()
+    >>> browser.getControl(name="form.buttons.save").click()
     >>> browser.url.endswith('filter-controlpanel')
     True
 
 We should get a status message:
 
-    >>> 'Data successfully updated.' in browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 Look at the defaults
@@ -46,36 +46,15 @@ Look at the defaults
     >>> print_all_of('nasty_tags')
     applet
     embed
-    meta
     object
     script
-    style
 
     >>> print_all_of('stripped_tags')
-    button
-    fieldset
-    form
-    input
-    label
-    legend
-    link
-    noscript
-    object
-    optgroup
-    option
-    param
-    script
-    select
-    style
-    textarea
+    font
 
     >>> print_all_of('custom_tags')
-    article
-    aside
-    audio
-    ...
-
     >>> print_all_of('stripped_attributes')
+    dir
     lang
     valign
     halign
@@ -91,7 +70,7 @@ Look at the defaults
     text-align
     list-style-type
     float
-    padding-left
+    text-decoration
     >>> print_all_of('class_whitelist')
 
 Changing some values
@@ -100,8 +79,8 @@ Changing some values
 Add a new nasty tag
 
     >>> nasty_tags = browser.getControl(name="form.widgets.nasty_tags").value
-    >>> browser.getControl(name="form.widgets.nasty_tags").value = nasty_tags + '\r\rspan'
-    >>> browser.getControl(name="form.buttons.apply").click()
+    >>> browser.getControl(name="form.widgets.nasty_tags").value = nasty_tags + '\r\nspan'
+    >>> browser.getControl(name="form.buttons.save").click()
     >>> 'span' in browser.getControl(name="form.widgets.nasty_tags").value
     True
 
@@ -114,12 +93,12 @@ Changing a permitted style:
 
     >>> style_whitelist = browser.getControl(name="form.widgets.style_whitelist").value
     >>> browser.getControl(name="form.widgets.style_whitelist").value = style_whitelist.replace('float', 'color')
-    >>> browser.getControl(name="form.buttons.apply").click()
+    >>> browser.getControl(name="form.buttons.save").click()
     >>> print_all_of('style_whitelist')
     text-align
     list-style-type
     color
-    padding-left
+    text-decoration
 
 Check that the filtering works
 ------------------------------
@@ -148,7 +127,7 @@ Try disabling safe html transform
     >>> browser.getControl(name="form.widgets.disable_filtering:list").controls[0].click()
     >>> browser.getControl(name="form.widgets.disable_filtering:list").value
     ['selected']
-    >>> browser.getControl(name="form.buttons.apply").click()
+    >>> browser.getControl(name="form.buttons.save").click()
     >>> safe_html._config['disable_transform']
     1
 
@@ -160,7 +139,7 @@ and re-enable
     >>> browser.getControl(name="form.widgets.disable_filtering:list").controls[0].click()
     >>> browser.getControl(name="form.widgets.disable_filtering:list").value
     []
-    >>> browser.getControl(name="form.buttons.apply").click()
+    >>> browser.getControl(name="form.buttons.save").click()
     >>> safe_html._config['disable_transform']
     0
 


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T11:50:31+01:00
Author: Kees Hink (khink) <keeshink@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/bb2ed50a2126eea53e7e992d1e7d7726297222f3

Style and meta are allowed

Files changed:
M plone/app/controlpanel/tests/filter.txt

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
index 7a3e9d1..d544f51 100644
--- a/plone/app/controlpanel/tests/filter.txt
+++ b/plone/app/controlpanel/tests/filter.txt
@@ -85,7 +85,7 @@ Add a new nasty tag
     True
 
     >>> print sorted(safe_html._config['nasty_tags'])
-    [u'applet', u'embed', u'meta', u'object', u'script', u'span', u'style']
+    [u'applet', u'embed', u'object', u'script', u'span']
 
 Adding span to nasty tags should have automatically removed it from the valid tags.
 


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T19:46:13+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/d4b8408a00d5a669744d0a3a348a382437453adf

Remove filter control panel tests that have been moved and refactored to CMFPlone.

Files changed:
D plone/app/controlpanel/tests/filter.txt
D plone/app/controlpanel/tests/test_doctests.py

diff --git a/plone/app/controlpanel/tests/filter.txt b/plone/app/controlpanel/tests/filter.txt
deleted file mode 100644
index d544f51..0000000
--- a/plone/app/controlpanel/tests/filter.txt
+++ /dev/null
@@ -1,151 +0,0 @@
-Filter control panel
-====================
-
-First some initial setup code:
-
-    >>> import sys
-    >>> from zope.component import getUtility
-    >>> from Products.PortalTransforms.interfaces import IPortalTransformsTool
-    >>> from Products.CMFCore.utils import getToolByName
-
-    >>> browser = self.browser
-    >>> safe_html = getUtility(IPortalTransformsTool).safe_html
-    >>> self.loginAsManager()
-
-Viewing the search control panel
---------------------------------
-
-    >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-    >>> browser.url.endswith('filter-controlpanel')
-    True
-
-Click the save button without making any changes:
-
-    >>> browser.getControl(name="form.buttons.save").click()
-    >>> browser.url.endswith('filter-controlpanel')
-    True
-
-We should get a status message:
-
-    >>> 'Changes saved.' in browser.contents
-    True
-
-Look at the defaults
---------------------
-
-    >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-
-    >>> def print_all_of(fieldname):
-    ...     try:
-    ...         valuestring = browser.getControl(name='form.widgets.%s' % fieldname).value
-    ...     except LookupError:  # no such control
-    ...         valuestring = ''
-    ...     for value in [v for v in valuestring.split('\r\n') if v]:  # print non-empty only
-    ...         print value
-
-    >>> print_all_of('nasty_tags')
-    applet
-    embed
-    object
-    script
-
-    >>> print_all_of('stripped_tags')
-    font
-
-    >>> print_all_of('custom_tags')
-    >>> print_all_of('stripped_attributes')
-    dir
-    lang
-    valign
-    halign
-    border
-    frame
-    rules
-    cellspacing
-    cellpadding
-    bgcolor
-
-    >>> print_all_of('stripped_combinations')
-    >>> print_all_of('style_whitelist')
-    text-align
-    list-style-type
-    float
-    text-decoration
-    >>> print_all_of('class_whitelist')
-
-Changing some values
---------------------
-
-Add a new nasty tag
-
-    >>> nasty_tags = browser.getControl(name="form.widgets.nasty_tags").value
-    >>> browser.getControl(name="form.widgets.nasty_tags").value = nasty_tags + '\r\nspan'
-    >>> browser.getControl(name="form.buttons.save").click()
-    >>> 'span' in browser.getControl(name="form.widgets.nasty_tags").value
-    True
-
-    >>> print sorted(safe_html._config['nasty_tags'])
-    [u'applet', u'embed', u'object', u'script', u'span']
-
-Adding span to nasty tags should have automatically removed it from the valid tags.
-
-Changing a permitted style:
-
-    >>> style_whitelist = browser.getControl(name="form.widgets.style_whitelist").value
-    >>> browser.getControl(name="form.widgets.style_whitelist").value = style_whitelist.replace('float', 'color')
-    >>> browser.getControl(name="form.buttons.save").click()
-    >>> print_all_of('style_whitelist')
-    text-align
-    list-style-type
-    color
-    text-decoration
-
-Check that the filtering works
-------------------------------
-
-    >>> browser.open('http://nohost/plone/Members')
-    >>> browser.getLink('Add new').click()
-    >>> 'Add new item' in browser.contents
-    True
-    >>> browser.getControl('Page').click()
-    >>> browser.getControl('Add').click()
-    >>> browser.getControl(name='text').value = \
-    ... '<p>Testing that<span> tag and its contents get stripped</span> works.</p>'
-    >>> browser.getControl('Title').value = 'My Page'
-    >>> browser.getControl('Save').click()
-    >>> 'Changes saved.' in browser.contents
-    True
-    >>> 'My Page' in browser.contents
-    True
-
-Try disabling safe html transform
----------------------------------
-
-    >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
-    []
-    >>> browser.getControl(name="form.widgets.disable_filtering:list").controls[0].click()
-    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
-    ['selected']
-    >>> browser.getControl(name="form.buttons.save").click()
-    >>> safe_html._config['disable_transform']
-    1
-
-and re-enable
-
-    >>> browser.open('http://nohost/plone/@@filter-controlpanel')
-    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
-    ['selected']
-    >>> browser.getControl(name="form.widgets.disable_filtering:list").controls[0].click()
-    >>> browser.getControl(name="form.widgets.disable_filtering:list").value
-    []
-    >>> browser.getControl(name="form.buttons.save").click()
-    >>> safe_html._config['disable_transform']
-    0
-
-Must use print here to take advantage of whitespace folding
-(whitespace in the body text may vary depending on the tidy_html transform).
-
-    >>> browser.open('http://nohost/plone/Members/my-page')
-    >>> '<p>Testing that works.</p>' in browser.contents
-    True
diff --git a/plone/app/controlpanel/tests/test_doctests.py b/plone/app/controlpanel/tests/test_doctests.py
deleted file mode 100644
index eb352f5..0000000
--- a/plone/app/controlpanel/tests/test_doctests.py
+++ /dev/null
@@ -1,27 +0,0 @@
-import doctest
-from unittest import TestSuite
-
-from Products.PloneTestCase.PloneTestCase import setupPloneSite
-from Testing.ZopeTestCase import FunctionalDocFileSuite
-
-from plone.app.controlpanel.tests.cptc import ControlPanelTestCase
-
-setupPloneSite()
-
-OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
-
-
-def test_suite():
-    tests = [
-        'filter.txt',
-    ]
-    suite = TestSuite()
-
-    for test in tests:
-        suite.addTest(FunctionalDocFileSuite(
-            test,
-            optionflags=OPTIONFLAGS,
-            package="plone.app.controlpanel.tests",
-            test_class=ControlPanelTestCase))
-
-    return suite


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T20:09:57+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/30ae912e682814fee178c9fb0304999b119e392d

Move tests to user plone.app.testing. We basically manually merge the work from tomgross here.

Files changed:
M plone/app/controlpanel/tests/cptc.py
M plone/app/controlpanel/tests/test_siteadmin_role.py

diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
index a92f407..f0cae38 100644
--- a/plone/app/controlpanel/tests/cptc.py
+++ b/plone/app/controlpanel/tests/cptc.py
@@ -2,68 +2,136 @@
 """Base class for control panel test cases.
 
 This is in a separate module because it's potentially useful to other
-packages which register controlpanels. They should be able to import it
-without the PloneTestCase.setupPloneSite() side effects.
+packages which register controlpanels.
 """
 
 import re
+import transaction
 
-from Products.PloneTestCase.PloneTestCase import FunctionalTestCase
-from Products.PloneTestCase.PloneTestCase import portal_owner, default_password
-from Products.Five.testbrowser import Browser
+from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
+from plone.app.testing.bbb import PloneTestCaseFixture
+from plone.app import testing
 from Products.CMFCore.utils import getToolByName
 
 
-class FakeRequest(object):
+# utiltiy methods
+#
+def simplify_white_space(text):
+    """For easier testing we replace all white space with one space.
 
-    SERVER_URL = 'http://nohost/plone'
-    environ = {}
+    And we remove white space around '<' and '>'.
 
+    So this:
 
-class ControlPanelTestCase(FunctionalTestCase):
-    """base test case with convenience methods for all control panel tests"""
-
-    def afterSetUp(self):
-        super(ControlPanelTestCase, self).afterSetUp()
-
-        self.browser = Browser()
+      <p
+          id="foo"> Bar
+      </p>
 
-        self.uf = self.portal.acl_users
-        self.uf.userFolderAddUser('root', 'secret', ['Manager'], [])
+    becomes this:
 
-        self.ptool = getToolByName(self.portal, 'portal_properties')
-        self.site_props = self.ptool.site_properties
-
-        self.fake_request = FakeRequest()
+      <p id="foo">Bar</p>
+    """
+    text = re.sub('\s*<\s*', '<', text)
+    text = re.sub('\s*>\s*', '>', text)
+    text = re.sub('\s+', ' ', text)
+    return text
+
+
+def generateGroups(portal):
+    groupsTool = getToolByName(portal, 'portal_groups')
+    groupsTool.addGroup('group1', [], [], title="Group 1")
+    groupsTool.addGroup('group2', [], [], title="Group 2")
+    groupsTool.addGroup('group3', [], [], title="Group 3 accentué")
+
+
+def generateUsers(portal):
+    members = [{'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
+               {'username': 'enTHXigm', 'fullname': 'Richard Ramirez', 'email': 'enTHXigm@example.com'},
+               {'username': 'q7UsYcrT', 'fullname': 'Kyle Brown', 'email': 'q7UsYcrT@example.com'},
+               {'username': 'j5g0xPmr', 'fullname': 'Julian Green', 'email': 'j5g0xPmr@example.com'},
+               {'username': 'o6Sx4It3', 'fullname': 'Makayla Coleman', 'email': 'o6Sx4It3@example.com'},
+               {'username': 'SLUhquYa', 'fullname': 'Sean Foster', 'email': 'SLUhquYa@example.com'},
+               {'username': 'nHWl3Ita', 'fullname': 'Molly Martin', 'email': 'nHWl3Ita@example.com'},
+               {'username': 'xdkpCKmX', 'fullname': 'Jordan Thompson', 'email': 'xdkpCKmX@example.com'},
+               {'username': 'p8H6CicB', 'fullname': 'Tyler Rivera', 'email': 'p8H6CicB@example.com'},
+               {'username': 'T6vdBXbD', 'fullname': 'Megan Murphy', 'email': 'T6vdBXbD@example.com'},
+               {'username': 'DohPmgIa', 'fullname': 'Gracie Diaz', 'email': 'DohPmgIa@example.com'},
+               {'username': 'CqHWi65B', 'fullname': 'Rachel Morgan', 'email': 'CqHWi65B@example.com'},
+               {'username': 'uHFQ7qk4', 'fullname': 'Maya Price', 'email': 'uHFQ7qk4@example.com'},
+               {'username': 'BlXLQh7r', 'fullname': 'Blake Jenkins', 'email': 'BlXLQh7r@example.com'},
+               {'username': 'FCrWUiSY', 'fullname': 'Owen Ramirez', 'email': 'FCrWUiSY@example.com'},
+               {'username': 'bX3PqgHK', 'fullname': 'Owen Cook', 'email': 'bX3PqgHK@example.com'},
+               {'username': 'sD35vVl0', 'fullname': 'Jayden Hill', 'email': 'sD35vVl0@example.com'},
+               {'username': 'mfOcjXAG', 'fullname': 'Joseph Ramirez', 'email': 'mfOcjXAG@example.com'},
+               {'username': 'GAJtdYbM', 'fullname': 'Nathan Young', 'email': 'GAJtdYbM@example.com'},
+               {'username': 'E1OWG6bv', 'fullname': 'Kaitlyn Hernandez', 'email': 'E1OWG6bv@example.com'},
+               {'username': 'BqOX2sCm', 'fullname': 'Faith Price', 'email': 'BqOX2sCm@example.com'},
+               {'username': 'tyOxRnml', 'fullname': 'Sofia Williams', 'email': '5yOxRjtl@example.com'},
+               {'username': 'fVcumDNl', 'fullname': 'David Sanders', 'email': 'fVcumDNl@example.com'},
+               {'username': 'Ge1hqdEI', 'fullname': 'Jack Simmons', 'email': 'Ge1hqdEI@example.com'},
+               {'username': 'o2CqT7kG', 'fullname': 'Cole Howard', 'email': 'o2CqT7kG@example.com'},
+               {'username': 'mpGtfNl6', 'fullname': 'Rachel Miller', 'email': 'mpGtfNl6@example.com'},
+               {'username': 'RGrpWiBg', 'fullname': 'Henry Patterson', 'email': 'RGrpWiBg@example.com'},
+               {'username': 'Bufmi0YS', 'fullname': 'Avery Cooper', 'email': 'Bufmi0YS@example.com'},
+               {'username': 'J7NvbjYd', 'fullname': 'Sydney Bennett', 'email': 'J7NvbjYd@example.com'},
+               {'username': 'u5Xem8U1', 'fullname': 'Daniel Johnson', 'email': 'u5Xem8U1@example.com'},
+               {'username': 'TWrMCLIo', 'fullname': 'Autumn Brooks', 'email': '0VrMCLIo@example.com'},
+               {'username': 'FElYwiIr', 'fullname': 'Alexandra Nelson', 'email': 'FElYwiIr@example.com'},
+               {'username': 'teK6pkhc', 'fullname': 'Brian Simmons', 'email': '0eK6pkhc@example.com'},
+               {'username': 'RwAO2YPa', 'fullname': 'Gracie Adams', 'email': 'gracie@example.com'},
+               {'username': 'nlBMw26i', 'fullname': 'Sydney Evans', 'email': 'nlBMw26i@example.com'},
+               {'username': 'Ahr3EiRC', 'fullname': 'Emma Brown', 'email': 'Ahr3EiRC@example.com'},
+               {'username': 'NhuU0Y5x', 'fullname': 'Lauren Martin', 'email': 'NhuU0Y5x@example.com'},
+               {'username': 'j2R3mKQg', 'fullname': 'Isabelle Russell', 'email': 'j2R3mKQg@example.com'},
+               {'username': 'qOmK0iCN', 'fullname': 'Anna Baker', 'email': 'qOmK0iCN@example.com'},
+               {'username': 'uQbVOgo7', 'fullname': 'Brady Watson', 'email': 'uQbVOgo7@example.com'},
+               {'username': 'oLDCaQfW', 'fullname': 'Kaitlyn Robinson', 'email': 'oLDCaQfW@example.com'},
+               {'username': 'osYHeFD1', 'fullname': 'Riley Richardson', 'email': 'osYHeFD1@example.com'},
+               {'username': 'i4pHduDY', 'fullname': 'Kayla Sanders', 'email': 'i4pHduDY@example.com'},
+               {'username': 'BvyX6qF3', 'fullname': 'Sara Richardson', 'email': 'BvyX6qF3@example.com'},
+               {'username': 'a3EpwDYj', 'fullname': 'Trinity Gonzales', 'email': 'a3EpwDYj@example.com'},
+               {'username': 'JDMseWdt', 'fullname': 'Madeline Garcia', 'email': 'JDMseWdt@example.com'},
+               {'username': 'lPCYBvoi', 'fullname': 'Brian Gray', 'email': 'lPCYBvoi@example.com'},
+               {'username': 'AByCsRQ3', 'fullname': 'Victoria Perez', 'email': 'AByCsRQ3@example.com'},
+               {'username': 'CH7uVlNy', 'fullname': 'Charles Rodriguez', 'email': '5H7uVlNy@example.com'},
+               {'username': 'XYsmd7ux', 'fullname': 'Abigail Simmons', 'email': 'XYsmd7ux@example.com'},
+               {'username': 'DfaA1wqC3', 'fullname': 'Émilie Richard', 'email': 'DfaA1wqC3@example.com'},
+               {'username': 'NP4FMIb5', 'email': 'NP4FMIb5@example.com'}]
+
+    regtool = getToolByName(portal, 'portal_registration')
+    for member in members:
+        regtool.addMember(member['username'], 'somepassword', properties=member)
+
+
+def generate_user_and_groups(portal):
+    generateUsers(portal)
+    generateGroups(portal)
+    transaction.commit()
+
+
+# Test fixures
+#
+class ControlPanelFixture(PloneTestCaseFixture):
+
+    def setUpPloneSite(self, portal):
+        super(ControlPanelFixture, self).setUpPloneSite(portal)
+        portal.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
+
+
+CP_FIXTURE = ControlPanelFixture()
+CP_FUNCTIONAL_LAYER = testing.FunctionalTesting(
+    bases=(CP_FIXTURE,), name='ControlPanel:Functional')
+
+
+# Test cases
+#
+class ControlPanelTestCase(FunctionalTestCase):
+    """base test case with convenience methods for all control panel tests"""
 
-    def loginAsManager(self, user='root', pwd='secret'):
-        """points the browser to the login screen and logs in as user root
-           with Manager role."""
-        self.browser.open('http://nohost/plone/')
-        self.browser.getLink('Log in').click()
-        self.browser.getControl('Login Name').value = user
-        self.browser.getControl('Password').value = pwd
-        self.browser.getControl('Log in').click()
+    layer = CP_FUNCTIONAL_LAYER
 
     def simplify_white_space(self, text):
-        """For easier testing we replace all white space with one space.
-
-        And we remove white space around '<' and '>'.
-
-        So this:
-
-          <p
-              id="foo"> Bar
-          </p>
-
-        becomes this:
-
-          <p id="foo">Bar</p>
-        """
-        text = re.sub('\s*<\s*', '<', text)
-        text = re.sub('\s*>\s*', '>', text)
-        text = re.sub('\s+', ' ', text)
-        return text
+        return simplify_white_space(text)
 
 
 class UserGroupsControlPanelTestCase(ControlPanelTestCase):
@@ -71,91 +139,4 @@ class UserGroupsControlPanelTestCase(ControlPanelTestCase):
 
     def afterSetUp(self):
         super(UserGroupsControlPanelTestCase, self).afterSetUp()
-        self.generateUsers()
-        self.generateGroups()
-
-    def generateGroups(self):
-        groupsTool = getToolByName(self.portal, 'portal_groups')
-        groupsTool.addGroup('group1', [], [], title="Group 1")
-        groupsTool.addGroup('group2', [], [], title="Group 2")
-        groupsTool.addGroup('group3', [], [], title="Group 3 accentué")
-
-    def generateUsers(self):
-        members = [{'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
-                   {'username': 'enTHXigm', 'fullname': 'Richard Ramirez', 'email': 'enTHXigm@example.com'},
-                   {'username': 'q7UsYcrT', 'fullname': 'Kyle Brown', 'email': 'q7UsYcrT@example.com'},
-                   {'username': 'j5g0xPmr', 'fullname': 'Julian Green', 'email': 'j5g0xPmr@example.com'},
-                   {'username': 'o6Sx4It3', 'fullname': 'Makayla Coleman', 'email': 'o6Sx4It3@example.com'},
-                   {'username': 'SLUhquYa', 'fullname': 'Sean Foster', 'email': 'SLUhquYa@example.com'},
-                   {'username': 'nHWl3Ita', 'fullname': 'Molly Martin', 'email': 'nHWl3Ita@example.com'},
-                   {'username': 'xdkpCKmX', 'fullname': 'Jordan Thompson', 'email': 'xdkpCKmX@example.com'},
-                   {'username': 'p8H6CicB', 'fullname': 'Tyler Rivera', 'email': 'p8H6CicB@example.com'},
-                   {'username': 'T6vdBXbD', 'fullname': 'Megan Murphy', 'email': 'T6vdBXbD@example.com'},
-                   {'username': 'DohPmgIa', 'fullname': 'Gracie Diaz', 'email': 'DohPmgIa@example.com'},
-                   {'username': 'CqHWi65B', 'fullname': 'Rachel Morgan', 'email': 'CqHWi65B@example.com'},
-                   {'username': 'uHFQ7qk4', 'fullname': 'Maya Price', 'email': 'uHFQ7qk4@example.com'},
-                   {'username': 'BlXLQh7r', 'fullname': 'Blake Jenkins', 'email': 'BlXLQh7r@example.com'},
-                   {'username': 'FCrWUiSY', 'fullname': 'Owen Ramirez', 'email': 'FCrWUiSY@example.com'},
-                   {'username': 'bX3PqgHK', 'fullname': 'Owen Cook', 'email': 'bX3PqgHK@example.com'},
-                   {'username': 'sD35vVl0', 'fullname': 'Jayden Hill', 'email': 'sD35vVl0@example.com'},
-                   {'username': 'mfOcjXAG', 'fullname': 'Joseph Ramirez', 'email': 'mfOcjXAG@example.com'},
-                   {'username': 'GAJtdYbM', 'fullname': 'Nathan Young', 'email': 'GAJtdYbM@example.com'},
-                   {'username': 'E1OWG6bv', 'fullname': 'Kaitlyn Hernandez', 'email': 'E1OWG6bv@example.com'},
-                   {'username': 'BqOX2sCm', 'fullname': 'Faith Price', 'email': 'BqOX2sCm@example.com'},
-                   {'username': 'tyOxRnml', 'fullname': 'Sofia Williams', 'email': '5yOxRjtl@example.com'},
-                   {'username': 'fVcumDNl', 'fullname': 'David Sanders', 'email': 'fVcumDNl@example.com'},
-                   {'username': 'Ge1hqdEI', 'fullname': 'Jack Simmons', 'email': 'Ge1hqdEI@example.com'},
-                   {'username': 'o2CqT7kG', 'fullname': 'Cole Howard', 'email': 'o2CqT7kG@example.com'},
-                   {'username': 'mpGtfNl6', 'fullname': 'Rachel Miller', 'email': 'mpGtfNl6@example.com'},
-                   {'username': 'RGrpWiBg', 'fullname': 'Henry Patterson', 'email': 'RGrpWiBg@example.com'},
-                   {'username': 'Bufmi0YS', 'fullname': 'Avery Cooper', 'email': 'Bufmi0YS@example.com'},
-                   {'username': 'J7NvbjYd', 'fullname': 'Sydney Bennett', 'email': 'J7NvbjYd@example.com'},
-                   {'username': 'u5Xem8U1', 'fullname': 'Daniel Johnson', 'email': 'u5Xem8U1@example.com'},
-                   {'username': 'TWrMCLIo', 'fullname': 'Autumn Brooks', 'email': '0VrMCLIo@example.com'},
-                   {'username': 'FElYwiIr', 'fullname': 'Alexandra Nelson', 'email': 'FElYwiIr@example.com'},
-                   {'username': 'teK6pkhc', 'fullname': 'Brian Simmons', 'email': '0eK6pkhc@example.com'},
-                   {'username': 'RwAO2YPa', 'fullname': 'Gracie Adams', 'email': 'gracie@example.com'},
-                   {'username': 'nlBMw26i', 'fullname': 'Sydney Evans', 'email': 'nlBMw26i@example.com'},
-                   {'username': 'Ahr3EiRC', 'fullname': 'Emma Brown', 'email': 'Ahr3EiRC@example.com'},
-                   {'username': 'NhuU0Y5x', 'fullname': 'Lauren Martin', 'email': 'NhuU0Y5x@example.com'},
-                   {'username': 'j2R3mKQg', 'fullname': 'Isabelle Russell', 'email': 'j2R3mKQg@example.com'},
-                   {'username': 'qOmK0iCN', 'fullname': 'Anna Baker', 'email': 'qOmK0iCN@example.com'},
-                   {'username': 'uQbVOgo7', 'fullname': 'Brady Watson', 'email': 'uQbVOgo7@example.com'},
-                   {'username': 'oLDCaQfW', 'fullname': 'Kaitlyn Robinson', 'email': 'oLDCaQfW@example.com'},
-                   {'username': 'osYHeFD1', 'fullname': 'Riley Richardson', 'email': 'osYHeFD1@example.com'},
-                   {'username': 'i4pHduDY', 'fullname': 'Kayla Sanders', 'email': 'i4pHduDY@example.com'},
-                   {'username': 'BvyX6qF3', 'fullname': 'Sara Richardson', 'email': 'BvyX6qF3@example.com'},
-                   {'username': 'a3EpwDYj', 'fullname': 'Trinity Gonzales', 'email': 'a3EpwDYj@example.com'},
-                   {'username': 'JDMseWdt', 'fullname': 'Madeline Garcia', 'email': 'JDMseWdt@example.com'},
-                   {'username': 'lPCYBvoi', 'fullname': 'Brian Gray', 'email': 'lPCYBvoi@example.com'},
-                   {'username': 'AByCsRQ3', 'fullname': 'Victoria Perez', 'email': 'AByCsRQ3@example.com'},
-                   {'username': 'CH7uVlNy', 'fullname': 'Charles Rodriguez', 'email': '5H7uVlNy@example.com'},
-                   {'username': 'XYsmd7ux', 'fullname': 'Abigail Simmons', 'email': 'XYsmd7ux@example.com'},
-                   {'username': 'DfaA1wqC3', 'fullname': 'Émilie Richard', 'email': 'DfaA1wqC3@example.com'},
-                   {'username': 'NP4FMIb5', 'email': 'NP4FMIb5@example.com'}]
-
-        regtool = getToolByName(self.portal, 'portal_registration')
-        for member in members:
-            regtool.addMember(member['username'], 'somepassword', properties=member)
-
-
-class EmailLoginSecurityControlPanelTestCase(UserGroupsControlPanelTestCase):
-    """This switches on email as login.
-
-    Note that the afterSetUp of the UserGroupsControlPanelTestCase
-    creates several dozen users.  This might flush out a few bugs.
-    """
-
-    def afterSetUp(self):
-        super(EmailLoginSecurityControlPanelTestCase, self).afterSetUp()
-        from plone.app.controlpanel.security import migrate_to_email_login
-        migrate_to_email_login(self.portal)
-
-    def loginAsManager(self, user=portal_owner, pwd=default_password):
-        """points the browser to the login screen and logs in as user root with Manager role."""
-        self.browser.open('http://nohost/plone/')
-        self.browser.getLink('Log in').click()
-        #self.browser.getControl('Login Name').value = user
-        self.browser.getControl('E-mail').value = user
-        self.browser.getControl('Password').value = pwd
-        self.browser.getControl('Log in').click()
+        generate_user_and_groups(self.portal)
diff --git a/plone/app/controlpanel/tests/test_siteadmin_role.py b/plone/app/controlpanel/tests/test_siteadmin_role.py
index aceab7c..31c19cf 100644
--- a/plone/app/controlpanel/tests/test_siteadmin_role.py
+++ b/plone/app/controlpanel/tests/test_siteadmin_role.py
@@ -1,25 +1,23 @@
-import re
 from cStringIO import StringIO
 from urllib import urlencode
 from plone.app.controlpanel.tests.cptc import UserGroupsControlPanelTestCase
-from Products.PloneTestCase.PloneTestCase import setupPloneSite
-
-setupPloneSite()
+from plone.protect.authenticator import createToken
 
 
 class TestSiteAdministratorRoleFunctional(UserGroupsControlPanelTestCase):
 
+    def _getauth(self, userName):
+        self.login(userName)
+        return createToken()
+
     def afterSetUp(self):
         super(TestSiteAdministratorRoleFunctional, self).afterSetUp()
 
         # add a user with the Site Administrator role
         self.portal.portal_membership.addMember('siteadmin', 'secret', ['Site Administrator'], [])
 
-        token_re = re.compile(r'name="_authenticator" value="([^"]+)"')
-        res = self.publish('/plone/@@usergroup-userprefs', basic='root:secret')
-        self.manager_token = token_re.search(res.getOutput()).group(1)
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        self.siteadmin_token = token_re.search(res.getOutput()).group(1)
+        self.manager_token = self._getauth('root')
+        self.siteadmin_token = self._getauth('siteadmin')
 
         self.normal_user = 'DIispfuF'
 
@@ -262,8 +260,3 @@ def test_groups_overview_blocks_deleting_managers(self):
         group = self.portal.acl_users.getGroupById('Administrators')
         self.assertTrue(group is not None)
 
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestSiteAdministratorRoleFunctional))
-    return suite


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T20:16:30+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/ef38ed96993b7b1196e4bf00f75c1a3ed95b0d60

Remove unused code and tests.

Files changed:
M plone/app/controlpanel/tests/cptc.py
M plone/app/controlpanel/tests/test_siteadmin_role.py

diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
index f0cae38..2fab7f6 100644
--- a/plone/app/controlpanel/tests/cptc.py
+++ b/plone/app/controlpanel/tests/cptc.py
@@ -14,8 +14,6 @@
 from Products.CMFCore.utils import getToolByName
 
 
-# utiltiy methods
-#
 def simplify_white_space(text):
     """For easier testing we replace all white space with one space.
 
@@ -37,13 +35,6 @@ def simplify_white_space(text):
     return text
 
 
-def generateGroups(portal):
-    groupsTool = getToolByName(portal, 'portal_groups')
-    groupsTool.addGroup('group1', [], [], title="Group 1")
-    groupsTool.addGroup('group2', [], [], title="Group 2")
-    groupsTool.addGroup('group3', [], [], title="Group 3 accentué")
-
-
 def generateUsers(portal):
     members = [{'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
                {'username': 'enTHXigm', 'fullname': 'Richard Ramirez', 'email': 'enTHXigm@example.com'},
@@ -105,12 +96,9 @@ def generateUsers(portal):
 
 def generate_user_and_groups(portal):
     generateUsers(portal)
-    generateGroups(portal)
     transaction.commit()
 
 
-# Test fixures
-#
 class ControlPanelFixture(PloneTestCaseFixture):
 
     def setUpPloneSite(self, portal):
@@ -123,8 +111,6 @@ def setUpPloneSite(self, portal):
     bases=(CP_FIXTURE,), name='ControlPanel:Functional')
 
 
-# Test cases
-#
 class ControlPanelTestCase(FunctionalTestCase):
     """base test case with convenience methods for all control panel tests"""
 
diff --git a/plone/app/controlpanel/tests/test_siteadmin_role.py b/plone/app/controlpanel/tests/test_siteadmin_role.py
index 31c19cf..0f75ebd 100644
--- a/plone/app/controlpanel/tests/test_siteadmin_role.py
+++ b/plone/app/controlpanel/tests/test_siteadmin_role.py
@@ -31,7 +31,7 @@ def testControlPanelOverview(self):
 
     def testUserManagerRoleCheckboxIsDisabledForNonManagers(self):
         res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
+        contents = res.getOutput()
         self.assertTrue('<input type="checkbox" class="noborder" '
                         'name="users.roles:list:records" value="Manager" '
                         'disabled="disabled" />' in contents)


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T20:26:11+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/71ef61b61c81dfa1a97edcf7e2a82902593b48e7

Remove more unused code. We do not need PloneTestCase any longer.

Files changed:
M plone/app/controlpanel/tests/cptc.py
M setup.py

diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
index 2fab7f6..bc76950 100644
--- a/plone/app/controlpanel/tests/cptc.py
+++ b/plone/app/controlpanel/tests/cptc.py
@@ -35,70 +35,6 @@ def simplify_white_space(text):
     return text
 
 
-def generateUsers(portal):
-    members = [{'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
-               {'username': 'enTHXigm', 'fullname': 'Richard Ramirez', 'email': 'enTHXigm@example.com'},
-               {'username': 'q7UsYcrT', 'fullname': 'Kyle Brown', 'email': 'q7UsYcrT@example.com'},
-               {'username': 'j5g0xPmr', 'fullname': 'Julian Green', 'email': 'j5g0xPmr@example.com'},
-               {'username': 'o6Sx4It3', 'fullname': 'Makayla Coleman', 'email': 'o6Sx4It3@example.com'},
-               {'username': 'SLUhquYa', 'fullname': 'Sean Foster', 'email': 'SLUhquYa@example.com'},
-               {'username': 'nHWl3Ita', 'fullname': 'Molly Martin', 'email': 'nHWl3Ita@example.com'},
-               {'username': 'xdkpCKmX', 'fullname': 'Jordan Thompson', 'email': 'xdkpCKmX@example.com'},
-               {'username': 'p8H6CicB', 'fullname': 'Tyler Rivera', 'email': 'p8H6CicB@example.com'},
-               {'username': 'T6vdBXbD', 'fullname': 'Megan Murphy', 'email': 'T6vdBXbD@example.com'},
-               {'username': 'DohPmgIa', 'fullname': 'Gracie Diaz', 'email': 'DohPmgIa@example.com'},
-               {'username': 'CqHWi65B', 'fullname': 'Rachel Morgan', 'email': 'CqHWi65B@example.com'},
-               {'username': 'uHFQ7qk4', 'fullname': 'Maya Price', 'email': 'uHFQ7qk4@example.com'},
-               {'username': 'BlXLQh7r', 'fullname': 'Blake Jenkins', 'email': 'BlXLQh7r@example.com'},
-               {'username': 'FCrWUiSY', 'fullname': 'Owen Ramirez', 'email': 'FCrWUiSY@example.com'},
-               {'username': 'bX3PqgHK', 'fullname': 'Owen Cook', 'email': 'bX3PqgHK@example.com'},
-               {'username': 'sD35vVl0', 'fullname': 'Jayden Hill', 'email': 'sD35vVl0@example.com'},
-               {'username': 'mfOcjXAG', 'fullname': 'Joseph Ramirez', 'email': 'mfOcjXAG@example.com'},
-               {'username': 'GAJtdYbM', 'fullname': 'Nathan Young', 'email': 'GAJtdYbM@example.com'},
-               {'username': 'E1OWG6bv', 'fullname': 'Kaitlyn Hernandez', 'email': 'E1OWG6bv@example.com'},
-               {'username': 'BqOX2sCm', 'fullname': 'Faith Price', 'email': 'BqOX2sCm@example.com'},
-               {'username': 'tyOxRnml', 'fullname': 'Sofia Williams', 'email': '5yOxRjtl@example.com'},
-               {'username': 'fVcumDNl', 'fullname': 'David Sanders', 'email': 'fVcumDNl@example.com'},
-               {'username': 'Ge1hqdEI', 'fullname': 'Jack Simmons', 'email': 'Ge1hqdEI@example.com'},
-               {'username': 'o2CqT7kG', 'fullname': 'Cole Howard', 'email': 'o2CqT7kG@example.com'},
-               {'username': 'mpGtfNl6', 'fullname': 'Rachel Miller', 'email': 'mpGtfNl6@example.com'},
-               {'username': 'RGrpWiBg', 'fullname': 'Henry Patterson', 'email': 'RGrpWiBg@example.com'},
-               {'username': 'Bufmi0YS', 'fullname': 'Avery Cooper', 'email': 'Bufmi0YS@example.com'},
-               {'username': 'J7NvbjYd', 'fullname': 'Sydney Bennett', 'email': 'J7NvbjYd@example.com'},
-               {'username': 'u5Xem8U1', 'fullname': 'Daniel Johnson', 'email': 'u5Xem8U1@example.com'},
-               {'username': 'TWrMCLIo', 'fullname': 'Autumn Brooks', 'email': '0VrMCLIo@example.com'},
-               {'username': 'FElYwiIr', 'fullname': 'Alexandra Nelson', 'email': 'FElYwiIr@example.com'},
-               {'username': 'teK6pkhc', 'fullname': 'Brian Simmons', 'email': '0eK6pkhc@example.com'},
-               {'username': 'RwAO2YPa', 'fullname': 'Gracie Adams', 'email': 'gracie@example.com'},
-               {'username': 'nlBMw26i', 'fullname': 'Sydney Evans', 'email': 'nlBMw26i@example.com'},
-               {'username': 'Ahr3EiRC', 'fullname': 'Emma Brown', 'email': 'Ahr3EiRC@example.com'},
-               {'username': 'NhuU0Y5x', 'fullname': 'Lauren Martin', 'email': 'NhuU0Y5x@example.com'},
-               {'username': 'j2R3mKQg', 'fullname': 'Isabelle Russell', 'email': 'j2R3mKQg@example.com'},
-               {'username': 'qOmK0iCN', 'fullname': 'Anna Baker', 'email': 'qOmK0iCN@example.com'},
-               {'username': 'uQbVOgo7', 'fullname': 'Brady Watson', 'email': 'uQbVOgo7@example.com'},
-               {'username': 'oLDCaQfW', 'fullname': 'Kaitlyn Robinson', 'email': 'oLDCaQfW@example.com'},
-               {'username': 'osYHeFD1', 'fullname': 'Riley Richardson', 'email': 'osYHeFD1@example.com'},
-               {'username': 'i4pHduDY', 'fullname': 'Kayla Sanders', 'email': 'i4pHduDY@example.com'},
-               {'username': 'BvyX6qF3', 'fullname': 'Sara Richardson', 'email': 'BvyX6qF3@example.com'},
-               {'username': 'a3EpwDYj', 'fullname': 'Trinity Gonzales', 'email': 'a3EpwDYj@example.com'},
-               {'username': 'JDMseWdt', 'fullname': 'Madeline Garcia', 'email': 'JDMseWdt@example.com'},
-               {'username': 'lPCYBvoi', 'fullname': 'Brian Gray', 'email': 'lPCYBvoi@example.com'},
-               {'username': 'AByCsRQ3', 'fullname': 'Victoria Perez', 'email': 'AByCsRQ3@example.com'},
-               {'username': 'CH7uVlNy', 'fullname': 'Charles Rodriguez', 'email': '5H7uVlNy@example.com'},
-               {'username': 'XYsmd7ux', 'fullname': 'Abigail Simmons', 'email': 'XYsmd7ux@example.com'},
-               {'username': 'DfaA1wqC3', 'fullname': 'Émilie Richard', 'email': 'DfaA1wqC3@example.com'},
-               {'username': 'NP4FMIb5', 'email': 'NP4FMIb5@example.com'}]
-
-    regtool = getToolByName(portal, 'portal_registration')
-    for member in members:
-        regtool.addMember(member['username'], 'somepassword', properties=member)
-
-
-def generate_user_and_groups(portal):
-    generateUsers(portal)
-    transaction.commit()
-
-
 class ControlPanelFixture(PloneTestCaseFixture):
 
     def setUpPloneSite(self, portal):
@@ -125,4 +61,16 @@ class UserGroupsControlPanelTestCase(ControlPanelTestCase):
 
     def afterSetUp(self):
         super(UserGroupsControlPanelTestCase, self).afterSetUp()
-        generate_user_and_groups(self.portal)
+        members = [
+            {'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
+            {'username': 'NP4FMIb5', 'email': 'NP4FMIb5@example.com'}
+        ]
+        regtool = getToolByName(self.portal, 'portal_registration')
+        for member in members:
+            regtool.addMember(
+                member['username'],
+                'somepassword',
+                properties=member
+            )
+        transaction.commit()
+
diff --git a/setup.py b/setup.py
index a9a8ad7..0ed3a4a 100644
--- a/setup.py
+++ b/setup.py
@@ -58,7 +58,6 @@
       extras_require={
         'test': [
             'mock',
-            'Products.PloneTestCase',
             'plone.app.testing',
         ]
       }


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T20:32:13+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/09cb9ad4d907e89306277d016f2ed57410ffcec8

More cleanup.

Files changed:
M plone/app/controlpanel/tests/__init__.py
M plone/app/controlpanel/tests/cptc.py
M plone/app/controlpanel/tests/test_siteadmin_role.py

diff --git a/plone/app/controlpanel/tests/__init__.py b/plone/app/controlpanel/tests/__init__.py
index a388cec..e69de29 100644
--- a/plone/app/controlpanel/tests/__init__.py
+++ b/plone/app/controlpanel/tests/__init__.py
@@ -1,3 +0,0 @@
-# Other packages may find this useful
-
-from plone.app.controlpanel.tests.cptc import ControlPanelTestCase
\ No newline at end of file
diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
index bc76950..6f4c806 100644
--- a/plone/app/controlpanel/tests/cptc.py
+++ b/plone/app/controlpanel/tests/cptc.py
@@ -14,27 +14,6 @@
 from Products.CMFCore.utils import getToolByName
 
 
-def simplify_white_space(text):
-    """For easier testing we replace all white space with one space.
-
-    And we remove white space around '<' and '>'.
-
-    So this:
-
-      <p
-          id="foo"> Bar
-      </p>
-
-    becomes this:
-
-      <p id="foo">Bar</p>
-    """
-    text = re.sub('\s*<\s*', '<', text)
-    text = re.sub('\s*>\s*', '>', text)
-    text = re.sub('\s+', ' ', text)
-    return text
-
-
 class ControlPanelFixture(PloneTestCaseFixture):
 
     def setUpPloneSite(self, portal):
@@ -47,23 +26,19 @@ def setUpPloneSite(self, portal):
     bases=(CP_FIXTURE,), name='ControlPanel:Functional')
 
 
-class ControlPanelTestCase(FunctionalTestCase):
-    """base test case with convenience methods for all control panel tests"""
+class UserGroupsControlPanelTestCase(FunctionalTestCase):
+    """user/groups-specific test case"""
 
     layer = CP_FUNCTIONAL_LAYER
 
-    def simplify_white_space(self, text):
-        return simplify_white_space(text)
-
-
-class UserGroupsControlPanelTestCase(ControlPanelTestCase):
-    """user/groups-specific test case"""
-
     def afterSetUp(self):
         super(UserGroupsControlPanelTestCase, self).afterSetUp()
         members = [
-            {'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
-            {'username': 'NP4FMIb5', 'email': 'NP4FMIb5@example.com'}
+            {
+              'username': 'DIispfuF',
+              'fullname': 'Kevin Hughes',
+              'email': 'DIispfuF@example.com'
+            },
         ]
         regtool = getToolByName(self.portal, 'portal_registration')
         for member in members:
@@ -74,3 +49,22 @@ def afterSetUp(self):
             )
         transaction.commit()
 
+    def simplify_white_space(self, text):
+        """For easier testing we replace all white space with one space.
+
+        And we remove white space around '<' and '>'.
+
+        So this:
+
+          <p
+              id="foo"> Bar
+          </p>
+
+        becomes this:
+
+          <p id="foo">Bar</p>
+        """
+        text = re.sub('\s*<\s*', '<', text)
+        text = re.sub('\s*>\s*', '>', text)
+        text = re.sub('\s+', ' ', text)
+        return text
diff --git a/plone/app/controlpanel/tests/test_siteadmin_role.py b/plone/app/controlpanel/tests/test_siteadmin_role.py
index 0f75ebd..0664160 100644
--- a/plone/app/controlpanel/tests/test_siteadmin_role.py
+++ b/plone/app/controlpanel/tests/test_siteadmin_role.py
@@ -14,7 +14,12 @@ def afterSetUp(self):
         super(TestSiteAdministratorRoleFunctional, self).afterSetUp()
 
         # add a user with the Site Administrator role
-        self.portal.portal_membership.addMember('siteadmin', 'secret', ['Site Administrator'], [])
+        self.portal.portal_membership.addMember(
+            'siteadmin',
+            'secret',
+            ['Site Administrator'],
+            []
+        )
 
         self.manager_token = self._getauth('root')
         self.siteadmin_token = self._getauth('siteadmin')
@@ -26,11 +31,15 @@ def testControlPanelOverview(self):
         # at both old and new URLs
         res = self.publish('/plone/plone_control_panel', 'siteadmin:secret')
         self.assertEqual(200, res.status)
-        res = self.publish('/plone/@@overview-controlpanel', 'siteadmin:secret')
+        res = self.publish(
+            '/plone/@@overview-controlpanel', 'siteadmin:secret'
+        )
         self.assertEqual(200, res.status)
 
     def testUserManagerRoleCheckboxIsDisabledForNonManagers(self):
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
+        res = self.publish(
+            '/plone/@@usergroup-userprefs', basic='siteadmin:secret'
+        )
         contents = res.getOutput()
         self.assertTrue('<input type="checkbox" class="noborder" '
                         'name="users.roles:list:records" value="Manager" '
@@ -89,7 +98,10 @@ def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):
         self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
 
     def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):
-        res = self.publish('/plone/@@usergroup-groupprefs', basic='siteadmin:secret')
+        res = self.publish(
+            '/plone/@@usergroup-groupprefs',
+            basic='siteadmin:secret'
+        )
         contents = self.simplify_white_space(res.getOutput())
         self.assertTrue('<input type="checkbox" class="noborder" '
                         'name="group_Reviewers:list" value="Manager" '
@@ -145,12 +157,17 @@ def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):
         self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
 
     def test_usergroup_usermembership_blocks_escalation(self):
-        # groups granting the Manager role shouldn't show as a valid option to add
-        res = self.publish('/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
-                           basic='siteadmin:secret')
+        # groups granting the Manager role shouldn't show as a valid option to
+        # add
+        res = self.publish(
+            '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
+            basic='siteadmin:secret'
+        )
         contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder" name="add:list" '
-                        'value="Administrators" disabled="disabled" />' in contents)
+        self.assertTrue(
+            '<input type="checkbox" class="noborder" name="add:list" '
+            'value="Administrators" disabled="disabled" />' in contents
+        )
 
         # and should not be addable
         form = {
@@ -159,17 +176,22 @@ def test_usergroup_usermembership_blocks_escalation(self):
             'form.submitted': 1,
             }
         post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
+        res = self.publish(
+            '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
+            request_method='POST', stdin=post_data,
+            basic='siteadmin:secret'
+        )
         self.assertEqual(403, res.status)
         roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
         self.assertEqual(['Member', 'Authenticated'], roles)
 
     def test_usergroup_groupmembership_blocks_escalation(self):
-        # should not show section to add users for groups granting the Manager role
-        res = self.publish('/plone/@@usergroup-groupmembership?groupname=Administrators',
-                           basic='siteadmin:secret')
+        # should not show section to add users for groups granting the Manager
+        # role
+        res = self.publish(
+            '/plone/@@usergroup-groupmembership?groupname=Administrators',
+            basic='siteadmin:secret'
+        )
         contents = self.simplify_white_space(res.getOutput())
         self.assertFalse('Search for new group members' in contents)
 
@@ -180,20 +202,25 @@ def test_usergroup_groupmembership_blocks_escalation(self):
             'form.submitted': 1,
             }
         post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-groupmembership?groupname=Administrators',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
+        res = self.publish(
+            '/plone/@@usergroup-groupmembership?groupname=Administrators',
+            request_method='POST', stdin=post_data,
+            basic='siteadmin:secret'
+        )
         self.assertEqual(403, res.status)
         roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
         self.assertEqual(['Member', 'Authenticated'], roles)
 
     def test_user_registration_form_blocks_escalation(self):
-        # groups granting the Manager role should not be available for selection
+        # groups granting the Manager role should not be available for
+        # selection
         res = self.publish('/plone/@@new-user', basic='siteadmin:secret')
         contents = self.simplify_white_space(res.getOutput())
-        self.assertFalse('<input class="label checkboxType" id="form.groups.0" '
-                        'name="form.groups" type="checkbox" value="Administrators '
-                        '(Administrators)" />' in contents)
+        self.assertFalse(
+            '<input class="label checkboxType" id="form.groups.0" '
+            'name="form.groups" type="checkbox" value="Administrators '
+            '(Administrators)" />' in contents
+        )
 
         # and should not be addable if we try to force it
         form = {
@@ -240,11 +267,16 @@ def test_users_overview_blocks_deleting_managers(self):
     def test_groups_overview_blocks_deleting_managers(self):
         # a user without the Manager role cannot delete a group with the
         # Manager role
-        res = self.publish('/plone/@@usergroup-groupprefs', basic='siteadmin:secret')
+        res = self.publish(
+            '/plone/@@usergroup-groupprefs',
+            basic='siteadmin:secret'
+        )
         contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder notify" '
-                        'name="delete:list" value="Administrators" disabled="disabled" />'
-                        in contents)
+        self.assertTrue(
+            '<input type="checkbox" class="noborder notify" '
+            'name="delete:list" value="Administrators" disabled="disabled" />'
+            in contents
+        )
 
         form = {
             '_authenticator': self.siteadmin_token,
@@ -259,4 +291,3 @@ def test_groups_overview_blocks_deleting_managers(self):
         self.assertEqual(403, res.status)
         group = self.portal.acl_users.getGroupById('Administrators')
         self.assertTrue(group is not None)
-


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T20:36:33+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/edf9584316e86a028b8f0294d5f0d3ebc3ee3318

Move simplify_white_space into test_siteadmin_role.

Files changed:
M plone/app/controlpanel/tests/cptc.py
M plone/app/controlpanel/tests/test_siteadmin_role.py

diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
index 6f4c806..054f57f 100644
--- a/plone/app/controlpanel/tests/cptc.py
+++ b/plone/app/controlpanel/tests/cptc.py
@@ -48,23 +48,3 @@ def afterSetUp(self):
                 properties=member
             )
         transaction.commit()
-
-    def simplify_white_space(self, text):
-        """For easier testing we replace all white space with one space.
-
-        And we remove white space around '<' and '>'.
-
-        So this:
-
-          <p
-              id="foo"> Bar
-          </p>
-
-        becomes this:
-
-          <p id="foo">Bar</p>
-        """
-        text = re.sub('\s*<\s*', '<', text)
-        text = re.sub('\s*>\s*', '>', text)
-        text = re.sub('\s+', ' ', text)
-        return text
diff --git a/plone/app/controlpanel/tests/test_siteadmin_role.py b/plone/app/controlpanel/tests/test_siteadmin_role.py
index 0664160..716d44a 100644
--- a/plone/app/controlpanel/tests/test_siteadmin_role.py
+++ b/plone/app/controlpanel/tests/test_siteadmin_role.py
@@ -3,6 +3,8 @@
 from plone.app.controlpanel.tests.cptc import UserGroupsControlPanelTestCase
 from plone.protect.authenticator import createToken
 
+import re
+
 
 class TestSiteAdministratorRoleFunctional(UserGroupsControlPanelTestCase):
 
@@ -10,6 +12,26 @@ def _getauth(self, userName):
         self.login(userName)
         return createToken()
 
+    def _simplify_white_space(self, text):
+        """For easier testing we replace all white space with one space.
+
+        And we remove white space around '<' and '>'.
+
+        So this:
+
+          <p
+              id="foo"> Bar
+          </p>
+
+        becomes this:
+
+          <p id="foo">Bar</p>
+        """
+        text = re.sub('\s*<\s*', '<', text)
+        text = re.sub('\s*>\s*', '>', text)
+        text = re.sub('\s+', ' ', text)
+        return text
+
     def afterSetUp(self):
         super(TestSiteAdministratorRoleFunctional, self).afterSetUp()
 
@@ -102,7 +124,7 @@ def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):
             '/plone/@@usergroup-groupprefs',
             basic='siteadmin:secret'
         )
-        contents = self.simplify_white_space(res.getOutput())
+        contents = self._simplify_white_space(res.getOutput())
         self.assertTrue('<input type="checkbox" class="noborder" '
                         'name="group_Reviewers:list" value="Manager" '
                         'disabled="disabled" />' in contents)
@@ -163,7 +185,7 @@ def test_usergroup_usermembership_blocks_escalation(self):
             '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
             basic='siteadmin:secret'
         )
-        contents = self.simplify_white_space(res.getOutput())
+        contents = self._simplify_white_space(res.getOutput())
         self.assertTrue(
             '<input type="checkbox" class="noborder" name="add:list" '
             'value="Administrators" disabled="disabled" />' in contents
@@ -192,7 +214,7 @@ def test_usergroup_groupmembership_blocks_escalation(self):
             '/plone/@@usergroup-groupmembership?groupname=Administrators',
             basic='siteadmin:secret'
         )
-        contents = self.simplify_white_space(res.getOutput())
+        contents = self._simplify_white_space(res.getOutput())
         self.assertFalse('Search for new group members' in contents)
 
         # and should not be addable if we try to force it
@@ -215,7 +237,7 @@ def test_user_registration_form_blocks_escalation(self):
         # groups granting the Manager role should not be available for
         # selection
         res = self.publish('/plone/@@new-user', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
+        contents = self._simplify_white_space(res.getOutput())
         self.assertFalse(
             '<input class="label checkboxType" id="form.groups.0" '
             'name="form.groups" type="checkbox" value="Administrators '
@@ -244,7 +266,7 @@ def test_users_overview_blocks_deleting_managers(self):
         # a user without the Manager role cannot delete a user with the
         # Manager role
         res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
+        contents = self._simplify_white_space(res.getOutput())
         self.assertTrue('<input type="checkbox" class="noborder notify" '
                         'name="delete:list" value="root" disabled="disabled" />'
                         in contents)
@@ -271,7 +293,7 @@ def test_groups_overview_blocks_deleting_managers(self):
             '/plone/@@usergroup-groupprefs',
             basic='siteadmin:secret'
         )
-        contents = self.simplify_white_space(res.getOutput())
+        contents = self._simplify_white_space(res.getOutput())
         self.assertTrue(
             '<input type="checkbox" class="noborder notify" '
             'name="delete:list" value="Administrators" disabled="disabled" />'


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-20T20:52:58+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/b966ca4b193df2109d3092d6166e6bb1d1545c82

test_siteadmin_role.py has been moved to CMFPlone. Remove the tests folder and all test requirements because the pkg does not contain any tests any longer.

Files changed:
M setup.py
D plone/app/controlpanel/tests/__init__.py
D plone/app/controlpanel/tests/cptc.py
D plone/app/controlpanel/tests/test_siteadmin_role.py

diff --git a/plone/app/controlpanel/tests/__init__.py b/plone/app/controlpanel/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
deleted file mode 100644
index 054f57f..0000000
--- a/plone/app/controlpanel/tests/cptc.py
+++ /dev/null
@@ -1,50 +0,0 @@
-# -*- coding: utf-8 -*-
-"""Base class for control panel test cases.
-
-This is in a separate module because it's potentially useful to other
-packages which register controlpanels.
-"""
-
-import re
-import transaction
-
-from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
-from plone.app.testing.bbb import PloneTestCaseFixture
-from plone.app import testing
-from Products.CMFCore.utils import getToolByName
-
-
-class ControlPanelFixture(PloneTestCaseFixture):
-
-    def setUpPloneSite(self, portal):
-        super(ControlPanelFixture, self).setUpPloneSite(portal)
-        portal.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
-
-
-CP_FIXTURE = ControlPanelFixture()
-CP_FUNCTIONAL_LAYER = testing.FunctionalTesting(
-    bases=(CP_FIXTURE,), name='ControlPanel:Functional')
-
-
-class UserGroupsControlPanelTestCase(FunctionalTestCase):
-    """user/groups-specific test case"""
-
-    layer = CP_FUNCTIONAL_LAYER
-
-    def afterSetUp(self):
-        super(UserGroupsControlPanelTestCase, self).afterSetUp()
-        members = [
-            {
-              'username': 'DIispfuF',
-              'fullname': 'Kevin Hughes',
-              'email': 'DIispfuF@example.com'
-            },
-        ]
-        regtool = getToolByName(self.portal, 'portal_registration')
-        for member in members:
-            regtool.addMember(
-                member['username'],
-                'somepassword',
-                properties=member
-            )
-        transaction.commit()
diff --git a/plone/app/controlpanel/tests/test_siteadmin_role.py b/plone/app/controlpanel/tests/test_siteadmin_role.py
deleted file mode 100644
index 716d44a..0000000
--- a/plone/app/controlpanel/tests/test_siteadmin_role.py
+++ /dev/null
@@ -1,315 +0,0 @@
-from cStringIO import StringIO
-from urllib import urlencode
-from plone.app.controlpanel.tests.cptc import UserGroupsControlPanelTestCase
-from plone.protect.authenticator import createToken
-
-import re
-
-
-class TestSiteAdministratorRoleFunctional(UserGroupsControlPanelTestCase):
-
-    def _getauth(self, userName):
-        self.login(userName)
-        return createToken()
-
-    def _simplify_white_space(self, text):
-        """For easier testing we replace all white space with one space.
-
-        And we remove white space around '<' and '>'.
-
-        So this:
-
-          <p
-              id="foo"> Bar
-          </p>
-
-        becomes this:
-
-          <p id="foo">Bar</p>
-        """
-        text = re.sub('\s*<\s*', '<', text)
-        text = re.sub('\s*>\s*', '>', text)
-        text = re.sub('\s+', ' ', text)
-        return text
-
-    def afterSetUp(self):
-        super(TestSiteAdministratorRoleFunctional, self).afterSetUp()
-
-        # add a user with the Site Administrator role
-        self.portal.portal_membership.addMember(
-            'siteadmin',
-            'secret',
-            ['Site Administrator'],
-            []
-        )
-
-        self.manager_token = self._getauth('root')
-        self.siteadmin_token = self._getauth('siteadmin')
-
-        self.normal_user = 'DIispfuF'
-
-    def testControlPanelOverview(self):
-        # make sure we can view the Site Setup page,
-        # at both old and new URLs
-        res = self.publish('/plone/plone_control_panel', 'siteadmin:secret')
-        self.assertEqual(200, res.status)
-        res = self.publish(
-            '/plone/@@overview-controlpanel', 'siteadmin:secret'
-        )
-        self.assertEqual(200, res.status)
-
-    def testUserManagerRoleCheckboxIsDisabledForNonManagers(self):
-        res = self.publish(
-            '/plone/@@usergroup-userprefs', basic='siteadmin:secret'
-        )
-        contents = res.getOutput()
-        self.assertTrue('<input type="checkbox" class="noborder" '
-                        'name="users.roles:list:records" value="Manager" '
-                        'disabled="disabled" />' in contents)
-
-    def testManagerCanDelegateManagerRoleForUsers(self):
-        # a user with the Manager role can grant the Manager role
-        form = {
-            '_authenticator': self.manager_token,
-            'users.id:records': self.normal_user,
-            'users.roles:list:records': 'Manager',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='root:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-
-    def testNonManagersCannotDelegateManagerRoleForUsers(self):
-        # a user without the Manager role cannot delegate the Manager role
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'users.id:records': self.normal_user,
-            'users.roles:list:records': 'Manager',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Member', 'Authenticated'], roles)
-
-    def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):
-        roles = self.portal.acl_users.getUserById('root').getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'users.id:records': 'root',
-            'users.roles:list:records': ('Member', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getUserById('root').getRoles()
-        self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
-
-    def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):
-        res = self.publish(
-            '/plone/@@usergroup-groupprefs',
-            basic='siteadmin:secret'
-        )
-        contents = self._simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder" '
-                        'name="group_Reviewers:list" value="Manager" '
-                        'disabled="disabled" />' in contents)
-
-    def testManagerCanDelegateManagerRoleForGroups(self):
-        # a user with the Manager role can grant the Manager role
-        form = {
-            '_authenticator': self.manager_token,
-            'group_Reviewers:list': ('', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='root:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getGroupById('Reviewers').getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-
-    def testNonManagersCannotDelegateManagerRoleForGroups(self):
-        # a user without the Manager role cannot delegate the Manager role
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'group_Reviewers:list': ('', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getGroupById('Reviewers').getRoles()
-        self.assertEqual(['Reviewer', 'Authenticated'], roles)
-
-    def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):
-        roles = self.portal.acl_users.getUserById('root').getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'group_Administrators:list': ('', 'Member', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getGroupById('Administrators').getRoles()
-        self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
-
-    def test_usergroup_usermembership_blocks_escalation(self):
-        # groups granting the Manager role shouldn't show as a valid option to
-        # add
-        res = self.publish(
-            '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
-            basic='siteadmin:secret'
-        )
-        contents = self._simplify_white_space(res.getOutput())
-        self.assertTrue(
-            '<input type="checkbox" class="noborder" name="add:list" '
-            'value="Administrators" disabled="disabled" />' in contents
-        )
-
-        # and should not be addable
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'add:list': 'Administrators',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish(
-            '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
-            request_method='POST', stdin=post_data,
-            basic='siteadmin:secret'
-        )
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Member', 'Authenticated'], roles)
-
-    def test_usergroup_groupmembership_blocks_escalation(self):
-        # should not show section to add users for groups granting the Manager
-        # role
-        res = self.publish(
-            '/plone/@@usergroup-groupmembership?groupname=Administrators',
-            basic='siteadmin:secret'
-        )
-        contents = self._simplify_white_space(res.getOutput())
-        self.assertFalse('Search for new group members' in contents)
-
-        # and should not be addable if we try to force it
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'add:list': self.normal_user,
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish(
-            '/plone/@@usergroup-groupmembership?groupname=Administrators',
-            request_method='POST', stdin=post_data,
-            basic='siteadmin:secret'
-        )
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Member', 'Authenticated'], roles)
-
-    def test_user_registration_form_blocks_escalation(self):
-        # groups granting the Manager role should not be available for
-        # selection
-        res = self.publish('/plone/@@new-user', basic='siteadmin:secret')
-        contents = self._simplify_white_space(res.getOutput())
-        self.assertFalse(
-            '<input class="label checkboxType" id="form.groups.0" '
-            'name="form.groups" type="checkbox" value="Administrators '
-            '(Administrators)" />' in contents
-        )
-
-        # and should not be addable if we try to force it
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'form.widgets.username': 'newuser',
-            'form.widgets.email': 'newuser@example.com',
-            'form.widgets.password': 'secret',
-            'form.widgets.password_ctl': 'secret',
-            'form.widgets.groups:list': 'Administrators',
-            'form.widgets.groups-empty-marker': '1',
-            'form.buttons.register': 'Register',
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@new-user',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertNotEqual(200, res.status)
-        self.assertEqual(None, self.portal.acl_users.getUserById('newuser'))
-
-    def test_users_overview_blocks_deleting_managers(self):
-        # a user without the Manager role cannot delete a user with the
-        # Manager role
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        contents = self._simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder notify" '
-                        'name="delete:list" value="root" disabled="disabled" />'
-                        in contents)
-
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'users.id:records': 'root',
-            'delete:list': 'root',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        user = self.portal.acl_users.getUserById('root')
-        self.assertTrue(user is not None)
-
-    def test_groups_overview_blocks_deleting_managers(self):
-        # a user without the Manager role cannot delete a group with the
-        # Manager role
-        res = self.publish(
-            '/plone/@@usergroup-groupprefs',
-            basic='siteadmin:secret'
-        )
-        contents = self._simplify_white_space(res.getOutput())
-        self.assertTrue(
-            '<input type="checkbox" class="noborder notify" '
-            'name="delete:list" value="Administrators" disabled="disabled" />'
-            in contents
-        )
-
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'delete:list': 'Administrators',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        group = self.portal.acl_users.getGroupById('Administrators')
-        self.assertTrue(group is not None)
diff --git a/setup.py b/setup.py
index 0ed3a4a..954ec14 100644
--- a/setup.py
+++ b/setup.py
@@ -57,8 +57,6 @@
       ],
       extras_require={
         'test': [
-            'mock',
-            'plone.app.testing',
         ]
       }
       )


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-03-21T17:16:49+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/eefdc85b7ed9e23bf16d3e0a731b14656e90606b

Merge pull request #47 from plone/plip10359-filter-controlpanel-autoform

Plip10359 filter controlpanel autoform

Files changed:
M plone/app/controlpanel/configure.zcml
M setup.py
D plone/app/controlpanel/tests/__init__.py
D plone/app/controlpanel/tests/cptc.py
D plone/app/controlpanel/tests/test_siteadmin_role.py

diff --git a/plone/app/controlpanel/configure.zcml b/plone/app/controlpanel/configure.zcml
index f912564..7170829 100644
--- a/plone/app/controlpanel/configure.zcml
+++ b/plone/app/controlpanel/configure.zcml
@@ -6,21 +6,23 @@
   <include package="Products.CMFCore" />
 
   <include file="permissions.zcml" />
-
+<!--
   <adapter factory=".filter.FilterControlPanelAdapter" />
-
+ -->
   <adapter factory=".language.LanguageControlPanelAdapter" />
 
   <adapter factory=".ram.RAMCacheControlPanelAdapter" />
 
   <adapter factory=".skins.SkinsControlPanelAdapter" />
 
+<!--
   <browser:page
       name="filter-controlpanel"
       for="Products.CMFPlone.interfaces.IPloneSiteRoot"
       class=".filter.FilterControlPanel"
       permission="plone.app.controlpanel.Filtering"
       />
+ -->
 
   <browser:page
       name="language-controlpanel"
diff --git a/plone/app/controlpanel/tests/__init__.py b/plone/app/controlpanel/tests/__init__.py
deleted file mode 100644
index a388cec..0000000
--- a/plone/app/controlpanel/tests/__init__.py
+++ /dev/null
@@ -1,3 +0,0 @@
-# Other packages may find this useful
-
-from plone.app.controlpanel.tests.cptc import ControlPanelTestCase
\ No newline at end of file
diff --git a/plone/app/controlpanel/tests/cptc.py b/plone/app/controlpanel/tests/cptc.py
deleted file mode 100644
index a92f407..0000000
--- a/plone/app/controlpanel/tests/cptc.py
+++ /dev/null
@@ -1,161 +0,0 @@
-# -*- coding: utf-8 -*-
-"""Base class for control panel test cases.
-
-This is in a separate module because it's potentially useful to other
-packages which register controlpanels. They should be able to import it
-without the PloneTestCase.setupPloneSite() side effects.
-"""
-
-import re
-
-from Products.PloneTestCase.PloneTestCase import FunctionalTestCase
-from Products.PloneTestCase.PloneTestCase import portal_owner, default_password
-from Products.Five.testbrowser import Browser
-from Products.CMFCore.utils import getToolByName
-
-
-class FakeRequest(object):
-
-    SERVER_URL = 'http://nohost/plone'
-    environ = {}
-
-
-class ControlPanelTestCase(FunctionalTestCase):
-    """base test case with convenience methods for all control panel tests"""
-
-    def afterSetUp(self):
-        super(ControlPanelTestCase, self).afterSetUp()
-
-        self.browser = Browser()
-
-        self.uf = self.portal.acl_users
-        self.uf.userFolderAddUser('root', 'secret', ['Manager'], [])
-
-        self.ptool = getToolByName(self.portal, 'portal_properties')
-        self.site_props = self.ptool.site_properties
-
-        self.fake_request = FakeRequest()
-
-    def loginAsManager(self, user='root', pwd='secret'):
-        """points the browser to the login screen and logs in as user root
-           with Manager role."""
-        self.browser.open('http://nohost/plone/')
-        self.browser.getLink('Log in').click()
-        self.browser.getControl('Login Name').value = user
-        self.browser.getControl('Password').value = pwd
-        self.browser.getControl('Log in').click()
-
-    def simplify_white_space(self, text):
-        """For easier testing we replace all white space with one space.
-
-        And we remove white space around '<' and '>'.
-
-        So this:
-
-          <p
-              id="foo"> Bar
-          </p>
-
-        becomes this:
-
-          <p id="foo">Bar</p>
-        """
-        text = re.sub('\s*<\s*', '<', text)
-        text = re.sub('\s*>\s*', '>', text)
-        text = re.sub('\s+', ' ', text)
-        return text
-
-
-class UserGroupsControlPanelTestCase(ControlPanelTestCase):
-    """user/groups-specific test case"""
-
-    def afterSetUp(self):
-        super(UserGroupsControlPanelTestCase, self).afterSetUp()
-        self.generateUsers()
-        self.generateGroups()
-
-    def generateGroups(self):
-        groupsTool = getToolByName(self.portal, 'portal_groups')
-        groupsTool.addGroup('group1', [], [], title="Group 1")
-        groupsTool.addGroup('group2', [], [], title="Group 2")
-        groupsTool.addGroup('group3', [], [], title="Group 3 accentué")
-
-    def generateUsers(self):
-        members = [{'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
-                   {'username': 'enTHXigm', 'fullname': 'Richard Ramirez', 'email': 'enTHXigm@example.com'},
-                   {'username': 'q7UsYcrT', 'fullname': 'Kyle Brown', 'email': 'q7UsYcrT@example.com'},
-                   {'username': 'j5g0xPmr', 'fullname': 'Julian Green', 'email': 'j5g0xPmr@example.com'},
-                   {'username': 'o6Sx4It3', 'fullname': 'Makayla Coleman', 'email': 'o6Sx4It3@example.com'},
-                   {'username': 'SLUhquYa', 'fullname': 'Sean Foster', 'email': 'SLUhquYa@example.com'},
-                   {'username': 'nHWl3Ita', 'fullname': 'Molly Martin', 'email': 'nHWl3Ita@example.com'},
-                   {'username': 'xdkpCKmX', 'fullname': 'Jordan Thompson', 'email': 'xdkpCKmX@example.com'},
-                   {'username': 'p8H6CicB', 'fullname': 'Tyler Rivera', 'email': 'p8H6CicB@example.com'},
-                   {'username': 'T6vdBXbD', 'fullname': 'Megan Murphy', 'email': 'T6vdBXbD@example.com'},
-                   {'username': 'DohPmgIa', 'fullname': 'Gracie Diaz', 'email': 'DohPmgIa@example.com'},
-                   {'username': 'CqHWi65B', 'fullname': 'Rachel Morgan', 'email': 'CqHWi65B@example.com'},
-                   {'username': 'uHFQ7qk4', 'fullname': 'Maya Price', 'email': 'uHFQ7qk4@example.com'},
-                   {'username': 'BlXLQh7r', 'fullname': 'Blake Jenkins', 'email': 'BlXLQh7r@example.com'},
-                   {'username': 'FCrWUiSY', 'fullname': 'Owen Ramirez', 'email': 'FCrWUiSY@example.com'},
-                   {'username': 'bX3PqgHK', 'fullname': 'Owen Cook', 'email': 'bX3PqgHK@example.com'},
-                   {'username': 'sD35vVl0', 'fullname': 'Jayden Hill', 'email': 'sD35vVl0@example.com'},
-                   {'username': 'mfOcjXAG', 'fullname': 'Joseph Ramirez', 'email': 'mfOcjXAG@example.com'},
-                   {'username': 'GAJtdYbM', 'fullname': 'Nathan Young', 'email': 'GAJtdYbM@example.com'},
-                   {'username': 'E1OWG6bv', 'fullname': 'Kaitlyn Hernandez', 'email': 'E1OWG6bv@example.com'},
-                   {'username': 'BqOX2sCm', 'fullname': 'Faith Price', 'email': 'BqOX2sCm@example.com'},
-                   {'username': 'tyOxRnml', 'fullname': 'Sofia Williams', 'email': '5yOxRjtl@example.com'},
-                   {'username': 'fVcumDNl', 'fullname': 'David Sanders', 'email': 'fVcumDNl@example.com'},
-                   {'username': 'Ge1hqdEI', 'fullname': 'Jack Simmons', 'email': 'Ge1hqdEI@example.com'},
-                   {'username': 'o2CqT7kG', 'fullname': 'Cole Howard', 'email': 'o2CqT7kG@example.com'},
-                   {'username': 'mpGtfNl6', 'fullname': 'Rachel Miller', 'email': 'mpGtfNl6@example.com'},
-                   {'username': 'RGrpWiBg', 'fullname': 'Henry Patterson', 'email': 'RGrpWiBg@example.com'},
-                   {'username': 'Bufmi0YS', 'fullname': 'Avery Cooper', 'email': 'Bufmi0YS@example.com'},
-                   {'username': 'J7NvbjYd', 'fullname': 'Sydney Bennett', 'email': 'J7NvbjYd@example.com'},
-                   {'username': 'u5Xem8U1', 'fullname': 'Daniel Johnson', 'email': 'u5Xem8U1@example.com'},
-                   {'username': 'TWrMCLIo', 'fullname': 'Autumn Brooks', 'email': '0VrMCLIo@example.com'},
-                   {'username': 'FElYwiIr', 'fullname': 'Alexandra Nelson', 'email': 'FElYwiIr@example.com'},
-                   {'username': 'teK6pkhc', 'fullname': 'Brian Simmons', 'email': '0eK6pkhc@example.com'},
-                   {'username': 'RwAO2YPa', 'fullname': 'Gracie Adams', 'email': 'gracie@example.com'},
-                   {'username': 'nlBMw26i', 'fullname': 'Sydney Evans', 'email': 'nlBMw26i@example.com'},
-                   {'username': 'Ahr3EiRC', 'fullname': 'Emma Brown', 'email': 'Ahr3EiRC@example.com'},
-                   {'username': 'NhuU0Y5x', 'fullname': 'Lauren Martin', 'email': 'NhuU0Y5x@example.com'},
-                   {'username': 'j2R3mKQg', 'fullname': 'Isabelle Russell', 'email': 'j2R3mKQg@example.com'},
-                   {'username': 'qOmK0iCN', 'fullname': 'Anna Baker', 'email': 'qOmK0iCN@example.com'},
-                   {'username': 'uQbVOgo7', 'fullname': 'Brady Watson', 'email': 'uQbVOgo7@example.com'},
-                   {'username': 'oLDCaQfW', 'fullname': 'Kaitlyn Robinson', 'email': 'oLDCaQfW@example.com'},
-                   {'username': 'osYHeFD1', 'fullname': 'Riley Richardson', 'email': 'osYHeFD1@example.com'},
-                   {'username': 'i4pHduDY', 'fullname': 'Kayla Sanders', 'email': 'i4pHduDY@example.com'},
-                   {'username': 'BvyX6qF3', 'fullname': 'Sara Richardson', 'email': 'BvyX6qF3@example.com'},
-                   {'username': 'a3EpwDYj', 'fullname': 'Trinity Gonzales', 'email': 'a3EpwDYj@example.com'},
-                   {'username': 'JDMseWdt', 'fullname': 'Madeline Garcia', 'email': 'JDMseWdt@example.com'},
-                   {'username': 'lPCYBvoi', 'fullname': 'Brian Gray', 'email': 'lPCYBvoi@example.com'},
-                   {'username': 'AByCsRQ3', 'fullname': 'Victoria Perez', 'email': 'AByCsRQ3@example.com'},
-                   {'username': 'CH7uVlNy', 'fullname': 'Charles Rodriguez', 'email': '5H7uVlNy@example.com'},
-                   {'username': 'XYsmd7ux', 'fullname': 'Abigail Simmons', 'email': 'XYsmd7ux@example.com'},
-                   {'username': 'DfaA1wqC3', 'fullname': 'Émilie Richard', 'email': 'DfaA1wqC3@example.com'},
-                   {'username': 'NP4FMIb5', 'email': 'NP4FMIb5@example.com'}]
-
-        regtool = getToolByName(self.portal, 'portal_registration')
-        for member in members:
-            regtool.addMember(member['username'], 'somepassword', properties=member)
-
-
-class EmailLoginSecurityControlPanelTestCase(UserGroupsControlPanelTestCase):
-    """This switches on email as login.
-
-    Note that the afterSetUp of the UserGroupsControlPanelTestCase
-    creates several dozen users.  This might flush out a few bugs.
-    """
-
-    def afterSetUp(self):
-        super(EmailLoginSecurityControlPanelTestCase, self).afterSetUp()
-        from plone.app.controlpanel.security import migrate_to_email_login
-        migrate_to_email_login(self.portal)
-
-    def loginAsManager(self, user=portal_owner, pwd=default_password):
-        """points the browser to the login screen and logs in as user root with Manager role."""
-        self.browser.open('http://nohost/plone/')
-        self.browser.getLink('Log in').click()
-        #self.browser.getControl('Login Name').value = user
-        self.browser.getControl('E-mail').value = user
-        self.browser.getControl('Password').value = pwd
-        self.browser.getControl('Log in').click()
diff --git a/plone/app/controlpanel/tests/test_siteadmin_role.py b/plone/app/controlpanel/tests/test_siteadmin_role.py
deleted file mode 100644
index aceab7c..0000000
--- a/plone/app/controlpanel/tests/test_siteadmin_role.py
+++ /dev/null
@@ -1,269 +0,0 @@
-import re
-from cStringIO import StringIO
-from urllib import urlencode
-from plone.app.controlpanel.tests.cptc import UserGroupsControlPanelTestCase
-from Products.PloneTestCase.PloneTestCase import setupPloneSite
-
-setupPloneSite()
-
-
-class TestSiteAdministratorRoleFunctional(UserGroupsControlPanelTestCase):
-
-    def afterSetUp(self):
-        super(TestSiteAdministratorRoleFunctional, self).afterSetUp()
-
-        # add a user with the Site Administrator role
-        self.portal.portal_membership.addMember('siteadmin', 'secret', ['Site Administrator'], [])
-
-        token_re = re.compile(r'name="_authenticator" value="([^"]+)"')
-        res = self.publish('/plone/@@usergroup-userprefs', basic='root:secret')
-        self.manager_token = token_re.search(res.getOutput()).group(1)
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        self.siteadmin_token = token_re.search(res.getOutput()).group(1)
-
-        self.normal_user = 'DIispfuF'
-
-    def testControlPanelOverview(self):
-        # make sure we can view the Site Setup page,
-        # at both old and new URLs
-        res = self.publish('/plone/plone_control_panel', 'siteadmin:secret')
-        self.assertEqual(200, res.status)
-        res = self.publish('/plone/@@overview-controlpanel', 'siteadmin:secret')
-        self.assertEqual(200, res.status)
-
-    def testUserManagerRoleCheckboxIsDisabledForNonManagers(self):
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder" '
-                        'name="users.roles:list:records" value="Manager" '
-                        'disabled="disabled" />' in contents)
-
-    def testManagerCanDelegateManagerRoleForUsers(self):
-        # a user with the Manager role can grant the Manager role
-        form = {
-            '_authenticator': self.manager_token,
-            'users.id:records': self.normal_user,
-            'users.roles:list:records': 'Manager',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='root:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-
-    def testNonManagersCannotDelegateManagerRoleForUsers(self):
-        # a user without the Manager role cannot delegate the Manager role
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'users.id:records': self.normal_user,
-            'users.roles:list:records': 'Manager',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Member', 'Authenticated'], roles)
-
-    def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):
-        roles = self.portal.acl_users.getUserById('root').getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'users.id:records': 'root',
-            'users.roles:list:records': ('Member', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getUserById('root').getRoles()
-        self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
-
-    def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):
-        res = self.publish('/plone/@@usergroup-groupprefs', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder" '
-                        'name="group_Reviewers:list" value="Manager" '
-                        'disabled="disabled" />' in contents)
-
-    def testManagerCanDelegateManagerRoleForGroups(self):
-        # a user with the Manager role can grant the Manager role
-        form = {
-            '_authenticator': self.manager_token,
-            'group_Reviewers:list': ('', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='root:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getGroupById('Reviewers').getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-
-    def testNonManagersCannotDelegateManagerRoleForGroups(self):
-        # a user without the Manager role cannot delegate the Manager role
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'group_Reviewers:list': ('', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getGroupById('Reviewers').getRoles()
-        self.assertEqual(['Reviewer', 'Authenticated'], roles)
-
-    def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):
-        roles = self.portal.acl_users.getUserById('root').getRoles()
-        self.assertEqual(['Manager', 'Authenticated'], roles)
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'group_Administrators:list': ('', 'Member', 'Manager'),
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form, doseq=True))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(200, res.status)
-        roles = self.portal.acl_users.getGroupById('Administrators').getRoles()
-        self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
-
-    def test_usergroup_usermembership_blocks_escalation(self):
-        # groups granting the Manager role shouldn't show as a valid option to add
-        res = self.publish('/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
-                           basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder" name="add:list" '
-                        'value="Administrators" disabled="disabled" />' in contents)
-
-        # and should not be addable
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'add:list': 'Administrators',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Member', 'Authenticated'], roles)
-
-    def test_usergroup_groupmembership_blocks_escalation(self):
-        # should not show section to add users for groups granting the Manager role
-        res = self.publish('/plone/@@usergroup-groupmembership?groupname=Administrators',
-                           basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertFalse('Search for new group members' in contents)
-
-        # and should not be addable if we try to force it
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'add:list': self.normal_user,
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-groupmembership?groupname=Administrators',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
-        self.assertEqual(['Member', 'Authenticated'], roles)
-
-    def test_user_registration_form_blocks_escalation(self):
-        # groups granting the Manager role should not be available for selection
-        res = self.publish('/plone/@@new-user', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertFalse('<input class="label checkboxType" id="form.groups.0" '
-                        'name="form.groups" type="checkbox" value="Administrators '
-                        '(Administrators)" />' in contents)
-
-        # and should not be addable if we try to force it
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'form.widgets.username': 'newuser',
-            'form.widgets.email': 'newuser@example.com',
-            'form.widgets.password': 'secret',
-            'form.widgets.password_ctl': 'secret',
-            'form.widgets.groups:list': 'Administrators',
-            'form.widgets.groups-empty-marker': '1',
-            'form.buttons.register': 'Register',
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@new-user',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertNotEqual(200, res.status)
-        self.assertEqual(None, self.portal.acl_users.getUserById('newuser'))
-
-    def test_users_overview_blocks_deleting_managers(self):
-        # a user without the Manager role cannot delete a user with the
-        # Manager role
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder notify" '
-                        'name="delete:list" value="root" disabled="disabled" />'
-                        in contents)
-
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'users.id:records': 'root',
-            'delete:list': 'root',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-userprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        user = self.portal.acl_users.getUserById('root')
-        self.assertTrue(user is not None)
-
-    def test_groups_overview_blocks_deleting_managers(self):
-        # a user without the Manager role cannot delete a group with the
-        # Manager role
-        res = self.publish('/plone/@@usergroup-groupprefs', basic='siteadmin:secret')
-        contents = self.simplify_white_space(res.getOutput())
-        self.assertTrue('<input type="checkbox" class="noborder notify" '
-                        'name="delete:list" value="Administrators" disabled="disabled" />'
-                        in contents)
-
-        form = {
-            '_authenticator': self.siteadmin_token,
-            'delete:list': 'Administrators',
-            'form.button.Modify': 'Apply Changes',
-            'form.submitted': 1,
-            }
-        post_data = StringIO(urlencode(form))
-        res = self.publish('/plone/@@usergroup-groupprefs',
-                           request_method='POST', stdin=post_data,
-                           basic='siteadmin:secret')
-        self.assertEqual(403, res.status)
-        group = self.portal.acl_users.getGroupById('Administrators')
-        self.assertTrue(group is not None)
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestSiteAdministratorRoleFunctional))
-    return suite
diff --git a/setup.py b/setup.py
index a9a8ad7..954ec14 100644
--- a/setup.py
+++ b/setup.py
@@ -57,9 +57,6 @@
       ],
       extras_require={
         'test': [
-            'mock',
-            'Products.PloneTestCase',
-            'plone.app.testing',
         ]
       }
       )


