Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-17T23:58:23+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/3178e194b9082fd0a76a479245b547079176cac9

Fix a bug in displaying the event_listing on Collections. Show the date filter on Collections, if no start/end critierias are given in the Collection's query.

Files changed:
M CHANGES.rst
M plone/app/event/base.py
M plone/app/event/browser/event_listing.pt
M plone/app/event/browser/event_listing.py
M plone/app/event/tests/test_event_listing.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 471fdae..dd65c4c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,10 @@ Changelog
 2.0a8 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fix a bug in displaying the ``event_listing`` on Collections. Show the date
+  filter on Collections, if no start/end critierias are given in the
+  Collection's query.
+  [thet]
 
 
 2.0a7 (2015-03-13)
diff --git a/plone/app/event/base.py b/plone/app/event/base.py
index a0e5454..467b9e4 100644
--- a/plone/app/event/base.py
+++ b/plone/app/event/base.py
@@ -114,6 +114,8 @@ def get_events(context, start=None, end=None, limit=None,
     query = {}
     query['object_provides'] = IEvent.__identifier__
 
+    query.update(start_end_query(start, end))
+
     if 'path' not in kw:
         # limit to the current navigation root, usually (not always) site
         portal = getSite()
@@ -122,15 +124,6 @@ def get_events(context, start=None, end=None, limit=None,
     else:
         query['path'] = kw['path']
 
-    if start:
-        # All events from start date ongoing:
-        # The minimum end date of events is the date from which we search.
-        query['end'] = {'query': start, 'range': 'min'}
-    if end:
-        # All events until end date:
-        # The maximum start date must be the date until we search.
-        query['start'] = {'query': end, 'range': 'max'}
-
     # Sorting
     # In expand mode we sort after calculation of recurrences again. But we
     # need to leave this sorting here in place, since no sort definition could
@@ -408,6 +401,21 @@ def _prepare_range(context, start, end):
     return start, end
 
 
+def start_end_query(start, end):
+    """Make a catalog query out of start and end dates.
+    """
+    query = {}
+    if start:
+        # All events from start date ongoing:
+        # The minimum end date of events is the date from which we search.
+        query['end'] = {'query': start, 'range': 'min'}
+    if end:
+        # All events until end date:
+        # The maximum start date must be the date until we search.
+        query['start'] = {'query': end, 'range': 'max'}
+    return query
+
+
 # TIMEZONE HANDLING
 
 def default_timezone(context=None, as_tzinfo=False):
diff --git a/plone/app/event/browser/event_listing.pt b/plone/app/event/browser/event_listing.pt
index eb29398..a5befbb 100644
--- a/plone/app/event/browser/event_listing.pt
+++ b/plone/app/event/browser/event_listing.pt
@@ -20,7 +20,7 @@
 
   <div class="event_listing">
     <header>
-      <nav tal:define="show_filter python:not view.is_collection">
+      <nav tal:define="show_filter view/show_filter">
         <ul class="mode_selector">
           <tal:cond condition="show_filter">
           <li class="" tal:attributes="class python:mode=='future' and 'selected' or ''">
diff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py
index 6b148f6..a4d72d2 100644
--- a/plone/app/event/browser/event_listing.py
+++ b/plone/app/event/browser/event_listing.py
@@ -7,12 +7,14 @@
 from plone.app.event.base import AnnotationAdapter
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import RET_MODE_OBJECTS
+from plone.app.event.base import _prepare_range
 from plone.app.event.base import date_speller
 from plone.app.event.base import expand_events
 from plone.app.event.base import get_events
 from plone.app.event.base import guess_date_from
 from plone.app.event.base import localized_now
 from plone.app.event.base import start_end_from_mode
+from plone.app.event.base import start_end_query
 from plone.app.event.browser.event_view import get_location
 from plone.app.event.ical.exporter import construct_icalendar
 from plone.app.layout.navigation.defaultpage import getDefaultPage
@@ -68,8 +70,7 @@ def __init__(self, context, request):
         if self.mode is None:
             self.mode = self._date and 'day' or 'future'
 
-        self.uid = None  # Used to get all occurrences from a single event.
-                         # Overrides all other settings
+        self.uid = None  # Used to get all occurrences from a single event. Overrides all other settings  # noqa
 
     @property
     def default_context(self):
@@ -86,6 +87,18 @@ def is_collection(self):
         return ICollection and ICollection.providedBy(ctx) or False
 
     @property
+    def show_filter(self):
+        ret = True
+        if self.is_collection:
+            ctx = self.default_context
+            query = queryparser.parseFormquery(ctx, ctx.query)
+            if 'start' in query or 'end' in query:
+                # Don't show the date filter, if a date is given in the
+                # collection's query
+                ret = False
+        return ret
+
+    @property
     def date(self):
         dt = None
         if self._date:
@@ -119,8 +132,8 @@ def _get_events(self, ret_mode=RET_MODE_ACCESSORS, expand=True):
             if self.searchable_text:
                 kw['SearchableText'] = self.searchable_text
 
-        #kw['b_start'] = self.b_start
-        #kw['b_size']  = self.b_size
+        # kw['b_start'] = self.b_start
+        # kw['b_size']  = self.b_size
 
         start, end = self._start_end
 
@@ -136,15 +149,26 @@ def events(self, ret_mode=RET_MODE_ACCESSORS, expand=True, batch=True):
         res = []
         if self.is_collection:
             ctx = self.default_context
-            res = ctx.results(batch=False, sort_on='start', brains=True)
-            query = queryparser.parseFormquery(ctx, ctx.getRawQuery())
+            query = queryparser.parseFormquery(ctx, ctx.query)
+            custom_query = {}
+            if 'start' not in query or 'end' not in query:
+                # ... else don't show the navigation bar
+                start, end = self._start_end
+                start, end = _prepare_range(ctx, start, end)
+                custom_query = start_end_query(start, end)
+            res = ctx.results(
+                batch=False, brains=True, custom_query=custom_query
+            )
             if expand:
                 # get start and end values from the query to ensure limited
                 # listing for occurrences
-                start, end = self._expand_events_start_end(query.get('start'),
-                                                           query.get('end'))
-                res = expand_events(res, ret_mode, sort='start', start=start,
-                                    end=end)
+                start, end = self._expand_events_start_end(
+                    query.get('start') or custom_query.get('start'),
+                    query.get('end') or custom_query.get('end')
+                )
+                res = expand_events(
+                    res, ret_mode, sort='start', start=start, end=end
+                )
         else:
             res = self._get_events(ret_mode, expand=expand)
         if batch:
diff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py
index 5e074d3..b36cfb1 100644
--- a/plone/app/event/tests/test_event_listing.py
+++ b/plone/app/event/tests/test_event_listing.py
@@ -7,28 +7,31 @@
 import mock
 
 
-class TestEventsListingDX(AbstractSampleDataEvents):
+class TestEventsListingPortal(AbstractSampleDataEvents):
     layer = PAEventDX_INTEGRATION_TESTING
 
+    def _listing_view(self, name='@@event_listing'):
+        return self.portal.restrictedTraverse(name)
+
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
     def test_get_events_future(self):
         # Default mode is to show all events from now on.
-        view = self.portal.restrictedTraverse('@@event_listing')
+        view = self._listing_view()
         self.assertEqual(len(view._get_events()), 5)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
     def test_get_events_past(self):
         self.request.form.update({'mode': 'past'})
-        view = self.portal.restrictedTraverse('@@event_listing')
+        view = self._listing_view()
         self.assertEqual(len(view._get_events()), 5)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
     def test_get_events_all(self):
         self.request.form.update({'mode': 'all'})
-        view = self.portal.restrictedTraverse('@@event_listing')
+        view = self._listing_view()
         self.assertEqual(len(view._get_events()), 8)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
@@ -36,7 +39,7 @@ def test_get_events_all(self):
     def test_get_events_today(self):
         today = localized_today().isoformat()
         self.request.form.update({'mode': 'day', 'date': today})
-        view = self.portal.restrictedTraverse('@@event_listing')
+        view = self._listing_view()
         self.assertEqual(len(view._get_events()), 2)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
@@ -44,9 +47,72 @@ def test_get_events_today(self):
     def test_events_listing_ical(self):
         # Default mode is to show all events from now on.
         headers, output, request = make_fake_response(self.request)
-        view = self.portal.restrictedTraverse('@@event_listing_ical')
+        view = self._listing_view(name='@@event_listing_ical')
         view()
         self.assertEqual(len(headers), 2)
         self.assertEqual(headers['Content-Type'], 'text/calendar')
         icalstr = ''.join(output)
         self.assertTrue('Long Event' in icalstr)
+
+
+class TestEventsListingCollection(TestEventsListingPortal):
+
+    def _listing_view(self, name='@@event_listing'):
+        return self.portal.collection.restrictedTraverse(name)
+
+    def test_date_filtering(self):
+        """Test if date filters are available on Collections without start or
+        end search criterias.
+        """
+        # plone.app.contenttypes ICollection type
+        self.portal.invokeFactory(
+            'Collection', 'col_without_date_criterion', title=u'Col')
+        collection = self.portal.col_without_date_criterion
+        collection.query = [
+            {'i': 'portal_type',
+             'o': 'plone.app.querystring.operation.selection.is',
+             'v': ['Event', 'plone.app.event.dx.event']
+             },
+        ]
+        view = self.portal.col_without_date_criterion.restrictedTraverse(
+            '@@event_listing'
+        )
+        out = view()
+        for _class in [
+            'mode_future',
+            'mode_past',
+            'mode_month',
+            'mode_week',
+            'mode_day',
+        ]:
+            self.assertTrue(_class in out)
+
+    def test_no_date_filtering(self):
+        """Test if date filters are not available on Collections with start or
+        end search criterias.
+        """
+        # plone.app.contenttypes ICollection type
+        self.portal.invokeFactory(
+            'Collection', 'col_with_date_criterion', title=u'Col')
+        collection = self.portal.col_with_date_criterion
+        collection.query = [
+            {'i': 'portal_type',
+             'o': 'plone.app.querystring.operation.selection.is',
+             'v': ['Event', 'plone.app.event.dx.event']
+             },
+            {'i': 'start',
+             'o': 'plone.app.querystring.operation.date.afterToday',
+             'v': ''}
+        ]
+        view = self.portal.col_with_date_criterion.restrictedTraverse(
+            '@@event_listing'
+        )
+        out = view()
+        for _class in [
+            'mode_future',
+            'mode_past',
+            'mode_month',
+            'mode_week',
+            'mode_day',
+        ]:
+            self.assertTrue(_class not in out)


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-18T04:25:23+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/fa95006448f726296a709713e2229e910057de75

replace hasattr with getattr - hasattr swallows exceptions

Files changed:
M plone/app/event/base.py
M plone/app/event/ical/exporter.py
M plone/app/event/ical/importer.py

diff --git a/plone/app/event/base.py b/plone/app/event/base.py
index 467b9e4..8cd7f05 100644
--- a/plone/app/event/base.py
+++ b/plone/app/event/base.py
@@ -272,7 +272,7 @@ def expand_events(events, ret_mode,
 
     exp_result = []
     for it in events:
-        obj = hasattr(it, 'getObject') and it.getObject() or it
+        obj = it.getObject() if getattr(it, 'getObject', False) else it
         if IEventRecurrence.providedBy(obj):
             occurrences = [_obj_or_acc(occ, ret_mode) for occ in
                            IRecurrenceSupport(obj).occurrences(start, end)]
diff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py
index 20a1c82..2eb01c9 100644
--- a/plone/app/event/ical/exporter.py
+++ b/plone/app/event/ical/exporter.py
@@ -44,7 +44,7 @@ def construct_icalendar(context, events):
         cal.add('x-wr-timezone', cal_tz)
 
     tzmap = {}
-    if not hasattr(events, '__getslice__'):  # LazyMap doesn't have __iter__
+    if not getattr(events, '__getslice__', False):  # LazyMap doesn't have __iter__  # noqa
         events = [events]
     for event in events:
         if ICatalogBrain.providedBy(event) or\
diff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py
index 9ade379..84fc568 100644
--- a/plone/app/event/ical/importer.py
+++ b/plone/app/event/ical/importer.py
@@ -137,7 +137,7 @@ def _from_list(ical, prop):
 
         contact = _get_prop('CONTACT', item)
         categories = item.get('CATEGORIES', ())
-        if hasattr(categories, '__iter__'):
+        if getattr(categories, '__iter__', False):
             categories = tuple([safe_unicode(it) for it in categories])
 
         ext_modified = utc(_get_prop('LAST-MODIFIED', item))


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-18T05:10:53+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/c29ce46aec1d1ccd5792fbf2d1ee3106a77e16c0

replace ``x and y or z`` terniary substitution with real terniary op: ``y if x else z``

Files changed:
M plone/app/event/base.py
M plone/app/event/bbb/portlets/portlet_calendar.pt
M plone/app/event/bbb/portlets/portlet_events.pt
M plone/app/event/browser/event_listing.pt
M plone/app/event/browser/event_listing.py
M plone/app/event/dx/behaviors.py
M plone/app/event/ical/exporter.py
M plone/app/event/ical/importer.py
M plone/app/event/portlets/portlet_calendar.pt
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.pt
M plone/app/event/testing.py

diff --git a/plone/app/event/base.py b/plone/app/event/base.py
index 8cd7f05..8d885ee 100644
--- a/plone/app/event/base.py
+++ b/plone/app/event/base.py
@@ -932,7 +932,7 @@ def __setattr__(self, name, value):
             self._data[name] = value
 
     def __getattr__(self, name):
-        return self._data and self._data.get(name, None) or None
+        return self._data.get(name, None) if self._data else None
 
 
 def find_context(context, viewname=None, iface=None,
diff --git a/plone/app/event/bbb/portlets/portlet_calendar.pt b/plone/app/event/bbb/portlets/portlet_calendar.pt
index 80897b6..f67d98b 100644
--- a/plone/app/event/bbb/portlets/portlet_calendar.pt
+++ b/plone/app/event/bbb/portlets/portlet_calendar.pt
@@ -61,10 +61,10 @@
                               events day/events;
                               limit python:len(events) if events is not None else 0"
                   tal:attributes="class python:u'event%s%s%s%s' %
-                              ((today and ' today' or ''),
-                              (next_month and ' cal_next_month' or ''),
-                              (prev_month and ' cal_prev_month' or ''),
-                              (events and ' cal_has_events' or ''))">
+                              ((' today' if today else ''),
+                              (' cal_next_month' if next_month else ''),
+                              (' cal_prev_month' if prev_month else ''),
+                              (' cal_has_events' if events else ''))">
                     <a href=""
                       tal:omit-tag="not:events"
                       tal:attributes="href python:view.date_events_url(day['date_string']);
diff --git a/plone/app/event/bbb/portlets/portlet_events.pt b/plone/app/event/bbb/portlets/portlet_events.pt
index 110670e..ebdd2ef 100644
--- a/plone/app/event/bbb/portlets/portlet_events.pt
+++ b/plone/app/event/bbb/portlets/portlet_events.pt
@@ -21,7 +21,7 @@
     <tal:events repeat="item view/events">
     <dd class="portletItem"
         tal:define="oddrow repeat/item/odd"
-        tal:attributes="class python:oddrow and 'portletItem even' or 'portletItem odd'">
+        tal:attributes="class python:'portletItem oddrow' if oddrow else 'portletItem even'">
         <a href="#" class="tile"
             tal:attributes="href item/url;
                             title item/description">
diff --git a/plone/app/event/browser/event_listing.pt b/plone/app/event/browser/event_listing.pt
index a5befbb..047072e 100644
--- a/plone/app/event/browser/event_listing.pt
+++ b/plone/app/event/browser/event_listing.pt
@@ -23,19 +23,19 @@
       <nav tal:define="show_filter view/show_filter">
         <ul class="mode_selector">
           <tal:cond condition="show_filter">
-          <li class="" tal:attributes="class python:mode=='future' and 'selected' or ''">
+          <li class="" tal:attributes="class python:'selected' if mode=='future' else ''">
             <a class="mode_future"   href="" tal:attributes="href view/mode_future_url"   i18n:translate="mode_future_link">Upcoming</a>
           </li>
-          <li class="" tal:attributes="class python:mode=='past' and 'selected' or ''">
+          <li class="" tal:attributes="class python:'selected' if mode=='past' else ''">
             <a class="mode_past"   href="" tal:attributes="href view/mode_past_url"   i18n:translate="mode_past_link">Past</a>
           </li>
-          <li class="" tal:attributes="class python:mode=='month' and 'selected' or ''">
+          <li class="" tal:attributes="class python:'selected' if mode=='month' else ''">
             <a class="mode_month" href="" tal:attributes="href view/mode_month_url" i18n:translate="mode_month_link">Month</a>
           </li>
-          <li class="" tal:attributes="class python:mode=='week' and 'selected' or ''">
+          <li class="" tal:attributes="class python:'selected' if mode=='week' else ''">
             <a class="mode_week"  href="" tal:attributes="href view/mode_week_url"  i18n:translate="mode_week_link">Week</a>
           </li>
-          <li class="" tal:attributes="class python:mode=='day' and 'selected' or ''">
+          <li class="" tal:attributes="class python:'selected' if mode=='day' else ''">
             <a class="mode_day"   href="" tal:attributes="href view/mode_day_url"   i18n:translate="mode_day_link">Day</a> <input id="event_listing_calendar" type="hidden" />
           </li>
           </tal:cond>
diff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py
index a4d72d2..8625d64 100644
--- a/plone/app/event/browser/event_listing.py
+++ b/plone/app/event/browser/event_listing.py
@@ -48,19 +48,18 @@ def __init__(self, context, request):
 
         # Request parameter
         req = self.request.form
-        self.b_start = 'b_start' in req and int(req['b_start']) or 0
-        self.b_size = 'b_size' in req and int(req['b_size']) or 10
-        self.orphan = 'orphan' in req and int(req['orphan']) or 1
-        self.mode = 'mode' in req and req['mode'] or None
-        self._date = 'date' in req and req['date'] or None
-        self.tags = 'tags' in req and req['tags'] or None
-        self.searchable_text = 'SearchableText' in req and\
-            req['SearchableText'] or None
-        self.path = 'path' in req and req['path'] or None
-
-        day = 'day' in req and int(req['day']) or None
-        month = 'month' in req and int(req['month']) or None
-        year = 'year' in req and int(req['year']) or None
+        self.b_start = int(req['b_start']) if 'b_start' in req else 0
+        self.b_size  = int(req['b_size'])  if 'b_size'  in req else 10
+        self.orphan  = int(req['orphan'])  if 'orphan'  in req else 1
+        self.mode    = req['mode'] if 'mode' in req else None
+        self._date   = req['date'] if 'date' in req else None
+        self.tags    = req['tags'] if 'tags' in req else None
+        self.searchable_text = req['SearchableText'] if 'SearchableText' in req else None  # noqa
+        self.path    = req['path'] if 'path' in req else None
+
+        day   = int(req['day'])   if 'day'   in req else None
+        month = int(req['month']) if 'month' in req else None
+        year  = int(req['year'])  if 'year'  in req else None
 
         if not self._date and day or month or year:
             self._date = date(year or now.year,
@@ -68,7 +67,7 @@ def __init__(self, context, request):
                               day or now.day).isoformat()
 
         if self.mode is None:
-            self.mode = self._date and 'day' or 'future'
+            self.mode = 'day' if self._date else 'future'
 
         self.uid = None  # Used to get all occurrences from a single event. Overrides all other settings  # noqa
 
@@ -84,7 +83,7 @@ def default_context(self):
     @property
     def is_collection(self):
         ctx = self.default_context
-        return ICollection and ICollection.providedBy(ctx) or False
+        return ICollection.providedBy(ctx) if ICollection else False
 
     @property
     def show_filter(self):
@@ -197,11 +196,13 @@ def ical(self):
     def ical_url(self):
         date = self.date
         mode = self.mode
-        qstr = (date or mode) and '?%s%s%s' % (
-            mode and 'mode=%s' % mode,
-            mode and date and '&' or '',
-            date and 'date=%s' % date or ''
-        ) or ''
+
+        qstr = '&'.join([
+            it for it in ['mode=%s' % mode if mode else None,
+                          'date=%s' % date if date else None]
+            if it
+        ])
+        qstr = '?%s' % qstr if qstr else ''
         return '%s/@@event_listing_ical%s' % (
             self.context.absolute_url(),
             qstr
@@ -223,8 +224,8 @@ def date_speller(self, date):
     @property
     def header_string(self):
         start, end = self._start_end
-        start_dict = start and date_speller(self.context, start) or None
-        end_dict = end and date_speller(self.context, end) or None
+        start_dict = date_speller(self.context, start) if start else None
+        end_dict = date_speller(self.context, end) if end else None
 
         mode = self.mode
         main_msgid = None
@@ -314,15 +315,15 @@ def header_string(self):
             )
 
         trans = self.context.translate
-        return {'main': main_msgid and trans(main_msgid) or '',
-                'sub': sub_msgid and trans(sub_msgid) or ''}
+        return {'main': trans(main_msgid) if main_msgid else '',
+                'sub': trans(sub_msgid) if sub_msgid else ''}
 
     # MODE URLs
     def _date_nav_url(self, mode, datestr=''):
         return '%s?mode=%s%s' % (
             self.request.getURL(),
             mode,
-            datestr and '&date=%s' % datestr or ''
+            '&date=%s' % datestr if datestr else ''
         )
 
     @property
diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py
index 0d4819d..f264bd9 100644
--- a/plone/app/event/dx/behaviors.py
+++ b/plone/app/event/dx/behaviors.py
@@ -303,7 +303,7 @@ class IEventContact(model.Schema):
     domain = request.get('HTTP_HOST')
     obj.sync_uid = '%s%s' % (
         uid,
-        domain and '@%s' % domain or ''
+        '@%s' % domain if domain else ''
     )
 """
 
diff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py
index 2eb01c9..b11d3af 100644
--- a/plone/app/event/ical/exporter.py
+++ b/plone/app/event/ical/exporter.py
@@ -125,11 +125,11 @@ def add_to_zones_map(tzmap, tzid, dt):
     #     way we get the maximum transition time which is smaller than the
     #     given datetime.
     transition = max(transitions,
-                     key=lambda item: item <= dtzl and item or null)
+                     key=lambda item: item if item <= dtzl else null)
 
     # get previous transition to calculate tzoffsetfrom
     idx = transitions.index(transition)
-    prev_idx = idx > 0 and idx - 1 or idx
+    prev_idx = idx - 1 if idx > 0 else idx
     prev_transition = transitions[prev_idx]
 
     def localize(tz, dt):
diff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py
index 84fc568..4aaa950 100644
--- a/plone/app/event/ical/importer.py
+++ b/plone/app/event/ical/importer.py
@@ -61,12 +61,12 @@ def _from_list(ical, prop):
 
         TODO: component property parameters like TZID are not used here.
         """
-        val = prop in ical and ical[prop] or []
+        val = ical[prop] if prop in ical else []
         if not isinstance(val, list):
             val = [val]
         #ret = ''
         #for item in val:
-        #    ret = ret and '%s\n' % ret or ret  # insert linebreak
+        #    ret = '%s\n' % ret if ret else ret  # insert linebreak
         #    ret = '%s%s:%s' % (ret, prop, item.to_ical())
         #return ret
 
@@ -75,9 +75,9 @@ def _from_list(ical, prop):
         # https://github.com/collective/jquery.recurrenceinput.js/issues/15
         ret = ''
         for item in val:
-            ret = ret and '%s,' % ret or ret  # insert linebreak
+            ret = '%s,' % ret if ret else ret  # insert linebreak
             ret = '%s%s' % (ret, item.to_ical())
-        return ret and '%s:%s' % (prop, ret) or None
+        return '%s:%s' % (prop, ret) if ret else None
 
     count = 0
     for item in events:
@@ -126,7 +126,7 @@ def _from_list(ical, prop):
         url = _get_prop('URL', item)
 
         rrule = _get_prop('RRULE', item)
-        rrule = rrule and 'RRULE:%s' % rrule.to_ical() or ''
+        rrule = 'RRULE:%s' % rrule.to_ical() if rrule else ''
         rdates = _from_list(item, 'RDATE')
         exdates = _from_list(item, 'EXDATE')
         rrule = '\n'.join([it for it in [rrule, rdates, exdates] if it])
diff --git a/plone/app/event/portlets/portlet_calendar.pt b/plone/app/event/portlets/portlet_calendar.pt
index 6909b49..f17f21d 100644
--- a/plone/app/event/portlets/portlet_calendar.pt
+++ b/plone/app/event/portlets/portlet_calendar.pt
@@ -57,10 +57,10 @@
                           events day/events;
                           limit python:len(events) if events is not None else 0"
               tal:attributes="class python:u'event%s%s%s%s' %
-                          ((today and ' today' or ''),
-                          (next_month and ' cal_next_month' or ''),
-                          (prev_month and ' cal_prev_month' or ''),
-                          (events and ' cal_has_events' or ''))">
+                          ((' today' if today else ''),
+                          (' cal_next_month' if next_month else ''),
+                          (' cal_prev_month' if prev_month else ''),
+                          (' cal_has_events' if events else ''))">
             <tal:comment tal:condition="nothing">Add span or a to style td children and not td</tal:comment>
             <span
                 tal:condition="not:events"
diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py
index 07cdbc7..bd2049c 100644
--- a/plone/app/event/portlets/portlet_calendar.py
+++ b/plone/app/event/portlets/portlet_calendar.py
@@ -211,9 +211,9 @@ def cal_data(self):
                     events_string += base % (
                         accessor.url,
                         accessor.title,
-                        not whole_day and u' %s' % time or u'',
-                        not whole_day and location and u', ' or u'',
-                        location and u' %s' % location or u'')
+                        u' %s' % time if not whole_day else u'',
+                        u', ' if not whole_day and location else u'',
+                        u' %s' % location if location else u'')
 
             caldata[-1].append(
                 {'date': dat,
diff --git a/plone/app/event/portlets/portlet_events.pt b/plone/app/event/portlets/portlet_events.pt
index 52ebfdb..fdf70ff 100644
--- a/plone/app/event/portlets/portlet_events.pt
+++ b/plone/app/event/portlets/portlet_events.pt
@@ -19,7 +19,7 @@
       <tal:events repeat="item view/events">
       <li class="portletItem"
           tal:define="oddrow repeat/item/odd"
-          tal:attributes="class python:oddrow and 'portletItem even' or 'portletItem odd'">
+          tal:attributes="class python:'portletItem odd' if oddrow else 'portletItem even'">
         <a href="#" class="tile"
             tal:attributes="href item/url;
                             title item/description">
diff --git a/plone/app/event/testing.py b/plone/app/event/testing.py
index fed4fd2..ee1b6f7 100644
--- a/plone/app/event/testing.py
+++ b/plone/app/event/testing.py
@@ -36,7 +36,7 @@ def set_env_timezone(tz):
 
 
 def os_zone():
-    return 'TZ' in os.environ.keys() and os.environ['TZ'] or None
+    return os.environ['TZ'] if 'TZ' in os.environ.keys() else None
 
 
 def make_fake_response(request):


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-18T05:51:28+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/c48729f44e079b4ebaea534ca49fd28e73a8b724

move upgrade steps to here

Files changed:
A plone/app/event/upgrades/__init__.py
A plone/app/event/upgrades/configure.zcml
A plone/app/event/upgrades/upgrades.py
M plone/app/event/configure.zcml
M plone/app/event/dx/configure.zcml
D plone/app/event/dx/upgrades/__init__.py
D plone/app/event/dx/upgrades/configure.zcml
D plone/app/event/dx/upgrades/upgrades.py

diff --git a/plone/app/event/configure.zcml b/plone/app/event/configure.zcml
index dd29e50..9dda541 100644
--- a/plone/app/event/configure.zcml
+++ b/plone/app/event/configure.zcml
@@ -22,6 +22,7 @@
   <include package=".portlets" />
   <include package=".ical" />
   <include file="recurrence.zcml" />
+  <include package=".upgrades" />
   <include package=".bbb" zcml:condition="not-have plone-5" />
 
   <utility
diff --git a/plone/app/event/dx/configure.zcml b/plone/app/event/dx/configure.zcml
index 33e1f6e..3ff68a6 100644
--- a/plone/app/event/dx/configure.zcml
+++ b/plone/app/event/dx/configure.zcml
@@ -6,7 +6,6 @@
     <include package="plone.dexterity" />
     <include package="plone.app.dexterity" /><!-- To initialize DublinCore behaviors -->
     <include package="plone.behavior" file="meta.zcml" />
-    <include package=".upgrades" />
 
     <!-- http://groups.google.com/group/zope-core-dev/browse_thread/thread/6c10ebc16027017f -->
     <!-- ZCML of this package fails in Zope 2.13 for strange reason -->
diff --git a/plone/app/event/dx/upgrades/__init__.py b/plone/app/event/dx/upgrades/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/plone/app/event/dx/upgrades/configure.zcml b/plone/app/event/dx/upgrades/configure.zcml
deleted file mode 100644
index e830ecb..0000000
--- a/plone/app/event/dx/upgrades/configure.zcml
+++ /dev/null
@@ -1,23 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup">
-
-  <genericsetup:upgradeStep
-      source="12"
-      destination="13"
-      title="New IRichText behavior"
-      description="Enable the new IRichText instead of the IEventSummary behavior."
-      profile="plone.app.event:default"
-      handler=".upgrades.enable_richtext_behavior"
-      />
-
-  <genericsetup:upgradeStep
-      source="12"
-      destination="13"
-      title="Attribute storage"
-      description="Migrate fields from annotation storage to attribute storage."
-      profile="plone.app.event:default"
-      handler=".upgrades.upgrade_attribute_storage"
-      />
-
-</configure>
diff --git a/plone/app/event/dx/upgrades/upgrades.py b/plone/app/event/dx/upgrades/upgrades.py
deleted file mode 100644
index aa4e7c2..0000000
--- a/plone/app/event/dx/upgrades/upgrades.py
+++ /dev/null
@@ -1,78 +0,0 @@
-# -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from plone.app.event.dx.interfaces import IDXEvent
-from plone.app.event.dx.behaviors import IEventAttendees
-from plone.app.event.dx.behaviors import IEventContact
-from plone.app.event.dx.behaviors import IEventLocation
-from plone.dexterity.interfaces import IDexterityFTI
-from zope.annotation.interfaces import IAnnotatable
-from zope.annotation.interfaces import IAnnotations
-from zope.event import notify
-from zope.component import queryUtility
-from zope.component.hooks import getSite
-from zope.lifecycleevent import ObjectModifiedEvent
-
-import logging
-log = logging.getLogger(__name__)
-
-BEHAVIOR_LIST = [
-    IEventAttendees,
-    IEventContact,
-    IEventLocation,
-]
-
-
-def enable_richtext_behavior(self):
-    fti = queryUtility(IDexterityFTI, name="Event", default=None)
-    if not fti:
-        return
-    behaviors = [it for it in fti.behaviors
-                 if 'plone.app.event.dx.behaviors.IEventSummary' not in it]
-    behaviors.extend([
-        'plone.app.contenttypes.behaviors.richtext.IRichText',
-    ])
-    behaviors = tuple(set(behaviors))
-    fti._updateProperty('behaviors', behaviors)
-
-
-def upgrade_attribute_storage(context):
-    portal = getSite()
-    catalog = getToolByName(portal, 'portal_catalog')
-    query = {}
-    query['object_provides'] = IDXEvent.__identifier__
-    results = catalog(**query)
-    log.info('There are {0} in total, stating migration...'.format(
-        len(results)))
-    for result in results:
-        try:
-            event = result.getObject()
-        except:
-            log.warning(
-                'Not possible to fetch event object from catalog result for '
-                'item: {0}.'.format(result.getPath()))
-            continue
-        if not IAnnotatable.providedBy(event):
-            log.warning(
-                'The event at {0} does provide annotation capabilities, '
-                'skipping.'.format(event.absolute_url()))
-            continue
-        annotations = IAnnotations(event)
-        did_work = False
-        for behavior in BEHAVIOR_LIST:
-            for name in behavior.names():
-                fullname = '{0}.{1}'.format(behavior.__identifier__, name)
-                oldvalue = annotations.get(fullname, None)
-                # Only write the old value if there is no new value yet
-                if oldvalue and not getattr(event, name, None):
-                    setattr(event, name, oldvalue)
-                    did_work = True
-        # The old IEventSummary behavior is gone, just look for the old name
-        # inside the annotation storage
-        oldvalue = annotations.get(
-            'plone.app.event.dx.behaviors.IEventSummary.text', None)
-        if oldvalue and not getattr(event, 'text', None):
-            setattr(event, 'text', oldvalue)
-            did_work = True
-        if did_work:
-            notify(ObjectModifiedEvent(event))
-        log.debug('Handled event at {0}'.format(event.absolute_url()))
diff --git a/plone/app/event/upgrades/__init__.py b/plone/app/event/upgrades/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/plone/app/event/upgrades/configure.zcml b/plone/app/event/upgrades/configure.zcml
new file mode 100644
index 0000000..e830ecb
--- /dev/null
+++ b/plone/app/event/upgrades/configure.zcml
@@ -0,0 +1,23 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup">
+
+  <genericsetup:upgradeStep
+      source="12"
+      destination="13"
+      title="New IRichText behavior"
+      description="Enable the new IRichText instead of the IEventSummary behavior."
+      profile="plone.app.event:default"
+      handler=".upgrades.enable_richtext_behavior"
+      />
+
+  <genericsetup:upgradeStep
+      source="12"
+      destination="13"
+      title="Attribute storage"
+      description="Migrate fields from annotation storage to attribute storage."
+      profile="plone.app.event:default"
+      handler=".upgrades.upgrade_attribute_storage"
+      />
+
+</configure>
diff --git a/plone/app/event/upgrades/upgrades.py b/plone/app/event/upgrades/upgrades.py
new file mode 100644
index 0000000..aa4e7c2
--- /dev/null
+++ b/plone/app/event/upgrades/upgrades.py
@@ -0,0 +1,78 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from plone.app.event.dx.interfaces import IDXEvent
+from plone.app.event.dx.behaviors import IEventAttendees
+from plone.app.event.dx.behaviors import IEventContact
+from plone.app.event.dx.behaviors import IEventLocation
+from plone.dexterity.interfaces import IDexterityFTI
+from zope.annotation.interfaces import IAnnotatable
+from zope.annotation.interfaces import IAnnotations
+from zope.event import notify
+from zope.component import queryUtility
+from zope.component.hooks import getSite
+from zope.lifecycleevent import ObjectModifiedEvent
+
+import logging
+log = logging.getLogger(__name__)
+
+BEHAVIOR_LIST = [
+    IEventAttendees,
+    IEventContact,
+    IEventLocation,
+]
+
+
+def enable_richtext_behavior(self):
+    fti = queryUtility(IDexterityFTI, name="Event", default=None)
+    if not fti:
+        return
+    behaviors = [it for it in fti.behaviors
+                 if 'plone.app.event.dx.behaviors.IEventSummary' not in it]
+    behaviors.extend([
+        'plone.app.contenttypes.behaviors.richtext.IRichText',
+    ])
+    behaviors = tuple(set(behaviors))
+    fti._updateProperty('behaviors', behaviors)
+
+
+def upgrade_attribute_storage(context):
+    portal = getSite()
+    catalog = getToolByName(portal, 'portal_catalog')
+    query = {}
+    query['object_provides'] = IDXEvent.__identifier__
+    results = catalog(**query)
+    log.info('There are {0} in total, stating migration...'.format(
+        len(results)))
+    for result in results:
+        try:
+            event = result.getObject()
+        except:
+            log.warning(
+                'Not possible to fetch event object from catalog result for '
+                'item: {0}.'.format(result.getPath()))
+            continue
+        if not IAnnotatable.providedBy(event):
+            log.warning(
+                'The event at {0} does provide annotation capabilities, '
+                'skipping.'.format(event.absolute_url()))
+            continue
+        annotations = IAnnotations(event)
+        did_work = False
+        for behavior in BEHAVIOR_LIST:
+            for name in behavior.names():
+                fullname = '{0}.{1}'.format(behavior.__identifier__, name)
+                oldvalue = annotations.get(fullname, None)
+                # Only write the old value if there is no new value yet
+                if oldvalue and not getattr(event, name, None):
+                    setattr(event, name, oldvalue)
+                    did_work = True
+        # The old IEventSummary behavior is gone, just look for the old name
+        # inside the annotation storage
+        oldvalue = annotations.get(
+            'plone.app.event.dx.behaviors.IEventSummary.text', None)
+        if oldvalue and not getattr(event, 'text', None):
+            setattr(event, 'text', oldvalue)
+            did_work = True
+        if did_work:
+            notify(ObjectModifiedEvent(event))
+        log.debug('Handled event at {0}'.format(event.absolute_url()))


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-03-18T05:54:50+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/c0093520e30edfc9c57448e571fcbfa138cb41f8

event_listing change: search only in current folder, remove event_listing_settings

Files changed:
M CHANGES.rst
M plone/app/event/browser/configure.zcml
M plone/app/event/browser/event_listing.py
M plone/app/event/profiles/default/actions.xml
M plone/app/event/profiles/default/metadata.xml
M plone/app/event/tests/test_dx_behaviors.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/upgrades/configure.zcml
M plone/app/event/upgrades/upgrades.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dd65c4c..894d54c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,12 @@ Changelog
 2.0a8 (unreleased)
 ------------------
 
+- Change ``event_listing`` to search only in current context and below, not the
+  whole portal by default. Remove the setting ``current_folder_only``, which
+  was annotated to the context. Since the collection support is much better now,
+  use them for custom searches.
+  [thet]
+
 - Fix a bug in displaying the ``event_listing`` on Collections. Show the date
   filter on Collections, if no start/end critierias are given in the
   Collection's query.
diff --git a/plone/app/event/browser/configure.zcml b/plone/app/event/browser/configure.zcml
index 46a1784..2c5c72d 100644
--- a/plone/app/event/browser/configure.zcml
+++ b/plone/app/event/browser/configure.zcml
@@ -34,15 +34,6 @@
         permission="zope2.View"
         layer="..interfaces.IBrowserLayer"
         />
-    <adapter factory=".event_listing.EventListingSettings"/>
-    <browser:page
-        name="event_listing_settings"
-        for="*"
-        permission="zope2.View"
-        class=".event_listing.EventListingSettingsFormView"
-        layer="..interfaces.IBrowserLayer"
-        />
-
 
     <!-- Event view -->
     <browser:page
diff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py
index 8625d64..ae887aa 100644
--- a/plone/app/event/browser/event_listing.py
+++ b/plone/app/event/browser/event_listing.py
@@ -4,7 +4,6 @@
 from datetime import date
 from datetime import timedelta
 from plone.app.event import messageFactory as _
-from plone.app.event.base import AnnotationAdapter
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import RET_MODE_OBJECTS
 from plone.app.event.base import _prepare_range
@@ -21,16 +20,8 @@
 from plone.app.querystring import queryparser
 from plone.memoize import view
 from plone.uuid.interfaces import IUUID
-from plone.z3cform.layout import wrap_form
-from z3c.form import button
-from z3c.form import field
-from z3c.form import form
-from zope import schema
-from zope.component import adapts
 from zope.component import getMultiAdapter
 from zope.contentprovider.interfaces import IContentProvider
-from zope.interface import Interface
-from zope.interface import implements
 
 try:
     from plone.app.contenttypes.interfaces import ICollection
@@ -44,7 +35,6 @@ def __init__(self, context, request):
         super(EventListing, self).__init__(context, request)
 
         self.now = now = localized_now(context)
-        self.settings = IEventListingSettings(self.context)
 
         # Request parameter
         req = self.request.form
@@ -122,7 +112,8 @@ def _get_events(self, ret_mode=RET_MODE_ACCESSORS, expand=True):
         else:
             if self.path:
                 kw['path'] = self.path
-            elif self.settings.current_folder_only:
+            else:
+                # Search current and subsequent folders
                 kw['path'] = '/'.join(context.getPhysicalPath())
 
             if self.tags:
@@ -208,6 +199,33 @@ def ical_url(self):
             qstr
         )
 
+    # COLLECTION daterange start/end determination
+    def _expand_events_start_end(self, start, end):
+        # make sane start and end values for expand_events from
+        # Collection start/end criterions.
+        # if end/min is given, it overrides start/min settings to make sure,
+        # ongoing events are shown in the listing!
+        # XXX: This actually fits most needs, but not all. Maybe someone
+        # wants to come up with some edgecases!
+        se = dict(start=None, end=None)
+        if start:
+            q = start.get('query')
+            r = start.get('range')
+            if r == "min":
+                se["start"] = q
+            elif r == "max":
+                se["end"] = q
+            elif r in ("minmax", "min:max"):
+                list(q).sort()
+                se["start"] = q[0]
+                se["end"] = q[1]
+        if end:
+            q = end.get('query')
+            r = end.get('range')
+            if r == "min":
+                se["start"] = q
+        return se["start"], se["end"]
+
     def get_location(self, occ):
         return get_location(occ)
 
@@ -406,33 +424,6 @@ def prev_month_url(self):
         datestr = (now.replace(day=1) - timedelta(days=1)).date().isoformat()
         return self._date_nav_url('month', datestr)
 
-    # COLLECTION daterange start/end determination
-    def _expand_events_start_end(self, start, end):
-        # make sane start and end values for expand_events from
-        # Collection start/end criterions.
-        # if end/min is given, it overrides start/min settings to make sure,
-        # ongoing events are shown in the listing!
-        # XXX: This actually fits most needs, but not all. Maybe someone
-        # wants to come up with some edgecases!
-        se = dict(start=None, end=None)
-        if start:
-            q = start.get('query')
-            r = start.get('range')
-            if r == "min":
-                se["start"] = q
-            elif r == "max":
-                se["end"] = q
-            elif r in ("minmax", "min:max"):
-                list(q).sort()
-                se["start"] = q[0]
-                se["end"] = q[1]
-        if end:
-            q = end.get('query')
-            r = end.get('range')
-            if r == "min":
-                se["start"] = q
-        return se["start"], se["end"]
-
 
 class EventListingIcal(EventListing):
     def __call__(self, *args, **kwargs):
@@ -447,51 +438,3 @@ class EventEventListing(EventListing):
     def __init__(self, context, request):
         super(EventEventListing, self).__init__(context, request)
         self.uid = IUUID(self.context)
-
-
-class IEventListingSettings(Interface):
-
-    current_folder_only = schema.Bool(
-        title=_('label_current_folder', default=u'Current folder'),
-        description=_('help_current_folder',
-                      default=u'Search events in current folder only.'),
-        default=False
-    )
-
-
-class EventListingSettings(AnnotationAdapter):
-    """Annotation Adapter for IEventListingSettings
-    """
-    implements(IEventListingSettings)
-    adapts(Interface)
-    ANNOTATION_KEY = "plone.app.event-event_listing-settings"
-
-
-class EventListingSettingsForm(form.Form):
-    fields = field.Fields(IEventListingSettings)
-    ignoreContext = False
-
-    def getContent(self):
-        data = {}
-        settings = IEventListingSettings(self.context)
-        data['current_folder_only'] = settings.current_folder_only
-        return data
-
-    def form_next(self):
-        self.request.response.redirect(self.context.absolute_url())
-
-    @button.buttonAndHandler(u'Save')
-    def handleSave(self, action):
-        data, errors = self.extractData()
-        if errors:
-            return False
-        settings = IEventListingSettings(self.context)
-        settings.current_folder_only = data['current_folder_only']
-        self.form_next()
-
-    @button.buttonAndHandler(u'Cancel')
-    def handleCancel(self, action):
-        self.form_next()
-
-
-EventListingSettingsFormView = wrap_form(EventListingSettingsForm)
diff --git a/plone/app/event/profiles/default/actions.xml b/plone/app/event/profiles/default/actions.xml
index 87d8e9c..3ce0e03 100644
--- a/plone/app/event/profiles/default/actions.xml
+++ b/plone/app/event/profiles/default/actions.xml
@@ -3,17 +3,6 @@
    xmlns:i18n="http://xml.zope.org/namespaces/i18n">
 
  <object name="object" meta_type="CMF Action Category">
-  <object name="event_listing_settings" meta_type="CMF Action" i18n:domain="plone.app.event">
-   <property name="title" i18n:translate="title_event_listing_settings">Event Listing Settings</property>
-   <property name="description" i18n:translate="help_event_listing_settings">Settings for the event listing view.</property>
-   <property name="url_expr">string:${object_url}/@@event_listing_settings</property>
-   <property name="icon_expr"></property>
-   <property name="available_expr">python:object.defaultView() == 'event_listing' and object.portal_type != 'Collection'</property>
-   <property name="permissions">
-    <element value="Manage properties"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
   <object name="ical_import_settings" meta_type="CMF Action" i18n:domain="plone.app.event">
    <property name="title" i18n:translate="title_ical_import">Ical import</property>
    <property name="description" i18n:translate="help_ical_import">Import Events from icalendar files.</property>
diff --git a/plone/app/event/profiles/default/metadata.xml b/plone/app/event/profiles/default/metadata.xml
index 0999b8c..0508d3d 100644
--- a/plone/app/event/profiles/default/metadata.xml
+++ b/plone/app/event/profiles/default/metadata.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>14</version>
+  <version>15</version>
   <dependencies>
     <dependency>profile-plone.app.registry:default</dependency>
     <dependency>profile-plone.app.widgets:default</dependency>
diff --git a/plone/app/event/tests/test_dx_behaviors.py b/plone/app/event/tests/test_dx_behaviors.py
index 4adb2c7..fb48f3c 100644
--- a/plone/app/event/tests/test_dx_behaviors.py
+++ b/plone/app/event/tests/test_dx_behaviors.py
@@ -11,7 +11,7 @@
 from plone.app.event.dx.behaviors import default_start
 from plone.app.event.dx.interfaces import IDXEvent
 from plone.app.event.dx.interfaces import IDXEventRecurrence
-from plone.app.event.dx.upgrades.upgrades import upgrade_attribute_storage
+from plone.app.event.upgrades.upgrades import upgrade_attribute_storage
 from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING
 from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING
 from plone.app.event.testing import set_browserlayer
diff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py
index b36cfb1..54b4aac 100644
--- a/plone/app/event/tests/test_event_listing.py
+++ b/plone/app/event/tests/test_event_listing.py
@@ -18,21 +18,21 @@ def _listing_view(self, name='@@event_listing'):
     def test_get_events_future(self):
         # Default mode is to show all events from now on.
         view = self._listing_view()
-        self.assertEqual(len(view._get_events()), 5)
+        self.assertEqual(len(view.events(batch=False)), 5)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
     def test_get_events_past(self):
         self.request.form.update({'mode': 'past'})
         view = self._listing_view()
-        self.assertEqual(len(view._get_events()), 5)
+        self.assertEqual(len(view.events(batch=False)), 5)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
     def test_get_events_all(self):
         self.request.form.update({'mode': 'all'})
         view = self._listing_view()
-        self.assertEqual(len(view._get_events()), 8)
+        self.assertEqual(len(view.events(batch=False)), 8)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
@@ -40,7 +40,7 @@ def test_get_events_today(self):
         today = localized_today().isoformat()
         self.request.form.update({'mode': 'day', 'date': today})
         view = self._listing_view()
-        self.assertEqual(len(view._get_events()), 2)
+        self.assertEqual(len(view.events(batch=False)), 2)
 
     @mock.patch('plone.app.event.browser.event_listing.localized_now', new=PN)
     @mock.patch('plone.app.event.base.localized_now', new=PN)
diff --git a/plone/app/event/upgrades/configure.zcml b/plone/app/event/upgrades/configure.zcml
index e830ecb..a517386 100644
--- a/plone/app/event/upgrades/configure.zcml
+++ b/plone/app/event/upgrades/configure.zcml
@@ -20,4 +20,13 @@
       handler=".upgrades.upgrade_attribute_storage"
       />
 
+  <genericsetup:upgradeStep
+      source="14"
+      destination="15"
+      title="Remove object-action event_listing_settings"
+      description=""
+      profile="plone.app.event:default"
+      handler=".upgrades.remove_event_listing_settings"
+      />
+
 </configure>
diff --git a/plone/app/event/upgrades/upgrades.py b/plone/app/event/upgrades/upgrades.py
index aa4e7c2..d7c8662 100644
--- a/plone/app/event/upgrades/upgrades.py
+++ b/plone/app/event/upgrades/upgrades.py
@@ -76,3 +76,12 @@ def upgrade_attribute_storage(context):
         if did_work:
             notify(ObjectModifiedEvent(event))
         log.debug('Handled event at {0}'.format(event.absolute_url()))
+
+
+def remove_event_listing_settings(context):
+    portal = getSite()
+    actions = getToolByName(portal, 'portal_actions')
+    ob = getattr(actions, 'object')
+    if ob and getattr(ob, 'event_listing_settings', False):
+        actions.object.manage_delObjects(['event_listing_settings', ])
+        log.debug('Removed event_listing_settings from object actions.')


