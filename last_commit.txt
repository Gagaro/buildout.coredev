Repository: plone.dexterity
Branch: refs/heads/master
Date: 2015-05-18T16:11:52+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.dexterity/commit/9a16c5059fbc5b16cb0da152dcf7dc64640e18e2

Fix to pass resource name from webdav PUT to createObject

Files changed:
M CHANGES.rst
M plone/dexterity/filerepresentation.py
M plone/dexterity/tests/test_webdav.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8605cdf..977d21b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,8 @@ Changelog
 2.3.1 (unreleased)
 ------------------
 
+- Fix issue where webdav PUT created items with empty id
+  [datakurre]
 - fix #27: createContent ignores empty fields
   [jensens]
 
diff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py
index 4b41b02..5effd9d 100644
--- a/plone/dexterity/filerepresentation.py
+++ b/plone/dexterity/filerepresentation.py
@@ -481,7 +481,7 @@ def __call__(self, name, contentType, data):
                     typeObjectName
                 )
 
-            obj = createObject(targetType.factory)
+            obj = createObject(targetType.factory, name)
 
             if hasattr(obj, '_setPortalTypeName'):
                 obj._setPortalTypeName(targetType.getId())
diff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py
index df8edb9..3678504 100644
--- a/plone/dexterity/tests/test_webdav.py
+++ b/plone/dexterity/tests/test_webdav.py
@@ -1098,6 +1098,66 @@ def factory(*args, **kwargs):
             factory('test.html', 'text/html', '<html />')
         )
 
+    def test_file_factory_content_type_factory_utility(self):
+        container_mock = self.mocker.mock()
+        child_fti_mock = self.mocker.mock()
+        container_fti_mock = self.mocker.mock()
+        ctr_mock = self.mocker.mock()
+        pt_mock = self.mocker.mock()
+
+        getToolByName_mock = self.mocker.replace(
+            'Products.CMFCore.utils.getToolByName'
+        )
+
+        self.expect(
+            getToolByName_mock(
+                container_mock, 'content_type_registry', None
+            )
+        ).result(ctr_mock)
+
+        self.expect(
+            getToolByName_mock(
+                container_mock, 'portal_types')).result(pt_mock)
+
+        self.expect(
+            ctr_mock.findTypeName('test.html', 'text/html', '<html />')
+        ).result('childtype')
+
+        self.expect(
+            pt_mock.getTypeInfo('childtype')
+        ).result(child_fti_mock)
+
+        self.expect(
+            pt_mock.getTypeInfo(container_mock)
+        ).result(container_fti_mock)
+
+        self.expect(
+            container_fti_mock.allowType('childtype')
+        ).result(True)
+
+        self.expect(
+            child_fti_mock.isConstructionAllowed(container_mock)
+        ).result(True)
+
+        self.expect(
+            child_fti_mock.getId()
+        ).result('childtype')
+
+        self.expect(child_fti_mock.product).result(None)
+        self.expect(child_fti_mock.factory).result('childtype-factory')
+
+        def factory(*args, **kwargs):
+            return Item(*args, **kwargs)
+        self.mock_utility(factory, IFactory, name=u'childtype-factory')
+
+        factory = DefaultFileFactory(container_mock)
+
+        self.replay()
+
+        item = factory('test.html', 'text/html', '<html />')
+
+        self.assertEqual('test.html', item.id)
+
     def test_readfile_mimetype_no_message_no_fields(self):
 
         class ITest(Interface):


Repository: plone.dexterity
Branch: refs/heads/master
Date: 2015-05-18T20:30:06-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/15526f7778a670280df2c4ee0f3976367c3c0b0b

Merge pull request #29 from plone/datakurre-fix-webdav-item-id

Fix to pass resource name from webdav PUT to createObject

Files changed:
M CHANGES.rst
M plone/dexterity/filerepresentation.py
M plone/dexterity/tests/test_webdav.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8605cdf..977d21b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,8 @@ Changelog
 2.3.1 (unreleased)
 ------------------
 
+- Fix issue where webdav PUT created items with empty id
+  [datakurre]
 - fix #27: createContent ignores empty fields
   [jensens]
 
diff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py
index 4b41b02..5effd9d 100644
--- a/plone/dexterity/filerepresentation.py
+++ b/plone/dexterity/filerepresentation.py
@@ -481,7 +481,7 @@ def __call__(self, name, contentType, data):
                     typeObjectName
                 )
 
-            obj = createObject(targetType.factory)
+            obj = createObject(targetType.factory, name)
 
             if hasattr(obj, '_setPortalTypeName'):
                 obj._setPortalTypeName(targetType.getId())
diff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py
index df8edb9..3678504 100644
--- a/plone/dexterity/tests/test_webdav.py
+++ b/plone/dexterity/tests/test_webdav.py
@@ -1098,6 +1098,66 @@ def factory(*args, **kwargs):
             factory('test.html', 'text/html', '<html />')
         )
 
+    def test_file_factory_content_type_factory_utility(self):
+        container_mock = self.mocker.mock()
+        child_fti_mock = self.mocker.mock()
+        container_fti_mock = self.mocker.mock()
+        ctr_mock = self.mocker.mock()
+        pt_mock = self.mocker.mock()
+
+        getToolByName_mock = self.mocker.replace(
+            'Products.CMFCore.utils.getToolByName'
+        )
+
+        self.expect(
+            getToolByName_mock(
+                container_mock, 'content_type_registry', None
+            )
+        ).result(ctr_mock)
+
+        self.expect(
+            getToolByName_mock(
+                container_mock, 'portal_types')).result(pt_mock)
+
+        self.expect(
+            ctr_mock.findTypeName('test.html', 'text/html', '<html />')
+        ).result('childtype')
+
+        self.expect(
+            pt_mock.getTypeInfo('childtype')
+        ).result(child_fti_mock)
+
+        self.expect(
+            pt_mock.getTypeInfo(container_mock)
+        ).result(container_fti_mock)
+
+        self.expect(
+            container_fti_mock.allowType('childtype')
+        ).result(True)
+
+        self.expect(
+            child_fti_mock.isConstructionAllowed(container_mock)
+        ).result(True)
+
+        self.expect(
+            child_fti_mock.getId()
+        ).result('childtype')
+
+        self.expect(child_fti_mock.product).result(None)
+        self.expect(child_fti_mock.factory).result('childtype-factory')
+
+        def factory(*args, **kwargs):
+            return Item(*args, **kwargs)
+        self.mock_utility(factory, IFactory, name=u'childtype-factory')
+
+        factory = DefaultFileFactory(container_mock)
+
+        self.replay()
+
+        item = factory('test.html', 'text/html', '<html />')
+
+        self.assertEqual('test.html', item.id)
+
     def test_readfile_mimetype_no_message_no_fields(self):
 
         class ITest(Interface):


