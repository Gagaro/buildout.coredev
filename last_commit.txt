Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-07T18:54:21+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.protect/commit/21f16207fc49fa3394d1733dcbd5206f2d5d33d3

Avoid TypeError when checking the content-type header.

Files changed:
M CHANGES.rst
M plone/protect/auto.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2f96a80..d448ba7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,9 @@ Changelog
 3.0.14 (unreleased)
 -------------------
 
-- nothing.
+- Avoid TypeError when checking the content-type header.
+  [maurits]
+
 
 3.0.13 (2015-10-07)
 -------------------
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index ef6172f..e89f2d7 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -221,7 +221,7 @@ def _check(self):
                     #   write on read, without a POST request and we don't
                     #   know what to do with it gracefully.
                     resp = self.request.response
-                    ct = resp.headers.get('content-type')
+                    ct = resp.getHeader('Content-Type', '')
                     if self.site and (
                             resp.status in (301, 302) or 'text/html' in ct):
                         data = self.request.form.copy()


Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-07T18:57:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.protect/commit/180fc694fe9300d54240226f43b4914bae71ddc4

Be more flexible in parsing the 'PLONE_CSRF_DISABLED' environment variable.

We are no longer case sensitive, and we accept 'true', 't', 'yes',
'y', '1' as true values.

Files changed:
M CHANGES.rst
M plone/protect/auto.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d448ba7..02f540d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 3.0.14 (unreleased)
 -------------------
 
+- Be more flexible in parsing the ``PLONE_CSRF_DISABLED`` environment
+  variable.  We are no longer case sensitive, and we accept ``true``,
+  ``t``, ``yes``, ``y``, ``1`` as true values.
+  [maurits]
+
 - Avoid TypeError when checking the content-type header.
   [maurits]
 
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index e89f2d7..c8d97e9 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -36,7 +36,8 @@
 LOGGER = logging.getLogger('plone.protect')
 
 X_FRAME_OPTIONS = os.environ.get('PLONE_X_FRAME_OPTIONS', 'SAMEORIGIN')
-CSRF_DISABLED = os.environ.get('PLONE_CSRF_DISABLED', 'false') == 'true'
+CSRF_DISABLED = os.environ.get('PLONE_CSRF_DISABLED', 'false').lower() in \
+    ('true', 't', 'yes', 'y', '1')
 
 
 class ProtectTransform(object):


Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-07T19:24:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.protect/commit/b78707fb3fa06fecc412870a745272753f84c2fa

Allow opt-out of PLONE_X_FRAME_OPTIONS.

You can opt out of clickjacking protection by setting the
environment variable PLONE_X_FRAME_OPTIONS to an empty string.

Files changed:
M CHANGES.rst
M README.rst
M plone/protect/auto.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 02f540d..f7b291a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 3.0.14 (unreleased)
 -------------------
 
+- You can opt out of clickjacking protection by setting the
+  environment variable ``PLONE_X_FRAME_OPTIONS`` to an empty string.
+  [maurits]
+
 - Be more flexible in parsing the ``PLONE_CSRF_DISABLED`` environment
   variable.  We are no longer case sensitive, and we accept ``true``,
   ``t``, ``yes``, ``y``, ``1`` as true values.
diff --git a/README.rst b/README.rst
index ff68f08..2a5ef65 100644
--- a/README.rst
+++ b/README.rst
@@ -186,6 +186,8 @@ To customize this value, you can either override it at your proxy server or
 you can set the environment variable of `PLONE_X_FRAME_OPTIONS` to whatever
 value you'd like plone.protect to set this to.
 
+You can opt out of this by making the environment variable empty.
+
 
 Disable All Automatic CSRF Protection
 =====================================
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index c8d97e9..27f4c32 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -103,7 +103,8 @@ def transformIterable(self, result, encoding):
         """
 
         # before anything, do the clickjacking protection
-        self.request.response.setHeader('X-Frame-Options', X_FRAME_OPTIONS)
+        if X_FRAME_OPTIONS:
+            self.request.response.setHeader('X-Frame-Options', X_FRAME_OPTIONS)
 
         if CSRF_DISABLED:
             return


Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-07T19:26:29+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.protect/commit/d96db079564437f7232d3b79331fa370f678babf

README: print more terms literal instead of italic.

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index 2a5ef65..978211c 100644
--- a/README.rst
+++ b/README.rst
@@ -94,7 +94,7 @@ Or just::
 Headers
 -------
 
-You can also pass in the token by using the header `X-CSRF-TOKEN`. This can be
+You can also pass in the token by using the header ``X-CSRF-TOKEN``. This can be
 useful for AJAX requests.
 
 
@@ -167,7 +167,7 @@ exploits so do any required CSRF protection manually.
 If you just want to allow an object to be writable on a request...
 ******************************************************************
 
-You can use the `safeWrite` helper function.
+You can use the ``safeWrite`` helper function.
 
     from plone.protect.auto import safeWrite
     safeWrite(myobj, request)
@@ -180,10 +180,10 @@ plone.protect also provides, by default, clickjacking protection since
 version 3.0.
 
 To protect against this attack, plone employs the use of the X-Frame-Options
-header. plone.protect will set the X-Frame-Options value to `SAMEORIGIN`.
+header. plone.protect will set the X-Frame-Options value to ``SAMEORIGIN``.
 
 To customize this value, you can either override it at your proxy server or
-you can set the environment variable of `PLONE_X_FRAME_OPTIONS` to whatever
+you can set the environment variable of ``PLONE_X_FRAME_OPTIONS`` to whatever
 value you'd like plone.protect to set this to.
 
 You can opt out of this by making the environment variable empty.
@@ -193,7 +193,7 @@ Disable All Automatic CSRF Protection
 =====================================
 
 To disable all automatic CSRF protection, set the environment variable
-`PLONE_CSRF_DISABLED` value to `true`.
+``PLONE_CSRF_DISABLED`` value to ``true``.
 
 WARNING! It is very dangerous to do this. Do not do this unless the zeo client
 with this setting is not public and you know what you are doing.


Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-07T13:56:24-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.protect/commit/2266336e44b254b690d5383b96bdb5ce4a497579

Merge pull request #25 from plone/maurits-fixes

Fix for content-type header check and environment variable check.

Files changed:
M CHANGES.rst
M README.rst
M plone/protect/auto.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2f96a80..f7b291a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,18 @@ Changelog
 3.0.14 (unreleased)
 -------------------
 
-- nothing.
+- You can opt out of clickjacking protection by setting the
+  environment variable ``PLONE_X_FRAME_OPTIONS`` to an empty string.
+  [maurits]
+
+- Be more flexible in parsing the ``PLONE_CSRF_DISABLED`` environment
+  variable.  We are no longer case sensitive, and we accept ``true``,
+  ``t``, ``yes``, ``y``, ``1`` as true values.
+  [maurits]
+
+- Avoid TypeError when checking the content-type header.
+  [maurits]
+
 
 3.0.13 (2015-10-07)
 -------------------
diff --git a/README.rst b/README.rst
index ff68f08..978211c 100644
--- a/README.rst
+++ b/README.rst
@@ -94,7 +94,7 @@ Or just::
 Headers
 -------
 
-You can also pass in the token by using the header `X-CSRF-TOKEN`. This can be
+You can also pass in the token by using the header ``X-CSRF-TOKEN``. This can be
 useful for AJAX requests.
 
 
@@ -167,7 +167,7 @@ exploits so do any required CSRF protection manually.
 If you just want to allow an object to be writable on a request...
 ******************************************************************
 
-You can use the `safeWrite` helper function.
+You can use the ``safeWrite`` helper function.
 
     from plone.protect.auto import safeWrite
     safeWrite(myobj, request)
@@ -180,18 +180,20 @@ plone.protect also provides, by default, clickjacking protection since
 version 3.0.
 
 To protect against this attack, plone employs the use of the X-Frame-Options
-header. plone.protect will set the X-Frame-Options value to `SAMEORIGIN`.
+header. plone.protect will set the X-Frame-Options value to ``SAMEORIGIN``.
 
 To customize this value, you can either override it at your proxy server or
-you can set the environment variable of `PLONE_X_FRAME_OPTIONS` to whatever
+you can set the environment variable of ``PLONE_X_FRAME_OPTIONS`` to whatever
 value you'd like plone.protect to set this to.
 
+You can opt out of this by making the environment variable empty.
+
 
 Disable All Automatic CSRF Protection
 =====================================
 
 To disable all automatic CSRF protection, set the environment variable
-`PLONE_CSRF_DISABLED` value to `true`.
+``PLONE_CSRF_DISABLED`` value to ``true``.
 
 WARNING! It is very dangerous to do this. Do not do this unless the zeo client
 with this setting is not public and you know what you are doing.
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index ef6172f..27f4c32 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -36,7 +36,8 @@
 LOGGER = logging.getLogger('plone.protect')
 
 X_FRAME_OPTIONS = os.environ.get('PLONE_X_FRAME_OPTIONS', 'SAMEORIGIN')
-CSRF_DISABLED = os.environ.get('PLONE_CSRF_DISABLED', 'false') == 'true'
+CSRF_DISABLED = os.environ.get('PLONE_CSRF_DISABLED', 'false').lower() in \
+    ('true', 't', 'yes', 'y', '1')
 
 
 class ProtectTransform(object):
@@ -102,7 +103,8 @@ def transformIterable(self, result, encoding):
         """
 
         # before anything, do the clickjacking protection
-        self.request.response.setHeader('X-Frame-Options', X_FRAME_OPTIONS)
+        if X_FRAME_OPTIONS:
+            self.request.response.setHeader('X-Frame-Options', X_FRAME_OPTIONS)
 
         if CSRF_DISABLED:
             return
@@ -221,7 +223,7 @@ def _check(self):
                     #   write on read, without a POST request and we don't
                     #   know what to do with it gracefully.
                     resp = self.request.response
-                    ct = resp.headers.get('content-type')
+                    ct = resp.getHeader('Content-Type', '')
                     if self.site and (
                             resp.status in (301, 302) or 'text/html' in ct):
                         data = self.request.form.copy()


