Repository: mockup


Branch: refs/heads/master
Date: 2015-08-05T13:51:18-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/4ae86f0face4b1ea8998c38a70b430e6ea95fdf5

better interaction with insert uploaded image/link in tinymce

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/upload/pattern.js
M mockup/patterns/upload/templates/upload.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 0b17e10..ae280e6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- better interaction with insert uploaded image/link in tinymce
+  [vangheem]
+
 - add plone primary button styles for insert tinymce modals
   [vangheem]
 
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index f5057ca..873b1c8 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -581,7 +581,13 @@ define([
         self.options.upload.relatedItems.selectableTypes = self.options.folderTypes;
         self.$upload.addClass('pat-upload').patternUpload(self.options.upload);
         self.$upload.on('uploadAllCompleted', function(evt, data) {
-          self.linkTypes.image.set(data.data.UID);
+          if(self.linkTypes.image){
+            self.linkTypes.image.set(data.data.UID);
+            $('#tinylink-image' , self.modal.$modal).trigger('click');
+          }else{
+            self.linkTypes.internal.set(data.data.UID);
+            $('#tinylink-internal', self.modal.$modal).trigger('click');
+          }
         });
       }
 
diff --git a/mockup/patterns/upload/pattern.js b/mockup/patterns/upload/pattern.js
index 69779f8..de8f92e 100644
--- a/mockup/patterns/upload/pattern.js
+++ b/mockup/patterns/upload/pattern.js
@@ -7,7 +7,6 @@
  *    relativePath(string): again, to be used with baseUrl to create upload url (null)
  *    initialFolder(string): UID of initial folder related items widget should have selected (null)
  *    currentPath(string): Current path related items is starting with (null)
- *    clickable(boolean): If you can click on container to also upload (false)
  *    className(string): value for class attribute in the form element ('upload')
  *    paramName(string): value for name attribute in the file input element ('file')
  *    ajaxUpload(boolean): true or false for letting the widget upload the files via ajax. If false the form will act like a normal form. (true)
@@ -71,7 +70,6 @@ define([
       ajaxUpload: true,
 
       paramName: 'file',
-      clickable: true,
       addRemoveLinks: false,
       autoCleanResults: true,
       previewsContainer: '.previews',
@@ -98,7 +96,6 @@ define([
       // TODO: find a way to make this work in firefox (and IE)
       $(document).bind('paste', function(e){
         var oe = e.originalEvent;
-        var target = $(oe.target);
         var items = oe.clipboardData.items;
         if (items) {
           for (var i = 0; i < items.length; i++) {
@@ -111,7 +108,6 @@ define([
       });
       // values that will change current processing
       self.currentPath = self.options.currentPath;
-      self.numFiles = 0;
       self.currentFile = 0;
 
       template = _.template(template, {_t: _t});
@@ -153,8 +149,9 @@ define([
       $('button.browse', self.$el).click(function(e) {
         e.preventDefault();
         e.stopPropagation();
-        // we trigger the dropzone dialog!
-        self.dropzone.hiddenFileInput.click();
+        if(self.dropzone.files.length < self.options.maxFiles){
+          self.dropzone.hiddenFileInput.click();
+        }
       });
 
       var dzoneOptions = this.getDzoneOptions();
@@ -174,18 +171,16 @@ define([
         throw e;
       }
 
-      self.dropzone.on('addedfile', function(file) {
-        self.showControls();
+      self.dropzone.on('maxfilesreached', function(){
+        self.showHideControls();
+      });
+
+      self.dropzone.on('addedfile', function(/* file */) {
+        self.showHideControls();
       });
 
       self.dropzone.on('removedfile', function() {
-        if (self.dropzone.files.length < 1) {
-          self.hideControls();
-        } else {
-          // Clear the "you can not upload any more files" message
-          var file = self.dropzone.files[0];
-          $(".dz-error-message span", file.previewElement).html("");
-        }
+        self.showHideControls();
       });
 
       self.dropzone.on('success', function(e, response){
@@ -209,22 +204,22 @@ define([
       }
 
       self.dropzone.on('complete', function(file) {
-        if (file.status === Dropzone.SUCCESS && self.dropzone.files.length < 1) {
-          self.hideControls();
+        if (file.status === Dropzone.SUCCESS && self.dropzone.files.length === 1) {
+          self.showHideControls();
         }
       });
 
       self.dropzone.on('error', function(file, response, xmlhr) {
-        if (typeof xmlhr !== "undefined" && xmlhr.status !== 403){
+        if (typeof(xmlhr) !== 'undefined' && xmlhr.status !== 403){
           // If error other than 403, just print a generic message
-          $(".dz-error-message span", file.previewElement).html("The file transfer failed");
+          $('.dz-error-message span', file.previewElement).html(_('The file transfer failed'));
         }
       });
 
       self.dropzone.on('totaluploadprogress', function(pct) {
         // need to caclulate total pct here in reality since we're manually
         // processing each file one at a time.
-        pct = ((((self.currentFile - 1) * 100) + pct) / (self.numFiles * 100)) * 100;
+        pct = ((((self.currentFile - 1) * 100) + pct) / (self.dropzone.files.length * 100)) * 100;
         self.$progress.attr('aria-valuenow', pct).css('width', pct + '%');
       });
 
@@ -242,14 +237,42 @@ define([
       }
     },
 
-    showControls: function() {
+    showHideControls: function(){
+      /* we do this delayed because this can be called multiple times
+         AND we need to do this hide/show AFTER dropzone is done with
+         all it's own events. This is NASTY but the only way we can
+         enforce some numFiles with dropzone! */
       var self = this;
-      $('.controls', self.$el).fadeIn('slow');
+      if(self._showHideTimeout){
+        clearTimeout(self._showHideTimeout);
+      }
+      self._showHideTimeout = setTimeout(function(){
+        self._showHideControls();
+      }, 50);
     },
 
-    hideControls: function() {
+    _showHideControls: function(){
       var self = this;
-      $('.controls', self.$el).fadeOut('slow');
+      var $controls = $('.controls', self.$el);
+      var $browse = $('.browse-select', self.$el);
+      var $input = $('.dz-hidden-input');
+
+      if(self.options.maxFiles){
+        if(self.dropzone.files.length < self.options.maxFiles){
+          $browse.show();
+          $input.prop('disabled', false);
+        }else{
+          $browse.hide();
+          $input.prop('disabled', true);
+        }
+      }
+      if(self.dropzone.files.length > 0){
+        $controls.fadeIn('slow');
+        var file = self.dropzone.files[0];
+        $('.dz-error-message span', file.previewElement).html('');
+      }else{
+        $controls.fadeOut('slow');
+      }
     },
 
     pathJoin: function() {
@@ -295,18 +318,13 @@ define([
     getDzoneOptions: function() {
       var self = this;
 
-      // clickable option
-      if (typeof(self.options.clickable) === 'string') {
-        if (self.options.clickable === 'true') {
-          self.options.clickable = true;
-        } else {
-          self.options.clickable = false;
-        }
-      }
+      // This pattern REQUIRE dropzone to be clickable
+      self.options.clickable = true;
 
       var options = $.extend({}, self.options);
       options.url = self.getUrl();
-      // XXX force to only upload one at a time,
+
+      // XXX force to only upload one to the server at a time,
       // right now we don't support multiple for backends
       options.uploadMultiple = false;
 
@@ -349,7 +367,6 @@ define([
           fileaddedClassName = self.options.fileaddedClassName,
           finished = options.finished;
 
-      self.numFiles = self.dropzone.files.length;
       self.currentFile = 0;
 
       function process() {
diff --git a/mockup/patterns/upload/templates/upload.xml b/mockup/patterns/upload/templates/upload.xml
index b8dae65..75c0ac3 100644
--- a/mockup/patterns/upload/templates/upload.xml
+++ b/mockup/patterns/upload/templates/upload.xml
@@ -8,7 +8,7 @@
             <input name="file" type="file" multiple />
         </div>
         <div class="dz-message"><p><%-_t("Drop files here...")%></p></div>
-        <div class="row">
+        <div class="row browse-select">
             <div class="col-md-9">
                 <input
                     id="fakeUploadFile"


Repository: mockup


Branch: refs/heads/master
Date: 2015-08-05T13:58:18-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/453bb86961164b5e5ec68bc337c41167a4689cc3

Merge pull request #547 from plone/insert-image-tinymce

better interaction with insert uploaded image/link in tinymce

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/upload/pattern.js
M mockup/patterns/upload/templates/upload.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 0b17e10..ae280e6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- better interaction with insert uploaded image/link in tinymce
+  [vangheem]
+
 - add plone primary button styles for insert tinymce modals
   [vangheem]
 
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index f44a0ca..138ac5f 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -551,7 +551,13 @@ define([
         self.options.upload.relatedItems.selectableTypes = self.options.folderTypes;
         self.$upload.addClass('pat-upload').patternUpload(self.options.upload);
         self.$upload.on('uploadAllCompleted', function(evt, data) {
-          self.linkTypes.image.set(data.data.UID);
+          if(self.linkTypes.image){
+            self.linkTypes.image.set(data.data.UID);
+            $('#tinylink-image' , self.modal.$modal).trigger('click');
+          }else{
+            self.linkTypes.internal.set(data.data.UID);
+            $('#tinylink-internal', self.modal.$modal).trigger('click');
+          }
         });
       }
 
diff --git a/mockup/patterns/upload/pattern.js b/mockup/patterns/upload/pattern.js
index 69779f8..de8f92e 100644
--- a/mockup/patterns/upload/pattern.js
+++ b/mockup/patterns/upload/pattern.js
@@ -7,7 +7,6 @@
  *    relativePath(string): again, to be used with baseUrl to create upload url (null)
  *    initialFolder(string): UID of initial folder related items widget should have selected (null)
  *    currentPath(string): Current path related items is starting with (null)
- *    clickable(boolean): If you can click on container to also upload (false)
  *    className(string): value for class attribute in the form element ('upload')
  *    paramName(string): value for name attribute in the file input element ('file')
  *    ajaxUpload(boolean): true or false for letting the widget upload the files via ajax. If false the form will act like a normal form. (true)
@@ -71,7 +70,6 @@ define([
       ajaxUpload: true,
 
       paramName: 'file',
-      clickable: true,
       addRemoveLinks: false,
       autoCleanResults: true,
       previewsContainer: '.previews',
@@ -98,7 +96,6 @@ define([
       // TODO: find a way to make this work in firefox (and IE)
       $(document).bind('paste', function(e){
         var oe = e.originalEvent;
-        var target = $(oe.target);
         var items = oe.clipboardData.items;
         if (items) {
           for (var i = 0; i < items.length; i++) {
@@ -111,7 +108,6 @@ define([
       });
       // values that will change current processing
       self.currentPath = self.options.currentPath;
-      self.numFiles = 0;
       self.currentFile = 0;
 
       template = _.template(template, {_t: _t});
@@ -153,8 +149,9 @@ define([
       $('button.browse', self.$el).click(function(e) {
         e.preventDefault();
         e.stopPropagation();
-        // we trigger the dropzone dialog!
-        self.dropzone.hiddenFileInput.click();
+        if(self.dropzone.files.length < self.options.maxFiles){
+          self.dropzone.hiddenFileInput.click();
+        }
       });
 
       var dzoneOptions = this.getDzoneOptions();
@@ -174,18 +171,16 @@ define([
         throw e;
       }
 
-      self.dropzone.on('addedfile', function(file) {
-        self.showControls();
+      self.dropzone.on('maxfilesreached', function(){
+        self.showHideControls();
+      });
+
+      self.dropzone.on('addedfile', function(/* file */) {
+        self.showHideControls();
       });
 
       self.dropzone.on('removedfile', function() {
-        if (self.dropzone.files.length < 1) {
-          self.hideControls();
-        } else {
-          // Clear the "you can not upload any more files" message
-          var file = self.dropzone.files[0];
-          $(".dz-error-message span", file.previewElement).html("");
-        }
+        self.showHideControls();
       });
 
       self.dropzone.on('success', function(e, response){
@@ -209,22 +204,22 @@ define([
       }
 
       self.dropzone.on('complete', function(file) {
-        if (file.status === Dropzone.SUCCESS && self.dropzone.files.length < 1) {
-          self.hideControls();
+        if (file.status === Dropzone.SUCCESS && self.dropzone.files.length === 1) {
+          self.showHideControls();
         }
       });
 
       self.dropzone.on('error', function(file, response, xmlhr) {
-        if (typeof xmlhr !== "undefined" && xmlhr.status !== 403){
+        if (typeof(xmlhr) !== 'undefined' && xmlhr.status !== 403){
           // If error other than 403, just print a generic message
-          $(".dz-error-message span", file.previewElement).html("The file transfer failed");
+          $('.dz-error-message span', file.previewElement).html(_('The file transfer failed'));
         }
       });
 
       self.dropzone.on('totaluploadprogress', function(pct) {
         // need to caclulate total pct here in reality since we're manually
         // processing each file one at a time.
-        pct = ((((self.currentFile - 1) * 100) + pct) / (self.numFiles * 100)) * 100;
+        pct = ((((self.currentFile - 1) * 100) + pct) / (self.dropzone.files.length * 100)) * 100;
         self.$progress.attr('aria-valuenow', pct).css('width', pct + '%');
       });
 
@@ -242,14 +237,42 @@ define([
       }
     },
 
-    showControls: function() {
+    showHideControls: function(){
+      /* we do this delayed because this can be called multiple times
+         AND we need to do this hide/show AFTER dropzone is done with
+         all it's own events. This is NASTY but the only way we can
+         enforce some numFiles with dropzone! */
       var self = this;
-      $('.controls', self.$el).fadeIn('slow');
+      if(self._showHideTimeout){
+        clearTimeout(self._showHideTimeout);
+      }
+      self._showHideTimeout = setTimeout(function(){
+        self._showHideControls();
+      }, 50);
     },
 
-    hideControls: function() {
+    _showHideControls: function(){
       var self = this;
-      $('.controls', self.$el).fadeOut('slow');
+      var $controls = $('.controls', self.$el);
+      var $browse = $('.browse-select', self.$el);
+      var $input = $('.dz-hidden-input');
+
+      if(self.options.maxFiles){
+        if(self.dropzone.files.length < self.options.maxFiles){
+          $browse.show();
+          $input.prop('disabled', false);
+        }else{
+          $browse.hide();
+          $input.prop('disabled', true);
+        }
+      }
+      if(self.dropzone.files.length > 0){
+        $controls.fadeIn('slow');
+        var file = self.dropzone.files[0];
+        $('.dz-error-message span', file.previewElement).html('');
+      }else{
+        $controls.fadeOut('slow');
+      }
     },
 
     pathJoin: function() {
@@ -295,18 +318,13 @@ define([
     getDzoneOptions: function() {
       var self = this;
 
-      // clickable option
-      if (typeof(self.options.clickable) === 'string') {
-        if (self.options.clickable === 'true') {
-          self.options.clickable = true;
-        } else {
-          self.options.clickable = false;
-        }
-      }
+      // This pattern REQUIRE dropzone to be clickable
+      self.options.clickable = true;
 
       var options = $.extend({}, self.options);
       options.url = self.getUrl();
-      // XXX force to only upload one at a time,
+
+      // XXX force to only upload one to the server at a time,
       // right now we don't support multiple for backends
       options.uploadMultiple = false;
 
@@ -349,7 +367,6 @@ define([
           fileaddedClassName = self.options.fileaddedClassName,
           finished = options.finished;
 
-      self.numFiles = self.dropzone.files.length;
       self.currentFile = 0;
 
       function process() {
diff --git a/mockup/patterns/upload/templates/upload.xml b/mockup/patterns/upload/templates/upload.xml
index b8dae65..75c0ac3 100644
--- a/mockup/patterns/upload/templates/upload.xml
+++ b/mockup/patterns/upload/templates/upload.xml
@@ -8,7 +8,7 @@
             <input name="file" type="file" multiple />
         </div>
         <div class="dz-message"><p><%-_t("Drop files here...")%></p></div>
-        <div class="row">
+        <div class="row browse-select">
             <div class="col-md-9">
                 <input
                     id="fakeUploadFile"


