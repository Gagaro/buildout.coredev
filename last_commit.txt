Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2015-07-13T19:19:56+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.relationfield/commit/88d731b18bbdfc7455a97076b0c97c56b5b6ad8f

Back to development.

Files changed:
M CHANGES.rst
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 55e9b72..257ae6b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,6 +1,12 @@
 Changelog
 =========
 
+1.3.2 (unreleased)
+------------------
+
+- Nothing changed yet.
+
+
 1.3.1 (2015-03-13)
 ------------------
 
diff --git a/setup.py b/setup.py
index 7ef7f34..bf082a9 100644
--- a/setup.py
+++ b/setup.py
@@ -1,7 +1,7 @@
 from setuptools import setup, find_packages
 import os
 
-version = '1.3.1'
+version = '1.3.2.dev0'
 
 setup(name='plone.app.relationfield',
       version=version,


Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2015-07-13T19:20:55+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.relationfield/commit/b7083bebba353564f40be6a5da1feb3c20a0ef56

Fix test isolation problem with marshall test.

Files changed:
A plone/app/relationfield/tests/test_marshall.zcml
M CHANGES.rst
M plone/app/relationfield/marshaler.rst
M plone/app/relationfield/tests/test_marshall.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 257ae6b..f8aa2a2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 1.3.2 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fix test isolation problem.
+  [gotcha, timo]
 
 
 1.3.1 (2015-03-13)
diff --git a/plone/app/relationfield/marshaler.rst b/plone/app/relationfield/marshaler.rst
index 836c207..cc3a652 100644
--- a/plone/app/relationfield/marshaler.rst
+++ b/plone/app/relationfield/marshaler.rst
@@ -3,26 +3,6 @@ plone.rfc822 marshaler
 
 This package includes a field marshaler for ``plone.rfc822``
 
-To test this, we must first load some configuration:
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.app.relationfield.tests">
-    ...
-    ...     <include package="zope.component" file="meta.zcml" />
-    ...
-    ...     <include package="plone.rfc822" />
-    ...
-    ...     <include package="plone.app.relationfield" file="marshaler.zcml" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
 Next, we will create a simple schema with which to test the marshaler
 
     >>> from zope.interface import Interface
diff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py
index ccbfa54..dea7917 100644
--- a/plone/app/relationfield/tests/test_marshall.py
+++ b/plone/app/relationfield/tests/test_marshall.py
@@ -1,18 +1,27 @@
-import unittest
-from zope.testing import doctest
-import zope.component.testing
+# -*- coding: utf-8 -*-
+import doctest
+from unittest import TestSuite
 
+from plone.testing import layered
+from plone.testing.zca import ZCMLSandbox
 
-class UnitTestLayer:
+import plone.app.relationfield.tests
 
-    @classmethod
-    def testTearDown(cls):
-        zope.component.testing.tearDown()
+ZCML_SANDBOX = ZCMLSandbox(
+    filename='test_marshall.zcml',
+    package=plone.app.relationfield.tests
+)
 
 
 def test_suite():
-
-    marshaler = doctest.DocFileSuite('../marshaler.rst', optionflags=doctest.ELLIPSIS)
-    marshaler.layer = UnitTestLayer
-
-    return unittest.TestSuite((marshaler, ))
+    suite = TestSuite()
+    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+    suite.addTest(layered(
+        doctest.DocFileSuite(
+            '../marshaler.rst',
+            optionflags=OPTIONFLAGS,
+            package="plone.app.relationfield.tests",
+        ),
+        layer=ZCML_SANDBOX)
+    )
+    return suite
diff --git a/plone/app/relationfield/tests/test_marshall.zcml b/plone/app/relationfield/tests/test_marshall.zcml
new file mode 100644
index 0000000..4ed32e1
--- /dev/null
+++ b/plone/app/relationfield/tests/test_marshall.zcml
@@ -0,0 +1,7 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    i18n_domain="plone.app.relationfield.tests">
+     <include package="zope.component" file="meta.zcml" />
+     <include package="plone.rfc822" />
+     <include package="plone.app.relationfield" file="marshaler.zcml" />
+</configure>


Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2015-07-13T22:00:10+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.relationfield/commit/f403d73ee9e6e902d5b721116ce2db51fb2b51cf

upgrade to Plone 5

include robotframework

Files changed:
M buildout.cfg
M setup.py

diff --git a/buildout.cfg b/buildout.cfg
index 2996e42..29f4657 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,5 +1,5 @@
 [buildout]
-extends = http://dist.plone.org/release/4.3-latest/versions.cfg
+extends = http://dist.plone.org/release/5-latest/versions.cfg
 versions = versions
 parts = test
 develop = .
diff --git a/setup.py b/setup.py
index bf082a9..7b77e12 100644
--- a/setup.py
+++ b/setup.py
@@ -42,7 +42,13 @@
           'plone.rfc822',
           'plone.app.z3cform>=1.1.0.dev0'
       ],
-      extras_require={'test': ['plone.app.testing', 'plone.app.dexterity']},
+      extras_require={
+          'test': [
+              'plone.app.testing',
+              'plone.app.dexterity',
+              'plone.app.robotframework',
+          ]
+      },
       entry_points="""
       # -*- Entry points: -*-
       """,


Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2015-07-13T22:02:23+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.relationfield/commit/f8e41ad26d70cd3f65bc761a55d98d17c13769fc

update bootstrap to 2015-07-01

Files changed:
M bootstrap.py

diff --git a/bootstrap.py b/bootstrap.py
index c90ed48..a459921 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -16,112 +16,195 @@
 Simply run this script in a directory containing a buildout.cfg.
 The script accepts buildout command-line options, so you can
 use the -c option to specify an alternate configuration file.
-
-$Id$
 """
 
-import os, shutil, sys, tempfile, urllib2
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
+import os
+import shutil
+import sys
+import tempfile
 
-is_jython = sys.platform.startswith('java')
-
-# parsing arguments
-parser = OptionParser(
-    'This is a custom version of the zc.buildout %prog script.  It is '
-    'intended to meet a temporary need if you encounter problems with '
-    'the zc.buildout 1.5 release.')
-parser.add_option("-v", "--version", dest="version", default='1.5.2',
-                          help='Use a specific zc.buildout version.  *This '
-                          'bootstrap script defaults to '
-                          '1.5.2, unlike usual buildout bootstrap scripts.*')
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="distribute", default=False,
-                   help="Use Disribute rather than Setuptools.")
+from optparse import OptionParser
 
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
 
 options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
 
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
 
-if options.version is not None:
-    VERSION = '==%s' % options.version
-else:
-    VERSION = ''
+######################################################################
+# load/install setuptools
 
-USE_DISTRIBUTE = options.distribute
-args = args + ['bootstrap']
-
-to_reload = False
 try:
-    import pkg_resources
-    if not hasattr(pkg_resources, '_distribute'):
-        to_reload = True
-        raise ImportError
+    from urllib.request import urlopen
 except ImportError:
-    ez = {}
-    if USE_DISTRIBUTE:
-        exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
-                         ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
-    else:
-        exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
-                             ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)
-
-    if to_reload:
-        reload(pkg_resources)
-    else:
-        import pkg_resources
-
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    def quote (c):
-        return c
+    from urllib2 import urlopen
 
-ws  = pkg_resources.working_set
-
-if USE_DISTRIBUTE:
-    requirement = 'distribute'
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
 else:
-    requirement = 'setuptools'
-
-env = dict(os.environ,
-           PYTHONPATH=
-           ws.find(pkg_resources.Requirement.parse(requirement)).location
-           )
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(tmpeggs)]
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
 
-if 'bootstrap-testing-find-links' in os.environ:
-    cmd.extend(['-f', os.environ['bootstrap-testing-find-links']])
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
 
-cmd.append('zc.buildout' + VERSION)
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else: # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-assert exitcode == 0
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
 
-ws.add_entry(tmpeggs)
-ws.require('zc.buildout' + VERSION)
-import zc.buildout.buildout
 zc.buildout.buildout.main(args)
 shutil.rmtree(tmpeggs)


Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2015-07-13T22:03:11+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.relationfield/commit/460dd9c6f29ccb2bd9c2346bd8539ea126736a4b

tune ignores

Files changed:
M .gitignore

diff --git a/.gitignore b/.gitignore
index 66dbf51..96329a7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,7 @@
 *.egg-info
 *.pyc
+bin/
+lib/
+include/
+.installed.cfg
+develop-eggs/


Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2015-07-17T21:40:39+02:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/275cc8b3f60e1ccb702b748a3b8ed474cadb0609

Merge pull request #15 from plone/fix-test-isolation

Fix test isolation

Files changed:
A plone/app/relationfield/tests/test_marshall.zcml
M .gitignore
M CHANGES.rst
M bootstrap.py
M buildout.cfg
M plone/app/relationfield/marshaler.rst
M plone/app/relationfield/tests/test_marshall.py
M setup.py

diff --git a/.gitignore b/.gitignore
index 66dbf51..96329a7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,7 @@
 *.egg-info
 *.pyc
+bin/
+lib/
+include/
+.installed.cfg
+develop-eggs/
diff --git a/CHANGES.rst b/CHANGES.rst
index 55e9b72..f8aa2a2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,6 +1,13 @@
 Changelog
 =========
 
+1.3.2 (unreleased)
+------------------
+
+- Fix test isolation problem.
+  [gotcha, timo]
+
+
 1.3.1 (2015-03-13)
 ------------------
 
diff --git a/bootstrap.py b/bootstrap.py
index c90ed48..a459921 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -16,112 +16,195 @@
 Simply run this script in a directory containing a buildout.cfg.
 The script accepts buildout command-line options, so you can
 use the -c option to specify an alternate configuration file.
-
-$Id$
 """
 
-import os, shutil, sys, tempfile, urllib2
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
+import os
+import shutil
+import sys
+import tempfile
 
-is_jython = sys.platform.startswith('java')
-
-# parsing arguments
-parser = OptionParser(
-    'This is a custom version of the zc.buildout %prog script.  It is '
-    'intended to meet a temporary need if you encounter problems with '
-    'the zc.buildout 1.5 release.')
-parser.add_option("-v", "--version", dest="version", default='1.5.2',
-                          help='Use a specific zc.buildout version.  *This '
-                          'bootstrap script defaults to '
-                          '1.5.2, unlike usual buildout bootstrap scripts.*')
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="distribute", default=False,
-                   help="Use Disribute rather than Setuptools.")
+from optparse import OptionParser
 
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
 
 options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
 
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
 
-if options.version is not None:
-    VERSION = '==%s' % options.version
-else:
-    VERSION = ''
+######################################################################
+# load/install setuptools
 
-USE_DISTRIBUTE = options.distribute
-args = args + ['bootstrap']
-
-to_reload = False
 try:
-    import pkg_resources
-    if not hasattr(pkg_resources, '_distribute'):
-        to_reload = True
-        raise ImportError
+    from urllib.request import urlopen
 except ImportError:
-    ez = {}
-    if USE_DISTRIBUTE:
-        exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
-                         ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
-    else:
-        exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
-                             ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)
-
-    if to_reload:
-        reload(pkg_resources)
-    else:
-        import pkg_resources
-
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    def quote (c):
-        return c
+    from urllib2 import urlopen
 
-ws  = pkg_resources.working_set
-
-if USE_DISTRIBUTE:
-    requirement = 'distribute'
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
 else:
-    requirement = 'setuptools'
-
-env = dict(os.environ,
-           PYTHONPATH=
-           ws.find(pkg_resources.Requirement.parse(requirement)).location
-           )
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(tmpeggs)]
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
 
-if 'bootstrap-testing-find-links' in os.environ:
-    cmd.extend(['-f', os.environ['bootstrap-testing-find-links']])
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
 
-cmd.append('zc.buildout' + VERSION)
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else: # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-assert exitcode == 0
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
 
-ws.add_entry(tmpeggs)
-ws.require('zc.buildout' + VERSION)
-import zc.buildout.buildout
 zc.buildout.buildout.main(args)
 shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
index 2996e42..29f4657 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,5 +1,5 @@
 [buildout]
-extends = http://dist.plone.org/release/4.3-latest/versions.cfg
+extends = http://dist.plone.org/release/5-latest/versions.cfg
 versions = versions
 parts = test
 develop = .
diff --git a/plone/app/relationfield/marshaler.rst b/plone/app/relationfield/marshaler.rst
index 836c207..cc3a652 100644
--- a/plone/app/relationfield/marshaler.rst
+++ b/plone/app/relationfield/marshaler.rst
@@ -3,26 +3,6 @@ plone.rfc822 marshaler
 
 This package includes a field marshaler for ``plone.rfc822``
 
-To test this, we must first load some configuration:
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.app.relationfield.tests">
-    ...
-    ...     <include package="zope.component" file="meta.zcml" />
-    ...
-    ...     <include package="plone.rfc822" />
-    ...
-    ...     <include package="plone.app.relationfield" file="marshaler.zcml" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
 Next, we will create a simple schema with which to test the marshaler
 
     >>> from zope.interface import Interface
diff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py
index ccbfa54..dea7917 100644
--- a/plone/app/relationfield/tests/test_marshall.py
+++ b/plone/app/relationfield/tests/test_marshall.py
@@ -1,18 +1,27 @@
-import unittest
-from zope.testing import doctest
-import zope.component.testing
+# -*- coding: utf-8 -*-
+import doctest
+from unittest import TestSuite
 
+from plone.testing import layered
+from plone.testing.zca import ZCMLSandbox
 
-class UnitTestLayer:
+import plone.app.relationfield.tests
 
-    @classmethod
-    def testTearDown(cls):
-        zope.component.testing.tearDown()
+ZCML_SANDBOX = ZCMLSandbox(
+    filename='test_marshall.zcml',
+    package=plone.app.relationfield.tests
+)
 
 
 def test_suite():
-
-    marshaler = doctest.DocFileSuite('../marshaler.rst', optionflags=doctest.ELLIPSIS)
-    marshaler.layer = UnitTestLayer
-
-    return unittest.TestSuite((marshaler, ))
+    suite = TestSuite()
+    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+    suite.addTest(layered(
+        doctest.DocFileSuite(
+            '../marshaler.rst',
+            optionflags=OPTIONFLAGS,
+            package="plone.app.relationfield.tests",
+        ),
+        layer=ZCML_SANDBOX)
+    )
+    return suite
diff --git a/plone/app/relationfield/tests/test_marshall.zcml b/plone/app/relationfield/tests/test_marshall.zcml
new file mode 100644
index 0000000..4ed32e1
--- /dev/null
+++ b/plone/app/relationfield/tests/test_marshall.zcml
@@ -0,0 +1,7 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    i18n_domain="plone.app.relationfield.tests">
+     <include package="zope.component" file="meta.zcml" />
+     <include package="plone.rfc822" />
+     <include package="plone.app.relationfield" file="marshaler.zcml" />
+</configure>
diff --git a/setup.py b/setup.py
index 7ef7f34..7b77e12 100644
--- a/setup.py
+++ b/setup.py
@@ -1,7 +1,7 @@
 from setuptools import setup, find_packages
 import os
 
-version = '1.3.1'
+version = '1.3.2.dev0'
 
 setup(name='plone.app.relationfield',
       version=version,
@@ -42,7 +42,13 @@
           'plone.rfc822',
           'plone.app.z3cform>=1.1.0.dev0'
       ],
-      extras_require={'test': ['plone.app.testing', 'plone.app.dexterity']},
+      extras_require={
+          'test': [
+              'plone.app.testing',
+              'plone.app.dexterity',
+              'plone.app.robotframework',
+          ]
+      },
       entry_points="""
       # -*- Entry points: -*-
       """,


