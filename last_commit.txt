Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2015-06-06T17:45:03+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/fd1709025c3f189a6087a42e52babcb872ecd59c

do not display IStatusMessage in form templates and do not redirect to parent

fix

Files changed:
A plone/schemaeditor/browser/field/edit.pt
A plone/schemaeditor/browser/schema/add.pt
M plone/schemaeditor/browser/field/edit.py
M plone/schemaeditor/browser/schema/add_field.py
M plone/schemaeditor/browser/schema/add_fieldset.py

diff --git a/plone/schemaeditor/browser/field/edit.pt b/plone/schemaeditor/browser/field/edit.pt
new file mode 100644
index 0000000..7e57c61
--- /dev/null
+++ b/plone/schemaeditor/browser/field/edit.pt
@@ -0,0 +1,14 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      xmlns:tal="http://xml.zope.org/namespaces/tal"
+      xmlns:metal="http://xml.zope.org/namespaces/metal"
+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+      lang="en"
+      i18n:domain="plone">
+
+<body>
+    <h1 class="documentFirstHeading" tal:content="view/label"></h1>
+    <div id="content">
+        <tal:block tal:replace="structure view/contents|view/render"/>
+    </div>
+</body>
+</html>
diff --git a/plone/schemaeditor/browser/field/edit.py b/plone/schemaeditor/browser/field/edit.py
index c51914e..15cc245 100644
--- a/plone/schemaeditor/browser/field/edit.py
+++ b/plone/schemaeditor/browser/field/edit.py
@@ -15,8 +15,10 @@
 from z3c.form import form, field, button
 from z3c.form.interfaces import IDataManager
 from z3c.form.datamanager import AttributeField
-from plone.z3cform import layout
+from plone.z3cform.layout import wrap_form
 from plone.autoform.form import AutoExtensibleForm
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor.interfaces import IFieldEditForm
 from plone.schemaeditor import interfaces
@@ -124,6 +126,11 @@ def additionalSchemata(self):
         return [v for k, v in getAdapters((schema_context, self.field),
                                           interfaces.IFieldEditorExtender)]
 
+    @lazy_property
+    def label(self):
+        return _(u"Edit Field '${fieldname}'",
+                 mapping={'fieldname': self.field.__name__})
+
     def updateFields(self):
         # use a custom 'title' field to make sure it is required
         fields = field.Fields(IFieldTitle)
@@ -151,12 +158,13 @@ def handleSave(self, action):
         changes = self.applyChanges(data)
 
         if changes:
-            self.status = self.successMessage
+            IStatusMessage(self.request).addStatusMessage(
+                self.successMessage, type='info')
         else:
-            self.status = self.noChangesMessage
+            IStatusMessage(self.request).addStatusMessage(
+                self.noChangesMessage, type='info')
 
         notify(SchemaModifiedEvent(self.context.aq_parent))
-        self.redirectToParent()
 
     @button.buttonAndHandler(PMF(u'Cancel'), name='cancel')
     def handleCancel(self, action):
@@ -171,15 +179,7 @@ def redirectToParent(self):
         self.request.response.redirect(url)
 
 
-# form wrapper to use Plone form template
-class EditView(layout.FormWrapper):
-    form = FieldEditForm
-
-    def __init__(self, context, request):
-        super(EditView, self).__init__(context, request)
-        self.field = context.field
-
-    @lazy_property
-    def label(self):
-        return _(u"Edit Field '${fieldname}'",
-                 mapping={'fieldname': self.field.__name__})
+EditView = wrap_form(
+    FieldEditForm,
+    index=ViewPageTemplateFile('edit.pt')
+)
diff --git a/plone/schemaeditor/browser/schema/add.pt b/plone/schemaeditor/browser/schema/add.pt
new file mode 100644
index 0000000..7e57c61
--- /dev/null
+++ b/plone/schemaeditor/browser/schema/add.pt
@@ -0,0 +1,14 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      xmlns:tal="http://xml.zope.org/namespaces/tal"
+      xmlns:metal="http://xml.zope.org/namespaces/metal"
+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+      lang="en"
+      i18n:domain="plone">
+
+<body>
+    <h1 class="documentFirstHeading" tal:content="view/label"></h1>
+    <div id="content">
+        <tal:block tal:replace="structure view/contents|view/render"/>
+    </div>
+</body>
+</html>
diff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py
index 6a48aa8..151199a 100644
--- a/plone/schemaeditor/browser/schema/add_field.py
+++ b/plone/schemaeditor/browser/schema/add_field.py
@@ -4,6 +4,8 @@
 from z3c.form import form, field
 from z3c.form.interfaces import WidgetActionExecutionError
 from plone.z3cform.layout import wrap_form
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor import SchemaEditorMessageFactory as _
 from plone.schemaeditor.interfaces import INewField
@@ -44,12 +46,14 @@ def add(self, field):
         schema.moveField(field.__name__, position)
         notify(ObjectAddedEvent(field, context.schema))
         notify(FieldAddedEvent(context, field))
-        self.status = _(u"Field added successfully.")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Field added successfully."), type='info')
 
     def nextURL(self):
-        url = self.context.absolute_url()
-        if getattr(self.context, 'schemaEditorView', None) is not None:
-            url += '/@@' + self.context.schemaEditorView
-        return url
+        return "@@add-field"
 
-FieldAddFormPage = wrap_form(FieldAddForm)
+
+FieldAddFormPage = wrap_form(
+    FieldAddForm,
+    index=ViewPageTemplateFile('add.pt')
+)
diff --git a/plone/schemaeditor/browser/schema/add_fieldset.py b/plone/schemaeditor/browser/schema/add_fieldset.py
index b043c8b..e731f87 100644
--- a/plone/schemaeditor/browser/schema/add_fieldset.py
+++ b/plone/schemaeditor/browser/schema/add_fieldset.py
@@ -5,6 +5,8 @@
 from z3c.form import form, field
 from z3c.form.interfaces import WidgetActionExecutionError
 from plone.z3cform.layout import wrap_form
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor import SchemaEditorMessageFactory as _
 from plone.schemaeditor.interfaces import INewFieldset
@@ -35,13 +37,14 @@ def add(self, new_fieldset):
         schema.setTaggedValue(FIELDSETS_KEY, fieldsets)
         notifyContainerModified(schema)
         notify(SchemaModifiedEvent(self.context))
-        self.status = _(u"Fieldset added successfully.")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Fieldset added successfully."), type='info')
 
     def nextURL(self):
-        url = self.context.absolute_url()
-        if getattr(self.context, 'schemaEditorView', None) is not None:
-            url += '/@@' + self.context.schemaEditorView
+        return "@@add-fieldset"
 
-        return url
 
-FieldsetAddFormPage = wrap_form(FieldsetAddForm)
+FieldsetAddFormPage = wrap_form(
+    FieldsetAddForm,
+    index=ViewPageTemplateFile('add.pt')
+)


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2015-07-02T09:34:52+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/bc84ff6e96cba8f5c6fb2a79d38f4a151e9e4ff1

Merge branch 'master' into ebr-display-status-message-in-parent-window

Files changed:
A setup.cfg
M CHANGES.rst
M plone/schemaeditor/browser/schema/add_field.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e2f626c..b87e68c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,7 +1,14 @@
 Changelog
 =========
 
-2.0.5 (unreleased)
+2.0.6 (unreleased)
+------------------
+
+- Supports additionalSchemata in field Add form
+  [ebrehault]
+
+
+2.0.5 (2015-06-05)
 ------------------
 
 - Add undeclared zope.cachedescriptors dependency.
diff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py
index 151199a..4c0c6b0 100644
--- a/plone/schemaeditor/browser/schema/add_field.py
+++ b/plone/schemaeditor/browser/schema/add_field.py
@@ -1,28 +1,64 @@
+from zope.cachedescriptors.property import Lazy as lazy_property
+from zope.component import getAdapters
 from zope.event import notify
-from zope.interface import Invalid
+from zope.interface import Invalid, Interface
 from zope.lifecycleevent import ObjectAddedEvent
 from z3c.form import form, field
 from z3c.form.interfaces import WidgetActionExecutionError
+from plone.autoform.form import AutoExtensibleForm
 from plone.z3cform.layout import wrap_form
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor import SchemaEditorMessageFactory as _
-from plone.schemaeditor.interfaces import INewField
+from plone.schemaeditor import interfaces
 from plone.schemaeditor.utils import IEditableSchema, non_fieldset_fields,\
     sortedFields
 from plone.schemaeditor.utils import FieldAddedEvent
 
 
-class FieldAddForm(form.AddForm):
+class FieldAddForm(AutoExtensibleForm, form.AddForm):
 
-    fields = field.Fields(INewField)
+    fields = field.Fields(interfaces.INewField)
     label = _("Add new field")
     id = 'add-field-form'
 
+    # This is a trick: we want autoform to handle the additionalSchemata,
+    # but want to provide our own base schema below in updateFields.
+    schema = Interface
+
+    @lazy_property
+    def _schema(self):
+        return interfaces.INewField
+
+    @lazy_property
+    def additionalSchemata(self):
+        return [v for k, v in getAdapters((self.context, ),
+            interfaces.IFieldEditorExtender)]
+
     def create(self, data):
+        extra = {}
         factory = data.pop('factory')
-        return factory(**data)
+        all = data.keys()
+
+        # split regular attributes and extra ones
+        for key in all:
+            if key not in self._schema:
+                extra[key] = data[key]
+                data.pop(key)
+
+        # create the field with regular attributes
+        field_obj = factory(**data)
+
+        # set the extra attributes using the proper adapter
+        for schemata in self.additionalSchemata:
+            for key in extra:
+                (interface_name, property_name) = key.split('.')
+                if interface_name != schemata.__name__:
+                    continue
+                setattr(schemata(field_obj), property_name, extra[key])
+
+        return field_obj
 
     def add(self, field):
         context = self.context
@@ -41,7 +77,9 @@ def add(self, field):
             schema.addField(field)
         except ValueError:
             raise WidgetActionExecutionError('__name__',
-                                             Invalid(u'Please select a field name that is not already used.'))
+                Invalid(
+                    u'Please select a field name that is not already used.'
+                ))
 
         schema.moveField(field.__name__, position)
         notify(ObjectAddedEvent(field, context.schema))
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..9bfe875
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,4 @@
+[check-manifest]
+ignore =
+    bootstrap.py
+    buildout.cfg
diff --git a/setup.py b/setup.py
index c8696f1..787b37a 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '2.0.5.dev0'
+version = '2.0.6.dev0'
 
 setup(name='plone.schemaeditor',
       version=version,
@@ -11,6 +11,7 @@
           "Framework :: Zope2",
           "Framework :: Plone",
           "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
           "Topic :: Software Development :: Libraries :: Python Modules",
           "License :: OSI Approved :: BSD License",
       ],


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2015-07-02T10:36:50+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/c8db80151a4ce8ec9427ff5523e27ad376737c6a

fix tests

Files changed:
M plone/schemaeditor/configure.zcml
M plone/schemaeditor/tests/choice.txt
M plone/schemaeditor/tests/editing.txt
M plone/schemaeditor/tests/minmax.txt

diff --git a/plone/schemaeditor/configure.zcml b/plone/schemaeditor/configure.zcml
index 967a9b8..40c4d55 100644
--- a/plone/schemaeditor/configure.zcml
+++ b/plone/schemaeditor/configure.zcml
@@ -6,6 +6,7 @@
 
     <include package="plone.z3cform"/>
     <include package="plone.protect" />
+    <include package="Products.statusmessages" />
 
     <i18n:registerTranslations directory="locales"/>
 
diff --git a/plone/schemaeditor/tests/choice.txt b/plone/schemaeditor/tests/choice.txt
index d71b134..eceea8f 100644
--- a/plone/schemaeditor/tests/choice.txt
+++ b/plone/schemaeditor/tests/choice.txt
@@ -37,10 +37,11 @@ Add a Choice field.
     [event: ObjectAddedEvent on Choice]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Open the new fields edit form.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='country').click()
 
 The edit form for choice fields includes a widget for specifying the
@@ -145,10 +146,11 @@ Add a Choice field.
     [event: ObjectAddedEvent on Set]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Open the new fields edit form.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='categories').click()
 
 The edit form for choice fields includes a widget for specifying the
diff --git a/plone/schemaeditor/tests/editing.txt b/plone/schemaeditor/tests/editing.txt
index e5931c7..13f416d 100644
--- a/plone/schemaeditor/tests/editing.txt
+++ b/plone/schemaeditor/tests/editing.txt
@@ -49,7 +49,7 @@ Let's add a 'favorite-color' field to the IDummySchema schema::
     [event: ObjectAddedEvent on TextLine]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Now the actual IDummySchema schema should have the new field (the field id is a
 normalized form of the title)::
@@ -73,6 +73,7 @@ Editing a schema field attribute
 
 Let's navigate to the 'favorite-color' field we just created::
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='favorite_color').click()
     >>> browser.url
     'http://nohost/@@schemaeditor/favorite_color'
@@ -91,7 +92,7 @@ of schema fields, which should reflect the change::
     [event: ObjectModifiedEvent on TextLine]
     [event: SchemaModifiedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
 
 Let's confirm that the new default value was correctly saved to the actual schema::
 
@@ -107,6 +108,7 @@ If the schema is edited to have internationalized attributes::
 Then editing the schema will preserve those values and only update their
 default values::
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='favorite_color').click()
     >>> browser.url
     'http://nohost/@@schemaeditor/favorite_color'
@@ -119,7 +121,7 @@ default values::
     [event: ObjectModifiedEvent on TextLine]
     [event: SchemaModifiedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
 
 Let's confirm that the message value was preserved and only its default
 value was set::
@@ -142,6 +144,7 @@ persist its marker interface::
 
 Let's go back and try to make an invalid change.  The form won't let us::
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='favorite_color').click()
     >>> browser.url
     'http://nohost/@@schemaeditor/favorite_color'
@@ -329,7 +332,7 @@ Let's add a 'extra-info' fieldset to the IDummySchema schema::
     [event: ContainerModifiedEvent on InterfaceClass]
     [event: SchemaModifiedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-fieldset'
 
 Now the actual IDummySchema schema should have the new fieldset ::
 
@@ -357,7 +360,7 @@ and saved.
     ...     browser.getControl('Short Name').value = field_id
     ...     browser.getControl('Field type').value = [factory.title]
     ...     browser.getControl('Add').click()
-    ...     assert browser.url == portal_url + '/@@schemaeditor', (
+    ...     assert browser.url == portal_url + '/@@schemaeditor/@@add-field', (
     ...         'Failed to create %r' % name)
     ...     assert field_id in schema, '%r not in %r' % (
     ...         field_id, schema)
@@ -365,6 +368,7 @@ and saved.
     ...         schema[field_id], factory.fieldcls
     ...         ), '%r is not an instance of %r' % (
     ...             schema[field_id], factory.fieldcls)
+    ...     browser.open(portal_url + '/@@schemaeditor')
     ...     browser.getLink(url=field_id).click()
     ...     browser.getControl('Title').value += ' '
     ...     browser.getControl('Save').click()
@@ -437,4 +441,4 @@ these fields, they are allowed as long as the field is of the correct type.
     [event: ObjectAddedEvent on TextLine]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
diff --git a/plone/schemaeditor/tests/minmax.txt b/plone/schemaeditor/tests/minmax.txt
index c7663ee..87629e9 100644
--- a/plone/schemaeditor/tests/minmax.txt
+++ b/plone/schemaeditor/tests/minmax.txt
@@ -35,10 +35,11 @@ Add an Int field.
     [event: ObjectAddedEvent on Int]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Open the new fields edit form.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='age').click()
 
 Set the range to 13 to 100.
@@ -51,6 +52,7 @@ Set the range to 13 to 100.
 
 Return to the form and set the range to values outside the current range.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='age').click()
     >>> browser.getControl(name='form.widgets.min').value = '0'
     >>> browser.getControl(name='form.widgets.max').value = '200'


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2015-07-08T06:31:20+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.schemaeditor/commit/d26c8979327b6a90531abbca96a8989734493cf7

Merge pull request #26 from plone/ebr-display-status-message-in-parent-window

Display status message in parent window after modal close

Files changed:
A plone/schemaeditor/browser/field/edit.pt
A plone/schemaeditor/browser/schema/add.pt
M plone/schemaeditor/browser/field/edit.py
M plone/schemaeditor/browser/schema/add_field.py
M plone/schemaeditor/browser/schema/add_fieldset.py
M plone/schemaeditor/configure.zcml
M plone/schemaeditor/tests/choice.txt
M plone/schemaeditor/tests/editing.txt
M plone/schemaeditor/tests/minmax.txt

diff --git a/plone/schemaeditor/browser/field/edit.pt b/plone/schemaeditor/browser/field/edit.pt
new file mode 100644
index 0000000..7e57c61
--- /dev/null
+++ b/plone/schemaeditor/browser/field/edit.pt
@@ -0,0 +1,14 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      xmlns:tal="http://xml.zope.org/namespaces/tal"
+      xmlns:metal="http://xml.zope.org/namespaces/metal"
+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+      lang="en"
+      i18n:domain="plone">
+
+<body>
+    <h1 class="documentFirstHeading" tal:content="view/label"></h1>
+    <div id="content">
+        <tal:block tal:replace="structure view/contents|view/render"/>
+    </div>
+</body>
+</html>
diff --git a/plone/schemaeditor/browser/field/edit.py b/plone/schemaeditor/browser/field/edit.py
index c51914e..15cc245 100644
--- a/plone/schemaeditor/browser/field/edit.py
+++ b/plone/schemaeditor/browser/field/edit.py
@@ -15,8 +15,10 @@
 from z3c.form import form, field, button
 from z3c.form.interfaces import IDataManager
 from z3c.form.datamanager import AttributeField
-from plone.z3cform import layout
+from plone.z3cform.layout import wrap_form
 from plone.autoform.form import AutoExtensibleForm
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor.interfaces import IFieldEditForm
 from plone.schemaeditor import interfaces
@@ -124,6 +126,11 @@ def additionalSchemata(self):
         return [v for k, v in getAdapters((schema_context, self.field),
                                           interfaces.IFieldEditorExtender)]
 
+    @lazy_property
+    def label(self):
+        return _(u"Edit Field '${fieldname}'",
+                 mapping={'fieldname': self.field.__name__})
+
     def updateFields(self):
         # use a custom 'title' field to make sure it is required
         fields = field.Fields(IFieldTitle)
@@ -151,12 +158,13 @@ def handleSave(self, action):
         changes = self.applyChanges(data)
 
         if changes:
-            self.status = self.successMessage
+            IStatusMessage(self.request).addStatusMessage(
+                self.successMessage, type='info')
         else:
-            self.status = self.noChangesMessage
+            IStatusMessage(self.request).addStatusMessage(
+                self.noChangesMessage, type='info')
 
         notify(SchemaModifiedEvent(self.context.aq_parent))
-        self.redirectToParent()
 
     @button.buttonAndHandler(PMF(u'Cancel'), name='cancel')
     def handleCancel(self, action):
@@ -171,15 +179,7 @@ def redirectToParent(self):
         self.request.response.redirect(url)
 
 
-# form wrapper to use Plone form template
-class EditView(layout.FormWrapper):
-    form = FieldEditForm
-
-    def __init__(self, context, request):
-        super(EditView, self).__init__(context, request)
-        self.field = context.field
-
-    @lazy_property
-    def label(self):
-        return _(u"Edit Field '${fieldname}'",
-                 mapping={'fieldname': self.field.__name__})
+EditView = wrap_form(
+    FieldEditForm,
+    index=ViewPageTemplateFile('edit.pt')
+)
diff --git a/plone/schemaeditor/browser/schema/add.pt b/plone/schemaeditor/browser/schema/add.pt
new file mode 100644
index 0000000..7e57c61
--- /dev/null
+++ b/plone/schemaeditor/browser/schema/add.pt
@@ -0,0 +1,14 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      xmlns:tal="http://xml.zope.org/namespaces/tal"
+      xmlns:metal="http://xml.zope.org/namespaces/metal"
+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+      lang="en"
+      i18n:domain="plone">
+
+<body>
+    <h1 class="documentFirstHeading" tal:content="view/label"></h1>
+    <div id="content">
+        <tal:block tal:replace="structure view/contents|view/render"/>
+    </div>
+</body>
+</html>
diff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py
index cdc9f20..4c0c6b0 100644
--- a/plone/schemaeditor/browser/schema/add_field.py
+++ b/plone/schemaeditor/browser/schema/add_field.py
@@ -7,6 +7,8 @@
 from z3c.form.interfaces import WidgetActionExecutionError
 from plone.autoform.form import AutoExtensibleForm
 from plone.z3cform.layout import wrap_form
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor import SchemaEditorMessageFactory as _
 from plone.schemaeditor import interfaces
@@ -82,12 +84,14 @@ def add(self, field):
         schema.moveField(field.__name__, position)
         notify(ObjectAddedEvent(field, context.schema))
         notify(FieldAddedEvent(context, field))
-        self.status = _(u"Field added successfully.")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Field added successfully."), type='info')
 
     def nextURL(self):
-        url = self.context.absolute_url()
-        if getattr(self.context, 'schemaEditorView', None) is not None:
-            url += '/@@' + self.context.schemaEditorView
-        return url
+        return "@@add-field"
 
-FieldAddFormPage = wrap_form(FieldAddForm)
+
+FieldAddFormPage = wrap_form(
+    FieldAddForm,
+    index=ViewPageTemplateFile('add.pt')
+)
diff --git a/plone/schemaeditor/browser/schema/add_fieldset.py b/plone/schemaeditor/browser/schema/add_fieldset.py
index b043c8b..e731f87 100644
--- a/plone/schemaeditor/browser/schema/add_fieldset.py
+++ b/plone/schemaeditor/browser/schema/add_fieldset.py
@@ -5,6 +5,8 @@
 from z3c.form import form, field
 from z3c.form.interfaces import WidgetActionExecutionError
 from plone.z3cform.layout import wrap_form
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 
 from plone.schemaeditor import SchemaEditorMessageFactory as _
 from plone.schemaeditor.interfaces import INewFieldset
@@ -35,13 +37,14 @@ def add(self, new_fieldset):
         schema.setTaggedValue(FIELDSETS_KEY, fieldsets)
         notifyContainerModified(schema)
         notify(SchemaModifiedEvent(self.context))
-        self.status = _(u"Fieldset added successfully.")
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Fieldset added successfully."), type='info')
 
     def nextURL(self):
-        url = self.context.absolute_url()
-        if getattr(self.context, 'schemaEditorView', None) is not None:
-            url += '/@@' + self.context.schemaEditorView
+        return "@@add-fieldset"
 
-        return url
 
-FieldsetAddFormPage = wrap_form(FieldsetAddForm)
+FieldsetAddFormPage = wrap_form(
+    FieldsetAddForm,
+    index=ViewPageTemplateFile('add.pt')
+)
diff --git a/plone/schemaeditor/configure.zcml b/plone/schemaeditor/configure.zcml
index 967a9b8..40c4d55 100644
--- a/plone/schemaeditor/configure.zcml
+++ b/plone/schemaeditor/configure.zcml
@@ -6,6 +6,7 @@
 
     <include package="plone.z3cform"/>
     <include package="plone.protect" />
+    <include package="Products.statusmessages" />
 
     <i18n:registerTranslations directory="locales"/>
 
diff --git a/plone/schemaeditor/tests/choice.txt b/plone/schemaeditor/tests/choice.txt
index d71b134..eceea8f 100644
--- a/plone/schemaeditor/tests/choice.txt
+++ b/plone/schemaeditor/tests/choice.txt
@@ -37,10 +37,11 @@ Add a Choice field.
     [event: ObjectAddedEvent on Choice]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Open the new fields edit form.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='country').click()
 
 The edit form for choice fields includes a widget for specifying the
@@ -145,10 +146,11 @@ Add a Choice field.
     [event: ObjectAddedEvent on Set]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Open the new fields edit form.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='categories').click()
 
 The edit form for choice fields includes a widget for specifying the
diff --git a/plone/schemaeditor/tests/editing.txt b/plone/schemaeditor/tests/editing.txt
index e5931c7..13f416d 100644
--- a/plone/schemaeditor/tests/editing.txt
+++ b/plone/schemaeditor/tests/editing.txt
@@ -49,7 +49,7 @@ Let's add a 'favorite-color' field to the IDummySchema schema::
     [event: ObjectAddedEvent on TextLine]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Now the actual IDummySchema schema should have the new field (the field id is a
 normalized form of the title)::
@@ -73,6 +73,7 @@ Editing a schema field attribute
 
 Let's navigate to the 'favorite-color' field we just created::
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='favorite_color').click()
     >>> browser.url
     'http://nohost/@@schemaeditor/favorite_color'
@@ -91,7 +92,7 @@ of schema fields, which should reflect the change::
     [event: ObjectModifiedEvent on TextLine]
     [event: SchemaModifiedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
 
 Let's confirm that the new default value was correctly saved to the actual schema::
 
@@ -107,6 +108,7 @@ If the schema is edited to have internationalized attributes::
 Then editing the schema will preserve those values and only update their
 default values::
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='favorite_color').click()
     >>> browser.url
     'http://nohost/@@schemaeditor/favorite_color'
@@ -119,7 +121,7 @@ default values::
     [event: ObjectModifiedEvent on TextLine]
     [event: SchemaModifiedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
 
 Let's confirm that the message value was preserved and only its default
 value was set::
@@ -142,6 +144,7 @@ persist its marker interface::
 
 Let's go back and try to make an invalid change.  The form won't let us::
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='favorite_color').click()
     >>> browser.url
     'http://nohost/@@schemaeditor/favorite_color'
@@ -329,7 +332,7 @@ Let's add a 'extra-info' fieldset to the IDummySchema schema::
     [event: ContainerModifiedEvent on InterfaceClass]
     [event: SchemaModifiedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-fieldset'
 
 Now the actual IDummySchema schema should have the new fieldset ::
 
@@ -357,7 +360,7 @@ and saved.
     ...     browser.getControl('Short Name').value = field_id
     ...     browser.getControl('Field type').value = [factory.title]
     ...     browser.getControl('Add').click()
-    ...     assert browser.url == portal_url + '/@@schemaeditor', (
+    ...     assert browser.url == portal_url + '/@@schemaeditor/@@add-field', (
     ...         'Failed to create %r' % name)
     ...     assert field_id in schema, '%r not in %r' % (
     ...         field_id, schema)
@@ -365,6 +368,7 @@ and saved.
     ...         schema[field_id], factory.fieldcls
     ...         ), '%r is not an instance of %r' % (
     ...             schema[field_id], factory.fieldcls)
+    ...     browser.open(portal_url + '/@@schemaeditor')
     ...     browser.getLink(url=field_id).click()
     ...     browser.getControl('Title').value += ' '
     ...     browser.getControl('Save').click()
@@ -437,4 +441,4 @@ these fields, they are allowed as long as the field is of the correct type.
     [event: ObjectAddedEvent on TextLine]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
diff --git a/plone/schemaeditor/tests/minmax.txt b/plone/schemaeditor/tests/minmax.txt
index c7663ee..87629e9 100644
--- a/plone/schemaeditor/tests/minmax.txt
+++ b/plone/schemaeditor/tests/minmax.txt
@@ -35,10 +35,11 @@ Add an Int field.
     [event: ObjectAddedEvent on Int]
     [event: FieldAddedEvent on DummySchemaContext]
     >>> browser.url
-    'http://nohost/@@schemaeditor'
+    'http://nohost/@@schemaeditor/@@add-field'
 
 Open the new fields edit form.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='age').click()
 
 Set the range to 13 to 100.
@@ -51,6 +52,7 @@ Set the range to 13 to 100.
 
 Return to the form and set the range to values outside the current range.
 
+    >>> browser.open(portal_url + '/@@schemaeditor')
     >>> browser.getLink(url='age').click()
     >>> browser.getControl(name='form.widgets.min').value = '0'
     >>> browser.getControl(name='form.widgets.max').value = '200'


