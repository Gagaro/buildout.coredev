Repository: mockup


Branch: refs/heads/master
Date: 2015-07-25T22:36:45-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/e4cf1efb9070bb467efeeabcd8cd67b05a995e09

remove unused tablesorter pattern

Files changed:
M CHANGES.rst
M mockup/js/bundles/docs.js
M mockup/js/config.js
D mockup/patterns/tablesorter/pattern.js
D mockup/tests/pattern-tablesorter-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 7922a1e..d9e9632 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,9 +1,12 @@
 Changelog
 =========
 
-2.0.6 (unreleased)
+2.1.0 (unreleased)
 ------------------
 
+- remove unused tablesorter pattern
+  [vangheem]
+
 - switch to tab where link/image data is loaded from on tinymce pattern
   [vangheem]
 
diff --git a/mockup/js/bundles/docs.js b/mockup/js/bundles/docs.js
index 2f26e7d..8c787aa 100644
--- a/mockup/js/bundles/docs.js
+++ b/mockup/js/bundles/docs.js
@@ -112,11 +112,6 @@ require([
             description: 'Managing a folder of items',
             url: 'patterns/structure/pattern.js'
           },
-          { id: 'tablesorter',
-            title: 'Table Sorter',
-            description: 'A pattern you can apply to a table so it can have its items rearranged when clicking the header',
-            url: 'patterns/tablesorter/pattern.js'
-          },
           { id: 'textareamimetypeselector',
             title: 'Textarea MimeType Selector',
             description: 'Selects the MimeType for a textarea and changes the widget according to the MimeType',
diff --git a/mockup/js/config.js b/mockup/js/config.js
index e52b5e4..9fde4c4 100644
--- a/mockup/js/config.js
+++ b/mockup/js/config.js
@@ -86,7 +86,6 @@
       'mockup-patterns-sortable': 'patterns/sortable/pattern',
       'mockup-patterns-structure': 'patterns/structure/pattern',
       'mockup-patterns-structure-url': 'patterns/structure',
-      'mockup-patterns-tablesorter': 'patterns/tablesorter/pattern',
       'mockup-patterns-textareamimetypeselector': 'patterns/textareamimetypeselector/pattern',
       'mockup-patterns-texteditor': 'patterns/texteditor/pattern',
       'mockup-patterns-thememapper': 'patterns/thememapper/pattern',
diff --git a/mockup/patterns/tablesorter/pattern.js b/mockup/patterns/tablesorter/pattern.js
deleted file mode 100644
index 4176567..0000000
--- a/mockup/patterns/tablesorter/pattern.js
+++ /dev/null
@@ -1,185 +0,0 @@
-/* Tablesorter pattern.
- *
- * Documentation:
- *    # Directions
- *
- *    - If the displayed data doesn't match the sequence (as in days of the
- *      week), provide a sortabledata-XXX class. The column will be sorted on
- *      XXX.
- *    - Note that a secondary sort is always done on the first two columns
- *      (by the second, and then by the first column). This provides a crude
- *      way to sort by surname and name. (Look at sequence of "Bluth" rows
- *      changing when sorting on Last Name.)
- *    - Rows get odd and even classes for CSS styling.
- *    - If something looks more like a date than like a number (specifically
- *      1999-01-01, not e.g. 01-01-1999) it will be sorted textually, not
- *      numerically. Dates aren't validated.
- *    - If something looks like a number, javascript will make some wild
- *      guesses about it. It can turn out weird (try sorting on the "No Date"
- *      column).
- *
- *    # Example
- *
- *    {{ example-1 }}
- *
- * Example: example-1
- *    <table class="pat-tablesorter">
- *      <thead>
- *        <th>First Name</th>
- *        <th>Last Name</th>
- *        <th>Occupation</th>
- *        <th>Age</th>
- *      </thead>
- *      <tr>
- *        <td>Buster</td>
- *        <td>Bluth</td>
- *        <td>Army</td>
- *        <td>35</td>
- *      </tr>
- *      <tr>
- *        <td>Michael</td>
- *        <td>Bluth</td>
- *        <td>Company President</td>
- *        <td>39</td>
- *      </tr>
- *      <tr>
- *        <td>GOB</td>
- *        <td>Bluth</td>
- *        <td>Magician</td>
- *        <td>37</td>
- *      </tr>
- *      <tr>
- *        <td>Lindsay</td>
- *        <td>Fünke</td>
- *        <td>Protester</td>
- *        <td>36</td>
- *      </tr>
- *      <tr>
- *        <td>Tony</td>
- *        <td>Wonder</td>
- *        <td>Magician</td>
- *        <td>35</td>
- *      </tr>
- *      <tr>
- *        <td>Tobias</td>
- *        <td>Fünke</td>
- *        <td>Therapist</td>
- *        <td>40</td>
- *      </tr>
- *    </table>
- *
- */
-
-
-define([
-  'jquery',
-  'mockup-patterns-base'
-], function($, Base) {
-  'use strict';
-
-  var TableSorter = Base.extend({
-    name: 'tablesorter',
-    trigger: '.pat-tablesorter',
-    defaults: {},
-    sortabledataclass: function (cell) {
-      var re, matches;
-
-      re = new RegExp('sortabledata-([^ ]*)','g');
-      matches = re.exec(cell.attr('class'));
-      if (matches) {
-        return matches[1];
-      } else {
-        return null;
-      }
-    },
-    sortable: function (cell) {
-      var self = this;
-      // convert a cell into something sortable
-
-      // use sortabledata-xxx cell class if it is defined
-      var text = self.sortabledataclass(cell);
-      if (text === null) { text = cell.text(); }
-
-      // A number, but not a date?
-      if (text.charAt(4) !== '-' && text.charAt(7) !== '-' && !isNaN(parseFloat(text))) {
-        return parseFloat(text);
-      }
-      return text.toLowerCase();
-    },
-    sort: function ($this) {
-      var self = this;
-      var th, colnum, table, tbody, reverse, index, data, usenumbers, tsorted;
-      th = $($this).closest('th');
-      colnum = $('th', $($this).closest('thead')).index(th);
-      table = $($this).parents('table:first');
-      tbody = table.find('tbody:first');
-      tsorted = parseInt(table.attr('sorted') || '-1', 10);
-      reverse = tsorted === colnum;
-
-      $($this).parent().find('th .sortdirection')
-          .html('&#x2003;');
-      $($this).children('.sortdirection').html( reverse ? '&#x25bc;': '&#x25b2;' );
-
-      index = $($this).parent().children('th').index($this);
-      data = [];
-      usenumbers = true;
-      tbody.find('tr').each(function() {
-        var cells, sortableitem;
-
-        cells = $(this).children('td');
-        sortableitem = self.sortable.apply(self, [cells.slice(index,index + 1)]);
-        if (isNaN(sortableitem)) { usenumbers = false; }
-        data.push([
-          sortableitem,
-          // crude way to sort by surname and name after first choice
-          self.sortable.apply(self, [cells.slice(1,2)]),
-          self.sortable.apply(self, [cells.slice(0,1)]),
-          this
-        ]);
-      });
-
-      if (data.length) {
-        if (usenumbers) {
-          data.sort(function(a,b) { return a[0] - b[0]; });
-        } else {
-          data.sort();
-        }
-        if (reverse) { data.reverse(); }
-        table.attr('sorted', reverse ? '' : colnum);
-
-        // appending the tr nodes in sorted order will remove them from their old ordering
-        tbody.append($.map(data, function(a) { return a[3]; }));
-        // jquery :odd and :even are 0 based
-        tbody.each(self.setoddeven);
-      }
-    },
-
-    setoddeven: function () {
-      var tbody = $(this);
-      // jquery :odd and :even are 0 based
-      tbody.find('tr').removeClass('odd').removeClass('even')
-          .filter(':odd').addClass('even').end()
-          .filter(':even').addClass('odd');
-    },
-
-    init: function() {
-      var self = this;
-      // set up blank spaceholder gif
-      var blankarrow = $('<span>&#x2003;</span>').addClass('sortdirection');
-      // all listing tables not explicitly nosort, all sortable th cells
-      // give them a pointer cursor and  blank cell and click event handler
-      // the first one of the cells gets a up arrow instead.
-      self.$el.find('thead th').append(blankarrow.clone())
-          .css('cursor', 'pointer')
-          .on('click', function(e) {
-            self.sort.apply(self, [this]);
-          });
-
-      self.$el.children('tbody').each(self.setoddeven);
-
-    }
-  });
-
-  return TableSorter;
-
-});
diff --git a/mockup/tests/pattern-tablesorter-test.js b/mockup/tests/pattern-tablesorter-test.js
deleted file mode 100644
index 827f071..0000000
--- a/mockup/tests/pattern-tablesorter-test.js
+++ /dev/null
@@ -1,122 +0,0 @@
-define([
-  'expect',
-  'jquery',
-  'pat-registry',
-  'mockup-patterns-tablesorter'
-], function(expect, $, registry, Tablesorter) {
-  'use strict';
-
-  window.mocha.setup('bdd');
-  $.fx.off = true;
-
-/* ==========================
-   TEST: TableSorter
-  ========================== */
-
-  describe('TableSorter', function () {
-    beforeEach(function() {
-      this.$el = $ ('' +
-        '<table class="pat-tablesorter">' +
-        '   <thead>' +
-        '     <tr>' +
-        '       <th>First Name</th>' +
-        '       <th>Last Name</th>' +
-        '       <th>Number</th>' +
-        '     </tr>' +
-        '   </thead>' +
-        '   <tbody>' +
-        '     <tr>' +
-        '       <td>AAA</td>' +
-        '       <td>ZZZ</td>' +
-        '       <td>3</td>' +
-        '     </tr>' +
-        '     <tr>' +
-        '       <td>BBB</td>' +
-        '       <td>YYY</td>' +
-        '       <td>1</td>' +
-        '     </tr>' +
-        '     <tr>' +
-        '       <td>CCC</td>' +
-        '       <td>XXX</td>' +
-        '       <td>2</td>' +
-        '     </tr>' +
-        '   </tbody>' +
-        ' </table>');
-    });
-    it('test headers have the sort arrow', function() {
-      registry.scan(this.$el);
-      expect(this.$el.find('.sortdirection').size()).to.equal(3);
-    });
-    it('test sort by second column', function() {
-      registry.scan(this.$el);
-      this.$el.find('thead th').eq(1).trigger('click');
-
-      var shouldBe = ['CCC', 'BBB', 'AAA'];
-      var elem;
-      for (var i = 0; i < shouldBe.length; i += 1) {
-        // We are checking first td of each tr of tbody, just to see the
-        // order
-        elem = this.$el.find('tbody tr td').eq(i * 3);
-        expect(elem.text()).to.equal(shouldBe[i]);
-      }
-
-      var trs = this.$el.find('tbody tr');
-      expect(trs.eq(0).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(1).hasClass('odd')).to.be.equal(false);
-      expect(trs.eq(2).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(0).hasClass('even')).to.be.equal(false);
-      expect(trs.eq(1).hasClass('even')).to.be.equal(true);
-      expect(trs.eq(2).hasClass('even')).to.be.equal(false);
-
-    });
-    it('test sort by third column', function() {
-      registry.scan(this.$el);
-      this.$el.find('thead th').eq(2).trigger('click');
-
-      var shouldBe = ['BBB', 'CCC', 'AAA'];
-      var elem;
-      for (var i = 0; i < shouldBe.length; i += 1) {
-        // We are checking first td of each tr of tbody, just to see the
-        // order
-        elem = this.$el.find('tbody tr td').eq(i * 3);
-        expect(elem.text()).to.equal(shouldBe[i]);
-      }
-
-      var trs = this.$el.find('tbody tr');
-      expect(trs.eq(0).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(1).hasClass('odd')).to.be.equal(false);
-      expect(trs.eq(2).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(0).hasClass('even')).to.be.equal(false);
-      expect(trs.eq(1).hasClass('even')).to.be.equal(true);
-      expect(trs.eq(2).hasClass('even')).to.be.equal(false);
-
-    });
-    it('test several sorts and finally back to first column', function() {
-      registry.scan(this.$el);
-      this.$el.find('thead th').eq(2).trigger('click');
-      this.$el.find('thead th').eq(3).trigger('click');
-      this.$el.find('thead th').eq(2).trigger('click');
-      this.$el.find('thead th').eq(1).trigger('click');
-      this.$el.find('thead th').eq(3).trigger('click');
-      this.$el.find('thead th').eq(1).trigger('click');
-
-      var shouldBe = ['AAA', 'BBB', 'CCC'];
-      var elem;
-      for (var i = 0; i < shouldBe.length; i += 1) {
-        // We are checking first td of each tr of tbody, just to see the
-        // order
-        elem = this.$el.find('tbody tr td').eq(i * 3);
-        expect(elem.text()).to.equal(shouldBe[i]);
-      }
-
-      var trs = this.$el.find('tbody tr');
-      expect(trs.eq(0).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(1).hasClass('odd')).to.be.equal(false);
-      expect(trs.eq(2).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(0).hasClass('even')).to.be.equal(false);
-      expect(trs.eq(1).hasClass('even')).to.be.equal(true);
-      expect(trs.eq(2).hasClass('even')).to.be.equal(false);
-
-    });
-  });
-});


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-27T19:07:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/mockup/commit/2cec92921e754d830d24246a198e9eefd6a6ca95

Merge pull request #540 from plone/remove-tablesorter

remove unused tablesorter pattern

Files changed:
M CHANGES.rst
M mockup/js/bundles/docs.js
M mockup/js/config.js
D mockup/patterns/tablesorter/pattern.js
D mockup/tests/pattern-tablesorter-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 7922a1e..d9e9632 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,9 +1,12 @@
 Changelog
 =========
 
-2.0.6 (unreleased)
+2.1.0 (unreleased)
 ------------------
 
+- remove unused tablesorter pattern
+  [vangheem]
+
 - switch to tab where link/image data is loaded from on tinymce pattern
   [vangheem]
 
diff --git a/mockup/js/bundles/docs.js b/mockup/js/bundles/docs.js
index 2f26e7d..8c787aa 100644
--- a/mockup/js/bundles/docs.js
+++ b/mockup/js/bundles/docs.js
@@ -112,11 +112,6 @@ require([
             description: 'Managing a folder of items',
             url: 'patterns/structure/pattern.js'
           },
-          { id: 'tablesorter',
-            title: 'Table Sorter',
-            description: 'A pattern you can apply to a table so it can have its items rearranged when clicking the header',
-            url: 'patterns/tablesorter/pattern.js'
-          },
           { id: 'textareamimetypeselector',
             title: 'Textarea MimeType Selector',
             description: 'Selects the MimeType for a textarea and changes the widget according to the MimeType',
diff --git a/mockup/js/config.js b/mockup/js/config.js
index e52b5e4..9fde4c4 100644
--- a/mockup/js/config.js
+++ b/mockup/js/config.js
@@ -86,7 +86,6 @@
       'mockup-patterns-sortable': 'patterns/sortable/pattern',
       'mockup-patterns-structure': 'patterns/structure/pattern',
       'mockup-patterns-structure-url': 'patterns/structure',
-      'mockup-patterns-tablesorter': 'patterns/tablesorter/pattern',
       'mockup-patterns-textareamimetypeselector': 'patterns/textareamimetypeselector/pattern',
       'mockup-patterns-texteditor': 'patterns/texteditor/pattern',
       'mockup-patterns-thememapper': 'patterns/thememapper/pattern',
diff --git a/mockup/patterns/tablesorter/pattern.js b/mockup/patterns/tablesorter/pattern.js
deleted file mode 100644
index 4176567..0000000
--- a/mockup/patterns/tablesorter/pattern.js
+++ /dev/null
@@ -1,185 +0,0 @@
-/* Tablesorter pattern.
- *
- * Documentation:
- *    # Directions
- *
- *    - If the displayed data doesn't match the sequence (as in days of the
- *      week), provide a sortabledata-XXX class. The column will be sorted on
- *      XXX.
- *    - Note that a secondary sort is always done on the first two columns
- *      (by the second, and then by the first column). This provides a crude
- *      way to sort by surname and name. (Look at sequence of "Bluth" rows
- *      changing when sorting on Last Name.)
- *    - Rows get odd and even classes for CSS styling.
- *    - If something looks more like a date than like a number (specifically
- *      1999-01-01, not e.g. 01-01-1999) it will be sorted textually, not
- *      numerically. Dates aren't validated.
- *    - If something looks like a number, javascript will make some wild
- *      guesses about it. It can turn out weird (try sorting on the "No Date"
- *      column).
- *
- *    # Example
- *
- *    {{ example-1 }}
- *
- * Example: example-1
- *    <table class="pat-tablesorter">
- *      <thead>
- *        <th>First Name</th>
- *        <th>Last Name</th>
- *        <th>Occupation</th>
- *        <th>Age</th>
- *      </thead>
- *      <tr>
- *        <td>Buster</td>
- *        <td>Bluth</td>
- *        <td>Army</td>
- *        <td>35</td>
- *      </tr>
- *      <tr>
- *        <td>Michael</td>
- *        <td>Bluth</td>
- *        <td>Company President</td>
- *        <td>39</td>
- *      </tr>
- *      <tr>
- *        <td>GOB</td>
- *        <td>Bluth</td>
- *        <td>Magician</td>
- *        <td>37</td>
- *      </tr>
- *      <tr>
- *        <td>Lindsay</td>
- *        <td>Fünke</td>
- *        <td>Protester</td>
- *        <td>36</td>
- *      </tr>
- *      <tr>
- *        <td>Tony</td>
- *        <td>Wonder</td>
- *        <td>Magician</td>
- *        <td>35</td>
- *      </tr>
- *      <tr>
- *        <td>Tobias</td>
- *        <td>Fünke</td>
- *        <td>Therapist</td>
- *        <td>40</td>
- *      </tr>
- *    </table>
- *
- */
-
-
-define([
-  'jquery',
-  'mockup-patterns-base'
-], function($, Base) {
-  'use strict';
-
-  var TableSorter = Base.extend({
-    name: 'tablesorter',
-    trigger: '.pat-tablesorter',
-    defaults: {},
-    sortabledataclass: function (cell) {
-      var re, matches;
-
-      re = new RegExp('sortabledata-([^ ]*)','g');
-      matches = re.exec(cell.attr('class'));
-      if (matches) {
-        return matches[1];
-      } else {
-        return null;
-      }
-    },
-    sortable: function (cell) {
-      var self = this;
-      // convert a cell into something sortable
-
-      // use sortabledata-xxx cell class if it is defined
-      var text = self.sortabledataclass(cell);
-      if (text === null) { text = cell.text(); }
-
-      // A number, but not a date?
-      if (text.charAt(4) !== '-' && text.charAt(7) !== '-' && !isNaN(parseFloat(text))) {
-        return parseFloat(text);
-      }
-      return text.toLowerCase();
-    },
-    sort: function ($this) {
-      var self = this;
-      var th, colnum, table, tbody, reverse, index, data, usenumbers, tsorted;
-      th = $($this).closest('th');
-      colnum = $('th', $($this).closest('thead')).index(th);
-      table = $($this).parents('table:first');
-      tbody = table.find('tbody:first');
-      tsorted = parseInt(table.attr('sorted') || '-1', 10);
-      reverse = tsorted === colnum;
-
-      $($this).parent().find('th .sortdirection')
-          .html('&#x2003;');
-      $($this).children('.sortdirection').html( reverse ? '&#x25bc;': '&#x25b2;' );
-
-      index = $($this).parent().children('th').index($this);
-      data = [];
-      usenumbers = true;
-      tbody.find('tr').each(function() {
-        var cells, sortableitem;
-
-        cells = $(this).children('td');
-        sortableitem = self.sortable.apply(self, [cells.slice(index,index + 1)]);
-        if (isNaN(sortableitem)) { usenumbers = false; }
-        data.push([
-          sortableitem,
-          // crude way to sort by surname and name after first choice
-          self.sortable.apply(self, [cells.slice(1,2)]),
-          self.sortable.apply(self, [cells.slice(0,1)]),
-          this
-        ]);
-      });
-
-      if (data.length) {
-        if (usenumbers) {
-          data.sort(function(a,b) { return a[0] - b[0]; });
-        } else {
-          data.sort();
-        }
-        if (reverse) { data.reverse(); }
-        table.attr('sorted', reverse ? '' : colnum);
-
-        // appending the tr nodes in sorted order will remove them from their old ordering
-        tbody.append($.map(data, function(a) { return a[3]; }));
-        // jquery :odd and :even are 0 based
-        tbody.each(self.setoddeven);
-      }
-    },
-
-    setoddeven: function () {
-      var tbody = $(this);
-      // jquery :odd and :even are 0 based
-      tbody.find('tr').removeClass('odd').removeClass('even')
-          .filter(':odd').addClass('even').end()
-          .filter(':even').addClass('odd');
-    },
-
-    init: function() {
-      var self = this;
-      // set up blank spaceholder gif
-      var blankarrow = $('<span>&#x2003;</span>').addClass('sortdirection');
-      // all listing tables not explicitly nosort, all sortable th cells
-      // give them a pointer cursor and  blank cell and click event handler
-      // the first one of the cells gets a up arrow instead.
-      self.$el.find('thead th').append(blankarrow.clone())
-          .css('cursor', 'pointer')
-          .on('click', function(e) {
-            self.sort.apply(self, [this]);
-          });
-
-      self.$el.children('tbody').each(self.setoddeven);
-
-    }
-  });
-
-  return TableSorter;
-
-});
diff --git a/mockup/tests/pattern-tablesorter-test.js b/mockup/tests/pattern-tablesorter-test.js
deleted file mode 100644
index 827f071..0000000
--- a/mockup/tests/pattern-tablesorter-test.js
+++ /dev/null
@@ -1,122 +0,0 @@
-define([
-  'expect',
-  'jquery',
-  'pat-registry',
-  'mockup-patterns-tablesorter'
-], function(expect, $, registry, Tablesorter) {
-  'use strict';
-
-  window.mocha.setup('bdd');
-  $.fx.off = true;
-
-/* ==========================
-   TEST: TableSorter
-  ========================== */
-
-  describe('TableSorter', function () {
-    beforeEach(function() {
-      this.$el = $ ('' +
-        '<table class="pat-tablesorter">' +
-        '   <thead>' +
-        '     <tr>' +
-        '       <th>First Name</th>' +
-        '       <th>Last Name</th>' +
-        '       <th>Number</th>' +
-        '     </tr>' +
-        '   </thead>' +
-        '   <tbody>' +
-        '     <tr>' +
-        '       <td>AAA</td>' +
-        '       <td>ZZZ</td>' +
-        '       <td>3</td>' +
-        '     </tr>' +
-        '     <tr>' +
-        '       <td>BBB</td>' +
-        '       <td>YYY</td>' +
-        '       <td>1</td>' +
-        '     </tr>' +
-        '     <tr>' +
-        '       <td>CCC</td>' +
-        '       <td>XXX</td>' +
-        '       <td>2</td>' +
-        '     </tr>' +
-        '   </tbody>' +
-        ' </table>');
-    });
-    it('test headers have the sort arrow', function() {
-      registry.scan(this.$el);
-      expect(this.$el.find('.sortdirection').size()).to.equal(3);
-    });
-    it('test sort by second column', function() {
-      registry.scan(this.$el);
-      this.$el.find('thead th').eq(1).trigger('click');
-
-      var shouldBe = ['CCC', 'BBB', 'AAA'];
-      var elem;
-      for (var i = 0; i < shouldBe.length; i += 1) {
-        // We are checking first td of each tr of tbody, just to see the
-        // order
-        elem = this.$el.find('tbody tr td').eq(i * 3);
-        expect(elem.text()).to.equal(shouldBe[i]);
-      }
-
-      var trs = this.$el.find('tbody tr');
-      expect(trs.eq(0).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(1).hasClass('odd')).to.be.equal(false);
-      expect(trs.eq(2).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(0).hasClass('even')).to.be.equal(false);
-      expect(trs.eq(1).hasClass('even')).to.be.equal(true);
-      expect(trs.eq(2).hasClass('even')).to.be.equal(false);
-
-    });
-    it('test sort by third column', function() {
-      registry.scan(this.$el);
-      this.$el.find('thead th').eq(2).trigger('click');
-
-      var shouldBe = ['BBB', 'CCC', 'AAA'];
-      var elem;
-      for (var i = 0; i < shouldBe.length; i += 1) {
-        // We are checking first td of each tr of tbody, just to see the
-        // order
-        elem = this.$el.find('tbody tr td').eq(i * 3);
-        expect(elem.text()).to.equal(shouldBe[i]);
-      }
-
-      var trs = this.$el.find('tbody tr');
-      expect(trs.eq(0).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(1).hasClass('odd')).to.be.equal(false);
-      expect(trs.eq(2).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(0).hasClass('even')).to.be.equal(false);
-      expect(trs.eq(1).hasClass('even')).to.be.equal(true);
-      expect(trs.eq(2).hasClass('even')).to.be.equal(false);
-
-    });
-    it('test several sorts and finally back to first column', function() {
-      registry.scan(this.$el);
-      this.$el.find('thead th').eq(2).trigger('click');
-      this.$el.find('thead th').eq(3).trigger('click');
-      this.$el.find('thead th').eq(2).trigger('click');
-      this.$el.find('thead th').eq(1).trigger('click');
-      this.$el.find('thead th').eq(3).trigger('click');
-      this.$el.find('thead th').eq(1).trigger('click');
-
-      var shouldBe = ['AAA', 'BBB', 'CCC'];
-      var elem;
-      for (var i = 0; i < shouldBe.length; i += 1) {
-        // We are checking first td of each tr of tbody, just to see the
-        // order
-        elem = this.$el.find('tbody tr td').eq(i * 3);
-        expect(elem.text()).to.equal(shouldBe[i]);
-      }
-
-      var trs = this.$el.find('tbody tr');
-      expect(trs.eq(0).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(1).hasClass('odd')).to.be.equal(false);
-      expect(trs.eq(2).hasClass('odd')).to.be.equal(true);
-      expect(trs.eq(0).hasClass('even')).to.be.equal(false);
-      expect(trs.eq(1).hasClass('even')).to.be.equal(true);
-      expect(trs.eq(2).hasClass('even')).to.be.equal(false);
-
-    });
-  });
-});


