Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:29+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/ade6c59960e7780883d3c523179bfc3ef8d1d7d4

Setup p.a.testing infrastructure

Files changed:
A plone/app/users/testing.py
M plone/app/users/tests/test_doctests.py

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
new file mode 100644
index 0000000..f092566
--- /dev/null
+++ b/plone/app/users/testing.py
@@ -0,0 +1,44 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone.tests.utils import MockMailHost
+from Products.MailHost.interfaces import IMailHost
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+from zope.component import getSiteManager
+from zope.configuration import xmlconfig
+
+import doctest
+
+
+class PloneAppUsersLayer(PloneSandboxLayer):
+    defaultBases = (PLONE_FIXTURE, )
+
+    def setUpZope(self, app, configurationContext):
+        import plone.app.users
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.users,
+            context=configurationContext
+        )
+
+    def setUpPloneSite(self, portal):
+        # Configure mock mail host
+        mail_host = portal.MailHost = MockMailHost('MailHost')
+        site_manager = getSiteManager(portal)
+        site_manager.unregisterUtility(provided=IMailHost)
+        site_manager.registerUtility(mail_host, IMailHost)
+
+
+PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()
+PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_USERS_FIXTURE, ),
+    name='PloneAppUsersLayer:Integration'
+)
+PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_APP_USERS_FIXTURE, ),
+    name='PloneAppUsersLayer:Functional'
+)
+
+
+optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
diff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py
index 5fbcbe8..25a0625 100644
--- a/plone/app/users/tests/test_doctests.py
+++ b/plone/app/users/tests/test_doctests.py
@@ -1,15 +1,12 @@
 # -*- coding: utf-8 -*-
-from Products.PloneTestCase.PloneTestCase import setupPloneSite
-from Testing.ZopeTestCase import FunctionalDocFileSuite
-from plone.app.users.tests.base import BaseTestCase
-from unittest import TestSuite
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from plone.app.users.testing import optionflags
+from plone.testing import layered
 
 import doctest
+import unittest
 
 
-setupPloneSite()
-OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
-
 doc_tests = [
     'duplicate_email.rst',
     'email_login.rst',
@@ -27,12 +24,16 @@
 
 
 def test_suite():
-    suite = TestSuite()
-    for test_file in doc_tests:
-        suite.addTest(FunctionalDocFileSuite(
-            test_file,
-            optionflags=OPTIONFLAGS,
-            package='plone.app.users.tests',
-            test_class=BaseTestCase
-        ))
+    suite = unittest.TestSuite()
+    suite.addTests([
+        layered(
+            doctest.DocFileSuite(
+                'tests/{0}'.format(test_file),
+                package='plone.app.users',
+                optionflags=optionflags
+            ),
+            layer=PLONE_APP_USERS_FUNCTIONAL_TESTING)
+        for test_file in doc_tests
+    ])
+
     return suite


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:29+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/c6f3a6a02ac8e88b7efaf8bd034bda691331e14f

Migrate flexible_user_registration.rst

Files changed:
M plone/app/users/tests/flexible_user_registration.rst

diff --git a/plone/app/users/tests/flexible_user_registration.rst b/plone/app/users/tests/flexible_user_registration.rst
index 89a7d9b..5d25e19 100644
--- a/plone/app/users/tests/flexible_user_registration.rst
+++ b/plone/app/users/tests/flexible_user_registration.rst
@@ -1,7 +1,13 @@
+======================================
 Testing the flexible user registration
 ======================================
 
-    >>> browser = self.browser
+    >>> from plone.testing.z2 import Browser
+    >>> import transaction
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
     >>> from zope.component import getUtility
     >>> from plone.keyring.interfaces import IKeyManager
     >>> import hmac
@@ -51,12 +57,13 @@ Check that the site admin has a link to the configlet in the control panel.
     >>> 'home_page' in user_registration_fields.displayOptions
     False
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 Let's add home_page to the list of registration form fields.
 (Setting this by hand since add/remove widget doesn't work properly without javascript)
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['fullname', 'username', 'email', 'password', 'home_page'])
+    >>> transaction.commit()
 
 It should show up at the end of the form.
     >>> browser.open('http://nohost/plone/@@register')
@@ -85,6 +92,7 @@ Log out. Assert that we now have the home_page in the join form.
 Rearrange the fields
 (Setting this by hand since add/remove widget doesn't work properly without javascript)
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['fullname', 'username', 'password', 'home_page', 'email'])
+    >>> transaction.commit()
     >>> browser.open('http://nohost/plone/@@register')
     >>> browser.contents
     '...Home page...E-mail...'
@@ -127,6 +135,7 @@ Check render register form in 'Use Email As Login' mode.
 
     >>> portal.portal_properties.site_properties._updateProperty('use_email_as_login', True)
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username'])
+    >>> transaction.commit()
     >>> browser.open('http://nohost/plone/@@register')
     >>> 'Registration form' in browser.contents
     True
@@ -146,6 +155,8 @@ Revert email mode.
 Check register form with portrait field.
 
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['portrait'])
+    >>> transaction.commit()
+
     >>> browser.open('http://nohost/plone/@@register')
     >>> 'Registration form' in browser.contents
     True
@@ -166,6 +177,8 @@ Check more validation errors. Test Confirmation Password and invalid
 email, and reserved user name validations:
 
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username', 'email', 'password', 'mail_me'])
+    >>> transaction.commit()
+
     >>> browser.open('http://nohost/plone/@@register')
     >>> 'Registration form' in browser.contents
     True
@@ -197,6 +210,7 @@ supported by our test browser.
 Set list of registration fields:
 
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username', 'email'])
+    >>> transaction.commit()
 
 Login as admin.
 


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/efc09252d543414438e716973ee6985541c1c359

Migrate email_login.rst

Files changed:
M plone/app/users/tests/email_login.rst

diff --git a/plone/app/users/tests/email_login.rst b/plone/app/users/tests/email_login.rst
index 9f32103..cadd8c5 100644
--- a/plone/app/users/tests/email_login.rst
+++ b/plone/app/users/tests/email_login.rst
@@ -1,18 +1,31 @@
+===================================
 Testing email address as login name
 ===================================
 
-    >>> browser = self.browser
-    >>> browser.open('http://nohost/plone')
+Set up
+======
+
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
+Browsers
+--------
 
-    Set up a mailhost...
-    >>> self.setMailHost()
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+Configure security
+------------------
 
-    Configure the security.
-    >>> from Products.PloneTestCase.PloneTestCase import portal_owner, default_password
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
+
     >>> browser.open('http://nohost/plone/@@security-controlpanel')
     >>> browser.getControl('Enable self-registration').selected = True
     >>> browser.getControl('Let users select their own passwords').selected = True
@@ -20,24 +33,32 @@ Testing email address as login name
     >>> browser.getControl('Save').click()
     >>> 'Changes saved' in browser.contents
     True
+
     >>> browser.getLink(url='http://nohost/plone/logout').click()
     >>> 'Log in' in browser.contents
     True
 
-    Logged out user should now see the register link.
+Visitors can register
+=====================
+
+Logged out user should now see the register link.
+
     >>> 'Register' in browser.contents
     True
-    >>> browser.open('http://nohost/plone/@@register')
 
-    The form should now be visible, without the user name field.
+The form should now be visible, without the user name field.
+
+    >>> browser.open('http://nohost/plone/@@register')
     >>> 'User Name' in browser.contents
     False
 
-    The form should be using CSRF protection
-    >>> self.browser.getControl(name='_authenticator')
+The form should be using CSRF protection.
+
+    >>> browser.getControl(name='_authenticator')
     <Control name='_authenticator' type='hidden'>
 
-    Fill out the form, using an odd email address that should not give problems.
+Fill out the form, using an odd email address that should not give problems.
+
     >>> browser.getControl('Full Name').value = 'Bob Jones'
     >>> browser.getControl('E-mail').value = 'bob-jones+test@example.com'
     >>> browser.getControl('Password').value = 'secret'
@@ -46,7 +67,11 @@ Testing email address as login name
     >>> 'Failed to create your account' in browser.contents
     False
 
-    We can login immediately.
+Login
+=====
+
+We can login immediately.
+
     >>> 'Click the button to log in immediately.' in browser.contents
     True
     >>> browser.getControl('Log in').click()
@@ -59,34 +84,45 @@ Testing email address as login name
     True
     >>> browser.getLink(url='http://nohost/plone/logout').click()
 
-    We login as manager. The login form now has a different label for
-    the login name.
+Login form changes
+==================
+
+The login form now has a different label for the login name.
+
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('E-mail').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> browser.getControl('E-mail').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
-    The user id is now bob-jones, based on the full name:
+The user id is now bob-jones, based on the full name:
+
     >>> browser.open('http://nohost/plone/@@user-information?userid=bob-jones')
     >>> 'Bob Jones' in browser.contents
     True
 
-    Great! The user-facing form works. Let's try the manager's version...
+Manager adds a new member
+=========================
+
+Great! The user-facing form works. Let's try the manager's version...
+
     >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
     >>> browser.getLink('Add New User').click()
     >>> '@@new-user' in browser.url
     True
 
-    The form should be using CSRF protection
-    >>> self.browser.getControl(name='_authenticator', index=0)
+The form should be using CSRF protection.
+
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
-    Check that user name is not displayed.
+Check that user name is not displayed.
+
     >>> 'User Name' in browser.contents
     False
 
-    Fill out the form.  We use the same full name as before, to test
-    that we get a different user id.
+Fill out the form.
+Use the same full name as before, to test that we get a different user id.
+
     >>> browser.getControl('Full Name').value = 'Bob Jones'
     >>> browser.getControl('E-mail').value = 'bob-jones+test2@example.com'
     >>> browser.getControl('Password').value = 'secret'
@@ -97,7 +133,8 @@ Testing email address as login name
     >>> browser.contents
     '...User added...bob-jones-1...'
 
-    We can really get the new user.
+We can really get the new user.
+
     >>> browser.getControl('Show all').click()
     >>> browser.getLink(url='bob-jones-1').click()
     >>> '@@user-information?userid=bob-jones-1' in browser.url


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/fd07631e54dc578aa23f8a2c1055a06cc44a6cc3

Migrate duplicate_email.rst

Files changed:
M plone/app/users/tests/duplicate_email.rst

diff --git a/plone/app/users/tests/duplicate_email.rst b/plone/app/users/tests/duplicate_email.rst
index 80084e5..b6eb5f6 100644
--- a/plone/app/users/tests/duplicate_email.rst
+++ b/plone/app/users/tests/duplicate_email.rst
@@ -1,50 +1,121 @@
+=============================
 Test duplicate mail addresses
 =============================
 
 When email address is used as login name, duplicates are not allowed.
 
-Use email addresses as login name:
+Use email addresses as login name.
+
+Set up
+======
+
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
+    >>> user1_name = 'User one'
+    >>> user1_email = 'userone@example.com'
+    >>> user1_password = 'secret'
+
+    >>> user2_name = 'User two'
+    >>> user2_email = 'usertwo@example.com'
+    >>> user2_password = 'secret'
 
-    >>> ptool = self.portal.portal_properties
-    >>> ptool.site_properties._updateProperty('use_email_as_login', True)
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
 
-Create a new user one:
+Configure security
+------------------
 
-    >>> mtool = self.portal.portal_membership
-    >>> mtool.addMember('userone@example.com', 'secret', [], [])
-    >>> userone = mtool.getMemberById('userone@example.com')
-    >>> userone.setMemberProperties({'email':'userone@example.com'})
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
-Create a new user two:
+    >>> browser.open('http://nohost/plone/@@security-controlpanel')
+    >>> browser.getControl('Use email address as login name ').selected = True
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
+    True
+
+Create two users
+----------------
+
+First one:
 
-    >>> mtool.addMember('usertwo@example.com', 'secret', [], [])
-    >>> usertwo = mtool.getMemberById('usertwo@example.com')
-    >>> usertwo.setMemberProperties({'email':'usertwo@example.com'})
+    >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
+    >>> browser.getLink('Add New User').click()
+    >>> '@@new-user' in browser.url
+    True
+
+Fill out the form.
+
+    >>> browser.getControl('Full Name').value = user1_name
+    >>> browser.getControl('E-mail').value = user1_email
+    >>> browser.getControl('Password').value = user1_password
+    >>> browser.getControl('Confirm password').value = user1_password
+    >>> browser.getControl('Register').click()
+    >>> '@@usergroup-userprefs' in browser.url
+    True
+    >>> browser.contents
+    '...User added...'
+
+The second:
+
+    >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
+    >>> browser.getLink('Add New User').click()
+    >>> '@@new-user' in browser.url
+    True
+
+Fill out the form.
+
+    >>> browser.getControl('Full Name').value = user2_name
+    >>> browser.getControl('E-mail').value = user2_email
+    >>> browser.getControl('Password').value = user2_password
+    >>> browser.getControl('Confirm password').value = user2_password
+    >>> browser.getControl('Register').click()
+    >>> '@@usergroup-userprefs' in browser.url
+    True
+    >>> browser.contents
+    '...User added...'
+
+Logout:
+
+    >>> browser.getLink(url='http://nohost/plone/logout').click()
+
+Login
+=====
 
 Login as user two:
 
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
 
-    >>> self.browser.getControl('E-mail').value = 'usertwo@example.com'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
-    >>> 'Login failed' in self.browser.contents
+    >>> browser.getControl('E-mail').value = user2_email
+    >>> browser.getControl('Password').value = user2_password
+    >>> browser.getControl('Log in').click()
+    >>> 'Login failed' in browser.contents
     False
 
-Now we should be able to access the user data panel:
+Should be able to access the user data panel:
 
-    >>> self.browser.open('http://nohost/plone/@@personal-information')
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open('http://nohost/plone/@@personal-information')
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith('@@personal-information')
+    >>> browser.url.endswith('@@personal-information')
     True
 
+Change e-mail
+=============
+
 Setting the e-mail address to an existing one should give an error message:
 
-    >>> self.browser.getControl('E-mail').value = 'userone@example.com'
-    >>> self.browser.getControl('Save').click()
-    >>> 'The email address you selected is already in use' in self.browser.contents
+    >>> browser.getControl('E-mail').value = user1_email
+    >>> browser.getControl('Save').click()
+    >>> 'The email address you selected is already in use' in browser.contents
     True
-    >>> 'Changes saved' in self.browser.contents
+    >>> 'Changes saved' in browser.contents
     False


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/929bf1efd02f57db9244deff7562e41e3301555d

Migrate member_search.rst

Files changed:
M plone/app/users/tests/member_search.rst

diff --git a/plone/app/users/tests/member_search.rst b/plone/app/users/tests/member_search.rst
index 9337d9b..13e3585 100644
--- a/plone/app/users/tests/member_search.rst
+++ b/plone/app/users/tests/member_search.rst
@@ -1,11 +1,61 @@
+==============================
 Testing the member search form
 ==============================
 
 This is about the 'member_search' form. This test will try to use the form as
 anonymous. Then login as a Plone user, and try again.
 
+Set up
+======
+
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
     >>> view_name = '@@member-search'
-    >>> browser = self.browser
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+Manager creates a user
+----------------------
+
+Login as manager:
+
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Log in').click()
+
+Go to the add new user form:
+
+    >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
+    >>> browser.getLink('Add New User').click()
+
+Fill out the form.
+
+    >>> browser.getControl('Full Name').value = 'Bob Jones'
+    >>> browser.getControl('User Name').value = 'bob-jones'
+    >>> browser.getControl('E-mail').value = 'bob-jones+test2@example.com'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Confirm password').value = 'secret'
+    >>> browser.getControl('Register').click()
+    >>> browser.contents
+    '...User added...bob-jones...'
+
+Logout:
+
+    >>> browser.getLink(url='http://nohost/plone/logout').click()
+    >>> 'Log in' in browser.contents
+    True
+
+Member search as anonymous
+==========================
 
 Viewing this form should be possible for anonymous users:
 
@@ -29,11 +79,14 @@ But they will not see any member of the portal.
     >>> 'You are not allowed to list portal members.' in browser.contents
     True
 
+Member search logged-in
+=======================
+
 So let's login as Plone user and try again:
 
     >>> browser.getLink('Log in').click()
-    >>> browser.getControl('Login Name').value = 'test_user_1_'
-    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 Now we should be on the member search as a logged in user:
@@ -43,12 +96,12 @@ Now we should be on the member search as a logged in user:
     >>> browser.url.endswith(view_name)
     True
 
-So let's search again. We should see two Members (admin, test_user_1_):
+So let's search again. We should see two members (test_user_1_ and bob):
 
     >>> browser.getControl(name='form.buttons.search').click()
     >>> '2 items matching your search terms.' in browser.contents
     True
-    >>> '<a href="http://nohost/plone/Members/test_user_1_">'in browser.contents
+    >>> '<a href="http://nohost/plone/author/test_user_1_">'in browser.contents
     True
-    >>> '<a href="http://nohost/plone/author/admin">'in browser.contents
+    >>> '<a href="http://nohost/plone/author/bob-jones">'in browser.contents
     True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/2bd9bd5027c73b7f2a25f8966a3a4792411eac69

Migrate test_loginname_generator.py

Files changed:
M plone/app/users/tests/test_loginname_generator.py

diff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py
index 0b3ea51..e706725 100644
--- a/plone/app/users/tests/test_loginname_generator.py
+++ b/plone/app/users/tests/test_loginname_generator.py
@@ -1,18 +1,25 @@
 # -*- coding: utf-8 -*-
-# Note: test setup somehow fails when only tests from this file are run.
 from plone.app.users.browser.interfaces import ILoginNameGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
-from plone.app.users.tests.base import BaseTestCase
+from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
 from zope.component import getSiteManager
 
+import unittest
+
+
+class TestGenerateLoginName(unittest.TestCase):
+
+    layer = PLONE_APP_USERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
 
-class TestGenerateLoginName(BaseTestCase):
     def test_generate_user_id_simplistic(self):
         sm = getSiteManager(context=self.portal)
 
         # Without a function, return username
         self.assertEqual(
-            self.generateLoginName(dict(username='frank')),
+            self._generate_login_name(dict(username='frank')),
             'frank'
         )
 
@@ -20,11 +27,12 @@ def test_generate_user_id_simplistic(self):
         sm.registerUtility(lambda data: data['useme'],
                            provided=ILoginNameGenerator)
         self.assertEqual(
-            self.generateLoginName(dict(useme='me me me', username='frank')),
+            self._generate_login_name(dict(useme='me me me',
+                                           username='frank')),
             'me me me'
         )
 
-    def generateLoginName(self, data):
+    def _generate_login_name(self, data):
         """Generate login name, optionally registering function first"""
         form = BaseRegistrationForm(self.portal, {})
         return form.generate_login_name(data)


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/bf7ba86bb42ca2d8bd85a7b0ffb38d28a3d35928

Migrate test_userid_generator.py

Files changed:
M plone/app/users/tests/test_userid_generator.py

diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index 4d72d55..600ce01 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -1,13 +1,19 @@
 # -*- coding: utf-8 -*-
-# Note: test setup somehow fails when only tests from this file are run.
 from plone.app.users.browser.interfaces import IUserIdGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
-from plone.app.users.tests.base import BaseTestCase
+from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
 from plone.app.users.utils import uuid_userid_generator
 from zope.component import getSiteManager
 
+import unittest
 
-class TestGenerateUserId(BaseTestCase):
+
+class TestGenerateUserId(unittest.TestCase):
+
+    layer = PLONE_APP_USERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
 
     def test_standard_generate_user_id(self):
         form = BaseRegistrationForm(self.portal, {})
@@ -96,10 +102,13 @@ def test_generate_user_id_with_uuid(self):
                             form.generate_user_id(data))
 
 
-class TestGenerateUUIDUserId(BaseTestCase):
+class TestGenerateUUIDUserId(unittest.TestCase):
+
+    layer = PLONE_APP_USERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
 
-    def afterSetUp(self):
-        super(TestGenerateUUIDUserId, self).afterSetUp()
         # If use_uuid_as_userid is set in the site_properties, we
         # generate a uuid.
         self.ptool = ptool = getattr(self.portal, 'portal_properties')


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/e194b0dff01ce965df51501e06b40a2e43b27a00

Migrate test_new_user.py

Files changed:
M plone/app/users/tests/test_new_user.py

diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index efc5e3e..7f93ebf 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -1,25 +1,32 @@
 # -*- coding: utf-8 -*-
-from hashlib import sha1 as sha
-from plone.app.users.tests.base import BaseTestCase
-from plone.protect import authenticator as auth
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import setRoles
+from plone.testing.z2 import Browser
+from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
 
-import hmac
+import transaction
+import unittest
 
 
-class TestNewUser(BaseTestCase):
+class TestNewUser(unittest.TestCase):
+
+    layer = PLONE_APP_USERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        app = self.layer['app']
+        setRoles(self.portal, TEST_USER_ID, ['Manager', ])
+        self.browser = Browser(app)
 
     def test_new_user_as_site_administrator(self):
         self.portal.acl_users._doAddUser(
             'siteadmin', 'secret', ['Site Administrator'], []
         )
+        # make the user available
+        transaction.commit()
+
         self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
-        # XXX need to use auth token here because there is one case of write
-        # on read for portlets that isn't hit here...
-        ring = auth._getKeyring('siteadmin')
-        secret = ring.random()
-        token = hmac.new(secret, 'siteadmin', sha).hexdigest()
-        self.browser.open('http://nohost/plone/new-user?_authenticator=%s' % (
-            token))
+        self.browser.open('http://nohost/plone/new-user')
         self.browser.getControl('User Name').value = 'newuser'
         self.browser.getControl('E-mail').value = 'newuser@example.com'
         self.browser.getControl('Password').value = 'foobar'


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/896620b7d1a2f92b53085b8af67b3798891bcc0b

Migrated test_account.py

Files changed:
M plone/app/users/tests/test_account.py

diff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py
index 1058e2f..e6fa52b 100644
--- a/plone/app/users/tests/test_account.py
+++ b/plone/app/users/tests/test_account.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
-from Testing.makerequest import makerequest
-from OFS.SimpleItem import SimpleItem
 from plone.app.users.browser.account import AccountPanelSchemaAdapter
+from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
 
 import unittest
 
@@ -23,25 +22,27 @@ def checkPermission(self, permission, context):
 
 class TestAccountPanelSchemaAdapter(unittest.TestCase):
 
+    layer = PLONE_APP_USERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.request = self.layer['request']
+
     def test__init__no_userid(self):
-        # should edit current user
-        context = makerequest(SimpleItem('foo'))
-        context.portal_membership = DummyPortalMembership(False)
-        adapter = AccountPanelSchemaAdapter(context)
+        """Should edit current user."""
+        self.request.portal_membership = DummyPortalMembership(False)
+        adapter = AccountPanelSchemaAdapter(self.request)
         self.assertEqual('(authenticated)', adapter.context)
 
     def test__init__userid_in_request_form_for_non_manager(self):
-        # disallow for non-privileged users
-        context = makerequest(SimpleItem('foo'))
-        context.portal_membership = DummyPortalMembership(False)
-        context.REQUEST.form['userid'] = 'bob'
-        adapter = AccountPanelSchemaAdapter(context)
+        """Disallow for non-privileged users."""
+        self.request.portal_membership = DummyPortalMembership(False)
+        self.request.REQUEST.form['userid'] = 'bob'
+        adapter = AccountPanelSchemaAdapter(self.request)
         self.assertEqual('(authenticated)', adapter.context)
 
     def test__init__userid_in_request_form_for_manager(self):
-        # should allow for privileged users
-        context = makerequest(SimpleItem('foo'))
-        context.portal_membership = DummyPortalMembership(True)
-        context.REQUEST.form['userid'] = 'bob'
-        adapter = AccountPanelSchemaAdapter(context)
+        """Should allow for privileged users."""
+        self.request.portal_membership = DummyPortalMembership(True)
+        self.request.REQUEST.form['userid'] = 'bob'
+        adapter = AccountPanelSchemaAdapter(self.request)
         self.assertEqual('bob', adapter.context)


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/aa44b61803079a54e49b86f49b38e824025c735c

Migrate vocabularies.py

Files changed:
M plone/app/users/vocabularies.py

diff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py
index 96c1440..157025d 100644
--- a/plone/app/users/vocabularies.py
+++ b/plone/app/users/vocabularies.py
@@ -67,9 +67,10 @@ class GroupIdVocabulary(object):
 
       >>> from zope.component import queryUtility
       >>> from zope.schema.interfaces import IVocabularyFactory
+      >>> from zope.site.hooks import getSite
       >>> from Products.CMFCore.utils import getToolByName
 
-      >>> groups_tool = getToolByName(self.portal, 'portal_groups')
+      >>> groups_tool = getToolByName(getSite(), 'portal_groups')
       >>> groups_tool.addGroup(
       ...     'fancygroup', [], [],
       ...     title='Group Title',
@@ -80,7 +81,7 @@ class GroupIdVocabulary(object):
       >>> name = 'plone.app.users.group_ids'
       >>> util = queryUtility(IVocabularyFactory, name)
 
-      >>> fields = util(self.portal)
+      >>> fields = util(getSite())
       >>> fields
       <zope.schema.vocabulary.SimpleVocabulary object at ...>
 


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/69d763f53546a87c49b469e9180b368afe1ad9e2

Migrate userdata.rst

Files changed:
M plone/app/users/tests/userdata.rst

diff --git a/plone/app/users/tests/userdata.rst b/plone/app/users/tests/userdata.rst
index cfc0518..e25673b 100644
--- a/plone/app/users/tests/userdata.rst
+++ b/plone/app/users/tests/userdata.rst
@@ -1,49 +1,69 @@
+=====================================
 Testing the personal information form
 =====================================
 
+Set Up
+======
+
+    >>> from plone.app.testing import TEST_USER_ID
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> import transaction
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
 Viewing the  personal information
 ---------------------------------
 
 This is about the 'personal-information' view.
 
     >>> view_name = '@@personal-information'
+    >>> view_url = 'http://nohost/plone/{0}'.format(view_name)
 
 Viewing user data shouldn't be possible for anonymous users:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
-    True
+    >>> browser.open(view_url)
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
 
 So let's login as Plone user:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 Now we should be able to access the user data panel:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open(view_url)
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
 
 We have these controls in the form:
 
-    >>> self.browser.getControl('Full Name').value
+    >>> browser.getControl('Full Name').value
     ''
-    >>> self.browser.getControl('E-mail').value
+    >>> browser.getControl('E-mail').value
     ''
-    >>> self.browser.getControl('Home page').value
+    >>> browser.getControl('Home page').value
     ''
-    >>> self.browser.getControl('Biography').value
+    >>> browser.getControl('Biography').value
     ''
-    >>> self.browser.getControl(name='form.widgets.portrait').value
+    >>> browser.getControl(name='form.widgets.portrait').value
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 
@@ -52,13 +72,13 @@ Trying to save without changes
 
 Now can we save this form without changes?
 
-    >>> self.browser.getControl('Save').click()
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     True
 
 As we have a required field "email", which hasn't been pre-filled in this test,
@@ -72,30 +92,30 @@ Modifying user data
 If we do set an e-mail address, we should be able to save the form.
 
     >>> full_name = 'Plone user'
-    >>> self.browser.getControl('Full Name').value = full_name
+    >>> browser.getControl('Full Name').value = full_name
 
     >>> home_page = 'http://www.plone.org/'
-    >>> self.browser.getControl('Home page').value = home_page
+    >>> browser.getControl('Home page').value = home_page
 
     >>> description = 'Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts.'
-    >>> self.browser.getControl('Biography').value = description
+    >>> browser.getControl('Biography').value = description
 
     >>> email_address = 'person@example.com'
-    >>> self.browser.getControl('E-mail').value = email_address
+    >>> browser.getControl('E-mail').value = email_address
 
     >>> location = 'Somewhere'
-    >>> self.browser.getControl('Location').value = location
+    >>> browser.getControl('Location').value = location
 
     >>> from pkg_resources import resource_stream
     >>> portrait_file = resource_stream("plone.app.users.tests", 'onepixel.jpg')
-    >>> self.browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
+    >>> browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
 
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     False
-    >>> 'No changes made.' in self.browser.contents
+    >>> 'No changes made.' in browser.contents
     False
-    >>> 'Changes saved.' in self.browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 
@@ -103,7 +123,7 @@ If we do set an e-mail address, we should be able to save the form.
 We should be able to check that value for email address now is the same as what
 we put in.
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> fullname_value = member.getProperty('fullname','')
     >>> fullname_value == full_name
     True
@@ -124,7 +144,7 @@ we put in.
     >>> location_value == location
     True
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <Image at /plone/portal_memberdata/portraits/test_user_1_>
 
@@ -143,21 +163,21 @@ Clearing user data
 If we empty all non-required inputs, the corresponding fields should
 be cleared, instead of keeping their old value
 
-    >>> self.browser.getControl('Full Name').value = ''
-    >>> self.browser.getControl('Home page').value = ''
-    >>> self.browser.getControl('Biography').value = ''
-    >>> self.browser.getControl('Location').value = ''
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Full Name').value = ''
+    >>> browser.getControl('Home page').value = ''
+    >>> browser.getControl('Biography').value = ''
+    >>> browser.getControl('Location').value = ''
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     False
-    >>> 'No changes made.' in self.browser.contents
+    >>> 'No changes made.' in browser.contents
     False
-    >>> 'Changes saved.' in self.browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 Check the values
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> marker = object()
     >>> member.getProperty('fullname', marker)
     ''
@@ -173,24 +193,24 @@ Check the values
 Set the full name again:
 
     >>> full_name = 'Plone user'
-    >>> self.browser.getControl('Full Name').value = full_name
-    >>> self.browser.getControl('Save').click()
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> browser.getControl('Full Name').value = full_name
+    >>> browser.getControl('Save').click()
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> member.getProperty('fullname', marker) == full_name
     True
 
 Can we delete the Image using the checkbox?
 
-    >>> self.browser.getControl('Remove existing image').selected = True
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved.' in self.browser.contents
+    >>> browser.getControl('Remove existing image').selected = True
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved.' in browser.contents
     True
 
 Does the user have the default portrait now?  Note that this differs
 slightly depending on which Plone version you have.  Products.PlonePAS
 4.0.5 or higher has .png, earlier has .gif.
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <FSImage at /plone/defaultUser...>
 
@@ -200,8 +220,8 @@ Modifying other users's data
 When trying to access the personal-information of the admin user
 we still get our own data
 
-    >>> self.browser.open('http://nohost/plone/' + view_name + '?userid=admin')
-    >>> self.browser.getControl('Full Name').value == full_name
+    >>> browser.open('http://nohost/plone/' + view_name + '?userid=admin')
+    >>> browser.getControl('Full Name').value == full_name
     True
 
 
@@ -211,15 +231,16 @@ Modifying user data in email mode
 Let's switch to using Email as Login Name
 
     >>> portal.portal_properties.site_properties._updateProperty('use_email_as_login', True)
-    >>> self.browser.open("http://nohost/plone/" + view_name)
+    >>> transaction.commit()
+    >>> browser.open(view_url)
 
 Update our email and see if login name was synced:
 
-    >>> self.browser.getControl('E-mail').value = 'my.new.email@example.com'
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved.' in self.browser.contents
+    >>> browser.getControl('E-mail').value = 'my.new.email@example.com'
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved.' in browser.contents
     True
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> member.getUserName()
     'my.new.email@example.com'
 
@@ -228,13 +249,10 @@ should fail with validation errors.
 
     >>> portal.acl_users._doAddUser('user2@example.com', 'password1', ('Member',), ())
     <PloneUser 'user2@example.com'>
+    >>> transaction.commit()
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> self.browser.getControl('E-mail').value = 'user2@example.com'
-    >>> self.browser.getControl('Save').click()
-    >>> 'The email address you selected is already in use or is not valid as login name. Please choose another' in self.browser.contents
+    >>> browser.open(view_url)
+    >>> browser.getControl('E-mail').value = 'user2@example.com'
+    >>> browser.getControl('Save').click()
+    >>> 'The email address you selected is already in use or is not valid as login name. Please choose another' in browser.contents
     True
-
-Revert back from email mode
-
-    >>> portal.portal_properties.site_properties._updateProperty('use_email_as_login', False)


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/f4e99d0f2805d04a6ece4128b8585f453adec15b

Migrate userdata_prefs_user_details.rst

Files changed:
M plone/app/users/tests/userdata_prefs_user_details.rst

diff --git a/plone/app/users/tests/userdata_prefs_user_details.rst b/plone/app/users/tests/userdata_prefs_user_details.rst
index a375803..336e357 100644
--- a/plone/app/users/tests/userdata_prefs_user_details.rst
+++ b/plone/app/users/tests/userdata_prefs_user_details.rst
@@ -1,39 +1,56 @@
 Admin modifies user information thru 'Users and groups'
 ---------------------------------------------------------------------
 
+Set Up
+======
+
+    >>> from plone.app.testing import TEST_USER_ID
+    >>> from plone.testing.z2 import Browser
+
+    >>> import transaction
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> user_information_url = 'http://nohost/plone/@@user-information?userid={0}'.format(TEST_USER_ID)
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
 An admin can modify user information thru the @@user-information form in Users and Groups
 config page.
 
 So let's login as Plone admin:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'admin'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = 'admin'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Log in').click()
 
 Let's see if we can navigate to the user information form in Users and groups
-    >>> self.browser.getLink('Site Setup').click()
-    >>> self.browser.getLink('Users and Groups').click()
-    >>> self.browser.getLink('test_user_1_').click()
-    >>> self.browser.getLink('Personal Information').click()
-    >>> self.browser.url
-    'http://nohost/plone/@@user-information?userid=test_user_1_'
+    >>> browser.getLink('Site Setup').click()
+    >>> browser.getLink('Users and Groups').click()
+    >>> browser.getLink(TEST_USER_NAME).click()
+    >>> browser.getLink('Personal Information').click()
+    >>> browser.url == user_information_url
+    True
 
 We have these controls in the form:
 
-    >>> self.browser.getControl('Full Name').value
+    >>> browser.getControl('Full Name').value
     ''
-    >>> self.browser.getControl('E-mail').value
+    >>> browser.getControl('E-mail').value
     ''
-    >>> self.browser.getControl('Home page').value
+    >>> browser.getControl('Home page').value
     ''
-    >>> self.browser.getControl('Biography').value
+    >>> browser.getControl('Biography').value
     ''
-    >>> self.browser.getControl(name='form.widgets.portrait').value
+    >>> browser.getControl(name='form.widgets.portrait').value
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 
@@ -41,36 +58,36 @@ Modifying user data
 -------------------
 
     >>> full_name = 'Plone user'
-    >>> self.browser.getControl('Full Name').value = full_name
+    >>> browser.getControl('Full Name').value = full_name
 
     >>> home_page = 'http://www.plone.org/'
-    >>> self.browser.getControl('Home page').value = home_page
+    >>> browser.getControl('Home page').value = home_page
 
     >>> description = 'Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts.'
-    >>> self.browser.getControl('Biography').value = description
+    >>> browser.getControl('Biography').value = description
 
     >>> email_address = 'person@example.com'
-    >>> self.browser.getControl('E-mail').value = email_address
+    >>> browser.getControl('E-mail').value = email_address
 
     >>> location = 'Somewhere'
-    >>> self.browser.getControl('Location').value = location
+    >>> browser.getControl('Location').value = location
 
     >>> from pkg_resources import resource_stream
     >>> portrait_file = resource_stream("plone.app.users.tests", 'onepixel.jpg')
-    >>> self.browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
+    >>> browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
 
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     False
-    >>> 'No changes made.' in self.browser.contents
+    >>> 'No changes made.' in browser.contents
     False
-    >>> 'Changes saved.' in self.browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 We should be able to check that value for email address now is the same as what
 we put in.
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> fullname_value = member.getProperty('fullname','')
     >>> fullname_value == full_name
     True
@@ -93,7 +110,7 @@ we put in.
 
 Is the users's portrait a newly created Image?
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <Image at /plone/portal_memberdata/portraits/test_user_1_>
 
@@ -107,24 +124,24 @@ Is the data of the created Image the same as the (scaled) orignal image?
 
 Can we delete the Image using the checkbox?
 
-    >>> self.browser.getControl('Remove existing image').selected = True
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved.' in self.browser.contents
+    >>> browser.getControl('Remove existing image').selected = True
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved.' in browser.contents
     True
 
 Does the user have the default portrait now?  Note that this differs
 slightly depending on which Plone version you have.  Products.PlonePAS
 4.0.5 or higher has .png, earlier has .gif.
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <FSImage at /plone/defaultUser...>
 
 Finally let's see if Cancel button still leaves us on selected user Personal
 Information form::
 
-    >>> self.browser.getControl('Cancel').click()
-    >>> 'Changes canceled.' in self.browser.contents
+    >>> browser.getControl('Cancel').click()
+    >>> 'Changes canceled.' in browser.contents
     True
-    >>> 'Change personal information for test_user_1_' in self.browser.contents
+    >>> 'Change personal information for test_user_1_' in browser.contents
     True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:30+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/761c69c65a46f6308dc2be2683016aeae7680703

Migrate personal_preferences.rst

Files changed:
M plone/app/users/tests/personal_preferences.rst

diff --git a/plone/app/users/tests/personal_preferences.rst b/plone/app/users/tests/personal_preferences.rst
index 8af1bed..db95b7b 100644
--- a/plone/app/users/tests/personal_preferences.rst
+++ b/plone/app/users/tests/personal_preferences.rst
@@ -1,6 +1,24 @@
 Testing the personal preferences form
 =====================================
 
+This is about the 'personal-preferences' view.
+
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> view_name = '@@personal-preferences'
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
     >>> empty_marker = '--NOVALUE--'
     >>> def isEmptyMarker(v):
     ...     if len(v) != 1: return False
@@ -9,71 +27,68 @@ Testing the personal preferences form
 Viewing the personal preferences
 --------------------------------
 
-This is about the 'personal-preferences' view.
-
-    >>> view_name = '@@personal-preferences'
-
 Viewing user data shouldn't be possible for anonymous users:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
-    True
+    >>> browser.open("http://nohost/plone/" + view_name)
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
 
 So let's login as Plone user:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 Now we should be able to access the user data panel:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open("http://nohost/plone/" + view_name)
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
 
 We have two controls, one for the start page and one for the language:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 Now we click the cancel button:
 
-    >>> self.browser.getControl('Cancel').click()
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.getControl('Cancel').click()
+    >>> browser.url.endswith(view_name)
     True
 
 There should be no changes at all:
 
-    >>> 'Changes canceled.' in self.browser.contents
+    >>> 'Changes canceled.' in browser.contents
     True
 
 Modifying values
 ----------------
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> self.browser.getControl('Wysiwyg editor').value = ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected = True
-    >>> self.browser.getControl('Language', index=0).value = ['en']
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> browser.getControl('Wysiwyg editor').value = ['TinyMCE']
+    >>> browser.getControl('Enable external editing').selected = True
+    >>> browser.getControl('Language', index=0).value = ['en']
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> marker = object
     >>> member.getProperty('wysiwyg_editor', object)
     'TinyMCE'
@@ -84,13 +99,13 @@ changed:
 
 And that the form still has the according values:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     False
-    >>> self.browser.getControl('Wysiwyg editor').value
+    >>> browser.getControl('Wysiwyg editor').value
     ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     True
-    >>> self.browser.getControl('Language', index=0).value
+    >>> browser.getControl('Language', index=0).value
     ['en']
 
 
@@ -99,18 +114,18 @@ Clearing values
 
 Making an input empty should result in a stored empty string.
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> self.browser.getControl('Wysiwyg editor').value = [empty_marker]
-    >>> self.browser.getControl('Enable external editing').selected = False
-    >>> self.browser.getControl('Language', index=0).value = [empty_marker]
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> browser.getControl('Wysiwyg editor').value = [empty_marker]
+    >>> browser.getControl('Enable external editing').selected = False
+    >>> browser.getControl('Language', index=0).value = [empty_marker]
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> marker = object
     >>> member.getProperty('wysiwyg_editor', object)
     ''
@@ -121,9 +136,9 @@ changed:
 
 And that the form still has the according values:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:31+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/b316715c6cb7c8b98f57a75ca203713a261748c9

TMP

Files changed:
M plone/app/users/testing.py
M plone/app/users/tests/forms_navigationroot.rst
M plone/app/users/tests/password.rst

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index f092566..5641e27 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -29,6 +29,25 @@ def setUpPloneSite(self, portal):
         site_manager.unregisterUtility(provided=IMailHost)
         site_manager.registerUtility(mail_host, IMailHost)
 
+    def addParrotPasswordPolicy(self):
+        a = 2
+        """# remove default policy
+        uf = self.portal.acl_users
+        for policy in uf.objectIds(['Default Plone Password Policy']):
+            uf.plugins.deactivatePlugin(IValidationPlugin, policy)
+
+        obj = DeadParrotPassword('test')
+        uf._setObject(obj.getId(), obj)
+        obj = uf[obj.getId()]
+        activatePluginInterfaces(self.portal, obj.getId())
+
+        portal = getUtility(ISiteRoot)
+        pas_instance = portal.acl_users
+        plugins = pas_instance._getOb('plugins')
+        validators = plugins.listPlugins(IValidationPlugin)
+        assert validators"""
+
+
 
 PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()
 PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(
diff --git a/plone/app/users/tests/forms_navigationroot.rst b/plone/app/users/tests/forms_navigationroot.rst
index a3dacb7..40871ac 100644
--- a/plone/app/users/tests/forms_navigationroot.rst
+++ b/plone/app/users/tests/forms_navigationroot.rst
@@ -1,44 +1,61 @@
+==================================================
 Test form links against different navigation roots
---------------------------------------------------
+==================================================
 
 Links that are present within each of the forms should adhere to
 the current navigation root for the site.
 
+Set up
+======
+
     >>> from Products.Five.utilities.marker import mark
     >>> from plone.app.layout.navigation.interfaces import INavigationRoot
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+Create a folder
+---------------
 
 We'll create the test context and have the relevant navigation root marker
 interface ready to be applied:
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.invokeFactory('Folder', id='folder_navroot', title="Navroot")
-    'folder_navroot'
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 
-So let's login as Plone admin:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'admin'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+XXX: needs to be able to create a folder or something folderish
+
+
+    >>> portal.invokeFactory('Folder', id='folder_navroot', title="Navroot")
+    'folder_navroot'
+
 
 Let's see if we can navigate to the user information and options forms
 in the 'Users and Groups' settings. Each of the 3 forms all use the
 same base class so if the fix works on one, it works on them all.
 
-    >>> self.browser.getLink('Navroot').click()
+    >>> browser.getLink('Navroot').click()
 
-    >>> self.browser.getLink('Preferences').click()
-    >>> self.browser.url
+    >>> browser.getLink('Preferences').click()
+    >>> browser.url
     'http://nohost/plone/@@personal-preferences'
 
 Check the existance and links for a standard site context (navigation root
 is the Plone site itself since the marker interface isn't applied here
 yet).
 
-    >>> self.browser.getLink('Personal Information').url
+    >>> browser.getLink('Personal Information').url
     'http://nohost/plone/@@personal-information'
-    >>> self.browser.getLink('Personal Preferences').url
+    >>> browser.getLink('Personal Preferences').url
     'http://nohost/plone/@@personal-preferences'
 
 Now, let's mark this folder and see what happens.  All links should
@@ -46,15 +63,15 @@ now be rooted to the given folder and not the Plone site proper.
 
     >>> mark(self.portal.folder_navroot, INavigationRoot)
 
-    >>> self.browser.getLink('Navroot').click()
+    >>> browser.getLink('Navroot').click()
 
-    >>> self.browser.getLink('Preferences').click()
-    >>> self.browser.url
+    >>> browser.getLink('Preferences').click()
+    >>> browser.url
     'http://nohost/plone/folder_navroot/@@personal-preferences'
 
-    >>> self.browser.getLink('Personal Information').url
+    >>> browser.getLink('Personal Information').url
     'http://nohost/plone/folder_navroot/@@personal-information'
-    >>> self.browser.getLink('Personal Preferences').url
+    >>> browser.getLink('Personal Preferences').url
     'http://nohost/plone/folder_navroot/@@personal-preferences'
 
 
diff --git a/plone/app/users/tests/password.rst b/plone/app/users/tests/password.rst
index 109cd7f..228c673 100644
--- a/plone/app/users/tests/password.rst
+++ b/plone/app/users/tests/password.rst
@@ -4,54 +4,70 @@ Testing the password form
 This is about the 'change_password' form. This test will try to login as a Plone
 user, change the password, logout and login with the new password.
 
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
     >>> view_name = '@@change-password'
 
-Viewing this form should not be possible for anonymous users:
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> 'Login Name' in self.browser.contents
-    True
+The view
+========
+
+Viewing this form should not be possible for anonymous users:
 
+    >>> browser.open('http://nohost/plone/' + view_name)
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
 
 So let's login as Plone user:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 Now we should be able to access the change password form:
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
 
 Let's try to change the password:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
-    >>> self.browser.getControl('Current password').value = 'secret'
-    >>> self.browser.getControl('New password').value = 'super-secret'
-    >>> self.browser.getControl('Confirm password').value = 'super-secret'
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Password changed' in self.browser.contents
+    >>> browser.getControl('Current password').value = 'secret'
+    >>> browser.getControl('New password').value = 'super-secret'
+    >>> browser.getControl('Confirm password').value = 'super-secret'
+    >>> browser.getControl('Change Password').click()
+    >>> 'Password changed' in browser.contents
     True
 
 Okay the password has been changed, let's logout and login again with the new password.
 
-    >>> self.browser.open('http://nohost/plone/logout')
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'super-secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/logout')
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = 'super-secret'
+    >>> browser.getControl('Log in').click()
 
 If we are logged in the change password form is available
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> 'Please log in' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> 'Please log in' in browser.contents
     False
 
 
@@ -60,34 +76,35 @@ Password Validation Plugin
 
 Now let's test using a PAS Password validation plugin. Add a test plugin.
 
+    >>> import ipdb; ipdb.set_trace()
     >>> self.addParrotPasswordPolicy()
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
+    >>> browser.open('http://nohost/plone/' + view_name)
 
 Check that we are given instructions on what is a valid password
 
-   >>> print self.browser.contents
+   >>> print browser.contents
     <...
     ...Enter your new password. Must not be dead...
 
 
 Let's try to change the password with an invalid password:
 
-    >>> self.browser.getControl('Current password').value = 'super-secret'
-    >>> self.browser.getControl('New password').value = 'dead parrot'
-    >>> self.browser.getControl('Confirm password').value = 'dead parrot'
-    >>> self.browser.getControl('Change Password').click()
-    >>> print self.browser.contents
+    >>> browser.getControl('Current password').value = 'super-secret'
+    >>> browser.getControl('New password').value = 'dead parrot'
+    >>> browser.getControl('Confirm password').value = 'dead parrot'
+    >>> browser.getControl('Change Password').click()
+    >>> print browser.contents
     <...
     ...Must not be dead...
 
 Now try a valid password
 
-    >>> self.browser.getControl('Current password').value = 'super-secret'
-    >>> self.browser.getControl('New password').value = 'fish'
-    >>> self.browser.getControl('Confirm password').value = 'fish'
-    >>> self.browser.getControl('Change Password').click()
-    >>> print self.browser.contents
+    >>> browser.getControl('Current password').value = 'super-secret'
+    >>> browser.getControl('New password').value = 'fish'
+    >>> browser.getControl('Confirm password').value = 'fish'
+    >>> browser.getControl('Change Password').click()
+    >>> print browser.contents
     <...
     ...Password changed...
 
@@ -96,22 +113,22 @@ Form Validation
 
 Firstly try to post form without filling in any fields:
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> browser.getControl('Change Password').click()
+    >>> 'Required input is missing.' in browser.contents
     True
 
 Let's try to enter not valid current password:
 
-    >>> self.browser.getControl('Current password').value = 'invalid-password'
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Incorrect value for current password' in self.browser.contents
+    >>> browser.getControl('Current password').value = 'invalid-password'
+    >>> browser.getControl('Change Password').click()
+    >>> 'Incorrect value for current password' in browser.contents
     True
 
 Then post form with new password that is not equal to confirmed password:
 
-    >>> self.browser.getControl('New password').value = 'new-password'
-    >>> self.browser.getControl('Confirm password').value = 'new-password-1'
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Your password and confirmation did not match. Please try again.' in self.browser.contents
+    >>> browser.getControl('New password').value = 'new-password'
+    >>> browser.getControl('Confirm password').value = 'new-password-1'
+    >>> browser.getControl('Change Password').click()
+    >>> 'Your password and confirmation did not match. Please try again.' in browser.contents
     True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:31+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/cc219c9c51c1d430b1a9039deaa2a764074b72f3

Migrate personal_preferences_prefs_user_details.rst

Files changed:
M plone/app/users/tests/personal_preferences_prefs_user_details.rst

diff --git a/plone/app/users/tests/personal_preferences_prefs_user_details.rst b/plone/app/users/tests/personal_preferences_prefs_user_details.rst
index c35701e..6171459 100644
--- a/plone/app/users/tests/personal_preferences_prefs_user_details.rst
+++ b/plone/app/users/tests/personal_preferences_prefs_user_details.rst
@@ -1,6 +1,19 @@
 Admin modifies personal preferences thru 'Users and groups'
 ---------------------------------------------------------------------
 
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
     >>> empty_marker = '--NOVALUE--'
     >>> def isEmptyMarker(v):
     ...     if len(v) != 1: return False
@@ -11,49 +24,49 @@ Users and Groups config page.
 
 
 So let's login as Plone admin:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'admin'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = 'admin'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Log in').click()
 
 Let's see if we can navigate to the user information form in Users and groups
-    >>> self.browser.getLink('Site Setup').click()
-    >>> self.browser.getLink('Users and Groups').click()
-    >>> self.browser.getLink('test_user_1_').click()
-    >>> self.browser.getLink('Personal Preferences').click()
-    >>> self.browser.url
+    >>> browser.getLink('Site Setup').click()
+    >>> browser.getLink('Users and Groups').click()
+    >>> browser.getLink(TEST_USER_NAME).click()
+    >>> browser.getLink('Personal Preferences').click()
+    >>> browser.url
     'http://nohost/plone/@@user-preferences?userid=test_user_1_'
 
 We have these controls in the form:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 
 Modifying values
 ----------------
 
-    >>> self.browser.getControl('Wysiwyg editor').value = ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected = True
-    >>> self.browser.getControl('Language', index=0).value = ['en']
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.getControl('Wysiwyg editor').value = ['TinyMCE']
+    >>> browser.getControl('Enable external editing').selected = True
+    >>> browser.getControl('Language', index=0).value = ['en']
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> marker = object()
     >>> member.getProperty('wysiwyg_editor', marker)
     'TinyMCE'
@@ -64,14 +77,14 @@ changed:
 
 And that the form still has the according values:
 
-    >>> self.browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     False
-    >>> self.browser.getControl('Wysiwyg editor').value
+    >>> browser.getControl('Wysiwyg editor').value
     ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     True
-    >>> self.browser.getControl('Language', index=0).value
+    >>> browser.getControl('Language', index=0).value
     ['en']
 
 
@@ -80,17 +93,17 @@ Clearing values
 
 Check that empty or False values do get stored.
 
-    >>> self.browser.getControl('Wysiwyg editor').value = [empty_marker]
-    >>> self.browser.getControl('Enable external editing').selected = False
-    >>> self.browser.getControl('Language', index=0).value = [empty_marker]
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.getControl('Wysiwyg editor').value = [empty_marker]
+    >>> browser.getControl('Enable external editing').selected = False
+    >>> browser.getControl('Language', index=0).value = [empty_marker]
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> member.getProperty('wysiwyg_editor', marker)
     ''
     >>> member.getProperty('ext_editor', marker)
@@ -100,19 +113,19 @@ changed:
 
 And that the form still has the according values:
 
-    >>> self.browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
 
 Finally let's see if Cancel button still leaves us on selected user Preferences
 form::
 
-    >>> self.browser.getControl('Cancel').click()
-    >>> 'Changes canceled.' in self.browser.contents
+    >>> browser.getControl('Cancel').click()
+    >>> 'Changes canceled.' in browser.contents
     True
-    >>> '?userid=test_user_1_' in self.browser.url
+    >>> '?userid=test_user_1_' in browser.url
     True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-10-13T21:09:31+02:00
Author: Gil Forcada (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.users/commit/2805c049a0214e5a108ba90b614672cc5922749a

WIP

Files changed:
M plone/app/users/browser/register.py
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/password.rst
M plone/app/users/tests/registration_forms.rst
M plone/app/users/tests/test_doctests.py

diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index bed5edd..af549ee 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -589,6 +589,7 @@ def showForm(self):
                                        name='overview-controlpanel')
 
         # hide form if mailhost_warning == True and validate_email == True
+        import ipdb; ipdb.set_trace()
         return not (ctrlOverview.mailhost_warning() and
                     portal.getProperty('validate_email', True))
 
diff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py
index a673c62..78ff847 100644
--- a/plone/app/users/tests/__init__.py
+++ b/plone/app/users/tests/__init__.py
@@ -1,3 +1,3 @@
 # -*- coding: utf-8 -*-
 # Other packages may find this useful
-from plone.app.users.tests.base import BaseTestCase
+#from plone.app.users.tests.base import BaseTestCase
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index e7b7271..35b7ee7 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -4,7 +4,7 @@
 This is in a separate module because it's potentially useful to other
 packages which register accountpanels. They should be able to import it
 without the PloneTestCase.setupPloneSite() side effects.
-"""
+""
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
 from Products.CMFCore.interfaces import ISiteRoot
@@ -27,7 +27,7 @@
 
 
 class BaseTestCase(FunctionalTestCase):
-    """base test case which adds amin user"""
+    ""base test case which adds amin user""
 
     def afterSetUp(self):
         super(BaseTestCase, self).afterSetUp()
@@ -90,7 +90,7 @@ def unsetMailHost(self):
         setattr(self.portal, 'email_from_address', '')
 
     def test_nothing(self):
-        """Add a dummy test here, so the base class 'passes'."""
+        ""Add a dummy test here, so the base class 'passes'.""
         pass
 
 # Dummy password validation PAS plugin
@@ -118,3 +118,4 @@ def validateUserInfo(self, user, set_id, set_info):
 
 
 classImplements(DeadParrotPassword, IValidationPlugin)
+"""
diff --git a/plone/app/users/tests/password.rst b/plone/app/users/tests/password.rst
index 228c673..97d8b76 100644
--- a/plone/app/users/tests/password.rst
+++ b/plone/app/users/tests/password.rst
@@ -76,7 +76,6 @@ Password Validation Plugin
 
 Now let's test using a PAS Password validation plugin. Add a test plugin.
 
-    >>> import ipdb; ipdb.set_trace()
     >>> self.addParrotPasswordPolicy()
 
     >>> browser.open('http://nohost/plone/' + view_name)
diff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst
index 9a095dc..16687f4 100644
--- a/plone/app/users/tests/registration_forms.rst
+++ b/plone/app/users/tests/registration_forms.rst
@@ -1,7 +1,22 @@
 Testing the flexible user registration
 ======================================
 
-    >>> browser = self.browser
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+    >>> browser_admin = Browser(app)
+    >>> browser_admin.handleErrors = False
+
     >>> browser.open('http://nohost/plone')
     >>> list_widget_suffix = ':list'
 
@@ -10,21 +25,18 @@ Testing the flexible user registration
     False
 
     Enable self-registration
-    >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = 'admin'
-    >>> browser.getControl('Password').value = 'secret'
-    >>> browser.getControl('Log in').click()
-    >>> browser.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser.getControl('Enable self-registration').selected = True
-    >>> browser.getControl('Save').click()
-    >>> 'Changes saved' in browser.contents
-    True
-
-    >>> browser.getLink(url='http://nohost/plone/logout').click()
-    >>> 'Log in' in browser.contents
+    >>> browser_admin.open('http://nohost/plone/login_form')
+    >>> browser_admin.getControl('Login Name').value = 'admin'
+    >>> browser_admin.getControl('Password').value = 'secret'
+    >>> browser_admin.getControl('Log in').click()
+    >>> browser_admin.open('http://nohost/plone/@@security-controlpanel')
+    >>> browser_admin.getControl('Enable self-registration').selected = True
+    >>> browser_admin.getControl('Save').click()
+    >>> 'Changes saved' in browser_admin.contents
     True
 
     Logged out user should now see the register link.
+    >>> browser.open('http://nohost/plone')
     >>> 'Register' in browser.contents
     True
 
@@ -47,12 +59,15 @@ Testing the flexible user registration
     >>> 'Confirm password' in browser.contents
     False
 
-    Set up a mailhost...
-    >>> self.setMailHost()
-    >>> browser.open('http://nohost/plone/@@register')
+    Fake that mailhost is set up properly:
+    >>> setattr(portal.MailHost, 'smtp_host', 'localhost')
+    >>> setattr(portal, 'email_from_address', 'admin@foo.com')
+    >>> import transaction
+    >>> transaction.commit()
 
     The form should now be visible, sans password, since the user still cannot
     set it.
+    >>> browser.open('http://nohost/plone/@@register')
     >>> 'User Name' in browser.contents
     True
     >>> 'Password' in browser.contents
diff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py
index 25a0625..e5ad00d 100644
--- a/plone/app/users/tests/test_doctests.py
+++ b/plone/app/users/tests/test_doctests.py
@@ -11,10 +11,10 @@
     'duplicate_email.rst',
     'email_login.rst',
     'flexible_user_registration.rst',
-    'forms_navigationroot.rst',
+    'forms_navigationroot.rst',  # need to ask about content types layer
     'member_search.rst',
-    'registration_forms.rst',
-    'password.rst',
+    'registration_forms.rst',  # working on it
+    'password.rst',  # for later
     'personal_preferences.rst',
     'personal_preferences_prefs_user_details.rst',
     'userdata.rst',


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-11-11T19:31:52+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/e928243e113b893168a239a1fdc41f70960424b0

clean up a bit

Files changed:
M plone/app/users/testing.py
M plone/app/users/tests/base.py

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index 5641e27..74441d1 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
-from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing.bbb import PTC_FIXTURE
 from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.layers import FunctionalTesting
-from plone.app.testing.layers import IntegrationTesting
 from zope.component import getSiteManager
 from zope.configuration import xmlconfig
 
@@ -16,11 +15,7 @@ class PloneAppUsersLayer(PloneSandboxLayer):
 
     def setUpZope(self, app, configurationContext):
         import plone.app.users
-        xmlconfig.file(
-            'configure.zcml',
-            plone.app.users,
-            context=configurationContext
-        )
+        self.loadZCML(package=plone.app.users)
 
     def setUpPloneSite(self, portal):
         # Configure mock mail host
@@ -50,10 +45,6 @@ def addParrotPasswordPolicy(self):
 
 
 PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()
-PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(PLONE_APP_USERS_FIXTURE, ),
-    name='PloneAppUsersLayer:Integration'
-)
 PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_USERS_FIXTURE, ),
     name='PloneAppUsersLayer:Functional'
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index 35b7ee7..0c56d67 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -4,14 +4,14 @@
 This is in a separate module because it's potentially useful to other
 packages which register accountpanels. They should be able to import it
 without the PloneTestCase.setupPloneSite() side effects.
-""
+"""
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-from Products.PloneTestCase.PloneTestCase import FunctionalTestCase
+from plone.app.testing.bbb import PloneTestCase
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PluggableAuthService.utils import classImplements
@@ -19,19 +19,18 @@
 from zope.component import getSiteManager
 from zope.component import getUtility
 
-# BBB Zope 2.12
-try:
-    from Testing.testbrowser import Browser
-except ImportError:
-    from Products.Five.testbrowser import Browser
+from plone.testing.z2 import Browser
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+
 
+class BaseTestCase(PloneTestCase):
+    """ base test case which adds amin user """
 
-class BaseTestCase(FunctionalTestCase):
-    ""base test case which adds amin user""
+    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING
 
     def afterSetUp(self):
         super(BaseTestCase, self).afterSetUp()
-        self.browser = Browser()
+        self.browser = Browser(self.layer['app'])
         self.portal.acl_users._doAddUser('admin', 'secret', ['Manager'], [])
 
         self.portal._original_MailHost = self.portal.MailHost


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-11-11T19:33:59+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/44b1615ccfb51c5decdc1bd31b28bf2589e8a87a

document changes

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 9bedf4f..d26cdbb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,6 +1,12 @@
 CHANGES
 =======
 
+2.1 (unreleased)
+----------------
+
+- Ported tests to plone.app.testing
+  [gforcada, tomgross]
+
 2.0.4 (2014-06-03)
 ------------------
 


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-11-19T14:58:03+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/5ce88b866dc45271a9717226fe36f4866583f217

Merge remote-tracking branch 'origin/master' into plone-app-testing

Conflicts:
	CHANGES.rst

Files changed:
M CHANGES.rst
M plone/app/users/browser/personalpreferences.py
M plone/app/users/schema.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d26cdbb..cc044cd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,13 +1,13 @@
 CHANGES
 =======
 
-2.1 (unreleased)
-----------------
+2.1.1 (unreleased)
+------------------
 
 - Ported tests to plone.app.testing
   [gforcada, tomgross]
 
-2.0.4 (2014-06-03)
+2.1.0 (2014-10-23)
 ------------------
 
 - Check the permission for the Object tab on the AccountPanelForm as configured
@@ -45,6 +45,9 @@ CHANGES
 2.0 (2014-03-02)
 ----------------
 
+- Refactor the member-search form to a browser view, using z3c.form.
+  [pabo3000]
+
 - Have a soft dependency on plone.app.event and include the timezone field only
   then in the schema, if plone.app.event is available.
   [thet]
diff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py
index 059b529..1a9f2d1 100644
--- a/plone/app/users/browser/personalpreferences.py
+++ b/plone/app/users/browser/personalpreferences.py
@@ -84,7 +84,7 @@ class IPersonalPreferences(Interface):
         timezone = Choice(
             title=_(u'label_timezone', default=u'Time zone'),
             description=_(u'help_timezone', default=u'Your time zone'),
-            vocabulary='plone.app.event.AvailableTimezones',
+            vocabulary='plone.app.vocabularies.Timezones',
             required=False,
         )
 
diff --git a/plone/app/users/schema.py b/plone/app/users/schema.py
index 5f6e375..4b1a3c3 100644
--- a/plone/app/users/schema.py
+++ b/plone/app/users/schema.py
@@ -74,7 +74,7 @@ class IUserDataSchema(Interface):
         description=_(
             u'help_portrait',
             default=u'To add or change the portrait: click the "Browse" '
-                    u'button; select a picture of yourself.  Recommended '
+                    u'button; select a picture of yourself. Recommended '
                     u'image size is 75 pixels wide by 100 pixels tall.'
         ),
         required=False)
diff --git a/setup.py b/setup.py
index 3111050..217564a 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.1.dev0'
+version = '2.1.1.dev0'
 
 long_description = '{0}\n{1}'.format(open('README.rst').read(),
                                      open('CHANGES.rst').read())


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-11-19T15:08:06+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/d4b26f2c58cc7300722b6352f06f2461e59552e3

use base testcase from p.a.testing

Files changed:
M plone/app/users/testing.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/tests/userdata_prefs_user_details.rst

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index 74441d1..6845c08 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -11,7 +11,7 @@
 
 
 class PloneAppUsersLayer(PloneSandboxLayer):
-    defaultBases = (PLONE_FIXTURE, )
+    defaultBases = (PTC_FIXTURE, )
 
     def setUpZope(self, app, configurationContext):
         import plone.app.users
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index 0c56d67..d12aec2 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -89,7 +89,7 @@ def unsetMailHost(self):
         setattr(self.portal, 'email_from_address', '')
 
     def test_nothing(self):
-        ""Add a dummy test here, so the base class 'passes'.""
+        """ Add a dummy test here, so the base class 'passes'. """
         pass
 
 # Dummy password validation PAS plugin
diff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py
index e6fa52b..297a1c9 100644
--- a/plone/app/users/tests/test_account.py
+++ b/plone/app/users/tests/test_account.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 from plone.app.users.browser.account import AccountPanelSchemaAdapter
-from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
+from plone.app.users.tests.base import BaseTestCase
 
 import unittest
 
@@ -20,12 +20,7 @@ def checkPermission(self, permission, context):
         return self.allowed
 
 
-class TestAccountPanelSchemaAdapter(unittest.TestCase):
-
-    layer = PLONE_APP_USERS_INTEGRATION_TESTING
-
-    def setUp(self):
-        self.request = self.layer['request']
+class TestAccountPanelSchemaAdapter(BaseTestCase):
 
     def test__init__no_userid(self):
         """Should edit current user."""
diff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py
index e706725..964814a 100644
--- a/plone/app/users/tests/test_loginname_generator.py
+++ b/plone/app/users/tests/test_loginname_generator.py
@@ -1,18 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.app.users.browser.interfaces import ILoginNameGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
-from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
+from plone.app.users.tests.base import BaseTestCase
 from zope.component import getSiteManager
 
 import unittest
 
 
-class TestGenerateLoginName(unittest.TestCase):
-
-    layer = PLONE_APP_USERS_INTEGRATION_TESTING
-
-    def setUp(self):
-        self.portal = self.layer['portal']
+class TestGenerateLoginName(BaseTestCase):
 
     def test_generate_user_id_simplistic(self):
         sm = getSiteManager(context=self.portal)
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index 7f93ebf..92a8e51 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -2,21 +2,13 @@
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import setRoles
 from plone.testing.z2 import Browser
-from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
+from plone.app.users.tests.base import BaseTestCase
 
 import transaction
 import unittest
 
 
-class TestNewUser(unittest.TestCase):
-
-    layer = PLONE_APP_USERS_INTEGRATION_TESTING
-
-    def setUp(self):
-        self.portal = self.layer['portal']
-        app = self.layer['app']
-        setRoles(self.portal, TEST_USER_ID, ['Manager', ])
-        self.browser = Browser(app)
+class TestNewUser(BaseTestCase):
 
     def test_new_user_as_site_administrator(self):
         self.portal.acl_users._doAddUser(
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index 600ce01..828a0e9 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -1,19 +1,14 @@
 # -*- coding: utf-8 -*-
 from plone.app.users.browser.interfaces import IUserIdGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
-from plone.app.users.testing import PLONE_APP_USERS_INTEGRATION_TESTING
+from plone.app.users.tests.base import BaseTestCase
 from plone.app.users.utils import uuid_userid_generator
 from zope.component import getSiteManager
 
 import unittest
 
 
-class TestGenerateUserId(unittest.TestCase):
-
-    layer = PLONE_APP_USERS_INTEGRATION_TESTING
-
-    def setUp(self):
-        self.portal = self.layer['portal']
+class TestGenerateUserId(BaseTestCase):
 
     def test_standard_generate_user_id(self):
         form = BaseRegistrationForm(self.portal, {})
diff --git a/plone/app/users/tests/userdata_prefs_user_details.rst b/plone/app/users/tests/userdata_prefs_user_details.rst
index 336e357..b846d55 100644
--- a/plone/app/users/tests/userdata_prefs_user_details.rst
+++ b/plone/app/users/tests/userdata_prefs_user_details.rst
@@ -5,6 +5,7 @@ Set Up
 ======
 
     >>> from plone.app.testing import TEST_USER_ID
+    >>> from plone.app.testing import TEST_USER_NAME
     >>> from plone.testing.z2 import Browser
 
     >>> import transaction


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-11-19T19:57:53+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/3ff69ab806bb6c6de90843ca1bdb563f72512821

removed breakpoint

Files changed:
M plone/app/users/browser/register.py

diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index af549ee..bed5edd 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -589,7 +589,6 @@ def showForm(self):
                                        name='overview-controlpanel')
 
         # hide form if mailhost_warning == True and validate_email == True
-        import ipdb; ipdb.set_trace()
         return not (ctrlOverview.mailhost_warning() and
                     portal.getProperty('validate_email', True))
 


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-11-20T10:45:26+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/2284bd922c36bc1c4249f8220c017f97a8ab5220

doctest fixtures

Files changed:
M plone/app/users/testing.py
M plone/app/users/tests/base.py
M plone/app/users/tests/forms_navigationroot.rst
M plone/app/users/tests/member_search.rst
M plone/app/users/tests/password.rst
M plone/app/users/tests/plugins.rst
M plone/app/users/tests/registration_forms.rst
M plone/app/users/tests/test_userid_generator.py

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index 6845c08..8f010cb 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -51,4 +51,4 @@ def addParrotPasswordPolicy(self):
 )
 
 
-optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE)
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index d12aec2..80d944f 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -21,6 +21,7 @@
 
 from plone.testing.z2 import Browser
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from transaction import commit
 
 
 class BaseTestCase(PloneTestCase):
@@ -39,28 +40,8 @@ def afterSetUp(self):
         sm = getSiteManager(context=self.portal)
         sm.unregisterUtility(provided=IMailHost)
         sm.registerUtility(mailhost, provided=IMailHost)
+        self.request = self.layer['request']
 
-    def addParrotPasswordPolicy(self):
-        # remove default policy
-        uf = self.portal.acl_users
-        for policy in uf.objectIds(['Default Plone Password Policy']):
-            uf.plugins.deactivatePlugin(IValidationPlugin, policy)
-
-        obj = DeadParrotPassword('test')
-        uf._setObject(obj.getId(), obj)
-        obj = uf[obj.getId()]
-        activatePluginInterfaces(self.portal, obj.getId())
-
-        portal = getUtility(ISiteRoot)
-        pas_instance = portal.acl_users
-        plugins = pas_instance._getOb('plugins')
-        validators = plugins.listPlugins(IValidationPlugin)
-        assert validators
-
-    def activateDefaultPasswordPolicy(self):
-        uf = self.portal.acl_users
-        for policy in uf.objectIds(['Default Plone Password Policy']):
-            activatePluginInterfaces(self.portal, policy)
 
     def beforeTearDown(self):
         self.portal.MailHost = self.portal._original_MailHost
@@ -80,17 +61,8 @@ def beforeTearDown(self):
             # plugins.deactivatePlugin(IPropertiesPlugin, 'test')
             pas_instance.manage_delObjects('test')
 
-    def setMailHost(self):
-        self.portal.MailHost.smtp_host = 'localhost'
-        setattr(self.portal, 'email_from_address', 'admin@foo.com')
-
-    def unsetMailHost(self):
-        self.portal.MailHost.smtp_host = ''
-        setattr(self.portal, 'email_from_address', '')
-
     def test_nothing(self):
         """ Add a dummy test here, so the base class 'passes'. """
-        pass
 
 # Dummy password validation PAS plugin
 
@@ -116,5 +88,38 @@ def validateUserInfo(self, user, set_id, set_info):
         return errors
 
 
+# Helper methods used in doctests
+
+def setMailHost(portal):
+    portal.MailHost.smtp_host = 'localhost'
+    setattr(portal, 'email_from_address', 'admin@foo.com')
+    commit()
+
+def unsetMailHost(portal):
+    portal.MailHost.smtp_host = ''
+    setattr(portal, 'email_from_address', '')
+    commit()
+
+def activateDefaultPasswordPolicy(portal):
+    uf = portal.acl_users
+    for policy in uf.objectIds(['Default Plone Password Policy']):
+        activatePluginInterfaces(portal, policy)
+
+def addParrotPasswordPolicy(portal):
+    # remove default policy
+    uf = portal.acl_users
+    for policy in uf.objectIds(['Default Plone Password Policy']):
+        uf.plugins.deactivatePlugin(IValidationPlugin, policy)
+
+    obj = DeadParrotPassword('test')
+    uf._setObject(obj.getId(), obj)
+    obj = uf[obj.getId()]
+    activatePluginInterfaces(portal, obj.getId())
+
+    #portal = getUtility(ISiteRoot)
+    plugins = uf._getOb('plugins')
+    validators = plugins.listPlugins(IValidationPlugin)
+    assert validators
+    commit()
+
 classImplements(DeadParrotPassword, IValidationPlugin)
-"""
diff --git a/plone/app/users/tests/forms_navigationroot.rst b/plone/app/users/tests/forms_navigationroot.rst
index 40871ac..03dbbcc 100644
--- a/plone/app/users/tests/forms_navigationroot.rst
+++ b/plone/app/users/tests/forms_navigationroot.rst
@@ -26,23 +26,23 @@ Create a folder
 We'll create the test context and have the relevant navigation root marker
 interface ready to be applied:
 
-    >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
-    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
-    >>> browser.getControl('Log in').click()
-
-
-XXX: needs to be able to create a folder or something folderish
-
-
+    >>> from plone.app.testing import setRoles
+    >>> from plone.app.testing import TEST_USER_ID
+    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
     >>> portal.invokeFactory('Folder', id='folder_navroot', title="Navroot")
     'folder_navroot'
-
+    >>> from transaction import commit
+    >>> commit()
 
 Let's see if we can navigate to the user information and options forms
 in the 'Users and Groups' settings. Each of the 3 forms all use the
 same base class so if the fix works on one, it works on them all.
 
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Log in').click()
+
     >>> browser.getLink('Navroot').click()
 
     >>> browser.getLink('Preferences').click()
@@ -61,7 +61,8 @@ yet).
 Now, let's mark this folder and see what happens.  All links should
 now be rooted to the given folder and not the Plone site proper.
 
-    >>> mark(self.portal.folder_navroot, INavigationRoot)
+    >>> mark(portal.folder_navroot, INavigationRoot)
+    >>> commit()
 
     >>> browser.getLink('Navroot').click()
 
diff --git a/plone/app/users/tests/member_search.rst b/plone/app/users/tests/member_search.rst
index 13e3585..0bbce8c 100644
--- a/plone/app/users/tests/member_search.rst
+++ b/plone/app/users/tests/member_search.rst
@@ -101,7 +101,7 @@ So let's search again. We should see two members (test_user_1_ and bob):
     >>> browser.getControl(name='form.buttons.search').click()
     >>> '2 items matching your search terms.' in browser.contents
     True
-    >>> '<a href="http://nohost/plone/author/test_user_1_">'in browser.contents
+    >>> '<a href="http://nohost/plone/Members/test_user_1_">'in browser.contents
     True
     >>> '<a href="http://nohost/plone/author/bob-jones">'in browser.contents
     True
diff --git a/plone/app/users/tests/password.rst b/plone/app/users/tests/password.rst
index 97d8b76..83210ef 100644
--- a/plone/app/users/tests/password.rst
+++ b/plone/app/users/tests/password.rst
@@ -76,7 +76,8 @@ Password Validation Plugin
 
 Now let's test using a PAS Password validation plugin. Add a test plugin.
 
-    >>> self.addParrotPasswordPolicy()
+    >>> from plone.app.users.tests.base import addParrotPasswordPolicy
+    >>> addParrotPasswordPolicy(portal)
 
     >>> browser.open('http://nohost/plone/' + view_name)
 
diff --git a/plone/app/users/tests/plugins.rst b/plone/app/users/tests/plugins.rst
index 63f8b7c..2e70a69 100644
--- a/plone/app/users/tests/plugins.rst
+++ b/plone/app/users/tests/plugins.rst
@@ -68,18 +68,19 @@ To use this plugin we will need to register this class with the PAS system.
 
 And then add the plugin into acl_users.
 
-  >>>  obj = MyPasswordPolicy('pw_pol')
-  >>>  self.portal.acl_users._setObject(obj.getId(), obj)
-  >>>  obj = self.portal.acl_users[obj.getId()]
+  >>> obj = MyPasswordPolicy('pw_pol')
+  >>> portal = layer['portal']
+  >>> portal.acl_users._setObject(obj.getId(), obj)
+  >>> obj = portal.acl_users[obj.getId()]
 
 Activate it
 
-  >>>  obj.manage_activateInterfaces(['IValidationPlugin'])
+  >>> obj.manage_activateInterfaces(['IValidationPlugin'])
 
 and deactivate the default 5 char password policy
 
-  >>> for policy in self.portal.acl_users.objectIds(['Default Plone Password Policy']):
-  >>>   self.portal.acl_users.plugins.deactivatePlugin(IValidationPlugin, policy)
+  >>> for policy in portal.acl_users.objectIds(['Default Plone Password Policy']):
+  >>>   portal.acl_users.plugins.deactivatePlugin(IValidationPlugin, policy)
 
 Now our password policy is in force.
 
@@ -108,4 +109,4 @@ We'll enter an invalid password
 
 Passwords that are autogenerated for users are not validated since they will never
 be seen by the users. Users are instead sent a url via mail similar to the password
-reset url which allows them to set their own password.
\ No newline at end of file
+reset url which allows them to set their own password.
diff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst
index 16687f4..78463e4 100644
--- a/plone/app/users/tests/registration_forms.rst
+++ b/plone/app/users/tests/registration_forms.rst
@@ -12,10 +12,7 @@ Set up
     >>> membership = portal.portal_membership
 
     >>> browser = Browser(app)
-    >>> browser.handleErrors = False
-
     >>> browser_admin = Browser(app)
-    >>> browser_admin.handleErrors = False
 
     >>> browser.open('http://nohost/plone')
     >>> list_widget_suffix = ':list'
@@ -60,14 +57,14 @@ Set up
     False
 
     Fake that mailhost is set up properly:
-    >>> setattr(portal.MailHost, 'smtp_host', 'localhost')
-    >>> setattr(portal, 'email_from_address', 'admin@foo.com')
-    >>> import transaction
-    >>> transaction.commit()
+    >>> from plone.app.users.tests.base import setMailHost, unsetMailHost
+    >>> setMailHost(portal)
 
     The form should now be visible, sans password, since the user still cannot
     set it.
+    >>> browser = Browser(app)
     >>> browser.open('http://nohost/plone/@@register')
+
     >>> 'User Name' in browser.contents
     True
     >>> 'Password' in browser.contents
@@ -105,7 +102,7 @@ Set up
     True
 
     Disable the mailhost and enable user ability to set their own password.
-    >>> self.unsetMailHost()
+    >>> unsetMailHost(portal)
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'admin'
     >>> browser.getControl('Password').value = 'secret'
@@ -237,7 +234,7 @@ Set up
     >>> browser.getLink('user3').click()
 
     Set up the mailhost and try again.
-    >>> self.setMailHost()
+    >>> setMailHost()
     >>> browser.open('http://nohost/plone/@@new-user')
     >>> 'Password' in browser.contents
     True
@@ -290,12 +287,13 @@ Set up
 
     Now let's test using a PAS Password validation plugin. Add a test plugin.
 
-    >>> self.addParrotPasswordPolicy()
+    >>> from plone.app.users.tests.base import addParrotPasswordPolicy
+    >>> addParrotPasswordPolicy(portal)
 
     Enable setting own password
 
     Disable the mailhost and enable user ability to set their own password.
-    >>> self.unsetMailHost()
+    >>> unsetMailHost()
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'admin'
     >>> browser.getControl('Password').value = 'secret'
@@ -361,7 +359,7 @@ Set up
     True
 
     Add the default policy back in so we can test two plugins at once
-    >>> self.activateDefaultPasswordPolicy()
+    >>> activateDefaultPasswordPolicy(portal)
 
     >>> browser.getLink(url='http://nohost/plone/logout').click()
     >>> 'Log in' in browser.contents
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index 828a0e9..5698c51 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -97,11 +97,9 @@ def test_generate_user_id_with_uuid(self):
                             form.generate_user_id(data))
 
 
-class TestGenerateUUIDUserId(unittest.TestCase):
+class TestGenerateUUIDUserId(BaseTestCase):
 
-    layer = PLONE_APP_USERS_INTEGRATION_TESTING
-
-    def setUp(self):
+    def afterSetUp(self):
         self.portal = self.layer['portal']
 
         # If use_uuid_as_userid is set in the site_properties, we
@@ -116,6 +114,10 @@ def setUp(self):
         )  # Change it.
         ptool.site_properties.getProperty('use_uuid_as_userid')
 
+    def beforeTearDown(self):
+        # override method defined in BaseTestCase
+        pass
+
     def test_generate_uuid_user_id(self):
         self.assertTrue(
             self.ptool.site_properties.getProperty('use_uuid_as_userid')


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-10T11:18:03+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/9eedabaa29281b16050dd684c008dc908536bec8

change to plone.app.testing as egg dependency

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index 217564a..359c1ea 100644
--- a/setup.py
+++ b/setup.py
@@ -11,7 +11,7 @@
 extras_require = {
     'test': [
         'Products.MailHost',
-        'Products.PloneTestCase',
+        'plone.app.testing',
         'plone.keyring',
     ]
 }


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T14:16:46+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/e167bcdf1009362f65c8ab5f6066cfb77a54005f

some testing fine tuning

Files changed:
M plone/app/users/testing.py
M plone/app/users/tests/base.py
M plone/app/users/tests/registration_forms.rst

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index 8f010cb..a8c74a8 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -17,38 +17,18 @@ def setUpZope(self, app, configurationContext):
         import plone.app.users
         self.loadZCML(package=plone.app.users)
 
-    def setUpPloneSite(self, portal):
-        # Configure mock mail host
-        mail_host = portal.MailHost = MockMailHost('MailHost')
-        site_manager = getSiteManager(portal)
-        site_manager.unregisterUtility(provided=IMailHost)
-        site_manager.registerUtility(mail_host, IMailHost)
-
-    def addParrotPasswordPolicy(self):
-        a = 2
-        """# remove default policy
-        uf = self.portal.acl_users
-        for policy in uf.objectIds(['Default Plone Password Policy']):
-            uf.plugins.deactivatePlugin(IValidationPlugin, policy)
-
-        obj = DeadParrotPassword('test')
-        uf._setObject(obj.getId(), obj)
-        obj = uf[obj.getId()]
-        activatePluginInterfaces(self.portal, obj.getId())
-
-        portal = getUtility(ISiteRoot)
-        pas_instance = portal.acl_users
-        plugins = pas_instance._getOb('plugins')
-        validators = plugins.listPlugins(IValidationPlugin)
-        assert validators"""
-
+#    def setUpPloneSite(self, portal):
+#        # Configure mock mail host
+#        mail_host = portal.MailHost = MockMailHost('MailHost')
+#        site_manager = getSiteManager(portal)
+#        site_manager.unregisterUtility(provided=IMailHost)
+#        site_manager.registerUtility(mail_host, IMailHost)
 
 
 PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()
 PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_USERS_FIXTURE, ),
-    name='PloneAppUsersLayer:Functional'
-)
+    name='PloneAppUsersLayer:Functional')
 
 
 optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE)
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index 80d944f..b6a3b60 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -30,16 +30,16 @@ class BaseTestCase(PloneTestCase):
     layer = PLONE_APP_USERS_FUNCTIONAL_TESTING
 
     def afterSetUp(self):
-        super(BaseTestCase, self).afterSetUp()
-        self.browser = Browser(self.layer['app'])
         self.portal.acl_users._doAddUser('admin', 'secret', ['Manager'], [])
 
         self.portal._original_MailHost = self.portal.MailHost
         self.portal.MailHost = mailhost = MockMailHost('MailHost')
-        self.membership = self.portal.portal_membership
         sm = getSiteManager(context=self.portal)
         sm.unregisterUtility(provided=IMailHost)
         sm.registerUtility(mailhost, provided=IMailHost)
+
+        self.browser = Browser(self.layer['app'])
+        self.membership = self.portal.portal_membership
         self.request = self.layer['request']
 
 
@@ -52,8 +52,7 @@ def beforeTearDown(self):
             provided=IMailHost
         )
 
-        portal = getUtility(ISiteRoot)
-        pas_instance = portal.acl_users
+        pas_instance = self.portal.acl_users
         plugin = getattr(pas_instance, 'test', None)
         if plugin is not None:
             plugins = pas_instance._getOb('plugins')
@@ -91,12 +90,12 @@ def validateUserInfo(self, user, set_id, set_info):
 # Helper methods used in doctests
 
 def setMailHost(portal):
-    portal.MailHost.smtp_host = 'localhost'
+    setattr(portal.MailHost, 'smtp_host', 'localhost')
     setattr(portal, 'email_from_address', 'admin@foo.com')
     commit()
 
 def unsetMailHost(portal):
-    portal.MailHost.smtp_host = ''
+    setattr(portal.MailHost, 'smtp_host', '')
     setattr(portal, 'email_from_address', '')
     commit()
 
diff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst
index 78463e4..f126f57 100644
--- a/plone/app/users/tests/registration_forms.rst
+++ b/plone/app/users/tests/registration_forms.rst
@@ -12,49 +12,6 @@ Set up
     >>> membership = portal.portal_membership
 
     >>> browser = Browser(app)
-    >>> browser_admin = Browser(app)
-
-    >>> browser.open('http://nohost/plone')
-    >>> list_widget_suffix = ':list'
-
-    Self-registration is disabled, user does not see 'Register' link.
-    >>> 'Register' in browser.contents
-    False
-
-    Enable self-registration
-    >>> browser_admin.open('http://nohost/plone/login_form')
-    >>> browser_admin.getControl('Login Name').value = 'admin'
-    >>> browser_admin.getControl('Password').value = 'secret'
-    >>> browser_admin.getControl('Log in').click()
-    >>> browser_admin.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser_admin.getControl('Enable self-registration').selected = True
-    >>> browser_admin.getControl('Save').click()
-    >>> 'Changes saved' in browser_admin.contents
-    True
-
-    Logged out user should now see the register link.
-    >>> browser.open('http://nohost/plone')
-    >>> 'Register' in browser.contents
-    True
-
-    >>> browser.getLink('Register').click()
-    >>> '@@register' in browser.url
-    True
-
-    No mailhost has been set up yet. User should not be able to see the form.
-    >>> browser.contents
-    '...This site...valid email setup...cannot register at this time...'
-    >>> 'User Name' in browser.contents
-    False
-
-    Check that the form is not displayed when no mailhost is defined and users
-    cannot choose their own passwords.
-    >>> 'User Name' in browser.contents
-    False
-    >>> 'Password' in browser.contents
-    False
-    >>> 'Confirm password' in browser.contents
-    False
 
     Fake that mailhost is set up properly:
     >>> from plone.app.users.tests.base import setMailHost, unsetMailHost


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T14:32:25+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/f496662956b7ae795f9b84e39212b409abb80576

Merge remote-tracking branch 'origin/master' into plone-app-testing

Conflicts:
	CHANGES.rst
	plone/app/users/tests/base.py
	plone/app/users/tests/duplicate_email.rst
	plone/app/users/tests/email_login.rst
	plone/app/users/tests/test_loginname_generator.py
	plone/app/users/tests/test_new_user.py
	plone/app/users/tests/test_userid_generator.py
	plone/app/users/tests/userdata.rst

Files changed:
M CHANGES.rst
M plone/app/users/browser/account.py
M plone/app/users/browser/register.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/tests/base.py
M plone/app/users/tests/duplicate_email.rst
M plone/app/users/tests/email_login.rst
M plone/app/users/tests/flexible_user_registration.rst
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/tests/userdata.rst
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cc044cd..688ef17 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,15 @@
 CHANGES
 =======
 
-2.1.1 (unreleased)
-------------------
+2.2 (unreleased)
+----------------
 
 - Ported tests to plone.app.testing
   [gforcada, tomgross]
 
+- Use email_from_address from registry (Plone 5) in tests.
+  [khink]
+
 2.1.0 (2014-10-23)
 ------------------
 
diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py
index f5274ef..4fc7343 100644
--- a/plone/app/users/browser/account.py
+++ b/plone/app/users/browser/account.py
@@ -3,6 +3,7 @@
 from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
@@ -12,9 +13,11 @@
 from plone.app.users.utils import notifyWidgetActionExecutionError
 from plone.autoform.form import AutoExtensibleForm
 from plone.protect import CheckAuthenticator
+from plone.registry.interfaces import IRegistry
 from z3c.form import button
 from z3c.form import form
 from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.event import notify
 from zope.interface import implements
 
@@ -123,8 +126,10 @@ def validate_email(self, action, data):
         ]
         if 'email' not in error_keys:
             registration = getToolByName(context, 'portal_registration')
-            properties = getToolByName(context, 'portal_properties')
-            if properties.site_properties.getProperty('use_email_as_login'):
+            registry = getUtility(IRegistry)
+            security_settings = registry.forInterface(
+                ISecuritySchema, prefix="plone")
+            if security_settings.use_email_as_login:
                 err_str = ''
                 try:
                     id_allowed = registration.isMemberIdAllowed(data['email'])
diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index bed5edd..bb238ea 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -4,6 +4,7 @@
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.utils import normalizeString
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
@@ -19,6 +20,7 @@
 from plone.autoform.interfaces import OMITTED_KEY
 from plone.autoform.interfaces import ORDER_KEY
 from plone.protect import CheckAuthenticator
+from plone.registry.interfaces import IRegistry
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
@@ -51,6 +53,11 @@ class BaseRegistrationForm(AutoExtensibleForm, form.Form):
     # this attribute indicates if user was successfully registered
     _finishedRegister = False
 
+    def _get_security_settings(self):
+        """Return security settings from the registry."""
+        registry = getUtility(IRegistry)
+        return registry.forInterface(ISecuritySchema, prefix="plone")
+
     def render(self):
         if self._finishedRegister:
             return self.context.unrestrictedTraverse('registered')()
@@ -63,7 +70,8 @@ def updateFields(self):
         """
         portal_props = getToolByName(self.context, 'portal_properties')
         props = portal_props.site_properties
-        use_email_as_login = props.getProperty('use_email_as_login')
+        settings = self._get_security_settings()
+        use_email_as_login = settings.use_email_as_login
 
         # Ensure all listed fields are in the schema
         registration_fields = [f for f in props.getProperty(
@@ -159,7 +167,7 @@ def generate_user_id(self, data):
         1. We query a utility, so integrators can register a hook to
            generate a user id using their own logic.
 
-        2. If use_uuid_as_userid is set in the site_properties, we
+        2. If use_uuid_as_userid is set in the registry, we
            generate a uuid.
 
         3. If a username is given and we do not use email as login,
@@ -198,9 +206,8 @@ def generate_user_id(self, data):
                 data['user_id'] = userid
                 return userid
 
-        portal_props = getToolByName(self.context, 'portal_properties')
-        props = portal_props.site_properties
-        if props.getProperty('use_uuid_as_userid'):
+        settings = self._get_security_settings()
+        if settings.use_uuid_as_userid:
             userid = uuid_userid_generator()
             data['user_id'] = userid
             return userid
@@ -209,13 +216,15 @@ def generate_user_id(self, data):
         userid = data.get('username')
         if userid:
             # If we are not using email as login, then this user name is fine.
-            if not props.getProperty('use_email_as_login'):
+            if not settings.use_email_as_login:
                 data['user_id'] = userid
                 return userid
 
         # First get a default value that we can return if we cannot
         # find anything better.
-        default = data.get('username') or data.get('email') or ''
+        pas = getToolByName(self.context, 'acl_users')
+        email = pas.applyTransform(data.get('email'))
+        default = data.get('username') or email or ''
         data['user_id'] = default
         fullname = data.get('fullname')
         if not fullname:
@@ -285,11 +294,9 @@ def generate_login_name(self, data):
         login_name = data.get('username')
         login_name = pas.applyTransform(login_name)
         data['login_name'] = login_name
-        portal_props = getToolByName(self.context, 'portal_properties')
-        props = portal_props.site_properties
-        use_email_as_login = props.getProperty('use_email_as_login')
+        settings = self._get_security_settings()
         # If we are not using email as login, then this user name is fine.
-        if not use_email_as_login:
+        if not settings.use_email_as_login:
             return login_name
 
         # We use email as login.
@@ -319,9 +326,6 @@ def validate_registration(self, action, data):
         form_field_names = [f for f in self.fields]
 
         portal = getUtility(ISiteRoot)
-        portal_props = getToolByName(self.context, 'portal_properties')
-        props = portal_props.site_properties
-        use_email_as_login = props.getProperty('use_email_as_login')
 
         # passwords should match
         if 'password' in form_field_names:
@@ -349,7 +353,8 @@ def validate_registration(self, action, data):
                         notifyWidgetActionExecutionError(action,
                                                          'password', err_str)
 
-        if use_email_as_login:
+        settings = self._get_security_settings()
+        if settings.use_email_as_login:
             username_field = 'email'
         else:
             username_field = 'username'
@@ -486,7 +491,8 @@ def handle_join_success(self, data):
         # set member properties
         self.applyProperties(user_id, data)
 
-        if data.get('mail_me') or (portal.validate_email and
+        settings = self._get_security_settings()
+        if data.get('mail_me') or (not settings.enable_user_pwd_choice and
                                    not data.get('password')):
             # We want to validate the email address (users cannot
             # select their own passwords on the register form) or the
@@ -588,9 +594,11 @@ def showForm(self):
         ctrlOverview = getMultiAdapter((portal, self.request),
                                        name='overview-controlpanel')
 
-        # hide form if mailhost_warning == True and validate_email == True
+        settings = self._get_security_settings()
+        # hide form if mailhost_warning == True and
+        # enable_user_pwd_choice == False
         return not (ctrlOverview.mailhost_warning() and
-                    portal.getProperty('validate_email', True))
+                    not settings.enable_user_pwd_choice)
 
     def updateFields(self):
         if not self.showForm:
@@ -602,8 +610,8 @@ def updateFields(self):
         defaultFields = field.Fields(self.fields)
 
         # Can the user actually set his/her own password?
-        portal = getUtility(ISiteRoot)
-        if portal.getProperty('validate_email', True):
+        settings = self._get_security_settings()
+        if not settings.enable_user_pwd_choice:
             # No? Remove the password fields.
             defaultFields = defaultFields.omit('password', 'password_ctl')
         else:
@@ -622,8 +630,8 @@ def updateWidgets(self):
             return
 
         super(RegistrationForm, self).updateWidgets()
-        portal = getUtility(ISiteRoot)
-        if portal.getProperty('validate_email', True):
+        settings = self._get_security_settings()
+        if not settings.enable_user_pwd_choice:
             # Show a message indicating that a password reset link
             # will be mailed to the user.
             widget = self.widgets['mail_me']
@@ -649,7 +657,7 @@ def updateFields(self):
         defaultFields = field.Fields(self.fields)
 
         # The mail_me field needs special handling depending on the
-        # validate_email property and on the correctness of the mail
+        # enable_user_pwd_choice setting and on the correctness of the mail
         # settings.
         portal = getUtility(ISiteRoot)
         ctrlOverview = getMultiAdapter((portal, self.request),
@@ -661,7 +669,8 @@ def updateFields(self):
             # will check that at least one of the options is chosen.
             defaultFields['password'].field.required = False
             defaultFields['password_ctl'].field.required = False
-            if portal.getProperty('validate_email', True):
+            settings = self._get_security_settings()
+            if not settings.enable_user_pwd_choice:
                 defaultFields['mail_me'].field.default = True
             else:
                 defaultFields['mail_me'].field.default = False
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index e0adc6b..675d25f 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -2,6 +2,7 @@
 from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.utils import set_own_login_name
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.PlonePAS.tools.membership import default_portrait
@@ -9,6 +10,8 @@
 from plone.app.users.browser.account import AccountPanelSchemaAdapter
 from plone.app.users.schema import IUserDataSchema
 from plone.namedfile.file import NamedBlobImage
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
 
 
 class UserDataPanelAdapter(AccountPanelSchemaAdapter):
@@ -43,8 +46,10 @@ def get_email(self):
         return self._getProperty('email')
 
     def set_email(self, value):
-        pp = getToolByName(self.context, 'portal_properties')
-        if pp.site_properties.getProperty('use_email_as_login'):
+        registry = getUtility(IRegistry)
+        security_settings = registry.forInterface(
+            ISecuritySchema, prefix="plone")
+        if security_settings.use_email_as_login:
             mt = getToolByName(self.context, 'portal_membership')
             if self.context.getId() == mt.getAuthenticatedMember().getId():
                 set_own_login_name(self.context, value)
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index b6a3b60..becdaa8 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -8,6 +8,8 @@
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
 from Products.CMFCore.interfaces import ISiteRoot
+from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
@@ -15,7 +17,9 @@
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PluggableAuthService.utils import classImplements
+from plone.registry.interfaces import IRegistry
 from OFS.Cache import Cacheable
+from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
 from zope.component import getUtility
 
@@ -34,6 +38,8 @@ def afterSetUp(self):
 
         self.portal._original_MailHost = self.portal.MailHost
         self.portal.MailHost = mailhost = MockMailHost('MailHost')
+        self.membership = self.portal.portal_membership
+        self.security_settings = get_security_settings()
         sm = getSiteManager(context=self.portal)
         sm.unregisterUtility(provided=IMailHost)
         sm.registerUtility(mailhost, provided=IMailHost)
@@ -89,14 +95,18 @@ def validateUserInfo(self, user, set_id, set_info):
 
 # Helper methods used in doctests
 
-def setMailHost(portal):
-    setattr(portal.MailHost, 'smtp_host', 'localhost')
-    setattr(portal, 'email_from_address', 'admin@foo.com')
+def setMailHost():
+    registry = getUtility(IRegistry)
+    mail_settings = registry.forInterface(IMailSchema, prefix='plone')
+    mail_settings.smtp_host = u'localhost'
+    mail_settings.email_from_address = 'admin@foo.com'
     commit()
 
-def unsetMailHost(portal):
-    setattr(portal.MailHost, 'smtp_host', '')
-    setattr(portal, 'email_from_address', '')
+def unsetMailHost():
+    registry = getUtility(IRegistry)
+    mail_settings = registry.forInterface(IMailSchema, prefix='plone')
+    mail_settings.smtp_host = u''
+    mail_settings.email_from_address = ''
     commit()
 
 def activateDefaultPasswordPolicy(portal):
@@ -122,3 +132,7 @@ def addParrotPasswordPolicy(portal):
     commit()
 
 classImplements(DeadParrotPassword, IValidationPlugin)
+
+def get_security_settings():
+    registry = getUtility(IRegistry)
+    return registry.forInterface(ISecuritySchema, prefix="plone")
diff --git a/plone/app/users/tests/duplicate_email.rst b/plone/app/users/tests/duplicate_email.rst
index b6eb5f6..7d20ee5 100644
--- a/plone/app/users/tests/duplicate_email.rst
+++ b/plone/app/users/tests/duplicate_email.rst
@@ -25,7 +25,11 @@ Set up
     >>> user2_password = 'secret'
 
     >>> browser = Browser(app)
-    >>> browser.handleErrors = False
+    >>> from plone.app.users.tests.base import get_security_settings
+    >>> security_settings = get_security_settings()
+    >>> security_settings.use_email_as_login = True
+    >>> from transaction import commit
+    >>> commit()
 
 Configure security
 ------------------
@@ -94,7 +98,7 @@ Login as user two:
     >>> browser.open('http://nohost/plone/')
     >>> browser.getLink('Log in').click()
 
-    >>> browser.getControl('E-mail').value = user2_email
+    >>> browser.getControl('Login Name').value = user2_email
     >>> browser.getControl('Password').value = user2_password
     >>> browser.getControl('Log in').click()
     >>> 'Login failed' in browser.contents
diff --git a/plone/app/users/tests/email_login.rst b/plone/app/users/tests/email_login.rst
index cadd8c5..984377a 100644
--- a/plone/app/users/tests/email_login.rst
+++ b/plone/app/users/tests/email_login.rst
@@ -67,13 +67,10 @@ Fill out the form, using an odd email address that should not give problems.
     >>> 'Failed to create your account' in browser.contents
     False
 
-Login
-=====
-
-We can login immediately.
-
-    >>> 'Click the button to log in immediately.' in browser.contents
-    True
+    We can now login.
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = 'bob-jones+test@example.com'
+    >>> browser.getControl('Password').value = 'secret'
     >>> browser.getControl('Log in').click()
     >>> 'You are now logged in' in browser.contents
     True
@@ -84,14 +81,10 @@ We can login immediately.
     True
     >>> browser.getLink(url='http://nohost/plone/logout').click()
 
-Login form changes
-==================
-
-The login form now has a different label for the login name.
-
+    We login as manager.
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('E-mail').value = SITE_OWNER_NAME
-    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = portal_owner
+    >>> browser.getControl('Password').value = default_password
     >>> browser.getControl('Log in').click()
 
 The user id is now bob-jones, based on the full name:
diff --git a/plone/app/users/tests/flexible_user_registration.rst b/plone/app/users/tests/flexible_user_registration.rst
index 5d25e19..ae58d4a 100644
--- a/plone/app/users/tests/flexible_user_registration.rst
+++ b/plone/app/users/tests/flexible_user_registration.rst
@@ -133,7 +133,9 @@ get all required fields on registration form.
 
 Check render register form in 'Use Email As Login' mode.
 
-    >>> portal.portal_properties.site_properties._updateProperty('use_email_as_login', True)
+    >>> from plone.app.users.tests.base import get_security_settings
+    >>> security_settings = get_security_settings()
+    >>> security_settings.use_email_as_login = True
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username'])
     >>> transaction.commit()
     >>> browser.open('http://nohost/plone/@@register')
@@ -145,12 +147,10 @@ Check render register form in 'Use Email As Login' mode.
     >>> browser.getControl('Password').value = 'testpassword'
     >>> browser.getControl('Confirm password').value = 'testpassword'
     >>> browser.getControl('Register').click()
-    >>> browser.contents
-    '...Welcome!...You have been registered...'
 
 Revert email mode.
 
-    >>> portal.portal_properties.site_properties._updateProperty('use_email_as_login', False)
+    >>> security_settings.use_email_as_login = False
 
 Check register form with portrait field.
 
diff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py
index 964814a..9ea7728 100644
--- a/plone/app/users/tests/test_loginname_generator.py
+++ b/plone/app/users/tests/test_loginname_generator.py
@@ -1,33 +1,70 @@
 # -*- coding: utf-8 -*-
+# Note: test setup somehow fails when only tests from this file are run.
+from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.browser.interfaces import ILoginNameGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
 from plone.app.users.tests.base import BaseTestCase
+from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
+from zope.component import getUtility
 
 import unittest
 
 
 class TestGenerateLoginName(BaseTestCase):
 
-    def test_generate_user_id_simplistic(self):
+    def afterSetUp(self):
+        super(TestGenerateLoginName, self).afterSetUp()
+        registry = getUtility(IRegistry)
+        self.security_settings = registry.forInterface(
+            ISecuritySchema, prefix="plone")
+
+    def test_custom_generator(self):
+        """Test if a custom login name generator overrides the default
+        behavior.
+        """
         sm = getSiteManager(context=self.portal)
+        form = BaseRegistrationForm(self.portal, {})
+        data = {'useme': 'me me me', 'username': 'frank'}
+
+        sm.registerUtility(
+            lambda data: data['useme'], provided=ILoginNameGenerator)
+
+        self.assertEqual(form.generate_login_name(data), 'me me me')
+        self.assertEqual(data.get('login_name'), 'me me me')
 
-        # Without a function, return username
-        self.assertEqual(
-            self._generate_login_name(dict(username='frank')),
-            'frank'
-        )
-
-        # Generator overrides this behavior
-        sm.registerUtility(lambda data: data['useme'],
-                           provided=ILoginNameGenerator)
-        self.assertEqual(
-            self._generate_login_name(dict(useme='me me me',
-                                           username='frank')),
-            'me me me'
-        )
-
-    def _generate_login_name(self, data):
-        """Generate login name, optionally registering function first"""
+    def test_custom_generator_empty(self):
+        """Test that the username is used if a custom login name generator
+        returns an empty value.
+        """
+        sm = getSiteManager(context=self.portal)
         form = BaseRegistrationForm(self.portal, {})
-        return form.generate_login_name(data)
+        data = {'useme': '', 'username': 'Frank'}
+
+        sm.registerUtility(
+            lambda data: data['useme'], provided=ILoginNameGenerator)
+
+        self.assertEqual(form.generate_login_name(data), 'Frank')
+        self.assertEqual(data.get('login_name'), 'Frank')
+
+    def test_use_email_as_login_disabled(self):
+        """Test generating user_id with no custom login name generator and
+        with the use_email_as_login security setting disabled.
+        """
+        form = BaseRegistrationForm(self.portal, {})
+        data = {'username': 'Frank'}
+        self.security_settings.use_email_as_login = False
+
+        self.assertEqual(form.generate_login_name(data), 'Frank')
+        self.assertEqual(data.get('login_name'), 'Frank')
+
+    def test_use_email_as_login_enabled(self):
+        """Test generating user_id with no custom login name generator and
+        with the use_email_as_login security setting enabled.
+        """
+        form = BaseRegistrationForm(self.portal, {})
+        data = {'username': 'Frank', 'email': 'Frank@Test.com'}
+        self.security_settings.use_email_as_login = True
+
+        self.assertEqual(form.generate_login_name(data), 'frank@test.com')
+        self.assertEqual(data.get('login_name'), 'frank@test.com')
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index 92a8e51..303ef81 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -3,6 +3,14 @@
 from plone.app.testing import setRoles
 from plone.testing.z2 import Browser
 from plone.app.users.tests.base import BaseTestCase
+from hashlib import sha1 as sha
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ISecuritySchema
+from plone.app.users.tests.base import BaseTestCase
+from plone.app.users.utils import uuid_userid_generator
+from plone.protect import authenticator as auth
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
 
 import transaction
 import unittest
@@ -31,3 +39,148 @@ def test_new_user_as_site_administrator(self):
             'Site Administrator' in
             self.portal.acl_users.getUserById('newuser').getRoles()
         )
+
+
+class TestGenerateUserIdLoginName(BaseTestCase):
+    """Test if the user id and user name are properly generated based on the
+    security settings.
+    """
+
+    def afterSetUp(self):
+        super(TestGenerateUserIdLoginName, self).afterSetUp()
+        self.portal_url = self.portal.absolute_url()
+        self.portal.acl_users._doAddUser(
+            'siteadmin', 'secret', ['Site Administrator'], []
+        )
+        self.browser.handleErrors = False
+        self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
+        registry = getUtility(IRegistry)
+        self.security_settings = registry.forInterface(
+            ISecuritySchema, prefix="plone")
+
+    def test_uuid_disabled_email_as_login_disabled(self):
+        self.security_settings.use_uuid_as_userid = False
+        self.security_settings.use_email_as_login = False
+
+        # create a user
+        self.browser.open('http://nohost/plone/@@new-user')
+        self.browser.getControl('Full Name').value = 'New User'
+        self.browser.getControl('User Name').value = 'newie'
+        self.browser.getControl('E-mail').value = 'NewUser@Example.Com'
+        self.browser.getControl('Password').value = 'foobar'
+        self.browser.getControl('Confirm password').value = 'foobar'
+        self.browser.getControl('Register').click()
+
+        # user id should be set the same as user name
+        pas = getToolByName(self.portal, 'acl_users')
+        self.assertEquals(len(pas.searchUsers(name='newie')), 1)
+        user = pas.getUser('newie')
+        self.assertEquals(user.getId(), 'newie')
+        self.assertEquals(user.getUserName(), 'newie')
+
+    def test_uuid_disabled_email_as_login_enabled_no_full_name(self):
+        self.security_settings.use_uuid_as_userid = False
+        self.security_settings.use_email_as_login = True
+
+        # create a user
+        self.browser.open('http://nohost/plone/@@new-user')
+        self.browser.getControl('E-mail').value = 'newuser@example.com'
+        self.browser.getControl('Password').value = 'foobar'
+        self.browser.getControl('Confirm password').value = 'foobar'
+        self.browser.getControl('Register').click()
+
+        # Since full name is not provided, the user id is set based on the
+        # e-mail, the same as the user name.
+        pas = getToolByName(self.portal, 'acl_users')
+        self.assertEquals(len(pas.searchUsers(name='newuser@example.com')), 1)
+        self.assertEquals(len(pas.searchUsers(name='newuser@example.com')), 1)
+        user = pas.getUser('newuser@example.com')
+        self.assertEquals(user.getId(), 'newuser@example.com')
+        self.assertEquals(user.getUserName(), 'newuser@example.com')
+
+    def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):
+        self.security_settings.use_uuid_as_userid = False
+        self.security_settings.use_email_as_login = True
+
+        # create a user
+        self.browser.open('http://nohost/plone/@@new-user')
+        self.browser.getControl('E-mail').value = 'NewUser@Example.Com'
+        self.browser.getControl('Password').value = 'foobar'
+        self.browser.getControl('Confirm password').value = 'foobar'
+        self.browser.getControl('Register').click()
+
+        # the user id is set based on the e-mail, which should be lowercased
+        pas = getToolByName(self.portal, 'acl_users')
+        self.assertEquals(len(pas.searchUsers(name='newuser@example.com')), 1)
+        self.assertEquals(len(pas.searchUsers(name='NewUser@Example.Com')), 1)
+        user = pas.getUser('newuser@Example.Com')
+        self.assertEquals(user.getId(), 'newuser@example.com')
+        self.assertEquals(user.getUserName(), 'newuser@example.com')
+
+    def test_uuid_disabled_email_as_login_enabled_has_full_name(self):
+        self.security_settings.use_uuid_as_userid = False
+        self.security_settings.use_email_as_login = True
+
+        # create a user
+        self.browser.open('http://nohost/plone/@@new-user')
+        self.browser.getControl('Full Name').value = 'New User'
+        self.browser.getControl('E-mail').value = 'NewUser@Example.Com'
+        self.browser.getControl('Password').value = 'foobar'
+        self.browser.getControl('Confirm password').value = 'foobar'
+        self.browser.getControl('Register').click()
+
+        # User id should be set based on the full name, user name should be
+        # set based on the e-mail.
+        pas = getToolByName(self.portal, 'acl_users')
+        self.assertEquals(len(pas.searchUsers(name='newuser@example.com')), 1)
+        self.assertEquals(len(pas.searchUsers(name='NewUser@Example.Com')), 1)
+        user = pas.getUser('newuser@Example.Com')
+        self.assertEquals(user.getId(), 'new-user')
+        self.assertEquals(user.getUserName(), 'newuser@example.com')
+
+    def test_uuid_enabled_email_as_login_disabled(self):
+        self.security_settings.use_uuid_as_userid = True
+        self.security_settings.use_email_as_login = False
+
+        # create a user
+        self.browser.open('http://nohost/plone/@@new-user')
+        self.browser.getControl('Full Name').value = 'New User'
+        self.browser.getControl('User Name').value = 'newie'
+        self.browser.getControl('E-mail').value = 'NewUser@Example.Com'
+        self.browser.getControl('Password').value = 'foobar'
+        self.browser.getControl('Confirm password').value = 'foobar'
+        self.browser.getControl('Register').click()
+
+        # uuid should be used for the user id
+        pas = getToolByName(self.portal, 'acl_users')
+        self.assertEquals(len(pas.searchUsers(name='newie')), 1)
+        user = pas.getUser('newie')
+        self.assertEquals(len(user.getId()), len(uuid_userid_generator()))
+        self.assertNotEquals(user.getId(), 'newuser@example.com')
+        self.assertNotEquals(user.getId(), 'newie')
+        self.assertNotEquals(user.getId(), 'new-user')
+        self.assertEquals(user.getUserName(), 'newie')
+
+    def test_uuid_enabled_email_as_login_enabled(self):
+        self.security_settings.use_uuid_as_userid = True
+        self.security_settings.use_email_as_login = True
+
+        # create a user
+        self.browser.open('http://nohost/plone/@@new-user')
+        self.browser.getControl('Full Name').value = 'New User'
+        self.browser.getControl('E-mail').value = 'NewUser@Example.Com'
+        self.browser.getControl('Password').value = 'foobar'
+        self.browser.getControl('Confirm password').value = 'foobar'
+        self.browser.getControl('Register').click()
+
+        # uuid should be used for the user id, user name should be based on
+        # the e-mail
+        pas = getToolByName(self.portal, 'acl_users')
+        self.assertEquals(len(pas.searchUsers(name='newuser@example.com')), 1)
+        self.assertEquals(len(pas.searchUsers(name='NewUser@Example.Com')), 1)
+        user = pas.getUser('newuser@example.com')
+        self.assertEquals(len(user.getId()), len(uuid_userid_generator()))
+        self.assertNotEquals(user.getId(), 'newuser@example.com')
+        self.assertNotEquals(user.getId(), 'newie')
+        self.assertNotEquals(user.getId(), 'new-user')
+        self.assertEquals(user.getUserName(), 'newuser@example.com')
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index 5698c51..3cfa469 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -1,16 +1,51 @@
 # -*- coding: utf-8 -*-
+# Note: test setup somehow fails when only tests from this file are run.
+from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.browser.interfaces import IUserIdGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
 from plone.app.users.tests.base import BaseTestCase
 from plone.app.users.utils import uuid_userid_generator
+from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
+from zope.component import getUtility
 
 import unittest
 
 
 class TestGenerateUserId(BaseTestCase):
 
-    def test_standard_generate_user_id(self):
+    def afterSetUp(self):
+        super(TestGenerateUserId, self).afterSetUp()
+        registry = getUtility(IRegistry)
+        self.security_settings = registry.forInterface(
+            ISecuritySchema, prefix="plone")
+
+    def test_custom_generator(self):
+        """Test if a custom user id generator overrides the default
+        behavior.
+        """
+
+        def one_generator(data):
+            return 'one'
+
+        sm = getSiteManager(context=self.portal)
+        sm.registerUtility(one_generator, provided=IUserIdGenerator)
+        form = BaseRegistrationForm(self.portal, {})
+
+        data = {}
+        self.assertEqual(form.generate_user_id(data), 'one')
+        self.assertEqual(data.get('user_id'), 'one')
+
+        data = {'username': 'joe',
+                'fullname': 'Joe User',
+                'email': 'joe@example.org'}
+        self.assertEqual(form.generate_user_id(data), 'one')
+        self.assertEqual(data.get('user_id'), 'one')
+
+    def test_default(self):
+        """Test generating user_id with no custom user id generator and
+        the default security settings.
+        """
         form = BaseRegistrationForm(self.portal, {})
         data = {}
         self.assertEqual(form.generate_user_id(data), '')
@@ -30,51 +65,61 @@ def test_standard_generate_user_id(self):
         self.assertEqual(data.get('user_id'), 'joe-user')
 
         # With no fullname, we take the email.
-        data = {'email': 'joe@example.org'}
-        self.assertEqual(form.generate_user_id(data), 'joe@example.org')
-        self.assertEqual(data.get('user_id'), 'joe@example.org')
-
-    def test_generate_user_id_simplistic(self):
-        # Test a simplistic user id generator.
-        def one_generator(data):
-            return 'one'
-
-        sm = getSiteManager(context=self.portal)
-        sm.registerUtility(one_generator, provided=IUserIdGenerator)
+        data = {'email': 'Joe@example.org'}
+        self.assertEqual(form.generate_user_id(data), 'Joe@example.org')
+        self.assertEqual(data.get('user_id'), 'Joe@example.org')
+
+    def test_use_email_as_login_has_fullname(self):
+        """"Test generating a user id if the use_email_as_login setting is
+        enabled and full name is provided.
+        """
+        self.security_settings.use_email_as_login = True
         form = BaseRegistrationForm(self.portal, {})
 
         data = {}
-        self.assertEqual(form.generate_user_id(data), 'one')
-        self.assertEqual(data.get('user_id'), 'one')
+        self.assertEqual(form.generate_user_id(data), '')
+        self.assertEqual(data.get('user_id'), '')
 
-        data = {'username': 'joe',
-                'fullname': 'Joe User',
+        data = {'fullname': 'Joe User',
                 'email': 'joe@example.org'}
-        self.assertEqual(form.generate_user_id(data), 'one')
-        self.assertEqual(data.get('user_id'), 'one')
+        self.assertEqual(form.generate_user_id(data), 'joe-user')
+        self.assertEqual(data.get('user_id'), 'joe-user')
 
-    def test_generate_user_id_email(self):
-        # It is easy to force the email as user id.
-        def email_getter(data):
-            return data.get('email')
+    def test_use_email_as_login_no_fullname(self):
+        """"Test generating a user id if the use_email_as_login setting is
+        enabled and full name is not provided.
+        """
+        self.security_settings.use_email_as_login = True
+        form = BaseRegistrationForm(self.portal, {})
 
-        sm = getSiteManager(context=self.portal)
-        sm.registerUtility(email_getter, provided=IUserIdGenerator)
+        data = {}
+        self.assertEqual(form.generate_user_id(data), '')
+        self.assertEqual(data.get('user_id'), '')
+
+        data = {'email': 'joe@example.org'}
+        self.assertEqual(form.generate_user_id(data), 'joe@example.org')
+        self.assertEqual(data.get('user_id'), 'joe@example.org')
+
+    def test_use_email_as_login_no_fullname_uppercase_email(self):
+        """"Test generating a user id if the use_email_as_login setting is
+        enabled and full name is not provided, with an uppercase e-mail.
+        """
+        self.security_settings.use_email_as_login = True
         form = BaseRegistrationForm(self.portal, {})
 
         data = {}
         self.assertEqual(form.generate_user_id(data), '')
         self.assertEqual(data.get('user_id'), '')
 
-        data = {'username': 'joe',
-                'fullname': 'Joe User',
-                'email': 'joe@example.org'}
+        data = {'email': 'Joe@Example.org'}
         self.assertEqual(form.generate_user_id(data), 'joe@example.org')
         self.assertEqual(data.get('user_id'), 'joe@example.org')
 
-    def test_generate_user_id_with_uuid(self):
-        sm = getSiteManager(context=self.portal)
-        sm.registerUtility(uuid_userid_generator, provided=IUserIdGenerator)
+    def test_use_uuid_as_userid_enabled(self):
+        """Test generating a user id if the use_uuid_as_userid setting is
+        enabled.
+        """
+        self.security_settings.use_uuid_as_userid = True
         form = BaseRegistrationForm(self.portal, {})
 
         data = {}
@@ -95,43 +140,3 @@ def test_generate_user_id_with_uuid(self):
         # call to the uuid generator should be unique.
         self.assertNotEqual(form.generate_user_id(data),
                             form.generate_user_id(data))
-
-
-class TestGenerateUUIDUserId(BaseTestCase):
-
-    def afterSetUp(self):
-        self.portal = self.layer['portal']
-
-        # If use_uuid_as_userid is set in the site_properties, we
-        # generate a uuid.
-        self.ptool = ptool = getattr(self.portal, 'portal_properties')
-        if not ptool.site_properties.hasProperty('use_uuid_as_userid'):
-            ptool.site_properties.manage_addProperty(
-                'use_uuid_as_userid', False, 'boolean'
-            )  # Try to add it.
-        ptool.site_properties.manage_changeProperties(
-            use_uuid_as_userid=True
-        )  # Change it.
-        ptool.site_properties.getProperty('use_uuid_as_userid')
-
-    def beforeTearDown(self):
-        # override method defined in BaseTestCase
-        pass
-
-    def test_generate_uuid_user_id(self):
-        self.assertTrue(
-            self.ptool.site_properties.getProperty('use_uuid_as_userid')
-        )
-        form = BaseRegistrationForm(self.portal, {})
-        data = {'username': 'joe',
-                'fullname': 'Joe User',
-                'email': 'joe@example.org'}
-        user_id = form.generate_user_id(data)
-        self.assertNotEqual(user_id, 'joe')
-        self.assertEqual(data.get('user_id'), user_id)
-        self.assertEqual(len(user_id), len(uuid_userid_generator()))
-
-        # Calling it twice should give a different result, as every
-        # call to the uuid generator should be unique.
-        self.assertNotEqual(form.generate_user_id(data),
-                            form.generate_user_id(data))
diff --git a/plone/app/users/tests/userdata.rst b/plone/app/users/tests/userdata.rst
index e25673b..cd1473f 100644
--- a/plone/app/users/tests/userdata.rst
+++ b/plone/app/users/tests/userdata.rst
@@ -230,9 +230,11 @@ Modifying user data in email mode
 
 Let's switch to using Email as Login Name
 
-    >>> portal.portal_properties.site_properties._updateProperty('use_email_as_login', True)
+    >>> from plone.app.users.tests.base import get_security_settings
+    >>> security_settings = get_security_settings()
+    >>> security_settings.use_email_as_login = True
     >>> transaction.commit()
-    >>> browser.open(view_url)
+    >>> browser.open("http://nohost/plone/" + view_name)
 
 Update our email and see if login name was synced:
 
@@ -256,3 +258,7 @@ should fail with validation errors.
     >>> browser.getControl('Save').click()
     >>> 'The email address you selected is already in use or is not valid as login name. Please choose another' in browser.contents
     True
+
+Revert back from email mode
+
+    >>> security_settings.use_email_as_login = False
diff --git a/setup.py b/setup.py
index 359c1ea..bc83eb5 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.1.1.dev0'
+version = '2.2.dev0'
 
 long_description = '{0}\n{1}'.format(open('README.rst').read(),
                                      open('CHANGES.rst').read())


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T14:50:37+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/6b8f34053e4055944fd851c05196dae1586d0de5

fixed tests after merge

Files changed:
M plone/app/users/tests/base.py
M plone/app/users/tests/duplicate_email.rst
M plone/app/users/tests/email_login.rst
M plone/app/users/tests/registration_forms.rst
M plone/app/users/tests/test_new_user.py

diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index becdaa8..e7d4779 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -50,6 +50,7 @@ def afterSetUp(self):
 
 
     def beforeTearDown(self):
+        self.login('admin')
         self.portal.MailHost = self.portal._original_MailHost
         sm = getSiteManager(context=self.portal)
         sm.unregisterUtility(provided=IMailHost)
diff --git a/plone/app/users/tests/duplicate_email.rst b/plone/app/users/tests/duplicate_email.rst
index 7d20ee5..3a50ddd 100644
--- a/plone/app/users/tests/duplicate_email.rst
+++ b/plone/app/users/tests/duplicate_email.rst
@@ -117,6 +117,7 @@ Change e-mail
 
 Setting the e-mail address to an existing one should give an error message:
 
+    >>> browser.handleErrors = False
     >>> browser.getControl('E-mail').value = user1_email
     >>> browser.getControl('Save').click()
     >>> 'The email address you selected is already in use' in browser.contents
diff --git a/plone/app/users/tests/email_login.rst b/plone/app/users/tests/email_login.rst
index 984377a..7766ad3 100644
--- a/plone/app/users/tests/email_login.rst
+++ b/plone/app/users/tests/email_login.rst
@@ -83,8 +83,8 @@ Fill out the form, using an odd email address that should not give problems.
 
     We login as manager.
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 The user id is now bob-jones, based on the full name:
diff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst
index f126f57..a4cab81 100644
--- a/plone/app/users/tests/registration_forms.rst
+++ b/plone/app/users/tests/registration_forms.rst
@@ -15,7 +15,7 @@ Set up
 
     Fake that mailhost is set up properly:
     >>> from plone.app.users.tests.base import setMailHost, unsetMailHost
-    >>> setMailHost(portal)
+    >>> setMailHost()
 
     The form should now be visible, sans password, since the user still cannot
     set it.
@@ -59,7 +59,7 @@ Set up
     True
 
     Disable the mailhost and enable user ability to set their own password.
-    >>> unsetMailHost(portal)
+    >>> unsetMailHost(l)
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'admin'
     >>> browser.getControl('Password').value = 'secret'
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index 303ef81..639e89f 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -52,15 +52,13 @@ def afterSetUp(self):
         self.portal.acl_users._doAddUser(
             'siteadmin', 'secret', ['Site Administrator'], []
         )
-        self.browser.handleErrors = False
+        transaction.commit() 
         self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
 
     def test_uuid_disabled_email_as_login_disabled(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = False
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -81,6 +79,7 @@ def test_uuid_disabled_email_as_login_disabled(self):
     def test_uuid_disabled_email_as_login_enabled_no_full_name(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -101,6 +100,7 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name(self):
     def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -120,6 +120,7 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):
     def test_uuid_disabled_email_as_login_enabled_has_full_name(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -141,6 +142,7 @@ def test_uuid_disabled_email_as_login_enabled_has_full_name(self):
     def test_uuid_enabled_email_as_login_disabled(self):
         self.security_settings.use_uuid_as_userid = True
         self.security_settings.use_email_as_login = False
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -164,6 +166,7 @@ def test_uuid_enabled_email_as_login_disabled(self):
     def test_uuid_enabled_email_as_login_enabled(self):
         self.security_settings.use_uuid_as_userid = True
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T19:44:14+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/c096113461c81e064ccfbc98eef83410b0b2faed

factored out mailhost mocking to reuse in doctests

Files changed:
M plone/app/users/tests/base.py
M plone/app/users/tests/duplicate_email.rst
M plone/app/users/tests/registration_forms.rst

diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index e7d4779..e7f8e9c 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -35,30 +35,16 @@ class BaseTestCase(PloneTestCase):
 
     def afterSetUp(self):
         self.portal.acl_users._doAddUser('admin', 'secret', ['Manager'], [])
-
-        self.portal._original_MailHost = self.portal.MailHost
-        self.portal.MailHost = mailhost = MockMailHost('MailHost')
+        set_mock_mailhost(self.portal)
         self.membership = self.portal.portal_membership
         self.security_settings = get_security_settings()
-        sm = getSiteManager(context=self.portal)
-        sm.unregisterUtility(provided=IMailHost)
-        sm.registerUtility(mailhost, provided=IMailHost)
 
-        self.browser = Browser(self.layer['app'])
-        self.membership = self.portal.portal_membership
+        self.browser = Browser(self.layer['app']) 
         self.request = self.layer['request']
 
-
     def beforeTearDown(self):
         self.login('admin')
-        self.portal.MailHost = self.portal._original_MailHost
-        sm = getSiteManager(context=self.portal)
-        sm.unregisterUtility(provided=IMailHost)
-        sm.registerUtility(
-            aq_base(self.portal._original_MailHost),
-            provided=IMailHost
-        )
-
+        unset_mock_mailhost(self.portal)
         pas_instance = self.portal.acl_users
         plugin = getattr(pas_instance, 'test', None)
         if plugin is not None:
@@ -137,3 +123,17 @@ def addParrotPasswordPolicy(portal):
 def get_security_settings():
     registry = getUtility(IRegistry)
     return registry.forInterface(ISecuritySchema, prefix="plone")
+
+def set_mock_mailhost(portal):
+    portal._original_MailHost = portal.MailHost
+    portal.MailHost = mailhost = MockMailHost('MailHost')
+    sm = getSiteManager(context=portal)
+    sm.unregisterUtility(provided=IMailHost)
+    sm.registerUtility(mailhost, provided=IMailHost)
+
+def unset_mock_mailhost(portal):
+    portal.MailHost = portal._original_MailHost
+    sm = getSiteManager(context=portal)
+    sm.unregisterUtility(provided=IMailHost)
+    sm.registerUtility(aq_base(portal._original_MailHost), provided=IMailHost)
+
diff --git a/plone/app/users/tests/duplicate_email.rst b/plone/app/users/tests/duplicate_email.rst
index 3a50ddd..da997ad 100644
--- a/plone/app/users/tests/duplicate_email.rst
+++ b/plone/app/users/tests/duplicate_email.rst
@@ -106,6 +106,7 @@ Login as user two:
 
 Should be able to access the user data panel:
 
+    >>> browser = Browser(app)
     >>> browser.open('http://nohost/plone/@@personal-information')
     >>> 'Login Name' in browser.contents
     False
diff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst
index a4cab81..316ef1d 100644
--- a/plone/app/users/tests/registration_forms.rst
+++ b/plone/app/users/tests/registration_forms.rst
@@ -1,27 +1,63 @@
 Testing the flexible user registration
 ======================================
 
-Set up
-======
-
-    >>> from plone.app.testing import TEST_USER_NAME
+    >>> portal = layer['portal']
     >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
+    >>> browser.open('http://nohost/plone')
+    >>> list_widget_suffix = ':list'
 
-    >>> app = layer['app']
-    >>> portal = layer['portal']
-    >>> membership = portal.portal_membership
+    Self-registration is disabled, user does not see 'Register' link.
+    >>> 'Register' in browser.contents
+    False
 
-    >>> browser = Browser(app)
+    Enable self-registration
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = 'admin'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/@@security-controlpanel')
+    >>> browser.getControl('Enable self-registration').selected = True
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
+    True
 
-    Fake that mailhost is set up properly:
+    >>> browser.getLink(url='http://nohost/plone/logout').click()
+    >>> 'Log in' in browser.contents
+    True
+
+    Logged out user should now see the register link.
+    >>> 'Register' in browser.contents
+    True
+
+    >>> browser.getLink('Register').click()
+    >>> '@@register' in browser.url
+    True
+
+    No mailhost has been set up yet. User should not be able to see the form.
+    >>> browser.contents
+    '...This site...valid email setup...cannot register at this time...'
+    >>> 'User Name' in browser.contents
+    False
+
+    Check that the form is not displayed when no mailhost is defined and users
+    cannot choose their own passwords.
+    >>> 'User Name' in browser.contents
+    False
+    >>> 'Password' in browser.contents
+    False
+    >>> 'Confirm password' in browser.contents
+    False
+
+    Set up a mailhost...
     >>> from plone.app.users.tests.base import setMailHost, unsetMailHost
+    >>> from plone.app.users.tests.base import set_mock_mailhost, unset_mock_mailhost
+    >>> set_mock_mailhost(portal)
     >>> setMailHost()
+    >>> browser.open('http://nohost/plone/@@register')
 
     The form should now be visible, sans password, since the user still cannot
     set it.
-    >>> browser = Browser(app)
-    >>> browser.open('http://nohost/plone/@@register')
-
     >>> 'User Name' in browser.contents
     True
     >>> 'Password' in browser.contents
@@ -59,7 +95,7 @@ Set up
     True
 
     Disable the mailhost and enable user ability to set their own password.
-    >>> unsetMailHost(l)
+    >>> unsetMailHost()
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'admin'
     >>> browser.getControl('Password').value = 'secret'
@@ -316,7 +352,10 @@ Set up
     True
 
     Add the default policy back in so we can test two plugins at once
+    >>> from plone.app.users.tests.base import activateDefaultPasswordPolicy
     >>> activateDefaultPasswordPolicy(portal)
+    >>> import transaction
+    >>> transaction.commit()
 
     >>> browser.getLink(url='http://nohost/plone/logout').click()
     >>> 'Log in' in browser.contents
@@ -364,3 +403,4 @@ Set up
     True
 
 
+    >>> unset_mock_mailhost(portal)


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T19:59:58+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/46370705fbdc76514d16ffcbe59373ad00d7d631

(re)merge duplicate_email doctest and make all tests pass

Files changed:
M plone/app/users/tests/duplicate_email.rst

diff --git a/plone/app/users/tests/duplicate_email.rst b/plone/app/users/tests/duplicate_email.rst
index da997ad..da0e362 100644
--- a/plone/app/users/tests/duplicate_email.rst
+++ b/plone/app/users/tests/duplicate_email.rst
@@ -1,125 +1,54 @@
-=============================
 Test duplicate mail addresses
 =============================
 
 When email address is used as login name, duplicates are not allowed.
 
-Use email addresses as login name.
-
-Set up
-======
+Use email addresses as login name:
 
-    >>> from plone.app.testing import SITE_OWNER_NAME
-    >>> from plone.app.testing import SITE_OWNER_PASSWORD
-    >>> from plone.testing.z2 import Browser
-
-    >>> app = layer['app']
-    >>> portal = layer['portal']
-
-    >>> user1_name = 'User one'
-    >>> user1_email = 'userone@example.com'
-    >>> user1_password = 'secret'
-
-    >>> user2_name = 'User two'
-    >>> user2_email = 'usertwo@example.com'
-    >>> user2_password = 'secret'
-
-    >>> browser = Browser(app)
     >>> from plone.app.users.tests.base import get_security_settings
     >>> security_settings = get_security_settings()
     >>> security_settings.use_email_as_login = True
-    >>> from transaction import commit
-    >>> commit()
-
-Configure security
-------------------
-
-    >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
-    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
-    >>> browser.getControl('Log in').click()
-
-    >>> browser.open('http://nohost/plone/@@security-controlpanel')
-    >>> browser.getControl('Use email address as login name ').selected = True
-    >>> browser.getControl('Save').click()
-    >>> 'Changes saved' in browser.contents
-    True
 
-Create two users
-----------------
+Create a new user one:
 
-First one:
-
-    >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
-    >>> browser.getLink('Add New User').click()
-    >>> '@@new-user' in browser.url
-    True
-
-Fill out the form.
-
-    >>> browser.getControl('Full Name').value = user1_name
-    >>> browser.getControl('E-mail').value = user1_email
-    >>> browser.getControl('Password').value = user1_password
-    >>> browser.getControl('Confirm password').value = user1_password
-    >>> browser.getControl('Register').click()
-    >>> '@@usergroup-userprefs' in browser.url
-    True
-    >>> browser.contents
-    '...User added...'
-
-The second:
-
-    >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
-    >>> browser.getLink('Add New User').click()
-    >>> '@@new-user' in browser.url
-    True
-
-Fill out the form.
-
-    >>> browser.getControl('Full Name').value = user2_name
-    >>> browser.getControl('E-mail').value = user2_email
-    >>> browser.getControl('Password').value = user2_password
-    >>> browser.getControl('Confirm password').value = user2_password
-    >>> browser.getControl('Register').click()
-    >>> '@@usergroup-userprefs' in browser.url
-    True
-    >>> browser.contents
-    '...User added...'
-
-Logout:
+    >>> portal = layer['portal']
+    >>> mtool = portal.portal_membership
+    >>> mtool.addMember('userone@example.com', 'secret', [], [])
+    >>> userone = mtool.getMemberById('userone@example.com')
+    >>> userone.setMemberProperties({'email':'userone@example.com'})
 
-    >>> browser.getLink(url='http://nohost/plone/logout').click()
+Create a new user two:
 
-Login
-=====
+    >>> mtool.addMember('usertwo@example.com', 'secret', [], [])
+    >>> usertwo = mtool.getMemberById('usertwo@example.com')
+    >>> usertwo.setMemberProperties({'email':'usertwo@example.com'})
+    >>> from transaction import commit
+    >>> commit()
 
 Login as user two:
 
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/')
     >>> browser.getLink('Log in').click()
 
-    >>> browser.getControl('Login Name').value = user2_email
-    >>> browser.getControl('Password').value = user2_password
+    >>> browser.getControl('Login Name').value = 'usertwo@example.com'
+    >>> browser.getControl('Password').value = 'secret'
     >>> browser.getControl('Log in').click()
     >>> 'Login failed' in browser.contents
     False
 
-Should be able to access the user data panel:
+Now we should be able to access the user data panel:
 
-    >>> browser = Browser(app)
     >>> browser.open('http://nohost/plone/@@personal-information')
     >>> 'Login Name' in browser.contents
     False
     >>> browser.url.endswith('@@personal-information')
     True
 
-Change e-mail
-=============
-
 Setting the e-mail address to an existing one should give an error message:
 
-    >>> browser.handleErrors = False
-    >>> browser.getControl('E-mail').value = user1_email
+    >>> browser.getControl('E-mail').value = 'userone@example.com'
     >>> browser.getControl('Save').click()
     >>> 'The email address you selected is already in use' in browser.contents
     True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T20:22:46+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/a1c8c73f6f4fd5cb24db39da2bc34d9daaa6d4b8

removed unused imports

Files changed:
M plone/app/users/testing.py
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_userid_generator.py

diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index a8c74a8..d490944 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -1,11 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.tests.utils import MockMailHost
-from Products.MailHost.interfaces import IMailHost
 from plone.app.testing.bbb import PTC_FIXTURE
 from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.layers import FunctionalTesting
-from zope.component import getSiteManager
-from zope.configuration import xmlconfig
 
 import doctest
 
@@ -17,14 +13,6 @@ def setUpZope(self, app, configurationContext):
         import plone.app.users
         self.loadZCML(package=plone.app.users)
 
-#    def setUpPloneSite(self, portal):
-#        # Configure mock mail host
-#        mail_host = portal.MailHost = MockMailHost('MailHost')
-#        site_manager = getSiteManager(portal)
-#        site_manager.unregisterUtility(provided=IMailHost)
-#        site_manager.registerUtility(mail_host, IMailHost)
-
-
 PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()
 PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_USERS_FIXTURE, ),
diff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py
index 78ff847..792d600 100644
--- a/plone/app/users/tests/__init__.py
+++ b/plone/app/users/tests/__init__.py
@@ -1,3 +1 @@
-# -*- coding: utf-8 -*-
-# Other packages may find this useful
-#from plone.app.users.tests.base import BaseTestCase
+#
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index e7f8e9c..8558ef5 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -7,7 +7,6 @@
 """
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
-from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.tests.utils import MockMailHost
@@ -19,7 +18,6 @@
 from Products.PluggableAuthService.utils import classImplements
 from plone.registry.interfaces import IRegistry
 from OFS.Cache import Cacheable
-from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
 from zope.component import getUtility
 
diff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py
index 297a1c9..9634d0a 100644
--- a/plone/app/users/tests/test_account.py
+++ b/plone/app/users/tests/test_account.py
@@ -2,8 +2,6 @@
 from plone.app.users.browser.account import AccountPanelSchemaAdapter
 from plone.app.users.tests.base import BaseTestCase
 
-import unittest
-
 
 class DummyPortalMembership(object):
 
diff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py
index 9ea7728..09d292e 100644
--- a/plone/app/users/tests/test_loginname_generator.py
+++ b/plone/app/users/tests/test_loginname_generator.py
@@ -1,24 +1,13 @@
 # -*- coding: utf-8 -*-
 # Note: test setup somehow fails when only tests from this file are run.
-from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.browser.interfaces import ILoginNameGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
 from plone.app.users.tests.base import BaseTestCase
-from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
-from zope.component import getUtility
-
-import unittest
 
 
 class TestGenerateLoginName(BaseTestCase):
 
-    def afterSetUp(self):
-        super(TestGenerateLoginName, self).afterSetUp()
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
-
     def test_custom_generator(self):
         """Test if a custom login name generator overrides the default
         behavior.
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index 639e89f..298755f 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -1,19 +1,9 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import setRoles
-from plone.testing.z2 import Browser
 from plone.app.users.tests.base import BaseTestCase
-from hashlib import sha1 as sha
 from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import ISecuritySchema
-from plone.app.users.tests.base import BaseTestCase
 from plone.app.users.utils import uuid_userid_generator
-from plone.protect import authenticator as auth
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 
 import transaction
-import unittest
 
 
 class TestNewUser(BaseTestCase):
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index 3cfa469..a7fa4c1 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -9,8 +9,6 @@
 from zope.component import getSiteManager
 from zope.component import getUtility
 
-import unittest
-
 
 class TestGenerateUserId(BaseTestCase):
 


Repository: plone.app.users
Branch: refs/heads/master
Date: 2014-12-26T20:23:42+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/1d061f07866d7a4e4ad7bf064fa7aad3b5dca9fc

removed unneeded code

Files changed:
M plone/app/users/tests/test_userid_generator.py

diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index a7fa4c1..ab1d267 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -12,12 +12,6 @@
 
 class TestGenerateUserId(BaseTestCase):
 
-    def afterSetUp(self):
-        super(TestGenerateUserId, self).afterSetUp()
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
-
     def test_custom_generator(self):
         """Test if a custom user id generator overrides the default
         behavior.


Repository: plone.app.users
Branch: refs/heads/master
Date: 2015-01-22T19:23:03+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/7fa61412ff95ff2e7db00f0a9f633b4692c43a5d

Merge remote-tracking branch 'origin/master' into plone-app-testing

Conflicts:
	CHANGES.rst

Files changed:
M CHANGES.rst
M plone/app/users/browser/account-configlet.pt
M plone/app/users/browser/account-panel.pt
M plone/app/users/browser/account.py
M plone/app/users/browser/memberregistration.pt
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/userdatapanel.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 688ef17..ac65a8a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -7,6 +7,9 @@ CHANGES
 - Ported tests to plone.app.testing
   [gforcada, tomgross]
 
+- Adjust navigation markup for Plone 5.
+  [davisagli]
+
 - Use email_from_address from registry (Plone 5) in tests.
   [khink]
 
diff --git a/plone/app/users/browser/account-configlet.pt b/plone/app/users/browser/account-configlet.pt
index f03df64..bd8b243 100644
--- a/plone/app/users/browser/account-configlet.pt
+++ b/plone/app/users/browser/account-configlet.pt
@@ -6,41 +6,9 @@
       metal:use-macro="here/prefs_main_template/macros/master"
       i18n:domain="plone">
 
-<body>
-
 <div metal:fill-slot="prefs_configlet_content">
 
-    <div id="edit-bar"
-         tal:define="view_name view/__name__;
-                     userquery python:view.makeQuery()">
-        <ul class="contentViews" id="content-views">
-          <li tal:define="selected python:view_name=='user-information'"
-              tal:attributes="class python:selected and 'selected' or 'plain'">
-            <a href=""
-               tal:attributes="href string:$portal_url/@@user-information${userquery}"
-               i18n:translate="title_personal_information_form">Personal Information</a>
-          </li>
-          <li tal:define="selected python:view_name=='user-preferences'"
-              tal:attributes="class python:selected and 'selected' or 'plain'">
-            <a href=""
-               tal:attributes="href string:$portal_url/@@user-preferences${userquery}"
-               i18n:translate="">Personal Preferences</a>
-          </li>
-
-          <li>
-            <a href=""
-               tal:attributes="href string:$portal_url/@@usergroup-usermembership${userquery}"
-               i18n:translate="label_group_memberships">Group Memberships</a>
-          </li>
-        </ul>
-        <div class="contentActions">&nbsp;</div>
-    </div>
-
-    <article id="content">
-
-    <div metal:use-macro="context/global_statusmessage/macros/portal_message">
-      Portal status message
-    </div>
+  <article id="content">
 
     <a
        href=""
@@ -52,13 +20,32 @@
 
     <h1 class="documentFirstHeading" tal:content="view/label | nothing" />
 
+    <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+      Portal status message
+    </div>
+
     <div id="content-core">
-      <metal:block use-macro="context/@@ploneform-macros/titlelessform">
-      </metal:block>
+      <div class="autotabs">
+        <nav class="autotoc-nav"
+             tal:define="view_name view/__name__;
+                         userquery python:view.makeQuery()">
+          <a href="${portal_url}/@@user-information${userquery}"
+             tal:define="selected python:view_name=='user-information'"
+             tal:attributes="class python:'autotoc-level-1' + (' active' if selected else '')"
+             i18n:translate="title_personal_information_form">Personal Information</a>
+          <a href="${portal_url}/@@user-preferences${userquery}"
+             tal:define="selected python:view_name=='user-preferences'"
+             tal:attributes="class python:'autotoc-level-1' + (' active' if selected else '')"
+             i18n:translate="">Personal Preferences</a>
+          <a href="${portal_url}/@@usergroup-usermembership${userquery}"
+             i18n:translate="label_group_memberships">Group Memberships</a>
+        </nav>
+        <metal:b use-macro="context/@@ploneform-macros/titlelessform" />
+      </div>
     </div>
 
-    </article>
+  </article>
 
 </div>
-</body>
+
 </html>
diff --git a/plone/app/users/browser/account-panel.pt b/plone/app/users/browser/account-panel.pt
index 45a5043..092fa08 100644
--- a/plone/app/users/browser/account-panel.pt
+++ b/plone/app/users/browser/account-panel.pt
@@ -5,46 +5,25 @@
       i18n:domain="plone"
       metal:use-macro="context/main_template/macros/master">
 
-    <metal:block fill-slot="content">
-
-        <div tal:define="view_actions view/prepareObjectTabs;"
-             id="edit-bar">
-        <h5 class="hiddenStructure"
-            tal:condition="view_actions"
-            i18n:translate="heading_views">Views</h5>
-
-        <ul class="contentViews"
-            id="content-views"
-            i18n:domain="plone">
-
-            <tal:views repeat="action view_actions">
-              <li tal:define="selected action/selected|nothing;"
-                  tal:attributes="id string:contentview-${action/id};
-                                  class python:selected and 'selected' or 'plain'">
-                <a href=""
-                   tal:content="action/title"
-                   tal:attributes="href action/url;"
-                   i18n:translate="">
-                View name
-                </a>
-              </li>
-            </tal:views>
-
-        </ul>
-        </div>
-
-        <div metal:use-macro="context/global_statusmessage/macros/portal_message">
-            Portal status message
-        </div>
-
-        <article id="content">
-            <h1 class="documentFirstHeading" tal:content="view/label | nothing" />
-            <div id="content-core">
-                <metal:block use-macro="context/@@ploneform-macros/titlelessform">
-                </metal:block>
-            </div>
-        </article>
-
-    </metal:block>
+  <metal:b fill-slot="content-title">
+    <h1 class="documentFirstHeading">${view/label}</h1>
+  </metal:b>
+
+  <metal:b fill-slot="content-core">
+    <div class="autotabs">
+      <nav class="autotoc-nav"
+           tal:define="view_actions view/prepareObjectTabs;">
+        <tal:views repeat="action view_actions">
+          <a id="contentview-${action/id}"
+             href="${action/url}"
+             tal:define="selected action/selected|nothing;"
+             tal:attributes="class python:'autotoc-level-1' + (' active' if selected else '')"
+             i18n:translate="">${action/title}</a>
+        </tal:views>
+      </nav>
+
+      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />
+    </div>
+  </metal:b>
 
 </html>
diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py
index 4fc7343..a5da91e 100644
--- a/plone/app/users/browser/account.py
+++ b/plone/app/users/browser/account.py
@@ -16,6 +16,7 @@
 from plone.registry.interfaces import IRegistry
 from z3c.form import button
 from z3c.form import form
+from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import getMultiAdapter
 from zope.component import getUtility
 from zope.event import notify
@@ -92,6 +93,17 @@ class AccountPanelForm(AutoExtensibleForm, form.Form):
     successMessage = _("Changes saved.")
     noChangesMessage = _("No changes made.")
 
+    @lazy_property
+    def member(self):
+        mtool = getToolByName(self.context, 'portal_membership')
+        if self.request.get('userid'):
+            return mtool.getMemberById(self.request.get('userid'))
+        return mtool.getAuthenticatedMember()
+
+    @property
+    def label(self):
+        return self.member.getProperty('fullname') or self.member.getUserName()
+
     def _differentEmail(self, email):
         """Check if the submitted form email address differs from the existing
         one.
diff --git a/plone/app/users/browser/memberregistration.pt b/plone/app/users/browser/memberregistration.pt
index df1fd12..d0d517b 100644
--- a/plone/app/users/browser/memberregistration.pt
+++ b/plone/app/users/browser/memberregistration.pt
@@ -10,48 +10,34 @@
 
 <metal:main fill-slot="prefs_configlet_content">
 
-      <div id="edit-bar">
-          <ul class="contentViews" id="content-views">
-            <li>
-              <a href=""
-                 tal:attributes="href string:$portal_url/@@usergroup-userprefs"
-                 i18n:translate="label_users">Users</a>
-            </li>
-            <li>
-              <a href=""
-                 tal:attributes="href string:$portal_url/@@usergroup-groupprefs"
-                 i18n:translate="label_groups">Groups</a>
-            </li>
-            <li>
-              <a href=""
-                 tal:attributes="href string:$portal_url/@@usergroup-controlpanel"
-                 i18n:translate="label_usergroup_settings">Settings</a>
-            </li>
-            <li class="selected">
-              <a href=""
-                 tal:attributes="href string:$portal_url/@@member-registration"
-                 i18n:translate="label_member_registration">Member Registration</a>
-            </li>
-          </ul>
-          <div class="contentActions">
-            &nbsp;
-          </div>
-      </div>
+  <article id="content">
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_usergroup_settings">User/Groups Settings</h1>
 
-      <div metal:use-macro="context/global_statusmessage/macros/portal_message">
-        Portal status message
-      </div>
+    <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+      Portal status message
+    </div>
 
-      <article id="content">
+    <div class="autotabs">
+      <div class="autotoc-nav">
+        <a class="autotoc-level-1"
+           href="${portal_url}/@@usergroup-userprefs"
+           i18n:translate="label_users">Users</a>
+        <a class="autotoc-level-1"
+           href="${portal_url}/@@usergroup-groupprefs"
+           i18n:translate="label_groups">Groups</a>
+        <a class="autotoc-level-1"
+           href="${portal_url}/@@usergroup-controlpanel"
+           i18n:translate="label_usergroup_settings">Settings</a>
+        <a class="autotoc-level-1 active"
+           href="${portal_url}/@@member-registration"
+           i18n:translate="label_member_registration">Member Registration</a>
+      </div>
 
-          <h1 class="documentFirstHeading"
-              i18n:translate="heading_usergroup_settings">User/Groups Settings</h1>
+      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />
+    </div>
+  </article>
 
-          <div id="content-core">
-                <metal:block use-macro="context/@@ploneform-macros/titlelessform">
-                </metal:block>
-          </div>
-      </article>
 </metal:main>
 </body>
 </html>
diff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py
index d37007d..8a3056d 100644
--- a/plone/app/users/browser/passwordpanel.py
+++ b/plone/app/users/browser/passwordpanel.py
@@ -56,7 +56,6 @@ def get_dummy(self):
 class PasswordPanel(AccountPanelForm):
     """Implementation of password reset form that uses z3c.form."""
 
-    label = _(u'listingheader_reset_password', default=u'Reset Password')
     description = _(u"Change Password")
     form_name = _(u'legend_password_details', default=u'Password Details')
     schema = IPasswordSchema
diff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py
index 1a9f2d1..f98c2f5 100644
--- a/plone/app/users/browser/personalpreferences.py
+++ b/plone/app/users/browser/personalpreferences.py
@@ -96,7 +96,6 @@ class PersonalPreferencesPanelAdapter(AccountPanelSchemaAdapter):
 class PersonalPreferencesPanel(AccountPanelForm):
     """Implementation of personalize form that uses z3c.form."""
 
-    label = _(u"heading_my_preferences", default=u"Personal Preferences")
     form_name = _(u'legend_personal_details', u'Personal Details')
     schema = IPersonalPreferences
 
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index 675d25f..ea7ca00 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -63,8 +63,6 @@ def set_email(self, value):
 
 class UserDataPanel(AccountPanelForm):
 
-    label = _(u'title_personal_information_form',
-              default=u'Personal Information')
     form_name = _(u'User Data Form')
     schema = IUserDataSchema
     enableCSRFProtection = True


Repository: plone.app.users
Branch: refs/heads/master
Date: 2015-01-23T10:17:08+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.users/commit/8fab3aa56b96d7696bdc077693b46bd2fac3d4ba

Merge pull request #29 from plone/plone-app-testing

Ported tests to plone.app.testing

Files changed:
A plone/app/users/testing.py
M CHANGES.rst
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/duplicate_email.rst
M plone/app/users/tests/email_login.rst
M plone/app/users/tests/flexible_user_registration.rst
M plone/app/users/tests/forms_navigationroot.rst
M plone/app/users/tests/member_search.rst
M plone/app/users/tests/password.rst
M plone/app/users/tests/personal_preferences.rst
M plone/app/users/tests/personal_preferences_prefs_user_details.rst
M plone/app/users/tests/plugins.rst
M plone/app/users/tests/registration_forms.rst
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/tests/userdata.rst
M plone/app/users/tests/userdata_prefs_user_details.rst
M plone/app/users/vocabularies.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bd0a9d7..ac65a8a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,13 +4,15 @@ CHANGES
 2.2 (unreleased)
 ----------------
 
+- Ported tests to plone.app.testing
+  [gforcada, tomgross]
+
 - Adjust navigation markup for Plone 5.
   [davisagli]
 
 - Use email_from_address from registry (Plone 5) in tests.
   [khink]
 
-
 2.1.0 (2014-10-23)
 ------------------
 
diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
new file mode 100644
index 0000000..d490944
--- /dev/null
+++ b/plone/app/users/testing.py
@@ -0,0 +1,22 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing.bbb import PTC_FIXTURE
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import FunctionalTesting
+
+import doctest
+
+
+class PloneAppUsersLayer(PloneSandboxLayer):
+    defaultBases = (PTC_FIXTURE, )
+
+    def setUpZope(self, app, configurationContext):
+        import plone.app.users
+        self.loadZCML(package=plone.app.users)
+
+PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()
+PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_APP_USERS_FIXTURE, ),
+    name='PloneAppUsersLayer:Functional')
+
+
+optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE)
diff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py
index a673c62..792d600 100644
--- a/plone/app/users/tests/__init__.py
+++ b/plone/app/users/tests/__init__.py
@@ -1,3 +1 @@
-# -*- coding: utf-8 -*-
-# Other packages may find this useful
-from plone.app.users.tests.base import BaseTestCase
+#
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index 607d5b6..8558ef5 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -7,80 +7,43 @@
 """
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
-from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-from Products.PloneTestCase.PloneTestCase import FunctionalTestCase
+from plone.app.testing.bbb import PloneTestCase
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PluggableAuthService.utils import classImplements
 from plone.registry.interfaces import IRegistry
 from OFS.Cache import Cacheable
-from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
 from zope.component import getUtility
 
-# BBB Zope 2.12
-try:
-    from Testing.testbrowser import Browser
-except ImportError:
-    from Products.Five.testbrowser import Browser
+from plone.testing.z2 import Browser
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from transaction import commit
+
 
+class BaseTestCase(PloneTestCase):
+    """ base test case which adds amin user """
 
-class BaseTestCase(FunctionalTestCase):
-    """base test case which adds amin user"""
+    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING
 
     def afterSetUp(self):
-        super(BaseTestCase, self).afterSetUp()
-        self.browser = Browser()
         self.portal.acl_users._doAddUser('admin', 'secret', ['Manager'], [])
-
-        self.portal._original_MailHost = self.portal.MailHost
-        self.portal.MailHost = mailhost = MockMailHost('MailHost')
+        set_mock_mailhost(self.portal)
         self.membership = self.portal.portal_membership
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
-        sm = getSiteManager(context=self.portal)
-        sm.unregisterUtility(provided=IMailHost)
-        sm.registerUtility(mailhost, provided=IMailHost)
-
-    def addParrotPasswordPolicy(self):
-        # remove default policy
-        uf = self.portal.acl_users
-        for policy in uf.objectIds(['Default Plone Password Policy']):
-            uf.plugins.deactivatePlugin(IValidationPlugin, policy)
-
-        obj = DeadParrotPassword('test')
-        uf._setObject(obj.getId(), obj)
-        obj = uf[obj.getId()]
-        activatePluginInterfaces(self.portal, obj.getId())
-
-        portal = getUtility(ISiteRoot)
-        pas_instance = portal.acl_users
-        plugins = pas_instance._getOb('plugins')
-        validators = plugins.listPlugins(IValidationPlugin)
-        assert validators
-
-    def activateDefaultPasswordPolicy(self):
-        uf = self.portal.acl_users
-        for policy in uf.objectIds(['Default Plone Password Policy']):
-            activatePluginInterfaces(self.portal, policy)
+        self.security_settings = get_security_settings()
+
+        self.browser = Browser(self.layer['app']) 
+        self.request = self.layer['request']
 
     def beforeTearDown(self):
-        self.portal.MailHost = self.portal._original_MailHost
-        sm = getSiteManager(context=self.portal)
-        sm.unregisterUtility(provided=IMailHost)
-        sm.registerUtility(
-            aq_base(self.portal._original_MailHost),
-            provided=IMailHost
-        )
-
-        portal = getUtility(ISiteRoot)
-        pas_instance = portal.acl_users
+        self.login('admin')
+        unset_mock_mailhost(self.portal)
+        pas_instance = self.portal.acl_users
         plugin = getattr(pas_instance, 'test', None)
         if plugin is not None:
             plugins = pas_instance._getOb('plugins')
@@ -88,21 +51,8 @@ def beforeTearDown(self):
             # plugins.deactivatePlugin(IPropertiesPlugin, 'test')
             pas_instance.manage_delObjects('test')
 
-    def setMailHost(self):
-        registry = getUtility(IRegistry)
-        mail_settings = registry.forInterface(IMailSchema, prefix='plone')
-        mail_settings.smtp_host = u'localhost'
-        mail_settings.email_from_address = 'admin@foo.com'
-
-    def unsetMailHost(self):
-        registry = getUtility(IRegistry)
-        mail_settings = registry.forInterface(IMailSchema, prefix='plone')
-        mail_settings.smtp_host = u''
-        mail_settings.email_from_address = ''
-
     def test_nothing(self):
-        """Add a dummy test here, so the base class 'passes'."""
-        pass
+        """ Add a dummy test here, so the base class 'passes'. """
 
 # Dummy password validation PAS plugin
 
@@ -128,4 +78,60 @@ def validateUserInfo(self, user, set_id, set_info):
         return errors
 
 
+# Helper methods used in doctests
+
+def setMailHost():
+    registry = getUtility(IRegistry)
+    mail_settings = registry.forInterface(IMailSchema, prefix='plone')
+    mail_settings.smtp_host = u'localhost'
+    mail_settings.email_from_address = 'admin@foo.com'
+    commit()
+
+def unsetMailHost():
+    registry = getUtility(IRegistry)
+    mail_settings = registry.forInterface(IMailSchema, prefix='plone')
+    mail_settings.smtp_host = u''
+    mail_settings.email_from_address = ''
+    commit()
+
+def activateDefaultPasswordPolicy(portal):
+    uf = portal.acl_users
+    for policy in uf.objectIds(['Default Plone Password Policy']):
+        activatePluginInterfaces(portal, policy)
+
+def addParrotPasswordPolicy(portal):
+    # remove default policy
+    uf = portal.acl_users
+    for policy in uf.objectIds(['Default Plone Password Policy']):
+        uf.plugins.deactivatePlugin(IValidationPlugin, policy)
+
+    obj = DeadParrotPassword('test')
+    uf._setObject(obj.getId(), obj)
+    obj = uf[obj.getId()]
+    activatePluginInterfaces(portal, obj.getId())
+
+    #portal = getUtility(ISiteRoot)
+    plugins = uf._getOb('plugins')
+    validators = plugins.listPlugins(IValidationPlugin)
+    assert validators
+    commit()
+
 classImplements(DeadParrotPassword, IValidationPlugin)
+
+def get_security_settings():
+    registry = getUtility(IRegistry)
+    return registry.forInterface(ISecuritySchema, prefix="plone")
+
+def set_mock_mailhost(portal):
+    portal._original_MailHost = portal.MailHost
+    portal.MailHost = mailhost = MockMailHost('MailHost')
+    sm = getSiteManager(context=portal)
+    sm.unregisterUtility(provided=IMailHost)
+    sm.registerUtility(mailhost, provided=IMailHost)
+
+def unset_mock_mailhost(portal):
+    portal.MailHost = portal._original_MailHost
+    sm = getSiteManager(context=portal)
+    sm.unregisterUtility(provided=IMailHost)
+    sm.registerUtility(aq_base(portal._original_MailHost), provided=IMailHost)
+
diff --git a/plone/app/users/tests/duplicate_email.rst b/plone/app/users/tests/duplicate_email.rst
index 36d1e0e..da0e362 100644
--- a/plone/app/users/tests/duplicate_email.rst
+++ b/plone/app/users/tests/duplicate_email.rst
@@ -5,11 +5,14 @@ When email address is used as login name, duplicates are not allowed.
 
 Use email addresses as login name:
 
-    >>> self.security_settings.use_email_as_login = True
+    >>> from plone.app.users.tests.base import get_security_settings
+    >>> security_settings = get_security_settings()
+    >>> security_settings.use_email_as_login = True
 
 Create a new user one:
 
-    >>> mtool = self.portal.portal_membership
+    >>> portal = layer['portal']
+    >>> mtool = portal.portal_membership
     >>> mtool.addMember('userone@example.com', 'secret', [], [])
     >>> userone = mtool.getMemberById('userone@example.com')
     >>> userone.setMemberProperties({'email':'userone@example.com'})
@@ -19,31 +22,35 @@ Create a new user two:
     >>> mtool.addMember('usertwo@example.com', 'secret', [], [])
     >>> usertwo = mtool.getMemberById('usertwo@example.com')
     >>> usertwo.setMemberProperties({'email':'usertwo@example.com'})
+    >>> from transaction import commit
+    >>> commit()
 
 Login as user two:
 
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
 
-    >>> self.browser.getControl('Login Name').value = 'usertwo@example.com'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
-    >>> 'Login failed' in self.browser.contents
+    >>> browser.getControl('Login Name').value = 'usertwo@example.com'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Log in').click()
+    >>> 'Login failed' in browser.contents
     False
 
 Now we should be able to access the user data panel:
 
-    >>> self.browser.open('http://nohost/plone/@@personal-information')
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open('http://nohost/plone/@@personal-information')
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith('@@personal-information')
+    >>> browser.url.endswith('@@personal-information')
     True
 
 Setting the e-mail address to an existing one should give an error message:
 
-    >>> self.browser.getControl('E-mail').value = 'userone@example.com'
-    >>> self.browser.getControl('Save').click()
-    >>> 'The email address you selected is already in use' in self.browser.contents
+    >>> browser.getControl('E-mail').value = 'userone@example.com'
+    >>> browser.getControl('Save').click()
+    >>> 'The email address you selected is already in use' in browser.contents
     True
-    >>> 'Changes saved' in self.browser.contents
+    >>> 'Changes saved' in browser.contents
     False
diff --git a/plone/app/users/tests/email_login.rst b/plone/app/users/tests/email_login.rst
index b9cd8c8..7766ad3 100644
--- a/plone/app/users/tests/email_login.rst
+++ b/plone/app/users/tests/email_login.rst
@@ -1,18 +1,31 @@
+===================================
 Testing email address as login name
 ===================================
 
-    >>> browser = self.browser
-    >>> browser.open('http://nohost/plone')
+Set up
+======
+
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
 
-    Set up a mailhost...
-    >>> self.setMailHost()
+Browsers
+--------
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+Configure security
+------------------
 
-    Configure the security.
-    >>> from Products.PloneTestCase.PloneTestCase import portal_owner, default_password
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
+
     >>> browser.open('http://nohost/plone/@@security-controlpanel')
     >>> browser.getControl('Enable self-registration').selected = True
     >>> browser.getControl('Let users select their own passwords').selected = True
@@ -20,24 +33,32 @@ Testing email address as login name
     >>> browser.getControl('Save').click()
     >>> 'Changes saved' in browser.contents
     True
+
     >>> browser.getLink(url='http://nohost/plone/logout').click()
     >>> 'Log in' in browser.contents
     True
 
-    Logged out user should now see the register link.
+Visitors can register
+=====================
+
+Logged out user should now see the register link.
+
     >>> 'Register' in browser.contents
     True
-    >>> browser.open('http://nohost/plone/@@register')
 
-    The form should now be visible, without the user name field.
+The form should now be visible, without the user name field.
+
+    >>> browser.open('http://nohost/plone/@@register')
     >>> 'User Name' in browser.contents
     False
 
-    The form should be using CSRF protection
-    >>> self.browser.getControl(name='_authenticator')
+The form should be using CSRF protection.
+
+    >>> browser.getControl(name='_authenticator')
     <Control name='_authenticator' type='hidden'>
 
-    Fill out the form, using an odd email address that should not give problems.
+Fill out the form, using an odd email address that should not give problems.
+
     >>> browser.getControl('Full Name').value = 'Bob Jones'
     >>> browser.getControl('E-mail').value = 'bob-jones+test@example.com'
     >>> browser.getControl('Password').value = 'secret'
@@ -62,31 +83,39 @@ Testing email address as login name
 
     We login as manager.
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
-    The user id is now bob-jones, based on the full name:
+The user id is now bob-jones, based on the full name:
+
     >>> browser.open('http://nohost/plone/@@user-information?userid=bob-jones')
     >>> 'Bob Jones' in browser.contents
     True
 
-    Great! The user-facing form works. Let's try the manager's version...
+Manager adds a new member
+=========================
+
+Great! The user-facing form works. Let's try the manager's version...
+
     >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
     >>> browser.getLink('Add New User').click()
     >>> '@@new-user' in browser.url
     True
 
-    The form should be using CSRF protection
-    >>> self.browser.getControl(name='_authenticator', index=0)
+The form should be using CSRF protection.
+
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
-    Check that user name is not displayed.
+Check that user name is not displayed.
+
     >>> 'User Name' in browser.contents
     False
 
-    Fill out the form.  We use the same full name as before, to test
-    that we get a different user id.
+Fill out the form.
+Use the same full name as before, to test that we get a different user id.
+
     >>> browser.getControl('Full Name').value = 'Bob Jones'
     >>> browser.getControl('E-mail').value = 'bob-jones+test2@example.com'
     >>> browser.getControl('Password').value = 'secret'
@@ -97,7 +126,8 @@ Testing email address as login name
     >>> browser.contents
     '...User added...bob-jones-1...'
 
-    We can really get the new user.
+We can really get the new user.
+
     >>> browser.getControl('Show all').click()
     >>> browser.getLink(url='bob-jones-1').click()
     >>> '@@user-information?userid=bob-jones-1' in browser.url
diff --git a/plone/app/users/tests/flexible_user_registration.rst b/plone/app/users/tests/flexible_user_registration.rst
index c015cd1..ae58d4a 100644
--- a/plone/app/users/tests/flexible_user_registration.rst
+++ b/plone/app/users/tests/flexible_user_registration.rst
@@ -1,7 +1,13 @@
+======================================
 Testing the flexible user registration
 ======================================
 
-    >>> browser = self.browser
+    >>> from plone.testing.z2 import Browser
+    >>> import transaction
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
     >>> from zope.component import getUtility
     >>> from plone.keyring.interfaces import IKeyManager
     >>> import hmac
@@ -51,12 +57,13 @@ Check that the site admin has a link to the configlet in the control panel.
     >>> 'home_page' in user_registration_fields.displayOptions
     False
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 Let's add home_page to the list of registration form fields.
 (Setting this by hand since add/remove widget doesn't work properly without javascript)
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['fullname', 'username', 'email', 'password', 'home_page'])
+    >>> transaction.commit()
 
 It should show up at the end of the form.
     >>> browser.open('http://nohost/plone/@@register')
@@ -85,6 +92,7 @@ Log out. Assert that we now have the home_page in the join form.
 Rearrange the fields
 (Setting this by hand since add/remove widget doesn't work properly without javascript)
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['fullname', 'username', 'password', 'home_page', 'email'])
+    >>> transaction.commit()
     >>> browser.open('http://nohost/plone/@@register')
     >>> browser.contents
     '...Home page...E-mail...'
@@ -125,8 +133,11 @@ get all required fields on registration form.
 
 Check render register form in 'Use Email As Login' mode.
 
-    >>> self.security_settings.use_email_as_login = True
+    >>> from plone.app.users.tests.base import get_security_settings
+    >>> security_settings = get_security_settings()
+    >>> security_settings.use_email_as_login = True
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username'])
+    >>> transaction.commit()
     >>> browser.open('http://nohost/plone/@@register')
     >>> 'Registration form' in browser.contents
     True
@@ -139,11 +150,13 @@ Check render register form in 'Use Email As Login' mode.
 
 Revert email mode.
 
-    >>> self.security_settings.use_email_as_login = False
+    >>> security_settings.use_email_as_login = False
 
 Check register form with portrait field.
 
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['portrait'])
+    >>> transaction.commit()
+
     >>> browser.open('http://nohost/plone/@@register')
     >>> 'Registration form' in browser.contents
     True
@@ -164,6 +177,8 @@ Check more validation errors. Test Confirmation Password and invalid
 email, and reserved user name validations:
 
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username', 'email', 'password', 'mail_me'])
+    >>> transaction.commit()
+
     >>> browser.open('http://nohost/plone/@@register')
     >>> 'Registration form' in browser.contents
     True
@@ -195,6 +210,7 @@ supported by our test browser.
 Set list of registration fields:
 
     >>> portal.portal_properties.site_properties._updateProperty('user_registration_fields', ['username', 'email'])
+    >>> transaction.commit()
 
 Login as admin.
 
diff --git a/plone/app/users/tests/forms_navigationroot.rst b/plone/app/users/tests/forms_navigationroot.rst
index a3dacb7..03dbbcc 100644
--- a/plone/app/users/tests/forms_navigationroot.rst
+++ b/plone/app/users/tests/forms_navigationroot.rst
@@ -1,60 +1,78 @@
+==================================================
 Test form links against different navigation roots
---------------------------------------------------
+==================================================
 
 Links that are present within each of the forms should adhere to
 the current navigation root for the site.
 
+Set up
+======
+
     >>> from Products.Five.utilities.marker import mark
     >>> from plone.app.layout.navigation.interfaces import INavigationRoot
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+Create a folder
+---------------
 
 We'll create the test context and have the relevant navigation root marker
 interface ready to be applied:
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.invokeFactory('Folder', id='folder_navroot', title="Navroot")
+    >>> from plone.app.testing import setRoles
+    >>> from plone.app.testing import TEST_USER_ID
+    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+    >>> portal.invokeFactory('Folder', id='folder_navroot', title="Navroot")
     'folder_navroot'
-
-
-So let's login as Plone admin:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'admin'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> from transaction import commit
+    >>> commit()
 
 Let's see if we can navigate to the user information and options forms
 in the 'Users and Groups' settings. Each of the 3 forms all use the
 same base class so if the fix works on one, it works on them all.
 
-    >>> self.browser.getLink('Navroot').click()
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Log in').click()
+
+    >>> browser.getLink('Navroot').click()
 
-    >>> self.browser.getLink('Preferences').click()
-    >>> self.browser.url
+    >>> browser.getLink('Preferences').click()
+    >>> browser.url
     'http://nohost/plone/@@personal-preferences'
 
 Check the existance and links for a standard site context (navigation root
 is the Plone site itself since the marker interface isn't applied here
 yet).
 
-    >>> self.browser.getLink('Personal Information').url
+    >>> browser.getLink('Personal Information').url
     'http://nohost/plone/@@personal-information'
-    >>> self.browser.getLink('Personal Preferences').url
+    >>> browser.getLink('Personal Preferences').url
     'http://nohost/plone/@@personal-preferences'
 
 Now, let's mark this folder and see what happens.  All links should
 now be rooted to the given folder and not the Plone site proper.
 
-    >>> mark(self.portal.folder_navroot, INavigationRoot)
+    >>> mark(portal.folder_navroot, INavigationRoot)
+    >>> commit()
 
-    >>> self.browser.getLink('Navroot').click()
+    >>> browser.getLink('Navroot').click()
 
-    >>> self.browser.getLink('Preferences').click()
-    >>> self.browser.url
+    >>> browser.getLink('Preferences').click()
+    >>> browser.url
     'http://nohost/plone/folder_navroot/@@personal-preferences'
 
-    >>> self.browser.getLink('Personal Information').url
+    >>> browser.getLink('Personal Information').url
     'http://nohost/plone/folder_navroot/@@personal-information'
-    >>> self.browser.getLink('Personal Preferences').url
+    >>> browser.getLink('Personal Preferences').url
     'http://nohost/plone/folder_navroot/@@personal-preferences'
 
 
diff --git a/plone/app/users/tests/member_search.rst b/plone/app/users/tests/member_search.rst
index 9337d9b..0bbce8c 100644
--- a/plone/app/users/tests/member_search.rst
+++ b/plone/app/users/tests/member_search.rst
@@ -1,11 +1,61 @@
+==============================
 Testing the member search form
 ==============================
 
 This is about the 'member_search' form. This test will try to use the form as
 anonymous. Then login as a Plone user, and try again.
 
+Set up
+======
+
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
     >>> view_name = '@@member-search'
-    >>> browser = self.browser
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
+Manager creates a user
+----------------------
+
+Login as manager:
+
+    >>> browser.open('http://nohost/plone/login_form')
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
+    >>> browser.getControl('Log in').click()
+
+Go to the add new user form:
+
+    >>> browser.open('http://nohost/plone/@@usergroup-userprefs')
+    >>> browser.getLink('Add New User').click()
+
+Fill out the form.
+
+    >>> browser.getControl('Full Name').value = 'Bob Jones'
+    >>> browser.getControl('User Name').value = 'bob-jones'
+    >>> browser.getControl('E-mail').value = 'bob-jones+test2@example.com'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Confirm password').value = 'secret'
+    >>> browser.getControl('Register').click()
+    >>> browser.contents
+    '...User added...bob-jones...'
+
+Logout:
+
+    >>> browser.getLink(url='http://nohost/plone/logout').click()
+    >>> 'Log in' in browser.contents
+    True
+
+Member search as anonymous
+==========================
 
 Viewing this form should be possible for anonymous users:
 
@@ -29,11 +79,14 @@ But they will not see any member of the portal.
     >>> 'You are not allowed to list portal members.' in browser.contents
     True
 
+Member search logged-in
+=======================
+
 So let's login as Plone user and try again:
 
     >>> browser.getLink('Log in').click()
-    >>> browser.getControl('Login Name').value = 'test_user_1_'
-    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 Now we should be on the member search as a logged in user:
@@ -43,12 +96,12 @@ Now we should be on the member search as a logged in user:
     >>> browser.url.endswith(view_name)
     True
 
-So let's search again. We should see two Members (admin, test_user_1_):
+So let's search again. We should see two members (test_user_1_ and bob):
 
     >>> browser.getControl(name='form.buttons.search').click()
     >>> '2 items matching your search terms.' in browser.contents
     True
     >>> '<a href="http://nohost/plone/Members/test_user_1_">'in browser.contents
     True
-    >>> '<a href="http://nohost/plone/author/admin">'in browser.contents
+    >>> '<a href="http://nohost/plone/author/bob-jones">'in browser.contents
     True
diff --git a/plone/app/users/tests/password.rst b/plone/app/users/tests/password.rst
index 109cd7f..83210ef 100644
--- a/plone/app/users/tests/password.rst
+++ b/plone/app/users/tests/password.rst
@@ -4,54 +4,70 @@ Testing the password form
 This is about the 'change_password' form. This test will try to login as a Plone
 user, change the password, logout and login with the new password.
 
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+
     >>> view_name = '@@change-password'
 
-Viewing this form should not be possible for anonymous users:
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> 'Login Name' in self.browser.contents
-    True
+The view
+========
+
+Viewing this form should not be possible for anonymous users:
 
+    >>> browser.open('http://nohost/plone/' + view_name)
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
 
 So let's login as Plone user:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 Now we should be able to access the change password form:
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
 
 Let's try to change the password:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
-    >>> self.browser.getControl('Current password').value = 'secret'
-    >>> self.browser.getControl('New password').value = 'super-secret'
-    >>> self.browser.getControl('Confirm password').value = 'super-secret'
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Password changed' in self.browser.contents
+    >>> browser.getControl('Current password').value = 'secret'
+    >>> browser.getControl('New password').value = 'super-secret'
+    >>> browser.getControl('Confirm password').value = 'super-secret'
+    >>> browser.getControl('Change Password').click()
+    >>> 'Password changed' in browser.contents
     True
 
 Okay the password has been changed, let's logout and login again with the new password.
 
-    >>> self.browser.open('http://nohost/plone/logout')
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'super-secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/logout')
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = 'super-secret'
+    >>> browser.getControl('Log in').click()
 
 If we are logged in the change password form is available
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> 'Please log in' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> 'Please log in' in browser.contents
     False
 
 
@@ -60,34 +76,35 @@ Password Validation Plugin
 
 Now let's test using a PAS Password validation plugin. Add a test plugin.
 
-    >>> self.addParrotPasswordPolicy()
+    >>> from plone.app.users.tests.base import addParrotPasswordPolicy
+    >>> addParrotPasswordPolicy(portal)
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
+    >>> browser.open('http://nohost/plone/' + view_name)
 
 Check that we are given instructions on what is a valid password
 
-   >>> print self.browser.contents
+   >>> print browser.contents
     <...
     ...Enter your new password. Must not be dead...
 
 
 Let's try to change the password with an invalid password:
 
-    >>> self.browser.getControl('Current password').value = 'super-secret'
-    >>> self.browser.getControl('New password').value = 'dead parrot'
-    >>> self.browser.getControl('Confirm password').value = 'dead parrot'
-    >>> self.browser.getControl('Change Password').click()
-    >>> print self.browser.contents
+    >>> browser.getControl('Current password').value = 'super-secret'
+    >>> browser.getControl('New password').value = 'dead parrot'
+    >>> browser.getControl('Confirm password').value = 'dead parrot'
+    >>> browser.getControl('Change Password').click()
+    >>> print browser.contents
     <...
     ...Must not be dead...
 
 Now try a valid password
 
-    >>> self.browser.getControl('Current password').value = 'super-secret'
-    >>> self.browser.getControl('New password').value = 'fish'
-    >>> self.browser.getControl('Confirm password').value = 'fish'
-    >>> self.browser.getControl('Change Password').click()
-    >>> print self.browser.contents
+    >>> browser.getControl('Current password').value = 'super-secret'
+    >>> browser.getControl('New password').value = 'fish'
+    >>> browser.getControl('Confirm password').value = 'fish'
+    >>> browser.getControl('Change Password').click()
+    >>> print browser.contents
     <...
     ...Password changed...
 
@@ -96,22 +113,22 @@ Form Validation
 
 Firstly try to post form without filling in any fields:
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> browser.getControl('Change Password').click()
+    >>> 'Required input is missing.' in browser.contents
     True
 
 Let's try to enter not valid current password:
 
-    >>> self.browser.getControl('Current password').value = 'invalid-password'
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Incorrect value for current password' in self.browser.contents
+    >>> browser.getControl('Current password').value = 'invalid-password'
+    >>> browser.getControl('Change Password').click()
+    >>> 'Incorrect value for current password' in browser.contents
     True
 
 Then post form with new password that is not equal to confirmed password:
 
-    >>> self.browser.getControl('New password').value = 'new-password'
-    >>> self.browser.getControl('Confirm password').value = 'new-password-1'
-    >>> self.browser.getControl('Change Password').click()
-    >>> 'Your password and confirmation did not match. Please try again.' in self.browser.contents
+    >>> browser.getControl('New password').value = 'new-password'
+    >>> browser.getControl('Confirm password').value = 'new-password-1'
+    >>> browser.getControl('Change Password').click()
+    >>> 'Your password and confirmation did not match. Please try again.' in browser.contents
     True
diff --git a/plone/app/users/tests/personal_preferences.rst b/plone/app/users/tests/personal_preferences.rst
index 8af1bed..db95b7b 100644
--- a/plone/app/users/tests/personal_preferences.rst
+++ b/plone/app/users/tests/personal_preferences.rst
@@ -1,6 +1,24 @@
 Testing the personal preferences form
 =====================================
 
+This is about the 'personal-preferences' view.
+
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> view_name = '@@personal-preferences'
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
     >>> empty_marker = '--NOVALUE--'
     >>> def isEmptyMarker(v):
     ...     if len(v) != 1: return False
@@ -9,71 +27,68 @@ Testing the personal preferences form
 Viewing the personal preferences
 --------------------------------
 
-This is about the 'personal-preferences' view.
-
-    >>> view_name = '@@personal-preferences'
-
 Viewing user data shouldn't be possible for anonymous users:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
-    True
+    >>> browser.open("http://nohost/plone/" + view_name)
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
 
 So let's login as Plone user:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 Now we should be able to access the user data panel:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open("http://nohost/plone/" + view_name)
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
 
 We have two controls, one for the start page and one for the language:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 Now we click the cancel button:
 
-    >>> self.browser.getControl('Cancel').click()
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.getControl('Cancel').click()
+    >>> browser.url.endswith(view_name)
     True
 
 There should be no changes at all:
 
-    >>> 'Changes canceled.' in self.browser.contents
+    >>> 'Changes canceled.' in browser.contents
     True
 
 Modifying values
 ----------------
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> self.browser.getControl('Wysiwyg editor').value = ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected = True
-    >>> self.browser.getControl('Language', index=0).value = ['en']
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> browser.getControl('Wysiwyg editor').value = ['TinyMCE']
+    >>> browser.getControl('Enable external editing').selected = True
+    >>> browser.getControl('Language', index=0).value = ['en']
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> marker = object
     >>> member.getProperty('wysiwyg_editor', object)
     'TinyMCE'
@@ -84,13 +99,13 @@ changed:
 
 And that the form still has the according values:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     False
-    >>> self.browser.getControl('Wysiwyg editor').value
+    >>> browser.getControl('Wysiwyg editor').value
     ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     True
-    >>> self.browser.getControl('Language', index=0).value
+    >>> browser.getControl('Language', index=0).value
     ['en']
 
 
@@ -99,18 +114,18 @@ Clearing values
 
 Making an input empty should result in a stored empty string.
 
-    >>> self.browser.open('http://nohost/plone/' + view_name)
-    >>> self.browser.getControl('Wysiwyg editor').value = [empty_marker]
-    >>> self.browser.getControl('Enable external editing').selected = False
-    >>> self.browser.getControl('Language', index=0).value = [empty_marker]
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.open('http://nohost/plone/' + view_name)
+    >>> browser.getControl('Wysiwyg editor').value = [empty_marker]
+    >>> browser.getControl('Enable external editing').selected = False
+    >>> browser.getControl('Language', index=0).value = [empty_marker]
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> marker = object
     >>> member.getProperty('wysiwyg_editor', object)
     ''
@@ -121,9 +136,9 @@ changed:
 
 And that the form still has the according values:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
diff --git a/plone/app/users/tests/personal_preferences_prefs_user_details.rst b/plone/app/users/tests/personal_preferences_prefs_user_details.rst
index c35701e..6171459 100644
--- a/plone/app/users/tests/personal_preferences_prefs_user_details.rst
+++ b/plone/app/users/tests/personal_preferences_prefs_user_details.rst
@@ -1,6 +1,19 @@
 Admin modifies personal preferences thru 'Users and groups'
 ---------------------------------------------------------------------
 
+Set up
+======
+
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
     >>> empty_marker = '--NOVALUE--'
     >>> def isEmptyMarker(v):
     ...     if len(v) != 1: return False
@@ -11,49 +24,49 @@ Users and Groups config page.
 
 
 So let's login as Plone admin:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'admin'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = 'admin'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Log in').click()
 
 Let's see if we can navigate to the user information form in Users and groups
-    >>> self.browser.getLink('Site Setup').click()
-    >>> self.browser.getLink('Users and Groups').click()
-    >>> self.browser.getLink('test_user_1_').click()
-    >>> self.browser.getLink('Personal Preferences').click()
-    >>> self.browser.url
+    >>> browser.getLink('Site Setup').click()
+    >>> browser.getLink('Users and Groups').click()
+    >>> browser.getLink(TEST_USER_NAME).click()
+    >>> browser.getLink('Personal Preferences').click()
+    >>> browser.url
     'http://nohost/plone/@@user-preferences?userid=test_user_1_'
 
 We have these controls in the form:
 
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 
 Modifying values
 ----------------
 
-    >>> self.browser.getControl('Wysiwyg editor').value = ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected = True
-    >>> self.browser.getControl('Language', index=0).value = ['en']
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.getControl('Wysiwyg editor').value = ['TinyMCE']
+    >>> browser.getControl('Enable external editing').selected = True
+    >>> browser.getControl('Language', index=0).value = ['en']
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> marker = object()
     >>> member.getProperty('wysiwyg_editor', marker)
     'TinyMCE'
@@ -64,14 +77,14 @@ changed:
 
 And that the form still has the according values:
 
-    >>> self.browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     False
-    >>> self.browser.getControl('Wysiwyg editor').value
+    >>> browser.getControl('Wysiwyg editor').value
     ['TinyMCE']
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     True
-    >>> self.browser.getControl('Language', index=0).value
+    >>> browser.getControl('Language', index=0).value
     ['en']
 
 
@@ -80,17 +93,17 @@ Clearing values
 
 Check that empty or False values do get stored.
 
-    >>> self.browser.getControl('Wysiwyg editor').value = [empty_marker]
-    >>> self.browser.getControl('Enable external editing').selected = False
-    >>> self.browser.getControl('Language', index=0).value = [empty_marker]
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved' in self.browser.contents
+    >>> browser.getControl('Wysiwyg editor').value = [empty_marker]
+    >>> browser.getControl('Enable external editing').selected = False
+    >>> browser.getControl('Language', index=0).value = [empty_marker]
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved' in browser.contents
     True
 
 Verify that the settings have actually been
 changed:
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById('test_user_1_')
     >>> member.getProperty('wysiwyg_editor', marker)
     ''
     >>> member.getProperty('ext_editor', marker)
@@ -100,19 +113,19 @@ changed:
 
 And that the form still has the according values:
 
-    >>> self.browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
-    >>> isEmptyMarker(self.browser.getControl('Wysiwyg editor').value)
+    >>> browser.open("http://nohost/plone/@@user-preferences?userid=test_user_1_")
+    >>> isEmptyMarker(browser.getControl('Wysiwyg editor').value)
     True
-    >>> self.browser.getControl('Enable external editing').selected
+    >>> browser.getControl('Enable external editing').selected
     False
-    >>> isEmptyMarker(self.browser.getControl('Language', index=0).value)
+    >>> isEmptyMarker(browser.getControl('Language', index=0).value)
     True
 
 Finally let's see if Cancel button still leaves us on selected user Preferences
 form::
 
-    >>> self.browser.getControl('Cancel').click()
-    >>> 'Changes canceled.' in self.browser.contents
+    >>> browser.getControl('Cancel').click()
+    >>> 'Changes canceled.' in browser.contents
     True
-    >>> '?userid=test_user_1_' in self.browser.url
+    >>> '?userid=test_user_1_' in browser.url
     True
diff --git a/plone/app/users/tests/plugins.rst b/plone/app/users/tests/plugins.rst
index 63f8b7c..2e70a69 100644
--- a/plone/app/users/tests/plugins.rst
+++ b/plone/app/users/tests/plugins.rst
@@ -68,18 +68,19 @@ To use this plugin we will need to register this class with the PAS system.
 
 And then add the plugin into acl_users.
 
-  >>>  obj = MyPasswordPolicy('pw_pol')
-  >>>  self.portal.acl_users._setObject(obj.getId(), obj)
-  >>>  obj = self.portal.acl_users[obj.getId()]
+  >>> obj = MyPasswordPolicy('pw_pol')
+  >>> portal = layer['portal']
+  >>> portal.acl_users._setObject(obj.getId(), obj)
+  >>> obj = portal.acl_users[obj.getId()]
 
 Activate it
 
-  >>>  obj.manage_activateInterfaces(['IValidationPlugin'])
+  >>> obj.manage_activateInterfaces(['IValidationPlugin'])
 
 and deactivate the default 5 char password policy
 
-  >>> for policy in self.portal.acl_users.objectIds(['Default Plone Password Policy']):
-  >>>   self.portal.acl_users.plugins.deactivatePlugin(IValidationPlugin, policy)
+  >>> for policy in portal.acl_users.objectIds(['Default Plone Password Policy']):
+  >>>   portal.acl_users.plugins.deactivatePlugin(IValidationPlugin, policy)
 
 Now our password policy is in force.
 
@@ -108,4 +109,4 @@ We'll enter an invalid password
 
 Passwords that are autogenerated for users are not validated since they will never
 be seen by the users. Users are instead sent a url via mail similar to the password
-reset url which allows them to set their own password.
\ No newline at end of file
+reset url which allows them to set their own password.
diff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst
index 9a095dc..316ef1d 100644
--- a/plone/app/users/tests/registration_forms.rst
+++ b/plone/app/users/tests/registration_forms.rst
@@ -1,7 +1,9 @@
 Testing the flexible user registration
 ======================================
 
-    >>> browser = self.browser
+    >>> portal = layer['portal']
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone')
     >>> list_widget_suffix = ':list'
 
@@ -48,7 +50,10 @@ Testing the flexible user registration
     False
 
     Set up a mailhost...
-    >>> self.setMailHost()
+    >>> from plone.app.users.tests.base import setMailHost, unsetMailHost
+    >>> from plone.app.users.tests.base import set_mock_mailhost, unset_mock_mailhost
+    >>> set_mock_mailhost(portal)
+    >>> setMailHost()
     >>> browser.open('http://nohost/plone/@@register')
 
     The form should now be visible, sans password, since the user still cannot
@@ -90,7 +95,7 @@ Testing the flexible user registration
     True
 
     Disable the mailhost and enable user ability to set their own password.
-    >>> self.unsetMailHost()
+    >>> unsetMailHost()
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'admin'
     >>> browser.getControl('Password').value = 'secret'
@@ -222,7 +227,7 @@ Testing the flexible user registration
     >>> browser.getLink('user3').click()
 
     Set up the mailhost and try again.
-    >>> self.setMailHost()
+    >>> setMailHost()
     >>> browser.open('http://nohost/plone/@@new-user')
     >>> 'Password' in browser.contents
     True
@@ -275,12 +280,13 @@ Testing the flexible user registration
 
     Now let's test using a PAS Password validation plugin. Add a test plugin.
 
-    >>> self.addParrotPasswordPolicy()
+    >>> from plone.app.users.tests.base import addParrotPasswordPolicy
+    >>> addParrotPasswordPolicy(portal)
 
     Enable setting own password
 
     Disable the mailhost and enable user ability to set their own password.
-    >>> self.unsetMailHost()
+    >>> unsetMailHost()
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'admin'
     >>> browser.getControl('Password').value = 'secret'
@@ -346,7 +352,10 @@ Testing the flexible user registration
     True
 
     Add the default policy back in so we can test two plugins at once
-    >>> self.activateDefaultPasswordPolicy()
+    >>> from plone.app.users.tests.base import activateDefaultPasswordPolicy
+    >>> activateDefaultPasswordPolicy(portal)
+    >>> import transaction
+    >>> transaction.commit()
 
     >>> browser.getLink(url='http://nohost/plone/logout').click()
     >>> 'Log in' in browser.contents
@@ -394,3 +403,4 @@ Testing the flexible user registration
     True
 
 
+    >>> unset_mock_mailhost(portal)
diff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py
index 1058e2f..9634d0a 100644
--- a/plone/app/users/tests/test_account.py
+++ b/plone/app/users/tests/test_account.py
@@ -1,9 +1,6 @@
 # -*- coding: utf-8 -*-
-from Testing.makerequest import makerequest
-from OFS.SimpleItem import SimpleItem
 from plone.app.users.browser.account import AccountPanelSchemaAdapter
-
-import unittest
+from plone.app.users.tests.base import BaseTestCase
 
 
 class DummyPortalMembership(object):
@@ -21,27 +18,24 @@ def checkPermission(self, permission, context):
         return self.allowed
 
 
-class TestAccountPanelSchemaAdapter(unittest.TestCase):
+class TestAccountPanelSchemaAdapter(BaseTestCase):
 
     def test__init__no_userid(self):
-        # should edit current user
-        context = makerequest(SimpleItem('foo'))
-        context.portal_membership = DummyPortalMembership(False)
-        adapter = AccountPanelSchemaAdapter(context)
+        """Should edit current user."""
+        self.request.portal_membership = DummyPortalMembership(False)
+        adapter = AccountPanelSchemaAdapter(self.request)
         self.assertEqual('(authenticated)', adapter.context)
 
     def test__init__userid_in_request_form_for_non_manager(self):
-        # disallow for non-privileged users
-        context = makerequest(SimpleItem('foo'))
-        context.portal_membership = DummyPortalMembership(False)
-        context.REQUEST.form['userid'] = 'bob'
-        adapter = AccountPanelSchemaAdapter(context)
+        """Disallow for non-privileged users."""
+        self.request.portal_membership = DummyPortalMembership(False)
+        self.request.REQUEST.form['userid'] = 'bob'
+        adapter = AccountPanelSchemaAdapter(self.request)
         self.assertEqual('(authenticated)', adapter.context)
 
     def test__init__userid_in_request_form_for_manager(self):
-        # should allow for privileged users
-        context = makerequest(SimpleItem('foo'))
-        context.portal_membership = DummyPortalMembership(True)
-        context.REQUEST.form['userid'] = 'bob'
-        adapter = AccountPanelSchemaAdapter(context)
+        """Should allow for privileged users."""
+        self.request.portal_membership = DummyPortalMembership(True)
+        self.request.REQUEST.form['userid'] = 'bob'
+        adapter = AccountPanelSchemaAdapter(self.request)
         self.assertEqual('bob', adapter.context)
diff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py
index 5fbcbe8..e5ad00d 100644
--- a/plone/app/users/tests/test_doctests.py
+++ b/plone/app/users/tests/test_doctests.py
@@ -1,23 +1,20 @@
 # -*- coding: utf-8 -*-
-from Products.PloneTestCase.PloneTestCase import setupPloneSite
-from Testing.ZopeTestCase import FunctionalDocFileSuite
-from plone.app.users.tests.base import BaseTestCase
-from unittest import TestSuite
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from plone.app.users.testing import optionflags
+from plone.testing import layered
 
 import doctest
+import unittest
 
 
-setupPloneSite()
-OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
-
 doc_tests = [
     'duplicate_email.rst',
     'email_login.rst',
     'flexible_user_registration.rst',
-    'forms_navigationroot.rst',
+    'forms_navigationroot.rst',  # need to ask about content types layer
     'member_search.rst',
-    'registration_forms.rst',
-    'password.rst',
+    'registration_forms.rst',  # working on it
+    'password.rst',  # for later
     'personal_preferences.rst',
     'personal_preferences_prefs_user_details.rst',
     'userdata.rst',
@@ -27,12 +24,16 @@
 
 
 def test_suite():
-    suite = TestSuite()
-    for test_file in doc_tests:
-        suite.addTest(FunctionalDocFileSuite(
-            test_file,
-            optionflags=OPTIONFLAGS,
-            package='plone.app.users.tests',
-            test_class=BaseTestCase
-        ))
+    suite = unittest.TestSuite()
+    suite.addTests([
+        layered(
+            doctest.DocFileSuite(
+                'tests/{0}'.format(test_file),
+                package='plone.app.users',
+                optionflags=optionflags
+            ),
+            layer=PLONE_APP_USERS_FUNCTIONAL_TESTING)
+        for test_file in doc_tests
+    ])
+
     return suite
diff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py
index 2884bdd..09d292e 100644
--- a/plone/app/users/tests/test_loginname_generator.py
+++ b/plone/app/users/tests/test_loginname_generator.py
@@ -1,22 +1,13 @@
 # -*- coding: utf-8 -*-
 # Note: test setup somehow fails when only tests from this file are run.
-from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.browser.interfaces import ILoginNameGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
 from plone.app.users.tests.base import BaseTestCase
-from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
-from zope.component import getUtility
 
 
 class TestGenerateLoginName(BaseTestCase):
 
-    def afterSetUp(self):
-        super(TestGenerateLoginName, self).afterSetUp()
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
-
     def test_custom_generator(self):
         """Test if a custom login name generator overrides the default
         behavior.
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index aa0f232..298755f 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -1,14 +1,9 @@
 # -*- coding: utf-8 -*-
-from hashlib import sha1 as sha
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.tests.base import BaseTestCase
+from Products.CMFCore.utils import getToolByName
 from plone.app.users.utils import uuid_userid_generator
-from plone.protect import authenticator as auth
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 
-import hmac
+import transaction
 
 
 class TestNewUser(BaseTestCase):
@@ -17,14 +12,11 @@ def test_new_user_as_site_administrator(self):
         self.portal.acl_users._doAddUser(
             'siteadmin', 'secret', ['Site Administrator'], []
         )
+        # make the user available
+        transaction.commit()
+
         self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
-        # XXX need to use auth token here because there is one case of write
-        # on read for portlets that isn't hit here...
-        ring = auth._getKeyring('siteadmin')
-        secret = ring.random()
-        token = hmac.new(secret, 'siteadmin', sha).hexdigest()
-        self.browser.open('http://nohost/plone/new-user?_authenticator=%s' % (
-            token))
+        self.browser.open('http://nohost/plone/new-user')
         self.browser.getControl('User Name').value = 'newuser'
         self.browser.getControl('E-mail').value = 'newuser@example.com'
         self.browser.getControl('Password').value = 'foobar'
@@ -50,15 +42,13 @@ def afterSetUp(self):
         self.portal.acl_users._doAddUser(
             'siteadmin', 'secret', ['Site Administrator'], []
         )
-        self.browser.handleErrors = False
+        transaction.commit() 
         self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
 
     def test_uuid_disabled_email_as_login_disabled(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = False
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -79,6 +69,7 @@ def test_uuid_disabled_email_as_login_disabled(self):
     def test_uuid_disabled_email_as_login_enabled_no_full_name(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -99,6 +90,7 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name(self):
     def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -118,6 +110,7 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):
     def test_uuid_disabled_email_as_login_enabled_has_full_name(self):
         self.security_settings.use_uuid_as_userid = False
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -139,6 +132,7 @@ def test_uuid_disabled_email_as_login_enabled_has_full_name(self):
     def test_uuid_enabled_email_as_login_disabled(self):
         self.security_settings.use_uuid_as_userid = True
         self.security_settings.use_email_as_login = False
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
@@ -162,6 +156,7 @@ def test_uuid_enabled_email_as_login_disabled(self):
     def test_uuid_enabled_email_as_login_enabled(self):
         self.security_settings.use_uuid_as_userid = True
         self.security_settings.use_email_as_login = True
+        transaction.commit()
 
         # create a user
         self.browser.open('http://nohost/plone/@@new-user')
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index a7fa4c1..ab1d267 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -12,12 +12,6 @@
 
 class TestGenerateUserId(BaseTestCase):
 
-    def afterSetUp(self):
-        super(TestGenerateUserId, self).afterSetUp()
-        registry = getUtility(IRegistry)
-        self.security_settings = registry.forInterface(
-            ISecuritySchema, prefix="plone")
-
     def test_custom_generator(self):
         """Test if a custom user id generator overrides the default
         behavior.
diff --git a/plone/app/users/tests/userdata.rst b/plone/app/users/tests/userdata.rst
index de9b40d..cd1473f 100644
--- a/plone/app/users/tests/userdata.rst
+++ b/plone/app/users/tests/userdata.rst
@@ -1,49 +1,69 @@
+=====================================
 Testing the personal information form
 =====================================
 
+Set Up
+======
+
+    >>> from plone.app.testing import TEST_USER_ID
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import TEST_USER_PASSWORD
+    >>> from plone.testing.z2 import Browser
+
+    >>> import transaction
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
 Viewing the  personal information
 ---------------------------------
 
 This is about the 'personal-information' view.
 
     >>> view_name = '@@personal-information'
+    >>> view_url = 'http://nohost/plone/{0}'.format(view_name)
 
 Viewing user data shouldn't be possible for anonymous users:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
-    True
+    >>> browser.open(view_url)
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
 
 So let's login as Plone user:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
+    >>> browser.getControl('Log in').click()
 
 Now we should be able to access the user data panel:
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.open(view_url)
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
 
 We have these controls in the form:
 
-    >>> self.browser.getControl('Full Name').value
+    >>> browser.getControl('Full Name').value
     ''
-    >>> self.browser.getControl('E-mail').value
+    >>> browser.getControl('E-mail').value
     ''
-    >>> self.browser.getControl('Home page').value
+    >>> browser.getControl('Home page').value
     ''
-    >>> self.browser.getControl('Biography').value
+    >>> browser.getControl('Biography').value
     ''
-    >>> self.browser.getControl(name='form.widgets.portrait').value
+    >>> browser.getControl(name='form.widgets.portrait').value
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 
@@ -52,13 +72,13 @@ Trying to save without changes
 
 Now can we save this form without changes?
 
-    >>> self.browser.getControl('Save').click()
-    >>> 'Login Name' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Login Name' in browser.contents
     False
-    >>> self.browser.url.endswith(view_name)
+    >>> browser.url.endswith(view_name)
     True
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     True
 
 As we have a required field "email", which hasn't been pre-filled in this test,
@@ -72,30 +92,30 @@ Modifying user data
 If we do set an e-mail address, we should be able to save the form.
 
     >>> full_name = 'Plone user'
-    >>> self.browser.getControl('Full Name').value = full_name
+    >>> browser.getControl('Full Name').value = full_name
 
     >>> home_page = 'http://www.plone.org/'
-    >>> self.browser.getControl('Home page').value = home_page
+    >>> browser.getControl('Home page').value = home_page
 
     >>> description = 'Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts.'
-    >>> self.browser.getControl('Biography').value = description
+    >>> browser.getControl('Biography').value = description
 
     >>> email_address = 'person@example.com'
-    >>> self.browser.getControl('E-mail').value = email_address
+    >>> browser.getControl('E-mail').value = email_address
 
     >>> location = 'Somewhere'
-    >>> self.browser.getControl('Location').value = location
+    >>> browser.getControl('Location').value = location
 
     >>> from pkg_resources import resource_stream
     >>> portrait_file = resource_stream("plone.app.users.tests", 'onepixel.jpg')
-    >>> self.browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
+    >>> browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
 
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     False
-    >>> 'No changes made.' in self.browser.contents
+    >>> 'No changes made.' in browser.contents
     False
-    >>> 'Changes saved.' in self.browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 
@@ -103,7 +123,7 @@ If we do set an e-mail address, we should be able to save the form.
 We should be able to check that value for email address now is the same as what
 we put in.
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> fullname_value = member.getProperty('fullname','')
     >>> fullname_value == full_name
     True
@@ -124,7 +144,7 @@ we put in.
     >>> location_value == location
     True
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <Image at /plone/portal_memberdata/portraits/test_user_1_>
 
@@ -143,21 +163,21 @@ Clearing user data
 If we empty all non-required inputs, the corresponding fields should
 be cleared, instead of keeping their old value
 
-    >>> self.browser.getControl('Full Name').value = ''
-    >>> self.browser.getControl('Home page').value = ''
-    >>> self.browser.getControl('Biography').value = ''
-    >>> self.browser.getControl('Location').value = ''
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Full Name').value = ''
+    >>> browser.getControl('Home page').value = ''
+    >>> browser.getControl('Biography').value = ''
+    >>> browser.getControl('Location').value = ''
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     False
-    >>> 'No changes made.' in self.browser.contents
+    >>> 'No changes made.' in browser.contents
     False
-    >>> 'Changes saved.' in self.browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 Check the values
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> marker = object()
     >>> member.getProperty('fullname', marker)
     ''
@@ -173,24 +193,24 @@ Check the values
 Set the full name again:
 
     >>> full_name = 'Plone user'
-    >>> self.browser.getControl('Full Name').value = full_name
-    >>> self.browser.getControl('Save').click()
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> browser.getControl('Full Name').value = full_name
+    >>> browser.getControl('Save').click()
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> member.getProperty('fullname', marker) == full_name
     True
 
 Can we delete the Image using the checkbox?
 
-    >>> self.browser.getControl('Remove existing image').selected = True
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved.' in self.browser.contents
+    >>> browser.getControl('Remove existing image').selected = True
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved.' in browser.contents
     True
 
 Does the user have the default portrait now?  Note that this differs
 slightly depending on which Plone version you have.  Products.PlonePAS
 4.0.5 or higher has .png, earlier has .gif.
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <FSImage at /plone/defaultUser...>
 
@@ -200,8 +220,8 @@ Modifying other users's data
 When trying to access the personal-information of the admin user
 we still get our own data
 
-    >>> self.browser.open('http://nohost/plone/' + view_name + '?userid=admin')
-    >>> self.browser.getControl('Full Name').value == full_name
+    >>> browser.open('http://nohost/plone/' + view_name + '?userid=admin')
+    >>> browser.getControl('Full Name').value == full_name
     True
 
 
@@ -210,16 +230,19 @@ Modifying user data in email mode
 
 Let's switch to using Email as Login Name
 
-    >>> self.security_settings.use_email_as_login = True
-    >>> self.browser.open("http://nohost/plone/" + view_name)
+    >>> from plone.app.users.tests.base import get_security_settings
+    >>> security_settings = get_security_settings()
+    >>> security_settings.use_email_as_login = True
+    >>> transaction.commit()
+    >>> browser.open("http://nohost/plone/" + view_name)
 
 Update our email and see if login name was synced:
 
-    >>> self.browser.getControl('E-mail').value = 'my.new.email@example.com'
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved.' in self.browser.contents
+    >>> browser.getControl('E-mail').value = 'my.new.email@example.com'
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved.' in browser.contents
     True
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> member.getUserName()
     'my.new.email@example.com'
 
@@ -228,13 +251,14 @@ should fail with validation errors.
 
     >>> portal.acl_users._doAddUser('user2@example.com', 'password1', ('Member',), ())
     <PloneUser 'user2@example.com'>
+    >>> transaction.commit()
 
-    >>> self.browser.open("http://nohost/plone/" + view_name)
-    >>> self.browser.getControl('E-mail').value = 'user2@example.com'
-    >>> self.browser.getControl('Save').click()
-    >>> 'The email address you selected is already in use or is not valid as login name. Please choose another' in self.browser.contents
+    >>> browser.open(view_url)
+    >>> browser.getControl('E-mail').value = 'user2@example.com'
+    >>> browser.getControl('Save').click()
+    >>> 'The email address you selected is already in use or is not valid as login name. Please choose another' in browser.contents
     True
 
 Revert back from email mode
 
-    >>> self.security_settings.use_email_as_login = False
+    >>> security_settings.use_email_as_login = False
diff --git a/plone/app/users/tests/userdata_prefs_user_details.rst b/plone/app/users/tests/userdata_prefs_user_details.rst
index a375803..b846d55 100644
--- a/plone/app/users/tests/userdata_prefs_user_details.rst
+++ b/plone/app/users/tests/userdata_prefs_user_details.rst
@@ -1,39 +1,57 @@
 Admin modifies user information thru 'Users and groups'
 ---------------------------------------------------------------------
 
+Set Up
+======
+
+    >>> from plone.app.testing import TEST_USER_ID
+    >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.testing.z2 import Browser
+
+    >>> import transaction
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> membership = portal.portal_membership
+
+    >>> user_information_url = 'http://nohost/plone/@@user-information?userid={0}'.format(TEST_USER_ID)
+
+    >>> browser = Browser(app)
+    >>> browser.handleErrors = False
+
 An admin can modify user information thru the @@user-information form in Users and Groups
 config page.
 
 So let's login as Plone admin:
-    >>> self.browser.open('http://nohost/plone/')
-    >>> self.browser.getLink('Log in').click()
-    >>> self.browser.getControl('Login Name').value = 'admin'
-    >>> self.browser.getControl('Password').value = 'secret'
-    >>> self.browser.getControl('Log in').click()
+    >>> browser.open('http://nohost/plone/')
+    >>> browser.getLink('Log in').click()
+    >>> browser.getControl('Login Name').value = 'admin'
+    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Log in').click()
 
 Let's see if we can navigate to the user information form in Users and groups
-    >>> self.browser.getLink('Site Setup').click()
-    >>> self.browser.getLink('Users and Groups').click()
-    >>> self.browser.getLink('test_user_1_').click()
-    >>> self.browser.getLink('Personal Information').click()
-    >>> self.browser.url
-    'http://nohost/plone/@@user-information?userid=test_user_1_'
+    >>> browser.getLink('Site Setup').click()
+    >>> browser.getLink('Users and Groups').click()
+    >>> browser.getLink(TEST_USER_NAME).click()
+    >>> browser.getLink('Personal Information').click()
+    >>> browser.url == user_information_url
+    True
 
 We have these controls in the form:
 
-    >>> self.browser.getControl('Full Name').value
+    >>> browser.getControl('Full Name').value
     ''
-    >>> self.browser.getControl('E-mail').value
+    >>> browser.getControl('E-mail').value
     ''
-    >>> self.browser.getControl('Home page').value
+    >>> browser.getControl('Home page').value
     ''
-    >>> self.browser.getControl('Biography').value
+    >>> browser.getControl('Biography').value
     ''
-    >>> self.browser.getControl(name='form.widgets.portrait').value
+    >>> browser.getControl(name='form.widgets.portrait').value
 
 The form should be using CSRF protection:
 
-    >>> self.browser.getControl(name='_authenticator', index=0)
+    >>> browser.getControl(name='_authenticator', index=0)
     <Control name='_authenticator' type='hidden'>
 
 
@@ -41,36 +59,36 @@ Modifying user data
 -------------------
 
     >>> full_name = 'Plone user'
-    >>> self.browser.getControl('Full Name').value = full_name
+    >>> browser.getControl('Full Name').value = full_name
 
     >>> home_page = 'http://www.plone.org/'
-    >>> self.browser.getControl('Home page').value = home_page
+    >>> browser.getControl('Home page').value = home_page
 
     >>> description = 'Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts.'
-    >>> self.browser.getControl('Biography').value = description
+    >>> browser.getControl('Biography').value = description
 
     >>> email_address = 'person@example.com'
-    >>> self.browser.getControl('E-mail').value = email_address
+    >>> browser.getControl('E-mail').value = email_address
 
     >>> location = 'Somewhere'
-    >>> self.browser.getControl('Location').value = location
+    >>> browser.getControl('Location').value = location
 
     >>> from pkg_resources import resource_stream
     >>> portrait_file = resource_stream("plone.app.users.tests", 'onepixel.jpg')
-    >>> self.browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
+    >>> browser.getControl(name='form.widgets.portrait').add_file(portrait_file, "image/jpg", "onepixel.jpg")
 
-    >>> self.browser.getControl('Save').click()
-    >>> 'Required input is missing.' in self.browser.contents
+    >>> browser.getControl('Save').click()
+    >>> 'Required input is missing.' in browser.contents
     False
-    >>> 'No changes made.' in self.browser.contents
+    >>> 'No changes made.' in browser.contents
     False
-    >>> 'Changes saved.' in self.browser.contents
+    >>> 'Changes saved.' in browser.contents
     True
 
 We should be able to check that value for email address now is the same as what
 we put in.
 
-    >>> member = self.membership.getMemberById('test_user_1_')
+    >>> member = membership.getMemberById(TEST_USER_ID)
     >>> fullname_value = member.getProperty('fullname','')
     >>> fullname_value == full_name
     True
@@ -93,7 +111,7 @@ we put in.
 
 Is the users's portrait a newly created Image?
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <Image at /plone/portal_memberdata/portraits/test_user_1_>
 
@@ -107,24 +125,24 @@ Is the data of the created Image the same as the (scaled) orignal image?
 
 Can we delete the Image using the checkbox?
 
-    >>> self.browser.getControl('Remove existing image').selected = True
-    >>> self.browser.getControl('Save').click()
-    >>> 'Changes saved.' in self.browser.contents
+    >>> browser.getControl('Remove existing image').selected = True
+    >>> browser.getControl('Save').click()
+    >>> 'Changes saved.' in browser.contents
     True
 
 Does the user have the default portrait now?  Note that this differs
 slightly depending on which Plone version you have.  Products.PlonePAS
 4.0.5 or higher has .png, earlier has .gif.
 
-    >>> portrait_value = self.membership.getPersonalPortrait('test_user_1_')
+    >>> portrait_value = membership.getPersonalPortrait(TEST_USER_ID)
     >>> portrait_value
     <FSImage at /plone/defaultUser...>
 
 Finally let's see if Cancel button still leaves us on selected user Personal
 Information form::
 
-    >>> self.browser.getControl('Cancel').click()
-    >>> 'Changes canceled.' in self.browser.contents
+    >>> browser.getControl('Cancel').click()
+    >>> 'Changes canceled.' in browser.contents
     True
-    >>> 'Change personal information for test_user_1_' in self.browser.contents
+    >>> 'Change personal information for test_user_1_' in browser.contents
     True
diff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py
index 96c1440..157025d 100644
--- a/plone/app/users/vocabularies.py
+++ b/plone/app/users/vocabularies.py
@@ -67,9 +67,10 @@ class GroupIdVocabulary(object):
 
       >>> from zope.component import queryUtility
       >>> from zope.schema.interfaces import IVocabularyFactory
+      >>> from zope.site.hooks import getSite
       >>> from Products.CMFCore.utils import getToolByName
 
-      >>> groups_tool = getToolByName(self.portal, 'portal_groups')
+      >>> groups_tool = getToolByName(getSite(), 'portal_groups')
       >>> groups_tool.addGroup(
       ...     'fancygroup', [], [],
       ...     title='Group Title',
@@ -80,7 +81,7 @@ class GroupIdVocabulary(object):
       >>> name = 'plone.app.users.group_ids'
       >>> util = queryUtility(IVocabularyFactory, name)
 
-      >>> fields = util(self.portal)
+      >>> fields = util(getSite())
       >>> fields
       <zope.schema.vocabulary.SimpleVocabulary object at ...>
 
diff --git a/setup.py b/setup.py
index 554bc04..bc83eb5 100644
--- a/setup.py
+++ b/setup.py
@@ -11,7 +11,7 @@
 extras_require = {
     'test': [
         'Products.MailHost',
-        'Products.PloneTestCase',
+        'plone.app.testing',
         'plone.keyring',
     ]
 }


