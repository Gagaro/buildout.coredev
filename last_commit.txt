Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-07-13T10:16:46+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/7c0623fa2170bccec9e9879da340d22aef46fa31

keep contentType of file field during migration

Files changed:
M plone/app/contenttypes/migration/field_migrators.py

diff --git a/plone/app/contenttypes/migration/field_migrators.py b/plone/app/contenttypes/migration/field_migrators.py
index 295a6b1..60466dc 100644
--- a/plone/app/contenttypes/migration/field_migrators.py
+++ b/plone/app/contenttypes/migration/field_migrators.py
@@ -102,8 +102,10 @@ def migrate_filefield(src_obj, dst_obj, src_fieldname, dst_fieldname):
     old_file_data = old_file.data
     if safe_hasattr(old_file_data, 'data'):
         old_file_data = old_file_data.data
-    namedblobfile = NamedBlobFile(data=old_file_data,
-                                  filename=filename)
+    namedblobfile = NamedBlobFile(
+        contentType=old_file.content_type,
+        data=old_file_data,
+        filename=filename)
     setattr(dst_obj, dst_fieldname, namedblobfile)
     logger.info("Migrating file %s" % filename)
 


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-07-13T10:17:20+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/07eb1cd8101a26ece3f13eac20998fc85469db45

use gerneric field-migrators in migrations

Files changed:
M plone/app/contenttypes/migration/migration.py

diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index eba7c95..e3c5035 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -9,8 +9,6 @@
 '''
 from Products.Archetypes.config import REFERENCE_CATALOG
 from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import safe_hasattr
-from Products.CMFPlone.utils import safe_unicode
 from Products.contentmigration.basemigrator.migrator import CMFFolderMigrator
 from Products.contentmigration.basemigrator.migrator import CMFItemMigrator
 from Products.contentmigration.basemigrator.walker import CatalogWalker
@@ -20,18 +18,20 @@
 from plone.app.contenttypes.migration.dxmigration import DXEventMigrator
 from plone.app.contenttypes.migration.dxmigration import DXOldEventMigrator
 from plone.app.contenttypes.migration.utils import copy_contentrules
-from plone.app.contenttypes.migration.utils import datetime_fixer
 from plone.app.contenttypes.migration.utils import migrate_leadimage
 from plone.app.contenttypes.migration.utils import move_comments
 from plone.app.contenttypes.migration.utils import migrate_portlets
-from plone.app.contenttypes.migration.field_migrators import migrate_simplefield
 from plone.app.contenttypes.migration.field_migrators import FIELDS_MAPPING
-from plone.app.textfield.value import RichTextValue
+from plone.app.contenttypes.migration.field_migrators import \
+    migrate_datetimefield
+from plone.app.contenttypes.migration.field_migrators import migrate_filefield
+from plone.app.contenttypes.migration.field_migrators import migrate_imagefield
+from plone.app.contenttypes.migration.field_migrators import \
+    migrate_richtextfield
+from plone.app.contenttypes.migration.field_migrators import \
+    migrate_simplefield
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
-from plone.event.utils import default_timezone
-from plone.namedfile.file import NamedBlobFile
-from plone.namedfile.file import NamedBlobImage
 from zope.component import adapter
 from zope.component import getAdapters
 from zope.component import getMultiAdapter
@@ -40,6 +40,7 @@
 from zope.interface import implementer
 import logging
 import transaction
+
 logger = logging.getLogger(__name__)
 
 
@@ -222,14 +223,7 @@ class DocumentMigrator(ATCTContentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        field = self.old.getField('text')
-        mime_type = field.getContentType(self.old)
-        raw_text = safe_unicode(field.getRaw(self.old))
-        if raw_text.strip() == '':
-            return
-        richtext = RichTextValue(raw=raw_text, mimeType=mime_type,
-                                 outputMimeType='text/x-html-safe')
-        self.new.text = richtext
+        migrate_richtextfield(self.old, self.new, 'text', 'text')
 
 
 def migrate_documents(portal):
@@ -244,12 +238,7 @@ class FileMigrator(ATCTContentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        old_file = self.old.getField('file').get(self.old)
-        filename = safe_unicode(old_file.filename)
-        namedblobfile = NamedBlobFile(contentType=old_file.content_type,
-                                      data=old_file.data,
-                                      filename=filename)
-        self.new.file = namedblobfile
+        migrate_filefield(self.old, self.new, 'file', 'file')
 
 
 def migrate_files(portal):
@@ -276,13 +265,7 @@ class ImageMigrator(ATCTContentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        old_image = self.old.getField('image').get(self.old)
-        if old_image == '':
-            return
-        filename = safe_unicode(old_image.filename)
-        namedblobimage = NamedBlobImage(data=old_image.data,
-                                        filename=filename)
-        self.new.image = namedblobimage
+        migrate_imagefield(self.old, self.new, 'image', 'image')
 
 
 def migrate_images(portal):
@@ -309,15 +292,14 @@ class LinkMigrator(ATCTContentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        remoteUrl = self.old.getField('remoteUrl').get(self.old)
-        self.new.remoteUrl = remoteUrl
+        migrate_simplefield(self.old, self.new, 'remoteUrl', 'remoteUrl')
 
 
 def migrate_links(portal):
     return migrate(portal, LinkMigrator)
 
 
-class NewsItemMigrator(DocumentMigrator):
+class NewsItemMigrator(ATCTContentMigrator):
 
     src_portal_type = 'News Item'
     src_meta_type = 'ATNewsItem'
@@ -325,22 +307,9 @@ class NewsItemMigrator(DocumentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        # migrate the text
-        super(NewsItemMigrator, self).migrate_schema_fields()
-
-        # migrate the rest of the Schema
-        old_image = self.old.getField('image').get(self.old)
-        if old_image == '':
-            return
-        filename = safe_unicode(old_image.filename)
-        old_image_data = old_image.data
-        if safe_hasattr(old_image_data, 'data'):
-            old_image_data = old_image_data.data
-        namedblobimage = NamedBlobImage(data=old_image_data,
-                                        filename=filename)
-        self.new.image = namedblobimage
-        self.new.image_caption = safe_unicode(
-            self.old.getField('imageCaption').get(self.old))
+        migrate_richtextfield(self.old, self.new, 'text', 'text')
+        migrate_imagefield(self.old, self.new, 'image', 'image')
+        migrate_simplefield(self.old, self.new, 'imageCaption', 'imageCaption')
 
 
 def migrate_newsitems(portal):
@@ -378,7 +347,7 @@ def migrate_folders(portal):
     return migrate(portal, FolderMigrator)
 
 
-class CollectionMigrator(DocumentMigrator):
+class CollectionMigrator(ATCTContentMigrator):
     """Migrator for at-based collections provided by plone.app.collection
     to
     """
@@ -389,16 +358,16 @@ class CollectionMigrator(DocumentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        # migrate the richtext
-        super(CollectionMigrator, self).migrate_schema_fields()
-
-        # migrate the rest of the schema into the behavior
+        migrate_richtextfield(self.old, self.new, 'text', 'text')
         wrapped = ICollection(self.new)
+        # using migrate_simplefield on 'query' returns the ContentListing obj
         wrapped.query = self.old.query
-        wrapped.sort_on = self.old.sort_on
-        wrapped.sort_reversed = self.old.sort_reversed
-        wrapped.limit = self.old.limit
-        wrapped.customViewFields = self.old.customViewFields
+        migrate_simplefield(self.old, wrapped, 'sort_on', 'sort_on')
+        migrate_simplefield(
+            self.old, wrapped, 'sort_reversed', 'sort_reversed')
+        migrate_simplefield(self.old, wrapped, 'limit', 'limit')
+        migrate_simplefield(
+            self.old, wrapped, 'customViewFields', 'customViewFields')
 
 
 def migrate_collections(portal):
@@ -414,58 +383,20 @@ class EventMigrator(ATCTContentMigrator):
     dst_meta_type = None  # not used
 
     def migrate_schema_fields(self):
-        old_start = self.old.getField('startDate').get(self.old)
-        old_end = self.old.getField('endDate').get(self.old)
-        old_location = self.old.getField('location').get(self.old)
-        old_attendees = self.old.getField('attendees').get(self.old)
-        old_eventurl = self.old.getField('eventUrl').get(self.old)
-        old_contactname = self.old.getField('contactName').get(self.old)
-        old_contactemail = self.old.getField('contactEmail').get(self.old)
-        old_contactphone = self.old.getField('contactPhone').get(self.old)
-        old_text_field = self.old.getField('text')
-        raw_text = safe_unicode(old_text_field.getRaw(self.old))
-        mime_type = old_text_field.getContentType(self.old)
-        if raw_text.strip() == '':
-            raw_text = ''
-        old_richtext = RichTextValue(raw=raw_text, mimeType=mime_type,
-                                     outputMimeType='text/x-html-safe')
-
-        wholeDay = None
-        if self.old.getField('wholeDay'):
-            wholeDay = self.old.getField('wholeDay').get(self.old)
-
-        openEnd = None
-        if self.old.getField('openEnd'):
-            openEnd = self.old.getField('openEnd').get(self.old)
-
-        recurrence = None
-        if self.old.getField('recurrence'):
-            recurrence = self.old.getField('recurrence').get(self.old)
-
-        if self.old.getField('timezone'):
-            old_timezone = self.old.getField('timezone').get(self.old)
-        else:
-            old_timezone = default_timezone(fallback='UTC')
-
-        # IEventBasic
-        self.new.start = datetime_fixer(old_start.asdatetime(), old_timezone)
-        self.new.end = datetime_fixer(old_end.asdatetime(), old_timezone)
-
-        if wholeDay is not None:
-            self.new.whole_day = wholeDay  # IEventBasic
-        if openEnd is not None:
-            self.new.open_end = openEnd  # IEventBasic
-        if recurrence is not None:
-            self.new.recurrence = recurrence  # IEventRecurrence
-
-        self.new.location = old_location  # IEventLocation
-        self.new.attendees = old_attendees  # IEventAttendees
-        self.new.event_url = old_eventurl  # IEventContact
-        self.new.contact_name = old_contactname  # IEventContact
-        self.new.contact_email = old_contactemail  # IEventContact
-        self.new.contact_phone = old_contactphone  # IEventContact
-        # Copy the entire richtext object, not just it's representation
-        self.new.text = old_richtext
+        migrate_datetimefield(self.old, self.new, 'startDate', 'start')
+        migrate_datetimefield(self.old, self.new, 'endDate', 'end')
+        migrate_richtextfield(self.old, self.new, 'text', 'text')
+        migrate_simplefield(self.old, self.new, 'location', 'location')
+        migrate_simplefield(self.old, self.new, 'attendees', 'attendees')
+        migrate_simplefield(self.old, self.new, 'eventUrl', 'event_url')
+        migrate_simplefield(self.old, self.new, 'contactName', 'contact_name')
+        migrate_simplefield(
+            self.old, self.new, 'contactEmail', 'contact_email')
+        migrate_simplefield(
+            self.old, self.new, 'contactPhone', 'contact_phone')
+        migrate_simplefield(self.old, self.new, 'wholeDay', 'whole_day')
+        migrate_simplefield(self.old, self.new, 'openEnd', 'open_end')
+        migrate_simplefield(self.old, self.new, 'recurrence', 'recurrence')
 
 
 def migrate_events(portal):


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-07-13T10:53:46+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/28be9096590aceb3c469595049f74078f82be1ba

use generic field-migrators in migrate_leadimage

Files changed:
M plone/app/contenttypes/migration/dxmigration.py
M plone/app/contenttypes/migration/field_migrators.py
M plone/app/contenttypes/migration/utils.py

diff --git a/plone/app/contenttypes/migration/dxmigration.py b/plone/app/contenttypes/migration/dxmigration.py
index 7a9a057..dffe25b 100644
--- a/plone/app/contenttypes/migration/dxmigration.py
+++ b/plone/app/contenttypes/migration/dxmigration.py
@@ -4,8 +4,8 @@
 from Products.contentmigration.basemigrator.migrator import CMFItemMigrator
 from Products.contentmigration.basemigrator.walker import CatalogWalker
 from plone.app.contenttypes.interfaces import IEvent
+from plone.app.contenttypes.migration.field_migrators import datetime_fixer
 from plone.app.contenttypes.migration.utils import HAS_MULTILINGUAL
-from plone.app.contenttypes.migration.utils import datetime_fixer
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.event.utils import default_timezone
diff --git a/plone/app/contenttypes/migration/field_migrators.py b/plone/app/contenttypes/migration/field_migrators.py
index 60466dc..8182dd5 100644
--- a/plone/app/contenttypes/migration/field_migrators.py
+++ b/plone/app/contenttypes/migration/field_migrators.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
 from Products.CMFPlone.utils import safe_unicode, safe_hasattr
-from plone.app.contenttypes.migration.utils import datetime_fixer
 from plone.event.utils import default_timezone
 from plone.namedfile.file import NamedBlobFile
 from plone.namedfile.file import NamedBlobImage
 from plone.app.textfield.value import RichTextValue
 import logging
+import pytz
 
 logger = logging.getLogger(__name__)
 
@@ -123,6 +123,14 @@ def migrate_datetimefield(src_obj, dst_obj, src_fieldname, dst_fieldname):
     setattr(dst_obj, dst_fieldname, new_value)
 
 
+def datetime_fixer(dt, zone):
+    timezone = pytz.timezone(zone)
+    if dt.tzinfo is None:
+        return timezone.localize(dt)
+    else:
+        return timezone.normalize(dt)
+
+
 # This mapping is needed to get the right migration method
 # we use the full field type path as it is retrieved from the target-field
 # (field.getType()), to avoid conflict.
diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 782e433..e1ebe20 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -2,7 +2,7 @@
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFPlone.utils import safe_unicode, safe_hasattr
+from Products.CMFPlone.utils import safe_hasattr
 from Products.GenericSetup.context import DirectoryImportContext
 from Products.GenericSetup.utils import importObjects
 from archetypes.schemaextender.interfaces import IBrowserLayerAwareExtender
@@ -14,13 +14,15 @@
 from plone.app.contentrules.api import assign_rule
 from plone.app.contenttypes.behaviors.leadimage import ILeadImage
 from plone.app.contenttypes.utils import DEFAULT_TYPES
+from plone.app.contenttypes.migration.field_migrators import migrate_imagefield
+from plone.app.contenttypes.migration.field_migrators import \
+    migrate_simplefield
 from plone.app.discussion.conversation import ANNOTATION_KEY as DISCUSSION_KEY
 from plone.app.discussion.interfaces import IConversation
 from plone.app.uuid.utils import uuidToObject
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
-from plone.namedfile.file import NamedBlobImage
 from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
@@ -35,7 +37,6 @@
 import logging
 import os
 import pkg_resources
-import pytz
 
 logger = logging.getLogger(__name__)
 
@@ -185,8 +186,7 @@ def migrate_leadimage(source_object, target_object):
     NEW_LEADIMAGE_FIELD_NAME = 'image'
     NEW_CAPTION_FIELD_NAME = 'image_caption'
 
-    old_leadimage_field = source_object.getField(OLD_LEADIMAGE_FIELD_NAME)
-    if not old_leadimage_field:
+    if not source_object.getField(OLD_LEADIMAGE_FIELD_NAME):
         # skip if old content has no field
         return
 
@@ -196,31 +196,21 @@ def migrate_leadimage(source_object, target_object):
                     "Could not migrate collective.leadimage fields.")
         return
 
-    old_image = old_leadimage_field.get(source_object)
-    if not old_image:
-        # skip if image-field is empty
-        return
-
-    filename = safe_unicode(old_image.filename)
-    old_image_data = old_image.data
-    if safe_hasattr(old_image_data, 'data'):
-        # handle relstorage
-        old_image_data = old_image_data.data
-
-    # construct the new image
-    namedblobimage = NamedBlobImage(data=old_image_data,
-                                    filename=filename)
-
-    # set new field on destination object
-    setattr(target_object, NEW_LEADIMAGE_FIELD_NAME, namedblobimage)
+    # handle image field
+    migrate_imagefield(
+        source_object,
+        target_object,
+        OLD_LEADIMAGE_FIELD_NAME,
+        NEW_LEADIMAGE_FIELD_NAME)
 
     # handle image caption field
-    caption_field = source_object.getField(OLD_CAPTION_FIELD_NAME, None)
-    if caption_field:
-        setattr(target_object,
-                (NEW_CAPTION_FIELD_NAME),
-                safe_unicode(caption_field.get(source_object)))
-    logger.info("Migrating contentlead image %s" % filename)
+    migrate_simplefield(
+        source_object,
+        target_object,
+        OLD_CAPTION_FIELD_NAME,
+        NEW_CAPTION_FIELD_NAME)
+    logger.info(
+        "Migrating contentlead image for." % target_object.absolute_url())
 
 
 def migrate_portlets(src_obj, dst_obj):
@@ -349,11 +339,3 @@ def restoreReferences(portal,
             restore_backrefs(portal, obj)
             restore_reforder(obj)
         cleanup_stored_refs(obj)
-
-
-def datetime_fixer(dt, zone):
-    timezone = pytz.timezone(zone)
-    if dt.tzinfo is None:
-        return timezone.localize(dt)
-    else:
-        return timezone.normalize(dt)


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-07-13T11:08:01+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/45f63929b7eb0681830a9728b1dffa16c92d39c3

update changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 16877e9..0d58c60 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,13 +4,14 @@ Changelog
 1.2b3 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Use generic field_migrators in all migrations.
+  [pbauer]
 
 
 1.2b2 (2015-06-05)
 ------------------
 
-- use modal pattern for news item image instead of jquery tools
+- Use modal pattern for news item image instead of jquery tools.
   [vangheem]
 
 
@@ -31,7 +32,7 @@ Changelog
 1.2a9 (2015-05-13)
 ------------------
 
-- provide table of contents for document view
+- Provide table of contents for document view.
   [vangheem]
 
 - Default to using locking support on Page, Collection, Event and News Item types


