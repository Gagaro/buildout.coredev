Repository: mockup


Branch: refs/heads/master
Date: 2015-08-20T00:21:17-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/mockup/commit/8c3ef6baf918416e4303d0a4c4397d29b4a5d7fb

Pickadate pattern: Allow to choose format to be used when creating widget with existing data, and use that to format the returned value

Files changed:
M CHANGES.rst
M mockup/patterns/pickadate/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index dd3ee1a..7e24605 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- Pickadate pattern: Allow to choose format to be used when creating widget
+  with existing data, and use that to format the returned value.
+  [frapell]
+
 - add action value to form when using disableAjaxFormSubmit option on modal
   [vangheem]
   
diff --git a/mockup/patterns/pickadate/pattern.js b/mockup/patterns/pickadate/pattern.js
index fb9d9cf..0373881 100644
--- a/mockup/patterns/pickadate/pattern.js
+++ b/mockup/patterns/pickadate/pattern.js
@@ -100,7 +100,9 @@ define([
       separator: ' ',
       date: {
         selectYears: true,
-        selectMonths: true
+        selectMonths: true,
+        formatSubmit: 'yyyy-mm-dd',
+        format: 'yyyy-mm-dd'
       },
       time: {
       },
@@ -144,7 +146,6 @@ define([
             .insertAfter(self.$el);
 
       if (self.options.date !== false) {
-        self.options.date.formatSubmit = 'yyyy-mm-dd';
         self.$date = $('<input type="text"/>')
               .attr('placeholder', self.options.placeholderDate)
               .attr('data-value', dateValue)
@@ -277,7 +278,7 @@ define([
             dateValue = self.$date.data('pickadate').get('select'),
             formatDate = date.formats.toString;
         if (dateValue) {
-          value += formatDate.apply(date, ['yyyy-mm-dd', dateValue]);
+          value += formatDate.apply(date, [self.options.date.formatSubmit, dateValue]);
         }
       }
 


Repository: mockup


Branch: refs/heads/master
Date: 2015-08-20T00:22:32-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/mockup/commit/77ae4e56e99defa964b7e23aed57d5328faa2bf6

Pickadate pattern: Set the value using the .val() method

Files changed:
M CHANGES.rst
M mockup/patterns/pickadate/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 7e24605..4a864ac 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- Pickadate pattern: Set the value using the .val() method
+  [frapell]
+
 - Pickadate pattern: Allow to choose format to be used when creating widget
   with existing data, and use that to format the returned value.
   [frapell]
diff --git a/mockup/patterns/pickadate/pattern.js b/mockup/patterns/pickadate/pattern.js
index 0373881..e1ca83c 100644
--- a/mockup/patterns/pickadate/pattern.js
+++ b/mockup/patterns/pickadate/pattern.js
@@ -302,7 +302,7 @@ define([
         }
       }
 
-      self.$el.attr('value', value);
+      self.$el.val(value);
 
       self.emit('updated');
     }


Repository: mockup


Branch: refs/heads/master
Date: 2015-08-20T00:26:14-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/mockup/commit/01e87f310221102b0cdb1de3d1b5c2ec3883ea77

Querystring pattern: Create date widgets with existing data, if present. Also subscribe to the updated.pickadate.patterns to update values when date widgets change.

Files changed:
M CHANGES.rst
M mockup/patterns/querystring/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 4a864ac..50c0d0d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- Querystring pattern: Create date widgets with existing data, if present.
+  Also subscribe to the ``updated.pickadate.patterns`` to update values when
+  date widgets change.
+  [frapell]
+
 - Pickadate pattern: Set the value using the .val() method
   [frapell]
 
diff --git a/mockup/patterns/querystring/pattern.js b/mockup/patterns/querystring/pattern.js
index 0b2d78f..9c27c5e 100644
--- a/mockup/patterns/querystring/pattern.js
+++ b/mockup/patterns/querystring/pattern.js
@@ -194,24 +194,34 @@ define([
       } else if (widget === 'DateWidget') {
         self.$value = $('<input type="text"/>')
                 .addClass(self.options.classValueName + '-' + widget)
+                .attr('data-pat-pickadate', '{"time": false, "date": {"format": "dd/mm/yyyy" }}')
+                .val(value)
                 .appendTo($wrapper)
-                .patternPickadate({
-                  time: false,
-                  date: { format: 'dd/mm/yyyy' }
-                })
-                .change(function() {
+                .patternPickadate()
+                .on('updated.pickadate.patterns', function() {
                   self.trigger('value-changed');
                 });
 
+
       } else if (widget === 'DateRangeWidget') {
         var startwrap = $('<span/>').appendTo($wrapper);
+        var val1 = "";
+        var val2 = "";
+
+        if (value) {
+          val1 = value[0]?value[0]:"";
+          val2 = value[1]?value[1]:"";
+        }
+
         var startdt = $('<input type="text"/>')
           .addClass(self.options.classValueName + '-' + widget)
           .addClass(self.options.classValueName + '-' + widget + '-start')
+          .attr('data-pat-pickadate', '{"time": false, "date": {"format": "dd/mm/yyyy" }}')
+          .val(val1)
           .appendTo(startwrap)
-          .patternPickadate({
-            time: false,
-            date: { format: 'dd/mm/yyyy' }
+          .patternPickadate()
+          .on('updated.pickadate.patterns', function() {
+            self.trigger('value-changed');
           });
         $wrapper.append(
           $('<span/>')
@@ -222,14 +232,13 @@ define([
         var enddt = $('<input type="text"/>')
                         .addClass(self.options.classValueName + '-' + widget)
                         .addClass(self.options.classValueName + '-' + widget + '-end')
+                        .attr('data-pat-pickadate', '{"time": false, "date": {"format": "dd/mm/yyyy" }}')
+                        .val(val2)
                         .appendTo(endwrap)
-                        .patternPickadate({
-                          time: false,
-                          date: { format: 'dd/mm/yyyy' }
+                        .patternPickadate()
+                        .on('updated.pickadate.patterns', function() {
+                          self.trigger('value-changed');
                         });
-        $wrapper.find('.picker__input').change(function() {
-          self.trigger('value-changed');
-        });
         self.$value = [startdt, enddt];
 
       } else if (widget === 'RelativeDateWidget') {
@@ -277,7 +286,14 @@ define([
       }
 
       if (value !== undefined && typeof self.$value !== 'undefined') {
-        self.$value.select2('val', value);
+        if ($.isArray(self.$value)) {
+          $.each(value, function( i, v ) {
+            self.$value[i].select2('val', v);
+          });
+        }
+        else {
+          self.$value.select2('val', value);
+        }
       }
 
       self.trigger('create-value');
@@ -387,7 +403,7 @@ define([
       var varr = [];
       if ($.isArray(self.$value)) { // handles only datepickers from the 'between' operator right now
         $.each(self.$value, function(i, v) {
-          varr.push($(this).parent().find('.picker__input').val());
+          varr.push($(this).val());
         });
       }
       else if (typeof self.$value !== 'undefined') {
@@ -395,7 +411,7 @@ define([
       }
       var vval;
       if (varr.length > 1) {
-        vval = '[j' + varr.join('","') + '"]';
+        vval = '["' + varr.join('","') + '"]';
       }
       else if (varr.length === 1) {
         vval = JSON.stringify(varr[0]);


Repository: mockup


Branch: refs/heads/master
Date: 2015-08-20T00:46:21-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/mockup/commit/4531c2835bdb757bf7acc543ba24d3b3ea8814bd

The 'Clear' also needs to use .val() method

Files changed:
M mockup/patterns/pickadate/pattern.js

diff --git a/mockup/patterns/pickadate/pattern.js b/mockup/patterns/pickadate/pattern.js
index e1ca83c..20c7e76 100644
--- a/mockup/patterns/pickadate/pattern.js
+++ b/mockup/patterns/pickadate/pattern.js
@@ -163,7 +163,7 @@ define([
                     }
                   }
                   if (e.hasOwnProperty('clear')) {
-                    self.$el.removeAttr('value');
+                    self.$el.val('');
                     self.$date.attr('data-value', '');
                   }
                 }
@@ -197,7 +197,7 @@ define([
                     }
                   }
                   if (e.hasOwnProperty('clear')) {
-                    self.$el.removeAttr('value');
+                    self.$el.val('');
                     self.$time.attr('data-value', '');
                   }
                 }


Repository: mockup


Branch: refs/heads/master
Date: 2015-08-20T08:03:04-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/bd727a6c3f79bd52a17ac1745fbf43e519049502

Merge pull request #555 from plone/collections-fixes

Collections fixes

Files changed:
M CHANGES.rst
M mockup/patterns/pickadate/pattern.js
M mockup/patterns/querystring/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index dd3ee1a..50c0d0d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,18 @@ Changelog
 2.1.0 (unreleased)
 ------------------
 
+- Querystring pattern: Create date widgets with existing data, if present.
+  Also subscribe to the ``updated.pickadate.patterns`` to update values when
+  date widgets change.
+  [frapell]
+
+- Pickadate pattern: Set the value using the .val() method
+  [frapell]
+
+- Pickadate pattern: Allow to choose format to be used when creating widget
+  with existing data, and use that to format the returned value.
+  [frapell]
+
 - add action value to form when using disableAjaxFormSubmit option on modal
   [vangheem]
   
diff --git a/mockup/patterns/pickadate/pattern.js b/mockup/patterns/pickadate/pattern.js
index fb9d9cf..20c7e76 100644
--- a/mockup/patterns/pickadate/pattern.js
+++ b/mockup/patterns/pickadate/pattern.js
@@ -100,7 +100,9 @@ define([
       separator: ' ',
       date: {
         selectYears: true,
-        selectMonths: true
+        selectMonths: true,
+        formatSubmit: 'yyyy-mm-dd',
+        format: 'yyyy-mm-dd'
       },
       time: {
       },
@@ -144,7 +146,6 @@ define([
             .insertAfter(self.$el);
 
       if (self.options.date !== false) {
-        self.options.date.formatSubmit = 'yyyy-mm-dd';
         self.$date = $('<input type="text"/>')
               .attr('placeholder', self.options.placeholderDate)
               .attr('data-value', dateValue)
@@ -162,7 +163,7 @@ define([
                     }
                   }
                   if (e.hasOwnProperty('clear')) {
-                    self.$el.removeAttr('value');
+                    self.$el.val('');
                     self.$date.attr('data-value', '');
                   }
                 }
@@ -196,7 +197,7 @@ define([
                     }
                   }
                   if (e.hasOwnProperty('clear')) {
-                    self.$el.removeAttr('value');
+                    self.$el.val('');
                     self.$time.attr('data-value', '');
                   }
                 }
@@ -277,7 +278,7 @@ define([
             dateValue = self.$date.data('pickadate').get('select'),
             formatDate = date.formats.toString;
         if (dateValue) {
-          value += formatDate.apply(date, ['yyyy-mm-dd', dateValue]);
+          value += formatDate.apply(date, [self.options.date.formatSubmit, dateValue]);
         }
       }
 
@@ -301,7 +302,7 @@ define([
         }
       }
 
-      self.$el.attr('value', value);
+      self.$el.val(value);
 
       self.emit('updated');
     }
diff --git a/mockup/patterns/querystring/pattern.js b/mockup/patterns/querystring/pattern.js
index 0b2d78f..9c27c5e 100644
--- a/mockup/patterns/querystring/pattern.js
+++ b/mockup/patterns/querystring/pattern.js
@@ -194,24 +194,34 @@ define([
       } else if (widget === 'DateWidget') {
         self.$value = $('<input type="text"/>')
                 .addClass(self.options.classValueName + '-' + widget)
+                .attr('data-pat-pickadate', '{"time": false, "date": {"format": "dd/mm/yyyy" }}')
+                .val(value)
                 .appendTo($wrapper)
-                .patternPickadate({
-                  time: false,
-                  date: { format: 'dd/mm/yyyy' }
-                })
-                .change(function() {
+                .patternPickadate()
+                .on('updated.pickadate.patterns', function() {
                   self.trigger('value-changed');
                 });
 
+
       } else if (widget === 'DateRangeWidget') {
         var startwrap = $('<span/>').appendTo($wrapper);
+        var val1 = "";
+        var val2 = "";
+
+        if (value) {
+          val1 = value[0]?value[0]:"";
+          val2 = value[1]?value[1]:"";
+        }
+
         var startdt = $('<input type="text"/>')
           .addClass(self.options.classValueName + '-' + widget)
           .addClass(self.options.classValueName + '-' + widget + '-start')
+          .attr('data-pat-pickadate', '{"time": false, "date": {"format": "dd/mm/yyyy" }}')
+          .val(val1)
           .appendTo(startwrap)
-          .patternPickadate({
-            time: false,
-            date: { format: 'dd/mm/yyyy' }
+          .patternPickadate()
+          .on('updated.pickadate.patterns', function() {
+            self.trigger('value-changed');
           });
         $wrapper.append(
           $('<span/>')
@@ -222,14 +232,13 @@ define([
         var enddt = $('<input type="text"/>')
                         .addClass(self.options.classValueName + '-' + widget)
                         .addClass(self.options.classValueName + '-' + widget + '-end')
+                        .attr('data-pat-pickadate', '{"time": false, "date": {"format": "dd/mm/yyyy" }}')
+                        .val(val2)
                         .appendTo(endwrap)
-                        .patternPickadate({
-                          time: false,
-                          date: { format: 'dd/mm/yyyy' }
+                        .patternPickadate()
+                        .on('updated.pickadate.patterns', function() {
+                          self.trigger('value-changed');
                         });
-        $wrapper.find('.picker__input').change(function() {
-          self.trigger('value-changed');
-        });
         self.$value = [startdt, enddt];
 
       } else if (widget === 'RelativeDateWidget') {
@@ -277,7 +286,14 @@ define([
       }
 
       if (value !== undefined && typeof self.$value !== 'undefined') {
-        self.$value.select2('val', value);
+        if ($.isArray(self.$value)) {
+          $.each(value, function( i, v ) {
+            self.$value[i].select2('val', v);
+          });
+        }
+        else {
+          self.$value.select2('val', value);
+        }
       }
 
       self.trigger('create-value');
@@ -387,7 +403,7 @@ define([
       var varr = [];
       if ($.isArray(self.$value)) { // handles only datepickers from the 'between' operator right now
         $.each(self.$value, function(i, v) {
-          varr.push($(this).parent().find('.picker__input').val());
+          varr.push($(this).val());
         });
       }
       else if (typeof self.$value !== 'undefined') {
@@ -395,7 +411,7 @@ define([
       }
       var vval;
       if (varr.length > 1) {
-        vval = '[j' + varr.join('","') + '"]';
+        vval = '["' + varr.join('","') + '"]';
       }
       else if (varr.length === 1) {
         vval = JSON.stringify(varr[0]);


