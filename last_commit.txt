Repository: plone.app.linkintegrity


Branch: refs/heads/1.5.x
Date: 2015-07-29T13:58:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/ac62c62c218d3d9be0897e03db911d1896bba97d

backport improvements to @@updateLinkIntegrityInformation from plone5-branch

Files changed:
M plone/app/linkintegrity/browser/update.py

diff --git a/plone/app/linkintegrity/browser/update.py b/plone/app/linkintegrity/browser/update.py
index 0a50b70..b4e6d20 100644
--- a/plone/app/linkintegrity/browser/update.py
+++ b/plone/app/linkintegrity/browser/update.py
@@ -1,10 +1,36 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from Products.Archetypes.interfaces import IBaseObject
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five import BrowserView
 from Products.statusmessages.interfaces import IStatusMessage
+from datetime import datetime
+from datetime import timedelta
 from plone.app.linkintegrity.handlers import modifiedArchetype
+from plone.app.linkintegrity.handlers import modifiedDexterity
+from plone.dexterity.interfaces import IDexterityContent
+from zExceptions import NotFound
+import logging
+import pkg_resources
+
+# Is there a multilingual addon?
+try:
+    pkg_resources.get_distribution('Products.LinguaPlone')
+except pkg_resources.DistributionNotFound:
+    HAS_MULTILINGUAL = False
+else:
+    HAS_MULTILINGUAL = True
+
+if not HAS_MULTILINGUAL:
+    try:
+        pkg_resources.get_distribution('plone.app.multilingual')
+    except pkg_resources.DistributionNotFound:
+        HAS_MULTILINGUAL = False
+    else:
+        HAS_MULTILINGUAL = True
+
+logger = logging.getLogger(__name__)
 
 
 class UpdateView(BrowserView):
@@ -14,15 +40,22 @@ def __call__(self):
         request = aq_inner(self.request)
         clicked = request.form.has_key
         if clicked('update') or clicked('delete_all'):
+            starttime = datetime.now()
             count = self.update()
-            msg = _(u'linkintegrity_update_info',
-                default=u'Link integrity information updated for ${count} item(s).',
-                mapping={'count': count})
-            IStatusMessage(request).addStatusMessage(msg, type='info')
+            duration = timedelta(seconds=(datetime.now() - starttime).seconds)
+            msg = _(
+                u'linkintegrity_update_info',
+                default=u'Link integrity information updated for ${count} ' +
+                        u'items in {time} seconds.',
+                mapping={'count': count, 'time': str(duration)},
+            )
+            IStatusMessage(request).add(msg, type='info')
+            msg = 'Updated {} items in {} seconds'.format(count, str(duration))
+            logger.info(msg)
             request.RESPONSE.redirect(getToolByName(context, 'portal_url')())
         elif clicked('cancel'):
             msg = _(u'Update cancelled.')
-            IStatusMessage(request).addStatusMessage(msg, type='info')
+            IStatusMessage(request).add(msg, type='info')
             request.RESPONSE.redirect(getToolByName(context, 'portal_url')())
         else:
             return self.index()
@@ -30,9 +63,27 @@ def __call__(self):
     def update(self):
         catalog = getToolByName(self.context, 'portal_catalog')
         count = 0
-        for brain in catalog(Language='all'):
-            obj = brain.getObject()
+        query = {}
+        if HAS_MULTILINGUAL and 'Language' in catalog.indexes():
+            query['Language'] = 'all'
+
+        for brain in catalog(query):
+            try:
+                obj = brain.getObject()
+            except (AttributeError, NotFound, KeyError):
+                msg = "Catalog inconsistency: {} not found!"
+                logger.error(msg.format(brain.getPath()), exc_info=1)
+                continue
+            method = None
             if IBaseObject.providedBy(obj):
-                modifiedArchetype(obj, 'dummy event parameter')
-                count += 1
+                method = modifiedArchetype
+            elif IDexterityContent.providedBy(obj):
+                method = modifiedDexterity
+            if method:
+                try:
+                    method(obj, 'dummy event parameter')
+                    count += 1
+                except Exception:
+                    msg = "Error updating linkintegrity-info for {}."
+                    logger.error(msg.format(obj.absolute_url()), exc_info=1)
         return count


