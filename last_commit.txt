Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-07-26T18:27:13+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/52e9da0a7a6ae0fb2b772051725b17afe2c4e6fc

Rename showEditableBorder to showToolbar and deprecate using
  disable_border and enable_border for enable_toolbar and disable_toolbar

Files changed:
M CHANGES.rst
M Products/CMFPlone/browser/interfaces.py
M Products/CMFPlone/browser/ploneview.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 81dc0a3..e4ada32 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0b4 (unreleased)
 ----------------
 
+- Rename showEditableBorder to showToolbar and deprecate using
+  disable_border and enable_border for enable_toolbar and disable_toolbar
+  [vangheem]
+
 - Not using less variables in toolbar everywhere
   [vangheem]
 
@@ -16,6 +20,9 @@ Changelog
 - Rework timezone selection in @@plone-addsite.
   [jaroel]
 
+- Rework language selection in @@plone-addsite.
+  [jaroel]
+
 
 5.0b3 (2015-07-20)
 ------------------
diff --git a/Products/CMFPlone/browser/interfaces.py b/Products/CMFPlone/browser/interfaces.py
index da75767..7a512dc 100644
--- a/Products/CMFPlone/browser/interfaces.py
+++ b/Products/CMFPlone/browser/interfaces.py
@@ -287,7 +287,7 @@ def getViewTemplateId():
            the context object.
         """
 
-    def showEditableBorder():
+    def showToolbar():
         """Returns true if the editable border should be shown
         """
 
diff --git a/Products/CMFPlone/browser/ploneview.py b/Products/CMFPlone/browser/ploneview.py
index f5374f6..6a5e611 100644
--- a/Products/CMFPlone/browser/ploneview.py
+++ b/Products/CMFPlone/browser/ploneview.py
@@ -1,26 +1,16 @@
-from plone.app.content.browser.folderfactories import _allowedTypes
-from plone.memoize.view import memoize
-from zope.interface import implements
-from zope.component import getMultiAdapter
-from zope.i18n import translate
-from zope.size import byteDisplay
-
 from Acquisition import aq_inner
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.permissions import DeleteObjects
-from Products.CMFCore.permissions import ListFolderContents
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.permissions import ReviewPortalContent
-from Products.CMFCore.utils import _checkPermission
 from Products.CMFCore.utils import getToolByName
-from Products.Five import BrowserView
-
 from Products.CMFPlone import utils
 from Products.CMFPlone.browser.interfaces import IPlone
 from Products.CMFPlone.log import log_deprecated
-
-from plone.app.layout.globals.interfaces import IPatternsSettingsRenderer
-
+from Products.Five import BrowserView
+from plone.app.content.browser.folderfactories import _allowedTypes
+from plone.memoize.view import memoize
+from zope.component import getMultiAdapter
+from zope.deprecation import deprecated
+from zope.i18n import translate
+from zope.interface import implements
+from zope.size import byteDisplay
 
 _marker = []
 
@@ -70,13 +60,13 @@ def visibleIdsEnabled(self):
     # This can't be request-memoized, because it won't necessarily remain
     # valid across traversals. For example, you may get tabs on an error
     # message.
-    def showEditableBorder(self):
+    def showToolbar(self):
         """Determine if the editable border should be shown
         """
         request = self.request
-        if 'disable_border' in request:
+        if 'disable_border' in request or 'disable_toolbar' in request:
             return False
-        if 'enable_border' in request:
+        if 'enable_border' in request or 'enable_toolbar' in request:
             return True
 
         context = aq_inner(self.context)
@@ -84,9 +74,9 @@ def showEditableBorder(self):
         portal_membership = getToolByName(context, 'portal_membership')
         checkPerm = portal_membership.checkPermission
 
-        if checkPerm('Modify portal content', context) or \
-               checkPerm('Add portal content', context) or \
-               checkPerm('Review portal content', context):
+        if (checkPerm('Modify portal content', context) or
+            checkPerm('Add portal content', context) or
+                checkPerm('Review portal content', context)):
             return True
 
         if portal_membership.isAnonymousUser():
@@ -128,6 +118,10 @@ def showEditableBorder(self):
 
         return False
 
+    def showEditableBorder(self):
+        return self.showToolbar()
+    deprecated(showEditableBorder, 'showEditableBorder is renamed to showToolbar')
+
     def normalizeString(self, text):
         """Normalizes a title to an id.
         """
@@ -238,7 +232,8 @@ def mark_view(self, view):
         """Adds a marker interface to the view if it is "the" view for the
         context May only be called from a template.
         """
-        log_deprecated("@@plone_view/mark_view as been deprecated, you should use @@plone_layout/mark_view")
+        log_deprecated("@@plone_view/mark_view as been deprecated, you should use "
+                       "@@plone_layout/mark_view")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         layout.mark_view(view)
@@ -246,7 +241,8 @@ def mark_view(self, view):
     def hide_columns(self, column_left, column_right):
         """Returns a CSS class matching the current column status.
         """
-        log_deprecated("@@plone_view/hide_columns as been deprecated, you should use @@plone_layout/hide_columns")
+        log_deprecated("@@plone_view/hide_columns as been deprecated, you should use "
+                       "@@plone_layout/hide_columns")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.hide_columns(column_left, column_right)
@@ -254,7 +250,8 @@ def hide_columns(self, column_left, column_right):
     def icons_visible(self):
         """Returns True if icons should be shown or False otherwise.
         """
-        log_deprecated("@@plone_view/icons_visible as been deprecated, you should use @@plone_layout/icons_visible")
+        log_deprecated("@@plone_view/icons_visible as been deprecated, you should use "
+                       "@@plone_layout/icons_visible")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.icons_visible()
@@ -266,7 +263,8 @@ def getIcon(self, item):
         globally or just for anonymous users with the icon_visibility property
         in site_properties.
         """
-        log_deprecated("@@plone_view/getIcon as been deprecated, you should use @@plone_layout/getIcon")
+        log_deprecated("@@plone_view/getIcon as been deprecated, you should use "
+                       "@@plone_layout/getIcon")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.getIcon(item)
@@ -275,7 +273,8 @@ def have_portlets(self, manager_name, view=None):
         """Determine whether a column should be shown. The left column is
         called plone.leftcolumn; the right column is called plone.rightcolumn.
         """
-        log_deprecated("@@plone_view/have_portlets as been deprecated, you should use @@plone_layout/have_portlets")
+        log_deprecated("@@plone_view/have_portlets as been deprecated, you should "
+                       "use @@plone_layout/have_portlets")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.have_portlets(manager_name, view=view)
@@ -283,7 +282,8 @@ def have_portlets(self, manager_name, view=None):
     def bodyClass(self, template, view):
         """Returns the CSS class to be used on the body tag.
         """
-        log_deprecated("@@plone_view/bodyClass as been deprecated, you should use @@plone_layout/bodyClass")
+        log_deprecated("@@plone_view/bodyClass as been deprecated, you should use "
+                       "@@plone_layout/bodyClass")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.bodyClass(template, view)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-07-26T18:28:08+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/Products.CMFPlone/commit/4f027f2bb693a9cdae715da411f6cd5a0ca64b0e

Merge pull request #757 from plone/rename-showEditableBorder

Rename showEditableBorder to showToolbar

Files changed:
M CHANGES.rst
M Products/CMFPlone/browser/interfaces.py
M Products/CMFPlone/browser/ploneview.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 81dc0a3..e4ada32 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0b4 (unreleased)
 ----------------
 
+- Rename showEditableBorder to showToolbar and deprecate using
+  disable_border and enable_border for enable_toolbar and disable_toolbar
+  [vangheem]
+
 - Not using less variables in toolbar everywhere
   [vangheem]
 
@@ -16,6 +20,9 @@ Changelog
 - Rework timezone selection in @@plone-addsite.
   [jaroel]
 
+- Rework language selection in @@plone-addsite.
+  [jaroel]
+
 
 5.0b3 (2015-07-20)
 ------------------
diff --git a/Products/CMFPlone/browser/interfaces.py b/Products/CMFPlone/browser/interfaces.py
index da75767..7a512dc 100644
--- a/Products/CMFPlone/browser/interfaces.py
+++ b/Products/CMFPlone/browser/interfaces.py
@@ -287,7 +287,7 @@ def getViewTemplateId():
            the context object.
         """
 
-    def showEditableBorder():
+    def showToolbar():
         """Returns true if the editable border should be shown
         """
 
diff --git a/Products/CMFPlone/browser/ploneview.py b/Products/CMFPlone/browser/ploneview.py
index f5374f6..6a5e611 100644
--- a/Products/CMFPlone/browser/ploneview.py
+++ b/Products/CMFPlone/browser/ploneview.py
@@ -1,26 +1,16 @@
-from plone.app.content.browser.folderfactories import _allowedTypes
-from plone.memoize.view import memoize
-from zope.interface import implements
-from zope.component import getMultiAdapter
-from zope.i18n import translate
-from zope.size import byteDisplay
-
 from Acquisition import aq_inner
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.permissions import DeleteObjects
-from Products.CMFCore.permissions import ListFolderContents
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.permissions import ReviewPortalContent
-from Products.CMFCore.utils import _checkPermission
 from Products.CMFCore.utils import getToolByName
-from Products.Five import BrowserView
-
 from Products.CMFPlone import utils
 from Products.CMFPlone.browser.interfaces import IPlone
 from Products.CMFPlone.log import log_deprecated
-
-from plone.app.layout.globals.interfaces import IPatternsSettingsRenderer
-
+from Products.Five import BrowserView
+from plone.app.content.browser.folderfactories import _allowedTypes
+from plone.memoize.view import memoize
+from zope.component import getMultiAdapter
+from zope.deprecation import deprecated
+from zope.i18n import translate
+from zope.interface import implements
+from zope.size import byteDisplay
 
 _marker = []
 
@@ -70,13 +60,13 @@ def visibleIdsEnabled(self):
     # This can't be request-memoized, because it won't necessarily remain
     # valid across traversals. For example, you may get tabs on an error
     # message.
-    def showEditableBorder(self):
+    def showToolbar(self):
         """Determine if the editable border should be shown
         """
         request = self.request
-        if 'disable_border' in request:
+        if 'disable_border' in request or 'disable_toolbar' in request:
             return False
-        if 'enable_border' in request:
+        if 'enable_border' in request or 'enable_toolbar' in request:
             return True
 
         context = aq_inner(self.context)
@@ -84,9 +74,9 @@ def showEditableBorder(self):
         portal_membership = getToolByName(context, 'portal_membership')
         checkPerm = portal_membership.checkPermission
 
-        if checkPerm('Modify portal content', context) or \
-               checkPerm('Add portal content', context) or \
-               checkPerm('Review portal content', context):
+        if (checkPerm('Modify portal content', context) or
+            checkPerm('Add portal content', context) or
+                checkPerm('Review portal content', context)):
             return True
 
         if portal_membership.isAnonymousUser():
@@ -128,6 +118,10 @@ def showEditableBorder(self):
 
         return False
 
+    def showEditableBorder(self):
+        return self.showToolbar()
+    deprecated(showEditableBorder, 'showEditableBorder is renamed to showToolbar')
+
     def normalizeString(self, text):
         """Normalizes a title to an id.
         """
@@ -238,7 +232,8 @@ def mark_view(self, view):
         """Adds a marker interface to the view if it is "the" view for the
         context May only be called from a template.
         """
-        log_deprecated("@@plone_view/mark_view as been deprecated, you should use @@plone_layout/mark_view")
+        log_deprecated("@@plone_view/mark_view as been deprecated, you should use "
+                       "@@plone_layout/mark_view")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         layout.mark_view(view)
@@ -246,7 +241,8 @@ def mark_view(self, view):
     def hide_columns(self, column_left, column_right):
         """Returns a CSS class matching the current column status.
         """
-        log_deprecated("@@plone_view/hide_columns as been deprecated, you should use @@plone_layout/hide_columns")
+        log_deprecated("@@plone_view/hide_columns as been deprecated, you should use "
+                       "@@plone_layout/hide_columns")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.hide_columns(column_left, column_right)
@@ -254,7 +250,8 @@ def hide_columns(self, column_left, column_right):
     def icons_visible(self):
         """Returns True if icons should be shown or False otherwise.
         """
-        log_deprecated("@@plone_view/icons_visible as been deprecated, you should use @@plone_layout/icons_visible")
+        log_deprecated("@@plone_view/icons_visible as been deprecated, you should use "
+                       "@@plone_layout/icons_visible")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.icons_visible()
@@ -266,7 +263,8 @@ def getIcon(self, item):
         globally or just for anonymous users with the icon_visibility property
         in site_properties.
         """
-        log_deprecated("@@plone_view/getIcon as been deprecated, you should use @@plone_layout/getIcon")
+        log_deprecated("@@plone_view/getIcon as been deprecated, you should use "
+                       "@@plone_layout/getIcon")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.getIcon(item)
@@ -275,7 +273,8 @@ def have_portlets(self, manager_name, view=None):
         """Determine whether a column should be shown. The left column is
         called plone.leftcolumn; the right column is called plone.rightcolumn.
         """
-        log_deprecated("@@plone_view/have_portlets as been deprecated, you should use @@plone_layout/have_portlets")
+        log_deprecated("@@plone_view/have_portlets as been deprecated, you should "
+                       "use @@plone_layout/have_portlets")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.have_portlets(manager_name, view=view)
@@ -283,7 +282,8 @@ def have_portlets(self, manager_name, view=None):
     def bodyClass(self, template, view):
         """Returns the CSS class to be used on the body tag.
         """
-        log_deprecated("@@plone_view/bodyClass as been deprecated, you should use @@plone_layout/bodyClass")
+        log_deprecated("@@plone_view/bodyClass as been deprecated, you should use "
+                       "@@plone_layout/bodyClass")
         context = aq_inner(self.context)
         layout = getMultiAdapter((context, self.request), name=u'plone_layout')
         return layout.bodyClass(template, view)


