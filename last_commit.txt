Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-07-22T13:07:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.event/commit/e71fa4edc2595a6004a14440f223bd1c202d68ab

Revert "Revert "removing dependency on p.a.contenttypes""

Files changed:
M CHANGES.rst
M plone/app/event/browser/resources/event.js
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 447ade8..4c1c245 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,12 @@ Changelog
 2.0b2 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- initialize events.js javascript after all patterns are initialized.
+  [garbas]
+
+- removing dependency on plone.app.contenttypes that introduce with latest
+  changes to portlets code.
+  [garbas]
 
 
 2.0b1 (2015-07-18)
diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js
index 9c0a40e..dba0649 100644
--- a/plone/app/event/browser/resources/event.js
+++ b/plone/app/event/browser/resources/event.js
@@ -134,8 +134,7 @@ require([
         }
     }
 
-
-    $(window).load(function () {
+    function initilize_event() {
 
         // EDIT FORM
 
@@ -172,5 +171,16 @@ require([
         // EVENT LISTING CALENDAR POPUP
         event_listing_calendar_init($("#event_listing_calendar"));
 
-    });
+    };
+
+    // mockup-core should trigger event once it initiallized all patterns (in
+    // mockup-core) but it only sets body class once all patterns were
+    // initialized
+    var interval = setInterval(function(){
+      if ($(document.body).hasClass('patterns-loaded')) {
+        clearInterval(interval);
+        initilize_event();
+      }
+    }, 100);
+ 
 });
diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py
index c5c7094..eb63e19 100644
--- a/plone/app/event/portlets/portlet_calendar.py
+++ b/plone/app/event/portlets/portlet_calendar.py
@@ -2,8 +2,6 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
-from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import RET_MODE_OBJECTS
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import expand_events
@@ -30,7 +28,16 @@
 
 try:
     from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
+    from plone.app.contenttypes.interfaces import IFolder
+    search_base_uid_source = CatalogSource(object_provides={
+        'query': [
+            ICollection.__identifier__,
+            IFolder.__identifier__
+        ],
+        'operator': 'or'
+    })
 except ImportError:
+    search_base_uid_source = CatalogSource(is_folderish=True)
     ICollection = None
 
 PLMF = MessageFactory('plonelocales')
@@ -60,13 +67,7 @@ class ICalendarPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=CatalogSource(object_provides={
-            'query': [
-                ISyndicatableCollection.__identifier__,
-                IFolder.__identifier__
-            ],
-            'operator': 'or'
-        }),
+        source=search_base_uid_source,
     )
 
 
@@ -208,7 +209,7 @@ def cal_data(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection.providedBy(search_base):
+        if ICollection and ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,
diff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py
index eff12c6..cca8cca 100644
--- a/plone/app/event/portlets/portlet_events.py
+++ b/plone/app/event/portlets/portlet_events.py
@@ -2,20 +2,19 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
-from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import expand_events
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import start_end_query
-
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import get_events
 from plone.app.event.base import localized_now
 from plone.app.event.portlets import get_calendar_url
+from plone.app.event.portlets.portlet_events import (
+    ICollection, search_base_uid_source
+)
 from plone.app.portlets import PloneMessageFactory as _
 from plone.app.portlets.portlets import base
 from plone.app.uuid.utils import uuidToObject
-from plone.app.vocabularies.catalog import CatalogSource
 from plone.memoize.compress import xhtml_compress
 from plone.portlets.interfaces import IPortletDataProvider
 from zExceptions import NotFound
@@ -25,11 +24,6 @@
 from zope.interface import implementer
 from plone.app.querystring import queryparser
 
-try:
-    from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
-except ImportError:
-    ICollection = None
-
 
 class IEventsPortlet(IPortletDataProvider):
 
@@ -61,13 +55,7 @@ class IEventsPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=CatalogSource(object_provides={
-            'query': [
-                ISyndicatableCollection.__identifier__,
-                IFolder.__identifier__
-            ],
-            'operator': 'or'
-        }),
+        source=search_base_uid_source,
     )
 
 
@@ -155,7 +143,7 @@ def events(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection.providedBy(search_base):
+        if ICollection and ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-07-22T18:58:31+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/b24cd1a88839df1759a70eea050266455fa7555d

correct import error

Files changed:
M plone/app/event/portlets/portlet_events.py

diff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py
index cca8cca..7e339cb 100644
--- a/plone/app/event/portlets/portlet_events.py
+++ b/plone/app/event/portlets/portlet_events.py
@@ -9,7 +9,7 @@
 from plone.app.event.base import get_events
 from plone.app.event.base import localized_now
 from plone.app.event.portlets import get_calendar_url
-from plone.app.event.portlets.portlet_events import (
+from plone.app.event.portlets.portlet_calendar import (
     ICollection, search_base_uid_source
 )
 from plone.app.portlets import PloneMessageFactory as _


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-07-23T01:10:59+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/fb5efabf27f5b40f423d45b3b9de842b6b5a18c5

Merge pull request #197 from plone/revert-196-revert-195-master

"removing dependency on p.a.contenttypes" second trial (Revert "Revert #195)

Files changed:
M CHANGES.rst
M plone/app/event/browser/resources/event.js
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 447ade8..4c1c245 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,12 @@ Changelog
 2.0b2 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- initialize events.js javascript after all patterns are initialized.
+  [garbas]
+
+- removing dependency on plone.app.contenttypes that introduce with latest
+  changes to portlets code.
+  [garbas]
 
 
 2.0b1 (2015-07-18)
diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js
index 9c0a40e..dba0649 100644
--- a/plone/app/event/browser/resources/event.js
+++ b/plone/app/event/browser/resources/event.js
@@ -134,8 +134,7 @@ require([
         }
     }
 
-
-    $(window).load(function () {
+    function initilize_event() {
 
         // EDIT FORM
 
@@ -172,5 +171,16 @@ require([
         // EVENT LISTING CALENDAR POPUP
         event_listing_calendar_init($("#event_listing_calendar"));
 
-    });
+    };
+
+    // mockup-core should trigger event once it initiallized all patterns (in
+    // mockup-core) but it only sets body class once all patterns were
+    // initialized
+    var interval = setInterval(function(){
+      if ($(document.body).hasClass('patterns-loaded')) {
+        clearInterval(interval);
+        initilize_event();
+      }
+    }, 100);
+ 
 });
diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py
index c5c7094..eb63e19 100644
--- a/plone/app/event/portlets/portlet_calendar.py
+++ b/plone/app/event/portlets/portlet_calendar.py
@@ -2,8 +2,6 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
-from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import RET_MODE_OBJECTS
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import expand_events
@@ -30,7 +28,16 @@
 
 try:
     from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
+    from plone.app.contenttypes.interfaces import IFolder
+    search_base_uid_source = CatalogSource(object_provides={
+        'query': [
+            ICollection.__identifier__,
+            IFolder.__identifier__
+        ],
+        'operator': 'or'
+    })
 except ImportError:
+    search_base_uid_source = CatalogSource(is_folderish=True)
     ICollection = None
 
 PLMF = MessageFactory('plonelocales')
@@ -60,13 +67,7 @@ class ICalendarPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=CatalogSource(object_provides={
-            'query': [
-                ISyndicatableCollection.__identifier__,
-                IFolder.__identifier__
-            ],
-            'operator': 'or'
-        }),
+        source=search_base_uid_source,
     )
 
 
@@ -208,7 +209,7 @@ def cal_data(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection.providedBy(search_base):
+        if ICollection and ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,
diff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py
index eff12c6..7e339cb 100644
--- a/plone/app/event/portlets/portlet_events.py
+++ b/plone/app/event/portlets/portlet_events.py
@@ -2,20 +2,19 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
-from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import expand_events
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import start_end_query
-
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import get_events
 from plone.app.event.base import localized_now
 from plone.app.event.portlets import get_calendar_url
+from plone.app.event.portlets.portlet_calendar import (
+    ICollection, search_base_uid_source
+)
 from plone.app.portlets import PloneMessageFactory as _
 from plone.app.portlets.portlets import base
 from plone.app.uuid.utils import uuidToObject
-from plone.app.vocabularies.catalog import CatalogSource
 from plone.memoize.compress import xhtml_compress
 from plone.portlets.interfaces import IPortletDataProvider
 from zExceptions import NotFound
@@ -25,11 +24,6 @@
 from zope.interface import implementer
 from plone.app.querystring import queryparser
 
-try:
-    from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
-except ImportError:
-    ICollection = None
-
 
 class IEventsPortlet(IPortletDataProvider):
 
@@ -61,13 +55,7 @@ class IEventsPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=CatalogSource(object_provides={
-            'query': [
-                ISyndicatableCollection.__identifier__,
-                IFolder.__identifier__
-            ],
-            'operator': 'or'
-        }),
+        source=search_base_uid_source,
     )
 
 
@@ -155,7 +143,7 @@ def events(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection.providedBy(search_base):
+        if ICollection and ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,


