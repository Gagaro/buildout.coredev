Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-14T11:02:44+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/e13f7db980e679180ba322308d2bede5ef640ef8

since short name is control by behaviors now, remove this setting as it does not do anything

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index e2da383..3193f62 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -72,17 +72,6 @@ def enumConfiglets(group=None):  # NOQA
 
 class IEditingSchema(Interface):
 
-    visible_ids = schema.Bool(
-        title=_(u"Show 'Short Name' on content?"),
-        description=_(
-            u"Display and allow users to edit the "
-            u"'Short name' content identifiers, which form the "
-            u"URL part of a content item's address. Once "
-            u"enabled, users will then be able to enable this "
-            u"option in their preferences."),
-        default=False,
-        required=False)
-
     available_editors = schema.List(
         title=_(u'Available editors'),
         description=_(u"Available editors in the portal."),


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-14T11:02:44+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c6ef23a34c06aa96fe8e2b475d080823ad81b422

remove tests related to visibile ids

Files changed:
M Products/CMFPlone/browser/interfaces.py
M Products/CMFPlone/browser/ploneview.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
M Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
M Products/CMFPlone/tests/testPloneView.py
M Products/CMFPlone/tests/testPortalCreation.py

diff --git a/Products/CMFPlone/browser/interfaces.py b/Products/CMFPlone/browser/interfaces.py
index 7a512dc..6a0cde8 100644
--- a/Products/CMFPlone/browser/interfaces.py
+++ b/Products/CMFPlone/browser/interfaces.py
@@ -200,11 +200,6 @@ class IPlone(Interface):
     def getCurrentUrl():
         """ Returns the actual url plus the query string. """
 
-    def visibleIdsEnabled():
-        """Determines whether to show object ids based on portal and user
-           settings.
-        """
-
     def uniqueItemIndex(pos=0):
         """Return an index iterator."""
 
diff --git a/Products/CMFPlone/browser/ploneview.py b/Products/CMFPlone/browser/ploneview.py
index 315f198..aa3189c 100644
--- a/Products/CMFPlone/browser/ploneview.py
+++ b/Products/CMFPlone/browser/ploneview.py
@@ -6,9 +6,6 @@
 from Products.CMFPlone.browser.interfaces import IPlone
 from Products.Five import BrowserView
 from zope.component import getMultiAdapter
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import IEditingSchema
 from zope.deprecation import deprecate
 from zope.i18n import translate
 from zope.interface import implementer
@@ -41,25 +38,6 @@ def toLocalizedSize(self, size):
         """
         return translate(byteDisplay(size), context=self.request)
 
-    @memoize
-    def visibleIdsEnabled(self):
-        """Determine if visible ids are enabled
-        """
-        context = aq_inner(self.context)
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(IEditingSchema, prefix="plone")
-        if not settings.visible_ids:
-            return False
-
-        pm = getToolByName(context, "portal_membership")
-        if pm.isAnonymousUser():
-            return False
-
-        user = pm.getAuthenticatedMember()
-        if user is not None:
-            return user.getProperty('visible_ids', False)
-        return False
-
     # This can't be request-memoized, because it won't necessarily remain
     # valid across traversals. For example, you may get tabs on an error
     # message.
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
index 6ea1503..cd79a08 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
@@ -22,28 +22,6 @@ def setUp(self):
     def test_adapter_lookup(self):
         self.assertTrue(getAdapter(self.portal, IEditingSchema))
 
-    def test_get_visible_ids(self):
-        self.assertEqual(
-            getAdapter(self.portal, IEditingSchema).visible_ids,
-            False
-        )
-        self.settings.visible_ids = True
-        self.assertEqual(
-            getAdapter(self.portal, IEditingSchema).visible_ids,
-            True
-        )
-
-    def test_set_visible_ids(self):
-        self.assertEqual(
-            self.settings.visible_ids,
-            False
-        )
-        getAdapter(self.portal, IEditingSchema).visible_ids = True
-        self.assertEqual(
-            self.settings.visible_ids,
-            True
-        )
-
     def test_get_enable_link_integrity_checks_setting(self):
         self.assertEqual(
             getAdapter(self.portal, IEditingSchema).enable_link_integrity_checks,  # noqa
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
index 5c5ee4e..4da449c 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
@@ -51,15 +51,6 @@ def test_editing_control_panel_sidebar(self):
             self.browser.url,
             'http://nohost/plone/@@overview-controlpanel')
 
-    def test_visible_ids(self):
-        self.browser.open(
-            "%s/@@editing-controlpanel" % self.portal_url)
-        self.browser.getControl("Show 'Short Name' on content?")\
-            .selected = True
-        self.browser.getControl('Save').click()
-
-        self.assertEqual(self.settings.visible_ids, True)
-
     @unittest.skip("TODO: Not implemented yet.")
     def test_visible_ids_active(self):
         pass
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
index 7efae9e..a7d3482 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
@@ -35,9 +35,6 @@ def test_editing_in_controlpanel(self):
             for a in self.controlpanel.listActions()
         ])
 
-    def test_visible_ids_attribute_exists(self):
-        self.assertTrue(hasattr(self.settings, 'visible_ids'))
-
     def test_default_editor_attribute_exists(self):
         self.assertTrue(hasattr(self.settings, 'default_editor'))
 
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
index d67adc2..ebeaf19 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
@@ -13,12 +13,6 @@ Test Teardown  Run keywords  Report test status  Close all browsers
 
 *** Test Cases ***************************************************************
 
-Scenario: Enable Visible IDs in the Editing Control Panel
-  Given a logged-in site administrator
-    and the editing control panel
-   When I enable visible ids
-   Then I can see an id field in the settings tab when I create a document
-
 Scenario: Disable Standard Editor in the Editing Control Panel
   Given a logged-in site administrator
     and the editing control panel
@@ -63,11 +57,6 @@ the editing control panel
 
 # --- WHEN -------------------------------------------------------------------
 
-I enable visible ids
-  Select Checkbox  form.widgets.visible_ids:list
-  Click Button  Save
-  Wait until page contains  Changes saved
-
 I disable the standard editor
   Select from list by label  name=form.widgets.default_editor:list  None
   Click Button  Save
diff --git a/Products/CMFPlone/tests/testPloneView.py b/Products/CMFPlone/tests/testPloneView.py
index c6538fe..dc7aa92 100644
--- a/Products/CMFPlone/tests/testPloneView.py
+++ b/Products/CMFPlone/tests/testPloneView.py
@@ -153,34 +153,3 @@ def testCropText(self):
     def testSiteEncoding(self):
         view = Plone(self.portal, self.app.REQUEST)
         self.assertEqual('utf-8', view.site_encoding())
-
-
-class TestVisibleIdsEnabled(PloneTestCase.PloneTestCase):
-    '''Tests the visibleIdsEnabled method'''
-
-    def afterSetUp(self):
-        self.view = Plone(self.portal, self.app.REQUEST)
-        self.member = self.portal.portal_membership.getAuthenticatedMember()
-        registry = getUtility(IRegistry)
-        self.props = registry.forInterface(IEditingSchema, prefix="plone")
-
-    def testFailsWithSitePropertyDisabled(self):
-        # Set baseline
-        self.member.setProperties(visible_ids=False)
-        self.props.visible_ids = False
-        # Should fail when site property is set false
-        self.assertFalse(self.view.visibleIdsEnabled())
-        self.member.setProperties(visible_ids=True)
-        self.assertFalse(self.view.visibleIdsEnabled())
-
-    def testFailsWithMemberPropertyDisabled(self):
-        # Should fail when member property is false
-        self.member.setProperties(visible_ids=False)
-        self.props.visible_ids = True
-        self.assertFalse(self.view.visibleIdsEnabled())
-
-    def testSucceedsWithMemberAndSitePropertyEnabled(self):
-        # Should succeed only when site property and member property are true
-        self.props.visible_ids = True
-        self.member.setProperties(visible_ids=True)
-        self.assertTrue(self.view.visibleIdsEnabled())
diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py
index c5c2c57..79901d2 100644
--- a/Products/CMFPlone/tests/testPortalCreation.py
+++ b/Products/CMFPlone/tests/testPortalCreation.py
@@ -175,12 +175,6 @@ def testNoNavigationProperties(self):
         # navigation_properties should have been removed
         self.assertFalse('navigation_properties' in self.properties)
 
-    def testVisibleIdsProperties(self):
-        # visible_ids should be a site property and a memberdata property
-        registry = getUtility(IRegistry)
-        self.assertTrue('plone.visible_ids' in registry)
-        self.assertTrue(self.memberdata.hasProperty('visible_ids'))
-
     def testFormToolTipsProperty(self):
         # formtooltips should have been removed
         self.assertFalse(self.memberdata.hasProperty('formtooltips'))


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-14T11:02:44+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/9ca2475190e1ffc4d2764ebfecc012dedd0aad41

one more test to remove

Files changed:
M Products/CMFPlone/controlpanel/README.rst

diff --git a/Products/CMFPlone/controlpanel/README.rst b/Products/CMFPlone/controlpanel/README.rst
index f3ba7c6..c52623e 100644
--- a/Products/CMFPlone/controlpanel/README.rst
+++ b/Products/CMFPlone/controlpanel/README.rst
@@ -39,9 +39,6 @@ Editing Control Panel
   >>> from Products.CMFPlone.interfaces import IEditingSchema
   >>> editing_settings = registry.forInterface(IEditingSchema, prefix='plone')
 
-  >>> editing_settings.visible_ids
-  False
-
   >>> editing_settings.default_editor
   u'TinyMCE'
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-14T11:37:15+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/4444a4acbf16d8824ba202a84ce482c7e4c84697

Merge pull request #968 from plone/remove-short-name-setting

since short name is controlled by behaviors now

Files changed:
M Products/CMFPlone/browser/interfaces.py
M Products/CMFPlone/browser/ploneview.py
M Products/CMFPlone/controlpanel/README.rst
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
M Products/CMFPlone/tests/testPloneView.py
M Products/CMFPlone/tests/testPortalCreation.py

diff --git a/Products/CMFPlone/browser/interfaces.py b/Products/CMFPlone/browser/interfaces.py
index 7a512dc..6a0cde8 100644
--- a/Products/CMFPlone/browser/interfaces.py
+++ b/Products/CMFPlone/browser/interfaces.py
@@ -200,11 +200,6 @@ class IPlone(Interface):
     def getCurrentUrl():
         """ Returns the actual url plus the query string. """
 
-    def visibleIdsEnabled():
-        """Determines whether to show object ids based on portal and user
-           settings.
-        """
-
     def uniqueItemIndex(pos=0):
         """Return an index iterator."""
 
diff --git a/Products/CMFPlone/browser/ploneview.py b/Products/CMFPlone/browser/ploneview.py
index 315f198..aa3189c 100644
--- a/Products/CMFPlone/browser/ploneview.py
+++ b/Products/CMFPlone/browser/ploneview.py
@@ -6,9 +6,6 @@
 from Products.CMFPlone.browser.interfaces import IPlone
 from Products.Five import BrowserView
 from zope.component import getMultiAdapter
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import IEditingSchema
 from zope.deprecation import deprecate
 from zope.i18n import translate
 from zope.interface import implementer
@@ -41,25 +38,6 @@ def toLocalizedSize(self, size):
         """
         return translate(byteDisplay(size), context=self.request)
 
-    @memoize
-    def visibleIdsEnabled(self):
-        """Determine if visible ids are enabled
-        """
-        context = aq_inner(self.context)
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(IEditingSchema, prefix="plone")
-        if not settings.visible_ids:
-            return False
-
-        pm = getToolByName(context, "portal_membership")
-        if pm.isAnonymousUser():
-            return False
-
-        user = pm.getAuthenticatedMember()
-        if user is not None:
-            return user.getProperty('visible_ids', False)
-        return False
-
     # This can't be request-memoized, because it won't necessarily remain
     # valid across traversals. For example, you may get tabs on an error
     # message.
diff --git a/Products/CMFPlone/controlpanel/README.rst b/Products/CMFPlone/controlpanel/README.rst
index f3ba7c6..c52623e 100644
--- a/Products/CMFPlone/controlpanel/README.rst
+++ b/Products/CMFPlone/controlpanel/README.rst
@@ -39,9 +39,6 @@ Editing Control Panel
   >>> from Products.CMFPlone.interfaces import IEditingSchema
   >>> editing_settings = registry.forInterface(IEditingSchema, prefix='plone')
 
-  >>> editing_settings.visible_ids
-  False
-
   >>> editing_settings.default_editor
   u'TinyMCE'
 
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
index 6ea1503..cd79a08 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_editing_adapter.py
@@ -22,28 +22,6 @@ def setUp(self):
     def test_adapter_lookup(self):
         self.assertTrue(getAdapter(self.portal, IEditingSchema))
 
-    def test_get_visible_ids(self):
-        self.assertEqual(
-            getAdapter(self.portal, IEditingSchema).visible_ids,
-            False
-        )
-        self.settings.visible_ids = True
-        self.assertEqual(
-            getAdapter(self.portal, IEditingSchema).visible_ids,
-            True
-        )
-
-    def test_set_visible_ids(self):
-        self.assertEqual(
-            self.settings.visible_ids,
-            False
-        )
-        getAdapter(self.portal, IEditingSchema).visible_ids = True
-        self.assertEqual(
-            self.settings.visible_ids,
-            True
-        )
-
     def test_get_enable_link_integrity_checks_setting(self):
         self.assertEqual(
             getAdapter(self.portal, IEditingSchema).enable_link_integrity_checks,  # noqa
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
index 5c5ee4e..4da449c 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
@@ -51,15 +51,6 @@ def test_editing_control_panel_sidebar(self):
             self.browser.url,
             'http://nohost/plone/@@overview-controlpanel')
 
-    def test_visible_ids(self):
-        self.browser.open(
-            "%s/@@editing-controlpanel" % self.portal_url)
-        self.browser.getControl("Show 'Short Name' on content?")\
-            .selected = True
-        self.browser.getControl('Save').click()
-
-        self.assertEqual(self.settings.visible_ids, True)
-
     @unittest.skip("TODO: Not implemented yet.")
     def test_visible_ids_active(self):
         pass
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
index 7efae9e..a7d3482 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_editing.py
@@ -35,9 +35,6 @@ def test_editing_in_controlpanel(self):
             for a in self.controlpanel.listActions()
         ])
 
-    def test_visible_ids_attribute_exists(self):
-        self.assertTrue(hasattr(self.settings, 'visible_ids'))
-
     def test_default_editor_attribute_exists(self):
         self.assertTrue(hasattr(self.settings, 'default_editor'))
 
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index e2da383..3193f62 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -72,17 +72,6 @@ def enumConfiglets(group=None):  # NOQA
 
 class IEditingSchema(Interface):
 
-    visible_ids = schema.Bool(
-        title=_(u"Show 'Short Name' on content?"),
-        description=_(
-            u"Display and allow users to edit the "
-            u"'Short name' content identifiers, which form the "
-            u"URL part of a content item's address. Once "
-            u"enabled, users will then be able to enable this "
-            u"option in their preferences."),
-        default=False,
-        required=False)
-
     available_editors = schema.List(
         title=_(u'Available editors'),
         description=_(u"Available editors in the portal."),
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
index d67adc2..ebeaf19 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
@@ -13,12 +13,6 @@ Test Teardown  Run keywords  Report test status  Close all browsers
 
 *** Test Cases ***************************************************************
 
-Scenario: Enable Visible IDs in the Editing Control Panel
-  Given a logged-in site administrator
-    and the editing control panel
-   When I enable visible ids
-   Then I can see an id field in the settings tab when I create a document
-
 Scenario: Disable Standard Editor in the Editing Control Panel
   Given a logged-in site administrator
     and the editing control panel
@@ -63,11 +57,6 @@ the editing control panel
 
 # --- WHEN -------------------------------------------------------------------
 
-I enable visible ids
-  Select Checkbox  form.widgets.visible_ids:list
-  Click Button  Save
-  Wait until page contains  Changes saved
-
 I disable the standard editor
   Select from list by label  name=form.widgets.default_editor:list  None
   Click Button  Save
diff --git a/Products/CMFPlone/tests/testPloneView.py b/Products/CMFPlone/tests/testPloneView.py
index c6538fe..dc7aa92 100644
--- a/Products/CMFPlone/tests/testPloneView.py
+++ b/Products/CMFPlone/tests/testPloneView.py
@@ -153,34 +153,3 @@ def testCropText(self):
     def testSiteEncoding(self):
         view = Plone(self.portal, self.app.REQUEST)
         self.assertEqual('utf-8', view.site_encoding())
-
-
-class TestVisibleIdsEnabled(PloneTestCase.PloneTestCase):
-    '''Tests the visibleIdsEnabled method'''
-
-    def afterSetUp(self):
-        self.view = Plone(self.portal, self.app.REQUEST)
-        self.member = self.portal.portal_membership.getAuthenticatedMember()
-        registry = getUtility(IRegistry)
-        self.props = registry.forInterface(IEditingSchema, prefix="plone")
-
-    def testFailsWithSitePropertyDisabled(self):
-        # Set baseline
-        self.member.setProperties(visible_ids=False)
-        self.props.visible_ids = False
-        # Should fail when site property is set false
-        self.assertFalse(self.view.visibleIdsEnabled())
-        self.member.setProperties(visible_ids=True)
-        self.assertFalse(self.view.visibleIdsEnabled())
-
-    def testFailsWithMemberPropertyDisabled(self):
-        # Should fail when member property is false
-        self.member.setProperties(visible_ids=False)
-        self.props.visible_ids = True
-        self.assertFalse(self.view.visibleIdsEnabled())
-
-    def testSucceedsWithMemberAndSitePropertyEnabled(self):
-        # Should succeed only when site property and member property are true
-        self.props.visible_ids = True
-        self.member.setProperties(visible_ids=True)
-        self.assertTrue(self.view.visibleIdsEnabled())
diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py
index c5c2c57..79901d2 100644
--- a/Products/CMFPlone/tests/testPortalCreation.py
+++ b/Products/CMFPlone/tests/testPortalCreation.py
@@ -175,12 +175,6 @@ def testNoNavigationProperties(self):
         # navigation_properties should have been removed
         self.assertFalse('navigation_properties' in self.properties)
 
-    def testVisibleIdsProperties(self):
-        # visible_ids should be a site property and a memberdata property
-        registry = getUtility(IRegistry)
-        self.assertTrue('plone.visible_ids' in registry)
-        self.assertTrue(self.memberdata.hasProperty('visible_ids'))
-
     def testFormToolTipsProperty(self):
         # formtooltips should have been removed
         self.assertFalse(self.memberdata.hasProperty('formtooltips'))


