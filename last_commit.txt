Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-02T20:23:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/dda8fb0f64b48c86c67e3ae5fad1a92d38523d26

When migration fails, do not upgrade addons or recatalog or update roles.

Otherwise those parts will get executed and saved to the database,
which might make things worse.

Files changed:
M CHANGES.rst
M Products/CMFPlone/MigrationTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a38fff2..71309dc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0.1 (unreleased)
 ------------------
 
+- When migration fails, do not upgrade addons or recatalog or
+  update roles.
+  [maurits]
+
 - Allow all TinyMCE settings to be set from control panel.
   [Gagaro]
 
diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index 3df7dd4..ddbb00a 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -271,50 +271,51 @@ def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
                         transaction.abort()
                         break
 
-            logger.info("Starting upgrade of core addons.")
-            ADDON_LIST.upgrade_all(self)
-            logger.info("Done upgrading core addons.")
-
-            logger.info("End of upgrade path, migration has finished")
+            logger.info("End of upgrade path, main migration has finished.")
 
             if self.needUpgrading():
-                logger.error("The upgrade path did NOT reach current version")
+                logger.error("The upgrade path did NOT reach current version.")
                 logger.error("Migration has failed")
             else:
-                logger.info("Your Plone instance is now up-to-date.")
+                logger.info("Starting upgrade of core addons.")
+                ADDON_LIST.upgrade_all(self)
+                logger.info("Done upgrading core addons.")
 
-            # do this once all the changes have been done
-            if self.needRecatalog():
-                try:
-                    catalog = self.portal_catalog
-                    # Reduce threshold for the reindex run
-                    old_threshold = catalog.threshold
-                    pg_threshold = getattr(catalog, 'pgthreshold', 0)
-                    catalog.pgthreshold = 300
-                    catalog.threshold = 2000
-                    catalog.refreshCatalog(clear=1)
-                    catalog.threshold = old_threshold
-                    catalog.pgthreshold = pg_threshold
-                    self._needRecatalog = 0
-                except (ConflictError, KeyboardInterrupt):
-                    raise
-                except:
-                    logger.error("Exception was thrown while cataloging:\n",
-                                 exc_info=True)
-                    if not swallow_errors:
+                # do this once all the changes have been done
+                if self.needRecatalog():
+                    logger.info("Recatalog needed. This may take a while...")
+                    try:
+                        catalog = self.portal_catalog
+                        # Reduce threshold for the reindex run
+                        old_threshold = catalog.threshold
+                        pg_threshold = getattr(catalog, 'pgthreshold', 0)
+                        catalog.pgthreshold = 300
+                        catalog.threshold = 2000
+                        catalog.refreshCatalog(clear=1)
+                        catalog.threshold = old_threshold
+                        catalog.pgthreshold = pg_threshold
+                        self._needRecatalog = 0
+                    except (ConflictError, KeyboardInterrupt):
                         raise
-
-            if self.needUpdateRole():
-                try:
-                    self.portal_workflow.updateRoleMappings()
-                    self._needUpdateRole = 0
-                except (ConflictError, KeyboardInterrupt):
-                    raise
-                except:
-                    logger.error("Exception was thrown while updating role "
-                                 "mappings", exc_info=True)
-                    if not swallow_errors:
+                    except:
+                        logger.error("Exception was thrown while cataloging:"
+                                     "\n", exc_info=True)
+                        if not swallow_errors:
+                            raise
+
+                if self.needUpdateRole():
+                    logger.info("Role update needed. This may take a while...")
+                    try:
+                        self.portal_workflow.updateRoleMappings()
+                        self._needUpdateRole = 0
+                    except (ConflictError, KeyboardInterrupt):
                         raise
+                    except:
+                        logger.error("Exception was thrown while updating "
+                                     "role mappings", exc_info=True)
+                        if not swallow_errors:
+                            raise
+                logger.info("Your Plone instance is now up-to-date.")
 
             if dry_run:
                 logger.info("Dry run selected, transaction aborted")


