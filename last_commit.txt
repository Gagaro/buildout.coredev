Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2015-07-30T15:42:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.vocabularies/commit/35a85a6f18881b35ae8d35f44533dd704166487b

cleanup: pep8, decorators, et al, pimped README

Files changed:
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/vocabularies/__init__.py
M plone/app/vocabularies/actions.py
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/datetimerelated.py
M plone/app/vocabularies/editors.py
M plone/app/vocabularies/groups.py
M plone/app/vocabularies/interfaces.py
M plone/app/vocabularies/language.py
M plone/app/vocabularies/security.py
M plone/app/vocabularies/skins.py
M plone/app/vocabularies/syndication.py
M plone/app/vocabularies/terms.py
M plone/app/vocabularies/testing.py
M plone/app/vocabularies/tests/__init__.py
M plone/app/vocabularies/tests/base.py
M plone/app/vocabularies/tests/test_timezonevocabularies.py
M plone/app/vocabularies/tests/test_vocabularies.py
M plone/app/vocabularies/types.py
M plone/app/vocabularies/users.py
M plone/app/vocabularies/workflow.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9ce01f0..73790d8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 2.1.20 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Cleanup: PEP8, decorators for zca, et al. Also pimped the README.
+  [jensens]
 
 
 2.1.19 (2015-07-29)
diff --git a/README.rst b/README.rst
index df1e186..8b09420 100644
--- a/README.rst
+++ b/README.rst
@@ -1,50 +1,124 @@
 Overview
 ========
 
-A collection of generally useful vocabularies.
+A collection of generally useful vocabularies for Plone.
+
+It is implemented using ``zope.schema.vocabulary``.
+Intended to be used as a base and example for custom vocabularies.
 
 
 Common Named Vocabularies
 =========================
 
-* plone.app.vocabularies.AvailableContentLanguages
-* plone.app.vocabularies.SupportedContentLanguages
-* plone.app.vocabularies.Roles
-* plone.app.vocabularies.Groups
-* plone.app.vocabularies.AllowedContentTypes
-* plone.app.vocabularies.AllowableContentTypes
-* plone.app.vocabularies.PortalTypes
-* plone.app.vocabularies.ReallyUserFriendlyTypes
-* plone.app.vocabularies.UserFriendlyTypes
-* plone.app.vocabularies.Skins
-* plone.app.vocabularies.Workflows
-* plone.app.vocabularies.WorkflowStates
-* plone.app.vocabularies.WorkflowTransitions
-* plone.app.vocabularies.AvailableEditors
-* plone.app.vocabularies.Keywords
-* plone.app.vocabularies.SyndicationFeedTypes
-* plone.app.vocabularies.SyndicatableFeedItems
-* plone.app.vocabularies.Users
-* plone.app.vocabularies.Catalog
-
-
-Date/Time Related Vocabularies
-==============================
+Languages
+---------
+
+``plone.app.vocabularies.AvailableContentLanguages``
+    all known languages
+
+``plone.app.vocabularies.SupportedContentLanguages``
+    currently configured/supported content languages for the portal
+
+
+Users, Groups, Security
+-----------------------
+
+``plone.app.vocabularies.Users``
+    user of the portal (searchable)
+
+``plone.app.vocabularies.Groups``
+    groups of the portal (searchable)
+
+``plone.app.vocabularies.Roles``
+    all possible roles in the portal
+
+Text Input Field
+----------------
+
+``plone.app.vocabularies.AllowedContentTypes``
+    Configured allowed mime-types (text/\*) for text input fields
+
+``plone.app.vocabularies.AllowableContentTypes``
+    All possible mime types (text/\*) for text input fields
+
+``plone.app.vocabularies.AvailableEditors``
+    Configured WYSIWIG editors
+
+
+Portal Types
+------------
+
+``plone.app.vocabularies.PortalTypes``
+    All portal-types installed in the portal
+
+``plone.app.vocabularies.ReallyUserFriendlyTypes``
+    Static filtered list of portal-types.
+    Filter is a list of portal_type ids (strings) defined at ``plone.app.vocabularies.types.BAD_TYPES``.
+
+``plone.app.vocabularies.UserFriendlyTypes``
+    Portal types filtered as 'user friendly' by the Types Tool.
+
+
+Workflows
+---------
+
+``plone.app.vocabularies.Workflows``
+    All installed workflows
+
+``plone.app.vocabularies.WorkflowStates``
+    All titles of workflow states - for any workflow installed
+
+``plone.app.vocabularies.WorkflowTransitions``
+    All titles of workflow transitions - for any workflow installed
+
+
+Syndication/ Feeds
+------------------
+
+``plone.app.vocabularies.SyndicationFeedTypes``
+    Configured allowed feed types
+
+``plone.app.vocabularies.SyndicatableFeedItems``
+    Folders or Collections on the first two navigation levels (depth=2) relative to the site root.
+    Value is UID of the Folder or Collection, term is title of it
+    (searchable)
+
+
+Catalog
+-------
+
+``plone.app.vocabularies.Keywords``
+    All Subjects aka Tags aka Keywords used by the portals content
+
+
+``plone.app.vocabularies.Catalog``
+    Generic queryable catalog
+
+
+Theme
+-----
+
+``plone.app.vocabularies.Skins``
+    Themes/ skins available in the portal.
+
+
+Date/Time Related
+-----------------
 
 ``plone.app.vocabularies.Timezones``
-    all timezones provided by ``pytz``
+    all timezones provided by `pytz <http://pythonhosted.org/pytz/>`_
 
 ``plone.app.vocabularies.CommonTimezones``
-    common timezones provided by ``pytz``. This are those
-    a user would choose from and is not too much confused.
+    common timezones provided by 'pytz'.
+    This are those a user would choose from and is not too much confused.
 
 ``plone.app.vocabularies.AvailableTimezones``
     timezones configured in the portal.
 
 ``plone.app.vocabularies.Weekdays``
-    the seven weekdays in fullname. Value is the day number start counting
-    at zero on monday. Title of the term is an i18n messagestring in
-    ``plonelocales`` namespace, so it translates.
+    the seven weekdays in fullname.
+    Value is the day number start counting at zero on monday.
+    Title of the term is an i18n messagestring in ``plonelocales`` namespace, so it translates.
 
 ``plone.app.vocabularies.WeekdaysAbbr``
    same as above but with 3 character abbreviations.
@@ -58,3 +132,10 @@ Date/Time Related Vocabularies
 ``plone.app.vocabularies.MonthAbbr``
    same as above but with 3 character abbreviations.
 
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.vocabularies>`_.
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/vocabularies/__init__.py b/plone/app/vocabularies/__init__.py
index 57d85fe..dab0dd5 100644
--- a/plone/app/vocabularies/__init__.py
+++ b/plone/app/vocabularies/__init__.py
@@ -1,17 +1,18 @@
-from zope.interface import implements
-from zope.interface import directlyProvides
+# -*- coding: utf-8 -*-
 from plone.app.vocabularies.interfaces import ISlicableVocabulary
+from zope.interface import directlyProvides
+from zope.interface import implementer
 
 
+@implementer(ISlicableVocabulary)
 class SlicableVocabulary(object):
     """
-    A tokenized voacabulary in which the results can be sliced.
+    A tokenized vocabulary in which the results can be sliced.
     This class does not implement a complete vocabulary. Instead you use
     this class as a mixin to your vocabulary class.
     This mixin class expects to be used with something resembling
     a SimpleVocabulary. It accesses internal members like _terms
     """
-    implements(ISlicableVocabulary)
 
     def __init__(self, terms=[], *interfaces):
         self._terms = terms
diff --git a/plone/app/vocabularies/actions.py b/plone/app/vocabularies/actions.py
index 2e1f6d8..8e9a06a 100644
--- a/plone/app/vocabularies/actions.py
+++ b/plone/app/vocabularies/actions.py
@@ -1,17 +1,15 @@
 # -*- coding:utf-8 -*-
-from zope.interface import implements
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
-from Products.CMFCore.utils import getToolByName
-
 
+@implementer(IVocabularyFactory)
 class ActionCategoriesVocabulary(object):
     """Provides an actions categories vocabulary"""
 
-    implements(IVocabularyFactory)
-
     def __call__(self, context):
         portal_actions = getToolByName(context, 'portal_actions')
 
@@ -22,7 +20,9 @@ def __call__(self, context):
             portal = context.portal_url.getPortalObject()
             categories = portal.portal_actions.objectIds()
         categories.sort()
-        return SimpleVocabulary([SimpleTerm(cat, title=cat) for cat in categories])
+        return SimpleVocabulary(
+            [SimpleTerm(cat, title=cat) for cat in categories]
+        )
 
 
 ActionCategoriesVocabularyFactory = ActionCategoriesVocabulary()
diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py
index aea6934..42b9c0e 100644
--- a/plone/app/vocabularies/catalog.py
+++ b/plone/app/vocabularies/catalog.py
@@ -1,24 +1,25 @@
 # -*- coding: utf-8 -*-
-import os
-import itertools
 from binascii import b2a_qp
-from zope.browser.interfaces import ITerms
-from zope.interface import implements, classProvides
-from zope.schema.interfaces import ISource, IContextSourceBinder, IVocabularyFactory
-from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary
-from zope.site.hooks import getSite
-
-from zope.formlib.interfaces import ISourceQueryView
-
+from plone.app.querystring import queryparser
+from plone.app.vocabularies import SlicableVocabulary
+from plone.app.vocabularies.terms import BrowsableTerm
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.ZCTextIndex.ParseTree import ParseError
-
-from plone.app.vocabularies.terms import BrowsableTerm
-from plone.app.querystring import queryparser
-from plone.app.vocabularies import SlicableVocabulary
-from plone.uuid.interfaces import IUUID
+from zope.browser.interfaces import ITerms
+from zope.formlib.interfaces import ISourceQueryView
+from zope.interface import implementer
+from zope.interface import provider
+from zope.schema.interfaces import IContextSourceBinder
+from zope.schema.interfaces import ISource
+from zope.schema.interfaces import IVocabularyFactory
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
+from zope.site.hooks import getSite
+import itertools
+import os
 
 
 def parse_query(query, path_prefix=""):
@@ -91,6 +92,8 @@ def parse_query(query, path_prefix=""):
     return query
 
 
+@implementer(ISource)
+@provider(IContextSourceBinder)
 class SearchableTextSource(object):
     """
       >>> from plone.app.vocabularies.tests.base import Brain
@@ -138,8 +141,6 @@ class SearchableTextSource(object):
       >>> list(source.search(''))
       ['1234', '2345']
     """
-    implements(ISource)
-    classProvides(IContextSourceBinder)
 
     def __init__(self, context, base_query={}, default_query=None):
         self.context = context
@@ -174,7 +175,10 @@ def search(self, query_string):
             query.update(parse_query(query_string, self.portal_path))
 
         try:
-            results = (x.getPath()[len(self.portal_path):] for x in self.catalog(**query))
+            results = (
+                x.getPath()[len(self.portal_path):]
+                for x in self.catalog(**query)
+            )
         except ParseError:
             return []
 
@@ -185,6 +189,7 @@ def search(self, query_string):
         return results
 
 
+@implementer(IContextSourceBinder)
 class SearchableTextSourceBinder(object):
     """Use this to instantiate a new SearchableTextSource with custom
     parameters. For example:
@@ -230,8 +235,6 @@ class SearchableTextSourceBinder(object):
       True
     """
 
-    implements(IContextSourceBinder)
-
     def __init__(self, query, default_query=None):
         self.query = query
         self.default_query = default_query
@@ -241,6 +244,7 @@ def __call__(self, context):
                                     default_query=self.default_query)
 
 
+@implementer(ITerms, ISourceQueryView)
 class QuerySearchableTextSourceView(object):
     """
       >>> from plone.app.vocabularies.tests.base import DummyCatalog
@@ -308,9 +312,6 @@ class QuerySearchableTextSourceView(object):
       u'/foo'
     """
 
-    implements(ITerms,
-               ISourceQueryView)
-
     template = ViewPageTemplateFile('searchabletextsource.pt')
 
     def __init__(self, context, request):
@@ -377,6 +378,7 @@ def results(self, name):
         return results
 
 
+@implementer(IVocabularyFactory)
 class KeywordsVocabulary(object):
     """Vocabulary factory listing all catalog keywords from the "Subject" index
 
@@ -384,7 +386,7 @@ class KeywordsVocabulary(object):
         >>> from plone.app.vocabularies.tests.base import create_context
         >>> from plone.app.vocabularies.tests.base import DummyContent
         >>> from plone.app.vocabularies.tests.base import Request
-        >>> from Products.PluginIndexes.KeywordIndex.KeywordIndex import KeywordIndex
+        >>> from Products.PluginIndexes.KeywordIndex.KeywordIndex import KeywordIndex  # noqa
 
         >>> context = create_context()
 
@@ -392,8 +394,17 @@ class KeywordsVocabulary(object):
         >>> tool = DummyCatalog(rids)
         >>> context.portal_catalog = tool
         >>> index = KeywordIndex('Subject')
-        >>> done = index._index_object(1,DummyContent('ob1', ['foo', 'bar', 'baz']), attr='Subject')
-        >>> done = index._index_object(2,DummyContent('ob2', ['blee', 'bar', 'non-\xc3\xa5scii']), attr='Subject')
+        >>> done = index._index_object(
+        ...     1,
+        ...     DummyContent('ob1', ['foo', 'bar', 'baz']), attr='Subject'
+        ... )
+        >>> done = index._index_object(
+        ...     2,
+        ...     DummyContent(
+        ...         'ob2',
+        ...         ['blee', 'bar', 'non-\xc3\xa5scii']),
+        ...         attr='Subject',
+        ... )
         >>> tool.indexes['Subject'] = index
         >>> vocab = KeywordsVocabulary()
         >>> result = vocab(context)
@@ -405,7 +416,10 @@ class KeywordsVocabulary(object):
         Testing unicode vocabularies
         First clear the index. Comparing non-unicode to unicode objects fails.
         >>> index.clear()
-        >>> done = index._index_object(1, DummyContent('obj1', [u'äüö', u'nix']), attr="Subject")
+        >>> done = index._index_object(
+        ...     1,
+        ...     DummyContent('obj1', [u'äüö', u'nix']), attr="Subject"
+        ... )
         >>> tool.indexes['Subject'] = index
         >>> vocab = KeywordsVocabulary()
         >>> result = vocab(context)
@@ -413,13 +427,13 @@ class KeywordsVocabulary(object):
         ['nix', '=C3=83=C2=A4=C3=83=C2=BC=C3=83=C2=B6']
         >>> result.by_value.keys() == [u'äüö', u'nix']
         True
-        >>> test_title = result.getTermByToken('=C3=83=C2=A4=C3=83=C2=BC=C3=83=C2=B6').title
+        >>> test_title = result.getTermByToken(
+        ...     '=C3=83=C2=A4=C3=83=C2=BC=C3=83=C2=B6'
+        ... ).title
         >>> test_title == u'äüö'
         True
 
     """
-    implements(IVocabularyFactory)
-
     # Allow users to customize the index to easily create
     # KeywordVocabularies for other keyword indexes
     keyword_index = 'Subject'
@@ -507,17 +521,19 @@ def __getitem__(self, index):
     @property
     def _terms(self):
         if not hasattr(self, "__terms"):
-            self.__terms = [self.createTerm(brain, None) for brain in self._brains]
+            self.__terms = [
+                self.createTerm(brain, None)
+                for brain in self._brains
+            ]
         return self.__terms
 
 
+@implementer(IVocabularyFactory)
 class CatalogVocabularyFactory(object):
     # We want to get rid of this and use CatalogSource instead,
     # but we can't in Plone versions that support
     # plone.app.widgets < 1.6.0
 
-    implements(IVocabularyFactory)
-
     def __call__(self, context, query=None):
         parsed = {}
         if query:
@@ -534,6 +550,7 @@ def __call__(self, context, query=None):
         return CatalogVocabulary.fromItems(brains, context)
 
 
+@implementer(ISource)
 class CatalogSource(object):
     """Catalog source for use with Choice fields.
 
@@ -576,8 +593,6 @@ class CatalogSource(object):
 
     """
 
-    implements(ISource)
-
     def __init__(self, context=None, **query):
         self.query = query
 
diff --git a/plone/app/vocabularies/datetimerelated.py b/plone/app/vocabularies/datetimerelated.py
index ec2c151..3d740f2 100644
--- a/plone/app/vocabularies/datetimerelated.py
+++ b/plone/app/vocabularies/datetimerelated.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.i18nmessageid import MessageFactory
@@ -5,7 +6,6 @@
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
-
 import pytz
 
 PLMF = MessageFactory('plonelocales')
diff --git a/plone/app/vocabularies/editors.py b/plone/app/vocabularies/editors.py
index 9aaf492..f74c360 100644
--- a/plone/app/vocabularies/editors.py
+++ b/plone/app/vocabularies/editors.py
@@ -1,15 +1,16 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Products.CMFCore.utils import getToolByName
-
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class AvailableEditorsVocabulary(object):
     """Vocabulary factory for available editors in the portal.
 
@@ -40,7 +41,6 @@ class AvailableEditorsVocabulary(object):
       >>> TinyMCE.title, TinyMCE.token, TinyMCE.value
       (u'TinyMCE', 'TinyMCE', 'TinyMCE')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
diff --git a/plone/app/vocabularies/groups.py b/plone/app/vocabularies/groups.py
index 607e45f..b21a1b6 100644
--- a/plone/app/vocabularies/groups.py
+++ b/plone/app/vocabularies/groups.py
@@ -1,14 +1,17 @@
-from zope.browser.interfaces import ITerms
-from zope.interface import implements, classProvides
-from zope.schema.interfaces import ISource, IContextSourceBinder
-from zope.schema.vocabulary import SimpleTerm
-
-from zope.formlib.interfaces import ISourceQueryView
-
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from zope.browser.interfaces import ITerms
+from zope.formlib.interfaces import ISourceQueryView
+from zope.interface import implementer
+from zope.interface import provider
+from zope.schema.interfaces import IContextSourceBinder
+from zope.schema.interfaces import ISource
+from zope.schema.vocabulary import SimpleTerm
 
 
+@implementer(ISource)
+@provider(IContextSourceBinder)
 class GroupsSource(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -42,8 +45,6 @@ class GroupsSource(object):
       >>> source.get('group1'), source.get('noone')
       ('group1', None)
     """
-    implements(ISource)
-    classProvides(IContextSourceBinder)
 
     def __init__(self, context):
         self.context = context
@@ -72,6 +73,7 @@ def get(self, value):
         return self.users.getGroupById(value, None)
 
 
+@implementer(ITerms, ISourceQueryView)
 class GroupsSourceQueryView(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -131,8 +133,6 @@ class GroupsSourceQueryView(object):
       >>> view.results('t')
       ['group1', 'group2']
     """
-    implements(ITerms,
-               ISourceQueryView)
 
     template = ViewPageTemplateFile('searchabletextsource.pt')
 
diff --git a/plone/app/vocabularies/interfaces.py b/plone/app/vocabularies/interfaces.py
index 132401f..0cfa14d 100644
--- a/plone/app/vocabularies/interfaces.py
+++ b/plone/app/vocabularies/interfaces.py
@@ -1,4 +1,6 @@
-from zope.interface import Interface, Attribute
+# -*- coding: utf-8 -*-
+from zope.interface import Attribute
+from zope.interface import Interface
 from zope.schema.interfaces import IVocabularyTokenized
 
 
@@ -40,4 +42,3 @@ class IBrowsableTerm(Interface):
 class ISlicableVocabulary(IVocabularyTokenized):
     def __getitem__(start, stop):
         """ return a slice of the results"""
-
diff --git a/plone/app/vocabularies/language.py b/plone/app/vocabularies/language.py
index 186b48b..21650eb 100644
--- a/plone/app/vocabularies/language.py
+++ b/plone/app/vocabularies/language.py
@@ -1,14 +1,14 @@
+# -*- coding: utf-8 -*-
 from operator import itemgetter
-
-from zope.interface import implements
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Products.CMFCore.utils import getToolByName
-
 
+@implementer(IVocabularyFactory)
 class AvailableContentLanguageVocabulary(object):
     """Vocabulary factory for available content languages in the portal.
 
@@ -41,7 +41,6 @@ class AvailableContentLanguageVocabulary(object):
       >>> de.title, de.token, de.value
       ('Deutsch', 'de', 'de')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = [SimpleTerm('en', 'en', 'English')]  # default, only english
@@ -54,9 +53,10 @@ def __call__(self, context):
             items = [SimpleTerm(i[0], i[0], i[1]) for i in items]
         return SimpleVocabulary(items)
 
-AvailableContentLanguageVocabularyFactory = AvailableContentLanguageVocabulary()
+AvailableContentLanguageVocabularyFactory = AvailableContentLanguageVocabulary()  # noqa
 
 
+@implementer(IVocabularyFactory)
 class SupportedContentLanguageVocabulary(object):
     """Vocabulary factory for supported content languages in the portal.
 
@@ -88,7 +88,6 @@ class SupportedContentLanguageVocabulary(object):
       >>> de.title, de.token, de.value
       ('German', 'de', 'de')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
@@ -100,4 +99,4 @@ def __call__(self, context):
             items = [SimpleTerm(i[0], i[0], i[1]) for i in items]
         return SimpleVocabulary(items)
 
-SupportedContentLanguageVocabularyFactory = SupportedContentLanguageVocabulary()
+SupportedContentLanguageVocabularyFactory = SupportedContentLanguageVocabulary()  # noqa
diff --git a/plone/app/vocabularies/security.py b/plone/app/vocabularies/security.py
index 105407c..fb99c87 100644
--- a/plone/app/vocabularies/security.py
+++ b/plone/app/vocabularies/security.py
@@ -1,19 +1,19 @@
+# -*- coding: utf-8 -*-
+from Acquisition import aq_get
 from operator import attrgetter
-
+from Products.CMFCore.utils import getToolByName
 from zope.i18n import translate
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Acquisition import aq_get
-from Products.CMFCore.utils import getToolByName
-
 PMF = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class RolesVocabulary(object):
     """Vocabulary factory for roles in the portal
 
@@ -45,7 +45,6 @@ class RolesVocabulary(object):
       >>> manager.title, manager.token, manager.value
       (u'Manager', 'Manager', 'Manager')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -73,6 +72,7 @@ def __call__(self, context):
 RolesVocabularyFactory = RolesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class GroupsVocabulary(object):
     """Vocabulary factory for groups in the portal
 
@@ -116,7 +116,6 @@ class GroupsVocabulary(object):
       >>> editors.title, editors.token, editors.value
       ('Editors', 'editors', 'editors')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
diff --git a/plone/app/vocabularies/skins.py b/plone/app/vocabularies/skins.py
index 23e440b..bc0a3d2 100644
--- a/plone/app/vocabularies/skins.py
+++ b/plone/app/vocabularies/skins.py
@@ -1,15 +1,16 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Products.CMFCore.utils import getToolByName
-
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class SkinsVocabulary(object):
     """Vocabulary factory for skins.
 
@@ -47,7 +48,6 @@ class SkinsVocabulary(object):
       >>> term.title, term.token, term.value
       (u'(Unstyled)', 'Plone Default', 'Plone Default')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         terms = []
@@ -57,7 +57,13 @@ def __call__(self, context):
             items = list(stool.getSkinSelections())
             items.sort()
             if 'Plone Default' in items:
-                terms = [SimpleTerm('Plone Default', 'Plone Default', _(u'(Unstyled)'))]
+                terms = [
+                    SimpleTerm(
+                        'Plone Default',
+                        'Plone Default',
+                        _(u'(Unstyled)')
+                    )
+                ]
                 items.remove('Plone Default')
             terms += [SimpleTerm(i, i, i) for i in items]
         return SimpleVocabulary(terms)
diff --git a/plone/app/vocabularies/syndication.py b/plone/app/vocabularies/syndication.py
index 999b46a..188d5bb 100644
--- a/plone/app/vocabularies/syndication.py
+++ b/plone/app/vocabularies/syndication.py
@@ -1,26 +1,27 @@
-from zope.component.hooks import getSite
+# -*- coding: utf-8 -*-
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
+from zope.component import getUtility
+from zope.component.hooks import getSite
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
 try:
-    from Products.CMFPlone.interfaces.syndication import \
-        ISiteSyndicationSettings
+    # XXX: this is a circular dependency (not declared in setup.py)
+    from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings  # noqa
     HAS_SYNDICATION = True
 except ImportError:
     # new syndication not available
     HAS_SYNDICATION = False
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
 
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class SyndicationFeedTypesVocabulary(object):
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         if not HAS_SYNDICATION:
@@ -41,8 +42,8 @@ def __call__(self, context):
 SyndicationFeedTypesVocabularyFactory = SyndicationFeedTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class SyndicatableFeedItems(object):
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
diff --git a/plone/app/vocabularies/terms.py b/plone/app/vocabularies/terms.py
index 46cd866..55c7d5d 100644
--- a/plone/app/vocabularies/terms.py
+++ b/plone/app/vocabularies/terms.py
@@ -1,9 +1,12 @@
-from zope.interface import implements, alsoProvides
-from zope.schema.vocabulary import SimpleTerm
+# -*- coding: utf-8 -*-
 from plone.app.vocabularies.interfaces import IBrowsableTerm
 from plone.app.vocabularies.interfaces import ITermWithDescription
+from zope.interface import alsoProvides
+from zope.interface import implementer
+from zope.schema.vocabulary import SimpleTerm
 
 
+@implementer(ITermWithDescription)
 class TermWithDescription(SimpleTerm):
     """
       >>> term = TermWithDescription('value', 'token', 'title')
@@ -15,10 +18,13 @@ class TermWithDescription(SimpleTerm):
       >>> term.value, term.token, term.title, term.description
       ('value', 'token', 'title', 'description')
     """
-    implements(ITermWithDescription)
 
     def __init__(self, value, token, title, description=None):
-        super(TermWithDescription, self).__init__(value, token=token, title=title)
+        super(TermWithDescription, self).__init__(
+            value,
+            token=token,
+            title=title
+        )
         self.description = description
 
 
@@ -44,8 +50,12 @@ class BrowsableTerm(TermWithDescription):
 
     def __init__(self, value, token=None, title=None, description=None,
                  browse_token=None, parent_token=None):
-        super(BrowsableTerm, self).__init__(value, token=token,
-                                            title=title, description=description)
+        super(BrowsableTerm, self).__init__(
+            value,
+            token=token,
+            title=title,
+            description=description
+        )
         self.browse_token = browse_token
         self.parent_token = parent_token
         if browse_token is not None or parent_token is not None:
diff --git a/plone/app/vocabularies/testing.py b/plone/app/vocabularies/testing.py
index f37b8ec..1e7953c 100644
--- a/plone/app/vocabularies/testing.py
+++ b/plone/app/vocabularies/testing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
diff --git a/plone/app/vocabularies/tests/__init__.py b/plone/app/vocabularies/tests/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/vocabularies/tests/__init__.py
+++ b/plone/app/vocabularies/tests/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/vocabularies/tests/base.py b/plone/app/vocabularies/tests/base.py
index 0d5c6b1..25bf05e 100644
--- a/plone/app/vocabularies/tests/base.py
+++ b/plone/app/vocabularies/tests/base.py
@@ -1,6 +1,6 @@
-from zope.site.hooks import setSite
-
+# -*- coding: utf-8 -*-
 from Products.ZCTextIndex.ParseTree import ParseError
+from zope.site.hooks import setSite
 
 
 def create_context():
diff --git a/plone/app/vocabularies/tests/test_timezonevocabularies.py b/plone/app/vocabularies/tests/test_timezonevocabularies.py
index ef19fd1..0a52c94 100644
--- a/plone/app/vocabularies/tests/test_timezonevocabularies.py
+++ b/plone/app/vocabularies/tests/test_timezonevocabularies.py
@@ -1,8 +1,8 @@
+# -*- coding: utf-8 -*-
 from plone.app.vocabularies.testing import PAVocabularies_INTEGRATION_TESTING
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.schema.interfaces import IVocabularyFactory
-
 import unittest2 as unittest
 
 
@@ -13,13 +13,19 @@ def setUp(self):
         self.portal = self.layer['portal']
 
     def test_timezone_vocabulary(self):
-        tzvocab = getUtility(IVocabularyFactory, 'plone.app.vocabularies.Timezones')
+        tzvocab = getUtility(
+            IVocabularyFactory,
+            'plone.app.vocabularies.Timezones'
+        )
         tz_list = [item.value for item in tzvocab(self.portal)]
         self.assertTrue('Africa/Abidjan' in tz_list)
         self.assertTrue('Europe/London' in tz_list)
 
     def test_timezone_vocabulary_query(self):
-        tzvocab = getUtility(IVocabularyFactory, 'plone.app.vocabularies.Timezones')
+        tzvocab = getUtility(
+            IVocabularyFactory,
+            'plone.app.vocabularies.Timezones'
+        )
         tz_list = [item.value for item in tzvocab(self.portal, query='vienna')]
         self.assertTrue('Europe/Vienna' in tz_list)
         self.assertTrue(len(tz_list) == 1)
diff --git a/plone/app/vocabularies/tests/test_vocabularies.py b/plone/app/vocabularies/tests/test_vocabularies.py
index b526da5..a278cf8 100644
--- a/plone/app/vocabularies/tests/test_vocabularies.py
+++ b/plone/app/vocabularies/tests/test_vocabularies.py
@@ -1,17 +1,18 @@
-import doctest
+# -*- coding: utf-8 -*-
 from doctest import DocTestSuite
-import unittest
-
-import zope.component
-from zope.component.testing import setUp, tearDown
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 from zope.configuration.xmlconfig import XMLConfig
 from zope.site import hooks
 
-import plone.app.vocabularies
+import doctest
+import unittest
+import zope.component
 
 
 def vocabSetUp(self):
     setUp()
+    import plone.app.vocabularies
     XMLConfig('meta.zcml', zope.component)()
     XMLConfig('configure.zcml', plone.app.vocabularies)()
     hooks.setHooks()
@@ -25,46 +26,71 @@ def vocabTearDown(self):
 
 def test_suite():
     optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE
-    return unittest.TestSuite((
-        DocTestSuite('plone.app.vocabularies.catalog',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.groups',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.language',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.security',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.skins',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.terms'),
-        DocTestSuite('plone.app.vocabularies.types',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.users',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.workflow',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.editors',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.datetimerelated',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        ))
+    return unittest.TestSuite(
+        (
+            DocTestSuite(
+                'plone.app.vocabularies.terms'
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.catalog',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.datetimerelated',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.editors',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.groups',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.language',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.security',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.skins',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.types',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.users',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.workflow',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+        )
+    )
+
diff --git a/plone/app/vocabularies/types.py b/plone/app/vocabularies/types.py
index 522f0ba..28f2e12 100644
--- a/plone/app/vocabularies/types.py
+++ b/plone/app/vocabularies/types.py
@@ -1,44 +1,66 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_get
-from zope.interface import implements
+from Products.CMFCore.utils import getToolByName
+from zope.i18n import translate
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
-from zope.schema.vocabulary import SimpleVocabulary
 from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
-from zope.i18n import translate
-
-from Products.CMFCore.utils import getToolByName
 
 
 def getAllowedContentTypes(context):
-    """ computes the list of allowed content types by subtracting the site property blacklist
-        from the list of installed types.
+    """ computes the list of allowed content types ...
+    Here the mime types allowed in text fields are meant.
+
+    It does so by subtracting the site property blacklist from the list of
+    allowable (overall available) types.
     """
     allowable_types = getAllowableContentTypes(context)
     forbidden_types = getForbiddenContentTypes(context)
-    allowed_types = [type for type in allowable_types if type not in forbidden_types]
+    allowed_types = [
+        ctype for ctype in allowable_types
+        if ctype not in forbidden_types
+    ]
     return allowed_types
 
 
 def getAllowableContentTypes(context):
-    """ retrieves the list of installed content types by querying portal transforms. """
+    """ retrieves the list of available content types (aka mime-types) ...
+
+    ... by querying portal transforms.
+
+    Cite from over there:
+    This returns a list of mimetypes that can be used as input for textfields
+    by building a list of the inputs beginning with "text/" of all
+    transforms.
+    """
     portal_transforms = getToolByName(context, 'portal_transforms')
     return portal_transforms.listAvailableTextInputs()
 
 
 def getForbiddenContentTypes(context):
-    """ Convenence method for retrevng the site property 'forbidden_contenttypes'."""
+    """Method for retrieving the site property 'forbidden_contenttypes'.
+
+    This is a list of mime-types not allowed in text input fields.
+    """
     portal_properties = getToolByName(context, 'portal_properties', None)
     if portal_properties is not None:
-        site_properties = getattr(portal_properties, 'site_properties', None)
-        if site_properties is not None:
-            if site_properties.hasProperty('forbidden_contenttypes'):
-                return list(site_properties.getProperty('forbidden_contenttypes'))
+        return []
+    site_properties = getattr(portal_properties, 'site_properties', None)
+    if site_properties is not None:
+        return []
+    if site_properties.hasProperty('forbidden_contenttypes'):
+        return list(site_properties.getProperty('forbidden_contenttypes'))
     return []
 
 
+@implementer(IVocabularyFactory)
 class AllowableContentTypesVocabulary(object):
     """Vocabulary factory for allowable content types.
 
+    A list of mime-types that can be used as input for textfields.
+
       >>> from zope.component import queryUtility
       >>> from plone.app.vocabularies.tests.base import create_context
       >>> from plone.app.vocabularies.tests.base import DummyTool
@@ -64,23 +86,24 @@ class AllowableContentTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       ('text/plain', 'text/plain', 'text/plain')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
         items = list(getAllowableContentTypes(site))
         if 'text/x-plone-outputfilters-html' in items:
             items.remove('text/x-plone-outputfilters-html')
-        items.sort()
-        items = [SimpleTerm(i, i, i) for i in items]
+        items = [SimpleTerm(i, i, i) for i in sorted(items)]
         return SimpleVocabulary(items)
 
 AllowableContentTypesVocabularyFactory = AllowableContentTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class AllowedContentTypesVocabulary(object):
     """Vocabulary factory for allowed content types.
 
+    A list of mime-types that is allowed to be used as input for textfields.
+
       >>> from zope.component import queryUtility
       >>> from plone.app.vocabularies.tests.base import create_context
       >>> from plone.app.vocabularies.tests.base import DummyTool
@@ -110,24 +133,23 @@ class AllowedContentTypesVocabulary(object):
       <zope.schema.vocabulary.SimpleVocabulary object at ...>
 
       >>> len(types.by_token)
-      1
+      2
 
       >>> doc = types.by_token['text/plain']
       >>> doc.title, doc.token, doc.value
       ('text/plain', 'text/plain', 'text/plain')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
         items = list(getAllowedContentTypes(site))
-        items.sort()
-        items = [SimpleTerm(i, i, i) for i in items]
+        items = [SimpleTerm(i, i, i) for i in sorted(items)]
         return SimpleVocabulary(items)
 
 AllowedContentTypesVocabularyFactory = AllowedContentTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class PortalTypesVocabulary(object):
     """Vocabulary factory for portal types.
 
@@ -151,7 +173,6 @@ class PortalTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       (u'Page', 'Document', 'Document')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -162,13 +183,13 @@ def __call__(self, context):
         request = aq_get(ttool, 'REQUEST', None)
         items = [(translate(ttool[t].Title(), context=request), t)
                  for t in ttool.listContentTypes()]
-        items.sort()
-        items = [SimpleTerm(i[1], i[1], i[0]) for i in items]
+        items = [SimpleTerm(i[1], i[1], i[0]) for i in sorted(items)]
         return SimpleVocabulary(items)
 
 PortalTypesVocabularyFactory = PortalTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class UserFriendlyTypesVocabulary(object):
     """Vocabulary factory for user friendly portal types.
 
@@ -199,7 +220,6 @@ class UserFriendlyTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       (u'Page', 'Document', 'Document')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -209,8 +229,10 @@ def __call__(self, context):
             return SimpleVocabulary([])
 
         request = aq_get(ttool, 'REQUEST', None)
-        items = [(translate(ttool[t].Title(), context=request), t)
-                 for t in ptool.getUserFriendlyTypes()]
+        items = [
+            (translate(ttool[t].Title(), context=request), t)
+            for t in ptool.getUserFriendlyTypes()
+        ]
         items.sort()
         items = [SimpleTerm(i[1], i[1], i[0]) for i in items]
         return SimpleVocabulary(items)
@@ -218,14 +240,26 @@ def __call__(self, context):
 UserFriendlyTypesVocabularyFactory = UserFriendlyTypesVocabulary()
 
 
-BAD_TYPES = ("ATBooleanCriterion", "ATDateCriteria", "ATDateRangeCriterion",
-             "ATListCriterion", "ATPortalTypeCriterion", "ATReferenceCriterion",
-             "ATSelectionCriterion", "ATSimpleIntCriterion", "Plone Site",
-             "ATSimpleStringCriterion", "ATSortCriterion", "TempFolder",
-             "ATCurrentAuthorCriterion", "ATPathCriterion",
-             "ATRelativePathCriterion", )
-
-
+BAD_TYPES = [
+    "ATBooleanCriterion",
+    "ATCurrentAuthorCriterion",
+    "ATDateCriteria",
+    "ATDateRangeCriterion",
+    "ATListCriterion",
+    "ATPathCriterion",
+    "ATPortalTypeCriterion",
+    "ATReferenceCriterion",
+    "ATRelativePathCriterion",
+    "ATSelectionCriterion",
+    "ATSimpleIntCriterion",
+    "ATSimpleStringCriterion",
+    "ATSortCriterion",
+    "Plone Site",
+    "TempFolder",
+]
+
+
+@implementer(IVocabularyFactory)
 class ReallyUserFriendlyTypesVocabulary(object):
     """Vocabulary factory for really user friendly portal types.
 
@@ -253,7 +287,6 @@ class ReallyUserFriendlyTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       (u'Page', 'Document', 'Document')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -262,9 +295,11 @@ def __call__(self, context):
             return SimpleVocabulary([])
 
         request = aq_get(ttool, 'REQUEST', None)
-        items = [(translate(ttool[t].Title(), context=request), t)
-                 for t in ttool.listContentTypes()
-                 if t not in BAD_TYPES]
+        items = [
+            (translate(ttool[t].Title(), context=request), t)
+            for t in ttool.listContentTypes()
+            if t not in BAD_TYPES
+        ]
         items.sort()
         items = [SimpleTerm(i[1], i[1], i[0]) for i in items]
         return SimpleVocabulary(items)
diff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py
index 835ef0e..b7d63d7 100644
--- a/plone/app/vocabularies/users.py
+++ b/plone/app/vocabularies/users.py
@@ -1,16 +1,20 @@
 # -*- coding: utf-8 -*-
+from plone.app.vocabularies import SlicableVocabulary
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.vocabularies import SlicableVocabulary
 from zope.browser.interfaces import ITerms
 from zope.component.hooks import getSite
 from zope.formlib.interfaces import ISourceQueryView
-from zope.interface import implements, classProvides
-from zope.schema.interfaces import ISource, IContextSourceBinder
+from zope.interface import implementer
+from zope.interface import provider
+from zope.schema.interfaces import IContextSourceBinder
+from zope.schema.interfaces import ISource
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 
 
+@implementer(ISource)
+@provider(IContextSourceBinder)
 class UsersSource(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -41,8 +45,6 @@ class UsersSource(object):
       >>> source.get('user1'), source.get('noone')
       ('user1', None)
     """
-    implements(ISource)
-    classProvides(IContextSourceBinder)
 
     def __init__(self, context):
         self.context = context
@@ -100,19 +102,22 @@ def __iter__(self):
         return self._terms
 
 
+@implementer(IVocabularyFactory)
 class UsersFactory(object):
+    """Factory creating a UsersVocabulary
     """
-    """
-    implements(IVocabularyFactory)
 
     def __call__(self, context, query=''):
         if context is None:
             context = getSite()
         users = getToolByName(context, "acl_users")
         return UsersVocabulary.fromItems(
-            users.searchUsers(fullname=query), context)
+            users.searchUsers(fullname=query),
+            context
+        )
 
 
+@implementer(ITerms, ISourceQueryView)
 class UsersSourceQueryView(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -173,9 +178,6 @@ class UsersSourceQueryView(object):
       ['user1', 'user2']
     """
 
-    implements(ITerms,
-               ISourceQueryView)
-
     template = ViewPageTemplateFile('searchabletextsource.pt')
 
     def __init__(self, context, request):
diff --git a/plone/app/vocabularies/workflow.py b/plone/app/vocabularies/workflow.py
index 24bc3f5..e28ff81 100644
--- a/plone/app/vocabularies/workflow.py
+++ b/plone/app/vocabularies/workflow.py
@@ -1,19 +1,19 @@
 # -*- coding:utf-8 -*-
+from Acquisition import aq_get
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode
 from zope.i18n import translate
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Acquisition import aq_get
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import safe_unicode
-
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class WorkflowsVocabulary(object):
     """Vocabulary factory for workflows.
 
@@ -53,7 +53,6 @@ class WorkflowsVocabulary(object):
       >>> noticias.title == 'Workflow de Notícias'.decode('utf-8')
       True
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
@@ -63,13 +62,16 @@ def __call__(self, context):
             items = [(w.title, w.id) for w in wtool.values()]
             items.sort()
             # All vocabularies return theirs term title as unicode
-            items = [SimpleTerm(i[1], i[1], safe_unicode(i[0]))
-                                                 for i in items]
+            items = [
+                SimpleTerm(i[1], i[1], safe_unicode(i[0]))
+                for i in items
+            ]
         return SimpleVocabulary(items)
 
 WorkflowsVocabularyFactory = WorkflowsVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class WorkflowStatesVocabulary(object):
     """Vocabulary factory for workflow states.
 
@@ -104,7 +106,6 @@ class WorkflowStatesVocabulary(object):
       >>> rev.title == 'Revisão [revisao]'.decode('utf-8')
       True
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -120,17 +121,24 @@ def __call__(self, context):
 
         items = wtool.listWFStatesByTitle(filter_similar=True)
         items = [(safe_unicode(i[0]), i[1]) for i in items]
-        items_dict = dict([(i[1], translate(_(i[0]), context=request))
-                                                  for i in items])
+        items_dict = dict(  # no dict comprehension in py 2.6
+            [
+                (i[1], translate(_(i[0]), context=request))
+                for i in items
+            ]
+        )
         items_list = [(k, v) for k, v in items_dict.items()]
         items_list.sort(lambda x, y: cmp(x[1], y[1]))
-        terms = [SimpleTerm(k, title=u'%s [%s]' % (v, k))
-                                                  for k, v in items_list]
+        terms = [
+            SimpleTerm(k, title=u'%s [%s]' % (v, k))
+            for k, v in items_list
+        ]
         return SimpleVocabulary(terms)
 
 WorkflowStatesVocabularyFactory = WorkflowStatesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class WorkflowTransitionsVocabulary(object):
     """Vocabulary factory for workflow transitions
 
@@ -188,7 +196,6 @@ class WorkflowTransitionsVocabulary(object):
       >>> publ.title == 'Publicação [publicacao]'.decode('utf-8')
       True
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
diff --git a/setup.py b/setup.py
index e506c47..a1c6a94 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 setup(
     name='plone.app.vocabularies',
     version=version,
-    description="A collection of generally useful vocabularies.",
+    description="Collection of generally useful vocabularies for Plone.",
     long_description='%s\n%s' % (
         open("README.rst").read(),
         open("CHANGES.rst").read()
@@ -29,14 +29,11 @@
     namespace_packages=['plone', 'plone.app'],
     include_package_data=True,
     zip_safe=False,
-    extras_require=dict(
-        test=[
-            'plone.app.testing',
-            'zope.configuration',
-            'zope.testing',
-        ]
-    ),
     install_requires=[
+        'Acquisition',
+        'plone.app.querystring',
+        'Products.CMFCore',
+        'pytz',
         'setuptools',
         'zope.browser',
         'zope.component',
@@ -46,10 +43,13 @@
         'zope.interface',
         'zope.schema',
         'zope.site',
-        'Acquisition',
-        'Products.CMFCore',
         'Zope2',
-        'plone.app.querystring',
-        'pytz',
     ],
+    extras_require=dict(
+        test=[
+            'plone.app.testing',
+            'zope.configuration',
+            'zope.testing',
+        ]
+    ),
 )


Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2015-07-30T17:38:21+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/0d145c252be26a912b8c65eae309ef00935adc6a

Merge pull request #18 from plone/jensens-cleanup

cleanup: pep8, decorators, et al, pimped README

Files changed:
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/vocabularies/__init__.py
M plone/app/vocabularies/actions.py
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/datetimerelated.py
M plone/app/vocabularies/editors.py
M plone/app/vocabularies/groups.py
M plone/app/vocabularies/interfaces.py
M plone/app/vocabularies/language.py
M plone/app/vocabularies/security.py
M plone/app/vocabularies/skins.py
M plone/app/vocabularies/syndication.py
M plone/app/vocabularies/terms.py
M plone/app/vocabularies/testing.py
M plone/app/vocabularies/tests/__init__.py
M plone/app/vocabularies/tests/base.py
M plone/app/vocabularies/tests/test_timezonevocabularies.py
M plone/app/vocabularies/tests/test_vocabularies.py
M plone/app/vocabularies/types.py
M plone/app/vocabularies/users.py
M plone/app/vocabularies/workflow.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9ce01f0..73790d8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 2.1.20 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Cleanup: PEP8, decorators for zca, et al. Also pimped the README.
+  [jensens]
 
 
 2.1.19 (2015-07-29)
diff --git a/README.rst b/README.rst
index df1e186..8b09420 100644
--- a/README.rst
+++ b/README.rst
@@ -1,50 +1,124 @@
 Overview
 ========
 
-A collection of generally useful vocabularies.
+A collection of generally useful vocabularies for Plone.
+
+It is implemented using ``zope.schema.vocabulary``.
+Intended to be used as a base and example for custom vocabularies.
 
 
 Common Named Vocabularies
 =========================
 
-* plone.app.vocabularies.AvailableContentLanguages
-* plone.app.vocabularies.SupportedContentLanguages
-* plone.app.vocabularies.Roles
-* plone.app.vocabularies.Groups
-* plone.app.vocabularies.AllowedContentTypes
-* plone.app.vocabularies.AllowableContentTypes
-* plone.app.vocabularies.PortalTypes
-* plone.app.vocabularies.ReallyUserFriendlyTypes
-* plone.app.vocabularies.UserFriendlyTypes
-* plone.app.vocabularies.Skins
-* plone.app.vocabularies.Workflows
-* plone.app.vocabularies.WorkflowStates
-* plone.app.vocabularies.WorkflowTransitions
-* plone.app.vocabularies.AvailableEditors
-* plone.app.vocabularies.Keywords
-* plone.app.vocabularies.SyndicationFeedTypes
-* plone.app.vocabularies.SyndicatableFeedItems
-* plone.app.vocabularies.Users
-* plone.app.vocabularies.Catalog
-
-
-Date/Time Related Vocabularies
-==============================
+Languages
+---------
+
+``plone.app.vocabularies.AvailableContentLanguages``
+    all known languages
+
+``plone.app.vocabularies.SupportedContentLanguages``
+    currently configured/supported content languages for the portal
+
+
+Users, Groups, Security
+-----------------------
+
+``plone.app.vocabularies.Users``
+    user of the portal (searchable)
+
+``plone.app.vocabularies.Groups``
+    groups of the portal (searchable)
+
+``plone.app.vocabularies.Roles``
+    all possible roles in the portal
+
+Text Input Field
+----------------
+
+``plone.app.vocabularies.AllowedContentTypes``
+    Configured allowed mime-types (text/\*) for text input fields
+
+``plone.app.vocabularies.AllowableContentTypes``
+    All possible mime types (text/\*) for text input fields
+
+``plone.app.vocabularies.AvailableEditors``
+    Configured WYSIWIG editors
+
+
+Portal Types
+------------
+
+``plone.app.vocabularies.PortalTypes``
+    All portal-types installed in the portal
+
+``plone.app.vocabularies.ReallyUserFriendlyTypes``
+    Static filtered list of portal-types.
+    Filter is a list of portal_type ids (strings) defined at ``plone.app.vocabularies.types.BAD_TYPES``.
+
+``plone.app.vocabularies.UserFriendlyTypes``
+    Portal types filtered as 'user friendly' by the Types Tool.
+
+
+Workflows
+---------
+
+``plone.app.vocabularies.Workflows``
+    All installed workflows
+
+``plone.app.vocabularies.WorkflowStates``
+    All titles of workflow states - for any workflow installed
+
+``plone.app.vocabularies.WorkflowTransitions``
+    All titles of workflow transitions - for any workflow installed
+
+
+Syndication/ Feeds
+------------------
+
+``plone.app.vocabularies.SyndicationFeedTypes``
+    Configured allowed feed types
+
+``plone.app.vocabularies.SyndicatableFeedItems``
+    Folders or Collections on the first two navigation levels (depth=2) relative to the site root.
+    Value is UID of the Folder or Collection, term is title of it
+    (searchable)
+
+
+Catalog
+-------
+
+``plone.app.vocabularies.Keywords``
+    All Subjects aka Tags aka Keywords used by the portals content
+
+
+``plone.app.vocabularies.Catalog``
+    Generic queryable catalog
+
+
+Theme
+-----
+
+``plone.app.vocabularies.Skins``
+    Themes/ skins available in the portal.
+
+
+Date/Time Related
+-----------------
 
 ``plone.app.vocabularies.Timezones``
-    all timezones provided by ``pytz``
+    all timezones provided by `pytz <http://pythonhosted.org/pytz/>`_
 
 ``plone.app.vocabularies.CommonTimezones``
-    common timezones provided by ``pytz``. This are those
-    a user would choose from and is not too much confused.
+    common timezones provided by 'pytz'.
+    This are those a user would choose from and is not too much confused.
 
 ``plone.app.vocabularies.AvailableTimezones``
     timezones configured in the portal.
 
 ``plone.app.vocabularies.Weekdays``
-    the seven weekdays in fullname. Value is the day number start counting
-    at zero on monday. Title of the term is an i18n messagestring in
-    ``plonelocales`` namespace, so it translates.
+    the seven weekdays in fullname.
+    Value is the day number start counting at zero on monday.
+    Title of the term is an i18n messagestring in ``plonelocales`` namespace, so it translates.
 
 ``plone.app.vocabularies.WeekdaysAbbr``
    same as above but with 3 character abbreviations.
@@ -58,3 +132,10 @@ Date/Time Related Vocabularies
 ``plone.app.vocabularies.MonthAbbr``
    same as above but with 3 character abbreviations.
 
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.vocabularies>`_.
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/vocabularies/__init__.py b/plone/app/vocabularies/__init__.py
index 57d85fe..dab0dd5 100644
--- a/plone/app/vocabularies/__init__.py
+++ b/plone/app/vocabularies/__init__.py
@@ -1,17 +1,18 @@
-from zope.interface import implements
-from zope.interface import directlyProvides
+# -*- coding: utf-8 -*-
 from plone.app.vocabularies.interfaces import ISlicableVocabulary
+from zope.interface import directlyProvides
+from zope.interface import implementer
 
 
+@implementer(ISlicableVocabulary)
 class SlicableVocabulary(object):
     """
-    A tokenized voacabulary in which the results can be sliced.
+    A tokenized vocabulary in which the results can be sliced.
     This class does not implement a complete vocabulary. Instead you use
     this class as a mixin to your vocabulary class.
     This mixin class expects to be used with something resembling
     a SimpleVocabulary. It accesses internal members like _terms
     """
-    implements(ISlicableVocabulary)
 
     def __init__(self, terms=[], *interfaces):
         self._terms = terms
diff --git a/plone/app/vocabularies/actions.py b/plone/app/vocabularies/actions.py
index 2e1f6d8..8e9a06a 100644
--- a/plone/app/vocabularies/actions.py
+++ b/plone/app/vocabularies/actions.py
@@ -1,17 +1,15 @@
 # -*- coding:utf-8 -*-
-from zope.interface import implements
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
-from Products.CMFCore.utils import getToolByName
-
 
+@implementer(IVocabularyFactory)
 class ActionCategoriesVocabulary(object):
     """Provides an actions categories vocabulary"""
 
-    implements(IVocabularyFactory)
-
     def __call__(self, context):
         portal_actions = getToolByName(context, 'portal_actions')
 
@@ -22,7 +20,9 @@ def __call__(self, context):
             portal = context.portal_url.getPortalObject()
             categories = portal.portal_actions.objectIds()
         categories.sort()
-        return SimpleVocabulary([SimpleTerm(cat, title=cat) for cat in categories])
+        return SimpleVocabulary(
+            [SimpleTerm(cat, title=cat) for cat in categories]
+        )
 
 
 ActionCategoriesVocabularyFactory = ActionCategoriesVocabulary()
diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py
index aea6934..42b9c0e 100644
--- a/plone/app/vocabularies/catalog.py
+++ b/plone/app/vocabularies/catalog.py
@@ -1,24 +1,25 @@
 # -*- coding: utf-8 -*-
-import os
-import itertools
 from binascii import b2a_qp
-from zope.browser.interfaces import ITerms
-from zope.interface import implements, classProvides
-from zope.schema.interfaces import ISource, IContextSourceBinder, IVocabularyFactory
-from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary
-from zope.site.hooks import getSite
-
-from zope.formlib.interfaces import ISourceQueryView
-
+from plone.app.querystring import queryparser
+from plone.app.vocabularies import SlicableVocabulary
+from plone.app.vocabularies.terms import BrowsableTerm
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.ZCTextIndex.ParseTree import ParseError
-
-from plone.app.vocabularies.terms import BrowsableTerm
-from plone.app.querystring import queryparser
-from plone.app.vocabularies import SlicableVocabulary
-from plone.uuid.interfaces import IUUID
+from zope.browser.interfaces import ITerms
+from zope.formlib.interfaces import ISourceQueryView
+from zope.interface import implementer
+from zope.interface import provider
+from zope.schema.interfaces import IContextSourceBinder
+from zope.schema.interfaces import ISource
+from zope.schema.interfaces import IVocabularyFactory
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
+from zope.site.hooks import getSite
+import itertools
+import os
 
 
 def parse_query(query, path_prefix=""):
@@ -91,6 +92,8 @@ def parse_query(query, path_prefix=""):
     return query
 
 
+@implementer(ISource)
+@provider(IContextSourceBinder)
 class SearchableTextSource(object):
     """
       >>> from plone.app.vocabularies.tests.base import Brain
@@ -138,8 +141,6 @@ class SearchableTextSource(object):
       >>> list(source.search(''))
       ['1234', '2345']
     """
-    implements(ISource)
-    classProvides(IContextSourceBinder)
 
     def __init__(self, context, base_query={}, default_query=None):
         self.context = context
@@ -174,7 +175,10 @@ def search(self, query_string):
             query.update(parse_query(query_string, self.portal_path))
 
         try:
-            results = (x.getPath()[len(self.portal_path):] for x in self.catalog(**query))
+            results = (
+                x.getPath()[len(self.portal_path):]
+                for x in self.catalog(**query)
+            )
         except ParseError:
             return []
 
@@ -185,6 +189,7 @@ def search(self, query_string):
         return results
 
 
+@implementer(IContextSourceBinder)
 class SearchableTextSourceBinder(object):
     """Use this to instantiate a new SearchableTextSource with custom
     parameters. For example:
@@ -230,8 +235,6 @@ class SearchableTextSourceBinder(object):
       True
     """
 
-    implements(IContextSourceBinder)
-
     def __init__(self, query, default_query=None):
         self.query = query
         self.default_query = default_query
@@ -241,6 +244,7 @@ def __call__(self, context):
                                     default_query=self.default_query)
 
 
+@implementer(ITerms, ISourceQueryView)
 class QuerySearchableTextSourceView(object):
     """
       >>> from plone.app.vocabularies.tests.base import DummyCatalog
@@ -308,9 +312,6 @@ class QuerySearchableTextSourceView(object):
       u'/foo'
     """
 
-    implements(ITerms,
-               ISourceQueryView)
-
     template = ViewPageTemplateFile('searchabletextsource.pt')
 
     def __init__(self, context, request):
@@ -377,6 +378,7 @@ def results(self, name):
         return results
 
 
+@implementer(IVocabularyFactory)
 class KeywordsVocabulary(object):
     """Vocabulary factory listing all catalog keywords from the "Subject" index
 
@@ -384,7 +386,7 @@ class KeywordsVocabulary(object):
         >>> from plone.app.vocabularies.tests.base import create_context
         >>> from plone.app.vocabularies.tests.base import DummyContent
         >>> from plone.app.vocabularies.tests.base import Request
-        >>> from Products.PluginIndexes.KeywordIndex.KeywordIndex import KeywordIndex
+        >>> from Products.PluginIndexes.KeywordIndex.KeywordIndex import KeywordIndex  # noqa
 
         >>> context = create_context()
 
@@ -392,8 +394,17 @@ class KeywordsVocabulary(object):
         >>> tool = DummyCatalog(rids)
         >>> context.portal_catalog = tool
         >>> index = KeywordIndex('Subject')
-        >>> done = index._index_object(1,DummyContent('ob1', ['foo', 'bar', 'baz']), attr='Subject')
-        >>> done = index._index_object(2,DummyContent('ob2', ['blee', 'bar', 'non-\xc3\xa5scii']), attr='Subject')
+        >>> done = index._index_object(
+        ...     1,
+        ...     DummyContent('ob1', ['foo', 'bar', 'baz']), attr='Subject'
+        ... )
+        >>> done = index._index_object(
+        ...     2,
+        ...     DummyContent(
+        ...         'ob2',
+        ...         ['blee', 'bar', 'non-\xc3\xa5scii']),
+        ...         attr='Subject',
+        ... )
         >>> tool.indexes['Subject'] = index
         >>> vocab = KeywordsVocabulary()
         >>> result = vocab(context)
@@ -405,7 +416,10 @@ class KeywordsVocabulary(object):
         Testing unicode vocabularies
         First clear the index. Comparing non-unicode to unicode objects fails.
         >>> index.clear()
-        >>> done = index._index_object(1, DummyContent('obj1', [u'äüö', u'nix']), attr="Subject")
+        >>> done = index._index_object(
+        ...     1,
+        ...     DummyContent('obj1', [u'äüö', u'nix']), attr="Subject"
+        ... )
         >>> tool.indexes['Subject'] = index
         >>> vocab = KeywordsVocabulary()
         >>> result = vocab(context)
@@ -413,13 +427,13 @@ class KeywordsVocabulary(object):
         ['nix', '=C3=83=C2=A4=C3=83=C2=BC=C3=83=C2=B6']
         >>> result.by_value.keys() == [u'äüö', u'nix']
         True
-        >>> test_title = result.getTermByToken('=C3=83=C2=A4=C3=83=C2=BC=C3=83=C2=B6').title
+        >>> test_title = result.getTermByToken(
+        ...     '=C3=83=C2=A4=C3=83=C2=BC=C3=83=C2=B6'
+        ... ).title
         >>> test_title == u'äüö'
         True
 
     """
-    implements(IVocabularyFactory)
-
     # Allow users to customize the index to easily create
     # KeywordVocabularies for other keyword indexes
     keyword_index = 'Subject'
@@ -507,17 +521,19 @@ def __getitem__(self, index):
     @property
     def _terms(self):
         if not hasattr(self, "__terms"):
-            self.__terms = [self.createTerm(brain, None) for brain in self._brains]
+            self.__terms = [
+                self.createTerm(brain, None)
+                for brain in self._brains
+            ]
         return self.__terms
 
 
+@implementer(IVocabularyFactory)
 class CatalogVocabularyFactory(object):
     # We want to get rid of this and use CatalogSource instead,
     # but we can't in Plone versions that support
     # plone.app.widgets < 1.6.0
 
-    implements(IVocabularyFactory)
-
     def __call__(self, context, query=None):
         parsed = {}
         if query:
@@ -534,6 +550,7 @@ def __call__(self, context, query=None):
         return CatalogVocabulary.fromItems(brains, context)
 
 
+@implementer(ISource)
 class CatalogSource(object):
     """Catalog source for use with Choice fields.
 
@@ -576,8 +593,6 @@ class CatalogSource(object):
 
     """
 
-    implements(ISource)
-
     def __init__(self, context=None, **query):
         self.query = query
 
diff --git a/plone/app/vocabularies/datetimerelated.py b/plone/app/vocabularies/datetimerelated.py
index ec2c151..3d740f2 100644
--- a/plone/app/vocabularies/datetimerelated.py
+++ b/plone/app/vocabularies/datetimerelated.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.i18nmessageid import MessageFactory
@@ -5,7 +6,6 @@
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
-
 import pytz
 
 PLMF = MessageFactory('plonelocales')
diff --git a/plone/app/vocabularies/editors.py b/plone/app/vocabularies/editors.py
index 9aaf492..f74c360 100644
--- a/plone/app/vocabularies/editors.py
+++ b/plone/app/vocabularies/editors.py
@@ -1,15 +1,16 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Products.CMFCore.utils import getToolByName
-
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class AvailableEditorsVocabulary(object):
     """Vocabulary factory for available editors in the portal.
 
@@ -40,7 +41,6 @@ class AvailableEditorsVocabulary(object):
       >>> TinyMCE.title, TinyMCE.token, TinyMCE.value
       (u'TinyMCE', 'TinyMCE', 'TinyMCE')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
diff --git a/plone/app/vocabularies/groups.py b/plone/app/vocabularies/groups.py
index 607e45f..b21a1b6 100644
--- a/plone/app/vocabularies/groups.py
+++ b/plone/app/vocabularies/groups.py
@@ -1,14 +1,17 @@
-from zope.browser.interfaces import ITerms
-from zope.interface import implements, classProvides
-from zope.schema.interfaces import ISource, IContextSourceBinder
-from zope.schema.vocabulary import SimpleTerm
-
-from zope.formlib.interfaces import ISourceQueryView
-
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from zope.browser.interfaces import ITerms
+from zope.formlib.interfaces import ISourceQueryView
+from zope.interface import implementer
+from zope.interface import provider
+from zope.schema.interfaces import IContextSourceBinder
+from zope.schema.interfaces import ISource
+from zope.schema.vocabulary import SimpleTerm
 
 
+@implementer(ISource)
+@provider(IContextSourceBinder)
 class GroupsSource(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -42,8 +45,6 @@ class GroupsSource(object):
       >>> source.get('group1'), source.get('noone')
       ('group1', None)
     """
-    implements(ISource)
-    classProvides(IContextSourceBinder)
 
     def __init__(self, context):
         self.context = context
@@ -72,6 +73,7 @@ def get(self, value):
         return self.users.getGroupById(value, None)
 
 
+@implementer(ITerms, ISourceQueryView)
 class GroupsSourceQueryView(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -131,8 +133,6 @@ class GroupsSourceQueryView(object):
       >>> view.results('t')
       ['group1', 'group2']
     """
-    implements(ITerms,
-               ISourceQueryView)
 
     template = ViewPageTemplateFile('searchabletextsource.pt')
 
diff --git a/plone/app/vocabularies/interfaces.py b/plone/app/vocabularies/interfaces.py
index 132401f..0cfa14d 100644
--- a/plone/app/vocabularies/interfaces.py
+++ b/plone/app/vocabularies/interfaces.py
@@ -1,4 +1,6 @@
-from zope.interface import Interface, Attribute
+# -*- coding: utf-8 -*-
+from zope.interface import Attribute
+from zope.interface import Interface
 from zope.schema.interfaces import IVocabularyTokenized
 
 
@@ -40,4 +42,3 @@ class IBrowsableTerm(Interface):
 class ISlicableVocabulary(IVocabularyTokenized):
     def __getitem__(start, stop):
         """ return a slice of the results"""
-
diff --git a/plone/app/vocabularies/language.py b/plone/app/vocabularies/language.py
index 186b48b..21650eb 100644
--- a/plone/app/vocabularies/language.py
+++ b/plone/app/vocabularies/language.py
@@ -1,14 +1,14 @@
+# -*- coding: utf-8 -*-
 from operator import itemgetter
-
-from zope.interface import implements
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Products.CMFCore.utils import getToolByName
-
 
+@implementer(IVocabularyFactory)
 class AvailableContentLanguageVocabulary(object):
     """Vocabulary factory for available content languages in the portal.
 
@@ -41,7 +41,6 @@ class AvailableContentLanguageVocabulary(object):
       >>> de.title, de.token, de.value
       ('Deutsch', 'de', 'de')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = [SimpleTerm('en', 'en', 'English')]  # default, only english
@@ -54,9 +53,10 @@ def __call__(self, context):
             items = [SimpleTerm(i[0], i[0], i[1]) for i in items]
         return SimpleVocabulary(items)
 
-AvailableContentLanguageVocabularyFactory = AvailableContentLanguageVocabulary()
+AvailableContentLanguageVocabularyFactory = AvailableContentLanguageVocabulary()  # noqa
 
 
+@implementer(IVocabularyFactory)
 class SupportedContentLanguageVocabulary(object):
     """Vocabulary factory for supported content languages in the portal.
 
@@ -88,7 +88,6 @@ class SupportedContentLanguageVocabulary(object):
       >>> de.title, de.token, de.value
       ('German', 'de', 'de')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
@@ -100,4 +99,4 @@ def __call__(self, context):
             items = [SimpleTerm(i[0], i[0], i[1]) for i in items]
         return SimpleVocabulary(items)
 
-SupportedContentLanguageVocabularyFactory = SupportedContentLanguageVocabulary()
+SupportedContentLanguageVocabularyFactory = SupportedContentLanguageVocabulary()  # noqa
diff --git a/plone/app/vocabularies/security.py b/plone/app/vocabularies/security.py
index 105407c..fb99c87 100644
--- a/plone/app/vocabularies/security.py
+++ b/plone/app/vocabularies/security.py
@@ -1,19 +1,19 @@
+# -*- coding: utf-8 -*-
+from Acquisition import aq_get
 from operator import attrgetter
-
+from Products.CMFCore.utils import getToolByName
 from zope.i18n import translate
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Acquisition import aq_get
-from Products.CMFCore.utils import getToolByName
-
 PMF = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class RolesVocabulary(object):
     """Vocabulary factory for roles in the portal
 
@@ -45,7 +45,6 @@ class RolesVocabulary(object):
       >>> manager.title, manager.token, manager.value
       (u'Manager', 'Manager', 'Manager')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -73,6 +72,7 @@ def __call__(self, context):
 RolesVocabularyFactory = RolesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class GroupsVocabulary(object):
     """Vocabulary factory for groups in the portal
 
@@ -116,7 +116,6 @@ class GroupsVocabulary(object):
       >>> editors.title, editors.token, editors.value
       ('Editors', 'editors', 'editors')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
diff --git a/plone/app/vocabularies/skins.py b/plone/app/vocabularies/skins.py
index 23e440b..bc0a3d2 100644
--- a/plone/app/vocabularies/skins.py
+++ b/plone/app/vocabularies/skins.py
@@ -1,15 +1,16 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Products.CMFCore.utils import getToolByName
-
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class SkinsVocabulary(object):
     """Vocabulary factory for skins.
 
@@ -47,7 +48,6 @@ class SkinsVocabulary(object):
       >>> term.title, term.token, term.value
       (u'(Unstyled)', 'Plone Default', 'Plone Default')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         terms = []
@@ -57,7 +57,13 @@ def __call__(self, context):
             items = list(stool.getSkinSelections())
             items.sort()
             if 'Plone Default' in items:
-                terms = [SimpleTerm('Plone Default', 'Plone Default', _(u'(Unstyled)'))]
+                terms = [
+                    SimpleTerm(
+                        'Plone Default',
+                        'Plone Default',
+                        _(u'(Unstyled)')
+                    )
+                ]
                 items.remove('Plone Default')
             terms += [SimpleTerm(i, i, i) for i in items]
         return SimpleVocabulary(terms)
diff --git a/plone/app/vocabularies/syndication.py b/plone/app/vocabularies/syndication.py
index 999b46a..188d5bb 100644
--- a/plone/app/vocabularies/syndication.py
+++ b/plone/app/vocabularies/syndication.py
@@ -1,26 +1,27 @@
-from zope.component.hooks import getSite
+# -*- coding: utf-8 -*-
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
+from zope.component import getUtility
+from zope.component.hooks import getSite
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
 try:
-    from Products.CMFPlone.interfaces.syndication import \
-        ISiteSyndicationSettings
+    # XXX: this is a circular dependency (not declared in setup.py)
+    from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings  # noqa
     HAS_SYNDICATION = True
 except ImportError:
     # new syndication not available
     HAS_SYNDICATION = False
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
 
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class SyndicationFeedTypesVocabulary(object):
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         if not HAS_SYNDICATION:
@@ -41,8 +42,8 @@ def __call__(self, context):
 SyndicationFeedTypesVocabularyFactory = SyndicationFeedTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class SyndicatableFeedItems(object):
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
diff --git a/plone/app/vocabularies/terms.py b/plone/app/vocabularies/terms.py
index 46cd866..55c7d5d 100644
--- a/plone/app/vocabularies/terms.py
+++ b/plone/app/vocabularies/terms.py
@@ -1,9 +1,12 @@
-from zope.interface import implements, alsoProvides
-from zope.schema.vocabulary import SimpleTerm
+# -*- coding: utf-8 -*-
 from plone.app.vocabularies.interfaces import IBrowsableTerm
 from plone.app.vocabularies.interfaces import ITermWithDescription
+from zope.interface import alsoProvides
+from zope.interface import implementer
+from zope.schema.vocabulary import SimpleTerm
 
 
+@implementer(ITermWithDescription)
 class TermWithDescription(SimpleTerm):
     """
       >>> term = TermWithDescription('value', 'token', 'title')
@@ -15,10 +18,13 @@ class TermWithDescription(SimpleTerm):
       >>> term.value, term.token, term.title, term.description
       ('value', 'token', 'title', 'description')
     """
-    implements(ITermWithDescription)
 
     def __init__(self, value, token, title, description=None):
-        super(TermWithDescription, self).__init__(value, token=token, title=title)
+        super(TermWithDescription, self).__init__(
+            value,
+            token=token,
+            title=title
+        )
         self.description = description
 
 
@@ -44,8 +50,12 @@ class BrowsableTerm(TermWithDescription):
 
     def __init__(self, value, token=None, title=None, description=None,
                  browse_token=None, parent_token=None):
-        super(BrowsableTerm, self).__init__(value, token=token,
-                                            title=title, description=description)
+        super(BrowsableTerm, self).__init__(
+            value,
+            token=token,
+            title=title,
+            description=description
+        )
         self.browse_token = browse_token
         self.parent_token = parent_token
         if browse_token is not None or parent_token is not None:
diff --git a/plone/app/vocabularies/testing.py b/plone/app/vocabularies/testing.py
index f37b8ec..1e7953c 100644
--- a/plone/app/vocabularies/testing.py
+++ b/plone/app/vocabularies/testing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
diff --git a/plone/app/vocabularies/tests/__init__.py b/plone/app/vocabularies/tests/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/vocabularies/tests/__init__.py
+++ b/plone/app/vocabularies/tests/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/vocabularies/tests/base.py b/plone/app/vocabularies/tests/base.py
index 0d5c6b1..25bf05e 100644
--- a/plone/app/vocabularies/tests/base.py
+++ b/plone/app/vocabularies/tests/base.py
@@ -1,6 +1,6 @@
-from zope.site.hooks import setSite
-
+# -*- coding: utf-8 -*-
 from Products.ZCTextIndex.ParseTree import ParseError
+from zope.site.hooks import setSite
 
 
 def create_context():
diff --git a/plone/app/vocabularies/tests/test_timezonevocabularies.py b/plone/app/vocabularies/tests/test_timezonevocabularies.py
index ef19fd1..0a52c94 100644
--- a/plone/app/vocabularies/tests/test_timezonevocabularies.py
+++ b/plone/app/vocabularies/tests/test_timezonevocabularies.py
@@ -1,8 +1,8 @@
+# -*- coding: utf-8 -*-
 from plone.app.vocabularies.testing import PAVocabularies_INTEGRATION_TESTING
 from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.schema.interfaces import IVocabularyFactory
-
 import unittest2 as unittest
 
 
@@ -13,13 +13,19 @@ def setUp(self):
         self.portal = self.layer['portal']
 
     def test_timezone_vocabulary(self):
-        tzvocab = getUtility(IVocabularyFactory, 'plone.app.vocabularies.Timezones')
+        tzvocab = getUtility(
+            IVocabularyFactory,
+            'plone.app.vocabularies.Timezones'
+        )
         tz_list = [item.value for item in tzvocab(self.portal)]
         self.assertTrue('Africa/Abidjan' in tz_list)
         self.assertTrue('Europe/London' in tz_list)
 
     def test_timezone_vocabulary_query(self):
-        tzvocab = getUtility(IVocabularyFactory, 'plone.app.vocabularies.Timezones')
+        tzvocab = getUtility(
+            IVocabularyFactory,
+            'plone.app.vocabularies.Timezones'
+        )
         tz_list = [item.value for item in tzvocab(self.portal, query='vienna')]
         self.assertTrue('Europe/Vienna' in tz_list)
         self.assertTrue(len(tz_list) == 1)
diff --git a/plone/app/vocabularies/tests/test_vocabularies.py b/plone/app/vocabularies/tests/test_vocabularies.py
index b526da5..a278cf8 100644
--- a/plone/app/vocabularies/tests/test_vocabularies.py
+++ b/plone/app/vocabularies/tests/test_vocabularies.py
@@ -1,17 +1,18 @@
-import doctest
+# -*- coding: utf-8 -*-
 from doctest import DocTestSuite
-import unittest
-
-import zope.component
-from zope.component.testing import setUp, tearDown
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 from zope.configuration.xmlconfig import XMLConfig
 from zope.site import hooks
 
-import plone.app.vocabularies
+import doctest
+import unittest
+import zope.component
 
 
 def vocabSetUp(self):
     setUp()
+    import plone.app.vocabularies
     XMLConfig('meta.zcml', zope.component)()
     XMLConfig('configure.zcml', plone.app.vocabularies)()
     hooks.setHooks()
@@ -25,46 +26,71 @@ def vocabTearDown(self):
 
 def test_suite():
     optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE
-    return unittest.TestSuite((
-        DocTestSuite('plone.app.vocabularies.catalog',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.groups',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.language',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.security',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.skins',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.terms'),
-        DocTestSuite('plone.app.vocabularies.types',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.users',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.workflow',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.editors',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        DocTestSuite('plone.app.vocabularies.datetimerelated',
-                     setUp=vocabSetUp,
-                     tearDown=vocabTearDown,
-                     optionflags=optionflags),
-        ))
+    return unittest.TestSuite(
+        (
+            DocTestSuite(
+                'plone.app.vocabularies.terms'
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.catalog',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.datetimerelated',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.editors',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.groups',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.language',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.security',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.skins',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.types',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.users',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+            DocTestSuite(
+                'plone.app.vocabularies.workflow',
+                setUp=vocabSetUp,
+                tearDown=vocabTearDown,
+                optionflags=optionflags
+            ),
+        )
+    )
+
diff --git a/plone/app/vocabularies/types.py b/plone/app/vocabularies/types.py
index 522f0ba..28f2e12 100644
--- a/plone/app/vocabularies/types.py
+++ b/plone/app/vocabularies/types.py
@@ -1,44 +1,66 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_get
-from zope.interface import implements
+from Products.CMFCore.utils import getToolByName
+from zope.i18n import translate
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
-from zope.schema.vocabulary import SimpleVocabulary
 from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
-from zope.i18n import translate
-
-from Products.CMFCore.utils import getToolByName
 
 
 def getAllowedContentTypes(context):
-    """ computes the list of allowed content types by subtracting the site property blacklist
-        from the list of installed types.
+    """ computes the list of allowed content types ...
+    Here the mime types allowed in text fields are meant.
+
+    It does so by subtracting the site property blacklist from the list of
+    allowable (overall available) types.
     """
     allowable_types = getAllowableContentTypes(context)
     forbidden_types = getForbiddenContentTypes(context)
-    allowed_types = [type for type in allowable_types if type not in forbidden_types]
+    allowed_types = [
+        ctype for ctype in allowable_types
+        if ctype not in forbidden_types
+    ]
     return allowed_types
 
 
 def getAllowableContentTypes(context):
-    """ retrieves the list of installed content types by querying portal transforms. """
+    """ retrieves the list of available content types (aka mime-types) ...
+
+    ... by querying portal transforms.
+
+    Cite from over there:
+    This returns a list of mimetypes that can be used as input for textfields
+    by building a list of the inputs beginning with "text/" of all
+    transforms.
+    """
     portal_transforms = getToolByName(context, 'portal_transforms')
     return portal_transforms.listAvailableTextInputs()
 
 
 def getForbiddenContentTypes(context):
-    """ Convenence method for retrevng the site property 'forbidden_contenttypes'."""
+    """Method for retrieving the site property 'forbidden_contenttypes'.
+
+    This is a list of mime-types not allowed in text input fields.
+    """
     portal_properties = getToolByName(context, 'portal_properties', None)
     if portal_properties is not None:
-        site_properties = getattr(portal_properties, 'site_properties', None)
-        if site_properties is not None:
-            if site_properties.hasProperty('forbidden_contenttypes'):
-                return list(site_properties.getProperty('forbidden_contenttypes'))
+        return []
+    site_properties = getattr(portal_properties, 'site_properties', None)
+    if site_properties is not None:
+        return []
+    if site_properties.hasProperty('forbidden_contenttypes'):
+        return list(site_properties.getProperty('forbidden_contenttypes'))
     return []
 
 
+@implementer(IVocabularyFactory)
 class AllowableContentTypesVocabulary(object):
     """Vocabulary factory for allowable content types.
 
+    A list of mime-types that can be used as input for textfields.
+
       >>> from zope.component import queryUtility
       >>> from plone.app.vocabularies.tests.base import create_context
       >>> from plone.app.vocabularies.tests.base import DummyTool
@@ -64,23 +86,24 @@ class AllowableContentTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       ('text/plain', 'text/plain', 'text/plain')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
         items = list(getAllowableContentTypes(site))
         if 'text/x-plone-outputfilters-html' in items:
             items.remove('text/x-plone-outputfilters-html')
-        items.sort()
-        items = [SimpleTerm(i, i, i) for i in items]
+        items = [SimpleTerm(i, i, i) for i in sorted(items)]
         return SimpleVocabulary(items)
 
 AllowableContentTypesVocabularyFactory = AllowableContentTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class AllowedContentTypesVocabulary(object):
     """Vocabulary factory for allowed content types.
 
+    A list of mime-types that is allowed to be used as input for textfields.
+
       >>> from zope.component import queryUtility
       >>> from plone.app.vocabularies.tests.base import create_context
       >>> from plone.app.vocabularies.tests.base import DummyTool
@@ -110,24 +133,23 @@ class AllowedContentTypesVocabulary(object):
       <zope.schema.vocabulary.SimpleVocabulary object at ...>
 
       >>> len(types.by_token)
-      1
+      2
 
       >>> doc = types.by_token['text/plain']
       >>> doc.title, doc.token, doc.value
       ('text/plain', 'text/plain', 'text/plain')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
         items = list(getAllowedContentTypes(site))
-        items.sort()
-        items = [SimpleTerm(i, i, i) for i in items]
+        items = [SimpleTerm(i, i, i) for i in sorted(items)]
         return SimpleVocabulary(items)
 
 AllowedContentTypesVocabularyFactory = AllowedContentTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class PortalTypesVocabulary(object):
     """Vocabulary factory for portal types.
 
@@ -151,7 +173,6 @@ class PortalTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       (u'Page', 'Document', 'Document')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -162,13 +183,13 @@ def __call__(self, context):
         request = aq_get(ttool, 'REQUEST', None)
         items = [(translate(ttool[t].Title(), context=request), t)
                  for t in ttool.listContentTypes()]
-        items.sort()
-        items = [SimpleTerm(i[1], i[1], i[0]) for i in items]
+        items = [SimpleTerm(i[1], i[1], i[0]) for i in sorted(items)]
         return SimpleVocabulary(items)
 
 PortalTypesVocabularyFactory = PortalTypesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class UserFriendlyTypesVocabulary(object):
     """Vocabulary factory for user friendly portal types.
 
@@ -199,7 +220,6 @@ class UserFriendlyTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       (u'Page', 'Document', 'Document')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -209,8 +229,10 @@ def __call__(self, context):
             return SimpleVocabulary([])
 
         request = aq_get(ttool, 'REQUEST', None)
-        items = [(translate(ttool[t].Title(), context=request), t)
-                 for t in ptool.getUserFriendlyTypes()]
+        items = [
+            (translate(ttool[t].Title(), context=request), t)
+            for t in ptool.getUserFriendlyTypes()
+        ]
         items.sort()
         items = [SimpleTerm(i[1], i[1], i[0]) for i in items]
         return SimpleVocabulary(items)
@@ -218,14 +240,26 @@ def __call__(self, context):
 UserFriendlyTypesVocabularyFactory = UserFriendlyTypesVocabulary()
 
 
-BAD_TYPES = ("ATBooleanCriterion", "ATDateCriteria", "ATDateRangeCriterion",
-             "ATListCriterion", "ATPortalTypeCriterion", "ATReferenceCriterion",
-             "ATSelectionCriterion", "ATSimpleIntCriterion", "Plone Site",
-             "ATSimpleStringCriterion", "ATSortCriterion", "TempFolder",
-             "ATCurrentAuthorCriterion", "ATPathCriterion",
-             "ATRelativePathCriterion", )
-
-
+BAD_TYPES = [
+    "ATBooleanCriterion",
+    "ATCurrentAuthorCriterion",
+    "ATDateCriteria",
+    "ATDateRangeCriterion",
+    "ATListCriterion",
+    "ATPathCriterion",
+    "ATPortalTypeCriterion",
+    "ATReferenceCriterion",
+    "ATRelativePathCriterion",
+    "ATSelectionCriterion",
+    "ATSimpleIntCriterion",
+    "ATSimpleStringCriterion",
+    "ATSortCriterion",
+    "Plone Site",
+    "TempFolder",
+]
+
+
+@implementer(IVocabularyFactory)
 class ReallyUserFriendlyTypesVocabulary(object):
     """Vocabulary factory for really user friendly portal types.
 
@@ -253,7 +287,6 @@ class ReallyUserFriendlyTypesVocabulary(object):
       >>> doc.title, doc.token, doc.value
       (u'Page', 'Document', 'Document')
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -262,9 +295,11 @@ def __call__(self, context):
             return SimpleVocabulary([])
 
         request = aq_get(ttool, 'REQUEST', None)
-        items = [(translate(ttool[t].Title(), context=request), t)
-                 for t in ttool.listContentTypes()
-                 if t not in BAD_TYPES]
+        items = [
+            (translate(ttool[t].Title(), context=request), t)
+            for t in ttool.listContentTypes()
+            if t not in BAD_TYPES
+        ]
         items.sort()
         items = [SimpleTerm(i[1], i[1], i[0]) for i in items]
         return SimpleVocabulary(items)
diff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py
index 835ef0e..b7d63d7 100644
--- a/plone/app/vocabularies/users.py
+++ b/plone/app/vocabularies/users.py
@@ -1,16 +1,20 @@
 # -*- coding: utf-8 -*-
+from plone.app.vocabularies import SlicableVocabulary
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.vocabularies import SlicableVocabulary
 from zope.browser.interfaces import ITerms
 from zope.component.hooks import getSite
 from zope.formlib.interfaces import ISourceQueryView
-from zope.interface import implements, classProvides
-from zope.schema.interfaces import ISource, IContextSourceBinder
+from zope.interface import implementer
+from zope.interface import provider
+from zope.schema.interfaces import IContextSourceBinder
+from zope.schema.interfaces import ISource
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 
 
+@implementer(ISource)
+@provider(IContextSourceBinder)
 class UsersSource(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -41,8 +45,6 @@ class UsersSource(object):
       >>> source.get('user1'), source.get('noone')
       ('user1', None)
     """
-    implements(ISource)
-    classProvides(IContextSourceBinder)
 
     def __init__(self, context):
         self.context = context
@@ -100,19 +102,22 @@ def __iter__(self):
         return self._terms
 
 
+@implementer(IVocabularyFactory)
 class UsersFactory(object):
+    """Factory creating a UsersVocabulary
     """
-    """
-    implements(IVocabularyFactory)
 
     def __call__(self, context, query=''):
         if context is None:
             context = getSite()
         users = getToolByName(context, "acl_users")
         return UsersVocabulary.fromItems(
-            users.searchUsers(fullname=query), context)
+            users.searchUsers(fullname=query),
+            context
+        )
 
 
+@implementer(ITerms, ISourceQueryView)
 class UsersSourceQueryView(object):
     """
       >>> from plone.app.vocabularies.tests.base import create_context
@@ -173,9 +178,6 @@ class UsersSourceQueryView(object):
       ['user1', 'user2']
     """
 
-    implements(ITerms,
-               ISourceQueryView)
-
     template = ViewPageTemplateFile('searchabletextsource.pt')
 
     def __init__(self, context, request):
diff --git a/plone/app/vocabularies/workflow.py b/plone/app/vocabularies/workflow.py
index 24bc3f5..e28ff81 100644
--- a/plone/app/vocabularies/workflow.py
+++ b/plone/app/vocabularies/workflow.py
@@ -1,19 +1,19 @@
 # -*- coding:utf-8 -*-
+from Acquisition import aq_get
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode
 from zope.i18n import translate
 from zope.i18nmessageid import MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from Acquisition import aq_get
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import safe_unicode
-
 _ = MessageFactory('plone')
 
 
+@implementer(IVocabularyFactory)
 class WorkflowsVocabulary(object):
     """Vocabulary factory for workflows.
 
@@ -53,7 +53,6 @@ class WorkflowsVocabulary(object):
       >>> noticias.title == 'Workflow de Notícias'.decode('utf-8')
       True
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         items = []
@@ -63,13 +62,16 @@ def __call__(self, context):
             items = [(w.title, w.id) for w in wtool.values()]
             items.sort()
             # All vocabularies return theirs term title as unicode
-            items = [SimpleTerm(i[1], i[1], safe_unicode(i[0]))
-                                                 for i in items]
+            items = [
+                SimpleTerm(i[1], i[1], safe_unicode(i[0]))
+                for i in items
+            ]
         return SimpleVocabulary(items)
 
 WorkflowsVocabularyFactory = WorkflowsVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class WorkflowStatesVocabulary(object):
     """Vocabulary factory for workflow states.
 
@@ -104,7 +106,6 @@ class WorkflowStatesVocabulary(object):
       >>> rev.title == 'Revisão [revisao]'.decode('utf-8')
       True
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
@@ -120,17 +121,24 @@ def __call__(self, context):
 
         items = wtool.listWFStatesByTitle(filter_similar=True)
         items = [(safe_unicode(i[0]), i[1]) for i in items]
-        items_dict = dict([(i[1], translate(_(i[0]), context=request))
-                                                  for i in items])
+        items_dict = dict(  # no dict comprehension in py 2.6
+            [
+                (i[1], translate(_(i[0]), context=request))
+                for i in items
+            ]
+        )
         items_list = [(k, v) for k, v in items_dict.items()]
         items_list.sort(lambda x, y: cmp(x[1], y[1]))
-        terms = [SimpleTerm(k, title=u'%s [%s]' % (v, k))
-                                                  for k, v in items_list]
+        terms = [
+            SimpleTerm(k, title=u'%s [%s]' % (v, k))
+            for k, v in items_list
+        ]
         return SimpleVocabulary(terms)
 
 WorkflowStatesVocabularyFactory = WorkflowStatesVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class WorkflowTransitionsVocabulary(object):
     """Vocabulary factory for workflow transitions
 
@@ -188,7 +196,6 @@ class WorkflowTransitionsVocabulary(object):
       >>> publ.title == 'Publicação [publicacao]'.decode('utf-8')
       True
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         site = getSite()
diff --git a/setup.py b/setup.py
index e506c47..a1c6a94 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 setup(
     name='plone.app.vocabularies',
     version=version,
-    description="A collection of generally useful vocabularies.",
+    description="Collection of generally useful vocabularies for Plone.",
     long_description='%s\n%s' % (
         open("README.rst").read(),
         open("CHANGES.rst").read()
@@ -29,14 +29,11 @@
     namespace_packages=['plone', 'plone.app'],
     include_package_data=True,
     zip_safe=False,
-    extras_require=dict(
-        test=[
-            'plone.app.testing',
-            'zope.configuration',
-            'zope.testing',
-        ]
-    ),
     install_requires=[
+        'Acquisition',
+        'plone.app.querystring',
+        'Products.CMFCore',
+        'pytz',
         'setuptools',
         'zope.browser',
         'zope.component',
@@ -46,10 +43,13 @@
         'zope.interface',
         'zope.schema',
         'zope.site',
-        'Acquisition',
-        'Products.CMFCore',
         'Zope2',
-        'plone.app.querystring',
-        'pytz',
     ],
+    extras_require=dict(
+        test=[
+            'plone.app.testing',
+            'zope.configuration',
+            'zope.testing',
+        ]
+    ),
 )


