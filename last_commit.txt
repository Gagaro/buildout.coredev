Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-19T23:50:45+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/f30624d211b8e6f6a4e5866aa20d96974b208f02

In the file view, render HTML5 &lt;audio&gt; or &lt;video&gt; tags for audio respectively video file types. Ancient browsers, which do not support that, just don't render these tags.

Files changed:
A plone/app/contenttypes/browser/file.py
M docs/CHANGES.rst
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/browser/templates/file.pt

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index a8e25e2..46974f2 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 1.2 (unreleased)
 ----------------
 
+- In the file view, render HTML5 ``<audio>`` or ``<video>`` tags for audio
+  respectively video file types. Ancient browsers, which do not support that,
+  just don't render these tags.
+  [thet]
+
 - Add ``event_listing`` to available view methods for the Folder and Collection
   types.
   [thet]
diff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml
index 44c0d62..a3fc913 100644
--- a/plone/app/contenttypes/browser/configure.zcml
+++ b/plone/app/contenttypes/browser/configure.zcml
@@ -117,6 +117,7 @@
     name="file_view"
     for="plone.app.contenttypes.interfaces.IFile"
     layer="plone.app.contenttypes.interfaces.IPloneAppContenttypesLayer"
+    class=".file.FileView"
     template="templates/file.pt"
     permission="zope2.View"
     menu="plone_displayviews"
diff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py
new file mode 100644
index 0000000..ad37107
--- /dev/null
+++ b/plone/app/contenttypes/browser/file.py
@@ -0,0 +1,18 @@
+from plone.app.contenttypes.browser.utils import Utils
+
+
+class FileView(Utils):
+
+    def __init__(self, context, request):
+        super(FileView, self).__init__(context, request)
+
+    def is_videotype(self):
+        ct = self.context.file.contentType
+        return 'video/' in ct
+
+    def is_audiotype(self):
+        ct = self.context.file.contentType
+        return 'audio/' in ct
+
+    def get_mimetype_icon(self):
+        return super(FileView, self).getMimeTypeIcon(self.context.file)
diff --git a/plone/app/contenttypes/browser/templates/file.pt b/plone/app/contenttypes/browser/templates/file.pt
index 3cfc525..547d748 100644
--- a/plone/app/contenttypes/browser/templates/file.pt
+++ b/plone/app/contenttypes/browser/templates/file.pt
@@ -11,10 +11,10 @@
     <metal:content-core fill-slot="content-core">
         <metal:block define-macro="content-core"
                      tal:define="content_type context/file/contentType|nothing;
-                                 v python:context.restrictedTraverse('contenttype_utils');">
+                                 download_url string:${context/absolute_url}/@@download/file/${context/file/filename}">
             <p>
-                <a tal:attributes="href string:${context/absolute_url}/@@download/file/${context/file/filename}">
-                    <img tal:attributes="src python: v.getMimeTypeIcon(context.file);
+                <a tal:attributes="href download_url">
+                    <img tal:attributes="src view/get_mimetype_icon;
                                          alt content_type;" border="0"  />
                     <tal:name tal:content="context/file/filename" >Filename</tal:name>
                 </a>
@@ -24,6 +24,14 @@
                       &mdash; <span tal:replace="kb" /> KB</span>
             </p>
 
+            <video tal:condition="view/is_videotype" controls="controls">
+              <source tal:attributes="src download_url; type content_type"></source>
+            </video>
+
+            <audio tal:condition="view/is_audiotype" controls="controls">
+              <source tal:attributes="src download_url; type content_type"></source>
+            </audio>
+
             <div tal:condition="python: content_type.startswith('text')">
                 <h2 i18n:translate="heading_file_contents">File contents</h2>
                 <pre tal:content="context/file/data|nothing" />


Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-20T12:12:45+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/fa5e9f10da64b3757d05637fce23043ca33d19bf

tests for &lt;audio&gt; &lt;video&gt; tag in @@file_view. plus: dont fail, if no filename or contenttype is available for the file

Files changed:
M plone/app/contenttypes/browser/utils.py
M plone/app/contenttypes/tests/test_file.py

diff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py
index b816539..c4c7037 100644
--- a/plone/app/contenttypes/browser/utils.py
+++ b/plone/app/contenttypes/browser/utils.py
@@ -31,8 +31,11 @@ def getMimeTypeIcon(self, content_file):
         )
         portal_url = pstate.portal_url()
         mtr = getToolByName(context, "mimetypes_registry")
-        mime = list(mtr.lookup(content_file.contentType))
-        mime.append(mtr.lookupExtension(content_file.filename))
+        mime = []
+        if content_file.contentType:
+            mime.append(mtr.lookup(content_file.contentType))
+        if content_file.filename:
+            mime.append(mtr.lookupExtension(content_file.filename))
         mime.append(mtr.lookup("application/octet-stream")[0])
         icon_paths = [m.icon_path for m in mime if hasattr(m, 'icon_path')]
         if icon_paths:
diff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py
index ca359e6..b31fd86 100644
--- a/plone/app/contenttypes/tests/test_file.py
+++ b/plone/app/contenttypes/tests/test_file.py
@@ -23,6 +23,9 @@
 from plone.app.testing import TEST_USER_ID, setRoles
 from plone.app.z3cform.interfaces import IPloneFormLayer
 
+from plone.namedfile.file import NamedFile
+from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer
+
 
 class FileIntegrationTest(unittest.TestCase):
 
@@ -79,6 +82,37 @@ def test_view(self):
         self.assertTrue('My File' in view())
         self.assertTrue('This is my file.' in view())
 
+    def test_view_no_video_audio_tag(self):
+        self.portal.invokeFactory('File', 'file')
+        file = self.portal['file']
+        file.file = NamedFile()
+        file.file.contentType = 'application/pdf'
+        alsoProvides(self.request, IPloneAppContenttypesLayer)
+        view = file.restrictedTraverse('@@file_view')
+        rendered = view()
+        self.assertTrue('</audio>' not in rendered)
+        self.assertTrue('</video>' not in rendered)
+
+    def test_view_video_tag(self):
+        self.portal.invokeFactory('File', 'file')
+        file = self.portal['file']
+        file.file = NamedFile()
+        file.file.contentType = 'audio/mp3'
+        alsoProvides(self.request, IPloneAppContenttypesLayer)
+        view = file.restrictedTraverse('@@file_view')
+        rendered = view()
+        self.assertTrue('</audio>' in rendered)
+
+    def test_view_audio_tag(self):
+        self.portal.invokeFactory('File', 'file')
+        file = self.portal['file']
+        file.file = NamedFile()
+        file.file.contentType = 'video/ogv'
+        alsoProvides(self.request, IPloneAppContenttypesLayer)
+        view = file.restrictedTraverse('@@file_view')
+        rendered = view()
+        self.assertTrue('</video>' in rendered)
+
 
 class FileFunctionalTest(unittest.TestCase):
 


Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-21T11:02:48+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/0492cc7ca6efa424c9c225fe3274dfcdec1cfda6

Merge pull request #201 from plone/thet-audiovideo

audio/video tag for file view

Files changed:
A plone/app/contenttypes/browser/file.py
M docs/CHANGES.rst
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/browser/templates/file.pt
M plone/app/contenttypes/browser/utils.py
M plone/app/contenttypes/tests/test_file.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index a8e25e2..46974f2 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 1.2 (unreleased)
 ----------------
 
+- In the file view, render HTML5 ``<audio>`` or ``<video>`` tags for audio
+  respectively video file types. Ancient browsers, which do not support that,
+  just don't render these tags.
+  [thet]
+
 - Add ``event_listing`` to available view methods for the Folder and Collection
   types.
   [thet]
diff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml
index 44c0d62..a3fc913 100644
--- a/plone/app/contenttypes/browser/configure.zcml
+++ b/plone/app/contenttypes/browser/configure.zcml
@@ -117,6 +117,7 @@
     name="file_view"
     for="plone.app.contenttypes.interfaces.IFile"
     layer="plone.app.contenttypes.interfaces.IPloneAppContenttypesLayer"
+    class=".file.FileView"
     template="templates/file.pt"
     permission="zope2.View"
     menu="plone_displayviews"
diff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py
new file mode 100644
index 0000000..ad37107
--- /dev/null
+++ b/plone/app/contenttypes/browser/file.py
@@ -0,0 +1,18 @@
+from plone.app.contenttypes.browser.utils import Utils
+
+
+class FileView(Utils):
+
+    def __init__(self, context, request):
+        super(FileView, self).__init__(context, request)
+
+    def is_videotype(self):
+        ct = self.context.file.contentType
+        return 'video/' in ct
+
+    def is_audiotype(self):
+        ct = self.context.file.contentType
+        return 'audio/' in ct
+
+    def get_mimetype_icon(self):
+        return super(FileView, self).getMimeTypeIcon(self.context.file)
diff --git a/plone/app/contenttypes/browser/templates/file.pt b/plone/app/contenttypes/browser/templates/file.pt
index 3cfc525..547d748 100644
--- a/plone/app/contenttypes/browser/templates/file.pt
+++ b/plone/app/contenttypes/browser/templates/file.pt
@@ -11,10 +11,10 @@
     <metal:content-core fill-slot="content-core">
         <metal:block define-macro="content-core"
                      tal:define="content_type context/file/contentType|nothing;
-                                 v python:context.restrictedTraverse('contenttype_utils');">
+                                 download_url string:${context/absolute_url}/@@download/file/${context/file/filename}">
             <p>
-                <a tal:attributes="href string:${context/absolute_url}/@@download/file/${context/file/filename}">
-                    <img tal:attributes="src python: v.getMimeTypeIcon(context.file);
+                <a tal:attributes="href download_url">
+                    <img tal:attributes="src view/get_mimetype_icon;
                                          alt content_type;" border="0"  />
                     <tal:name tal:content="context/file/filename" >Filename</tal:name>
                 </a>
@@ -24,6 +24,14 @@
                       &mdash; <span tal:replace="kb" /> KB</span>
             </p>
 
+            <video tal:condition="view/is_videotype" controls="controls">
+              <source tal:attributes="src download_url; type content_type"></source>
+            </video>
+
+            <audio tal:condition="view/is_audiotype" controls="controls">
+              <source tal:attributes="src download_url; type content_type"></source>
+            </audio>
+
             <div tal:condition="python: content_type.startswith('text')">
                 <h2 i18n:translate="heading_file_contents">File contents</h2>
                 <pre tal:content="context/file/data|nothing" />
diff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py
index b816539..c4c7037 100644
--- a/plone/app/contenttypes/browser/utils.py
+++ b/plone/app/contenttypes/browser/utils.py
@@ -31,8 +31,11 @@ def getMimeTypeIcon(self, content_file):
         )
         portal_url = pstate.portal_url()
         mtr = getToolByName(context, "mimetypes_registry")
-        mime = list(mtr.lookup(content_file.contentType))
-        mime.append(mtr.lookupExtension(content_file.filename))
+        mime = []
+        if content_file.contentType:
+            mime.append(mtr.lookup(content_file.contentType))
+        if content_file.filename:
+            mime.append(mtr.lookupExtension(content_file.filename))
         mime.append(mtr.lookup("application/octet-stream")[0])
         icon_paths = [m.icon_path for m in mime if hasattr(m, 'icon_path')]
         if icon_paths:
diff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py
index ca359e6..b31fd86 100644
--- a/plone/app/contenttypes/tests/test_file.py
+++ b/plone/app/contenttypes/tests/test_file.py
@@ -23,6 +23,9 @@
 from plone.app.testing import TEST_USER_ID, setRoles
 from plone.app.z3cform.interfaces import IPloneFormLayer
 
+from plone.namedfile.file import NamedFile
+from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer
+
 
 class FileIntegrationTest(unittest.TestCase):
 
@@ -79,6 +82,37 @@ def test_view(self):
         self.assertTrue('My File' in view())
         self.assertTrue('This is my file.' in view())
 
+    def test_view_no_video_audio_tag(self):
+        self.portal.invokeFactory('File', 'file')
+        file = self.portal['file']
+        file.file = NamedFile()
+        file.file.contentType = 'application/pdf'
+        alsoProvides(self.request, IPloneAppContenttypesLayer)
+        view = file.restrictedTraverse('@@file_view')
+        rendered = view()
+        self.assertTrue('</audio>' not in rendered)
+        self.assertTrue('</video>' not in rendered)
+
+    def test_view_video_tag(self):
+        self.portal.invokeFactory('File', 'file')
+        file = self.portal['file']
+        file.file = NamedFile()
+        file.file.contentType = 'audio/mp3'
+        alsoProvides(self.request, IPloneAppContenttypesLayer)
+        view = file.restrictedTraverse('@@file_view')
+        rendered = view()
+        self.assertTrue('</audio>' in rendered)
+
+    def test_view_audio_tag(self):
+        self.portal.invokeFactory('File', 'file')
+        file = self.portal['file']
+        file.file = NamedFile()
+        file.file.contentType = 'video/ogv'
+        alsoProvides(self.request, IPloneAppContenttypesLayer)
+        view = file.restrictedTraverse('@@file_view')
+        rendered = view()
+        self.assertTrue('</video>' in rendered)
+
 
 class FileFunctionalTest(unittest.TestCase):
 


