Repository: plone.theme
Branch: refs/heads/master
Date: 2015-04-20T23:14:12+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.theme/commit/36307effe6059f9ee2fb57cbab130174a08bb68a

Add missing changelog slug

Files changed:
M CHANGES.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index 8595725..94eb18c 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,6 +1,11 @@
 Changelog
 =========
 
+2.1.4 (unreleased)
+------------------
+
+- Nothing changed yet.
+
 2.1.3 (2015-03-27)
 ------------------
 


Repository: plone.theme
Branch: refs/heads/master
Date: 2015-04-20T23:15:35+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.theme/commit/4e7978a29bf351a4945d16140bebaa9d990cb0ce

txt -&gt; rst

Files changed:
A CHANGES.rst
A README.rst
A plone/theme/README.rst
M MANIFEST.in
M setup.py
D CHANGES.txt
D README.txt
D plone/theme/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..94eb18c
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,99 @@
+Changelog
+=========
+
+2.1.4 (unreleased)
+------------------
+
+- Nothing changed yet.
+
+2.1.3 (2015-03-27)
+------------------
+
+- Test layer is testing layer.
+  [bloodbare]
+
+
+2.1.2 (2015-03-21)
+------------------
+
+- Move tests from PloneTestCase to plone.app.testing.
+  [sdelcourt,timo]
+
+
+2.1.1 (2014-03-02)
+------------------
+
+- Remove hard dependency on CMFDefault.
+  [davisagli]
+
+2.1 - 2011-05-12
+----------------
+
+- Update to import BeforeTraverseEvent from zope.traversing instead of
+  zope.app.publication.
+  [davisagli]
+
+- Add MANIFEST.in.
+  [WouterVH]
+
+
+2.0 - 2010-07-18
+----------------
+
+- Update license to GPL version 2 only.
+  [hannosch]
+
+
+2.0b2 - 2010-03-05
+------------------
+
+- Protect against running multiple times. This can happen when using ++skin++
+  traversers or VirtualHostMonster.
+  [wichert]
+
+
+2.0b1 - 2010-01-02
+------------------
+
+- Fix an error introduced by my previous adjustment. If a skin layer
+  extending the default layer was used (which is typical), then the
+  default layer would end up with higher precedence than browser
+  layers not extending the default layer.
+  [davisagli]
+
+
+2.0a2 - 2009-11-13
+------------------
+
+- Inherit from the CMFDefault layer again, for compatibility with products
+  that depend only on CMF but are also usable within Plone, and register
+  views to the CMFDefault layer.
+  [davisagli]
+
+
+2.0a1 - 2009-04-05
+------------------
+
+- Avoid inheriting from the CMFDefault browser layer and rather define our
+  own. We don't have anything in common with the CMFDefault layer.
+  [hannosch]
+
+- Declare test dependencies in an extra.
+  [hannosch]
+
+- Specify package dependencies.
+  [hannosch]
+
+
+1.1 - 2009-04-04
+----------------
+
+- Make sure the theme layer takes precedence over other browser layers.
+  [davisagli]
+
+
+1.0 - 2007-08-15
+----------------
+
+- First stable release
+  [wichert]
diff --git a/CHANGES.txt b/CHANGES.txt
deleted file mode 100644
index 94eb18c..0000000
--- a/CHANGES.txt
+++ /dev/null
@@ -1,99 +0,0 @@
-Changelog
-=========
-
-2.1.4 (unreleased)
-------------------
-
-- Nothing changed yet.
-
-2.1.3 (2015-03-27)
-------------------
-
-- Test layer is testing layer.
-  [bloodbare]
-
-
-2.1.2 (2015-03-21)
-------------------
-
-- Move tests from PloneTestCase to plone.app.testing.
-  [sdelcourt,timo]
-
-
-2.1.1 (2014-03-02)
-------------------
-
-- Remove hard dependency on CMFDefault.
-  [davisagli]
-
-2.1 - 2011-05-12
-----------------
-
-- Update to import BeforeTraverseEvent from zope.traversing instead of
-  zope.app.publication.
-  [davisagli]
-
-- Add MANIFEST.in.
-  [WouterVH]
-
-
-2.0 - 2010-07-18
-----------------
-
-- Update license to GPL version 2 only.
-  [hannosch]
-
-
-2.0b2 - 2010-03-05
-------------------
-
-- Protect against running multiple times. This can happen when using ++skin++
-  traversers or VirtualHostMonster.
-  [wichert]
-
-
-2.0b1 - 2010-01-02
-------------------
-
-- Fix an error introduced by my previous adjustment. If a skin layer
-  extending the default layer was used (which is typical), then the
-  default layer would end up with higher precedence than browser
-  layers not extending the default layer.
-  [davisagli]
-
-
-2.0a2 - 2009-11-13
-------------------
-
-- Inherit from the CMFDefault layer again, for compatibility with products
-  that depend only on CMF but are also usable within Plone, and register
-  views to the CMFDefault layer.
-  [davisagli]
-
-
-2.0a1 - 2009-04-05
-------------------
-
-- Avoid inheriting from the CMFDefault browser layer and rather define our
-  own. We don't have anything in common with the CMFDefault layer.
-  [hannosch]
-
-- Declare test dependencies in an extra.
-  [hannosch]
-
-- Specify package dependencies.
-  [hannosch]
-
-
-1.1 - 2009-04-04
-----------------
-
-- Make sure the theme layer takes precedence over other browser layers.
-  [davisagli]
-
-
-1.0 - 2007-08-15
-----------------
-
-- First stable release
-  [wichert]
diff --git a/MANIFEST.in b/MANIFEST.in
index 48ebc74..6acb23e 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,6 +1,6 @@
-include *.txt
+include *.rst
 
 recursive-include docs *
 recursive-include plone *
 
-global-exclude *pyc
\ No newline at end of file
+global-exclude *pyc
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..869d1fb
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,4 @@
+Overview
+========
+
+Tools for managing themes in CMF and Plone sites.
diff --git a/README.txt b/README.txt
deleted file mode 100644
index 869d1fb..0000000
--- a/README.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-Overview
-========
-
-Tools for managing themes in CMF and Plone sites.
diff --git a/plone/theme/README.rst b/plone/theme/README.rst
new file mode 100644
index 0000000..f69fedc
--- /dev/null
+++ b/plone/theme/README.rst
@@ -0,0 +1,93 @@
+plone.theme
+===========
+
+This package lets you mark the request with a "layer" interface conditional
+on the currently selected skin (theme) in the portal_skins tool.
+
+Most Zope 3 "visual" directives, like <browser:page /> or <browser:viewlet />
+accept a 'layer' attribute, which should point to an interface. Recall that a
+view is a multi-adapter on (context, request). Most views are registered
+so that the 'request' being adapted only needs to provide Interface. This
+is equivalent to saying layer="*".
+
+By applying a marker interface to the request, and registering a view or
+viewlet with this interface as the adapted 'layer', we can override a more
+general view, or make a viewlet that is only shown for a particular layer.
+
+In the context of CMF and Plone, we'd like to tie the layer to the current
+skin selection. We do that by name.
+
+What you have to do
+-------------------
+
+First, you should create a marker interface:
+
+    >>> from zope.interface import Interface
+    >>> class IMyTheme(Interface):
+    ...     """Marker interface for skins part of 'My Theme'
+    ...     """
+
+Then, register this as a theme layer in ZCML:
+
+    <interface
+      interface=".interfaces.IMyTheme"
+      type="zope.publisher.interfaces.browser.IBrowserSkinType"
+      name="My Theme"
+      />
+
+The title here must match the name of the theme/skin selection in
+portal_skins.
+
+How it works
+------------
+
+Behind the scenes, the <interface /> registration marks IMyTheme with the
+"IInterface" IThemelayer, and registers IMyTheme as a utility named "My Theme"
+and providing IBrowserSkinType.
+
+We do something to this effect in tests/tests.zcml.
+
+Let us define the "My Theme" skin selection:
+
+    >>> from Products.CMFCore.utils import getToolByName
+    >>> portal_skins = getToolByName(layer['portal'], 'portal_skins')
+    >>> default_skin = portal_skins.getDefaultSkin()
+    >>> skin_path = portal_skins._getSelections()[default_skin]
+    >>> portal_skins.addSkinSelection('My Theme', skin_path)
+
+In tests/tests.zcml we have registered two version of a view called
+@@layer-test-view. One, for the default skin layer, simply outputs "Default".
+The other outputs "My Theme".
+
+Before we turn on the skin, we will get the default view.
+
+    >>> from plone.testing import z2
+
+    >>> from plone.testing.z2 import Browser
+    >>> from Testing.ZopeTestCase import user_password
+    >>> with z2.zopeApp() as app:
+    ...     browser = Browser(app)
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    >>> print browser.contents
+    Default
+
+However, if we turn the skin on, we should see the effects of the marker
+interface being applied.
+
+    >>> portal_skins.default_skin = 'My Theme'
+    >>> import transaction
+    >>> transaction.commit()
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    >>> print browser.contents
+    My Theme
+
+And if we switch back:
+
+    >>> portal_skins.default_skin = 'Plone Default'
+    >>> transaction.commit()
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    >>> print browser.contents
+    Default
diff --git a/plone/theme/README.txt b/plone/theme/README.txt
deleted file mode 100644
index f69fedc..0000000
--- a/plone/theme/README.txt
+++ /dev/null
@@ -1,93 +0,0 @@
-plone.theme
-===========
-
-This package lets you mark the request with a "layer" interface conditional
-on the currently selected skin (theme) in the portal_skins tool.
-
-Most Zope 3 "visual" directives, like <browser:page /> or <browser:viewlet />
-accept a 'layer' attribute, which should point to an interface. Recall that a
-view is a multi-adapter on (context, request). Most views are registered
-so that the 'request' being adapted only needs to provide Interface. This
-is equivalent to saying layer="*".
-
-By applying a marker interface to the request, and registering a view or
-viewlet with this interface as the adapted 'layer', we can override a more
-general view, or make a viewlet that is only shown for a particular layer.
-
-In the context of CMF and Plone, we'd like to tie the layer to the current
-skin selection. We do that by name.
-
-What you have to do
--------------------
-
-First, you should create a marker interface:
-
-    >>> from zope.interface import Interface
-    >>> class IMyTheme(Interface):
-    ...     """Marker interface for skins part of 'My Theme'
-    ...     """
-
-Then, register this as a theme layer in ZCML:
-
-    <interface
-      interface=".interfaces.IMyTheme"
-      type="zope.publisher.interfaces.browser.IBrowserSkinType"
-      name="My Theme"
-      />
-
-The title here must match the name of the theme/skin selection in
-portal_skins.
-
-How it works
-------------
-
-Behind the scenes, the <interface /> registration marks IMyTheme with the
-"IInterface" IThemelayer, and registers IMyTheme as a utility named "My Theme"
-and providing IBrowserSkinType.
-
-We do something to this effect in tests/tests.zcml.
-
-Let us define the "My Theme" skin selection:
-
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> portal_skins = getToolByName(layer['portal'], 'portal_skins')
-    >>> default_skin = portal_skins.getDefaultSkin()
-    >>> skin_path = portal_skins._getSelections()[default_skin]
-    >>> portal_skins.addSkinSelection('My Theme', skin_path)
-
-In tests/tests.zcml we have registered two version of a view called
-@@layer-test-view. One, for the default skin layer, simply outputs "Default".
-The other outputs "My Theme".
-
-Before we turn on the skin, we will get the default view.
-
-    >>> from plone.testing import z2
-
-    >>> from plone.testing.z2 import Browser
-    >>> from Testing.ZopeTestCase import user_password
-    >>> with z2.zopeApp() as app:
-    ...     browser = Browser(app)
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    >>> print browser.contents
-    Default
-
-However, if we turn the skin on, we should see the effects of the marker
-interface being applied.
-
-    >>> portal_skins.default_skin = 'My Theme'
-    >>> import transaction
-    >>> transaction.commit()
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    >>> print browser.contents
-    My Theme
-
-And if we switch back:
-
-    >>> portal_skins.default_skin = 'Plone Default'
-    >>> transaction.commit()
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    >>> print browser.contents
-    Default
diff --git a/setup.py b/setup.py
index a575789..2a1f9c7 100644
--- a/setup.py
+++ b/setup.py
@@ -8,11 +8,11 @@ def read(*rnames):
 version = '2.1.3'
 
 long_description = (
-    read('README.txt')
+    read('README.rst')
     + '\n' +
-    read('plone', 'theme', 'README.txt')
+    read('plone', 'theme', 'README.rst')
     + '\n' +
-    read('CHANGES.txt')
+    read('CHANGES.rst')
     + '\n'
     )
 


