Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-10-08T15:43:16-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.tiles/commit/4f7a5d8f6600fc1a9fb2b22360241d029f7c2a6a

Fix decoding List type of Choice value types

Files changed:
M CHANGELOG.rst
M plone/tiles/data.py
M plone/tiles/data.rst

diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index fbbfc6b..0ae21cb 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -4,7 +4,8 @@ Changelog
 1.5.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fix decoding List type of Choice value types
+  [vangheem]
 
 
 1.5.0 (2015-09-04)
diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index 83d2586..268a3be 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -298,8 +298,8 @@ def decode(data, schema, missing=True):
 
             for item in value:
                 if isinstance(item, str):
-                    value = unicode(value, 'utf-8')
-                if not isinstance(item, field.value_type._type):
+                    value = unicode(item, 'utf-8')
+                if field.value_type._type and not isinstance(item, field.value_type._type):
                     item = value_type_field_type(item)
                 converted.append(item)
 
diff --git a/plone/tiles/data.rst b/plone/tiles/data.rst
index 01d160a..2a40190 100644
--- a/plone/tiles/data.rst
+++ b/plone/tiles/data.rst
@@ -26,6 +26,8 @@ First, we'll create a simple schema that exercises several field types:
     ...     float       = schema.Float(title=u"Float")
     ...     bool        = schema.Bool(title=u"Bool")
     ...     weekday     = schema.Choice(title=u"Weekday", values=weekdays)
+    ...     list        = schema.List(value_type=schema.TextLine())
+    ...     listchoice  = schema.List(value_type=schema.Choice(vocabulary='foobar'))
 
 A simple encode produces a query string:
 
@@ -113,14 +115,14 @@ the first example above.
 
     >>> data = dict(text_line=u'A', ascii_line=u'B', text=u'C\nD', ascii=u'E\nF', int=3, float=1.2, bool=False, weekday=u'Saturday')
     >>> sorted(decode(data, ISimple).items())
-    [('ascii', 'E\nF'), ('ascii_line', 'B'), ('bool', False), ('float', 1.2), ('int', 3), ('text', u'C\nD'), ('text_line', u'A'), ('weekday', u'Saturday')]
+    [('ascii', 'E\nF'), ('ascii_line', 'B'), ('bool', False), ('float', 1.2), ('int', 3), ('list', None), ('listchoice', None), ('text', u'C\nD'), ('text_line', u'A'), ('weekday', u'Saturday')]
 
 If any values are missing from the input dictionary, they will default to
 ``missing_value``.
 
     >>> data = dict(text_line=u'A', ascii_line=u'B', int=3, float=1.2, bool=False, weekday=u'Saturday')
     >>> sorted(decode(data, ISimple).items())
-    [('ascii', None), ('ascii_line', 'B'), ('bool', False), ('float', 1.2), ('int', 3), ('text', u'Missing'), ('text_line', u'A'), ('weekday', u'Saturday')]
+    [('ascii', None), ('ascii_line', 'B'), ('bool', False), ('float', 1.2), ('int', 3), ('list', None), ('listchoice', None), ('text', u'Missing'), ('text_line', u'A'), ('weekday', u'Saturday')]
 
 If you pass ``missing=False``, the values are ignored instead.
 
@@ -133,3 +135,15 @@ Decoding also works for lists and their value types:
     >>> data = dict(list=[u'a', u'b'])
     >>> sorted(decode(data, ISequences, missing=False).items())
     [('list', ['a', 'b'])]
+
+Decoding should work with lists and the ISimple schema
+
+    >>> data = dict(list=['a', 'b'])
+    >>> sorted(decode(data, ISimple, missing=False).items())
+    [('list', [u'a', u'b'])]
+
+And list choice fields
+
+    >>> data = dict(listchoice=['a', 'b'])
+    >>> sorted(decode(data, ISimple, missing=False).items())
+    [('listchoice', ['a', 'b'])]


