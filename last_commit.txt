Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/532b607d1cfc0f15826966ea00d0bcc7d4f37560

Move language control panel to z3c.form/p.a.registry.

Files changed:
A Products/CMFPlone/controlpanel/bbb/language.py
A Products/CMFPlone/controlpanel/browser/language.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
M Products/CMFPlone/controlpanel/bbb/configure.zcml
M Products/CMFPlone/controlpanel/bbb/editing.py
M Products/CMFPlone/controlpanel/bbb/maintenance.py
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/controlpanel/browser/editing.py
M Products/CMFPlone/controlpanel/browser/maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/tests/robot/keywords.robot
M Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot

diff --git a/Products/CMFPlone/controlpanel/bbb/configure.zcml b/Products/CMFPlone/controlpanel/bbb/configure.zcml
index e669463..638fb18 100644
--- a/Products/CMFPlone/controlpanel/bbb/configure.zcml
+++ b/Products/CMFPlone/controlpanel/bbb/configure.zcml
@@ -4,6 +4,7 @@
     xmlns:browser="http://namespaces.zope.org/browser">
 
   <adapter factory=".editing.EditingControlPanelAdapter" />
+  <adapter factory=".language.LanguageControlPanelAdapter" />
   <adapter factory=".maintenance.MaintenanceControlPanelAdapter" />
   <adapter factory=".mail.MailControlPanelAdapter" />
   <adapter factory=".navigation.NavigationControlPanelAdapter" />
diff --git a/Products/CMFPlone/controlpanel/bbb/editing.py b/Products/CMFPlone/controlpanel/bbb/editing.py
index 5ebdc10..fad65a4 100644
--- a/Products/CMFPlone/controlpanel/bbb/editing.py
+++ b/Products/CMFPlone/controlpanel/bbb/editing.py
@@ -1,9 +1,11 @@
-from Products.CMFPlone.interfaces import IEditingSchema
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from plone.registry.interfaces import IRegistry
+# -*- coding: utf-8 -*-
 from zope.component import adapts
-from zope.component import getUtility
 from zope.interface import implements
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+
+from Products.CMFPlone.interfaces import IEditingSchema
 
 
 class EditingControlPanelAdapter(object):
diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
new file mode 100644
index 0000000..0b6eecf
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+from zope.component import adapts
+from Products.CMFPlone.interfaces import ILanguageSchema
+from zope.interface import implements
+from zope.component import getUtility
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+
+from plone.registry.interfaces import IRegistry
+
+
+class LanguageControlPanelAdapter(object):
+
+    adapts(IPloneSiteRoot)
+    implements(ILanguageSchema)
+
+    def __init__(self, context):
+        self.context = context
+        registry = getUtility(IRegistry)
+        self.navigation_settings = registry.forInterface(
+            ILanguageSchema, prefix="plone")
+
+    def get_default_language(self):
+        return self.navigation_settings.default_language
+
+    def set_default_language(self, value):
+        self.navigation_settings.default_language = value
+
+    default_language = property(get_default_language,
+                                set_default_language)
+
+    def get_use_combined_language_codes(self):
+        return self.navigation_settings.use_combined_language_codes
+
+    def set_use_combined_language_codes(self, value):
+        self.navigation_settings.use_combined_language_codes = value
+
+    use_combined_language_codes = property(get_use_combined_language_codes,
+                                           set_use_combined_language_codes)
diff --git a/Products/CMFPlone/controlpanel/bbb/maintenance.py b/Products/CMFPlone/controlpanel/bbb/maintenance.py
index 184726e..c2b2891 100644
--- a/Products/CMFPlone/controlpanel/bbb/maintenance.py
+++ b/Products/CMFPlone/controlpanel/bbb/maintenance.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFPlone.interfaces import IMaintenanceSchema
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from plone.registry.interfaces import IRegistry
diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml
index 2bc0e18..c4acfbc 100644
--- a/Products/CMFPlone/controlpanel/browser/configure.zcml
+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml
@@ -33,6 +33,14 @@
     permission="plone.app.controlpanel.TinyMCE"
     />
 
+  <!-- Language Control Panel -->
+  <browser:page
+    name="language-controlpanel"
+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+    class=".language.LanguageControlPanel"
+    permission="plone.app.controlpanel.Language"
+    />
+
   <!-- Maintenance Control Panel -->
   <browser:page
     name="maintenance-controlpanel"
diff --git a/Products/CMFPlone/controlpanel/browser/editing.py b/Products/CMFPlone/controlpanel/browser/editing.py
index d8bceb1..bec31ef 100644
--- a/Products/CMFPlone/controlpanel/browser/editing.py
+++ b/Products/CMFPlone/controlpanel/browser/editing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IEditingSchema
 from plone.app.registry.browser import controlpanel
diff --git a/Products/CMFPlone/controlpanel/browser/language.py b/Products/CMFPlone/controlpanel/browser/language.py
new file mode 100644
index 0000000..f7e1bb6
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/browser/language.py
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone import PloneMessageFactory as _
+from plone.app.registry.browser import controlpanel
+
+from Products.CMFPlone.interfaces import ILanguageSchema
+
+
+class LanguageControlPanelForm(controlpanel.RegistryEditForm):
+
+    id = "LanguageControlPanel"
+    label = _(u"heading_language_settings", default="Language Settings")
+    description = _(u"description_language_settings",
+                    default="Settings related to interface languages and "
+                            "content translations.")
+
+    schema = ILanguageSchema
+    schema_prefix = "plone"
+
+
+class LanguageControlPanel(controlpanel.ControlPanelFormWrapper):
+    form = LanguageControlPanelForm
+
+
+
+#class LanguageControlPanel(ControlPanelForm):
+#    form_fields = FormFields(ILanguageSchema)
+#    form_fields['default_language'].custom_widget = \
+#       LanguageDropdownChoiceWidget
+#
+#    form_name = _(u"heading_language_settings", default="Language Settings")
diff --git a/Products/CMFPlone/controlpanel/browser/maintenance.py b/Products/CMFPlone/controlpanel/browser/maintenance.py
index 83c767a..36ab8a6 100644
--- a/Products/CMFPlone/controlpanel/browser/maintenance.py
+++ b/Products/CMFPlone/controlpanel/browser/maintenance.py
@@ -1,3 +1,11 @@
+# -*- coding: utf-8 -*-
+from z3c.form import button
+import os
+from cgi import escape
+
+from plone.app.form.validators import null_validator
+from z3c.form import form
+
 from AccessControl import getSecurityManager
 from AccessControl.Permissions import view_management_screens
 from Acquisition import aq_inner
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
new file mode 100644
index 0000000..d51dd01
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+from plone.app.testing import TEST_USER_ID, setRoles
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import getAdapter
+
+import unittest2 as unittest
+
+
+class LanguageControlPanelAdapterTest(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        registry = getUtility(IRegistry)
+        self.navigation_settings = registry.forInterface(
+            ILanguageSchema, prefix="plone")
+
+    def test_adapter_lookup(self):
+        self.assertTrue(getAdapter(self.portal, ILanguageSchema))
+
+    def test_get_default_language(self):
+        self.assertEqual(
+            getAdapter(self.portal, ILanguageSchema).default_language,
+            'en'
+        )
+        self.navigation_settings.default_language = 'de'
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).default_language,
+            'de'
+        )
+
+    def test_set_default_language(self):
+        self.assertEquals(
+            self.navigation_settings.default_language,
+            'en'
+        )
+        getAdapter(self.portal, ILanguageSchema).default_language = 'de'
+        self.assertEquals(
+            self.navigation_settings.default_language,
+            'de'
+        )
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
new file mode 100644
index 0000000..ce0631d
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -0,0 +1,95 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
+
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+import unittest2 as unittest
+
+
+class LanguageControlPanelFunctionalTest(unittest.TestCase):
+    """Test that changes in the language control panel are actually
+    stored in the registry.
+    """
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.portal_url = self.portal.absolute_url()
+        self.browser = Browser(self.app)
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+        )
+
+    def test_language_control_panel_link(self):
+        self.browser.open(
+            "%s/plone_control_panel" % self.portal_url)
+        self.browser.getLink('Language').click()
+        self.assertTrue("Language Settings" in self.browser.contents)
+
+    def test_language_control_panel_backlink(self):
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertTrue("Plone Configuration" in self.browser.contents)
+
+    def test_language_control_panel_sidebar(self):
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.browser.getLink('Site Setup').click()
+        self.assertEqual(
+            self.browser.url,
+            'http://nohost/plone/@@overview-controlpanel')
+
+    def test_language_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="language-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_use_combined_language_codes(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_combined_language_codes, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Show country-specific language variants'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Show country-specific language variants'
+        ).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_combined_language_codes, True)
+
+    def test_default_language(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.default_language, 'en')
+        self.assertEqual(
+            self.browser.getControl(
+                'Site language'
+            ).value,
+            ['en']
+        )
+        self.browser.getControl(
+            'Site language'
+        ).value = ['de']
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.default_language, 'de')
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
new file mode 100644
index 0000000..28cfcd4
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -0,0 +1,45 @@
+# -*- coding: utf-8 -*-
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+import unittest2 as unittest
+
+
+class LanguageRegistryIntegrationTest(unittest.TestCase):
+    """Test that the Language settings are stored as plone.app.registry
+    settings.
+    """
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(
+            ILanguageSchema, prefix="plone")
+
+    def test_language_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="language-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_language_in_controlpanel(self):
+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
+        self.assertTrue('PloneLanguageTool' in [
+            a.getAction(self)['id']
+            for a in self.controlpanel.listActions()
+        ])
+
+    def test_use_combined_language_codes_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
+
+    def test_default_language_exists(self):
+        self.assertTrue(hasattr(self.settings, 'default_language'))
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
index bc7263e..888dd98 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import INavigationSchema
 from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
-from plone.registry.interfaces import IRegistry
-from zope.component import getMultiAdapter
-from zope.component import getUtility
 import unittest2 as unittest
 
 
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 3eeebf2..3e86036 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -8,6 +8,7 @@
 from controlpanel import IControlPanel
 from controlpanel import IDateAndTimeSchema
 from controlpanel import IEditingSchema
+from controlpanel import ILanguageSchema
 from controlpanel import IMaintenanceSchema
 from controlpanel import IMailSchema
 from controlpanel import IMarkupSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 212524d..8d12802 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -672,6 +672,35 @@ class ITinyMCESchema(
     """TinyMCE Schema"""
 
 
+class ILanguageSchema(Interface):
+
+    use_combined_language_codes = schema.Bool(
+        title=_(
+            u'label_allow_combined_language_codes',
+            default=u"Show country-specific language variants"
+        ),
+        description=_(
+            u"help_allow_combined_language_codes",
+            default=u"Examples: pt-br (Brazilian Portuguese), "
+                    u"en-us (American English) etc."
+        ),
+        default=False,
+        required=False
+    )
+
+    default_language = schema.Choice(
+        title=_(u"heading_site_language",
+                default=u"Site language"),
+        description=_(
+            u"description_site_language",
+            default=u"The language used for the content and the UI "
+                    u"of this site."),
+        default='en',
+        required=True,
+        vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+    )
+
+
 class IMaintenanceSchema(Interface):
 
     days = schema.Int(
diff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml
index 0b0153e..1e65612 100644
--- a/Products/CMFPlone/profiles/dependencies/registry.xml
+++ b/Products/CMFPlone/profiles/dependencies/registry.xml
@@ -2,6 +2,8 @@
 <registry>
   <records interface="Products.CMFPlone.interfaces.IEditingSchema"
            prefix="plone" />
+  <records interface="Products.CMFPlone.interfaces.ILanguageSchema"
+           prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IMaintenanceSchema"
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IMailSchema"
diff --git a/Products/CMFPlone/tests/robot/keywords.robot b/Products/CMFPlone/tests/robot/keywords.robot
index 041e68e..1c3e2b0 100644
--- a/Products/CMFPlone/tests/robot/keywords.robot
+++ b/Products/CMFPlone/tests/robot/keywords.robot
@@ -3,7 +3,16 @@
 # --- GIVEN ------------------------------------------------------------------
 
 a logged-in site administrator
-  Enable autologin as  Site Administrator
+  Enable autologin as  Site Administrator  Contributor  Reviewer
 
 a document '${title}'
   Create content  type=Document  id=doc  title=${title}
+
+a file '${title}'
+  Create content  type=File  id=file  title=${title}
+
+a news item '${title}'
+  Create content  type=News Item  id=doc  title=${title}
+
+an image '${title}'
+  Create content  type=Image  id=doc  title=${title}
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
index 7109e36..c03d3c7 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
@@ -27,13 +27,24 @@ Scenario: Enable Folderish Tabs in the Navigation Control Panel
    When I disable non-folderish tabs
    Then the document 'My Document' does not show up in the navigation
 
-Scenario: Add Document to the Displayed Types in the Navigation Control Panel
+Scenario: Filter Navigation By Displayed Types in the Navigation Control Panel
   Given a logged-in site administrator
     and a document 'My Document'
     and the navigation control panel
    When I remove 'Document' from the displayed types list
    Then the document 'My Document' does not show up in the navigation
 
+Scenario: Filter Navigation By Workflow States in the Navigation Control Panel
+  Given a logged-in site administrator
+    and a published document 'My Document'
+    and a private document 'My Internal Document'
+    and the navigation control panel
+   When I enable filtering by workflow states
+    and I choose to show 'published' items
+    and I choose to not show 'private' items
+   Then the document 'My Document' shows up in the navigation
+    and the document 'My Internal Document' does not show up in the navigation
+
 
 *** Keywords *****************************************************************
 
@@ -42,6 +53,14 @@ Scenario: Add Document to the Displayed Types in the Navigation Control Panel
 the navigation control panel
   Go to  ${PLONE_URL}/@@navigation-controlpanel
 
+a published document '${title}'
+  ${uid}=  a document '${title}'
+  Debug
+  Fire transition  ${uid}  publish
+
+a private document '${title}'
+  a document '${title}'
+
 
 # --- WHEN -------------------------------------------------------------------
 
@@ -60,9 +79,29 @@ I remove '${portal_type}' from the displayed types list
   Click Button  Save
   Wait until page contains  Changes saved
 
+I enable filtering by workflow states
+  Select Checkbox  name=form.widgets.filter_on_workflow:list
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I choose to show '${workflow_state}' items
+  Select Checkbox  xpath=//input[@value='${workflow_state}']
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I choose to not show '${workflow_state}' items
+  Unselect Checkbox  xpath=//input[@value='${workflow_state}']
+  Click Button  Save
+  Wait until page contains  Changes saved
+
 
 # --- THEN -------------------------------------------------------------------
 
+the document '${title}' shows up in the navigation
+  Go to  ${PLONE_URL}
+  Wait until page contains  Powered by Plone
+  XPath Should Match X Times  //ul[@id='portal-globalnav']/li/a[contains(text(), '${title}')]  1  message=The global navigation should have contained the item '${title}'
+
 the document '${title}' does not show up in the navigation
   Go to  ${PLONE_URL}
   Wait until page contains  Powered by Plone


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/cb28c9b138a2f54738be0b3524d10ee3ee885353

Add robot test to set default_language in the language control panel.

Files changed:
A Products/CMFPlone/tests/robot/test_controlpanel_language.robot

diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_language.robot b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
new file mode 100644
index 0000000..15b1266
--- /dev/null
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
@@ -0,0 +1,46 @@
+*** Settings *****************************************************************
+
+Resource  plone/app/robotframework/keywords.robot
+Resource  plone/app/robotframework/saucelabs.robot
+
+Library  Remote  ${PLONE_URL}/RobotRemote
+
+Resource  keywords.robot
+
+Test Setup  Open SauceLabs test browser
+Test Teardown  Run keywords  Report test status  Close all browsers
+
+
+*** Test Cases ***************************************************************
+
+Scenario: Set Site Language in the Language Control Panel
+  Given a logged-in site administrator
+    and the language control panel
+   When I set the site language to German
+   Then the Plone user interface is in German
+
+
+*** Keywords *****************************************************************
+
+# --- GIVEN ------------------------------------------------------------------
+
+a logged-in site administrator
+  Enable autologin as  Site Administrator
+
+the language control panel
+  Go to  ${PLONE_URL}/@@language-controlpanel
+
+
+# --- WHEN -------------------------------------------------------------------
+
+I set the site language to German
+  Select From List By Label  form.widgets.default_language:list  Deutsch
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+
+# --- THEN -------------------------------------------------------------------
+
+the Plone user interface is in German
+  Go to  ${PLONE_URL}
+  Page should contain  Sie sind hier


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: Timo Stollenwerk () <contact@timostollenwerk.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/b244b2d664a87da75a99950ff237949233b573e1

Add available_languages multi-select-field to the language control panel.

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 8d12802..7696396 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -97,6 +97,48 @@ class IEditingSchema(Interface):
         required=False)
 
 
+class ILanguageSchema(Interface):
+
+    default_language = schema.Choice(
+        title=_(u"heading_site_language",
+                default=u"Site language"),
+        description=_(
+            u"description_site_language",
+            default=u"The language used for the content and the UI "
+                    u"of this site."),
+        default='en',
+        required=True,
+        vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+    )
+
+    available_languages = schema.List(
+        title=_(u"heading_available_languages",
+                default=u"Available languages"),
+        description=_(u"description_available_languages",
+                      default=u"The languages in which the site should be "
+                              u"translatable."),
+        required=True,
+        default=['en'],
+        value_type=schema.Choice(
+            vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+        )
+    )
+
+    use_combined_language_codes = schema.Bool(
+        title=_(
+            u'label_allow_combined_language_codes',
+            default=u"Show country-specific language variants"
+        ),
+        description=_(
+            u"help_allow_combined_language_codes",
+            default=u"Examples: pt-br (Brazilian Portuguese), "
+                    u"en-us (American English) etc."
+        ),
+        default=False,
+        required=False
+    )
+
+
 class ITinyMCEPatternSchema(Interface):
 
     relatedItems = schema.Text(


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: Timo Stollenwerk () <contact@timostollenwerk.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/214547420f8545d983cbee115d97774475b319fa

Move language settings from plone.app.multilingual into CMFPlone/p.a.registry as discussed with @bloodbare (https://github.com/plone/Products.CMFPlone/issues/218).

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 7696396..9ca3197 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -138,6 +138,82 @@ class ILanguageSchema(Interface):
         required=False
     )
 
+    use_content_negotiation = schema.Bool(
+        title=_(u"heading_language_of_the_content",
+                default=u"Use the language of the content item."),
+        description=_(u"description_language_of_the_content",
+                      default=u"Use the language of the content item."),
+        required=False,
+    )
+
+    use_path_negotiation = schema.Bool(
+        title=_(
+            u"heading_language_codes_in_URL",
+            default=u"Use language codes in URL path for manual override."),
+        description=_(
+            u"description_language_codes_in_URL",
+            default=u"Use language codes in URL path for manual override."),
+        required=False,
+    )
+
+    use_cookie_negotiation = schema.Bool(
+        title=_(u"heading_cookie_manual_override",
+                default=(u"Use cookie for manual override. (Required for "
+                         u"the language selector viewlet to be rendered.)")),
+        description=_(
+            u"description_cookie_manual_override",
+            default=(u"Use cookie for manual override. (Required for the "
+                     u"language selector viewlet to be rendered.)")),
+        required=False,
+    )
+
+    authenticated_users_only = schema.Bool(
+        title=_(u"heading_auth_cookie_manual_override",
+                default=u"Authenticated users only."),
+        description=_(
+            u"description_auth_ookie_manual_override",
+            default=(u"Authenticated users only. Use cookie for manual "
+                     u"override. (Required for the language selector viewlet "
+                     u"to be rendered.)")),
+        required=False,
+    )
+
+    set_cookie_everywhere = schema.Bool(
+        title=_(
+            u"heading_set_language_cookie_always",
+            default=(u"Set the language cookie always, i.e. also when the "
+                     u"'set_language' request parameter is absent.")),
+        description=_(
+            u"description_set_language_cookie_always",
+            default=(u"Set the language cookie always, i.e. also when the "
+                     u"'set_language' request parameter is absent.")),
+        required=False,
+        )
+
+    use_subdomain_negotiation = schema.Bool(
+        title=_(u"heading_use_subdomain",
+                default=u"Use subdomain (e.g.: de.plone.org)."),
+        description=_(u"description_use_subdomain",
+                      default=u"Use subdomain (e.g.: de.plone.org)."),
+        required=False,
+        )
+
+    use_cctld_negotiation = schema.Bool(
+        title=_(u"heading_top_level_domain",
+                default=u"Use top-level domain (e.g.: www.plone.de)."),
+        description=_(u"description_top_level_domain",
+                      default=u"Use top-level domain (e.g.: www.plone.de)."),
+        required=False,
+        )
+
+    use_request_negotiation = schema.Bool(
+        title=_(u"heading_browser_language_request_negotiation",
+                default=u"Use browser language request negotiation."),
+        description=_(u"description_browser_language_request_negotiation",
+                      default=u"Use browser language request negotiation."),
+        required=False,
+        )
+
 
 class ITinyMCEPatternSchema(Interface):
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/3239fa81920debfb3c6f7cefdd1e9dfc9929e2e1

add .ropeproject to gitignore

Files changed:
M .gitignore

diff --git a/.gitignore b/.gitignore
index b13ecf8..1bf12f3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,6 +16,7 @@
 /lib
 /.project
 /.pydevproject
+.ropeproject
 /.mr.developer.cfg
 /src/*
 *.mo


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/880e16e9540770ba77cd1da094d8ec0d7dc5c576

add rest of schema and bbb fields, complete tests

Files changed:
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/static/plone.js
M Products/CMFPlone/static/plone.less

diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index 0b6eecf..0690781 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -16,23 +16,104 @@ class LanguageControlPanelAdapter(object):
     def __init__(self, context):
         self.context = context
         registry = getUtility(IRegistry)
-        self.navigation_settings = registry.forInterface(
+        self.settings = registry.forInterface(
             ILanguageSchema, prefix="plone")
 
     def get_default_language(self):
-        return self.navigation_settings.default_language
+        return self.settings.default_language
 
     def set_default_language(self, value):
-        self.navigation_settings.default_language = value
+        self.settings.default_language = value
 
     default_language = property(get_default_language,
                                 set_default_language)
 
+    def get_available_languages(self):
+        return self.settings.available_languages
+
+    def set_available_languages(self, value):
+        self.settings.available_languages = value
+
+    available_languages = property(get_available_languages,
+                                set_available_languages)
+
     def get_use_combined_language_codes(self):
-        return self.navigation_settings.use_combined_language_codes
+        return self.settings.use_combined_language_codes
 
     def set_use_combined_language_codes(self, value):
-        self.navigation_settings.use_combined_language_codes = value
+        self.settings.use_combined_language_codes = value
 
     use_combined_language_codes = property(get_use_combined_language_codes,
                                            set_use_combined_language_codes)
+
+    def get_use_content_negotiation(self):
+        return self.settings.use_content_negotiation
+
+    def set_use_content_negotiation(self, value):
+        self.settings.use_content_negotiation = value
+
+    use_content_negotiation = property(get_use_content_negotiation,
+                                           set_use_content_negotiation)
+
+    def get_use_path_negotiation(self):
+        return self.settings.use_path_negotiation
+
+    def set_use_path_negotiation(self, value):
+        self.settings.use_path_negotiation = value
+
+    use_path_negotiation = property(get_use_path_negotiation,
+                                       set_use_path_negotiation)
+
+    def get_use_cookie_negotiation(self):
+        return self.settings.use_cookie_negotiation
+
+    def set_use_cookie_negotiation(self, value):
+        self.settings.use_cookie_negotiation = value
+
+    use_cookie_negotiation = property(get_use_cookie_negotiation,
+                                       set_use_cookie_negotiation)
+
+    def get_authenticated_users_only(self):
+        return self.settings.authenticated_users_only
+
+    def set_authenticated_users_only(self, value):
+        self.settings.authenticated_users_only = value
+
+    authenticated_users_only = property(get_authenticated_users_only,
+                                       set_authenticated_users_only)
+
+    def get_set_cookie_always(self):
+        return self.settings.set_cookie_always
+
+    def set_set_cookie_always(self, value):
+        self.settings.set_cookie_always = value
+
+    set_cookie_always = property(get_set_cookie_always,
+                                       set_set_cookie_always)
+
+    def get_use_subdomain_negotiation(self):
+        return self.settings.use_subdomain_negotiation
+
+    def set_use_subdomain_negotiation(self, value):
+        self.settings.use_subdomain_negotiation = value
+
+    use_subdomain_negotiation = property(get_use_subdomain_negotiation,
+                                       set_use_subdomain_negotiation)
+
+    def get_use_cctld_negotiation(self):
+        return self.settings.use_cctld_negotiation
+
+    def set_use_cctld_negotiation(self, value):
+        self.settings.use_cctld_negotiation = value
+
+    use_cctld_negotiation = property(get_use_cctld_negotiation,
+                                       set_use_cctld_negotiation)
+
+    def get_use_request_negotiation(self):
+        return self.settings.use_request_negotiation
+
+    def set_use_request_negotiation(self, value):
+        self.settings.use_request_negotiation = value
+
+    use_request_negotiation = property(get_use_request_negotiation,
+                                       set_use_request_negotiation)
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
index d51dd01..0be760c 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
@@ -20,7 +20,7 @@ def setUp(self):
         self.request = self.layer['request']
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         registry = getUtility(IRegistry)
-        self.navigation_settings = registry.forInterface(
+        self.settings = registry.forInterface(
             ILanguageSchema, prefix="plone")
 
     def test_adapter_lookup(self):
@@ -31,7 +31,7 @@ def test_get_default_language(self):
             getAdapter(self.portal, ILanguageSchema).default_language,
             'en'
         )
-        self.navigation_settings.default_language = 'de'
+        self.settings.default_language = 'de'
         self.assertEquals(
             getAdapter(self.portal, ILanguageSchema).default_language,
             'de'
@@ -39,11 +39,250 @@ def test_get_default_language(self):
 
     def test_set_default_language(self):
         self.assertEquals(
-            self.navigation_settings.default_language,
+            self.settings.default_language,
             'en'
         )
         getAdapter(self.portal, ILanguageSchema).default_language = 'de'
         self.assertEquals(
-            self.navigation_settings.default_language,
+            self.settings.default_language,
             'de'
         )
+
+    def test_get_available_languages(self):
+        self.assertEqual(
+            getAdapter(self.portal, ILanguageSchema).available_languages,
+            ['en']
+        )
+        self.settings.available_languages = ['en', 'de']
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).available_languages,
+            ['en', 'de']
+        )
+
+    def test_set_available_languages(self):
+        self.assertEquals(
+            self.settings.available_languages,
+            ['en']
+        )
+        getAdapter(self.portal, ILanguageSchema).available_languages = ['de', 'en']
+        self.assertEquals(
+            self.settings.available_languages,
+            ['de', 'en']
+        )
+
+    def test_get_use_combined_language_codes(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_combined_language_codes,
+            False
+        )
+        self.settings.use_combined_language_codes = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_combined_language_codes,
+            True
+        )
+
+    def test_set_use_combined_language_codes(self):
+        self.assertEquals(
+            self.settings.use_combined_language_codes,
+            False
+        )
+        getAdapter(
+              self.portal, ILanguageSchema).use_combined_language_codes = True
+        self.assertEquals(
+            self.settings.use_combined_language_codes,
+            True
+        )
+
+    def test_get_use_content_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_content_negotiation,
+            False
+        )
+        self.settings.use_content_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_content_negotiation,
+            True
+        )
+
+    def test_set_use_content_negotiation(self):
+        self.assertEquals(
+            self.settings.use_content_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_content_negotiation = True
+        self.assertEquals(
+            self.settings.use_content_negotiation,
+            True
+        )
+
+    def test_get_use_path_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_path_negotiation,
+            False
+        )
+        self.settings.use_path_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_path_negotiation,
+            True
+        )
+
+    def test_set_use_path_negotiation(self):
+        self.assertEquals(
+            self.settings.use_path_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_path_negotiation = True
+        self.assertEquals(
+            self.settings.use_path_negotiation,
+            True
+        )
+
+    def test_get_use_cookie_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_cookie_negotiation,
+            False
+        )
+        self.settings.use_cookie_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_cookie_negotiation,
+            True
+        )
+
+    def test_set_use_cookie_negotiation(self):
+        self.assertEquals(
+            self.settings.use_cookie_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_cookie_negotiation = True
+        self.assertEquals(
+            self.settings.use_cookie_negotiation,
+            True
+        )
+
+    def test_get_authenticated_users_only(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).authenticated_users_only,
+            False
+        )
+        self.settings.authenticated_users_only = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).authenticated_users_only,
+            True
+        )
+
+    def test_set_authenticated_users_only(self):
+        self.assertEquals(
+            self.settings.authenticated_users_only,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).authenticated_users_only = True
+        self.assertEquals(
+            self.settings.authenticated_users_only,
+            True
+        )
+
+    def test_get_set_cookie_always(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).set_cookie_always,
+            False
+        )
+        self.settings.set_cookie_always = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).set_cookie_always,
+            True
+        )
+
+    def test_set_set_cookie_always(self):
+        self.assertEquals(
+            self.settings.set_cookie_always,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).set_cookie_always = True
+        self.assertEquals(
+            self.settings.set_cookie_always,
+            True
+        )
+
+    def test_get_use_subdomain_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_subdomain_negotiation,
+            False
+        )
+        self.settings.use_subdomain_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_subdomain_negotiation,
+            True
+        )
+
+    def test_set_use_subdomain_negotiation(self):
+        self.assertEquals(
+            self.settings.use_subdomain_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_subdomain_negotiation = True
+        self.assertEquals(
+            self.settings.use_subdomain_negotiation,
+            True
+        )
+
+    def test_get_use_cctld_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_cctld_negotiation,
+            False
+        )
+        self.settings.use_cctld_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_cctld_negotiation,
+            True
+        )
+
+    def test_set_use_cctld_negotiation(self):
+        self.assertEquals(
+            self.settings.use_cctld_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_cctld_negotiation = True
+        self.assertEquals(
+            self.settings.use_cctld_negotiation,
+            True
+        )
+
+    def test_get_use_request_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_request_negotiation,
+            False
+        )
+        self.settings.use_request_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_request_negotiation,
+            True
+        )
+
+    def test_set_use_request_negotiation(self):
+        self.assertEquals(
+            self.settings.use_request_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_request_negotiation = True
+        self.assertEquals(
+            self.settings.use_request_negotiation,
+            True
+        )
+
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index ce0631d..3e7ed8d 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -13,6 +13,7 @@
 import unittest2 as unittest
 
 
+
 class LanguageControlPanelFunctionalTest(unittest.TestCase):
     """Test that changes in the language control panel are actually
     stored in the registry.
@@ -31,6 +32,12 @@ def setUp(self):
             'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
         )
 
+    def in_out_select(self, form, name, control_name):
+        form.mech_form.new_control(
+            type='hidden',
+            name=name,
+            attrs=dict(value=self.browser.getControl(control_name).optionValue))
+
     def test_language_control_panel_link(self):
         self.browser.open(
             "%s/plone_control_panel" % self.portal_url)
@@ -56,6 +63,43 @@ def test_language_controlpanel_view(self):
         view = view.__of__(self.portal)
         self.assertTrue(view())
 
+    def test_default_language(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.default_language, 'en')
+        self.assertEqual(
+            self.browser.getControl(
+                'Site language'
+            ).value,
+            ['en']
+        )
+        self.browser.getControl(
+            'Site language'
+        ).value = ['de']
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.default_language, 'de')
+
+    # def test_available_languages(self):
+    #     registry = getUtility(IRegistry)
+    #     settings = registry.forInterface(ILanguageSchema, prefix='plone')
+    #     self.browser.open(
+    #         "%s/@@language-controlpanel" % self.portal_url)
+    #     self.assertEqual(settings.available_languages, ['en'])
+    #     self.assertEqual(
+    #         self.browser.getControl(
+    #             name='form.widgets.available_languages.to'
+    #         ).options,
+    #         ['en']
+    #     )
+    #     control = self.browser.getForm(index=1)
+    #     self.in_out_select(
+    #         control, 'form.widgets.available_languages:list', 'Deutsch')
+    #     self.browser.getControl('Save').click()
+    #     self.assertEqual(settings.available_languages, ['en', 'de'])
+
     def test_use_combined_language_codes(self):
         registry = getUtility(IRegistry)
         settings = registry.forInterface(ILanguageSchema, prefix='plone')
@@ -75,21 +119,139 @@ def test_use_combined_language_codes(self):
 
         self.assertEqual(settings.use_combined_language_codes, True)
 
-    def test_default_language(self):
+    def test_use_content_negotiation(self):
         registry = getUtility(IRegistry)
         settings = registry.forInterface(ILanguageSchema, prefix='plone')
         self.browser.open(
             "%s/@@language-controlpanel" % self.portal_url)
-        self.assertEqual(settings.default_language, 'en')
+        self.assertEqual(settings.use_content_negotiation, False)
         self.assertEqual(
             self.browser.getControl(
-                'Site language'
-            ).value,
-            ['en']
+                'Use the language of the content item'
+            ).selected,
+            False
         )
         self.browser.getControl(
-            'Site language'
-        ).value = ['de']
+            'Use the language of the content item'
+        ).selected = True
         self.browser.getControl('Save').click()
 
-        self.assertEqual(settings.default_language, 'de')
+        self.assertEqual(settings.use_content_negotiation, True)
+
+    def test_use_path_negotiation(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_path_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Use language codes in URL path for manual override'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Use language codes in URL path for manual override'
+        ).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_path_negotiation, True)
+
+    def test_use_cookie_negotiation(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_cookie_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Use cookie for manual override'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Use cookie for manual override'
+        ).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_cookie_negotiation, True)
+
+    def test_authenticated_users_only(self):
+        control_label = "Authenticated users only"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.authenticated_users_only, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.authenticated_users_only, True)
+
+    def test_set_cookie_always(self):
+        control_label = "Set the language cookie always"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.set_cookie_always, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.set_cookie_always, True)
+
+    def test_use_subdomain_negotiation(self):
+        control_label = "Use subdomain"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_subdomain_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_subdomain_negotiation, True)
+
+    def test_use_cctld_negotiation(self):
+        control_label = "Use top-level domain"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_cctld_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_cctld_negotiation, True)
+
+    def test_use_request_negotiation(self):
+        control_label = "Use browser language request negotiation"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_request_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_request_negotiation, True)
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 28cfcd4..5b106e8 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -38,8 +38,35 @@ def test_language_in_controlpanel(self):
             for a in self.controlpanel.listActions()
         ])
 
+    def test_default_language_exists(self):
+        self.assertTrue(hasattr(self.settings, 'default_language'))
+
+    def test_available_languages_exists(self):
+        self.assertTrue(hasattr(self.settings, 'available_languages'))
+
     def test_use_combined_language_codes_exists(self):
         self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
 
-    def test_default_language_exists(self):
-        self.assertTrue(hasattr(self.settings, 'default_language'))
+    def test_use_content_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_content_negotiation'))
+
+    def test_use_path_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_path_negotiation'))
+
+    def test_use_cookie_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_cookie_negotiation'))
+
+    def test_authenticated_users_only(self):
+        self.assertTrue(hasattr(self.settings, 'authenticated_users_only('))
+
+    def test_set_cookie_everywhere(self):
+        self.assertTrue(hasattr(self.settings, 'set_cookie_everywhere'))
+
+    def test_use_subdomain_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_subdomain_negotiation'))
+
+    def test_use_cctld_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_cctld_negotiation'))
+
+    def test_use_request_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 9ca3197..9eb6d5c 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from plone.supermodel import model
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.utils import validate_json
 from basetool import IPloneBaseTool
@@ -98,6 +99,15 @@ class IEditingSchema(Interface):
 
 
 class ILanguageSchema(Interface):
+    model.fieldset(
+        'general',
+        label=_(u'General', default=u'General'),
+        fields=[
+            'default_language',
+            'available_languages',
+            'use_combined_language_codes',
+        ],
+    )
 
     default_language = schema.Choice(
         title=_(u"heading_site_language",
@@ -138,79 +148,97 @@ class ILanguageSchema(Interface):
         required=False
     )
 
+    model.fieldset(
+        'negotiation_scheme',
+        label=_(u'Negotiation scheme', default=u'Negotiation scheme'),
+        fields=[
+            'use_content_negotiation',
+            'use_path_negotiation',
+            'use_cookie_negotiation',
+            'authenticated_users_only',
+            'set_cookie_everywhere',
+            'use_subdomain_negotiation',
+            'use_cctld_negotiation',
+            'use_request_negotiation',
+            ],
+        )
     use_content_negotiation = schema.Bool(
         title=_(u"heading_language_of_the_content",
-                default=u"Use the language of the content item."),
+                default=u"Use the language of the content item"),
         description=_(u"description_language_of_the_content",
                       default=u"Use the language of the content item."),
+        default=False,
         required=False,
     )
 
     use_path_negotiation = schema.Bool(
         title=_(
             u"heading_language_codes_in_URL",
-            default=u"Use language codes in URL path for manual override."),
+            default=u"Use language codes in URL path for manual override"),
         description=_(
             u"description_language_codes_in_URL",
             default=u"Use language codes in URL path for manual override."),
+        default=False,
         required=False,
     )
 
     use_cookie_negotiation = schema.Bool(
         title=_(u"heading_cookie_manual_override",
-                default=(u"Use cookie for manual override. (Required for "
-                         u"the language selector viewlet to be rendered.)")),
+                default=(u"Use cookie for manual override")),
         description=_(
             u"description_cookie_manual_override",
-            default=(u"Use cookie for manual override. (Required for the "
-                     u"language selector viewlet to be rendered.)")),
+            default=(u"Required for the language selector viewlet to be rendered.")
+        ),
+        default=False,
         required=False,
     )
 
     authenticated_users_only = schema.Bool(
         title=_(u"heading_auth_cookie_manual_override",
-                default=u"Authenticated users only."),
+                default=u"Authenticated users only"),
         description=_(
             u"description_auth_ookie_manual_override",
-            default=(u"Authenticated users only. Use cookie for manual "
-                     u"override. (Required for the language selector viewlet "
-                     u"to be rendered.)")),
+            default=(u"Related to Use cookie for manual override")
+        ),
+        default=False,
         required=False,
     )
 
-    set_cookie_everywhere = schema.Bool(
+    set_cookie_always = schema.Bool(
         title=_(
             u"heading_set_language_cookie_always",
-            default=(u"Set the language cookie always, i.e. also when the "
-                     u"'set_language' request parameter is absent.")),
+            default=(u"Set the language cookie always")),
         description=_(
             u"description_set_language_cookie_always",
-            default=(u"Set the language cookie always, i.e. also when the "
-                     u"'set_language' request parameter is absent.")),
+            default=(u"i.e. also when the 'set_language' request parameter is absent")),
+        default=False,
         required=False,
         )
 
     use_subdomain_negotiation = schema.Bool(
         title=_(u"heading_use_subdomain",
-                default=u"Use subdomain (e.g.: de.plone.org)."),
+                default=u"Use subdomain"),
         description=_(u"description_use_subdomain",
-                      default=u"Use subdomain (e.g.: de.plone.org)."),
+                      default=u"e.g.: de.plone.org"),
+        default=False,
         required=False,
         )
 
     use_cctld_negotiation = schema.Bool(
         title=_(u"heading_top_level_domain",
-                default=u"Use top-level domain (e.g.: www.plone.de)."),
+                default=u"Use top-level domain"),
         description=_(u"description_top_level_domain",
-                      default=u"Use top-level domain (e.g.: www.plone.de)."),
+                      default=u"e.g.: www.plone.de"),
+        default=False,
         required=False,
         )
 
     use_request_negotiation = schema.Bool(
         title=_(u"heading_browser_language_request_negotiation",
-                default=u"Use browser language request negotiation."),
+                default=u"Use browser language request negotiation"),
         description=_(u"description_browser_language_request_negotiation",
                       default=u"Use browser language request negotiation."),
+        default=False,
         required=False,
         )
 
diff --git a/Products/CMFPlone/static/plone.js b/Products/CMFPlone/static/plone.js
index 9380a40..8e24308 100644
--- a/Products/CMFPlone/static/plone.js
+++ b/Products/CMFPlone/static/plone.js
@@ -54,4 +54,16 @@ require([
       }
     });
   }
+
+  // TODO: Needs to be moved to controlpanel js
+  $(document).ready(function() {
+    var cookieNegotiation = (
+      $("#form-widgets-use_cookie_negotiation > input").value === 'selected');
+    if (cookieNegotiation !== true) {
+      $("#formfield-form-widgets-authenticated_users_only").hide();
+    }else{
+      $("#formfield-form-widgets-authenticated_users_only").show();
+    }
+  });
+
 });
diff --git a/Products/CMFPlone/static/plone.less b/Products/CMFPlone/static/plone.less
index 39db5a9..50c2c4f 100644
--- a/Products/CMFPlone/static/plone.less
+++ b/Products/CMFPlone/static/plone.less
@@ -104,3 +104,4 @@
 .icon-zope:before { content: '\e825'; } /* '' */
 .icon-types:before { content: '\e826'; } /* '' */
 
+


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:20+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/009bda992f81f0873156aa1c32ac3fa605103692

fix test_controlpanel_language

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 5b106e8..12c1668 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -59,8 +59,8 @@ def test_use_cookie_negotiation_exists(self):
     def test_authenticated_users_only(self):
         self.assertTrue(hasattr(self.settings, 'authenticated_users_only('))
 
-    def test_set_cookie_everywhere(self):
-        self.assertTrue(hasattr(self.settings, 'set_cookie_everywhere'))
+    def test_set_cookie_always(self):
+        self.assertTrue(hasattr(self.settings, 'set_cookie_always'))
 
     def test_use_subdomain_negotiation(self):
         self.assertTrue(hasattr(self.settings, 'use_subdomain_negotiation'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/7833838236116d6a68026aa213940e148d1cd325

fix name in fieldset

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 9eb6d5c..5a830b1 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -156,7 +156,7 @@ class ILanguageSchema(Interface):
             'use_path_negotiation',
             'use_cookie_negotiation',
             'authenticated_users_only',
-            'set_cookie_everywhere',
+            'set_cookie_always',
             'use_subdomain_negotiation',
             'use_cctld_negotiation',
             'use_request_negotiation',


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/5d9ca788ff300f897fe1e7a3fdf01f90681035a6

fix test_controlpanel_language.py

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 12c1668..6b0d3aa 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -57,7 +57,7 @@ def test_use_cookie_negotiation_exists(self):
         self.assertTrue(hasattr(self.settings, 'use_cookie_negotiation'))
 
     def test_authenticated_users_only(self):
-        self.assertTrue(hasattr(self.settings, 'authenticated_users_only('))
+        self.assertTrue(hasattr(self.settings, 'authenticated_users_only'))
 
     def test_set_cookie_always(self):
         self.assertTrue(hasattr(self.settings, 'set_cookie_always'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/89244b412f3e895d8f5980005209e533ae378dcb

add display_flags to language control panel

Files changed:
M .gitignore
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/.gitignore b/.gitignore
index 1bf12f3..9af21b8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,7 @@
 /include
 /lib
 /.project
+.ropeproject
 /.pydevproject
 .ropeproject
 /.mr.developer.cfg
diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index 0690781..50a985c 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -46,6 +46,14 @@ def set_use_combined_language_codes(self, value):
     use_combined_language_codes = property(get_use_combined_language_codes,
                                            set_use_combined_language_codes)
 
+    def get_display_flags(self):
+        return self.settings.display_flags
+
+    def set_display_flags(self, value):
+        self.settings.display_flags = value
+
+    display_flags = property(get_display_flags,
+                                           set_display_flags)
     def get_use_content_negotiation(self):
         return self.settings.use_content_negotiation
 
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
index 0be760c..75fd6fe 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
@@ -94,6 +94,30 @@ def test_set_use_combined_language_codes(self):
             True
         )
 
+    def test_get_display_flags(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).display_flags,
+            False
+        )
+        self.settings.display_flags = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).display_flags,
+            True
+        )
+
+    def test_set_display_flags(self):
+        self.assertEquals(
+            self.settings.display_flags,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).display_flags = True
+        self.assertEquals(
+            self.settings.display_flags,
+            True
+        )
+
     def test_get_use_content_negotiation(self):
         self.assertEqual(
             getAdapter(
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 3e7ed8d..17c9654 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -119,6 +119,25 @@ def test_use_combined_language_codes(self):
 
         self.assertEqual(settings.use_combined_language_codes, True)
 
+    def test_display_flags(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.display_flags, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Show language flags'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Show language flags'
+        ).selected = True
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.display_flags, True)
+
     def test_use_content_negotiation(self):
         registry = getUtility(IRegistry)
         settings = registry.forInterface(ILanguageSchema, prefix='plone')
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 6b0d3aa..cbca53b 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -47,6 +47,9 @@ def test_available_languages_exists(self):
     def test_use_combined_language_codes_exists(self):
         self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
 
+    def test_display_flags_exists(self):
+        self.assertTrue(hasattr(self.settings, 'display_flags'))
+
     def test_use_content_negotiation_exists(self):
         self.assertTrue(hasattr(self.settings, 'use_content_negotiation'))
 
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 5a830b1..52bb128 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -148,6 +148,19 @@ class ILanguageSchema(Interface):
         required=False
     )
 
+    display_flags = schema.Bool(
+        title=_(
+            u'label_display_flags',
+            default=u"Show language flags"
+        ),
+        description=_(
+            u"help_display_flags",
+            default=u""
+        ),
+        default=False,
+        required=False
+    )
+
     model.fieldset(
         'negotiation_scheme',
         label=_(u'Negotiation scheme', default=u'Negotiation scheme'),


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/6dd5af72ab3f258a5efc1711b0634bda53ea1698

fix field set for display_flags in language controlpanel

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 52bb128..b0731cf 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -106,6 +106,7 @@ class ILanguageSchema(Interface):
             'default_language',
             'available_languages',
             'use_combined_language_codes',
+            'display_flags',
         ],
     )
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/ef088f90eb1e7721b0c5322e2e60a380c6a27660

Move language control panel to z3c.form/p.a.registry.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 17c9654..866041e 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -13,7 +13,6 @@
 import unittest2 as unittest
 
 
-
 class LanguageControlPanelFunctionalTest(unittest.TestCase):
     """Test that changes in the language control panel are actually
     stored in the registry.
@@ -274,3 +273,19 @@ def test_use_request_negotiation(self):
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_request_negotiation, True)
+
+    def test_default_language(self):
+        self.assertEqual(settings.default_language, 'en')
+        self.assertEqual(
+            self.browser.getControl(
+                'Site language'
+            ).value,
+            ['en']
+        )
+        self.browser.getControl(
+            'Site language'
+        ).value = ['de']
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.default_language, 'de')
+
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index cbca53b..5f2693f 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -73,3 +73,9 @@ def test_use_cctld_negotiation(self):
 
     def test_use_request_negotiation(self):
         self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))
+
+    def test_use_combined_language_codes_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
+
+    def test_default_language_exists(self):
+        self.assertTrue(hasattr(self.settings, 'default_language'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/5271665d69d993edcaad16ff7ea21dfa54feb6e7

add rest of schema and bbb fields, complete tests

Files changed:
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
M Products/CMFPlone/static/plone.less

diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index 50a985c..c14d5f5 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -54,6 +54,7 @@ def set_display_flags(self, value):
 
     display_flags = property(get_display_flags,
                                            set_display_flags)
+
     def get_use_content_negotiation(self):
         return self.settings.use_content_negotiation
 
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 866041e..e8264a9 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -13,6 +13,7 @@
 import unittest2 as unittest
 
 
+
 class LanguageControlPanelFunctionalTest(unittest.TestCase):
     """Test that changes in the language control panel are actually
     stored in the registry.
@@ -274,18 +275,4 @@ def test_use_request_negotiation(self):
 
         self.assertEqual(settings.use_request_negotiation, True)
 
-    def test_default_language(self):
-        self.assertEqual(settings.default_language, 'en')
-        self.assertEqual(
-            self.browser.getControl(
-                'Site language'
-            ).value,
-            ['en']
-        )
-        self.browser.getControl(
-            'Site language'
-        ).value = ['de']
-        self.browser.getControl('Save').click()
-
-        self.assertEqual(settings.default_language, 'de')
 
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 5f2693f..0f28dcb 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -77,5 +77,26 @@ def test_use_request_negotiation(self):
     def test_use_combined_language_codes_exists(self):
         self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
 
-    def test_default_language_exists(self):
-        self.assertTrue(hasattr(self.settings, 'default_language'))
+    def test_use_content_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_content_negotiation'))
+
+    def test_use_path_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_path_negotiation'))
+
+    def test_use_cookie_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_cookie_negotiation'))
+
+    def test_authenticated_users_only(self):
+        self.assertTrue(hasattr(self.settings, 'authenticated_users_only('))
+
+    def test_set_cookie_everywhere(self):
+        self.assertTrue(hasattr(self.settings, 'set_cookie_everywhere'))
+
+    def test_use_subdomain_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_subdomain_negotiation'))
+
+    def test_use_cctld_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_cctld_negotiation'))
+
+    def test_use_request_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))
diff --git a/Products/CMFPlone/static/plone.less b/Products/CMFPlone/static/plone.less
index 50c2c4f..39db5a9 100644
--- a/Products/CMFPlone/static/plone.less
+++ b/Products/CMFPlone/static/plone.less
@@ -104,4 +104,3 @@
 .icon-zope:before { content: '\e825'; } /* '' */
 .icon-types:before { content: '\e826'; } /* '' */
 
-


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/4eaeb4a7f9922243a0957c1718f77c2ff8173688

fix test_controlpanel_language

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 0f28dcb..cf890ca 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -89,8 +89,8 @@ def test_use_cookie_negotiation_exists(self):
     def test_authenticated_users_only(self):
         self.assertTrue(hasattr(self.settings, 'authenticated_users_only('))
 
-    def test_set_cookie_everywhere(self):
-        self.assertTrue(hasattr(self.settings, 'set_cookie_everywhere'))
+    def test_set_cookie_always(self):
+        self.assertTrue(hasattr(self.settings, 'set_cookie_always'))
 
     def test_use_subdomain_negotiation(self):
         self.assertTrue(hasattr(self.settings, 'use_subdomain_negotiation'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/4974e32b4c576c829a6ca469c32b988ebbd0d4e4

fix test_controlpanel_language.py

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index cf890ca..92b03de 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -87,7 +87,7 @@ def test_use_cookie_negotiation_exists(self):
         self.assertTrue(hasattr(self.settings, 'use_cookie_negotiation'))
 
     def test_authenticated_users_only(self):
-        self.assertTrue(hasattr(self.settings, 'authenticated_users_only('))
+        self.assertTrue(hasattr(self.settings, 'authenticated_users_only'))
 
     def test_set_cookie_always(self):
         self.assertTrue(hasattr(self.settings, 'set_cookie_always'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/48c6b4ca3ef339b59dffe9b82ccda945ffa75109

add display_flags to language control panel

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 92b03de..608c1e9 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -74,29 +74,4 @@ def test_use_cctld_negotiation(self):
     def test_use_request_negotiation(self):
         self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))
 
-    def test_use_combined_language_codes_exists(self):
-        self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
 
-    def test_use_content_negotiation_exists(self):
-        self.assertTrue(hasattr(self.settings, 'use_content_negotiation'))
-
-    def test_use_path_negotiation_exists(self):
-        self.assertTrue(hasattr(self.settings, 'use_path_negotiation'))
-
-    def test_use_cookie_negotiation_exists(self):
-        self.assertTrue(hasattr(self.settings, 'use_cookie_negotiation'))
-
-    def test_authenticated_users_only(self):
-        self.assertTrue(hasattr(self.settings, 'authenticated_users_only'))
-
-    def test_set_cookie_always(self):
-        self.assertTrue(hasattr(self.settings, 'set_cookie_always'))
-
-    def test_use_subdomain_negotiation(self):
-        self.assertTrue(hasattr(self.settings, 'use_subdomain_negotiation'))
-
-    def test_use_cctld_negotiation(self):
-        self.assertTrue(hasattr(self.settings, 'use_cctld_negotiation'))
-
-    def test_use_request_negotiation(self):
-        self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/9f3cce81a5d3e4ae3ea561d7d6cf24c80ddebdaf

Removing PloneLanguageTool from the setup.py

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index a01133c..b7de132 100644
--- a/setup.py
+++ b/setup.py
@@ -62,7 +62,7 @@
         'Products.MimetypesRegistry',
         'Products.PasswordResetTool',
         'Products.PlacelessTranslationService',
-        'Products.PloneLanguageTool',
+        # 'Products.PloneLanguageTool',
         'Products.PlonePAS',
         'Products.PluggableAuthService',
         'Products.PluginRegistry',


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/77196140385ecba9ab65642d36275e00722052b8

Remove duplication of schema and dependency on profile

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/dependencies/metadata.xml

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index b0731cf..2a415fb 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -832,35 +832,6 @@ class ITinyMCESchema(
     """TinyMCE Schema"""
 
 
-class ILanguageSchema(Interface):
-
-    use_combined_language_codes = schema.Bool(
-        title=_(
-            u'label_allow_combined_language_codes',
-            default=u"Show country-specific language variants"
-        ),
-        description=_(
-            u"help_allow_combined_language_codes",
-            default=u"Examples: pt-br (Brazilian Portuguese), "
-                    u"en-us (American English) etc."
-        ),
-        default=False,
-        required=False
-    )
-
-    default_language = schema.Choice(
-        title=_(u"heading_site_language",
-                default=u"Site language"),
-        description=_(
-            u"description_site_language",
-            default=u"The language used for the content and the UI "
-                    u"of this site."),
-        default='en',
-        required=True,
-        vocabulary="plone.app.vocabularies.AvailableContentLanguages"
-    )
-
-
 class IMaintenanceSchema(Interface):
 
     days = schema.Int(
diff --git a/Products/CMFPlone/profiles/dependencies/metadata.xml b/Products/CMFPlone/profiles/dependencies/metadata.xml
index aeca717..9b8cd24 100644
--- a/Products/CMFPlone/profiles/dependencies/metadata.xml
+++ b/Products/CMFPlone/profiles/dependencies/metadata.xml
@@ -6,7 +6,6 @@
     <dependency>profile-Products.MimetypesRegistry:MimetypesRegistry</dependency>
     <dependency>profile-Products.PortalTransforms:PortalTransforms</dependency>
     <dependency>profile-Products.CMFEditions:CMFEditions</dependency>
-    <dependency>profile-Products.PloneLanguageTool:PloneLanguageTool</dependency>
     <dependency>profile-Products.PlonePAS:PlonePAS</dependency>
     <dependency>profile-plone.app.discussion:default</dependency>
     <dependency>profile-plone.app.jquerytools:default</dependency>


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/8b8b20323907ba0941b30c1325b2f8a12310eb4a

pep8 fix

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index e8264a9..96e5a73 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -13,7 +13,6 @@
 import unittest2 as unittest
 
 
-
 class LanguageControlPanelFunctionalTest(unittest.TestCase):
     """Test that changes in the language control panel are actually
     stored in the registry.
@@ -36,7 +35,8 @@ def in_out_select(self, form, name, control_name):
         form.mech_form.new_control(
             type='hidden',
             name=name,
-            attrs=dict(value=self.browser.getControl(control_name).optionValue))
+            attrs=dict(value=self.browser.getControl(
+                control_name).optionValue))
 
     def test_language_control_panel_link(self):
         self.browser.open(


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/9110581070af00d6d9454499556b6b51cd742896

Language settings

Files changed:
M Products/CMFPlone/profiles/default/controlpanel.xml

diff --git a/Products/CMFPlone/profiles/default/controlpanel.xml b/Products/CMFPlone/profiles/default/controlpanel.xml
index 3521d29..2dfb41a 100644
--- a/Products/CMFPlone/profiles/default/controlpanel.xml
+++ b/Products/CMFPlone/profiles/default/controlpanel.xml
@@ -119,8 +119,8 @@
     i18n:attributes="title">
   <permission>Plone Site Setup: Navigation</permission>
  </configlet>
- <configlet title="Language" action_id="PloneLanguageTool"
-    appId="PloneLanguageTool" category="Plone" condition_expr=""
+ <configlet title="Language" action_id="LanguageSettings"
+    appId="Plone" category="Plone" condition_expr=""
     icon_expr="string:$portal_url/flag-plone.png"
     url_expr="string:${portal_url}/@@language-controlpanel" visible="True"
     i18n:attributes="title">


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-16T11:56:21+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/70f760bbacccf30f46dc9397601c24b4ef4411f9

Remove the LanguageTool skin and set the language on the registry on creation

Files changed:
M Products/CMFPlone/factory.py
M Products/CMFPlone/profiles/default/skins.xml

diff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py
index 3e83747..f0bb29c 100644
--- a/Products/CMFPlone/factory.py
+++ b/Products/CMFPlone/factory.py
@@ -80,7 +80,7 @@ def addPloneSite(context, site_id, title='Plone site', description='',
     """Add a PloneSite to the context."""
     context._setObject(site_id, PloneSite(site_id))
     site = context._getOb(site_id)
-    site.setLanguage(default_language)
+    # site.setLanguage(default_language)
 
     site[_TOOL_ID] = SetupTool(_TOOL_ID)
     setup_tool = site[_TOOL_ID]
@@ -97,6 +97,8 @@ def addPloneSite(context, site_id, title='Plone site', description='',
     reg = queryUtility(IRegistry, context=site)
     reg['plone.portal_timezone'] = portal_timezone
     reg['plone.available_timezones'] = [portal_timezone]
+    reg['plone.default_language'] = default_language
+    reg['plone.available_languages'] = [default_language]
 
     props = dict(
         title=title,
diff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml
index 2739516..670224a 100644
--- a/Products/CMFPlone/profiles/default/skins.xml
+++ b/Products/CMFPlone/profiles/default/skins.xml
@@ -2,8 +2,6 @@
 <object name="portal_skins" meta_type="Plone Skins Tool" allow_any="False"
    cookie_persistence="False" default_skin="Plone Default"
    request_varname="plone_skin">
- <object name="LanguageTool" meta_type="Filesystem Directory View"
-    directory="Products.PloneLanguageTool:skins/LanguageTool"/>
  <object name="custom" meta_type="Folder"/>
  <object name="PasswordReset" meta_type="Filesystem Directory View"
     directory="Products.PasswordResetTool:skins/PasswordReset"/>


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-17T00:22:31+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1d00c9ead122af83291d6d1ea11ca9af4a4ff7f3

Set the langauge before creating content

Files changed:
M Products/CMFPlone/factory.py

diff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py
index f0bb29c..aa4cbc2 100644
--- a/Products/CMFPlone/factory.py
+++ b/Products/CMFPlone/factory.py
@@ -90,9 +90,6 @@ def addPloneSite(context, site_id, title='Plone site', description='',
 
     setup_tool.setBaselineContext('profile-%s' % profile_id)
     setup_tool.runAllImportStepsFromProfile('profile-%s' % profile_id)
-    if setup_content:
-        setup_tool.runAllImportStepsFromProfile(
-            'profile-%s' % content_profile_id)
 
     reg = queryUtility(IRegistry, context=site)
     reg['plone.portal_timezone'] = portal_timezone
@@ -100,6 +97,11 @@ def addPloneSite(context, site_id, title='Plone site', description='',
     reg['plone.default_language'] = default_language
     reg['plone.available_languages'] = [default_language]
 
+    if setup_content:
+        setup_tool.runAllImportStepsFromProfile(
+            'profile-%s' % content_profile_id)
+
+
     props = dict(
         title=title,
         description=description,


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-17T09:54:47+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/eadb810e041ee182351cf7efe8fcf8db1d2660f1

We don't need to check for PloneLanguageTool is not there anymore

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 608c1e9..9b5c4f7 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -31,12 +31,12 @@ def test_language_controlpanel_view(self):
         view = view.__of__(self.portal)
         self.assertTrue(view())
 
-    def test_language_in_controlpanel(self):
-        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
-        self.assertTrue('PloneLanguageTool' in [
-            a.getAction(self)['id']
-            for a in self.controlpanel.listActions()
-        ])
+    # def test_language_in_controlpanel(self):
+    #     self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
+    #     self.assertTrue('PloneLanguageTool' in [
+    #         a.getAction(self)['id']
+    #         for a in self.controlpanel.listActions()
+    #     ])
 
     def test_default_language_exists(self):
         self.assertTrue(hasattr(self.settings, 'default_language'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-17T09:57:18+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/de055209c1ee83938d687758d06636c0461dc2c9

Comment out 'Scenario: Filter Navigation By Workflow States in the Navigation Control Panel'. Seems this was a work-in-progress that has been added accidentially.

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot

diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
index c03d3c7..70b4a5a 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
@@ -34,16 +34,16 @@ Scenario: Filter Navigation By Displayed Types in the Navigation Control Panel
    When I remove 'Document' from the displayed types list
    Then the document 'My Document' does not show up in the navigation
 
-Scenario: Filter Navigation By Workflow States in the Navigation Control Panel
-  Given a logged-in site administrator
-    and a published document 'My Document'
-    and a private document 'My Internal Document'
-    and the navigation control panel
-   When I enable filtering by workflow states
-    and I choose to show 'published' items
-    and I choose to not show 'private' items
-   Then the document 'My Document' shows up in the navigation
-    and the document 'My Internal Document' does not show up in the navigation
+#Scenario: Filter Navigation By Workflow States in the Navigation Control Panel
+#  Given a logged-in site administrator
+#    and a published document 'My Document'
+#    and a private document 'My Internal Document'
+#    and the navigation control panel
+#   When I enable filtering by workflow states
+#    and I choose to show 'published' items
+#    and I choose to not show 'private' items
+#   Then the document 'My Document' shows up in the navigation
+#    and the document 'My Internal Document' does not show up in the navigation
 
 
 *** Keywords *****************************************************************
@@ -55,7 +55,6 @@ the navigation control panel
 
 a published document '${title}'
   ${uid}=  a document '${title}'
-  Debug
   Fire transition  ${uid}  publish
 
 a private document '${title}'


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-17T09:57:18+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/96761994594dd572f1759ffbc3c7a67467bd132e

Revert test_controlpanel_navigation.py change to have a cleaner pull request.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
index 888dd98..bc7263e 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_navigation.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from zope.component import getMultiAdapter
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import INavigationSchema
 from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from plone.registry.interfaces import IRegistry
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 import unittest2 as unittest
 
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-17T09:58:08+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/db76af58730c657c8b688653c8a37fe3f234dccb

PloneLanguageTool is gone. Language control panel is LanguageSettings now.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index 9b5c4f7..fff1af4 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -31,12 +31,12 @@ def test_language_controlpanel_view(self):
         view = view.__of__(self.portal)
         self.assertTrue(view())
 
-    # def test_language_in_controlpanel(self):
-    #     self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
-    #     self.assertTrue('PloneLanguageTool' in [
-    #         a.getAction(self)['id']
-    #         for a in self.controlpanel.listActions()
-    #     ])
+    def test_language_in_controlpanel(self):
+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
+        self.assertTrue('LanguageSettings' in [
+            a.getAction(self)['id']
+            for a in self.controlpanel.listActions()
+        ])
 
     def test_default_language_exists(self):
         self.assertTrue(hasattr(self.settings, 'default_language'))


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-17T13:17:04+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c792ebe8efdb800f68e90f836e3b3e61bfccd620

ILanguage Interface to get content language and setting the language on portal root

Files changed:
A Products/CMFPlone/interfaces/language.py
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/factory.py
M Products/CMFPlone/interfaces/__init__.py

diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index 40bf039..ec66eb7 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -985,7 +985,6 @@ def listMetaTags(self, context):
             metadata_names = {'Description': METADATA_DCNAME['Description']}
         else:
             metadata_names = METADATA_DCNAME
-
         for accessor, key in metadata_names.items():
             # check non-public properties
             if not view_about and accessor in METADATA_DC_AUTHORFIELDS:
diff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py
index aa4cbc2..85703b2 100644
--- a/Products/CMFPlone/factory.py
+++ b/Products/CMFPlone/factory.py
@@ -80,7 +80,7 @@ def addPloneSite(context, site_id, title='Plone site', description='',
     """Add a PloneSite to the context."""
     context._setObject(site_id, PloneSite(site_id))
     site = context._getOb(site_id)
-    # site.setLanguage(default_language)
+    site.setLanguage(default_language)
 
     site[_TOOL_ID] = SetupTool(_TOOL_ID)
     setup_tool = site[_TOOL_ID]
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 3e86036..ca4c86c 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -29,6 +29,7 @@
 from events import ISiteManagerCreatedEvent
 from installable import INonInstallable
 from interface import IInterfaceTool
+from language import ILanguage
 from migration import IMigrationTool
 from patterns import IPatternsSettings
 from properties import IPropertiesTool
diff --git a/Products/CMFPlone/interfaces/language.py b/Products/CMFPlone/interfaces/language.py
new file mode 100644
index 0000000..d78e9a7
--- /dev/null
+++ b/Products/CMFPlone/interfaces/language.py
@@ -0,0 +1,11 @@
+from zope.interface import Interface
+
+
+# Language-support
+class ILanguage(Interface):
+
+    def get_language(self):
+        """ return the contents language """
+
+    def set_language(self):
+        """ return the contents language """
\ No newline at end of file


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-19T11:45:56+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/6f8cd2b3fedd15de7f23605e3aa34cb594e277a1

Always show language selector option on control panel

Files changed:
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index c14d5f5..9c50df1 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -55,6 +55,15 @@ def set_display_flags(self, value):
     display_flags = property(get_display_flags,
                                            set_display_flags)
 
+    def get_always_show_selector(self):
+        return self.settings.always_show_selector
+
+    def set_always_show_selector(self, value):
+        self.settings.always_show_selector = value
+
+    always_show_selector = property(get_always_show_selector,
+                                           set_always_show_selector)
+
     def get_use_content_negotiation(self):
         return self.settings.use_content_negotiation
 
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 2a415fb..0d932c7 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -162,6 +162,19 @@ class ILanguageSchema(Interface):
         required=False
     )
 
+    always_show_selector = schema.Bool(
+        title=_(
+            u'label_always_show_selector',
+            default=u"Always show language selector"
+        ),
+        description=_(
+            u"help_always_show_selector",
+            default=u""
+        ),
+        default=False,
+        required=False
+    )
+
     model.fieldset(
         'negotiation_scheme',
         label=_(u'Negotiation scheme', default=u'Negotiation scheme'),


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-19T13:52:35+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/5c17f52a98787db9a54735f56d3eb00ffeed0223

Adding always_show_selector and checking that default language is in available languages

Files changed:
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/controlpanel/browser/language.py
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index 9c50df1..b844984 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -23,6 +23,7 @@ def get_default_language(self):
         return self.settings.default_language
 
     def set_default_language(self, value):
+        import pdb; pdb.set_trace()
         self.settings.default_language = value
 
     default_language = property(get_default_language,
diff --git a/Products/CMFPlone/controlpanel/browser/language.py b/Products/CMFPlone/controlpanel/browser/language.py
index f7e1bb6..669129e 100644
--- a/Products/CMFPlone/controlpanel/browser/language.py
+++ b/Products/CMFPlone/controlpanel/browser/language.py
@@ -3,6 +3,10 @@
 from plone.app.registry.browser import controlpanel
 
 from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.statusmessages.interfaces import IStatusMessage
+from z3c.form.interfaces import WidgetActionExecutionError
+from z3c.form import form, button
+from zope.interface import Invalid
 
 
 class LanguageControlPanelForm(controlpanel.RegistryEditForm):
@@ -16,6 +20,38 @@ class LanguageControlPanelForm(controlpanel.RegistryEditForm):
     schema = ILanguageSchema
     schema_prefix = "plone"
 
+    @button.buttonAndHandler(_(u"Save"), name='save')
+    def handleSave(self, action):
+        data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        # We need to check if the default language is in available languages
+        if 'default_language' in data and 'available_languages' in data and \
+                data['default_language'] not in data['available_languages']:
+            IStatusMessage(self.request).addStatusMessage(
+                _(u"Default language not in available languages"),
+                "error")
+
+            # e = Invalid(_(u"Default language not in available languages"))
+            # raise WidgetActionExecutionError('default_language', e)
+            return
+
+        self.applyChanges(data)
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes saved."),
+            "info")
+        self.request.response.redirect(self.request.getURL())
+
+    @button.buttonAndHandler(_(u"Cancel"), name='cancel')
+    def handleCancel(self, action):
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes canceled."),
+            "info")
+        self.request.response.redirect("%s/%s" % (
+            self.context.absolute_url(),
+            self.control_panel_view))
+
 
 class LanguageControlPanel(controlpanel.ControlPanelFormWrapper):
     form = LanguageControlPanelForm
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 0d932c7..e9cb708 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -107,6 +107,7 @@ class ILanguageSchema(Interface):
             'available_languages',
             'use_combined_language_codes',
             'display_flags',
+            'always_show_selector'
         ],
     )
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-19T16:07:37+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1ced7a1899c0394bf81616a7a5e7abd137f5d230

We need to add an available language before setting the default language

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_language.robot

diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_language.robot b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
index 15b1266..cb4213e 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
@@ -35,6 +35,8 @@ the language control panel
 
 I set the site language to German
   Select From List By Label  form.widgets.default_language:list  Deutsch
+  Select From List By Label  form.widgets.available_languages.from  Deutsch
+  Click Button  →
   Click Button  Save
   Wait until page contains  Changes saved
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-19T16:12:04+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/eed08763f350e610f02190172a7363abf1736b15

Missed PDB, just to note that this code is never used

Files changed:
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py

diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index b844984..9c50df1 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -23,7 +23,6 @@ def get_default_language(self):
         return self.settings.default_language
 
     def set_default_language(self, value):
-        import pdb; pdb.set_trace()
         self.settings.default_language = value
 
     default_language = property(get_default_language,
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 96e5a73..190c8a1 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -208,7 +208,7 @@ def test_authenticated_users_only(self):
         )
         self.browser.getControl(control_label).selected = True
         self.browser.getControl('Save').click()
-
+        import pdb; pdb.set_trace()
         self.assertEqual(settings.authenticated_users_only, True)
 
     def test_set_cookie_always(self):


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-19T16:12:29+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/19dab7a77f6914e71ec7c42036744a5548dbaddc

Too much things at the same time ....

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 190c8a1..72362b5 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -208,7 +208,6 @@ def test_authenticated_users_only(self):
         )
         self.browser.getControl(control_label).selected = True
         self.browser.getControl('Save').click()
-        import pdb; pdb.set_trace()
         self.assertEqual(settings.authenticated_users_only, True)
 
     def test_set_cookie_always(self):


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-20T09:35:40+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3f42e8b8fdd58d1a15ac3f86cb4b4284475e5710

Use a real request on the test

Files changed:
M Products/CMFPlone/tests/testBrowserLayerPrecedence.py

diff --git a/Products/CMFPlone/tests/testBrowserLayerPrecedence.py b/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
index 87b9a63..b63b1fb 100644
--- a/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
+++ b/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
@@ -19,7 +19,7 @@ class IAdditiveLayer(Interface):
 class TestBrowserLayerPrecedence(PloneTestCase):
 
     def _get_request_interfaces(self):
-        request = TestRequest()
+        request = self.layer['request']
         notify(BeforeTraverseEvent(self.portal, request))
         iro = list(request.__provides__.__iro__)
         return iro


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-20T09:47:06+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/390e11243fa7a3dbee9668950db8a0a517df25e0

Tests fixing on language

Files changed:
M Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
M Products/CMFPlone/tests/testControlPanel.py

diff --git a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
index e1055e2..de6f0eb 100644
--- a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
+++ b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
@@ -17,7 +17,12 @@ First, we need to log in.
 
 We need to allow multiple languages to see the result of our changes:
 
-    >>> self.portal.portal_languages.supported_langs = ['de', 'en']
+    >>> from plone.registry.interfaces import IRegistry
+    >>> from zope.component import getUtility 
+    >>> settings = getUtility(IRegistry).forInterface(
+            ILanguageSchema,
+            prefix='plone')
+    >>> settings.available_languages = ['de', 'en']
     >>> import transaction; transaction.commit()
 
 Add Document
diff --git a/Products/CMFPlone/tests/testControlPanel.py b/Products/CMFPlone/tests/testControlPanel.py
index 7782203..c3fb944 100644
--- a/Products/CMFPlone/tests/testControlPanel.py
+++ b/Products/CMFPlone/tests/testControlPanel.py
@@ -13,7 +13,7 @@ def afterSetUp(self):
                            'MemberPassword', 'ZMI', 'SecuritySettings',
                            'NavigationSettings', 'SearchSettings',
                            'errorLog', 'PloneReconfig', 'TypesSettings',
-                           'PloneLanguageTool', 'HtmlFilter', 'Maintenance']
+                           'LanguageSettings', 'HtmlFilter', 'Maintenance']
 
     def testDefaultGroups(self):
         for group in self.groups:


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-20T16:46:10+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d24ee682addf6b46e87d209c85de419511feb1a4

Fix failing language control panel zope.testbrowser tests by injecting the available_languages field into the form. We have to do this because zope.testbrowser does not support js and the in-and-out widget does not work without js.

Files changed:
M Products/CMFPlone/controlpanel/browser/language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py

diff --git a/Products/CMFPlone/controlpanel/browser/language.py b/Products/CMFPlone/controlpanel/browser/language.py
index 669129e..558389c 100644
--- a/Products/CMFPlone/controlpanel/browser/language.py
+++ b/Products/CMFPlone/controlpanel/browser/language.py
@@ -4,9 +4,7 @@
 
 from Products.CMFPlone.interfaces import ILanguageSchema
 from Products.statusmessages.interfaces import IStatusMessage
-from z3c.form.interfaces import WidgetActionExecutionError
-from z3c.form import form, button
-from zope.interface import Invalid
+from z3c.form import button
 
 
 class LanguageControlPanelForm(controlpanel.RegistryEditForm):
@@ -57,7 +55,6 @@ class LanguageControlPanel(controlpanel.ControlPanelFormWrapper):
     form = LanguageControlPanelForm
 
 
-
 #class LanguageControlPanel(ControlPanelForm):
 #    form_fields = FormFields(ILanguageSchema)
 #    form_fields['default_language'].custom_widget = \
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 72362b5..a7dd151 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -31,12 +31,17 @@ def setUp(self):
             'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
         )
 
-    def in_out_select(self, form, name, control_name):
+    def _inject_available_languages_field(self, value):
+        """The in-and-out widget does not work without javascript, therefore
+           we have to inject some values in order to make saving the form work.
+        """
+        form = self.browser.getForm(id='LanguageControlPanel')
         form.mech_form.new_control(
             type='hidden',
-            name=name,
-            attrs=dict(value=self.browser.getControl(
-                control_name).optionValue))
+            name='form.widgets.available_languages:list',
+            attrs=dict(value=value)
+        )
+        self.browser.getControl('Save').click()
 
     def test_language_control_panel_link(self):
         self.browser.open(
@@ -115,6 +120,8 @@ def test_use_combined_language_codes(self):
         self.browser.getControl(
             'Show country-specific language variants'
         ).selected = True
+
+        self._inject_available_languages_field('en')
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_combined_language_codes, True)
@@ -134,6 +141,8 @@ def test_display_flags(self):
         self.browser.getControl(
             'Show language flags'
         ).selected = True
+
+        self._inject_available_languages_field('en')
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.display_flags, True)
@@ -153,6 +162,8 @@ def test_use_content_negotiation(self):
         self.browser.getControl(
             'Use the language of the content item'
         ).selected = True
+
+        self._inject_available_languages_field('en')
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_content_negotiation, True)
@@ -172,6 +183,8 @@ def test_use_path_negotiation(self):
         self.browser.getControl(
             'Use language codes in URL path for manual override'
         ).selected = True
+
+        self._inject_available_languages_field('en')
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_path_negotiation, True)
@@ -191,6 +204,8 @@ def test_use_cookie_negotiation(self):
         self.browser.getControl(
             'Use cookie for manual override'
         ).selected = True
+
+        self._inject_available_languages_field('en')
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_cookie_negotiation, True)
@@ -207,7 +222,10 @@ def test_authenticated_users_only(self):
             False
         )
         self.browser.getControl(control_label).selected = True
+
+        self._inject_available_languages_field('en')
         self.browser.getControl('Save').click()
+
         self.assertEqual(settings.authenticated_users_only, True)
 
     def test_set_cookie_always(self):
@@ -222,6 +240,15 @@ def test_set_cookie_always(self):
             False
         )
         self.browser.getControl(control_label).selected = True
+
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.set_cookie_always, True)
@@ -238,6 +265,15 @@ def test_use_subdomain_negotiation(self):
             False
         )
         self.browser.getControl(control_label).selected = True
+
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_subdomain_negotiation, True)
@@ -254,6 +290,14 @@ def test_use_cctld_negotiation(self):
             False
         )
         self.browser.getControl(control_label).selected = True
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_cctld_negotiation, True)
@@ -270,6 +314,14 @@ def test_use_request_negotiation(self):
             False
         )
         self.browser.getControl(control_label).selected = True
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_request_negotiation, True)


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-20T16:56:41+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/fb7d85747bfefbbc93443439dd06404bb81a6b8f

Fix test_default_language test.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index a7dd151..b3ef817 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -83,7 +83,9 @@ def test_default_language(self):
         self.browser.getControl(
             'Site language'
         ).value = ['de']
-        self.browser.getControl('Save').click()
+        self._inject_available_languages_field('en')
+        self._inject_available_languages_field('de')
+        self.browser.getControl(name='form.buttons.save').click()
 
         self.assertEqual(settings.default_language, 'de')
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-20T17:14:14+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/dea23f0ec09777e355dfb1e9eec0ed0b11529ab5

Fix failing AddMoveAndDeleteDocument doctest.

Files changed:
M Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt

diff --git a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
index de6f0eb..7ebe23a 100644
--- a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
+++ b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
@@ -18,10 +18,11 @@ First, we need to log in.
 We need to allow multiple languages to see the result of our changes:
 
     >>> from plone.registry.interfaces import IRegistry
-    >>> from zope.component import getUtility 
+    >>> from zope.component import getUtility
+    >>> from Products.CMFPlone.interfaces import ILanguageSchema
     >>> settings = getUtility(IRegistry).forInterface(
-            ILanguageSchema,
-            prefix='plone')
+    ...     ILanguageSchema,
+    ...     prefix='plone')
     >>> settings.available_languages = ['de', 'en']
     >>> import transaction; transaction.commit()
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-21T22:44:44+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/b52d75049566f251b551bbe92850f438853344e4

Merge branch 'master' into z3cform-language-controlpanel

Conflicts:
	Products/CMFPlone/tests/robot/keywords.robot

Files changed:
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/tests/robot/keywords.robot
M Products/CMFPlone/tests/robot/test_actionmenu.robot
M Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
M Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
M Products/CMFPlone/tests/robot/test_controlpanel_search.robot
M Products/CMFPlone/tests/robot/test_controlpanel_security.robot
M Products/CMFPlone/tests/robot/test_controlpanel_site.robot
M Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot
M Products/CMFPlone/tests/robot/test_edit.robot
M Products/CMFPlone/tests/robot/test_folder_contents.robot
M Products/CMFPlone/tests/robot/test_livesearch.robot
M Products/CMFPlone/tests/robot/test_overlays.robot
M Products/CMFPlone/tests/robot/test_portlets.robot
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testQuickInstallerTool.py

diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
new file mode 100644
index 0000000..f20f91d
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
@@ -0,0 +1,119 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
+
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from Products.CMFPlone.interfaces import ISiteSyndicationSettings
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+import unittest2 as unittest
+import transaction
+
+
+class SyndicationControlPanelFunctionalTest(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.portal_url = self.portal.absolute_url()
+        self.browser = Browser(self.app)
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+        )
+
+    def test_syndication_controlpanel_link(self):
+        self.browser.open(
+            "%s/plone_control_panel" % self.portal_url)
+        self.browser.getLink('Syndication').click()
+
+    def test_syndication_controlpanel_backlink(self):
+        self.browser.open(
+            "%s/@@syndication-controlpanel" % self.portal_url)
+        self.assertTrue("Plone Configuration" in self.browser.contents)
+
+    def test_syndication_controlpanel_sidebar(self):
+        self.browser.open(
+            "%s/@@syndication-controlpanel" % self.portal_url)
+        self.browser.getLink('Site Setup').click()
+        self.assertEqual(
+            self.browser.url,
+            'http://nohost/plone/@@overview-controlpanel')
+
+    def test_syndication_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="syndication-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_syndication_controlpanel_enabled(self):
+        self.browser.open(
+            "%s/@@syndication-controlpanel" % self.portal_url)
+        self.browser.getControl(
+            name='form.widgets.default_enabled:list').value = True
+        self.browser.getControl(
+            name='form.widgets.show_author_info:list').value = False
+        self.browser.getControl(
+            name='form.widgets.show_syndication_link:list').value = True
+        self.browser.getControl('Save').click()
+
+        self.assertTrue('Changes saved' in self.browser.contents)
+        self.browser.open(
+            "%s/@@syndication-controlpanel" % self.portal_url)
+
+        self.assertEqual(
+            self.browser.getControl(
+                name='form.widgets.default_enabled:list'
+            ).value,
+            ['selected']
+        )
+        self.assertEqual(
+            self.browser.getControl(
+                name='form.widgets.show_author_info:list').value,
+            []
+        )
+        self.assertEqual(
+            self.browser.getControl(
+                name='form.widgets.show_syndication_link:list'
+            ).value,
+            ['selected']
+        )
+
+    def test_create_collection(self):
+        """Create collection and check if synPropertiesForm link is present.
+        """
+        # create collection
+        self.portal.invokeFactory('Collection', 'collection')
+        self.portal.collection.query = [
+            {
+                "i": "portal_type",
+                "o": "plone.app.querystring.operation.selection.is",
+                "v": ["News Item"]
+            },
+            {
+                "i": "review_state",
+                "o": "plone.app.querystring.operation.selection.is",
+                "v": ["published"]
+            }
+        ]
+        transaction.commit()
+        # Enable syndication
+        self.browser.open(
+            "%s/@@syndication-controlpanel" % self.portal_url)
+        self.browser.getControl(
+            name='form.widgets.default_enabled:list').value = ['selected']
+        self.browser.getControl(
+            name='form.widgets.show_syndication_link:list'
+        ).value = ['selected']
+        self.browser.getControl('Save').click()
+        self.assertTrue('Changes saved' in self.browser.contents)
+
+        self.browser.open(self.portal_url + '/collection')
+        self.assertTrue('/RSS' in self.browser.contents)
+
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index ca4c86c..a1bdbfd 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -40,6 +40,7 @@
 from siteroot import IPloneSiteRoot
 from siteroot import ITestCasePloneSiteRoot
 from structure import INonStructuralFolder
+from syndication import ISiteSyndicationSettings
 from translationservice import ITranslationServiceTool
 from workflow import IWorkflowChain
 from resources import IResourceRegistry
diff --git a/Products/CMFPlone/tests/robot/keywords.robot b/Products/CMFPlone/tests/robot/keywords.robot
index 1c3e2b0..7ffd098 100644
--- a/Products/CMFPlone/tests/robot/keywords.robot
+++ b/Products/CMFPlone/tests/robot/keywords.robot
@@ -16,3 +16,13 @@ a news item '${title}'
 
 an image '${title}'
   Create content  type=Image  id=doc  title=${title}
+
+a folder '${title}'
+  Create content  type=Folder  title=${title}
+
+patterns are loaded
+  Wait For Condition  return $('body.patterns-loaded').size() > 0
+
+a folder with a document '${title}'
+  ${folder_uid}=  Create content  type=Folder  title=folder
+  Create content  type=Document  container=${folder_uid}  title=${title}
diff --git a/Products/CMFPlone/tests/robot/test_actionmenu.robot b/Products/CMFPlone/tests/robot/test_actionmenu.robot
index 5ef5b6e..195a1ce 100644
--- a/Products/CMFPlone/tests/robot/test_actionmenu.robot
+++ b/Products/CMFPlone/tests/robot/test_actionmenu.robot
@@ -1,38 +1,43 @@
-*** Settings ***
+*** Settings *****************************************************************
 
 Resource  plone/app/robotframework/keywords.robot
 Resource  plone/app/robotframework/saucelabs.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
-Test Setup  Run keywords  Open SauceLabs test browser  Background
+Test Setup  Run keywords  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
 
-*** Variables ***
+
+*** Variables ****************************************************************
 
 ${TITLE}  An actionsmenu page
 ${PAGE_ID}  an-actionsmenu-page
 
-*** Test cases ***
+
+*** Test cases ***************************************************************
 
 # ---
 # Basic Contentactions menu
 # ---
 
 Scenario: Actions Menu rendered collapsed
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      Then delete link exists
       and delete link should not be visible
 
 Scenario: Clicking expands action menu
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      When menu link is clicked
      Then actions menu should be visible
 
 Scenario: Clicking again collapses action menu
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      When menu link is clicked
       and menu link is clicked
 
@@ -42,7 +47,8 @@ Scenario: Clicking again collapses action menu
 
 Scenario: Hovering mouse from expanded menu on other menu shows that menu
     Pass Execution  This functionality needs to be fixed for Plone 5, but let's not make it break the build for now.
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      When first menu link is clicked
       and mouse moves to second menu
      Then second menu should be visible
@@ -53,7 +59,8 @@ Scenario: Hovering mouse from expanded menu on other menu shows that menu
 # ---
 
 Scenario: Clicking outside of Contentactions menu
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      When menu link is clicked
       and I click outside of menu
      Then actions menu should not be visible
@@ -63,7 +70,8 @@ Scenario: Clicking outside of Contentactions menu
 # ---
 
 Scenario: Do a workflow change
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      When workflow link is clicked
      Then state should have changed
 
@@ -72,62 +80,27 @@ Scenario: Do a workflow change
 # ---
 
 Scenario:
-    Given an actionsmenu page
+    Given a logged-in site administrator
+      and an actionsmenu page
      When I copy the page
       and I paste
      Then I should see 'Item(s) pasted.' in the page
 
-*** Keywords ***
 
-Background
-    Given a site owner
-      and a test document
+*** Keywords *****************************************************************
 
-a test document
-    Go to  ${PLONE_URL}/++add++Document
-    Given patterns are loaded
-    Execute Javascript  $('#form-widgets-IDublinCore-title').val('${TITLE}'); return 0;
-    Click Button  Save
+# --- GIVEN ------------------------------------------------------------------
 
 an actionsmenu page
+    Create content  type=Document  title=${TITLE}
     Go to  ${PLONE_URL}/${PAGE_ID}
 
-delete link exists
-     Page Should Contain Element  xpath=//a[@id='plone-contentmenu-actions-delete']
-
-delete link should not be visible
-     Element Should Not Be Visible  xpath=//div[@class='contentActions']//a[@id='plone-contentmenu-actions-delete']
-
-menu link is clicked
-    Given patterns are loaded
-    Click link  xpath=//li[@id='plone-contentmenu-moreoptions']/a
-
-delete link should be visible
-    Given patterns are loaded
-    Element Should Be Visible  xpath=//div[@class='contentActions']//a[@id='plone-contentmenu-actions-delete']
-
-actions menu should be visible
-    Given patterns are loaded
-    Element Should Be Visible  xpath=//li[@id='plone-contentmenu-actions']
 
-first menu link is clicked
-    Given patterns are loaded
-    Click Link  xpath=(//div[@class="contentActions"]//a[contains(@class, 'actionMenuHeader')])[1]
+# --- WHEN -------------------------------------------------------------------
 
 mouse moves to second menu
     Click Link  xpath=(//div[@class="contentActions"]//a[contains(@class, 'actionMenuHeader')])[2]
 
-second menu should be visible
-    Element Should Be Visible  xpath=(//li[contains(@class, 'actionMenu')])[2]
-
-first menu should not be visible
-    Given patterns are loaded
-    Wait until keyword succeeds  10s  1s  Element Should Not Be Visible  xpath=(//li[contains(@class, 'actionMenu')])[1]//li
-
-actions menu should not be visible
-    Given patterns are loaded
-    Wait until keyword succeeds  10s  1s  Element Should Not Be Visible  xpath=//li[@id='plone-contentmenu-actions']
-
 I click outside of menu
     Click Element  xpath=//h1
 
@@ -157,11 +130,6 @@ workflow link is clicked softly
     Mouse Up  xpath=(//li[@id='plone-contentmenu-workflow']//a)[1]
     Wait until page contains  Item state changed.
 
-state should have changed
-    Wait until page contains  Item state changed
-    ${NEW_STATE} =  Get Text  xpath=(//span[contains(@class,'state-')])[2]
-    # Should Not Be Equal  ${NEW_STATE}  ${OLD_STATE}
-
 Open Menu
     [Arguments]  ${elementId}
     Element Should Not Be Visible  css=#${elementId} ul.actionMenuContent
@@ -183,6 +151,48 @@ I paste
     Open Action Menu
     Click Link  link=Paste
 
+
+# --- THEN -------------------------------------------------------------------
+
+delete link exists
+     Page Should Contain Element  xpath=//a[@id='plone-contentmenu-actions-delete']
+
+delete link should not be visible
+     Element Should Not Be Visible  xpath=//div[@class='contentActions']//a[@id='plone-contentmenu-actions-delete']
+
+menu link is clicked
+    Given patterns are loaded
+    Click link  xpath=//li[@id='plone-contentmenu-moreoptions']/a
+
+delete link should be visible
+    Given patterns are loaded
+    Element Should Be Visible  xpath=//div[@class='contentActions']//a[@id='plone-contentmenu-actions-delete']
+
+actions menu should be visible
+    Given patterns are loaded
+    Element Should Be Visible  xpath=//li[@id='plone-contentmenu-actions']
+
+first menu link is clicked
+    Given patterns are loaded
+    Click Link  xpath=(//div[@class="contentActions"]//a[contains(@class, 'actionMenuHeader')])[1]
+
 I should see '${message}' in the page
     Wait until page contains  ${message}
     Page should contain  ${message}
+
+state should have changed
+    Wait until page contains  Item state changed
+    ${NEW_STATE} =  Get Text  xpath=(//span[contains(@class,'state-')])[2]
+    # Should Not Be Equal  ${NEW_STATE}  ${OLD_STATE}
+
+second menu should be visible
+    Element Should Be Visible  xpath=(//li[contains(@class, 'actionMenu')])[2]
+
+first menu should not be visible
+    Given patterns are loaded
+    Wait until keyword succeeds  10s  1s  Element Should Not Be Visible  xpath=(//li[contains(@class, 'actionMenu')])[1]//li
+
+actions menu should not be visible
+    Given patterns are loaded
+    Wait until keyword succeeds  10s  1s  Element Should Not Be Visible  xpath=//li[@id='plone-contentmenu-actions']
+
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
index 571764c..d67adc2 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
@@ -6,7 +6,6 @@ Resource  plone/app/robotframework/saucelabs.robot
 Library  Remote  ${PLONE_URL}/RobotRemote
 
 Resource  keywords.robot
-Resource  common.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot b/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
index bc86bc2..601b60e 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
@@ -15,7 +15,7 @@ Resource  plone/app/robotframework/saucelabs.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
@@ -35,21 +35,40 @@ Scenario: Configure Filter Control Panel to strip out tags
    When I add 'h1' to the stripped tags list
    Then the 'h1' tag is stripped when a document is saved
 
-# XXX: This test currently fails because TinyMCE filters out the marquee tag
-# and ignores the filter control panel settings.
-#Scenario: Configure Filter Control Panel to allow custom tags
-#  Given a logged-in site administrator
-#    and the filter control panel
-#   When I add 'marquee' to the custom tags list
-#   Then the 'marquee' tag is preserved when a document is saved
+Scenario: Configure Filter Control Panel to allow custom tags
+  Pass Execution  This test currently fails because TinyMCE filters out the marquee tag and ignores the filter control panel settings.
+  Given a logged-in site administrator
+    and the filter control panel
+   When I add 'marquee' to the custom tags list
+   Then the 'marquee' tag is preserved when a document is saved
+
+Scenario: Configure Filter Control Panel to strip out attributes
+  Pass Execution  Functionality is broken. Maybe even in Plone 4.3?
+  Given a logged-in site administrator
+    and the filter control panel
+   When I add 'data-stripme' to the stripped attributes list
+   Then the 'data-stripme' attribute is stripped when a document is saved
 
-#Scenario: Configure Filter Control Panel to strip out attributes
+Scenario: Configure Filter Control Panel to strip out combinations
+  Pass Execution  Functionality is broken. Maybe even in Plone 4.3?
+  Given a logged-in site administrator
+    and the filter control panel
+   When I add 'div h3' and 'data-foo' to the stripped out combinations
+   Then the 'data-foo' attribute of a 'div h3' combination is stripped when a document is saved
 
-#Scenario: Configure Filter Control Panel to strip out combinations
+Scenario: Configure Filter Control Panel to allow style attributes
+  Given a logged-in site administrator
+    and the filter control panel
+   When I add 'display' to the allowed style attributes
+   Then the 'display' style attribute is preserved when a document is saved
 
-#Scenario: Configure Filter Control Panel to allow style attributes
+Scenario: Configure Filter Control Panel to filter out classes
+  Pass Execution  Functionality is broken. Maybe even in Plone 4.3?
+  Given a logged-in site administrator
+    and the filter control panel
+   When I add 'foobar' to the filtered classes
+   Then the 'foobar' class is filtered out when a document is saved
 
-#Scenario: Configure Filter Control Panel to filter out classes
 
 
 *** Keywords *****************************************************************
@@ -71,32 +90,61 @@ Input RichText
 
 I add '${tag}' to the nasty tags list
   Click Button  Add Nasty tags
-  Given patterns are loaded
+  patterns are loaded
   Input Text  name=form.nasty_tags.6.  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the stripped tags list
   Click Button  Add Stripped tags
-  Given patterns are loaded
+  patterns are loaded
   Input Text  name=form.stripped_tags.16.  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the custom tags list
   Click Button  Add Custom tags
-  Given patterns are loaded
+  patterns are loaded
   Input Text  name=form.custom_tags.26.  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
+I add '${tag}' to the stripped attributes list
+  Click Button  Add Stripped attributes
+  patterns are loaded
+  Input Text  name=form.stripped_attributes.9.  ${tag}
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I add '${tag}' to the filtered classes
+  Click Button  Add Filtered classes
+  patterns are loaded
+  Input Text  name=form.class_blacklist.0.  ${tag}
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I add '${tag}' to the allowed style attributes
+  Click Button  Add Permitted properties
+  patterns are loaded
+  Input text  name=form.style_whitelist.4.  ${tag}
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I add '${tags}' and '${attributes}' to the stripped out combinations
+  Click Button  Add Stripped combinations
+  patterns are loaded
+  Input text  name=form.stripped_combinations.1.tags  ${tags}
+  Input text  name=form.stripped_combinations.1.attributes  ${attributes}
+  Click Button  Save
+  Wait until page contains  Changes saved
+
 
 # --- THEN -------------------------------------------------------------------
 
 the 'h1' tag is filtered out when a document is saved
   ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
   Go To  ${PLONE_URL}/doc1/edit
-  Given patterns are loaded
+  patterns are loaded
   Input RichText  <h1>h1 heading</h1><p>lorem ipsum</p>
   Click Button  Save
   Wait until page contains  Changes saved
@@ -105,7 +153,7 @@ the 'h1' tag is filtered out when a document is saved
 the 'h1' tag is stripped when a document is saved
   ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
   Go To  ${PLONE_URL}/doc1/edit
-  Given patterns are loaded
+  patterns are loaded
   Input RichText  <h1>h1 heading</h1><p>lorem ipsum</p>
   Click Button  Save
   Wait until page contains  Changes saved
@@ -115,8 +163,56 @@ the 'h1' tag is stripped when a document is saved
 the 'marquee' tag is preserved when a document is saved
   ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
   Go To  ${PLONE_URL}/doc1/edit
-  Given patterns are loaded
+  patterns are loaded
   Input RichText  <marquee>lorem ipsum</marquee>
   Click Button  Save
   Wait until page contains  Changes saved
   XPath Should Match X Times  //div[@id='content-core']//marquee  1  message=the marquee tag should have been preserved
+
+the 'data-stripme' attribute is stripped when a document is saved
+  ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
+  Go To  ${PLONE_URL}/doc1/edit
+  patterns are loaded
+  Input RichText  <h4 data-stripme="foo">lorem ipsum</h4>
+  Click Button  Save
+  Wait until page contains  Changes saved
+  Page should contain  lorem ipsum
+
+  XPath Should Match X Times  //*[@id='content-core']//h4  1  message=h4 tag should be present
+  XPath Should Match X Times  //*[@id='content-core']//h4[@data-stripme='foo']  0  message=data-stripme attribute should have been filtered out
+
+the 'foobar' class is filtered out when a document is saved
+  ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
+  Go To  ${PLONE_URL}/doc1/edit
+  patterns are loaded
+  Input RichText  <h4 class="foobar">lorem ipsum</h4>
+  Click Button  Save
+  Wait until page contains  Changes saved
+  Page should contain  lorem ipsum
+
+  XPath Should Match X Times  //*[@id='content-core']//h4  1  message=h4 tag should be present
+  XPath Should Match X Times  //*[@id='content-core']//h4[@class='foobar']  0  message=class foobar should have been filtered out
+
+the 'data-foo' attribute of a 'div h3' combination is stripped when a document is saved
+  ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
+  Go To  ${PLONE_URL}/doc1/edit
+  patterns are loaded
+  Input RichText  <div><h3 data-foo="50">lorem ipsum</h3></div>
+  Click Button  Save
+  Wait until page contains  Changes saved
+  Page should contain  lorem ipsum
+  XPath Should Match X Times  //*[@id='content-core']//div/h3  1  message=h4 tag should be present
+  XPath Should Match X Times  //*[@id='content-core']//div/h3[@data-foo]  0  message=the data-foo attribute class should have been filtered out
+
+
+the 'display' style attribute is preserved when a document is saved
+  ${doc1_uid}=  Create content  id=doc1  title=Document 1  type=Document
+  Go To  ${PLONE_URL}/doc1/edit
+  patterns are loaded
+  Input RichText  <h4 style="display: block">lorem ipsum</h4>
+  Click Button  Save
+  Wait until page contains  Changes saved
+  Page should contain  lorem ipsum
+
+  XPath Should Match X Times  //*[@id='content-core']//h4  1  message=h4 tag should be present
+  XPath Should Match X Times  //*[@id='content-core']//h4[@style]  1  message=style attribute with display:block should be present
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_search.robot b/Products/CMFPlone/tests/robot/test_controlpanel_search.robot
index f83b663..987b951 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_search.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_search.robot
@@ -6,7 +6,6 @@ Resource  plone/app/robotframework/saucelabs.robot
 Library  Remote  ${PLONE_URL}/RobotRemote
 
 Resource  keywords.robot
-Resource  common.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_security.robot b/Products/CMFPlone/tests/robot/test_controlpanel_security.robot
index 5e4bf75..237b5f0 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_security.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_security.robot
@@ -6,7 +6,7 @@ Resource  plone/app/robotframework/selenium.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_site.robot b/Products/CMFPlone/tests/robot/test_controlpanel_site.robot
index 6234810..a3efdc5 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_site.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_site.robot
@@ -11,7 +11,6 @@ Variables  Products/CMFPlone/tests/robot/variables.py
 Library  Remote  ${PLONE_URL}/RobotRemote
 
 Resource  keywords.robot
-Resource  common.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
@@ -102,7 +101,7 @@ the site title should be set to '${expected_site_title}'
 the site logo should be set to the custom logo
   Go To  ${PLONE_URL}
   Page should contain element  //*[@id="portal-logo"]/img[contains(@src,'@@site-logo/pixel.png')]
-  
+
 then I can see a sitemap
   Go to  ${PLONE_URL}/sitemap.xml.gz
   # We need a 'Download file' selenium2library keyword to test this:
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot b/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot
index b1971d6..e6e700e 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot
@@ -16,7 +16,6 @@ Resource  plone/app/robotframework/saucelabs.robot
 Library  Remote  ${PLONE_URL}/RobotRemote
 
 Resource  keywords.robot
-Resource  common.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
diff --git a/Products/CMFPlone/tests/robot/test_edit.robot b/Products/CMFPlone/tests/robot/test_edit.robot
index 0df094e..7d25191 100644
--- a/Products/CMFPlone/tests/robot/test_edit.robot
+++ b/Products/CMFPlone/tests/robot/test_edit.robot
@@ -1,29 +1,33 @@
-*** Settings ***
+*** Settings *****************************************************************
 
 Resource  plone/app/robotframework/keywords.robot
 Resource  plone/app/robotframework/saucelabs.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
-Test Setup  Run keywords  Open SauceLabs test browser  Background
+Test Setup  Run keywords  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
 
-*** Variables ***
+
+*** Variables ****************************************************************
 
 ${TITLE}  An edited page
 ${PAGE_ID}  an-edited-page
 
-*** Test cases ***
+
+*** Test cases ***************************************************************
 
 Scenario: A page is opened to edit
-    Given an edited page
+    Given a logged-in site administrator
+      and an edited page
      Then i have the title input field
       and i can only see the default tab
 
 Scenario: Switch tabs
-    Given an edited page
+    Given a logged-in site administrator
+      and an edited page
      When i click the Categorization tab
      Then the Categorization tab is shown
       and no other tab is shown
@@ -32,7 +36,8 @@ Scenario: Adding a related item
     Pass Execution  Disabled until plone.app.widgets is merged
     # Order of the next two lines is important
     # First we're creating a new item and then editing the original page
-    Given at least one other item
+    Given a logged-in site administrator
+      and at least one other item
       and an edited page
      When i click the Categorization tab
       and i click the add related item button
@@ -44,7 +49,8 @@ Scenario: Adding a related item
 
 Scenario: DateTime widget follows form dropdowns values
     Pass Execution  Disabled until plone.app.widgets is merged
-    Given an edited page
+    Given a logged-in site administrator
+      and an edited page
      When i click the Dates tab
       and i select a date using the dropdowns
       and i click the calendar icon
@@ -52,27 +58,25 @@ Scenario: DateTime widget follows form dropdowns values
 
 Scenario: Form dropdowns follows DateTime widget values
     Pass Execution  Disabled until plone.app.widgets is merged
-    Given an edited page
+    Given a logged-in site administrator
+      and an edited page
      When i click the Dates tab
-     and i click the calendar icon
-     and i select a date using the widget
-    Then form dropdowns should not have the default values anymore
+      and i click the calendar icon
+      and i select a date using the widget
+     Then form dropdowns should not have the default values anymore
 
-*** Keywords ***
 
-Background
-    Given a site owner
-      and a test document
+*** Keywords *****************************************************************
 
-a test document
-    Go to  ${PLONE_URL}/++add++Document
-    Given patterns are loaded
-    Execute Javascript  $('#form-widgets-IDublinCore-title').val('${TITLE}'); return 0;
-    Click Button  Save
+# --- GIVEN ------------------------------------------------------------------
 
 an edited page
+    Create content  type=Document  title=${TITLE}
     Go to  ${PLONE_URL}/${PAGE_ID}/edit
 
+
+# --- WHEN -------------------------------------------------------------------
+
 I have the title input field
     Element Should Be Visible  xpath=//fieldset[@id='fieldset-default']
 
@@ -86,26 +90,9 @@ I click the ${tab} tab
     Given patterns are loaded
     Click link  ${tab}
 
-the categorization tab is shown
-    Element Should Be Visible  xpath=//fieldset[@id='fieldset-categorization']
-
-no other tab is shown
-    Element Should Not Be Visible  xpath=//fieldset[@id='fieldset-dates']
-    Element Should Not Be Visible  xpath=//fieldset[@id='fieldset-default']
-    Element Should Not Be Visible  xpath=//fieldset[@id='fieldset-settings']
-
-at least one other item
-    Go to  ${PLONE_URL}/++add++Document
-    Given patterns are loaded
-    Execute Javascript  $('#form-widgets-IDublinCore-title').val('${TITLE}'); return 0;
-    Click Button  Save
-
 I click the add related item button
     Click Button  xpath=//input[contains(@class, 'addreference')]
 
-an overlay pops up
-    Wait Until Page Contains Element  xpath=//div[contains(@class, 'overlay')]//input[@class='insertreference']
-
 I select a related item
     Click Element  xpath=//div[contains(@class, 'overlay')]//input[@class='insertreference']
     Wait until keyword succeeds  10s  1s  Xpath Should Match X Times  //ul[@id = 'ref_browser_items_relatedItems']/descendant::input  1
@@ -116,9 +103,6 @@ I close the overlay
 I save the page
    Click Button  Save
 
-the related item is shown in the page
-   Xpath Should Match X Times  //dl[@id = 'relatedItemBox']/dd  1
-
 I select a date using the dropdowns
     Select From List  xpath=//select[@id='edit_form_effectiveDate_0_year']  2001
     Select From List  xpath=//select[@id='edit_form_effectiveDate_0_month']  January
@@ -132,12 +116,15 @@ I click the calendar icon
     Click Element  xpath=//span[@id='edit_form_effectiveDate_0_popup']
     Element Should Be Visible  xpath=//div[@class='calendar']
 
-popup calendar should have the same date
-    Element Text Should Be  xpath=//div[@class='calendar']//thead//td[@class='title']  January, 2001
-
 I select a date using the widget
     Click Element  xpath=//div[@class='calendar']/table/thead/tr[2]/td[4]/div
 
+
+# --- THEN -------------------------------------------------------------------
+
+popup calendar should have the same date
+    Element Text Should Be  xpath=//div[@class='calendar']//thead//td[@class='title']  January, 2001
+
 form dropdowns should not have the default values anymore
     ${yearLabel} =  Get Selected List Label  xpath=//select[@id='edit_form_effectiveDate_0_year']
     Should Not Be Equal  ${yearLabel}  --
@@ -145,3 +132,23 @@ form dropdowns should not have the default values anymore
     Should Not Be Equal  ${monthLabel}  --
     ${dayLabel} =  Get Selected List Label  xpath=//select[@id='edit_form_effectiveDate_0_day']
     Should Not Be Equal  ${dayLabel}  --
+
+the related item is shown in the page
+   Xpath Should Match X Times  //dl[@id = 'relatedItemBox']/dd  1
+
+an overlay pops up
+    Wait Until Page Contains Element  xpath=//div[contains(@class, 'overlay')]//input[@class='insertreference']
+
+the categorization tab is shown
+    Element Should Be Visible  xpath=//fieldset[@id='fieldset-categorization']
+
+no other tab is shown
+    Element Should Not Be Visible  xpath=//fieldset[@id='fieldset-dates']
+    Element Should Not Be Visible  xpath=//fieldset[@id='fieldset-default']
+    Element Should Not Be Visible  xpath=//fieldset[@id='fieldset-settings']
+
+at least one other item
+    Go to  ${PLONE_URL}/++add++Document
+    Given patterns are loaded
+    Execute Javascript  $('#form-widgets-IDublinCore-title').val('${TITLE}'); return 0;
+    Click Button  Save
diff --git a/Products/CMFPlone/tests/robot/test_folder_contents.robot b/Products/CMFPlone/tests/robot/test_folder_contents.robot
index 04c2b62..2b827fe 100644
--- a/Products/CMFPlone/tests/robot/test_folder_contents.robot
+++ b/Products/CMFPlone/tests/robot/test_folder_contents.robot
@@ -1,26 +1,26 @@
-*** Settings ***
+*** Settings *****************************************************************
 
 Resource  plone/app/robotframework/keywords.robot
 Resource  plone/app/robotframework/saucelabs.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
 
-*** Test cases ***
+
+*** Test cases ***************************************************************
 
 Scenario: Select All items
-    Given a site owner
-      And a test folder
-      And four dummy pages on test folder
-      And the folder contents view
+    Given a logged-in site administrator
+      and a folder with four pages
+      and the folder contents view
      When I select all the elements
      Then the selection count appears
-      And the four elements got selected
-      And the clear selection link appears
+      and the four elements got selected
+      and the clear selection link appears
 
 #Scenario: Clear selection
 #    Given a site owner
@@ -40,28 +40,24 @@ Scenario: Select All items
 #     When I reorder the elements
 #     Then the new order should be 4 > 3 > 2 > 1
 
-*** Keywords ***
+
+*** Keywords *****************************************************************
+
+a folder with four pages
+    ${folder_uid}=  Create content  type=Folder  title=My Folder
+    Create content  type=Document  title=Doc1  container=${folder_uid}
+    Create content  type=Document  title=Doc2  container=${folder_uid}
+    Create content  type=Document  title=Doc3  container=${folder_uid}
+    Create content  type=Document  title=Doc4  container=${folder_uid}
 
 the folder contents view
-    Go to  ${PLONE_URL}/${TEST_FOLDER}/folder_contents
+    Go to  ${PLONE_URL}/my-folder/folder_contents
     Page should contain element  css=.pat-structure
     Given folder contents pattern loaded
 
 I click the '${link_name}' link
     Click Link  ${link_name}
 
-four dummy pages on test folder
-    a document 'doc1' in the test folder
-    a document 'doc2' in the test folder
-    a document 'doc3' in the test folder
-    a document 'doc4' in the test folder
-
-a document '${title}' in the test folder
-    Go to  ${PLONE_URL}/${TEST_FOLDER}/++add++Document
-    Wait For Condition  return $('.autotoc-nav .active:visible').size() > 0
-    Execute Javascript  $('#form-widgets-IDublinCore-title').val('${title}'); return 0;
-    Click Button  Save
-
 I select all the elements
     Element should be visible  css=.pat-structure .select-all
     Click Element  css=.pat-structure .select-all
@@ -133,4 +129,4 @@ Should be above
     Should be true  ${locator1-position} < ${locator2-position}
 
 folder contents pattern loaded
-    Wait For Condition  return $('.pat-structure div.navbar').size() > 0
\ No newline at end of file
+    Wait For Condition  return $('.pat-structure div.navbar').size() > 0
diff --git a/Products/CMFPlone/tests/robot/test_livesearch.robot b/Products/CMFPlone/tests/robot/test_livesearch.robot
index 7502aaa..d6dc731 100644
--- a/Products/CMFPlone/tests/robot/test_livesearch.robot
+++ b/Products/CMFPlone/tests/robot/test_livesearch.robot
@@ -1,41 +1,46 @@
-*** Settings ***
+*** Settings *****************************************************************
 
 Resource  plone/app/robotframework/keywords.robot
 Resource  plone/app/robotframework/saucelabs.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
-Test Setup  Run keywords  Open SauceLabs test browser  Background
+Test Setup  Run keywords  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
 
-*** Test cases ***
+
+*** Test cases ***************************************************************
 
 Scenario: Simple Livesearch
     Pass Execution  Disabled until livesearch pattern is integrated
-    Given a document  Welcome to Plone
+    Given a logged-in site administrator
+      and a document  Welcome to Plone
      When I search for  Welcome
      Then the livesearch results should contain  Welcome to Plone
       and there should be '2' livesearch results
 
 Scenario: Livesearch for documents
     Pass Execution  Disabled until livesearch pattern is integrated
-    Given a document  My document
+    Given a logged-in site administrator
+      and a document  My document
      When I search for  My document
      Then the livesearch results should contain  My document
       and there should be '2' livesearch results
 
 Scenario: Livesearch for folder
     Pass Execution  Disabled until livesearch pattern is integrated
-    Given a folder  My folder
+    Given a logged-in site administrator
+      and a folder  My folder
      When I search for  My folder
      Then the livesearch results should contain  My folder
       and there should be '2' livesearch results
 
 Scenario: Livesearch in current folder only
     Pass Execution  Disabled until livesearch pattern is integrated
-    Given a folder 'folder' with a document 'Inside Document'
+    Given a logged-in site administrator
+      and a folder with a document 'Inside Document'
       and a document  Outside Document
      When I search the currentfolder only for  Inside Document
      Then the livesearch results should contain  Inside Document
@@ -43,11 +48,7 @@ Scenario: Livesearch in current folder only
       and there should be '2' livesearch results
 
 
-*** Keywords ***
-
-Background
-    Given a site owner
-      and a test folder
+*** Keywords *****************************************************************
 
 I search for
     [Arguments]  ${searchtext}
diff --git a/Products/CMFPlone/tests/robot/test_overlays.robot b/Products/CMFPlone/tests/robot/test_overlays.robot
index 33fc72d..9efb0e4 100644
--- a/Products/CMFPlone/tests/robot/test_overlays.robot
+++ b/Products/CMFPlone/tests/robot/test_overlays.robot
@@ -16,6 +16,7 @@ Resource  common.robot
 Test Setup  Run keywords  Open SauceLabs test browser  Background
 Test Teardown  Run keywords  Report test status  Close all browsers
 
+
 *** Test cases ***
 
 Scenario: Contact form overlay opens
@@ -58,19 +59,19 @@ Scenario: Log in form overlay closes on valid credentials
      Then overlay should close
 
 Scenario: Set default content item of a folder overlay opens
-    Given a site owner
+    Given a logged-in site administrator
       And a document 'doc' in the test folder
      When I set the default content view of the test folder
      Then overlay should open
 
 Scenario: Change default content item of a folder overlay opens
-    Given a site owner
+    Given a logged-in site administrator
       And a document as the default view of the test folder
      When I change the default content view of the test folder
      Then overlay should open
 
 Scenario: Change default content item of a folder overlay closes
-    Given a site owner
+    Given a logged-in site administrator
       And a document as the default view of the test folder
      When I change the default content view of the test folder
       And I 'Cancel' the form
@@ -83,12 +84,12 @@ Scenario: Change default content item of a folder overlay closes
      Then overlay should close
 
 Scenario: Delete content action overlay opens
-    Given a site owner
+    Given a logged-in site administrator
      When I trigger the 'delete' action menu item of the test folder
      Then overlay should open
 
 Scenario: Delete content action overlay closes
-    Given a site owner
+    Given a logged-in site administrator
      When I trigger the 'delete' action menu item of the test folder
       And I 'Cancel' the form
      Then overlay should close
@@ -100,12 +101,12 @@ Scenario: Delete content action overlay closes
      Then overlay should close
 
 Scenario: Rename content action overlay opens
-    Given a site owner
+    Given a logged-in site administrator
      When I trigger the 'rename' action menu item of the test folder
      Then overlay should open
 
 Scenario: Rename content action overlay closes
-    Given a site owner
+    Given a logged-in site administrator
      When I trigger the 'rename' action menu item of the test folder
       And I 'Cancel' the form
      Then overlay should close
@@ -153,13 +154,13 @@ Scenario: Register user overlay remains on wrong data
 #     Then overlay should close
 
 Scenario: New user overlay opens
-    Given a site owner
+    Given a logged-in site administrator
       And the users and groups configlet
      When I trigger the add a new user action
      Then overlay should open
 
 Scenario: New user overlay remains on wrong data
-    Given a site owner
+    Given a logged-in site administrator
       And the users and groups configlet
       And I trigger the add a new user action
      When I send the register form
@@ -167,7 +168,7 @@ Scenario: New user overlay remains on wrong data
       And overlay shows an error
 
 Scenario: New user overlay closes on valid data
-    Given a site owner
+    Given a logged-in site administrator
       And the users and groups configlet
       And I trigger the add a new user action
      When I enter valid user data
@@ -175,14 +176,14 @@ Scenario: New user overlay closes on valid data
      Then overlay should close
 
 Scenario: History overlay opens
-    Given a site owner
+    Given a logged-in site administrator
       And the test folder
      When I click the 'Content Info' link
       And I click the 'History' link
      Then overlay should open
 
 Scenario: History overlay closes
-    Given a site owner
+    Given a logged-in site administrator
       And the test folder
       When I click the 'Content Info' link
       And I click the 'History' link
@@ -192,11 +193,14 @@ Scenario: History overlay closes
 *** Keywords ***
 
 Background
-    Given a site owner
+    Given a logged-in site administrator
       and a test folder
     Disable autologin
     Go to homepage
 
+a logged-in site administrator
+  Enable autologin as  Site Administrator
+
 the users and groups configlet
     Go to  ${PLONE_URL}/@@usergroup-userprefs
     Given modals loaded
diff --git a/Products/CMFPlone/tests/robot/test_portlets.robot b/Products/CMFPlone/tests/robot/test_portlets.robot
index f936739..c521774 100644
--- a/Products/CMFPlone/tests/robot/test_portlets.robot
+++ b/Products/CMFPlone/tests/robot/test_portlets.robot
@@ -1,24 +1,26 @@
-*** Settings ***
+*** Settings *****************************************************************
 
 Resource  plone/app/robotframework/keywords.robot
 Resource  plone/app/robotframework/saucelabs.robot
 
 Library  Remote  ${PLONE_URL}/RobotRemote
 
-Resource  common.robot
+Resource  keywords.robot
 
 Test Setup  Open SauceLabs test browser
 Test Teardown  Run keywords  Report test status  Close all browsers
 
-*** Test cases ***
+
+*** Test cases ***************************************************************
 
 Scenario: Add Login Portlet
-    Given a site owner
+    Given a logged-in site administrator
       and a manage portlets view
      When I add a 'Login' portlet to the left column
      Then I should see a 'Login' portlet in the left column
 
-*** Keywords ***
+
+*** Keywords *****************************************************************
 
 a manage portlets view
     Go to   ${PLONE_URL}/@@manage-portlets
diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py
index 5befe76..029a32c 100644
--- a/Products/CMFPlone/tests/testPortalCreation.py
+++ b/Products/CMFPlone/tests/testPortalCreation.py
@@ -214,15 +214,26 @@ def testResourceRegistries(self):
     def testUnfriendlyTypesProperty(self):
         # We should have an types_not_searched property
         self.assertTrue(
-            self.properties.site_properties.hasProperty('types_not_searched'))
-        self.assertTrue('Plone Site' in self.properties.site_properties.getProperty('types_not_searched'))
+            self.properties.site_properties.hasProperty('types_not_searched')
+        )
+        self.assertTrue(
+            'Plone Site' in
+            self.properties.site_properties.getProperty('types_not_searched')
+        )
 
     def testNonDefaultPageTypes(self):
         # We should have a default_page_types property
         self.assertTrue(
-            self.properties.site_properties.hasProperty('default_page_types'))
-        self.assertTrue('Folder' not in self.properties.site_properties.getProperty('default_page_types'))
-        self.assertTrue('Topic' in self.properties.site_properties.getProperty('default_page_types'))
+            self.properties.site_properties.hasProperty('default_page_types')
+        )
+        self.assertTrue(
+            'Folder' not in
+            self.properties.site_properties.getProperty('default_page_types')
+        )
+        self.assertTrue(
+            'Topic' in
+            self.properties.site_properties.getProperty('default_page_types')
+        )
 
     def testNoMembersAction(self):
         # There should not be a Members action
diff --git a/Products/CMFPlone/tests/testQuickInstallerTool.py b/Products/CMFPlone/tests/testQuickInstallerTool.py
index 8056401..1a323f5 100644
--- a/Products/CMFPlone/tests/testQuickInstallerTool.py
+++ b/Products/CMFPlone/tests/testQuickInstallerTool.py
@@ -33,7 +33,11 @@ def testUpgradeProfilesNotShown(self):
         self.assertFalse('plone.app.upgrade.v30' in self._available())
 
     def testLatestUpgradeProfiles(self):
-        xmlconfig.file('test_upgrades1.zcml', package=tests, context=self.layer['configurationContext'])
+        xmlconfig.file(
+            'test_upgrades1.zcml',
+            package=tests,
+            context=self.layer['configurationContext']
+        )
         latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
         self.assertTrue(latest == '3')
 
@@ -41,7 +45,11 @@ def testLatestUpgradeProfiles2(self):
         # make sure strings don't break things
         # note that pkg_resources interprets 1 as
         # ''00000001', which is > 'banana'
-        xmlconfig.file('test_upgrades2.zcml', package=tests, context=self.layer['configurationContext'])
+        xmlconfig.file(
+            'test_upgrades2.zcml',
+            package=tests,
+            context=self.layer['configurationContext']
+        )
         latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
         self.assertTrue(latest == '3')
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-23T02:36:41+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/e4133ecdc2aaa66e7099006e48d5cf8ac7e5dd29

padding instead of margin on mobile

Files changed:
M Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less

diff --git a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
index bfc7400..225d677 100644
--- a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
+++ b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
@@ -357,8 +357,8 @@ body.userrole-authenticated {
         width: 180px;
     }
 
-.plone-toolbar-left-default { margin-left: 0px; }
-.plone-toolbar-left-expanded { margin-left: 0px; }
+.plone-toolbar-left-default { padding-left: 0px; }
+.plone-toolbar-left-expanded { padding-left: 0px; }
 .plone-toolbar-top-default { margin-top: 0px; }
 .plone-toolbar-top-expanded { margin-top: 0px; }
 .plone-toolbar-compressed { margin-top: 0px; margin-left: 0px; }


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-23T15:50:36+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/33ee3244c90bc53c7781460ae75fd2a4d382a780

In case of remove language tool it calls events and there is no REQUEST on upgrade step

Files changed:
M Products/CMFPlone/PloneTool.py

diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index ec66eb7..d01871f 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -637,8 +637,13 @@ def getDefaultPage(self, obj, request=None):
         returned. If a non-folderish item is passed in, return None always.
         """
         if request is None:
-            request = self.REQUEST
-        return utils.getDefaultPage(obj, request)
+            if hasattr(self, 'REQUEST'):
+                request = self.REQUEST
+        if request:
+            return utils.getDefaultPage(obj, request)
+        else:
+            # In case its executed from an event that does not have request
+            return None
 
     security.declarePublic('addPortalMessage')
     def addPortalMessage(self, message, type='info', request=None):


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-25T20:19:56+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/fadaad82bac4c50940807185b31a04aa3b47d6f4

Merge branch 'master' into z3cform-language-controlpanel

Conflicts:
	Products/CMFPlone/controlpanel/bbb/configure.zcml
	Products/CMFPlone/interfaces/__init__.py
	Products/CMFPlone/interfaces/controlpanel.py
	Products/CMFPlone/profiles/dependencies/registry.xml
	Products/CMFPlone/tests/testControlPanel.py

Files changed:
A Products/CMFPlone/controlpanel/bbb/filter.py
A Products/CMFPlone/controlpanel/browser/filter.py
A Products/CMFPlone/controlpanel/browser/filter_controlpanel.pt
A Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_filter.py
M CHANGES.rst
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/controlpanel/bbb/configure.zcml
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/default/controlpanel.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
M Products/CMFPlone/tests/testControlPanel.py
M Products/CMFPlone/tests/testRegistrationTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 23755e0..ea689a4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,17 @@ Changelog
 5.0b1 (unreleased)
 ------------------
 
+- Add tests for configuring encoding of user registration or
+  forgotten password emails.
+  [davidjb]
+
+- Pass email encoding to forgotten password email template.
+  [davidjb]
+
+- Pass mail ``Content-Type`` to mailhost when sending forgotten password
+  emails.
+  [davidjb]
+
 - Move security control panel to CMFPlone. Fixes #216.
   [jcerjak, timo]
 
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index d2044a3..ec1c8f2 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -370,10 +370,12 @@ def mailPassword(self, login, REQUEST, immediate=False):
         subject = message_obj['Subject']
         m_to = message_obj['To']
         m_from = message_obj['From']
+        msg_type = message_obj.get('Content-Type', 'text/plain')
         host = getToolByName(self, 'MailHost')
         try:
             host.send(mail_text, m_to, m_from, subject=subject,
-                      charset=encoding, immediate=immediate)
+                      charset=encoding, immediate=immediate,
+                      msg_type=msg_type)
         except SMTPRecipientsRefused:
             # Don't disclose email address on failure
             raise SMTPRecipientsRefused(
@@ -409,10 +411,11 @@ def registeredNotify(self, new_member_id):
         # Rather than have the template try to use the mailhost, we will
         # render the message ourselves and send it from here (where we
         # don't need to worry about 'UseMailHost' permissions).
+        encoding = getUtility(ISiteRoot).getProperty('email_charset', 'utf-8')
         mail_text = self.registered_notify_template(
-            self, self.REQUEST, member=member, reset=reset, email=email)
+            self, self.REQUEST, member=member, reset=reset, email=email,
+            charset=encoding)
 
-        encoding = getUtility(ISiteRoot).getProperty('email_charset', 'utf-8')
         # The mail headers are not properly encoded we need to extract
         # them and let MailHost manage the encoding.
         if isinstance(mail_text, unicode):
diff --git a/Products/CMFPlone/controlpanel/bbb/configure.zcml b/Products/CMFPlone/controlpanel/bbb/configure.zcml
index 638fb18..9d7ff3b 100644
--- a/Products/CMFPlone/controlpanel/bbb/configure.zcml
+++ b/Products/CMFPlone/controlpanel/bbb/configure.zcml
@@ -5,6 +5,7 @@
 
   <adapter factory=".editing.EditingControlPanelAdapter" />
   <adapter factory=".language.LanguageControlPanelAdapter" />
+  <adapter factory=".filter.FilterControlPanelAdapter" />
   <adapter factory=".maintenance.MaintenanceControlPanelAdapter" />
   <adapter factory=".mail.MailControlPanelAdapter" />
   <adapter factory=".navigation.NavigationControlPanelAdapter" />
diff --git a/Products/CMFPlone/controlpanel/bbb/filter.py b/Products/CMFPlone/controlpanel/bbb/filter.py
new file mode 100644
index 0000000..feffb40
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/bbb/filter.py
@@ -0,0 +1,75 @@
+from Products.CMFPlone.interfaces import IFilterSchema
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+from plone.registry.interfaces import IRegistry
+from zope.component import adapts
+from zope.component import getUtility
+from zope.interface import implements
+
+
+class FilterControlPanelAdapter(object):
+
+    adapts(IPloneSiteRoot)
+    implements(IFilterSchema)
+
+    def __init__(self, context):
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(IFilterSchema, prefix='plone')
+
+    def get_disable_filtering(self):
+        return self.settings.disable_filtering
+
+    def set_disable_filtering(self, value):
+        self.settings.disable_filtering = value
+
+    def get_nasty_tags(self):
+        return self.settings.nasty_tags
+
+    def set_nasty_tags(self, value):
+        self.settings.nasty_tags = value
+
+    def get_stripped_tags(self):
+        return self.settings.stripped_tags
+
+    def set_stripped_tags(self, value):
+        self.settings.stripped_tags = value
+
+    def get_custom_tags(self):
+        return self.settings.custom_tags
+
+    def set_custom_tags(self, value):
+        self.settings.custom_tags = value
+
+    def get_stripped_attributes(self):
+        return self.settings.stripped_attributes
+
+    def set_stripped_attributes(self, value):
+        self.settings.stripped_attributes = value
+
+    def get_stripped_combinations(self):
+        return self.settings.stripped_combinations
+
+    def set_stripped_combinations(self, value):
+        self.settings.stripped_combinations = value
+
+    def get_style_whitelist(self):
+        return self.settings.style_whitelist
+
+    def set_style_whitelist(self, value):
+        self.settings.style_whitelist = value
+
+    def get_class_blacklist(self):
+        return self.settings.class_blacklist
+
+    def set_class_blacklist(self, value):
+        self.settings.class_blacklist = value
+
+    class_blacklist = property(get_class_blacklist, set_class_blacklist)
+    style_whitelist = property(get_style_whitelist, set_style_whitelist)
+    stripped_combinations = property(get_stripped_combinations,
+                                     set_stripped_combinations)
+    stripped_attributes = property(get_stripped_attributes,
+                                   set_stripped_attributes)
+    custom_tags = property(get_custom_tags, set_custom_tags)
+    stripped_tags = property(get_stripped_tags, set_stripped_tags)
+    nasty_tags = property(get_nasty_tags, set_nasty_tags)
+    disable_filtering = property(get_disable_filtering, set_disable_filtering)
diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml
index c4acfbc..3093e43 100644
--- a/Products/CMFPlone/controlpanel/browser/configure.zcml
+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml
@@ -25,6 +25,14 @@
     permission="plone.app.controlpanel.Editing"
     />
 
+  <!-- Filter Control Panel -->
+  <browser:page
+    name="filter-controlpanel"
+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+    class=".filter.FilterControlPanelView"
+    permission="plone.app.controlpanel.Filtering"
+    />
+
   <!-- TinyMCE Control Panel -->
   <browser:page
     name="tinymce-controlpanel"
diff --git a/Products/CMFPlone/controlpanel/browser/filter.py b/Products/CMFPlone/controlpanel/browser/filter.py
new file mode 100644
index 0000000..46dbdb7
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/browser/filter.py
@@ -0,0 +1,100 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _  # NOQA
+from Products.CMFPlone.interfaces import IFilterSchema
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
+from plone.autoform.form import AutoExtensibleForm
+from plone.z3cform import layout
+from z3c.form import button
+from z3c.form import form
+
+
+class FilterControlPanel(AutoExtensibleForm, form.EditForm):
+    id = "FilterControlPanel"
+    label = _(u"Filter settings")
+    description = _("Filter settings.")
+    schema = IFilterSchema
+    form_name = _(u"Filter Settings")
+    control_panel_view = "filter-controlpanel"
+
+    def _settransform(self, **kwargs):
+        # Cannot pass a dict to set transform parameters, it has
+        # to be separate keys and values
+        # Also the transform requires all dictionary values to be set
+        # at the same time: other values may be present but are not
+        # required.
+        safe_html = getattr(
+            getToolByName(self.context, 'portal_transforms'),
+            'safe_html',
+            None)
+        for k in ('valid_tags', 'nasty_tags'):
+            if k not in kwargs:
+                kwargs[k] = safe_html.get_parameter_value(k)
+
+        for k in list(kwargs):
+            if isinstance(kwargs[k], dict):
+                v = kwargs[k]
+                kwargs[k + '_key'] = v.keys()
+                kwargs[k + '_value'] = [str(s) for s in v.values()]
+                del kwargs[k]
+        safe_html.set_parameters(**kwargs)
+        safe_html._p_changed = True
+        safe_html.reload()
+
+    def updateActions(self):  # NOQA
+        """Have to override this because we only have Save, not Cancel
+        """
+        super(FilterControlPanel, self).updateActions()
+        self.actions['save'].addClass("context")
+
+    @button.buttonAndHandler(_(u"Save"), name='save')
+    def handleSave(self, action):  # NOQA
+        data, errors = self.extractData()
+        # Save in portal tools
+        safe_html = getattr(
+            getToolByName(self.context, 'portal_transforms'),
+            'safe_html',
+            None)
+
+        nasty_tags = data['nasty_tags']
+        if sorted(nasty_tags) != \
+                sorted(safe_html._config['nasty_tags'].keys()):
+            values = dict.fromkeys(nasty_tags, 1)
+            valid = safe_html.get_parameter_value('valid_tags')
+            for value in values:
+                if value in valid:
+                    del valid[value]
+            self._settransform(nasty_tags=values, valid_tags=valid)
+
+        disable_filtering = int(data['disable_filtering'])
+        if disable_filtering != safe_html._config['disable_transform']:
+            safe_html._config['disable_transform'] = disable_filtering
+            safe_html._p_changed = True
+            safe_html.reload()
+
+        stripped_combinations = data['stripped_combinations']
+        if stripped_combinations != safe_html._config['stripped_combinations']:
+            safe_html._config['stripped_combinations'] = stripped_combinations
+            safe_html._p_changed = True
+            safe_html.reload()
+
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        self.applyChanges(data)
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes saved."),
+            "info")
+        self.request.response.redirect(self.request.getURL())
+
+
+class ControlPanelFormWrapper(layout.FormWrapper):
+    """Use this form as the plone.z3cform layout wrapper to get the control
+    panel layout.
+    """
+    index = ViewPageTemplateFile('filter_controlpanel.pt')
+
+
+FilterControlPanelView = layout.wrap_form(
+    FilterControlPanel, ControlPanelFormWrapper)
diff --git a/Products/CMFPlone/controlpanel/browser/filter_controlpanel.pt b/Products/CMFPlone/controlpanel/browser/filter_controlpanel.pt
new file mode 100644
index 0000000..f802aeb
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/browser/filter_controlpanel.pt
@@ -0,0 +1,33 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      xmlns:tal="http://xml.zope.org/namespaces/tal"
+      xmlns:metal="http://xml.zope.org/namespaces/metal"
+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+      lang="en"
+      metal:use-macro="here/prefs_main_template/macros/master"
+      i18n:domain="plone">
+
+<body>
+
+<div metal:fill-slot="prefs_configlet_main">
+
+  <a href=""
+     id="setup-link"
+     tal:attributes="href string:$portal_url/plone_control_panel"
+     i18n:translate="">
+      Site Setup
+  </a> &rsaquo;
+
+  <h1 class="documentFirstHeading" tal:content="view/label">View Title</h1>
+
+  <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+    Portal status message
+  </div>
+
+  <div id="layout-contents">
+    <span tal:replace="structure view/contents" />
+  </div>
+
+</div>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py
new file mode 100644
index 0000000..4516657
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py
@@ -0,0 +1,114 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone.interfaces import IFilterSchema
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import setRoles
+from plone.registry.interfaces import IRegistry
+from zope.component import getAdapter
+from zope.component import getUtility
+import unittest
+
+
+class FilterControlPanelAdapterTest(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(IFilterSchema, prefix="plone")
+
+    def test_adapter_lookup(self):
+        self.assertTrue(getAdapter(self.portal, IFilterSchema))
+
+    def test_get_nasty_tags(self):
+        self.settings.nasty_tags = [u'foo', u'bar']
+        self.assertEquals(
+            getAdapter(self.portal, IFilterSchema).nasty_tags,
+            [u'foo', u'bar']
+        )
+
+    def test_set_nasty_tags(self):
+        getAdapter(self.portal, IFilterSchema).nasty_tags = [u'foo', u'bar']
+        self.assertEquals(
+            self.settings.nasty_tags,
+            [u'foo', u'bar']
+        )
+
+    def test_get_stripped_tags(self):
+        self.settings.stripped_tags = [u'foo', u'bar']
+        self.assertEquals(
+            getAdapter(self.portal, IFilterSchema).stripped_tags,
+            [u'foo', u'bar']
+        )
+
+    def test_set_stripped_tags(self):
+        getAdapter(self.portal, IFilterSchema).stripped_tags = [u'foo', u'bar']
+        self.assertEquals(
+            self.settings.stripped_tags,
+            [u'foo', u'bar']
+        )
+
+    def test_get_custom_tags(self):
+        self.settings.custom_tags = [u'foo', u'bar']
+        self.assertEquals(
+            getAdapter(self.portal, IFilterSchema).custom_tags,
+            [u'foo', u'bar']
+        )
+
+    def test_set_custom_tags(self):
+        getAdapter(self.portal, IFilterSchema).custom_tags = [u'foo', u'bar']
+        self.assertEquals(
+            self.settings.custom_tags,
+            [u'foo', u'bar']
+        )
+
+    def test_get_stripped_attributes(self):
+        self.settings.stripped_attributes = [u'foo', u'bar']
+        self.assertEquals(
+            getAdapter(self.portal, IFilterSchema).stripped_attributes,
+            [u'foo', u'bar']
+        )
+
+    def test_set_stripped_attributes(self):
+        getAdapter(self.portal, IFilterSchema).stripped_attributes = [
+            u'foo', u'bar'
+        ]
+        self.assertEquals(
+            self.settings.stripped_attributes,
+            [u'foo', u'bar']
+        )
+
+    def test_get_style_whitelist(self):
+        self.settings.style_whitelist = [u'foo', u'bar']
+        self.assertEquals(
+            getAdapter(self.portal, IFilterSchema).style_whitelist,
+            [u'foo', u'bar']
+        )
+
+    def test_set_style_whitelist(self):
+        getAdapter(self.portal, IFilterSchema).style_whitelist = [
+            u'foo', u'bar'
+        ]
+        self.assertEquals(
+            self.settings.style_whitelist,
+            [u'foo', u'bar']
+        )
+
+    def test_get_class_blacklist(self):
+        self.settings.class_blacklist = [u'foo', u'bar']
+        self.assertEquals(
+            getAdapter(self.portal, IFilterSchema).class_blacklist,
+            [u'foo', u'bar']
+        )
+
+    def test_set_class_blacklist(self):
+        getAdapter(self.portal, IFilterSchema).class_blacklist = [
+            u'foo', u'bar'
+        ]
+        self.assertEquals(
+            self.settings.class_blacklist,
+            [u'foo', u'bar']
+        )
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py
new file mode 100644
index 0000000..b3a0474
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py
@@ -0,0 +1,130 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+# from Products.CMFPlone.interfaces import IFilterSchema
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from Products.PortalTransforms.data import datastream
+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+from plone.testing.z2 import Browser
+from zope.component import getMultiAdapter
+import unittest2 as unittest
+
+
+class FilterControlPanelFunctionalTest(unittest.TestCase):
+    """Test that changes in the site control panel are actually
+    stored in the registry.
+    """
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        self.portal_url = self.portal.absolute_url()
+        self.browser = Browser(self.app)
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+        )
+        self.safe_html = getattr(
+            getToolByName(self.portal, 'portal_transforms'),
+            'safe_html',
+            None)
+
+    def test_filter_control_panel_link(self):
+        self.browser.open(
+            "%s/plone_control_panel" % self.portal_url)
+        self.browser.getLink('Site').click()
+
+    def test_filter_control_panel_backlink(self):
+        self.browser.open(
+            "%s/@@filter-controlpanel" % self.portal_url)
+        self.assertTrue("Plone Configuration" in self.browser.contents)
+
+    def test_filter_control_panel_sidebar(self):
+        self.browser.open(
+            "%s/@@filter-controlpanel" % self.portal_url)
+        self.browser.getLink('Site Setup').click()
+        self.assertEqual(
+            self.browser.url,
+            'http://nohost/plone/@@overview-controlpanel')
+
+    def test_filter_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="filter-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_disable_filtering(self):
+        self.browser.open(
+            "%s/@@filter-controlpanel" % self.portal_url)
+        self.browser.getControl(
+            name='form.widgets.disable_filtering:list').value = "selected"
+        self.browser.getControl('Save').click()
+
+        # test that the transform is disabled
+        self.assertEqual(
+            self.safe_html._config['disable_transform'],
+            1)
+
+        # anything passes
+        nasty_html = '<script></script>'
+        ds = datastream('dummy_name')
+        self.assertEqual(
+            nasty_html,
+            str(self.safe_html.convert(nasty_html, ds))
+        )
+
+    def test_nasty_tags(self):
+        self.browser.open(
+            "%s/@@filter-controlpanel" % self.portal_url)
+        self.browser.getControl(
+            name='form.widgets.nasty_tags'
+        ).value = 'div\r\na'
+        self.browser.getControl('Save').click()
+
+        # test that <a> is filtered
+        self.assertFalse(self.safe_html._config['disable_transform'])
+        good_html = '<a href="http://example.com">harmless link</a>'
+        ds = datastream('dummy_name')
+        self.assertEqual(
+            str(self.safe_html.convert(good_html, ds)),
+            ''
+        )
+
+    @unittest.skip('This functionality was broken with formlib already. Needs fix.')  # noqa
+    def test_stripped_combinations(self):
+        # test a combination that isn't normally filtered
+        self.assertFalse(self.safe_html._config['disable_transform'])
+        html = '<p class="wow">lala</p>'
+        ds = datastream('dummy_name')
+        self.assertEqual(
+            str(self.safe_html.convert(html, ds)),
+            html)
+
+        # we can set stripped combinations
+        self.browser.open(
+            "%s/@@filter-controlpanel" % self.portal_url)
+        self.browser.getControl(
+            name='form.widgets.stripped_combinations.buttons.add').click()
+        self.browser.getControl(
+            name='form.widgets.stripped_combinations.key.0'
+        ).value = 'mytag1 p'
+        self.browser.getControl(
+            name='form.widgets.stripped_combinations.0'
+        ).value = 'myattr1 class'
+        self.browser.getControl('Save').click()
+
+        # stripped combinations are stored on the transform
+        self.assertIn(
+            'mytag1 p',
+            self.safe_html._config['stripped_combinations'])
+        self.assertEqual(
+            'myattr1 class',
+            self.safe_html._config['stripped_combinations']['mytag1 p'])
+
+        # test that combination is now filtered
+        self.assertEqual(
+            str(self.safe_html.convert(html, ds)),
+            '<p>lala</p>')
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
new file mode 100644
index 0000000..d1ef27a
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
@@ -0,0 +1,362 @@
+# -*- coding: utf-8 -*-
+"""This test has been moved over to CMFPlone from plone.app.controlpanel.
+   It has been cleaned up a bit. Though, it still is kind of messy because it
+   comes with its own test fixture. Would be nice to refactor that to use the
+   CMFPlone fixture at some point.
+"""
+from cStringIO import StringIO
+from urllib import urlencode
+from plone.protect.authenticator import createToken
+
+import re
+import transaction
+
+from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
+from plone.app.testing.bbb import PloneTestCaseFixture
+from plone.app import testing
+from Products.CMFCore.utils import getToolByName
+
+
+class ControlPanelFixture(PloneTestCaseFixture):
+
+    def setUpPloneSite(self, portal):
+        super(ControlPanelFixture, self).setUpPloneSite(portal)
+        portal.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
+
+
+CP_FIXTURE = ControlPanelFixture()
+CP_FUNCTIONAL_LAYER = testing.FunctionalTesting(
+    bases=(CP_FIXTURE,), name='ControlPanel:Functional')
+
+
+class UserGroupsControlPanelTestCase(FunctionalTestCase):
+    """user/groups-specific test case"""
+
+    layer = CP_FUNCTIONAL_LAYER
+
+    def afterSetUp(self):
+        super(UserGroupsControlPanelTestCase, self).afterSetUp()
+        members = [
+            {
+              'username': 'DIispfuF',
+              'fullname': 'Kevin Hughes',
+              'email': 'DIispfuF@example.com'
+            },
+        ]
+        regtool = getToolByName(self.portal, 'portal_registration')
+        for member in members:
+            regtool.addMember(
+                member['username'],
+                'somepassword',
+                properties=member
+            )
+        transaction.commit()
+
+
+class TestSiteAdministratorRoleFunctional(UserGroupsControlPanelTestCase):
+
+    def _getauth(self, userName):
+        self.login(userName)
+        return createToken()
+
+    def _simplify_white_space(self, text):
+        """For easier testing we replace all white space with one space.
+
+        And we remove white space around '<' and '>'.
+
+        So this:
+
+          <p
+              id="foo"> Bar
+          </p>
+
+        becomes this:
+
+          <p id="foo">Bar</p>
+        """
+        text = re.sub('\s*<\s*', '<', text)
+        text = re.sub('\s*>\s*', '>', text)
+        text = re.sub('\s+', ' ', text)
+        return text
+
+    def afterSetUp(self):
+        super(TestSiteAdministratorRoleFunctional, self).afterSetUp()
+
+        # add a user with the Site Administrator role
+        self.portal.portal_membership.addMember(
+            'siteadmin',
+            'secret',
+            ['Site Administrator'],
+            []
+        )
+
+        self.manager_token = self._getauth('root')
+        self.siteadmin_token = self._getauth('siteadmin')
+
+        self.normal_user = 'DIispfuF'
+
+    def testControlPanelOverview(self):
+        # make sure we can view the Site Setup page,
+        # at both old and new URLs
+        res = self.publish('/plone/plone_control_panel', 'siteadmin:secret')
+        self.assertEqual(200, res.status)
+        res = self.publish(
+            '/plone/@@overview-controlpanel', 'siteadmin:secret'
+        )
+        self.assertEqual(200, res.status)
+
+    def testUserManagerRoleCheckboxIsDisabledForNonManagers(self):
+        res = self.publish(
+            '/plone/@@usergroup-userprefs', basic='siteadmin:secret'
+        )
+        contents = res.getOutput()
+        self.assertTrue('<input type="checkbox" class="noborder" '
+                        'name="users.roles:list:records" value="Manager" '
+                        'disabled="disabled" />' in contents)
+
+    def testManagerCanDelegateManagerRoleForUsers(self):
+        # a user with the Manager role can grant the Manager role
+        form = {
+            '_authenticator': self.manager_token,
+            'users.id:records': self.normal_user,
+            'users.roles:list:records': 'Manager',
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish('/plone/@@usergroup-userprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='root:secret')
+        self.assertEqual(200, res.status)
+        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
+        self.assertEqual(['Manager', 'Authenticated'], roles)
+
+    def testNonManagersCannotDelegateManagerRoleForUsers(self):
+        # a user without the Manager role cannot delegate the Manager role
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'users.id:records': self.normal_user,
+            'users.roles:list:records': 'Manager',
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish('/plone/@@usergroup-userprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertEqual(403, res.status)
+        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
+        self.assertEqual(['Member', 'Authenticated'], roles)
+
+    def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):
+        roles = self.portal.acl_users.getUserById('root').getRoles()
+        self.assertEqual(['Manager', 'Authenticated'], roles)
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'users.id:records': 'root',
+            'users.roles:list:records': ('Member', 'Manager'),
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form, doseq=True))
+        res = self.publish('/plone/@@usergroup-userprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertEqual(200, res.status)
+        roles = self.portal.acl_users.getUserById('root').getRoles()
+        self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
+
+    def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):
+        res = self.publish(
+            '/plone/@@usergroup-groupprefs',
+            basic='siteadmin:secret'
+        )
+        contents = self._simplify_white_space(res.getOutput())
+        self.assertTrue('<input type="checkbox" class="noborder" '
+                        'name="group_Reviewers:list" value="Manager" '
+                        'disabled="disabled" />' in contents)
+
+    def testManagerCanDelegateManagerRoleForGroups(self):
+        # a user with the Manager role can grant the Manager role
+        form = {
+            '_authenticator': self.manager_token,
+            'group_Reviewers:list': ('', 'Manager'),
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form, doseq=True))
+        res = self.publish('/plone/@@usergroup-groupprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='root:secret')
+        self.assertEqual(200, res.status)
+        roles = self.portal.acl_users.getGroupById('Reviewers').getRoles()
+        self.assertEqual(['Manager', 'Authenticated'], roles)
+
+    def testNonManagersCannotDelegateManagerRoleForGroups(self):
+        # a user without the Manager role cannot delegate the Manager role
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'group_Reviewers:list': ('', 'Manager'),
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form, doseq=True))
+        res = self.publish('/plone/@@usergroup-groupprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertEqual(403, res.status)
+        roles = self.portal.acl_users.getGroupById('Reviewers').getRoles()
+        self.assertEqual(['Reviewer', 'Authenticated'], roles)
+
+    def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):
+        roles = self.portal.acl_users.getUserById('root').getRoles()
+        self.assertEqual(['Manager', 'Authenticated'], roles)
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'group_Administrators:list': ('', 'Member', 'Manager'),
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form, doseq=True))
+        res = self.publish('/plone/@@usergroup-groupprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertEqual(200, res.status)
+        roles = self.portal.acl_users.getGroupById('Administrators').getRoles()
+        self.assertEqual(['Member', 'Manager', 'Authenticated'], roles)
+
+    def test_usergroup_usermembership_blocks_escalation(self):
+        # groups granting the Manager role shouldn't show as a valid option to
+        # add
+        res = self.publish(
+            '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
+            basic='siteadmin:secret'
+        )
+        contents = self._simplify_white_space(res.getOutput())
+        self.assertTrue(
+            '<input type="checkbox" class="noborder" name="add:list" '
+            'value="Administrators" disabled="disabled" />' in contents
+        )
+
+        # and should not be addable
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'add:list': 'Administrators',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish(
+            '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
+            request_method='POST', stdin=post_data,
+            basic='siteadmin:secret'
+        )
+        self.assertEqual(403, res.status)
+        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
+        self.assertEqual(['Member', 'Authenticated'], roles)
+
+    def test_usergroup_groupmembership_blocks_escalation(self):
+        # should not show section to add users for groups granting the Manager
+        # role
+        res = self.publish(
+            '/plone/@@usergroup-groupmembership?groupname=Administrators',
+            basic='siteadmin:secret'
+        )
+        contents = self._simplify_white_space(res.getOutput())
+        self.assertFalse('Search for new group members' in contents)
+
+        # and should not be addable if we try to force it
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'add:list': self.normal_user,
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish(
+            '/plone/@@usergroup-groupmembership?groupname=Administrators',
+            request_method='POST', stdin=post_data,
+            basic='siteadmin:secret'
+        )
+        self.assertEqual(403, res.status)
+        roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()
+        self.assertEqual(['Member', 'Authenticated'], roles)
+
+    def test_user_registration_form_blocks_escalation(self):
+        # groups granting the Manager role should not be available for
+        # selection
+        res = self.publish('/plone/@@new-user', basic='siteadmin:secret')
+        contents = self._simplify_white_space(res.getOutput())
+        self.assertFalse(
+            '<input class="label checkboxType" id="form.groups.0" '
+            'name="form.groups" type="checkbox" value="Administrators '
+            '(Administrators)" />' in contents
+        )
+
+        # and should not be addable if we try to force it
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'form.widgets.username': 'newuser',
+            'form.widgets.email': 'newuser@example.com',
+            'form.widgets.password': 'secret',
+            'form.widgets.password_ctl': 'secret',
+            'form.widgets.groups:list': 'Administrators',
+            'form.widgets.groups-empty-marker': '1',
+            'form.buttons.register': 'Register',
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish('/plone/@@new-user',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertNotEqual(200, res.status)
+        self.assertEqual(None, self.portal.acl_users.getUserById('newuser'))
+
+    def test_users_overview_blocks_deleting_managers(self):
+        # a user without the Manager role cannot delete a user with the
+        # Manager role
+        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
+        contents = self._simplify_white_space(res.getOutput())
+        self.assertTrue('<input type="checkbox" class="noborder notify" '
+                        'name="delete:list" value="root" disabled="disabled" />'
+                        in contents)
+
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'users.id:records': 'root',
+            'delete:list': 'root',
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish('/plone/@@usergroup-userprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertEqual(403, res.status)
+        user = self.portal.acl_users.getUserById('root')
+        self.assertTrue(user is not None)
+
+    def test_groups_overview_blocks_deleting_managers(self):
+        # a user without the Manager role cannot delete a group with the
+        # Manager role
+        res = self.publish(
+            '/plone/@@usergroup-groupprefs',
+            basic='siteadmin:secret'
+        )
+        contents = self._simplify_white_space(res.getOutput())
+        self.assertTrue(
+            '<input type="checkbox" class="noborder notify" '
+            'name="delete:list" value="Administrators" disabled="disabled" />'
+            in contents
+        )
+
+        form = {
+            '_authenticator': self.siteadmin_token,
+            'delete:list': 'Administrators',
+            'form.button.Modify': 'Apply Changes',
+            'form.submitted': 1,
+            }
+        post_data = StringIO(urlencode(form))
+        res = self.publish('/plone/@@usergroup-groupprefs',
+                           request_method='POST', stdin=post_data,
+                           basic='siteadmin:secret')
+        self.assertEqual(403, res.status)
+        group = self.portal.acl_users.getGroupById('Administrators')
+        self.assertTrue(group is not None)
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_filter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_filter.py
new file mode 100644
index 0000000..a0c48d6
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_filter.py
@@ -0,0 +1,60 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IFilterSchema
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from plone.registry.interfaces import IRegistry
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+import unittest2 as unittest
+
+
+class FilterRegistryIntegrationTest(unittest.TestCase):
+    """Test that the filter settings are stored as plone.app.registry
+    settings.
+    """
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):  # NOQA
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(
+            IFilterSchema, prefix="plone")
+
+    def test_filter_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="filter-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_filter_in_controlpanel(self):
+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
+        self.assertTrue('FilterSettings' in [
+            a.getAction(self)['id']
+            for a in self.controlpanel.listActions()
+        ])
+
+    def test_disable_filtering_setting(self):
+        self.assertTrue(hasattr(self.settings, 'disable_filtering'))
+
+    def test_nasty_tags_setting(self):
+        self.assertTrue(hasattr(self.settings, 'nasty_tags'))
+
+    def test_stripped_tags_setting(self):
+        self.assertTrue(hasattr(self.settings, 'stripped_tags'))
+
+    def test_custom_tags_setting(self):
+        self.assertTrue(hasattr(self.settings, 'custom_tags'))
+
+    def test_stripped_attributes_setting(self):
+        self.assertTrue(hasattr(self.settings, 'stripped_attributes'))
+
+    # def test_stripped_combinations_setting(self):
+    #     self.assertTrue(hasattr(self.settings, 'stripped_combinations'))
+
+    def test_style_whitelist_setting(self):
+        self.assertTrue(hasattr(self.settings, 'style_whitelist'))
+
+    def test_class_blacklist_setting(self):
+        self.assertTrue(hasattr(self.settings, 'class_blacklist'))
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index a1bdbfd..6b179aa 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -9,6 +9,7 @@
 from controlpanel import IDateAndTimeSchema
 from controlpanel import IEditingSchema
 from controlpanel import ILanguageSchema
+from controlpanel import IFilterSchema
 from controlpanel import IMaintenanceSchema
 from controlpanel import IMailSchema
 from controlpanel import IMarkupSchema
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index e9cb708..900caec 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
 from plone.supermodel import model
-from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone import PloneMessageFactory as _  # NOQA
 from Products.CMFPlone.utils import validate_json
 from basetool import IPloneBaseTool
 from plone.locking.interfaces import ILockSettings
 from zope import schema
-from zope.interface import Interface
+from zope.interface import Interface, implements
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
@@ -13,24 +13,24 @@
 class IControlPanel(IPloneBaseTool):
     """ Interface for the ControlPanel """
 
-    def registerConfiglet(id, name, action, condition='', permission='',
+    def registerConfiglet(id, name, action, condition='', permission='',  # NOQA
                           category='Plone', visible=1, appId=None,
                           imageUrl=None, description='', REQUEST=None):
         """ Registration of a Configlet """
 
-    def unregisterConfiglet(id):
+    def unregisterConfiglet(id):  # NOQA
         """ unregister Configlet """
 
-    def unregisterApplication(appId):
+    def unregisterApplication(appId):  # NOQA
         """ unregister Application with all configlets """
 
-    def getGroupIds():
+    def getGroupIds():  # NOQA
         """ list of the group ids """
 
-    def getGroups():
+    def getGroups():  # NOQA
         """ list of groups as dicts with id and title """
 
-    def enumConfiglets(group=None):
+    def enumConfiglets(group=None):  # NOQA
         """ lists the Configlets of a group, returns them as dicts by
             calling .getAction() on each of them """
 
@@ -271,12 +271,104 @@ class ILanguageSchema(Interface):
         )
 
 
+class ITagAttrPair(Interface):
+    tags = schema.TextLine(title=u"tags")
+    attributes = schema.TextLine(title=u"attributes")
+
+
+class TagAttrPair(object):
+
+    implements(ITagAttrPair)
+
+    def __init__(self, tags='', attributes=''):
+        self.tags = tags
+        self.attributes = attributes
+
+
+class IFilterSchema(Interface):
+    """Combined schema for the adapter lookup.
+    """
+
+    # class IFilterTagsSchema(Interface):
+
+    disable_filtering = schema.Bool(
+        title=_(u'Disable html filtering'),
+        description=_(u'Warning, disabling can be potentially dangereous. '
+                      u'Only disable if you know what you are doing.'),
+        default=False,
+        required=False)
+
+    nasty_tags = schema.List(
+        title=_(u'Nasty tags'),
+        description=_(u"These tags, and their content are completely blocked "
+                      "when a page is saved or rendered."),
+        default=[u'applet', u'embed', u'object', u'script'],
+        value_type=schema.TextLine(),
+        required=False)
+
+    stripped_tags = schema.List(
+        title=_(u'Stripped tags'),
+        description=_(u"These tags are stripped when saving or rendering, "
+                      "but any content is preserved."),
+        default=[u'font', ],
+        value_type=schema.TextLine(),
+        required=False)
+
+    custom_tags = schema.List(
+        title=_(u'Custom tags'),
+        description=_(u"Add tag names here for tags which are not part of "
+                      "XHTML but which should be permitted."),
+        default=[],
+        value_type=schema.TextLine(),
+        required=False)
+
+    # class IFilterAttributesSchema(Interface):
+
+    stripped_attributes = schema.List(
+        title=_(u'Stripped attributes'),
+        description=_(u"These attributes are stripped from any tag when "
+                      "saving."),
+        default=(u'dir lang valign halign border frame rules cellspacing '
+                 'cellpadding bgcolor').split(),
+        value_type=schema.TextLine(),
+        required=False)
+
+    stripped_combinations = schema.Dict(
+        title=_(u'Stripped combinations'),
+        description=_(u"These attributes are stripped from those tags when "
+                      "saving."),
+        key_type=schema.TextLine(title=u"tags"),
+        value_type=schema.TextLine(title=u"attributes"),
+        default={},
+        # XXX replace with value adapter
+        # default={'table th td': 'width height', 'other tags': 'other attrs'}
+        required=False)
+
+    # class IFilterEditorSchema(Interface):
+
+    style_whitelist = schema.List(
+        title=_(u'Permitted properties'),
+        description=_(
+            u'These CSS properties are allowed in style attributes.'),
+        default=u'text-align list-style-type float text-decoration'.split(),
+        value_type=schema.TextLine(),
+        required=False)
+
+    class_blacklist = schema.List(
+        title=_(u'Filtered classes'),
+        description=_(u'These class names are not allowed in class '
+                      'attributes.'),
+        default=[],
+        value_type=schema.TextLine(),
+        required=False)
+
+
 class ITinyMCEPatternSchema(Interface):
 
     relatedItems = schema.Text(
         title=_(u"Related Items vocabulary url"),
-        description=u"json:{'vocabularyUrl': '%(portal_url)s/@@getVocabulary?name=plone.app.vocabularies.Catalog'}",
-        default=u'json:{"vocabularyUrl": "%(portal_url)s/@@getVocabulary?name=plone.app.vocabularies.Catalog"}',
+        description=u"json:{'vocabularyUrl': '%(portal_url)s/@@getVocabulary?name=plone.app.vocabularies.Catalog'}",  # NOQA
+        default=u'json:{"vocabularyUrl": "%(portal_url)s/@@getVocabulary?name=plone.app.vocabularies.Catalog"}',  # NOQA
         required=True)
 
     rel_upload_path = schema.Text(
@@ -304,7 +396,7 @@ class ITinyMCEPatternSchema(Interface):
 
     content_css = schema.Text(
         title=_(u"Content CSS URL"),
-        description=u'++plone++static/components/tinymce/skins/lightgray/content.min.css')
+        description=u'++plone++static/components/tinymce/skins/lightgray/content.min.css')  # NOQA
 
 
 class ITinyMCELayoutSchema(Interface):
@@ -312,45 +404,61 @@ class ITinyMCELayoutSchema(Interface):
 
     resizing = schema.Bool(
         title=_(u"Enable resizing the editor window."),
-        description=_(u"This option gives you the ability to enable/disable resizing the editor window. If the editor width is set to a percentage only vertical resizing is enabled."),
+        description=_(u"This option gives you the ability to enable/disable "
+                      "resizing the editor window. "
+                      "If the editor width is set to a percentage "
+                      "only vertical resizing is enabled."),
         default=True,
         required=False)
 
     autoresize = schema.Bool(
         title=_(u"Enable auto resizing of the editor window."),
-        description=_(u"This option gives you the ability to enable/disable auto resizing the editor window depending on the content."),
+        description=_(u"This option gives you the ability to enable/disable "
+                      "auto resizing the editor window depending "
+                      "on the content."),
         default=False,
         required=False)
 
     # TODO: add validation to assert % and px in the value
     editor_width = schema.TextLine(
         title=_(u"Editor width"),
-        description=_(u"This option gives you the ability to specify the width of the editor (like 100% or 400px)."),
+        description=_(u"This option gives you the ability to specify the "
+                      "width of the editor (like 100% or 400px)."),
         default=u'100%',
         required=False)
 
     # TODO: add validation to assert % and px in the value
     editor_height = schema.TextLine(
         title=_(u"Editor height"),
-        description=_(u"This option gives you the ability to specify the height of the editor in pixels. If auto resize is enabled this value is used as minimum height."),
+        description=_(u"This option gives you the ability to specify the "
+                      "height of the editor in pixels. "
+                      "If auto resize is enabled this value is used "
+                      "as minimum height."),
         default=u'400px',
         required=False)
 
     contextmenu = schema.Bool(
         title=_(u"Enable contextmenu"),
-        description=_(u"This option gives you the ability to enable/disable the use of the contextmenu."),
+        description=_(u"This option gives you the ability to enable/disable "
+                      "the use of the contextmenu."),
         default=True,
         required=False)
 
     content_css = schema.TextLine(
         title=_(u"Choose the CSS used in WYSIWYG Editor Area"),
-        description=_(u"This option enables you to specify a custom CSS file that replaces the theme content CSS. This CSS file is the one used within the editor (the editable area)."),
+        description=_(u"This option enables you to specify a custom CSS file "
+                      "that replaces the theme content CSS. "
+                      "This CSS file is the one used within the editor "
+                      "(the editable area)."),
         default=u'',
         required=False)
 
     styles = schema.Text(
         title=_(u"Styles"),
-        description=_(u"Enter a list of styles to appear in the style pulldown. Format is title|tag or title|tag|className, one per line."),
+        description=_(u"Enter a list of styles to appear in the style "
+                      "pulldown. "
+                      "Format is title|tag or title|tag|className, "
+                      "one per line."),
         default=u"Heading|h2|\n"
                 u"Subheading|h3|\n"
                 u"Literal|pre|\n"
@@ -377,17 +485,20 @@ class ITinyMCELayoutSchema(Interface):
 
     formats = schema.Text(
         title=_(u"Formats"),
-        description=_(u"Enter a JSON-formatted style format configuration. "
-                      u"A format is for example the style that get applied when "
-                      u"you press the bold button inside the editor. "
-                      u"See http://www.tinymce.com/wiki.php/Configuration:formats"),
+        description=_(
+            u"Enter a JSON-formatted style format configuration. "
+            u"A format is for example the style that get applied when "
+            u"you press the bold button inside the editor. "
+            u"See http://www.tinymce.com/wiki.php/Configuration:formats"),
         constraint=validate_json,
         required=False,
     )
 
     tablestyles = schema.Text(
         title=_(u"Table styles"),
-        description=_(u"Enter a list of styles to appear in the table style pulldown. Format is title|class, one per line."),
+        description=_(
+            u"Enter a list of styles to appear in the table style pulldown. "
+            "Format is title|class, one per line."),
         default=u"Subdued grid|plain\n"
                 u"Invisible grid|invisible\n"
                 u"Fancy listing|listing",
@@ -399,13 +510,15 @@ class ITinyMCEToolbarSchema(Interface):
 
     toolbar_width = schema.TextLine(
         title=_(u"Toolbar width"),
-        description=_(u"This option gives you the ability to specify the width of the toolbar in pixels."),
+        description=_(u"This option gives you the ability to specify the "
+                      "width of the toolbar in pixels."),
         default=u"440",
         required=False)
 
     toolbar_external = schema.Bool(
         title=_(u"Place toolbar on top of the page"),
-        description=_(u"This option enables the external toolbar which will be placed at the top of the page."),
+        description=_(u"This option enables the external toolbar which will "
+                      "be placed at the top of the page."),
         default=False,
         required=False)
 
@@ -671,7 +784,8 @@ class ITinyMCEToolbarSchema(Interface):
 
     customtoolbarbuttons = schema.Text(
         title=_(u"Custom Toolbar Buttons"),
-        description=_(u"Enter a list of custom toolbar buttons which will be loaded in the editor, one per line."),
+        description=_(u"Enter a list of custom toolbar buttons which will be "
+                      "loaded in the editor, one per line."),
         default=u"",
         required=False)
 
@@ -687,13 +801,13 @@ class ITinyMCELibrariesSchema(Interface):
                       u"settings."),
         missing_value=set(),
         vocabulary=SimpleVocabulary([
-                            SimpleTerm('browser', 'browser',
-                                    _(u"Default browser spellchecker")),
-                            SimpleTerm('iespell', 'iespell',
-                                    _(u"ieSpell (free for personal use)")),
-                            SimpleTerm('AtD', 'AtD',
-                                    _(u"After the deadline (FLOSS)")),
-                            ]),
+            SimpleTerm('browser', 'browser',
+                       _(u"Default browser spellchecker")),
+            SimpleTerm('iespell', 'iespell',
+                       _(u"ieSpell (free for personal use)")),
+            SimpleTerm('AtD', 'AtD',
+                       _(u"After the deadline (FLOSS)")),
+        ]),
         default=u'browser',
         required=False)
 
@@ -701,10 +815,10 @@ class ITinyMCELibrariesSchema(Interface):
         title=_(u"AtD Ignore strings"),
         description=_(
             'label_atd_ignore_strings',
-            default=u"A list of strings which the \"After the Deadline\" " \
-                    u"spellchecker should ignore. " \
-                    u"Note: This option is only applicable when the appropriate " \
-                "spellchecker has been chosen above."),
+            default=u"A list of strings which the \"After the Deadline\" "
+                    u"spellchecker should ignore. "
+                    u"Note: This option is only applicable when the "
+                    u"appropriate spellchecker has been chosen above."),
         default=u"Zope\nPlone\nTinyMCE",
         required=False)
 
@@ -712,12 +826,13 @@ class ITinyMCELibrariesSchema(Interface):
         title=_(u"AtD Error types to show"),
         description=_(
             'help_atderrortypes_to_show',
-            default=u"A list of error types which the " \
-                    u"\"After the Deadline\" spellchecker should check for. " \
-                    u"By default, all the available error type will be listed here."),
-        default=u"Bias Language\nCliches\nComplex Expression\n" \
-                u"Diacritical Marks\nDouble Negatives\n" \
-                u"Hidden Verbs\nJargon Language\nPassive voice\n" \
+            default=u"A list of error types which the "
+                    u"\"After the Deadline\" spellchecker should check for. "
+                    u"By default, all the available error type will be "
+                    u"listed here."),
+        default=u"Bias Language\nCliches\nComplex Expression\n"
+                u"Diacritical Marks\nDouble Negatives\n"
+                u"Hidden Verbs\nJargon Language\nPassive voice\n"
                 u"Phrases to Avoid\nRedundant Expression",
         required=False)
 
@@ -725,10 +840,11 @@ class ITinyMCELibrariesSchema(Interface):
         title=_(u"AtD Service URL"),
         description=_(
             'help_atd_service_url',
-            default=u"The URL of the \"After the Deadline\" grammar and spell " \
-                    u"checking server. The default value is the public server, " \
-                    u"but ideally you should download and install your own and " \
-                    u"specify its address here."),
+            default=u"The URL of the \"After the Deadline\" grammar and spell "
+                    u"checking server. "
+                    u"The default value is the public server, "
+                    u"but ideally you should download and install your own "
+                    u"and specify its address here."),
         required=True,
         default=u"service.afterthedeadline.com",)
 
@@ -738,7 +854,9 @@ class ITinyMCEResourceTypesSchema(Interface):
 
     link_using_uids = schema.Bool(
         title=_(u"Link using UIDs"),
-        description=_(u"Links to objects on this site can use unique object ids so that the links remain valid even if the target object is renamed or moved elsewhere on the site."),
+        description=_(u"Links to objects on this site can use unique object "
+                      "ids so that the links remain valid even if the target "
+                      "object is renamed or moved elsewhere on the site."),
         default=True,
         required=False)
 
@@ -750,13 +868,16 @@ class ITinyMCEResourceTypesSchema(Interface):
 
     rooted = schema.Bool(
         title=_(u"Rooted to current object"),
-        description=_(u"When enabled the user will be rooted to the current object and can't add links and images from other parts of the site."),
+        description=_(u"When enabled the user will be rooted to the current "
+                      "object and can't add links and images from other parts "
+                      "of the site."),
         default=False,
         required=False)
 
     containsobjects = schema.Text(
         title=_(u"Contains Objects"),
-        description=_(u"Enter a list of content types which can contain other objects. Format is one contenttype per line."),
+        description=_(u"Enter a list of content types which can contain other "
+                      "objects. Format is one contenttype per line."),
         default=u"Folder\n"
                 u"Large Plone Folder\n"
                 u"Plone Site",
@@ -764,7 +885,8 @@ class ITinyMCEResourceTypesSchema(Interface):
 
     containsanchors = schema.Text(
         title=_(u"Contains Anchors"),
-        description=_(u"Enter a list of content types which can contain anchors. Format is one contenttype per line."),
+        description=_(u"Enter a list of content types which can contain "
+                      "anchors. Format is one contenttype per line."),
         default=u"Event\n"
                 u"News Item\n"
                 u"Document\n"
@@ -773,12 +895,14 @@ class ITinyMCEResourceTypesSchema(Interface):
 
     linkable = schema.Text(
         title=_(u"Linkable Objects"),
-        description=_(u"Enter a list of content types which can be linked. Format is one contenttype per line."),
+        description=_(u"Enter a list of content types which can be linked. "
+                      "Format is one contenttype per line."),
         required=False)
 
     imageobjects = schema.Text(
         title=_(u"Image Objects"),
-        description=_(u"Enter a list of content types which can be used as images. Format is one contenttype per line."),
+        description=_(u"Enter a list of content types which can be used as "
+                      "images. Format is one contenttype per line."),
         default=u"Image",
         required=False)
 
@@ -802,7 +926,9 @@ class ITinyMCEResourceTypesSchema(Interface):
             SimpleTerm('pagebreak', 'pagebreak', u"pagebreak"),
             SimpleTerm('paste', 'paste', u"paste"),
             SimpleTerm('plonebrowser', 'plonebrowser', u"plonebrowser"),
-            SimpleTerm('ploneinlinestyles', 'ploneinlinestyles', u"ploneinlinestyles"),
+            SimpleTerm(
+                'ploneinlinestyles', 'ploneinlinestyles',
+                u"ploneinlinestyles"),
             SimpleTerm('plonestyle', 'plonestyle', u"plonestyle"),
             SimpleTerm('preview', 'preview', u"preview"),
             SimpleTerm('print', 'print', u"print"),
@@ -823,15 +949,26 @@ class ITinyMCEResourceTypesSchema(Interface):
 
     customplugins = schema.Text(
         title=_(u"Custom Plugins"),
-        description=_(u"Enter a list of custom plugins which will be loaded in the editor. Format is pluginname or pluginname|location, one per line."),
+        description=_(u"Enter a list of custom plugins which will be loaded "
+                      "in the editor. Format is pluginname or "
+                      "pluginname|location, one per line."),
         default=u"plonebrowser",
         required=False)
 
     entity_encoding = schema.Choice(
         title=_(u"Entity encoding"),
-        description=_(u"This option controls how entities/characters get processed. Named: Characters will be converted into named entities based on the entities option. Numeric: Characters will be converted into numeric entities. Raw: All characters will be stored in non-entity form except these XML default entities: amp lt gt quot"),
+        description=_(
+            u"This option controls how entities/characters get processed. "
+            "Named: Characters will be converted into named entities "
+            "based on the entities option. "
+            "Numeric: Characters will be converted into numeric entities. "
+            "Raw: All characters will be stored in non-entity form "
+            "except these XML default entities: amp lt gt quot"),
         missing_value=set(),
-        vocabulary=SimpleVocabulary([SimpleTerm('named', 'named', _(u"Named")), SimpleTerm('numeric', 'numeric', _(u"Numeric")), SimpleTerm('raw', 'raw', _(u"Raw"))]),
+        vocabulary=SimpleVocabulary(
+            [SimpleTerm('named', 'named', _(u"Named")),
+             SimpleTerm('numeric', 'numeric', _(u"Numeric")),
+             SimpleTerm('raw', 'raw', _(u"Raw"))]),
         default=u"raw",
         required=False)
 
@@ -842,7 +979,7 @@ class ITinyMCESchema(
     ITinyMCELibrariesSchema,
     ITinyMCEResourceTypesSchema,
     ITinyMCEPatternSchema
-    ):
+):
     """TinyMCE Schema"""
 
 
@@ -890,7 +1027,8 @@ class INavigationSchema(Interface):
             u"The content types that should be shown in the navigation and " +
             u"site map."),
         required=False,
-        default=('Image', 'File', 'Link', 'News Item', 'Folder', 'Document', 'Event'),
+        default=('Image', 'File', 'Link', 'News Item', 'Folder', 'Document',
+                 'Event'),
         value_type=schema.Choice(
             source="plone.app.vocabularies.ReallyUserFriendlyTypes"
         ))
diff --git a/Products/CMFPlone/profiles/default/controlpanel.xml b/Products/CMFPlone/profiles/default/controlpanel.xml
index 2dfb41a..0541990 100644
--- a/Products/CMFPlone/profiles/default/controlpanel.xml
+++ b/Products/CMFPlone/profiles/default/controlpanel.xml
@@ -126,7 +126,7 @@
     i18n:attributes="title">
   <permission>Plone Site Setup: Language</permission>
  </configlet>
- <configlet title="HTML Filtering" action_id="HtmlFilter" appId="HtmlFilter"
+ <configlet title="HTML Filtering" action_id="FilterSettings" appId="FilterSettings"
     category="Plone" condition_expr=""
     icon_expr="string:$portal_url/htmlfilter_icon.png"
     url_expr="string:${portal_url}/@@filter-controlpanel" visible="True"
diff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml
index 1e65612..96697b7 100644
--- a/Products/CMFPlone/profiles/dependencies/registry.xml
+++ b/Products/CMFPlone/profiles/dependencies/registry.xml
@@ -4,6 +4,8 @@
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.ILanguageSchema"
            prefix="plone" />
+  <records interface="Products.CMFPlone.interfaces.IFilterSchema"
+           prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IMaintenanceSchema"
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IMailSchema"
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot b/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
index 601b60e..1565bbf 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
@@ -89,50 +89,36 @@ Input RichText
 # --- WHEN -------------------------------------------------------------------
 
 I add '${tag}' to the nasty tags list
-  Click Button  Add Nasty tags
-  patterns are loaded
-  Input Text  name=form.nasty_tags.6.  ${tag}
+  Input Text  name=form.widgets.nasty_tags  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the stripped tags list
-  Click Button  Add Stripped tags
-  patterns are loaded
-  Input Text  name=form.stripped_tags.16.  ${tag}
+  Input Text  name=form.widgets.stripped_tags  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the custom tags list
-  Click Button  Add Custom tags
-  patterns are loaded
-  Input Text  name=form.custom_tags.26.  ${tag}
+  Input Text  name=form.widgets.custom_tags  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the stripped attributes list
-  Click Button  Add Stripped attributes
-  patterns are loaded
-  Input Text  name=form.stripped_attributes.9.  ${tag}
+  Input Text  name=form.widgets.stripped_attributes  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the filtered classes
-  Click Button  Add Filtered classes
-  patterns are loaded
-  Input Text  name=form.class_blacklist.0.  ${tag}
+  Input Text  name=form.widgets.class_blacklist  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tag}' to the allowed style attributes
-  Click Button  Add Permitted properties
-  patterns are loaded
-  Input text  name=form.style_whitelist.4.  ${tag}
+  Input text  name=form.widgets.style_whitelist  ${tag}
   Click Button  Save
   Wait until page contains  Changes saved
 
 I add '${tags}' and '${attributes}' to the stripped out combinations
-  Click Button  Add Stripped combinations
-  patterns are loaded
   Input text  name=form.stripped_combinations.1.tags  ${tags}
   Input text  name=form.stripped_combinations.1.attributes  ${attributes}
   Click Button  Save
diff --git a/Products/CMFPlone/tests/testControlPanel.py b/Products/CMFPlone/tests/testControlPanel.py
index c3fb944..dd2bb7b 100644
--- a/Products/CMFPlone/tests/testControlPanel.py
+++ b/Products/CMFPlone/tests/testControlPanel.py
@@ -13,7 +13,8 @@ def afterSetUp(self):
                            'MemberPassword', 'ZMI', 'SecuritySettings',
                            'NavigationSettings', 'SearchSettings',
                            'errorLog', 'PloneReconfig', 'TypesSettings',
-                           'LanguageSettings', 'HtmlFilter', 'Maintenance']
+                           'FilterSettings',
+                           'Maintenance']
 
     def testDefaultGroups(self):
         for group in self.groups:
diff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py
index cd64b8b..5e94c25 100644
--- a/Products/CMFPlone/tests/testRegistrationTool.py
+++ b/Products/CMFPlone/tests/testRegistrationTool.py
@@ -1,7 +1,7 @@
 import unittest
 
 from email import message_from_string
-from zope.component import getSiteManager
+from zope.component import getSiteManager, getUtility
 from Products.CMFPlone.tests import PloneTestCase
 
 from AccessControl import Unauthorized
@@ -121,6 +121,8 @@ def testRegisteredNotify(self):
         self.portal.setTitle('T\xc3\xa4st Portal')
         self.portal.email_from_name = 'T\xc3\xa4st Admin'
         self.portal.email_from_address = 'bar@baz.com'
+
+        # Notify the registered user
         self.registration.registeredNotify(member_id)
         self.assertEqual(len(mails.messages), 1)
         msg = message_from_string(mails.messages[0])
@@ -135,6 +137,31 @@ def testRegisteredNotify(self):
         # And a Quoted Printable encoded body
         self.assertTrue('T=C3=A4st Admin' in msg.get_payload())
 
+    def testRegisteredNotifyEncoding(self):
+        mails = self.portal.MailHost = MockMailHost('MailHost')
+        sm = getSiteManager(self.portal)
+        sm.unregisterUtility(provided=IMailHost)
+        sm.registerUtility(mails, IMailHost)
+        # Register a user
+        self.registration.addMember(member_id, 'secret',
+                          properties={'username': member_id,
+                                      'email': 'foo@bar.com'})
+        # Set the portal email info
+        self.portal.setTitle('Test Portal')
+        self.portal.email_from_name = 'Test Admin'
+        self.portal.email_from_address = 'bar@baz.com'
+
+        # Set the portal email encoding
+        self.portal.email_charset = 'us-ascii'
+
+        # Notify the registered user
+        self.registration.registeredNotify(member_id)
+        self.assertEqual(len(mails.messages), 1)
+        msg = message_from_string(mails.messages[0])
+
+        # Ensure charset (and thus Content-Type) were set via template
+        self.assertEqual(msg['Content-Type'], 'text/plain; charset="us-ascii"')
+
     def testMailPassword(self):
         # tests email sending for password emails
         # First install a fake mailhost utility
@@ -150,6 +177,7 @@ def testMailPassword(self):
         self.portal.setTitle('T\xc3\xa4st Portal')
         self.portal.email_from_name = 'T\xc3\xa4st Admin'
         self.portal.email_from_address = 'bar@baz.com'
+
         from zope.publisher.browser import TestRequest
         self.registration.mailPassword(member_id, TestRequest())
         self.assertEqual(len(mails.messages), 1)
@@ -164,6 +192,33 @@ def testMailPassword(self):
         # And a Quoted Printable encoded body
         self.assertTrue('T=C3=A4st Porta' in msg.get_payload())
 
+    def testMailPasswordEncoding(self):
+        # tests email sending for password emails
+        # First install a fake mailhost utility
+        mails = self.portal.MailHost = MockMailHost('MailHost')
+        sm = getSiteManager(self.portal)
+        sm.unregisterUtility(provided=IMailHost)
+        sm.registerUtility(mails, IMailHost)
+        # Register a user
+        self.registration.addMember(member_id, 'secret',
+                          properties={'username': member_id,
+                                      'email': 'foo@bar.com'})
+        # Set the portal email info
+        self.portal.setTitle('Test Portal')
+        self.portal.email_from_name = 'Test Admin'
+        self.portal.email_from_address = 'bar@baz.com'
+
+        # Set the portal email encoding
+        self.portal.email_charset = 'us-ascii'
+
+        from zope.publisher.browser import TestRequest
+        self.registration.mailPassword(member_id, TestRequest())
+        self.assertEqual(len(mails.messages), 1)
+        msg = message_from_string(mails.messages[0])
+
+        # Ensure charset (and thus Content-Type) were set via template
+        self.assertEqual(msg['Content-Type'], 'text/plain; charset="us-ascii"')
+
 
 class TestPasswordGeneration(PloneTestCase.PloneTestCase):
 


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-25T21:54:09+01:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/f407f70ee0874a2693b13ef41e7ecf68d698d9dd

Merge pull request #251 from plone/z3cform-language-controlpanel

Move language control panel to z3c.form/p.a.registry.

Files changed:
A Products/CMFPlone/controlpanel/bbb/language.py
A Products/CMFPlone/controlpanel/browser/language.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
A Products/CMFPlone/interfaces/language.py
A Products/CMFPlone/tests/robot/test_controlpanel_language.robot
M .gitignore
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/controlpanel/bbb/configure.zcml
M Products/CMFPlone/controlpanel/bbb/editing.py
M Products/CMFPlone/controlpanel/bbb/maintenance.py
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/controlpanel/browser/editing.py
M Products/CMFPlone/controlpanel/browser/maintenance.py
M Products/CMFPlone/factory.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/default/controlpanel.xml
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/profiles/dependencies/metadata.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
M Products/CMFPlone/static/plone.js
M Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
M Products/CMFPlone/tests/robot/keywords.robot
M Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
M Products/CMFPlone/tests/testBrowserLayerPrecedence.py
M Products/CMFPlone/tests/testControlPanel.py
M setup.py

diff --git a/.gitignore b/.gitignore
index b13ecf8..9af21b8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,7 +15,9 @@
 /include
 /lib
 /.project
+.ropeproject
 /.pydevproject
+.ropeproject
 /.mr.developer.cfg
 /src/*
 *.mo
diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index 40bf039..d01871f 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -637,8 +637,13 @@ def getDefaultPage(self, obj, request=None):
         returned. If a non-folderish item is passed in, return None always.
         """
         if request is None:
-            request = self.REQUEST
-        return utils.getDefaultPage(obj, request)
+            if hasattr(self, 'REQUEST'):
+                request = self.REQUEST
+        if request:
+            return utils.getDefaultPage(obj, request)
+        else:
+            # In case its executed from an event that does not have request
+            return None
 
     security.declarePublic('addPortalMessage')
     def addPortalMessage(self, message, type='info', request=None):
@@ -985,7 +990,6 @@ def listMetaTags(self, context):
             metadata_names = {'Description': METADATA_DCNAME['Description']}
         else:
             metadata_names = METADATA_DCNAME
-
         for accessor, key in metadata_names.items():
             # check non-public properties
             if not view_about and accessor in METADATA_DC_AUTHORFIELDS:
diff --git a/Products/CMFPlone/controlpanel/bbb/configure.zcml b/Products/CMFPlone/controlpanel/bbb/configure.zcml
index a9bcef8..9d7ff3b 100644
--- a/Products/CMFPlone/controlpanel/bbb/configure.zcml
+++ b/Products/CMFPlone/controlpanel/bbb/configure.zcml
@@ -4,6 +4,7 @@
     xmlns:browser="http://namespaces.zope.org/browser">
 
   <adapter factory=".editing.EditingControlPanelAdapter" />
+  <adapter factory=".language.LanguageControlPanelAdapter" />
   <adapter factory=".filter.FilterControlPanelAdapter" />
   <adapter factory=".maintenance.MaintenanceControlPanelAdapter" />
   <adapter factory=".mail.MailControlPanelAdapter" />
diff --git a/Products/CMFPlone/controlpanel/bbb/editing.py b/Products/CMFPlone/controlpanel/bbb/editing.py
index 5ebdc10..fad65a4 100644
--- a/Products/CMFPlone/controlpanel/bbb/editing.py
+++ b/Products/CMFPlone/controlpanel/bbb/editing.py
@@ -1,9 +1,11 @@
-from Products.CMFPlone.interfaces import IEditingSchema
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from plone.registry.interfaces import IRegistry
+# -*- coding: utf-8 -*-
 from zope.component import adapts
-from zope.component import getUtility
 from zope.interface import implements
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+
+from Products.CMFPlone.interfaces import IEditingSchema
 
 
 class EditingControlPanelAdapter(object):
diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
new file mode 100644
index 0000000..9c50df1
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -0,0 +1,137 @@
+# -*- coding: utf-8 -*-
+from zope.component import adapts
+from Products.CMFPlone.interfaces import ILanguageSchema
+from zope.interface import implements
+from zope.component import getUtility
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+
+from plone.registry.interfaces import IRegistry
+
+
+class LanguageControlPanelAdapter(object):
+
+    adapts(IPloneSiteRoot)
+    implements(ILanguageSchema)
+
+    def __init__(self, context):
+        self.context = context
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(
+            ILanguageSchema, prefix="plone")
+
+    def get_default_language(self):
+        return self.settings.default_language
+
+    def set_default_language(self, value):
+        self.settings.default_language = value
+
+    default_language = property(get_default_language,
+                                set_default_language)
+
+    def get_available_languages(self):
+        return self.settings.available_languages
+
+    def set_available_languages(self, value):
+        self.settings.available_languages = value
+
+    available_languages = property(get_available_languages,
+                                set_available_languages)
+
+    def get_use_combined_language_codes(self):
+        return self.settings.use_combined_language_codes
+
+    def set_use_combined_language_codes(self, value):
+        self.settings.use_combined_language_codes = value
+
+    use_combined_language_codes = property(get_use_combined_language_codes,
+                                           set_use_combined_language_codes)
+
+    def get_display_flags(self):
+        return self.settings.display_flags
+
+    def set_display_flags(self, value):
+        self.settings.display_flags = value
+
+    display_flags = property(get_display_flags,
+                                           set_display_flags)
+
+    def get_always_show_selector(self):
+        return self.settings.always_show_selector
+
+    def set_always_show_selector(self, value):
+        self.settings.always_show_selector = value
+
+    always_show_selector = property(get_always_show_selector,
+                                           set_always_show_selector)
+
+    def get_use_content_negotiation(self):
+        return self.settings.use_content_negotiation
+
+    def set_use_content_negotiation(self, value):
+        self.settings.use_content_negotiation = value
+
+    use_content_negotiation = property(get_use_content_negotiation,
+                                           set_use_content_negotiation)
+
+    def get_use_path_negotiation(self):
+        return self.settings.use_path_negotiation
+
+    def set_use_path_negotiation(self, value):
+        self.settings.use_path_negotiation = value
+
+    use_path_negotiation = property(get_use_path_negotiation,
+                                       set_use_path_negotiation)
+
+    def get_use_cookie_negotiation(self):
+        return self.settings.use_cookie_negotiation
+
+    def set_use_cookie_negotiation(self, value):
+        self.settings.use_cookie_negotiation = value
+
+    use_cookie_negotiation = property(get_use_cookie_negotiation,
+                                       set_use_cookie_negotiation)
+
+    def get_authenticated_users_only(self):
+        return self.settings.authenticated_users_only
+
+    def set_authenticated_users_only(self, value):
+        self.settings.authenticated_users_only = value
+
+    authenticated_users_only = property(get_authenticated_users_only,
+                                       set_authenticated_users_only)
+
+    def get_set_cookie_always(self):
+        return self.settings.set_cookie_always
+
+    def set_set_cookie_always(self, value):
+        self.settings.set_cookie_always = value
+
+    set_cookie_always = property(get_set_cookie_always,
+                                       set_set_cookie_always)
+
+    def get_use_subdomain_negotiation(self):
+        return self.settings.use_subdomain_negotiation
+
+    def set_use_subdomain_negotiation(self, value):
+        self.settings.use_subdomain_negotiation = value
+
+    use_subdomain_negotiation = property(get_use_subdomain_negotiation,
+                                       set_use_subdomain_negotiation)
+
+    def get_use_cctld_negotiation(self):
+        return self.settings.use_cctld_negotiation
+
+    def set_use_cctld_negotiation(self, value):
+        self.settings.use_cctld_negotiation = value
+
+    use_cctld_negotiation = property(get_use_cctld_negotiation,
+                                       set_use_cctld_negotiation)
+
+    def get_use_request_negotiation(self):
+        return self.settings.use_request_negotiation
+
+    def set_use_request_negotiation(self, value):
+        self.settings.use_request_negotiation = value
+
+    use_request_negotiation = property(get_use_request_negotiation,
+                                       set_use_request_negotiation)
diff --git a/Products/CMFPlone/controlpanel/bbb/maintenance.py b/Products/CMFPlone/controlpanel/bbb/maintenance.py
index 184726e..c2b2891 100644
--- a/Products/CMFPlone/controlpanel/bbb/maintenance.py
+++ b/Products/CMFPlone/controlpanel/bbb/maintenance.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFPlone.interfaces import IMaintenanceSchema
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from plone.registry.interfaces import IRegistry
diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml
index cc04be4..3093e43 100644
--- a/Products/CMFPlone/controlpanel/browser/configure.zcml
+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml
@@ -41,6 +41,14 @@
     permission="plone.app.controlpanel.TinyMCE"
     />
 
+  <!-- Language Control Panel -->
+  <browser:page
+    name="language-controlpanel"
+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+    class=".language.LanguageControlPanel"
+    permission="plone.app.controlpanel.Language"
+    />
+
   <!-- Maintenance Control Panel -->
   <browser:page
     name="maintenance-controlpanel"
diff --git a/Products/CMFPlone/controlpanel/browser/editing.py b/Products/CMFPlone/controlpanel/browser/editing.py
index d8bceb1..bec31ef 100644
--- a/Products/CMFPlone/controlpanel/browser/editing.py
+++ b/Products/CMFPlone/controlpanel/browser/editing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IEditingSchema
 from plone.app.registry.browser import controlpanel
diff --git a/Products/CMFPlone/controlpanel/browser/language.py b/Products/CMFPlone/controlpanel/browser/language.py
new file mode 100644
index 0000000..558389c
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/browser/language.py
@@ -0,0 +1,63 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone import PloneMessageFactory as _
+from plone.app.registry.browser import controlpanel
+
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.statusmessages.interfaces import IStatusMessage
+from z3c.form import button
+
+
+class LanguageControlPanelForm(controlpanel.RegistryEditForm):
+
+    id = "LanguageControlPanel"
+    label = _(u"heading_language_settings", default="Language Settings")
+    description = _(u"description_language_settings",
+                    default="Settings related to interface languages and "
+                            "content translations.")
+
+    schema = ILanguageSchema
+    schema_prefix = "plone"
+
+    @button.buttonAndHandler(_(u"Save"), name='save')
+    def handleSave(self, action):
+        data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+        # We need to check if the default language is in available languages
+        if 'default_language' in data and 'available_languages' in data and \
+                data['default_language'] not in data['available_languages']:
+            IStatusMessage(self.request).addStatusMessage(
+                _(u"Default language not in available languages"),
+                "error")
+
+            # e = Invalid(_(u"Default language not in available languages"))
+            # raise WidgetActionExecutionError('default_language', e)
+            return
+
+        self.applyChanges(data)
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes saved."),
+            "info")
+        self.request.response.redirect(self.request.getURL())
+
+    @button.buttonAndHandler(_(u"Cancel"), name='cancel')
+    def handleCancel(self, action):
+        IStatusMessage(self.request).addStatusMessage(
+            _(u"Changes canceled."),
+            "info")
+        self.request.response.redirect("%s/%s" % (
+            self.context.absolute_url(),
+            self.control_panel_view))
+
+
+class LanguageControlPanel(controlpanel.ControlPanelFormWrapper):
+    form = LanguageControlPanelForm
+
+
+#class LanguageControlPanel(ControlPanelForm):
+#    form_fields = FormFields(ILanguageSchema)
+#    form_fields['default_language'].custom_widget = \
+#       LanguageDropdownChoiceWidget
+#
+#    form_name = _(u"heading_language_settings", default="Language Settings")
diff --git a/Products/CMFPlone/controlpanel/browser/maintenance.py b/Products/CMFPlone/controlpanel/browser/maintenance.py
index 83c767a..36ab8a6 100644
--- a/Products/CMFPlone/controlpanel/browser/maintenance.py
+++ b/Products/CMFPlone/controlpanel/browser/maintenance.py
@@ -1,3 +1,11 @@
+# -*- coding: utf-8 -*-
+from z3c.form import button
+import os
+from cgi import escape
+
+from plone.app.form.validators import null_validator
+from z3c.form import form
+
 from AccessControl import getSecurityManager
 from AccessControl.Permissions import view_management_screens
 from Acquisition import aq_inner
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
new file mode 100644
index 0000000..75fd6fe
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
@@ -0,0 +1,312 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+from plone.app.testing import TEST_USER_ID, setRoles
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import getAdapter
+
+import unittest2 as unittest
+
+
+class LanguageControlPanelAdapterTest(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(
+            ILanguageSchema, prefix="plone")
+
+    def test_adapter_lookup(self):
+        self.assertTrue(getAdapter(self.portal, ILanguageSchema))
+
+    def test_get_default_language(self):
+        self.assertEqual(
+            getAdapter(self.portal, ILanguageSchema).default_language,
+            'en'
+        )
+        self.settings.default_language = 'de'
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).default_language,
+            'de'
+        )
+
+    def test_set_default_language(self):
+        self.assertEquals(
+            self.settings.default_language,
+            'en'
+        )
+        getAdapter(self.portal, ILanguageSchema).default_language = 'de'
+        self.assertEquals(
+            self.settings.default_language,
+            'de'
+        )
+
+    def test_get_available_languages(self):
+        self.assertEqual(
+            getAdapter(self.portal, ILanguageSchema).available_languages,
+            ['en']
+        )
+        self.settings.available_languages = ['en', 'de']
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).available_languages,
+            ['en', 'de']
+        )
+
+    def test_set_available_languages(self):
+        self.assertEquals(
+            self.settings.available_languages,
+            ['en']
+        )
+        getAdapter(self.portal, ILanguageSchema).available_languages = ['de', 'en']
+        self.assertEquals(
+            self.settings.available_languages,
+            ['de', 'en']
+        )
+
+    def test_get_use_combined_language_codes(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_combined_language_codes,
+            False
+        )
+        self.settings.use_combined_language_codes = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_combined_language_codes,
+            True
+        )
+
+    def test_set_use_combined_language_codes(self):
+        self.assertEquals(
+            self.settings.use_combined_language_codes,
+            False
+        )
+        getAdapter(
+              self.portal, ILanguageSchema).use_combined_language_codes = True
+        self.assertEquals(
+            self.settings.use_combined_language_codes,
+            True
+        )
+
+    def test_get_display_flags(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).display_flags,
+            False
+        )
+        self.settings.display_flags = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).display_flags,
+            True
+        )
+
+    def test_set_display_flags(self):
+        self.assertEquals(
+            self.settings.display_flags,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).display_flags = True
+        self.assertEquals(
+            self.settings.display_flags,
+            True
+        )
+
+    def test_get_use_content_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_content_negotiation,
+            False
+        )
+        self.settings.use_content_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_content_negotiation,
+            True
+        )
+
+    def test_set_use_content_negotiation(self):
+        self.assertEquals(
+            self.settings.use_content_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_content_negotiation = True
+        self.assertEquals(
+            self.settings.use_content_negotiation,
+            True
+        )
+
+    def test_get_use_path_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_path_negotiation,
+            False
+        )
+        self.settings.use_path_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_path_negotiation,
+            True
+        )
+
+    def test_set_use_path_negotiation(self):
+        self.assertEquals(
+            self.settings.use_path_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_path_negotiation = True
+        self.assertEquals(
+            self.settings.use_path_negotiation,
+            True
+        )
+
+    def test_get_use_cookie_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_cookie_negotiation,
+            False
+        )
+        self.settings.use_cookie_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_cookie_negotiation,
+            True
+        )
+
+    def test_set_use_cookie_negotiation(self):
+        self.assertEquals(
+            self.settings.use_cookie_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_cookie_negotiation = True
+        self.assertEquals(
+            self.settings.use_cookie_negotiation,
+            True
+        )
+
+    def test_get_authenticated_users_only(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).authenticated_users_only,
+            False
+        )
+        self.settings.authenticated_users_only = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).authenticated_users_only,
+            True
+        )
+
+    def test_set_authenticated_users_only(self):
+        self.assertEquals(
+            self.settings.authenticated_users_only,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).authenticated_users_only = True
+        self.assertEquals(
+            self.settings.authenticated_users_only,
+            True
+        )
+
+    def test_get_set_cookie_always(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).set_cookie_always,
+            False
+        )
+        self.settings.set_cookie_always = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).set_cookie_always,
+            True
+        )
+
+    def test_set_set_cookie_always(self):
+        self.assertEquals(
+            self.settings.set_cookie_always,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).set_cookie_always = True
+        self.assertEquals(
+            self.settings.set_cookie_always,
+            True
+        )
+
+    def test_get_use_subdomain_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_subdomain_negotiation,
+            False
+        )
+        self.settings.use_subdomain_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_subdomain_negotiation,
+            True
+        )
+
+    def test_set_use_subdomain_negotiation(self):
+        self.assertEquals(
+            self.settings.use_subdomain_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_subdomain_negotiation = True
+        self.assertEquals(
+            self.settings.use_subdomain_negotiation,
+            True
+        )
+
+    def test_get_use_cctld_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_cctld_negotiation,
+            False
+        )
+        self.settings.use_cctld_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_cctld_negotiation,
+            True
+        )
+
+    def test_set_use_cctld_negotiation(self):
+        self.assertEquals(
+            self.settings.use_cctld_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_cctld_negotiation = True
+        self.assertEquals(
+            self.settings.use_cctld_negotiation,
+            True
+        )
+
+    def test_get_use_request_negotiation(self):
+        self.assertEqual(
+            getAdapter(
+                self.portal, ILanguageSchema).use_request_negotiation,
+            False
+        )
+        self.settings.use_request_negotiation = True
+        self.assertEquals(
+            getAdapter(self.portal, ILanguageSchema).use_request_negotiation,
+            True
+        )
+
+    def test_set_use_request_negotiation(self):
+        self.assertEquals(
+            self.settings.use_request_negotiation,
+            False
+        )
+        getAdapter(
+            self.portal, ILanguageSchema).use_request_negotiation = True
+        self.assertEquals(
+            self.settings.use_request_negotiation,
+            True
+        )
+
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
new file mode 100644
index 0000000..b3ef817
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -0,0 +1,331 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
+
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+import unittest2 as unittest
+
+
+class LanguageControlPanelFunctionalTest(unittest.TestCase):
+    """Test that changes in the language control panel are actually
+    stored in the registry.
+    """
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.portal_url = self.portal.absolute_url()
+        self.browser = Browser(self.app)
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+        )
+
+    def _inject_available_languages_field(self, value):
+        """The in-and-out widget does not work without javascript, therefore
+           we have to inject some values in order to make saving the form work.
+        """
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value=value)
+        )
+        self.browser.getControl('Save').click()
+
+    def test_language_control_panel_link(self):
+        self.browser.open(
+            "%s/plone_control_panel" % self.portal_url)
+        self.browser.getLink('Language').click()
+        self.assertTrue("Language Settings" in self.browser.contents)
+
+    def test_language_control_panel_backlink(self):
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertTrue("Plone Configuration" in self.browser.contents)
+
+    def test_language_control_panel_sidebar(self):
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.browser.getLink('Site Setup').click()
+        self.assertEqual(
+            self.browser.url,
+            'http://nohost/plone/@@overview-controlpanel')
+
+    def test_language_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="language-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_default_language(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.default_language, 'en')
+        self.assertEqual(
+            self.browser.getControl(
+                'Site language'
+            ).value,
+            ['en']
+        )
+        self.browser.getControl(
+            'Site language'
+        ).value = ['de']
+        self._inject_available_languages_field('en')
+        self._inject_available_languages_field('de')
+        self.browser.getControl(name='form.buttons.save').click()
+
+        self.assertEqual(settings.default_language, 'de')
+
+    # def test_available_languages(self):
+    #     registry = getUtility(IRegistry)
+    #     settings = registry.forInterface(ILanguageSchema, prefix='plone')
+    #     self.browser.open(
+    #         "%s/@@language-controlpanel" % self.portal_url)
+    #     self.assertEqual(settings.available_languages, ['en'])
+    #     self.assertEqual(
+    #         self.browser.getControl(
+    #             name='form.widgets.available_languages.to'
+    #         ).options,
+    #         ['en']
+    #     )
+    #     control = self.browser.getForm(index=1)
+    #     self.in_out_select(
+    #         control, 'form.widgets.available_languages:list', 'Deutsch')
+    #     self.browser.getControl('Save').click()
+    #     self.assertEqual(settings.available_languages, ['en', 'de'])
+
+    def test_use_combined_language_codes(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_combined_language_codes, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Show country-specific language variants'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Show country-specific language variants'
+        ).selected = True
+
+        self._inject_available_languages_field('en')
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_combined_language_codes, True)
+
+    def test_display_flags(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.display_flags, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Show language flags'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Show language flags'
+        ).selected = True
+
+        self._inject_available_languages_field('en')
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.display_flags, True)
+
+    def test_use_content_negotiation(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_content_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Use the language of the content item'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Use the language of the content item'
+        ).selected = True
+
+        self._inject_available_languages_field('en')
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_content_negotiation, True)
+
+    def test_use_path_negotiation(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_path_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Use language codes in URL path for manual override'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Use language codes in URL path for manual override'
+        ).selected = True
+
+        self._inject_available_languages_field('en')
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_path_negotiation, True)
+
+    def test_use_cookie_negotiation(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_cookie_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(
+                'Use cookie for manual override'
+            ).selected,
+            False
+        )
+        self.browser.getControl(
+            'Use cookie for manual override'
+        ).selected = True
+
+        self._inject_available_languages_field('en')
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_cookie_negotiation, True)
+
+    def test_authenticated_users_only(self):
+        control_label = "Authenticated users only"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.authenticated_users_only, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+
+        self._inject_available_languages_field('en')
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.authenticated_users_only, True)
+
+    def test_set_cookie_always(self):
+        control_label = "Set the language cookie always"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.set_cookie_always, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.set_cookie_always, True)
+
+    def test_use_subdomain_negotiation(self):
+        control_label = "Use subdomain"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_subdomain_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_subdomain_negotiation, True)
+
+    def test_use_cctld_negotiation(self):
+        control_label = "Use top-level domain"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_cctld_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_cctld_negotiation, True)
+
+    def test_use_request_negotiation(self):
+        control_label = "Use browser language request negotiation"
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILanguageSchema, prefix='plone')
+        self.browser.open(
+            "%s/@@language-controlpanel" % self.portal_url)
+        self.assertEqual(settings.use_request_negotiation, False)
+        self.assertEqual(
+            self.browser.getControl(control_label).selected,
+            False
+        )
+        self.browser.getControl(control_label).selected = True
+        # The in-and-out widget does not work without javascript, therefore
+        # we have to inject some values in order to make saving the form work.
+        form = self.browser.getForm(id='LanguageControlPanel')
+        form.mech_form.new_control(
+            type='hidden',
+            name='form.widgets.available_languages:list',
+            attrs=dict(value='en')
+        )
+        self.browser.getControl('Save').click()
+
+        self.assertEqual(settings.use_request_negotiation, True)
+
+
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
new file mode 100644
index 0000000..fff1af4
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
+
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.testing import \
+    PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+import unittest2 as unittest
+
+
+class LanguageRegistryIntegrationTest(unittest.TestCase):
+    """Test that the Language settings are stored as plone.app.registry
+    settings.
+    """
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(
+            ILanguageSchema, prefix="plone")
+
+    def test_language_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="language-controlpanel")
+        view = view.__of__(self.portal)
+        self.assertTrue(view())
+
+    def test_language_in_controlpanel(self):
+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
+        self.assertTrue('LanguageSettings' in [
+            a.getAction(self)['id']
+            for a in self.controlpanel.listActions()
+        ])
+
+    def test_default_language_exists(self):
+        self.assertTrue(hasattr(self.settings, 'default_language'))
+
+    def test_available_languages_exists(self):
+        self.assertTrue(hasattr(self.settings, 'available_languages'))
+
+    def test_use_combined_language_codes_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_combined_language_codes'))
+
+    def test_display_flags_exists(self):
+        self.assertTrue(hasattr(self.settings, 'display_flags'))
+
+    def test_use_content_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_content_negotiation'))
+
+    def test_use_path_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_path_negotiation'))
+
+    def test_use_cookie_negotiation_exists(self):
+        self.assertTrue(hasattr(self.settings, 'use_cookie_negotiation'))
+
+    def test_authenticated_users_only(self):
+        self.assertTrue(hasattr(self.settings, 'authenticated_users_only'))
+
+    def test_set_cookie_always(self):
+        self.assertTrue(hasattr(self.settings, 'set_cookie_always'))
+
+    def test_use_subdomain_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_subdomain_negotiation'))
+
+    def test_use_cctld_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_cctld_negotiation'))
+
+    def test_use_request_negotiation(self):
+        self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))
+
+
diff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py
index 3e83747..85703b2 100644
--- a/Products/CMFPlone/factory.py
+++ b/Products/CMFPlone/factory.py
@@ -90,13 +90,17 @@ def addPloneSite(context, site_id, title='Plone site', description='',
 
     setup_tool.setBaselineContext('profile-%s' % profile_id)
     setup_tool.runAllImportStepsFromProfile('profile-%s' % profile_id)
-    if setup_content:
-        setup_tool.runAllImportStepsFromProfile(
-            'profile-%s' % content_profile_id)
 
     reg = queryUtility(IRegistry, context=site)
     reg['plone.portal_timezone'] = portal_timezone
     reg['plone.available_timezones'] = [portal_timezone]
+    reg['plone.default_language'] = default_language
+    reg['plone.available_languages'] = [default_language]
+
+    if setup_content:
+        setup_tool.runAllImportStepsFromProfile(
+            'profile-%s' % content_profile_id)
+
 
     props = dict(
         title=title,
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 0277e3b..6b179aa 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -8,6 +8,7 @@
 from controlpanel import IControlPanel
 from controlpanel import IDateAndTimeSchema
 from controlpanel import IEditingSchema
+from controlpanel import ILanguageSchema
 from controlpanel import IFilterSchema
 from controlpanel import IMaintenanceSchema
 from controlpanel import IMailSchema
@@ -29,6 +30,7 @@
 from events import ISiteManagerCreatedEvent
 from installable import INonInstallable
 from interface import IInterfaceTool
+from language import ILanguage
 from migration import IMigrationTool
 from patterns import IPatternsSettings
 from properties import IPropertiesTool
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index ebfeec3..900caec 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from plone.supermodel import model
 from Products.CMFPlone import PloneMessageFactory as _  # NOQA
 from Products.CMFPlone.utils import validate_json
 from basetool import IPloneBaseTool
@@ -97,6 +98,179 @@ class IEditingSchema(Interface):
         required=False)
 
 
+class ILanguageSchema(Interface):
+    model.fieldset(
+        'general',
+        label=_(u'General', default=u'General'),
+        fields=[
+            'default_language',
+            'available_languages',
+            'use_combined_language_codes',
+            'display_flags',
+            'always_show_selector'
+        ],
+    )
+
+    default_language = schema.Choice(
+        title=_(u"heading_site_language",
+                default=u"Site language"),
+        description=_(
+            u"description_site_language",
+            default=u"The language used for the content and the UI "
+                    u"of this site."),
+        default='en',
+        required=True,
+        vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+    )
+
+    available_languages = schema.List(
+        title=_(u"heading_available_languages",
+                default=u"Available languages"),
+        description=_(u"description_available_languages",
+                      default=u"The languages in which the site should be "
+                              u"translatable."),
+        required=True,
+        default=['en'],
+        value_type=schema.Choice(
+            vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+        )
+    )
+
+    use_combined_language_codes = schema.Bool(
+        title=_(
+            u'label_allow_combined_language_codes',
+            default=u"Show country-specific language variants"
+        ),
+        description=_(
+            u"help_allow_combined_language_codes",
+            default=u"Examples: pt-br (Brazilian Portuguese), "
+                    u"en-us (American English) etc."
+        ),
+        default=False,
+        required=False
+    )
+
+    display_flags = schema.Bool(
+        title=_(
+            u'label_display_flags',
+            default=u"Show language flags"
+        ),
+        description=_(
+            u"help_display_flags",
+            default=u""
+        ),
+        default=False,
+        required=False
+    )
+
+    always_show_selector = schema.Bool(
+        title=_(
+            u'label_always_show_selector',
+            default=u"Always show language selector"
+        ),
+        description=_(
+            u"help_always_show_selector",
+            default=u""
+        ),
+        default=False,
+        required=False
+    )
+
+    model.fieldset(
+        'negotiation_scheme',
+        label=_(u'Negotiation scheme', default=u'Negotiation scheme'),
+        fields=[
+            'use_content_negotiation',
+            'use_path_negotiation',
+            'use_cookie_negotiation',
+            'authenticated_users_only',
+            'set_cookie_always',
+            'use_subdomain_negotiation',
+            'use_cctld_negotiation',
+            'use_request_negotiation',
+            ],
+        )
+    use_content_negotiation = schema.Bool(
+        title=_(u"heading_language_of_the_content",
+                default=u"Use the language of the content item"),
+        description=_(u"description_language_of_the_content",
+                      default=u"Use the language of the content item."),
+        default=False,
+        required=False,
+    )
+
+    use_path_negotiation = schema.Bool(
+        title=_(
+            u"heading_language_codes_in_URL",
+            default=u"Use language codes in URL path for manual override"),
+        description=_(
+            u"description_language_codes_in_URL",
+            default=u"Use language codes in URL path for manual override."),
+        default=False,
+        required=False,
+    )
+
+    use_cookie_negotiation = schema.Bool(
+        title=_(u"heading_cookie_manual_override",
+                default=(u"Use cookie for manual override")),
+        description=_(
+            u"description_cookie_manual_override",
+            default=(u"Required for the language selector viewlet to be rendered.")
+        ),
+        default=False,
+        required=False,
+    )
+
+    authenticated_users_only = schema.Bool(
+        title=_(u"heading_auth_cookie_manual_override",
+                default=u"Authenticated users only"),
+        description=_(
+            u"description_auth_ookie_manual_override",
+            default=(u"Related to Use cookie for manual override")
+        ),
+        default=False,
+        required=False,
+    )
+
+    set_cookie_always = schema.Bool(
+        title=_(
+            u"heading_set_language_cookie_always",
+            default=(u"Set the language cookie always")),
+        description=_(
+            u"description_set_language_cookie_always",
+            default=(u"i.e. also when the 'set_language' request parameter is absent")),
+        default=False,
+        required=False,
+        )
+
+    use_subdomain_negotiation = schema.Bool(
+        title=_(u"heading_use_subdomain",
+                default=u"Use subdomain"),
+        description=_(u"description_use_subdomain",
+                      default=u"e.g.: de.plone.org"),
+        default=False,
+        required=False,
+        )
+
+    use_cctld_negotiation = schema.Bool(
+        title=_(u"heading_top_level_domain",
+                default=u"Use top-level domain"),
+        description=_(u"description_top_level_domain",
+                      default=u"e.g.: www.plone.de"),
+        default=False,
+        required=False,
+        )
+
+    use_request_negotiation = schema.Bool(
+        title=_(u"heading_browser_language_request_negotiation",
+                default=u"Use browser language request negotiation"),
+        description=_(u"description_browser_language_request_negotiation",
+                      default=u"Use browser language request negotiation."),
+        default=False,
+        required=False,
+        )
+
+
 class ITagAttrPair(Interface):
     tags = schema.TextLine(title=u"tags")
     attributes = schema.TextLine(title=u"attributes")
diff --git a/Products/CMFPlone/interfaces/language.py b/Products/CMFPlone/interfaces/language.py
new file mode 100644
index 0000000..d78e9a7
--- /dev/null
+++ b/Products/CMFPlone/interfaces/language.py
@@ -0,0 +1,11 @@
+from zope.interface import Interface
+
+
+# Language-support
+class ILanguage(Interface):
+
+    def get_language(self):
+        """ return the contents language """
+
+    def set_language(self):
+        """ return the contents language """
\ No newline at end of file
diff --git a/Products/CMFPlone/profiles/default/controlpanel.xml b/Products/CMFPlone/profiles/default/controlpanel.xml
index 967ae4b..0541990 100644
--- a/Products/CMFPlone/profiles/default/controlpanel.xml
+++ b/Products/CMFPlone/profiles/default/controlpanel.xml
@@ -119,8 +119,8 @@
     i18n:attributes="title">
   <permission>Plone Site Setup: Navigation</permission>
  </configlet>
- <configlet title="Language" action_id="PloneLanguageTool"
-    appId="PloneLanguageTool" category="Plone" condition_expr=""
+ <configlet title="Language" action_id="LanguageSettings"
+    appId="Plone" category="Plone" condition_expr=""
     icon_expr="string:$portal_url/flag-plone.png"
     url_expr="string:${portal_url}/@@language-controlpanel" visible="True"
     i18n:attributes="title">
diff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml
index 2739516..670224a 100644
--- a/Products/CMFPlone/profiles/default/skins.xml
+++ b/Products/CMFPlone/profiles/default/skins.xml
@@ -2,8 +2,6 @@
 <object name="portal_skins" meta_type="Plone Skins Tool" allow_any="False"
    cookie_persistence="False" default_skin="Plone Default"
    request_varname="plone_skin">
- <object name="LanguageTool" meta_type="Filesystem Directory View"
-    directory="Products.PloneLanguageTool:skins/LanguageTool"/>
  <object name="custom" meta_type="Folder"/>
  <object name="PasswordReset" meta_type="Filesystem Directory View"
     directory="Products.PasswordResetTool:skins/PasswordReset"/>
diff --git a/Products/CMFPlone/profiles/dependencies/metadata.xml b/Products/CMFPlone/profiles/dependencies/metadata.xml
index aeca717..9b8cd24 100644
--- a/Products/CMFPlone/profiles/dependencies/metadata.xml
+++ b/Products/CMFPlone/profiles/dependencies/metadata.xml
@@ -6,7 +6,6 @@
     <dependency>profile-Products.MimetypesRegistry:MimetypesRegistry</dependency>
     <dependency>profile-Products.PortalTransforms:PortalTransforms</dependency>
     <dependency>profile-Products.CMFEditions:CMFEditions</dependency>
-    <dependency>profile-Products.PloneLanguageTool:PloneLanguageTool</dependency>
     <dependency>profile-Products.PlonePAS:PlonePAS</dependency>
     <dependency>profile-plone.app.discussion:default</dependency>
     <dependency>profile-plone.app.jquerytools:default</dependency>
diff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml
index aec18ac..96697b7 100644
--- a/Products/CMFPlone/profiles/dependencies/registry.xml
+++ b/Products/CMFPlone/profiles/dependencies/registry.xml
@@ -2,6 +2,8 @@
 <registry>
   <records interface="Products.CMFPlone.interfaces.IEditingSchema"
            prefix="plone" />
+  <records interface="Products.CMFPlone.interfaces.ILanguageSchema"
+           prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IFilterSchema"
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IMaintenanceSchema"
diff --git a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
index bfc7400..225d677 100644
--- a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
+++ b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
@@ -357,8 +357,8 @@ body.userrole-authenticated {
         width: 180px;
     }
 
-.plone-toolbar-left-default { margin-left: 0px; }
-.plone-toolbar-left-expanded { margin-left: 0px; }
+.plone-toolbar-left-default { padding-left: 0px; }
+.plone-toolbar-left-expanded { padding-left: 0px; }
 .plone-toolbar-top-default { margin-top: 0px; }
 .plone-toolbar-top-expanded { margin-top: 0px; }
 .plone-toolbar-compressed { margin-top: 0px; margin-left: 0px; }
diff --git a/Products/CMFPlone/static/plone.js b/Products/CMFPlone/static/plone.js
index 9380a40..8e24308 100644
--- a/Products/CMFPlone/static/plone.js
+++ b/Products/CMFPlone/static/plone.js
@@ -54,4 +54,16 @@ require([
       }
     });
   }
+
+  // TODO: Needs to be moved to controlpanel js
+  $(document).ready(function() {
+    var cookieNegotiation = (
+      $("#form-widgets-use_cookie_negotiation > input").value === 'selected');
+    if (cookieNegotiation !== true) {
+      $("#formfield-form-widgets-authenticated_users_only").hide();
+    }else{
+      $("#formfield-form-widgets-authenticated_users_only").show();
+    }
+  });
+
 });
diff --git a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
index e1055e2..7ebe23a 100644
--- a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
+++ b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
@@ -17,7 +17,13 @@ First, we need to log in.
 
 We need to allow multiple languages to see the result of our changes:
 
-    >>> self.portal.portal_languages.supported_langs = ['de', 'en']
+    >>> from plone.registry.interfaces import IRegistry
+    >>> from zope.component import getUtility
+    >>> from Products.CMFPlone.interfaces import ILanguageSchema
+    >>> settings = getUtility(IRegistry).forInterface(
+    ...     ILanguageSchema,
+    ...     prefix='plone')
+    >>> settings.available_languages = ['de', 'en']
     >>> import transaction; transaction.commit()
 
 Add Document
diff --git a/Products/CMFPlone/tests/robot/keywords.robot b/Products/CMFPlone/tests/robot/keywords.robot
index 23170ae..7ffd098 100644
--- a/Products/CMFPlone/tests/robot/keywords.robot
+++ b/Products/CMFPlone/tests/robot/keywords.robot
@@ -3,11 +3,20 @@
 # --- GIVEN ------------------------------------------------------------------
 
 a logged-in site administrator
-  Enable autologin as  Site Administrator
+  Enable autologin as  Site Administrator  Contributor  Reviewer
 
 a document '${title}'
   Create content  type=Document  id=doc  title=${title}
 
+a file '${title}'
+  Create content  type=File  id=file  title=${title}
+
+a news item '${title}'
+  Create content  type=News Item  id=doc  title=${title}
+
+an image '${title}'
+  Create content  type=Image  id=doc  title=${title}
+
 a folder '${title}'
   Create content  type=Folder  title=${title}
 
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_language.robot b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
new file mode 100644
index 0000000..cb4213e
--- /dev/null
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot
@@ -0,0 +1,48 @@
+*** Settings *****************************************************************
+
+Resource  plone/app/robotframework/keywords.robot
+Resource  plone/app/robotframework/saucelabs.robot
+
+Library  Remote  ${PLONE_URL}/RobotRemote
+
+Resource  keywords.robot
+
+Test Setup  Open SauceLabs test browser
+Test Teardown  Run keywords  Report test status  Close all browsers
+
+
+*** Test Cases ***************************************************************
+
+Scenario: Set Site Language in the Language Control Panel
+  Given a logged-in site administrator
+    and the language control panel
+   When I set the site language to German
+   Then the Plone user interface is in German
+
+
+*** Keywords *****************************************************************
+
+# --- GIVEN ------------------------------------------------------------------
+
+a logged-in site administrator
+  Enable autologin as  Site Administrator
+
+the language control panel
+  Go to  ${PLONE_URL}/@@language-controlpanel
+
+
+# --- WHEN -------------------------------------------------------------------
+
+I set the site language to German
+  Select From List By Label  form.widgets.default_language:list  Deutsch
+  Select From List By Label  form.widgets.available_languages.from  Deutsch
+  Click Button  →
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+
+# --- THEN -------------------------------------------------------------------
+
+the Plone user interface is in German
+  Go to  ${PLONE_URL}
+  Page should contain  Sie sind hier
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
index 7109e36..70b4a5a 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
@@ -27,13 +27,24 @@ Scenario: Enable Folderish Tabs in the Navigation Control Panel
    When I disable non-folderish tabs
    Then the document 'My Document' does not show up in the navigation
 
-Scenario: Add Document to the Displayed Types in the Navigation Control Panel
+Scenario: Filter Navigation By Displayed Types in the Navigation Control Panel
   Given a logged-in site administrator
     and a document 'My Document'
     and the navigation control panel
    When I remove 'Document' from the displayed types list
    Then the document 'My Document' does not show up in the navigation
 
+#Scenario: Filter Navigation By Workflow States in the Navigation Control Panel
+#  Given a logged-in site administrator
+#    and a published document 'My Document'
+#    and a private document 'My Internal Document'
+#    and the navigation control panel
+#   When I enable filtering by workflow states
+#    and I choose to show 'published' items
+#    and I choose to not show 'private' items
+#   Then the document 'My Document' shows up in the navigation
+#    and the document 'My Internal Document' does not show up in the navigation
+
 
 *** Keywords *****************************************************************
 
@@ -42,6 +53,13 @@ Scenario: Add Document to the Displayed Types in the Navigation Control Panel
 the navigation control panel
   Go to  ${PLONE_URL}/@@navigation-controlpanel
 
+a published document '${title}'
+  ${uid}=  a document '${title}'
+  Fire transition  ${uid}  publish
+
+a private document '${title}'
+  a document '${title}'
+
 
 # --- WHEN -------------------------------------------------------------------
 
@@ -60,9 +78,29 @@ I remove '${portal_type}' from the displayed types list
   Click Button  Save
   Wait until page contains  Changes saved
 
+I enable filtering by workflow states
+  Select Checkbox  name=form.widgets.filter_on_workflow:list
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I choose to show '${workflow_state}' items
+  Select Checkbox  xpath=//input[@value='${workflow_state}']
+  Click Button  Save
+  Wait until page contains  Changes saved
+
+I choose to not show '${workflow_state}' items
+  Unselect Checkbox  xpath=//input[@value='${workflow_state}']
+  Click Button  Save
+  Wait until page contains  Changes saved
+
 
 # --- THEN -------------------------------------------------------------------
 
+the document '${title}' shows up in the navigation
+  Go to  ${PLONE_URL}
+  Wait until page contains  Powered by Plone
+  XPath Should Match X Times  //ul[@id='portal-globalnav']/li/a[contains(text(), '${title}')]  1  message=The global navigation should have contained the item '${title}'
+
 the document '${title}' does not show up in the navigation
   Go to  ${PLONE_URL}
   Wait until page contains  Powered by Plone
diff --git a/Products/CMFPlone/tests/testBrowserLayerPrecedence.py b/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
index 87b9a63..b63b1fb 100644
--- a/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
+++ b/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
@@ -19,7 +19,7 @@ class IAdditiveLayer(Interface):
 class TestBrowserLayerPrecedence(PloneTestCase):
 
     def _get_request_interfaces(self):
-        request = TestRequest()
+        request = self.layer['request']
         notify(BeforeTraverseEvent(self.portal, request))
         iro = list(request.__provides__.__iro__)
         return iro
diff --git a/Products/CMFPlone/tests/testControlPanel.py b/Products/CMFPlone/tests/testControlPanel.py
index e082f15..dd2bb7b 100644
--- a/Products/CMFPlone/tests/testControlPanel.py
+++ b/Products/CMFPlone/tests/testControlPanel.py
@@ -13,7 +13,7 @@ def afterSetUp(self):
                            'MemberPassword', 'ZMI', 'SecuritySettings',
                            'NavigationSettings', 'SearchSettings',
                            'errorLog', 'PloneReconfig', 'TypesSettings',
-                           'PloneLanguageTool', 'FilterSettings',
+                           'FilterSettings',
                            'Maintenance']
 
     def testDefaultGroups(self):
diff --git a/setup.py b/setup.py
index a01133c..b7de132 100644
--- a/setup.py
+++ b/setup.py
@@ -62,7 +62,7 @@
         'Products.MimetypesRegistry',
         'Products.PasswordResetTool',
         'Products.PlacelessTranslationService',
-        'Products.PloneLanguageTool',
+        # 'Products.PloneLanguageTool',
         'Products.PlonePAS',
         'Products.PluggableAuthService',
         'Products.PluginRegistry',


