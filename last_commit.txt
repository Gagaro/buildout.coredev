Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-13T16:34:17+03:00
Author: petschki (petschki) <pedrotschki@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2d127d405c3df8335e3f519f496fcc472202b400

Add error message to gruntfile generation script when csscompilation/
jscompilation is missing in bundle registry record

Files changed:
M Products/CMFPlone/_scripts/_generate_gruntfile.py

diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 6ab0c58..463210c 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -341,6 +341,15 @@ def resource_to_dir(resource, file_type='.js'):
                     js_resources.append(resource)
 
             if res_obj.css:
+                if not bundle.csscompilation:
+                    raise KeyError(
+                        'Missing or empty <value key="csscompilation" /> '
+                        'in {}'.format(bundle.__prefix__))
+
+                target_dir = '/'.join(bundle.csscompilation.split('/')[:-1])
+                target_name = bundle.csscompilation.split('/')[-1]
+                target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))  # noqa
+
                 for css_file in res_obj.css:
                     css = portal.unrestrictedTraverse(css_file, None)
                     if css:
@@ -349,9 +358,6 @@ def resource_to_dir(resource, file_type='.js'):
                         relative_paths = '../' * (elements - 1)
 
                         main_css_path = resource_to_dir(css)
-                        target_dir = '/'.join(bundle.csscompilation.split('/')[:-1])  # noqa
-                        target_name = bundle.csscompilation.split('/')[-1]
-                        target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))  # noqa
                         dest_path = '{}/{}'.format(target_path, target_name)
                         less_files.setdefault(dest_path, [])
                         less_files[dest_path].append(main_css_path)
@@ -377,22 +383,31 @@ def resource_to_dir(resource, file_type='.js'):
 
                     else:
                         print "No file found: " + script.js
-        less_configs.append(less_config.format(
-            name=bkey,
-            globalVars=globalVars_string,
-            files=json.dumps(less_files),
-            less_paths=json.dumps(less_paths),
-            sourcemap_url=sourceMap_url,
-            base_path=os.getcwd()))
-        target_dir = '/'.join(bundle.jscompilation.split('/')[:-1])
-        target_name = bundle.jscompilation.split('/')[-1]
-        target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))
-        uc = uglify_config.format(
-            bkey=bkey,
-            destination=target_path + '/' + target_name,
-            files=json.dumps(js_files)
-        )
-        uglify_configs += uc
+
+        if less_files:
+            less_configs.append(less_config.format(
+                name=bkey,
+                globalVars=globalVars_string,
+                files=json.dumps(less_files),
+                less_paths=json.dumps(less_paths),
+                sourcemap_url=sourceMap_url,
+                base_path=os.getcwd()))
+
+        if js_files:
+            if not bundle.jscompilation:
+                raise KeyError(
+                    'Missing or empty <value key="jscompilation" /> '
+                    'in {}'.format(bundle.__prefix__))
+
+            target_dir = '/'.join(bundle.jscompilation.split('/')[:-1])
+            target_name = bundle.jscompilation.split('/')[-1]
+            target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))  # noqa
+            uc = uglify_config.format(
+                bkey=bkey,
+                destination=target_path + '/' + target_name,
+                files=json.dumps(js_files)
+            )
+            uglify_configs += uc
 
         requirejs_tasks = ''
         if js_resources:


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-13T16:39:07+03:00
Author: petschki (petschki) <pedrotschki@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/7fafad721672b2f815ed2b032a0e9d7fe8c2da26

add new commandline argument: --compile-dir

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/_generate_gruntfile.py
M Products/CMFPlone/_scripts/compile_resources.py
M Products/CMFPlone/_scripts/generate_gruntfile.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0165044..a46ceff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,13 @@ Changelog
 5.0.1 (unreleased)
 ------------------
 
+- Add new commandline argument to plone-compile-resource: --compile-dir
+  [petschki]
+
+- Fix issue when csscompilation and/or jscompilation are missing in
+  bundle registry record.
+  [peschki]
+
 - Fix #1131: Allow to compile bundle with more than one resource
   [timitos]
 
@@ -30,7 +37,7 @@ Changelog
 
 - Update hero text. Remove "rocks" line, more descriptive link button.
   [esteele]
-  
+
 - Be able to provide table styles in tinymce configuration
   [vangheem]
 
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 463210c..43d2931 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -26,6 +26,10 @@
     site_id = 'Plone'
 print('Using site id: ' + site_id)
 
+compile_dir = ''
+if 'COMPILE_DIR' in os.environ:
+    compile_path = os.environ['COMPILE_DIR']
+
 portal = app[site_id]  # noqa
 from zope.site.hooks import setSite
 setSite(portal)
@@ -316,10 +320,31 @@ def resource_to_dir(resource, file_type='.js'):
 bundle_grunt_tasks = ""
 
 for bkey, bundle in bundles.items():
+    css_target_path = css_target_name = ''
+    js_target_path = js_target_name = ''
+
+    if compile_path:
+        target_name = bundle.__prefix__.split('/').pop()
+        css_target_name = target_name + 'css'
+        js_target_name = target_name + 'js'
+        css_target_path = js_target_path = os.path.abspath(compile_path)
+    else:
+        if bundle.csscompilation:
+            css_compilation = bundle.csscompilation.split('/')
+            css_target_name = css_compilation[-1]
+            css_target_path = resource_to_dir(portal.unrestrictedTraverse(
+                '/'.join(css_compilation[:-1])))
+        if bundle.jscompilation:
+            js_compilation = bundle.jscompilation.split('/')
+            js_target_name = js_compilation[-1]
+            js_target_path = resource_to_dir(portal.unrestrictedTraverse(
+                '/'.join(js_compilation[:-1])))
+
     if bundle.compile:
         less_files = {}
         js_files = []
         js_resources = []
+        sed_task_ids = []
         for resource in bundle.resources:
             res_obj = resources[resource]
             if res_obj.js:
@@ -341,15 +366,11 @@ def resource_to_dir(resource, file_type='.js'):
                     js_resources.append(resource)
 
             if res_obj.css:
-                if not bundle.csscompilation:
+                if not css_target_path:
                     raise KeyError(
                         'Missing or empty <value key="csscompilation" /> '
                         'in {}'.format(bundle.__prefix__))
 
-                target_dir = '/'.join(bundle.csscompilation.split('/')[:-1])
-                target_name = bundle.csscompilation.split('/')[-1]
-                target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))  # noqa
-
                 for css_file in res_obj.css:
                     css = portal.unrestrictedTraverse(css_file, None)
                     if css:
@@ -358,25 +379,30 @@ def resource_to_dir(resource, file_type='.js'):
                         relative_paths = '../' * (elements - 1)
 
                         main_css_path = resource_to_dir(css)
-                        dest_path = '{}/{}'.format(target_path, target_name)
+                        dest_path = '{}/{}'.format(
+                            css_target_path, css_target_name)
                         less_files.setdefault(dest_path, [])
                         less_files[dest_path].append(main_css_path)
-                        sourceMap_url = target_name + '.map'
+                        sourceMap_url = css_target_name + '.map'
                         watch_files.append(main_css_path)
                         # replace urls
 
                         for webpath, direc in less_directories.items():
+                            sed_id = 'sed' + str(sed_count)
+                            sed_task_ids.append("'sed:%s'" % sed_id)
                             sed_config_final += sed_config.format(
-                                path=target_path + '/' + target_name,
-                                name='sed' + str(sed_count),
+                                path=css_target_path + '/' + css_target_name,
+                                name=sed_id,
                                 pattern=direc,
                                 destination=relative_paths + webpath)
                             sed_count += 1
 
                         # replace the final missing paths
+                        sed_id = 'sed' + str(sed_count)
+                        sed_task_ids.append("'sed:%s'" % sed_id)
                         sed_config_final += sed_config.format(
-                            path=target_path + '/' + target_name,
-                            name='sed' + str(sed_count),
+                            path=css_target_path + '/' + css_target_name,
+                            name=sed_id,
                             pattern=os.getcwd(),
                             destination='')
                         sed_count += 1
@@ -394,17 +420,14 @@ def resource_to_dir(resource, file_type='.js'):
                 base_path=os.getcwd()))
 
         if js_files:
-            if not bundle.jscompilation:
+            if not js_target_path:
                 raise KeyError(
                     'Missing or empty <value key="jscompilation" /> '
                     'in {}'.format(bundle.__prefix__))
 
-            target_dir = '/'.join(bundle.jscompilation.split('/')[:-1])
-            target_name = bundle.jscompilation.split('/')[-1]
-            target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))  # noqa
             uc = uglify_config.format(
                 bkey=bkey,
-                destination=target_path + '/' + target_name,
+                destination=js_target_path + '/' + js_target_name,
                 files=json.dumps(js_files)
             )
             uglify_configs += uc
@@ -414,8 +437,8 @@ def resource_to_dir(resource, file_type='.js'):
             requirejs_tasks = ','.join(['"requirejs:' + r + '"' for r in js_resources]) + ','
         bundle_grunt_tasks += (
             "\ngrunt.registerTask('compile-%s',"
-            "[%s 'less:%s', 'sed', 'uglify:%s']);"
-        ) % (bkey, requirejs_tasks, bkey, bkey)
+            "[%s 'less:%s', %s, 'uglify:%s']);"
+        ) % (bkey, requirejs_tasks, bkey, ', '.join(sed_task_ids), bkey)
 
 
 gruntfile = open('Gruntfile.js', 'w')
diff --git a/Products/CMFPlone/_scripts/compile_resources.py b/Products/CMFPlone/_scripts/compile_resources.py
index faca5f2..77a7cbf 100644
--- a/Products/CMFPlone/_scripts/compile_resources.py
+++ b/Products/CMFPlone/_scripts/compile_resources.py
@@ -17,6 +17,8 @@
                          'instance or client1')
 parser.add_argument('--bundle', dest='bundle', default='all',
                     help='Name of bundle to compile. Defaults to all of them.')
+parser.add_argument('--compile-dir', dest='compile_dir', default='',
+                    help='Output directory for the compiled bundle files.')
 
 this_dir = os.path.dirname(os.path.realpath(__file__))
 
diff --git a/Products/CMFPlone/_scripts/generate_gruntfile.py b/Products/CMFPlone/_scripts/generate_gruntfile.py
index d5dd5a2..f33b0e8 100644
--- a/Products/CMFPlone/_scripts/generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/generate_gruntfile.py
@@ -15,6 +15,8 @@
                     help='path to instance executable. If not provided, '
                          'will look in bin this was executed from for '
                          'instance or client1')
+parser.add_argument('--compile-dir', dest='compile_dir', default='',
+                    help='Output directory for the compiled bundle files.')
 
 this_dir = os.path.dirname(os.path.realpath(__file__))
 
@@ -37,6 +39,7 @@ def main(argv=sys.argv):
     script_path = os.path.join(this_dir, '_generate_gruntfile.py')
     cmd = [instance, 'run', script_path]
     os.environ['SITE_ID'] = args.site_id
+    os.environ['COMPILE_DIR'] = args.compile_dir
 
     print('Running command: %s' % ' '.join(cmd))
     subprocess.check_call(cmd, env=os.environ)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-13T16:51:11+03:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/778d2eb870413935ae11d2e4e8f991b772333cbf

Merge pull request #1161 from plone/improve_compile_resource_script

Improve compile resource script

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/_generate_gruntfile.py
M Products/CMFPlone/_scripts/compile_resources.py
M Products/CMFPlone/_scripts/generate_gruntfile.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0165044..a46ceff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,13 @@ Changelog
 5.0.1 (unreleased)
 ------------------
 
+- Add new commandline argument to plone-compile-resource: --compile-dir
+  [petschki]
+
+- Fix issue when csscompilation and/or jscompilation are missing in
+  bundle registry record.
+  [peschki]
+
 - Fix #1131: Allow to compile bundle with more than one resource
   [timitos]
 
@@ -30,7 +37,7 @@ Changelog
 
 - Update hero text. Remove "rocks" line, more descriptive link button.
   [esteele]
-  
+
 - Be able to provide table styles in tinymce configuration
   [vangheem]
 
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 6ab0c58..43d2931 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -26,6 +26,10 @@
     site_id = 'Plone'
 print('Using site id: ' + site_id)
 
+compile_dir = ''
+if 'COMPILE_DIR' in os.environ:
+    compile_path = os.environ['COMPILE_DIR']
+
 portal = app[site_id]  # noqa
 from zope.site.hooks import setSite
 setSite(portal)
@@ -316,10 +320,31 @@ def resource_to_dir(resource, file_type='.js'):
 bundle_grunt_tasks = ""
 
 for bkey, bundle in bundles.items():
+    css_target_path = css_target_name = ''
+    js_target_path = js_target_name = ''
+
+    if compile_path:
+        target_name = bundle.__prefix__.split('/').pop()
+        css_target_name = target_name + 'css'
+        js_target_name = target_name + 'js'
+        css_target_path = js_target_path = os.path.abspath(compile_path)
+    else:
+        if bundle.csscompilation:
+            css_compilation = bundle.csscompilation.split('/')
+            css_target_name = css_compilation[-1]
+            css_target_path = resource_to_dir(portal.unrestrictedTraverse(
+                '/'.join(css_compilation[:-1])))
+        if bundle.jscompilation:
+            js_compilation = bundle.jscompilation.split('/')
+            js_target_name = js_compilation[-1]
+            js_target_path = resource_to_dir(portal.unrestrictedTraverse(
+                '/'.join(js_compilation[:-1])))
+
     if bundle.compile:
         less_files = {}
         js_files = []
         js_resources = []
+        sed_task_ids = []
         for resource in bundle.resources:
             res_obj = resources[resource]
             if res_obj.js:
@@ -341,6 +366,11 @@ def resource_to_dir(resource, file_type='.js'):
                     js_resources.append(resource)
 
             if res_obj.css:
+                if not css_target_path:
+                    raise KeyError(
+                        'Missing or empty <value key="csscompilation" /> '
+                        'in {}'.format(bundle.__prefix__))
+
                 for css_file in res_obj.css:
                     css = portal.unrestrictedTraverse(css_file, None)
                     if css:
@@ -349,58 +379,66 @@ def resource_to_dir(resource, file_type='.js'):
                         relative_paths = '../' * (elements - 1)
 
                         main_css_path = resource_to_dir(css)
-                        target_dir = '/'.join(bundle.csscompilation.split('/')[:-1])  # noqa
-                        target_name = bundle.csscompilation.split('/')[-1]
-                        target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))  # noqa
-                        dest_path = '{}/{}'.format(target_path, target_name)
+                        dest_path = '{}/{}'.format(
+                            css_target_path, css_target_name)
                         less_files.setdefault(dest_path, [])
                         less_files[dest_path].append(main_css_path)
-                        sourceMap_url = target_name + '.map'
+                        sourceMap_url = css_target_name + '.map'
                         watch_files.append(main_css_path)
                         # replace urls
 
                         for webpath, direc in less_directories.items():
+                            sed_id = 'sed' + str(sed_count)
+                            sed_task_ids.append("'sed:%s'" % sed_id)
                             sed_config_final += sed_config.format(
-                                path=target_path + '/' + target_name,
-                                name='sed' + str(sed_count),
+                                path=css_target_path + '/' + css_target_name,
+                                name=sed_id,
                                 pattern=direc,
                                 destination=relative_paths + webpath)
                             sed_count += 1
 
                         # replace the final missing paths
+                        sed_id = 'sed' + str(sed_count)
+                        sed_task_ids.append("'sed:%s'" % sed_id)
                         sed_config_final += sed_config.format(
-                            path=target_path + '/' + target_name,
-                            name='sed' + str(sed_count),
+                            path=css_target_path + '/' + css_target_name,
+                            name=sed_id,
                             pattern=os.getcwd(),
                             destination='')
                         sed_count += 1
 
                     else:
                         print "No file found: " + script.js
-        less_configs.append(less_config.format(
-            name=bkey,
-            globalVars=globalVars_string,
-            files=json.dumps(less_files),
-            less_paths=json.dumps(less_paths),
-            sourcemap_url=sourceMap_url,
-            base_path=os.getcwd()))
-        target_dir = '/'.join(bundle.jscompilation.split('/')[:-1])
-        target_name = bundle.jscompilation.split('/')[-1]
-        target_path = resource_to_dir(portal.unrestrictedTraverse(target_dir))
-        uc = uglify_config.format(
-            bkey=bkey,
-            destination=target_path + '/' + target_name,
-            files=json.dumps(js_files)
-        )
-        uglify_configs += uc
+
+        if less_files:
+            less_configs.append(less_config.format(
+                name=bkey,
+                globalVars=globalVars_string,
+                files=json.dumps(less_files),
+                less_paths=json.dumps(less_paths),
+                sourcemap_url=sourceMap_url,
+                base_path=os.getcwd()))
+
+        if js_files:
+            if not js_target_path:
+                raise KeyError(
+                    'Missing or empty <value key="jscompilation" /> '
+                    'in {}'.format(bundle.__prefix__))
+
+            uc = uglify_config.format(
+                bkey=bkey,
+                destination=js_target_path + '/' + js_target_name,
+                files=json.dumps(js_files)
+            )
+            uglify_configs += uc
 
         requirejs_tasks = ''
         if js_resources:
             requirejs_tasks = ','.join(['"requirejs:' + r + '"' for r in js_resources]) + ','
         bundle_grunt_tasks += (
             "\ngrunt.registerTask('compile-%s',"
-            "[%s 'less:%s', 'sed', 'uglify:%s']);"
-        ) % (bkey, requirejs_tasks, bkey, bkey)
+            "[%s 'less:%s', %s, 'uglify:%s']);"
+        ) % (bkey, requirejs_tasks, bkey, ', '.join(sed_task_ids), bkey)
 
 
 gruntfile = open('Gruntfile.js', 'w')
diff --git a/Products/CMFPlone/_scripts/compile_resources.py b/Products/CMFPlone/_scripts/compile_resources.py
index faca5f2..77a7cbf 100644
--- a/Products/CMFPlone/_scripts/compile_resources.py
+++ b/Products/CMFPlone/_scripts/compile_resources.py
@@ -17,6 +17,8 @@
                          'instance or client1')
 parser.add_argument('--bundle', dest='bundle', default='all',
                     help='Name of bundle to compile. Defaults to all of them.')
+parser.add_argument('--compile-dir', dest='compile_dir', default='',
+                    help='Output directory for the compiled bundle files.')
 
 this_dir = os.path.dirname(os.path.realpath(__file__))
 
diff --git a/Products/CMFPlone/_scripts/generate_gruntfile.py b/Products/CMFPlone/_scripts/generate_gruntfile.py
index d5dd5a2..f33b0e8 100644
--- a/Products/CMFPlone/_scripts/generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/generate_gruntfile.py
@@ -15,6 +15,8 @@
                     help='path to instance executable. If not provided, '
                          'will look in bin this was executed from for '
                          'instance or client1')
+parser.add_argument('--compile-dir', dest='compile_dir', default='',
+                    help='Output directory for the compiled bundle files.')
 
 this_dir = os.path.dirname(os.path.realpath(__file__))
 
@@ -37,6 +39,7 @@ def main(argv=sys.argv):
     script_path = os.path.join(this_dir, '_generate_gruntfile.py')
     cmd = [instance, 'run', script_path]
     os.environ['SITE_ID'] = args.site_id
+    os.environ['COMPILE_DIR'] = args.compile_dir
 
     print('Running command: %s' % ' '.join(cmd))
     subprocess.check_call(cmd, env=os.environ)


