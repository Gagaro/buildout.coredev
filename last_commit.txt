Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-23T13:30:30-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/5751062f7cb7ad67eccc7a0dbf7bf45b96d83bb7

add travis configuration

Files changed:
A .travis.yml
A tox.ini

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..ddfd1fa
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+sudo: false
+env:
+  - TOXENV=py26
+  - TOXENV=py27
+  - TOXENV=py32
+  - TOXENV=py33
+  - TOXENV=py34
+  - TOXENV=py35
+  - TOXENV=pypy
+  - TOXENV=pypy3
+install: "pip install tox"
+script: "tox"
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..e0769ac
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,8 @@
+[tox]
+envlist = 
+    py26,py27,py32,py33,py34,py35,pypy,pypy3
+
+[testenv]
+commands = 
+    python setup.py -q dev
+    python setup.py -q test -q


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-23T13:35:06-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/285fe680886e5f67098c4bce11904b0bcdfcf2da

fix test command

Files changed:
M .gitignore
M tox.ini

diff --git a/.gitignore b/.gitignore
index f55d4cf..5d5c3f1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,4 @@
 *.pyo
 /plone.intelligenttext.egg-info/
 /dist/
-
+.tox
diff --git a/tox.ini b/tox.ini
index e0769ac..8614a6f 100644
--- a/tox.ini
+++ b/tox.ini
@@ -4,5 +4,5 @@ envlist =
 
 [testenv]
 commands = 
-    python setup.py -q dev
+    python setup.py -q develop easy_install plone.intelligenttext
     python setup.py -q test -q


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-23T14:13:07-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/528ecf222be73ad7b55d1295e1dd532b7613142c

work toward python 3 compatibility

Files changed:
M CHANGES.rst
M plone/intelligenttext/README.txt
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M tox.ini

diff --git a/CHANGES.rst b/CHANGES.rst
index 00cabf3..0a569c3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,8 @@ Changelog
 2.0.4 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Make compatible with Python 3.
+  [davisagli]
 
 
 2.0.3 (2015-05-11)
diff --git a/plone/intelligenttext/README.txt b/plone/intelligenttext/README.txt
index edd47a3..74db02e 100644
--- a/plone/intelligenttext/README.txt
+++ b/plone/intelligenttext/README.txt
@@ -15,15 +15,15 @@ The basic usage is turning intelligenttext into html:
 
     >>> from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
     >>> text = 'Go to http://plone.org'
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>
 
 And the other way around:
 
     >>> from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
     >>> html = 'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
-    >>> convertHtmlToWebIntelligentPlainText(html)
-    'Go to http://plone.org'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(html))
+    Go to http://plone.org
 
 
 Intelligent text to html
@@ -33,19 +33,18 @@ We can get a hyperlink.  We always add rel="nofollow" to make this
 less interesting for spammers.
 
     >>> orig = "A test http://test.com"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test <a href="http://test.com" rel="nofollow">http://test.com</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="http://test.com" rel="nofollow">http://test.com</a>
 
 An email address should be clickable too:
 
     >>> orig = "A test test@test.com of mailto"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto
 
 Some basic fallback would be nice:
 
-    >>> convertWebIntelligentPlainTextToHtml(None)
-    ''
+    >>> bprint(convertWebIntelligentPlainTextToHtml(None))
 
 Text, links and email addressed can be split over multiple lines.
 
@@ -53,8 +52,8 @@ Text, links and email addressed can be split over multiple lines.
     ... URL: http://test.com End
     ... Mail: test@test.com End
     ... URL: http://foo.com End"""
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End
 
 
 Having the links at the end of the line should not have adverse effects.
@@ -63,8 +62,8 @@ Having the links at the end of the line should not have adverse effects.
     ... URL: http://test.com
     ... Mail: test@test.com
     ... URL: http://foo.com"""
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
 
 
 Indentation should be preserved.
@@ -73,113 +72,113 @@ Indentation should be preserved.
     ...   URL: http://test.com
     ...     Mail: test@test.com
     ...       URL: http://foo.com"""
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>'
-    >>> convertWebIntelligentPlainTextToHtml(orig).count('&nbsp;')
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
+    >>> convertWebIntelligentPlainTextToHtml(orig).count(b'&nbsp;')
     12
 
 HTML entities should be escaped.
 
     >>> orig = "Some & funny < characters"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'Some &amp; funny &lt; characters'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    Some &amp; funny &lt; characters
 
 Accentuated characters, like in French, should be html escaped.
 
     >>> orig = "The French use é à ô ù à and ç."
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.
 
 Links with ampersands in them should be handled correctly.
 
     >>> orig = "http://google.com/ask?question=everything&answer=42"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    '<a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    <a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>
 
 We want to make sure that the text representation of long urls is not too long.
 
     >>> url0 = "http://verylonghost.longsubdomain.veryverylongdomain.com/index.html"
-    >>> convertWebIntelligentPlainTextToHtml(url0)
-    '<a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url0))
+    <a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>
     >>> url1 = "http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html"
-    >>> convertWebIntelligentPlainTextToHtml(url1)
-    '<a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url1))
+    <a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>
     >>> url2 = "https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11"
-    >>> convertWebIntelligentPlainTextToHtml(url2)
-    '<a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url2))
+    <a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>
 
 If there is a url in brackets, the link should not contain one of the brackets.
 
     >>> bracket_url = "<http://plone.org/products/poi/issues/155>"
-    >>> convertWebIntelligentPlainTextToHtml(bracket_url)
-    '&lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(bracket_url))
+    &lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;
 
 Port numbers should be recognized as linkworthy.
 
     >>> url = "http://plone3.freeman-centre.ac.uk:8080/caldav"
-    >>> convertWebIntelligentPlainTextToHtml(url)
-    '<a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>
 
 localhost should be good.
 
     >>> url = "http://localhost:8080/"
-    >>> convertWebIntelligentPlainTextToHtml(url)
-    '<a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>
 
 Check ip numbers too while we are at it.
 
     >>> url = "http://127.0.0.1:8080/"
-    >>> convertWebIntelligentPlainTextToHtml(url)
-    '<a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>'
-    >>> convertWebIntelligentPlainTextToHtml("http://255.255.255.255")
-    '<a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>'
-    >>> convertWebIntelligentPlainTextToHtml("http://0.0.0.0")
-    '<a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://255.255.255.255"))
+    <a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://0.0.0.0"))
+    <a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>
 
 
 ftp is accepted.
 
-    >>> convertWebIntelligentPlainTextToHtml("ftp://localhost")
-    '<a href="ftp://localhost" rel="nofollow">ftp://localhost</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml("ftp://localhost"))
+    <a href="ftp://localhost" rel="nofollow">ftp://localhost</a>
 
 https is accepted.
 
-    >>> convertWebIntelligentPlainTextToHtml("https://localhost")
-    '<a href="https://localhost" rel="nofollow">https://localhost</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml("https://localhost"))
+    <a href="https://localhost" rel="nofollow">https://localhost</a>
 
 Unicode should be fine too.
 
     >>> text = u"Línk tö http://foo.ni"
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'L&Atilde;&shy;nk t&Atilde;&para; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    L&Atilde;&shy;nk t&Atilde;&para; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
 
 Leading whitespace is converted to non breaking spaces to preserve
 indentation:
 
     >>> text = "Some text.\n    And some indentation."
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.
 
 Leading tabs are converted to spaces.  The default is 4:
 
     >>> text = "Before the tab:\n\tand after the tab."
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
 
 You can specify a different tab width:
 
-    >>> convertWebIntelligentPlainTextToHtml(text, tab_width=2)
-    'Before the tab:<br />&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width=2))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
 
 In case the tab width is not an integer, we try to convert it:
 
-    >>> convertWebIntelligentPlainTextToHtml(text, tab_width='2')
-    'Before the tab:<br />&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='2'))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
 
 When that fails we fall back to 4 spaces:
 
-    >>> convertWebIntelligentPlainTextToHtml(text, tab_width='1.5')
-    'Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='1.5'))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
 
 
 Html to intelligent text
@@ -189,81 +188,94 @@ We want the transform to work the other way around too.  For starters
 this means that tags must be stripped.
 
     >>> orig = "Some <b>bold</b> text."
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Some bold text.'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some bold text.
 
 Some basic fallback would be nice:
 
-    >>> convertHtmlToWebIntelligentPlainText(None)
-    ''
+    >>> bprint(convertHtmlToWebIntelligentPlainText(None))
 
 Line breaks need to be handled.
 
     >>> orig = "Some<br/>broken<BR/>text<br />"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Some\nbroken\ntext\n'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some
+    broken
+    text
 
 Starting blocks:
 
     >>> orig = "A block<dt>there</dt>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A block\n\nthere'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A block
+    <BLANKLINE>
+    there
 
 Ending blocks:
 
     >>> orig = "<p>Paragraph</p>Other stuff"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Paragraph\n\nOther stuff'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Paragraph
+    <BLANKLINE>
+    Other stuff
 
 Indenting blocks:
 
     >>> orig = "An<blockquote>Indented blockquote</blockquote>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'An\n\n  Indented blockquote'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An
+    <BLANKLINE>
+      Indented blockquote
 
 Lists:
 
     >>> orig = "A list<ul><li>Foo</li><li>Bar</li></ul>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A list\n\n  - Foo\n\n  - Bar\n\n'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A list
+    <BLANKLINE>
+      - Foo
+        - Bar
 
 Non breaking spaces:
 
     >>> orig = "Some space &nbsp;&nbsp;here"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Some space   here'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some space   here
 
 Angles:
 
     >>> orig = "Watch &lt;this&gt; and &lsaquo;that&rsaquo;"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Watch <this> and &#8249;that&#8250;'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Watch <this> and &#8249;that&#8250;
 
 Bullets:
 
     >>> orig = "A &bull; bullet"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A &#8226; bullet'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8226; bullet
 
 Ampersands:
 
     >>> orig = "An &amp; ampersand"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'An & ampersand'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An & ampersand
 
 Entities:
 
     >>> orig = "A &mdash; dash"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A &#8212; dash'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8212; dash
 
 Pre formatted text:
 
     >>> orig = "A <pre>  pre\n  section</pre>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A \n\n  pre\n  section\n\n'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A 
+    <BLANKLINE>
+      pre
+      section
 
 White space:
     >>> orig = "A \n\t spaceful, <b>  tag-filled</b>, <b> <i>  snippet\n</b></i>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A spaceful, tag-filled, snippet '
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A spaceful, tag-filled, snippet 
diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py
index 8fe9730..2368d51 100644
--- a/plone/intelligenttext/tests.py
+++ b/plone/intelligenttext/tests.py
@@ -4,8 +4,15 @@
 optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
 
 
+def bprint(s):
+    if not isinstance(s, str):
+        s = s.decode()
+    print(s.strip())
+
+
 def test_suite():
     return unittest.TestSuite([
         doctest.DocFileSuite('README.txt',
+                             globs={'bprint': bprint},
                              optionflags=optionflags,)
         ])
diff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py
index 709aef2..3a3a832 100644
--- a/plone/intelligenttext/transforms.py
+++ b/plone/intelligenttext/transforms.py
@@ -1,5 +1,19 @@
-from htmlentitydefs import entitydefs
 import re
+import sys
+
+PY3 = sys.version_info[0] == 3
+if PY3:
+    from html.entities import entitydefs
+    unicode = str
+else:
+    from htmlentitydefs import entitydefs
+
+
+def safe_decode(s, encoding='utf-8', errors='strict'):
+    if isinstance(s, unicode):
+        return s
+    return s.decode(encoding)
+
 
 class WebIntelligentToHtmlConverter(object):
     urlRegexp = re.compile(r'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\b(?::\d+)?(?:\/[^"\'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^"\'<>()\[\]{}\s\x7f-\xff]+)*)?)', re.I|re.S|re.U)
@@ -14,8 +28,7 @@ def __call__(self):
         text = self.orig
         if text is None:
             text = ''
-        if not isinstance(text, unicode):
-            text = unicode(text, 'utf-8', 'replace')
+        text = safe_decode(text, errors='replace')
 
         # Do &amp; separately, else, it may replace an already-inserted & from
         # an entity with &amp;, so < becomes &lt; becomes &amp;lt;
@@ -24,7 +37,7 @@ def __call__(self):
         for entity, letter in entitydefs.items():
             if entity != 'amp':
                 text = text.replace(
-                    letter.decode('latin-1'), '&' + entity + ';')
+                    safe_decode(letter, 'latin-1'), '&' + entity + ';')
 
         text = self.urlRegexp.subn(self.replaceURL, text)[0]
         text = self.emailRegexp.subn(self.replaceEmail, text)[0]
@@ -40,7 +53,7 @@ def __call__(self):
         return text
 
     @staticmethod
-    def abbreviateUrl(url, max = 60, ellipsis = "[&hellip;]"):
+    def abbreviateUrl(url, max=60, ellipsis="[&hellip;]"):
         """very long urls are abbreviated to allow nicer layout
         """
         if len(url) < max:
@@ -51,12 +64,12 @@ def abbreviateUrl(url, max = 60, ellipsis = "[&hellip;]"):
             protocol = url[0:protocolend+2]
             url = url[protocolend+2:]
         list = url.split("/")
-        if len(list) < 3 or len(list[0])+len(list[-1])>max:
+        if len(list) < 3 or len(list[0]) + len(list[-1]) > max:
             url = protocol + url
-            center = (max-5)/2
+            center = (max-5) // 2
             return url[:center] + ellipsis + url[-center:]
 
-        return protocol + list[0] +"/" +ellipsis + "/" + list[-1]
+        return protocol + list[0] + "/" + ellipsis + "/" + list[-1]
 
     @classmethod
     def replaceURL(cls, match):
diff --git a/tox.ini b/tox.ini
index 8614a6f..9b6ce9e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -4,5 +4,5 @@ envlist =
 
 [testenv]
 commands = 
-    python setup.py -q develop easy_install plone.intelligenttext
-    python setup.py -q test -q
+    python setup.py -q install
+    python setup.py -q test


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-23T14:46:01-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/c3fdbc83537722e3d718a62138d2889612f3a365

fix handling of entities

Files changed:
M plone/intelligenttext/README.txt
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py

diff --git a/plone/intelligenttext/README.txt b/plone/intelligenttext/README.txt
index 74db02e..cac09e9 100644
--- a/plone/intelligenttext/README.txt
+++ b/plone/intelligenttext/README.txt
@@ -150,7 +150,7 @@ Unicode should be fine too.
 
     >>> text = u"Línk tö http://foo.ni"
     >>> bprint(convertWebIntelligentPlainTextToHtml(text))
-    L&Atilde;&shy;nk t&Atilde;&para; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
+    L&iacute;nk t&ouml; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
 
 Leading whitespace is converted to non breaking spaces to preserve
 indentation:
diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py
index 2368d51..5a653a8 100644
--- a/plone/intelligenttext/tests.py
+++ b/plone/intelligenttext/tests.py
@@ -14,5 +14,6 @@ def test_suite():
     return unittest.TestSuite([
         doctest.DocFileSuite('README.txt',
                              globs={'bprint': bprint},
+                             encoding='utf-8',
                              optionflags=optionflags,)
         ])
diff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py
index 3a3a832..bcce5b9 100644
--- a/plone/intelligenttext/transforms.py
+++ b/plone/intelligenttext/transforms.py
@@ -3,10 +3,11 @@
 
 PY3 = sys.version_info[0] == 3
 if PY3:
-    from html.entities import entitydefs
+    from html.entities import name2codepoint
     unicode = str
+    unichr = chr
 else:
-    from htmlentitydefs import entitydefs
+    from htmlentitydefs import name2codepoint
 
 
 def safe_decode(s, encoding='utf-8', errors='strict'):
@@ -34,10 +35,9 @@ def __call__(self):
         # an entity with &amp;, so < becomes &lt; becomes &amp;lt;
         text = text.replace('&', '&amp;')
         # Make funny characters into html entity defs
-        for entity, letter in entitydefs.items():
+        for entity, codepoint in name2codepoint.items():
             if entity != 'amp':
-                text = text.replace(
-                    safe_decode(letter, 'latin-1'), '&' + entity + ';')
+                text = text.replace(unichr(codepoint), '&' + entity + ';')
 
         text = self.urlRegexp.subn(self.replaceURL, text)[0]
         text = self.emailRegexp.subn(self.replaceEmail, text)[0]
@@ -158,11 +158,11 @@ def fixTagWhitespace(match):
 
     # Fix entities
     text = text.replace('&nbsp;', ' ')
-    for entity, letter in entitydefs.items():
+    for entity, codepoint in name2codepoint.items():
         # Do &lt; and &gt; later, else we may be creating what looks like
         # tags
-        if entity != 'lt' and entity != 'gt':
-            text = text.replace('&' + entity + ';', letter)
+        if entity != 'lt' and entity != 'gt' and entity != 'amp':
+            text = text.replace('&' + entity + ';', '&#' + str(codepoint) + ';')
 
     # XXX: Remove <head>, <script>, <style> ?
 
@@ -190,6 +190,7 @@ def fixTagWhitespace(match):
     # Fix < and > entities
     text = text.replace('&lt;', '<')
     text = text.replace('&gt;', '>')
+    text = text.replace('&amp;', '&')
 
     # Restore pres
     for marker, section in preSections.items():


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-23T14:48:17-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/b919ffc3cc35e57a0fa4b674fad96652f9195e78

don't test python 3.2 (no u'' literals) or 3.5 (not on travis yet)

Files changed:
M .travis.yml
M tox.ini

diff --git a/.travis.yml b/.travis.yml
index ddfd1fa..cb8aa96 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,10 +3,8 @@ sudo: false
 env:
   - TOXENV=py26
   - TOXENV=py27
-  - TOXENV=py32
   - TOXENV=py33
   - TOXENV=py34
-  - TOXENV=py35
   - TOXENV=pypy
   - TOXENV=pypy3
 install: "pip install tox"
diff --git a/tox.ini b/tox.ini
index 9b6ce9e..f5229bd 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,6 +1,6 @@
 [tox]
 envlist = 
-    py26,py27,py32,py33,py34,py35,pypy,pypy3
+    py26,py27,py33,py34,py35,pypy,pypy3
 
 [testenv]
 commands = 


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-25T12:33:21-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/eb003a6d2735b6d1552fcba256be980f73580b33

increment version

Files changed:
M CHANGES.rst
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0a569c3..75ab534 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,7 +2,7 @@ Changelog
 =========
 
 
-2.0.4 (unreleased)
+2.1.0 (unreleased)
 ------------------
 
 - Make compatible with Python 3.
diff --git a/setup.py b/setup.py
index 195bda4..b686623 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '2.0.4.dev0'
+version = '2.1.0.dev0'
 
 setup(name='plone.intelligenttext',
       version=version,


Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2015-09-28T13:48:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.intelligenttext/commit/433e43b9b2d4572c0050bf33462241cfcc2d0668

Merge pull request #2 from plone/travis

Python 3 compatibility

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M CHANGES.rst
M plone/intelligenttext/README.txt
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M setup.py

diff --git a/.gitignore b/.gitignore
index f55d4cf..5d5c3f1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,4 @@
 *.pyo
 /plone.intelligenttext.egg-info/
 /dist/
-
+.tox
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..cb8aa96
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,11 @@
+language: python
+sudo: false
+env:
+  - TOXENV=py26
+  - TOXENV=py27
+  - TOXENV=py33
+  - TOXENV=py34
+  - TOXENV=pypy
+  - TOXENV=pypy3
+install: "pip install tox"
+script: "tox"
diff --git a/CHANGES.rst b/CHANGES.rst
index 00cabf3..75ab534 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,10 +2,11 @@ Changelog
 =========
 
 
-2.0.4 (unreleased)
+2.1.0 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Make compatible with Python 3.
+  [davisagli]
 
 
 2.0.3 (2015-05-11)
diff --git a/plone/intelligenttext/README.txt b/plone/intelligenttext/README.txt
index edd47a3..cac09e9 100644
--- a/plone/intelligenttext/README.txt
+++ b/plone/intelligenttext/README.txt
@@ -15,15 +15,15 @@ The basic usage is turning intelligenttext into html:
 
     >>> from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
     >>> text = 'Go to http://plone.org'
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>
 
 And the other way around:
 
     >>> from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
     >>> html = 'Go to <a href="http://plone.org" rel="nofollow">http://plone.org</a>'
-    >>> convertHtmlToWebIntelligentPlainText(html)
-    'Go to http://plone.org'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(html))
+    Go to http://plone.org
 
 
 Intelligent text to html
@@ -33,19 +33,18 @@ We can get a hyperlink.  We always add rel="nofollow" to make this
 less interesting for spammers.
 
     >>> orig = "A test http://test.com"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test <a href="http://test.com" rel="nofollow">http://test.com</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="http://test.com" rel="nofollow">http://test.com</a>
 
 An email address should be clickable too:
 
     >>> orig = "A test test@test.com of mailto"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto
 
 Some basic fallback would be nice:
 
-    >>> convertWebIntelligentPlainTextToHtml(None)
-    ''
+    >>> bprint(convertWebIntelligentPlainTextToHtml(None))
 
 Text, links and email addressed can be split over multiple lines.
 
@@ -53,8 +52,8 @@ Text, links and email addressed can be split over multiple lines.
     ... URL: http://test.com End
     ... Mail: test@test.com End
     ... URL: http://foo.com End"""
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End
 
 
 Having the links at the end of the line should not have adverse effects.
@@ -63,8 +62,8 @@ Having the links at the end of the line should not have adverse effects.
     ... URL: http://test.com
     ... Mail: test@test.com
     ... URL: http://foo.com"""
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
 
 
 Indentation should be preserved.
@@ -73,113 +72,113 @@ Indentation should be preserved.
     ...   URL: http://test.com
     ...     Mail: test@test.com
     ...       URL: http://foo.com"""
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>'
-    >>> convertWebIntelligentPlainTextToHtml(orig).count('&nbsp;')
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    A test<br />&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>
+    >>> convertWebIntelligentPlainTextToHtml(orig).count(b'&nbsp;')
     12
 
 HTML entities should be escaped.
 
     >>> orig = "Some & funny < characters"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'Some &amp; funny &lt; characters'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    Some &amp; funny &lt; characters
 
 Accentuated characters, like in French, should be html escaped.
 
     >>> orig = "The French use é à ô ù à and ç."
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    'The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;.
 
 Links with ampersands in them should be handled correctly.
 
     >>> orig = "http://google.com/ask?question=everything&answer=42"
-    >>> convertWebIntelligentPlainTextToHtml(orig)
-    '<a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(orig))
+    <a href="http://google.com/ask?question=everything&amp;answer=42" rel="nofollow">http://google.com/ask?question=everything&amp;answer=42</a>
 
 We want to make sure that the text representation of long urls is not too long.
 
     >>> url0 = "http://verylonghost.longsubdomain.veryverylongdomain.com/index.html"
-    >>> convertWebIntelligentPlainTextToHtml(url0)
-    '<a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url0))
+    <a href="http://verylonghost.longsubdomain.veryverylongdomain.com/index.html" rel="nofollow">http://verylonghost.longsub[&hellip;]rylongdomain.com/index.html</a>
     >>> url1 = "http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html"
-    >>> convertWebIntelligentPlainTextToHtml(url1)
-    '<a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url1))
+    <a href="http://www.example.com/longnamefortheeffectofsuch/thisisalsolong/hereisthelastrealroot/thisisanotherpage.html" rel="nofollow">http://www.example.com/[&hellip;]/thisisanotherpage.html</a>
     >>> url2 = "https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11"
-    >>> convertWebIntelligentPlainTextToHtml(url2)
-    '<a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url2))
+    <a href="https://secure.somehost.net/a/path/logout.do;jsessionid=0FB57237D0D20D377E74D29031090FF2.A11" rel="nofollow">https://secure.somehost.net[&hellip;]0D20D377E74D29031090FF2.A11</a>
 
 If there is a url in brackets, the link should not contain one of the brackets.
 
     >>> bracket_url = "<http://plone.org/products/poi/issues/155>"
-    >>> convertWebIntelligentPlainTextToHtml(bracket_url)
-    '&lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(bracket_url))
+    &lt;<a href="http://plone.org/products/poi/issues/155" rel="nofollow">http://plone.org/products/poi/issues/155</a>&gt;
 
 Port numbers should be recognized as linkworthy.
 
     >>> url = "http://plone3.freeman-centre.ac.uk:8080/caldav"
-    >>> convertWebIntelligentPlainTextToHtml(url)
-    '<a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://plone3.freeman-centre.ac.uk:8080/caldav" rel="nofollow">http://plone3.freeman-centre.ac.uk:8080/caldav</a>
 
 localhost should be good.
 
     >>> url = "http://localhost:8080/"
-    >>> convertWebIntelligentPlainTextToHtml(url)
-    '<a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a>
 
 Check ip numbers too while we are at it.
 
     >>> url = "http://127.0.0.1:8080/"
-    >>> convertWebIntelligentPlainTextToHtml(url)
-    '<a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>'
-    >>> convertWebIntelligentPlainTextToHtml("http://255.255.255.255")
-    '<a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>'
-    >>> convertWebIntelligentPlainTextToHtml("http://0.0.0.0")
-    '<a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(url))
+    <a href="http://127.0.0.1:8080/" rel="nofollow">http://127.0.0.1:8080/</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://255.255.255.255"))
+    <a href="http://255.255.255.255" rel="nofollow">http://255.255.255.255</a>
+    >>> bprint(convertWebIntelligentPlainTextToHtml("http://0.0.0.0"))
+    <a href="http://0.0.0.0" rel="nofollow">http://0.0.0.0</a>
 
 
 ftp is accepted.
 
-    >>> convertWebIntelligentPlainTextToHtml("ftp://localhost")
-    '<a href="ftp://localhost" rel="nofollow">ftp://localhost</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml("ftp://localhost"))
+    <a href="ftp://localhost" rel="nofollow">ftp://localhost</a>
 
 https is accepted.
 
-    >>> convertWebIntelligentPlainTextToHtml("https://localhost")
-    '<a href="https://localhost" rel="nofollow">https://localhost</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml("https://localhost"))
+    <a href="https://localhost" rel="nofollow">https://localhost</a>
 
 Unicode should be fine too.
 
     >>> text = u"Línk tö http://foo.ni"
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'L&Atilde;&shy;nk t&Atilde;&para; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    L&iacute;nk t&ouml; <a href="http://foo.ni" rel="nofollow">http://foo.ni</a>
 
 Leading whitespace is converted to non breaking spaces to preserve
 indentation:
 
     >>> text = "Some text.\n    And some indentation."
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Some text.<br />&nbsp;&nbsp;&nbsp;&nbsp;And some indentation.
 
 Leading tabs are converted to spaces.  The default is 4:
 
     >>> text = "Before the tab:\n\tand after the tab."
-    >>> convertWebIntelligentPlainTextToHtml(text)
-    'Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
 
 You can specify a different tab width:
 
-    >>> convertWebIntelligentPlainTextToHtml(text, tab_width=2)
-    'Before the tab:<br />&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width=2))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
 
 In case the tab width is not an integer, we try to convert it:
 
-    >>> convertWebIntelligentPlainTextToHtml(text, tab_width='2')
-    'Before the tab:<br />&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='2'))
+    Before the tab:<br />&nbsp;&nbsp;and after the tab.
 
 When that fails we fall back to 4 spaces:
 
-    >>> convertWebIntelligentPlainTextToHtml(text, tab_width='1.5')
-    'Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.'
+    >>> bprint(convertWebIntelligentPlainTextToHtml(text, tab_width='1.5'))
+    Before the tab:<br />&nbsp;&nbsp;&nbsp;&nbsp;and after the tab.
 
 
 Html to intelligent text
@@ -189,81 +188,94 @@ We want the transform to work the other way around too.  For starters
 this means that tags must be stripped.
 
     >>> orig = "Some <b>bold</b> text."
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Some bold text.'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some bold text.
 
 Some basic fallback would be nice:
 
-    >>> convertHtmlToWebIntelligentPlainText(None)
-    ''
+    >>> bprint(convertHtmlToWebIntelligentPlainText(None))
 
 Line breaks need to be handled.
 
     >>> orig = "Some<br/>broken<BR/>text<br />"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Some\nbroken\ntext\n'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some
+    broken
+    text
 
 Starting blocks:
 
     >>> orig = "A block<dt>there</dt>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A block\n\nthere'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A block
+    <BLANKLINE>
+    there
 
 Ending blocks:
 
     >>> orig = "<p>Paragraph</p>Other stuff"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Paragraph\n\nOther stuff'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Paragraph
+    <BLANKLINE>
+    Other stuff
 
 Indenting blocks:
 
     >>> orig = "An<blockquote>Indented blockquote</blockquote>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'An\n\n  Indented blockquote'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An
+    <BLANKLINE>
+      Indented blockquote
 
 Lists:
 
     >>> orig = "A list<ul><li>Foo</li><li>Bar</li></ul>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A list\n\n  - Foo\n\n  - Bar\n\n'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A list
+    <BLANKLINE>
+      - Foo
+        - Bar
 
 Non breaking spaces:
 
     >>> orig = "Some space &nbsp;&nbsp;here"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Some space   here'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Some space   here
 
 Angles:
 
     >>> orig = "Watch &lt;this&gt; and &lsaquo;that&rsaquo;"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'Watch <this> and &#8249;that&#8250;'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    Watch <this> and &#8249;that&#8250;
 
 Bullets:
 
     >>> orig = "A &bull; bullet"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A &#8226; bullet'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8226; bullet
 
 Ampersands:
 
     >>> orig = "An &amp; ampersand"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'An & ampersand'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    An & ampersand
 
 Entities:
 
     >>> orig = "A &mdash; dash"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A &#8212; dash'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A &#8212; dash
 
 Pre formatted text:
 
     >>> orig = "A <pre>  pre\n  section</pre>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A \n\n  pre\n  section\n\n'
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A 
+    <BLANKLINE>
+      pre
+      section
 
 White space:
     >>> orig = "A \n\t spaceful, <b>  tag-filled</b>, <b> <i>  snippet\n</b></i>"
-    >>> convertHtmlToWebIntelligentPlainText(orig)
-    'A spaceful, tag-filled, snippet '
+    >>> bprint(convertHtmlToWebIntelligentPlainText(orig))
+    A spaceful, tag-filled, snippet 
diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py
index 8fe9730..5a653a8 100644
--- a/plone/intelligenttext/tests.py
+++ b/plone/intelligenttext/tests.py
@@ -4,8 +4,16 @@
 optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
 
 
+def bprint(s):
+    if not isinstance(s, str):
+        s = s.decode()
+    print(s.strip())
+
+
 def test_suite():
     return unittest.TestSuite([
         doctest.DocFileSuite('README.txt',
+                             globs={'bprint': bprint},
+                             encoding='utf-8',
                              optionflags=optionflags,)
         ])
diff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py
index 709aef2..bcce5b9 100644
--- a/plone/intelligenttext/transforms.py
+++ b/plone/intelligenttext/transforms.py
@@ -1,5 +1,20 @@
-from htmlentitydefs import entitydefs
 import re
+import sys
+
+PY3 = sys.version_info[0] == 3
+if PY3:
+    from html.entities import name2codepoint
+    unicode = str
+    unichr = chr
+else:
+    from htmlentitydefs import name2codepoint
+
+
+def safe_decode(s, encoding='utf-8', errors='strict'):
+    if isinstance(s, unicode):
+        return s
+    return s.decode(encoding)
+
 
 class WebIntelligentToHtmlConverter(object):
     urlRegexp = re.compile(r'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\b(?::\d+)?(?:\/[^"\'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^"\'<>()\[\]{}\s\x7f-\xff]+)*)?)', re.I|re.S|re.U)
@@ -14,17 +29,15 @@ def __call__(self):
         text = self.orig
         if text is None:
             text = ''
-        if not isinstance(text, unicode):
-            text = unicode(text, 'utf-8', 'replace')
+        text = safe_decode(text, errors='replace')
 
         # Do &amp; separately, else, it may replace an already-inserted & from
         # an entity with &amp;, so < becomes &lt; becomes &amp;lt;
         text = text.replace('&', '&amp;')
         # Make funny characters into html entity defs
-        for entity, letter in entitydefs.items():
+        for entity, codepoint in name2codepoint.items():
             if entity != 'amp':
-                text = text.replace(
-                    letter.decode('latin-1'), '&' + entity + ';')
+                text = text.replace(unichr(codepoint), '&' + entity + ';')
 
         text = self.urlRegexp.subn(self.replaceURL, text)[0]
         text = self.emailRegexp.subn(self.replaceEmail, text)[0]
@@ -40,7 +53,7 @@ def __call__(self):
         return text
 
     @staticmethod
-    def abbreviateUrl(url, max = 60, ellipsis = "[&hellip;]"):
+    def abbreviateUrl(url, max=60, ellipsis="[&hellip;]"):
         """very long urls are abbreviated to allow nicer layout
         """
         if len(url) < max:
@@ -51,12 +64,12 @@ def abbreviateUrl(url, max = 60, ellipsis = "[&hellip;]"):
             protocol = url[0:protocolend+2]
             url = url[protocolend+2:]
         list = url.split("/")
-        if len(list) < 3 or len(list[0])+len(list[-1])>max:
+        if len(list) < 3 or len(list[0]) + len(list[-1]) > max:
             url = protocol + url
-            center = (max-5)/2
+            center = (max-5) // 2
             return url[:center] + ellipsis + url[-center:]
 
-        return protocol + list[0] +"/" +ellipsis + "/" + list[-1]
+        return protocol + list[0] + "/" + ellipsis + "/" + list[-1]
 
     @classmethod
     def replaceURL(cls, match):
@@ -145,11 +158,11 @@ def fixTagWhitespace(match):
 
     # Fix entities
     text = text.replace('&nbsp;', ' ')
-    for entity, letter in entitydefs.items():
+    for entity, codepoint in name2codepoint.items():
         # Do &lt; and &gt; later, else we may be creating what looks like
         # tags
-        if entity != 'lt' and entity != 'gt':
-            text = text.replace('&' + entity + ';', letter)
+        if entity != 'lt' and entity != 'gt' and entity != 'amp':
+            text = text.replace('&' + entity + ';', '&#' + str(codepoint) + ';')
 
     # XXX: Remove <head>, <script>, <style> ?
 
@@ -177,6 +190,7 @@ def fixTagWhitespace(match):
     # Fix < and > entities
     text = text.replace('&lt;', '<')
     text = text.replace('&gt;', '>')
+    text = text.replace('&amp;', '&')
 
     # Restore pres
     for marker, section in preSections.items():
diff --git a/setup.py b/setup.py
index 195bda4..b686623 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '2.0.4.dev0'
+version = '2.1.0.dev0'
 
 setup(name='plone.intelligenttext',
       version=version,
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..f5229bd
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,8 @@
+[tox]
+envlist = 
+    py26,py27,py33,py34,py35,pypy,pypy3
+
+[testenv]
+commands = 
+    python setup.py -q install
+    python setup.py -q test


