Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-07-28T18:15:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/b00c6de59ee6d6570678c94775e3968639823a1b

tests for getDefaultPage and minor cleanup + removal of deprecated stuff meant to be removed in 4.3

Files changed:
A plone/app/layout/navigation/tests/test_defaultpage.py
M CHANGES.rst
M plone/app/layout/navigation/__init__.py
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 22b9e0a..cf0f346 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,8 +4,14 @@ Changelog
 2.5.10 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Remove deprecated ``context`` parameter from ``DefaultPage`` methods.
+  [jensens]
+
+- minor cleanup in getDefaultPage function
+  [jensens[]
 
+- Added a test for the complex getDefaultPage function
+  [jensens]
 
 2.5.9 (2015-07-21)
 ------------------
diff --git a/plone/app/layout/navigation/__init__.py b/plone/app/layout/navigation/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/layout/navigation/__init__.py
+++ b/plone/app/layout/navigation/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py
index 6c109ea..c09099a 100644
--- a/plone/app/layout/navigation/defaultpage.py
+++ b/plone/app/layout/navigation/defaultpage.py
@@ -1,34 +1,23 @@
-import warnings
-from zope.component import queryAdapter
-from zope.component import queryUtility
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner, aq_base
+from plone.app.layout.navigation.interfaces import IDefaultPage
+from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.Five.browser import BrowserView
-
-from plone.app.layout.navigation.interfaces import IDefaultPage
+from zope.component import queryAdapter
+from zope.component import queryUtility
+from zope.interface import implementer
 
 
+@implementer(IDefaultPage)
 class DefaultPage(BrowserView):
-    implements(IDefaultPage)
-
-    def isDefaultPage(self, obj, context_=None):
-        if context_ is not None:
-            warnings.warn("The context_ parameter for isDefaultPage was never "
-                          "implemented and will be removed in Plone 4.",
-                          DeprecationWarning, 1)
 
+    def isDefaultPage(self, obj):
         return isDefaultPage(aq_inner(self.context), obj)
 
-    def getDefaultPage(self, context_=None):
-        if context_ is not None:
-            warnings.warn("The context_ parameter for getDefaultPage was "
-                          "never implemented and will be removed in Plone 4.",
-                          DeprecationWarning, 1)
-
+    def getDefaultPage(self):
         return getDefaultPage(aq_inner(self.context))
 
 
@@ -39,10 +28,12 @@ def isDefaultPage(container, obj):
     with the default_page property, or using IBrowserDefault.
     """
     parentDefaultPage = getDefaultPage(container)
-    if (parentDefaultPage is None or '/' in parentDefaultPage
-            or not hasattr(obj, 'getId')):
-        return False
-    return (parentDefaultPage == obj.getId())
+    precondition = (
+        parentDefaultPage is not None
+        and '/' not in parentDefaultPage
+        and hasattr(obj, 'getId')
+    )
+    return precondition and (parentDefaultPage == obj.getId())
 
 
 def getDefaultPage(context):
@@ -50,27 +41,30 @@ def getDefaultPage(context):
     the following lookup rules:
 
         1. A content object called 'index_html' wins
-        2. If the folder implements IBrowserDefault, query this
-        3. Else, look up the property default_page on the object
-            - Note that in this case, the returned id may *not* be of an
-              object in the folder, since it could be acquired from a
-              parent folder or skin layer
+        2. Else check for IBrowserDefault, either if the container implements
+           it or if an adapter exists. In both cases fetch its FTI and either
+           take it if it implements IDynamicViewTypeInformation or adapt it to
+           IDynamicViewTypeInformation. call getDefaultPage on the implementer
+           and take value if given.
+        3. Else, look up the attribute default_page on the object, without
+           acquisition in place
+        3.1 look for a content in the container with the id, no acquisition!
+        3.2 look for a content at portal, with acquisition
         4. Else, look up the property default_page in site_properties for
-            magic ids and test these
+           magic ids and test these
 
     The id of the first matching item is then used to lookup a translation
     and if found, its id is returned. If no default page is set, None is
     returned. If a non-folderish item is passed in, return None always.
     """
-    # The list of ids where we look for default
-    ids = {}
+    # The ids where we look for default - must support __contains__
+    ids = set()
 
-    # For BTreeFolders we just use the has_key, otherwise build a dict
-    if hasattr(aq_base(context), 'has_key'):
+    # For BTreeFolders we just use the __contains__ otherwise build a set
+    if isinstance(aq_base(context), BTreeFolder2Base):
         ids = context
     elif hasattr(aq_base(context), 'objectIds'):
-        for id in context.objectIds():
-            ids[id] = 1
+        ids = set(context.objectIds())
 
     # 1. test for contentish index_html
     if 'index_html' in ids:
@@ -94,7 +88,7 @@ def getDefaultPage(context):
                 if page is not None:
                     return page
 
-    # 3. Test for default_page property in folder, then skins
+    # 3.1 Test for default_page attribute in folder, no acquisition
     pages = getattr(aq_base(context), 'default_page', [])
     if isinstance(pages, basestring):
         pages = [pages]
@@ -104,18 +98,21 @@ def getDefaultPage(context):
 
     portal = queryUtility(ISiteRoot)
     # Might happen during portal creation
-    if portal is not None:
-        for page in pages:
-            if portal.unrestrictedTraverse(page, None):
-                return page
-
-        # 4. Test for default sitewide default_page setting
-        pp = getattr(portal, 'portal_properties', None)
-        if pp is not None:
-            site_properties = getattr(pp, 'site_properties', None)
-            if site_properties is not None:
-                for page in site_properties.getProperty('default_page', []):
-                    if page in ids:
-                        return page
-
-    return None
+    if portal is None:
+        return
+
+    # 3.2 Test for default page in portal, acquire
+    for page in pages:
+        if portal.unrestrictedTraverse(page, None):
+            return page
+
+    # 4. Test for default sitewide default_page setting
+    pp = getattr(portal, 'portal_properties', None)
+    if pp is not None:
+        site_properties = getattr(pp, 'site_properties', None)
+        if site_properties is not None:
+            for page in site_properties.getProperty('default_page', []):
+                if page in ids:
+                    return page
+
+    return
diff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py
index fdbe0f4..33067d6 100644
--- a/plone/app/layout/navigation/interfaces.py
+++ b/plone/app/layout/navigation/interfaces.py
@@ -1,4 +1,6 @@
-from zope.interface import Interface, Attribute
+# -*- coding: utf-8 -*-
+from zope.interface import Attribute
+from zope.interface import Interface
 
 
 class INavigationRoot(Interface):
diff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py
new file mode 100644
index 0000000..bc95263
--- /dev/null
+++ b/plone/app/layout/navigation/tests/test_defaultpage.py
@@ -0,0 +1,118 @@
+# -*- coding: utf-8 -*-
+from plone.app.layout.testing import INTEGRATION_TESTING
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+import unittest
+
+
+class DefaultPageTestCase(unittest.TestCase):
+
+    layer = INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        self.portal.invokeFactory('Folder', 'folder', title=u"Test Folder")
+        self.folder = self.portal.folder
+
+    def test_getDefaultPage_step_1(self):
+        # A content object called 'index_html' wins
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+        self.folder.setDefaultPage('d1')
+        self.folder.invokeFactory('Document', 'index_html', title=u"Doc 2")
+
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+        self.assertEqual('index_html', getDefaultPage(self.folder))
+
+    def test_getDefaultPage_step_2(self):
+        # Else check for IBrowserDefault, either if the container implements
+        # it or if an adapter exists. In both cases fetch its FTI and either
+        # take it if it implements IDynamicViewTypeInformation or adapt it to
+        # IDynamicViewTypeInformation. call getDefaultPage on the implementer
+        # and take value if given.
+
+        # first check some preconditions
+        #
+        # 1) a folder provides IBrowserDefault
+        from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
+        self.assertTrue(IBrowserDefault.providedBy(self.folder))
+
+        # 2) a folder also provides an fti that implements
+        #    IDynamicViewTypeInformation
+        from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation  # noqa
+        fti = self.folder.getTypeInfo()
+        self.assertTrue(IDynamicViewTypeInformation.providedBy(fti))
+
+        # so if we set a document as defaultpage
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+        self.folder.setDefaultPage('d1')
+
+        # 3) fti should return it
+        self.assertEqual(
+            'd1',
+            fti.getDefaultPage(self.folder, check_exists=True)
+        )
+
+        # now test since we're sure everythings set up correctly
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # missing here:
+        # - test adapter instead of direct implements in precondition 1
+        # - test adapter instead of direct implements in precondition 2
+
+    def test_getDefaultPage_step_3_1(self):
+        # 3. Else, look up the attribute default_page on the object, without
+        #    acquisition in place
+        # 3.1 look for a content in the container with the id, no acquisition!
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+
+        # set doc d1 must work
+        self.folder.default_page = 'd1'
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # set doc d2 must fail and return None
+        self.folder.default_page = 'd2'
+        self.assertIsNone(getDefaultPage(self.folder))
+
+        # list of possible values is allowed
+        self.folder.default_page = ['d2', 'd1']
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # list of impossible values return None
+        self.folder.default_page = ['d2', 'd3']
+        self.assertIsNone(getDefaultPage(self.folder))
+
+        # acquisition check, must not work
+        self.folder.invokeFactory('Folder', 'f1', title=u"Sub Folder 1")
+        self.folder.f1.invokeFactory('Document', 'd2', title=u"Document 2")
+        self.folder.default_page = 'd2'
+        self.assertIsNone(getDefaultPage(self.folder.f1))
+
+    def test_getDefaultPage_step_3_2(self):
+        # 3. Else, look up the attribute default_page on the object, without
+        #    acquisition in place
+        # 3.2 look for a content at portal, with acquisition
+        self.portal.invokeFactory('Document', 'd1', title=u"Doc 1")
+        self.folder.default_page = 'd1'
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+
+        # now it must acquire from portal
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # fetch from i.e. portal_skins by acquisition
+        # robots.txt is in portal_skins/plone_templates and so available
+        # by acquisition
+        self.folder.default_page = 'robots.txt'
+        self.assertEqual('robots.txt', getDefaultPage(self.folder))
+
+    def test_getDefaultPage_step_4(self):
+        # 4. Else, look up the property default_page in site_properties for
+        #   magic ids and test these
+        sp = self.portal.portal_properties.site_properties
+        sp.manage_changeProperties(default_page=('d1',))
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+        self.assertEqual('d1', getDefaultPage(self.folder))


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-07-29T00:07:25+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/eacf0ece911bc376da52c749deceb56e46d8c9c5

Merge pull request #51 from plone/jensens-defaultpage-tests

added tests for getDefaultPage and minor cleanup + removal of deprecated

Files changed:
A plone/app/layout/navigation/tests/test_defaultpage.py
M CHANGES.rst
M plone/app/layout/navigation/__init__.py
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 22b9e0a..cf0f346 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,8 +4,14 @@ Changelog
 2.5.10 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Remove deprecated ``context`` parameter from ``DefaultPage`` methods.
+  [jensens]
+
+- minor cleanup in getDefaultPage function
+  [jensens[]
 
+- Added a test for the complex getDefaultPage function
+  [jensens]
 
 2.5.9 (2015-07-21)
 ------------------
diff --git a/plone/app/layout/navigation/__init__.py b/plone/app/layout/navigation/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/layout/navigation/__init__.py
+++ b/plone/app/layout/navigation/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py
index 6c109ea..c09099a 100644
--- a/plone/app/layout/navigation/defaultpage.py
+++ b/plone/app/layout/navigation/defaultpage.py
@@ -1,34 +1,23 @@
-import warnings
-from zope.component import queryAdapter
-from zope.component import queryUtility
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner, aq_base
+from plone.app.layout.navigation.interfaces import IDefaultPage
+from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.Five.browser import BrowserView
-
-from plone.app.layout.navigation.interfaces import IDefaultPage
+from zope.component import queryAdapter
+from zope.component import queryUtility
+from zope.interface import implementer
 
 
+@implementer(IDefaultPage)
 class DefaultPage(BrowserView):
-    implements(IDefaultPage)
-
-    def isDefaultPage(self, obj, context_=None):
-        if context_ is not None:
-            warnings.warn("The context_ parameter for isDefaultPage was never "
-                          "implemented and will be removed in Plone 4.",
-                          DeprecationWarning, 1)
 
+    def isDefaultPage(self, obj):
         return isDefaultPage(aq_inner(self.context), obj)
 
-    def getDefaultPage(self, context_=None):
-        if context_ is not None:
-            warnings.warn("The context_ parameter for getDefaultPage was "
-                          "never implemented and will be removed in Plone 4.",
-                          DeprecationWarning, 1)
-
+    def getDefaultPage(self):
         return getDefaultPage(aq_inner(self.context))
 
 
@@ -39,10 +28,12 @@ def isDefaultPage(container, obj):
     with the default_page property, or using IBrowserDefault.
     """
     parentDefaultPage = getDefaultPage(container)
-    if (parentDefaultPage is None or '/' in parentDefaultPage
-            or not hasattr(obj, 'getId')):
-        return False
-    return (parentDefaultPage == obj.getId())
+    precondition = (
+        parentDefaultPage is not None
+        and '/' not in parentDefaultPage
+        and hasattr(obj, 'getId')
+    )
+    return precondition and (parentDefaultPage == obj.getId())
 
 
 def getDefaultPage(context):
@@ -50,27 +41,30 @@ def getDefaultPage(context):
     the following lookup rules:
 
         1. A content object called 'index_html' wins
-        2. If the folder implements IBrowserDefault, query this
-        3. Else, look up the property default_page on the object
-            - Note that in this case, the returned id may *not* be of an
-              object in the folder, since it could be acquired from a
-              parent folder or skin layer
+        2. Else check for IBrowserDefault, either if the container implements
+           it or if an adapter exists. In both cases fetch its FTI and either
+           take it if it implements IDynamicViewTypeInformation or adapt it to
+           IDynamicViewTypeInformation. call getDefaultPage on the implementer
+           and take value if given.
+        3. Else, look up the attribute default_page on the object, without
+           acquisition in place
+        3.1 look for a content in the container with the id, no acquisition!
+        3.2 look for a content at portal, with acquisition
         4. Else, look up the property default_page in site_properties for
-            magic ids and test these
+           magic ids and test these
 
     The id of the first matching item is then used to lookup a translation
     and if found, its id is returned. If no default page is set, None is
     returned. If a non-folderish item is passed in, return None always.
     """
-    # The list of ids where we look for default
-    ids = {}
+    # The ids where we look for default - must support __contains__
+    ids = set()
 
-    # For BTreeFolders we just use the has_key, otherwise build a dict
-    if hasattr(aq_base(context), 'has_key'):
+    # For BTreeFolders we just use the __contains__ otherwise build a set
+    if isinstance(aq_base(context), BTreeFolder2Base):
         ids = context
     elif hasattr(aq_base(context), 'objectIds'):
-        for id in context.objectIds():
-            ids[id] = 1
+        ids = set(context.objectIds())
 
     # 1. test for contentish index_html
     if 'index_html' in ids:
@@ -94,7 +88,7 @@ def getDefaultPage(context):
                 if page is not None:
                     return page
 
-    # 3. Test for default_page property in folder, then skins
+    # 3.1 Test for default_page attribute in folder, no acquisition
     pages = getattr(aq_base(context), 'default_page', [])
     if isinstance(pages, basestring):
         pages = [pages]
@@ -104,18 +98,21 @@ def getDefaultPage(context):
 
     portal = queryUtility(ISiteRoot)
     # Might happen during portal creation
-    if portal is not None:
-        for page in pages:
-            if portal.unrestrictedTraverse(page, None):
-                return page
-
-        # 4. Test for default sitewide default_page setting
-        pp = getattr(portal, 'portal_properties', None)
-        if pp is not None:
-            site_properties = getattr(pp, 'site_properties', None)
-            if site_properties is not None:
-                for page in site_properties.getProperty('default_page', []):
-                    if page in ids:
-                        return page
-
-    return None
+    if portal is None:
+        return
+
+    # 3.2 Test for default page in portal, acquire
+    for page in pages:
+        if portal.unrestrictedTraverse(page, None):
+            return page
+
+    # 4. Test for default sitewide default_page setting
+    pp = getattr(portal, 'portal_properties', None)
+    if pp is not None:
+        site_properties = getattr(pp, 'site_properties', None)
+        if site_properties is not None:
+            for page in site_properties.getProperty('default_page', []):
+                if page in ids:
+                    return page
+
+    return
diff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py
index fdbe0f4..33067d6 100644
--- a/plone/app/layout/navigation/interfaces.py
+++ b/plone/app/layout/navigation/interfaces.py
@@ -1,4 +1,6 @@
-from zope.interface import Interface, Attribute
+# -*- coding: utf-8 -*-
+from zope.interface import Attribute
+from zope.interface import Interface
 
 
 class INavigationRoot(Interface):
diff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py
new file mode 100644
index 0000000..bc95263
--- /dev/null
+++ b/plone/app/layout/navigation/tests/test_defaultpage.py
@@ -0,0 +1,118 @@
+# -*- coding: utf-8 -*-
+from plone.app.layout.testing import INTEGRATION_TESTING
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+import unittest
+
+
+class DefaultPageTestCase(unittest.TestCase):
+
+    layer = INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        self.portal.invokeFactory('Folder', 'folder', title=u"Test Folder")
+        self.folder = self.portal.folder
+
+    def test_getDefaultPage_step_1(self):
+        # A content object called 'index_html' wins
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+        self.folder.setDefaultPage('d1')
+        self.folder.invokeFactory('Document', 'index_html', title=u"Doc 2")
+
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+        self.assertEqual('index_html', getDefaultPage(self.folder))
+
+    def test_getDefaultPage_step_2(self):
+        # Else check for IBrowserDefault, either if the container implements
+        # it or if an adapter exists. In both cases fetch its FTI and either
+        # take it if it implements IDynamicViewTypeInformation or adapt it to
+        # IDynamicViewTypeInformation. call getDefaultPage on the implementer
+        # and take value if given.
+
+        # first check some preconditions
+        #
+        # 1) a folder provides IBrowserDefault
+        from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
+        self.assertTrue(IBrowserDefault.providedBy(self.folder))
+
+        # 2) a folder also provides an fti that implements
+        #    IDynamicViewTypeInformation
+        from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation  # noqa
+        fti = self.folder.getTypeInfo()
+        self.assertTrue(IDynamicViewTypeInformation.providedBy(fti))
+
+        # so if we set a document as defaultpage
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+        self.folder.setDefaultPage('d1')
+
+        # 3) fti should return it
+        self.assertEqual(
+            'd1',
+            fti.getDefaultPage(self.folder, check_exists=True)
+        )
+
+        # now test since we're sure everythings set up correctly
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # missing here:
+        # - test adapter instead of direct implements in precondition 1
+        # - test adapter instead of direct implements in precondition 2
+
+    def test_getDefaultPage_step_3_1(self):
+        # 3. Else, look up the attribute default_page on the object, without
+        #    acquisition in place
+        # 3.1 look for a content in the container with the id, no acquisition!
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+
+        # set doc d1 must work
+        self.folder.default_page = 'd1'
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # set doc d2 must fail and return None
+        self.folder.default_page = 'd2'
+        self.assertIsNone(getDefaultPage(self.folder))
+
+        # list of possible values is allowed
+        self.folder.default_page = ['d2', 'd1']
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # list of impossible values return None
+        self.folder.default_page = ['d2', 'd3']
+        self.assertIsNone(getDefaultPage(self.folder))
+
+        # acquisition check, must not work
+        self.folder.invokeFactory('Folder', 'f1', title=u"Sub Folder 1")
+        self.folder.f1.invokeFactory('Document', 'd2', title=u"Document 2")
+        self.folder.default_page = 'd2'
+        self.assertIsNone(getDefaultPage(self.folder.f1))
+
+    def test_getDefaultPage_step_3_2(self):
+        # 3. Else, look up the attribute default_page on the object, without
+        #    acquisition in place
+        # 3.2 look for a content at portal, with acquisition
+        self.portal.invokeFactory('Document', 'd1', title=u"Doc 1")
+        self.folder.default_page = 'd1'
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+
+        # now it must acquire from portal
+        self.assertEqual('d1', getDefaultPage(self.folder))
+
+        # fetch from i.e. portal_skins by acquisition
+        # robots.txt is in portal_skins/plone_templates and so available
+        # by acquisition
+        self.folder.default_page = 'robots.txt'
+        self.assertEqual('robots.txt', getDefaultPage(self.folder))
+
+    def test_getDefaultPage_step_4(self):
+        # 4. Else, look up the property default_page in site_properties for
+        #   magic ids and test these
+        sp = self.portal.portal_properties.site_properties
+        sp.manage_changeProperties(default_page=('d1',))
+        self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
+
+        from plone.app.layout.navigation.defaultpage import getDefaultPage
+        self.assertEqual('d1', getDefaultPage(self.folder))


