Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-08-23T17:22:02+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/c2bce60d23dec0c72cd88e569c11eabe5b0ffa57

install referenceablebehavior for migration-testing since it is no longer auto-installed

Files changed:
M plone/app/contenttypes/testing.py

diff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py
index e8407ae..55bcdee 100644
--- a/plone/app/contenttypes/testing.py
+++ b/plone/app/contenttypes/testing.py
@@ -104,6 +104,8 @@ def setUpZope(self, app, configurationContext):
             plone.app.contenttypes,
             context=configurationContext
         )
+        import plone.app.referenceablebehavior
+        self.loadZCML(package=plone.app.referenceablebehavior)
 
     def tearDownZope(self, app):
         try:
@@ -130,6 +132,8 @@ def setUpPloneSite(self, portal):
         if 'plone.app.collection:default' in profiles:
             applyProfile(portal, 'plone.app.collection:default')
 
+        applyProfile(portal, 'plone.app.referenceablebehavior:default')
+
 
 PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()
 PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING = IntegrationTesting(


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-08-23T17:22:02+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/4ed37687181145182d8a282cc7fecea836d65eb6

intid_catalog is a core-dependency now

Files changed:
M plone/app/contenttypes/tests/test_migration.py

diff --git a/plone/app/contenttypes/tests/test_migration.py b/plone/app/contenttypes/tests/test_migration.py
index 20e41fd..623e07f 100644
--- a/plone/app/contenttypes/tests/test_migration.py
+++ b/plone/app/contenttypes/tests/test_migration.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from five.intid.intid import IntIds
-from five.intid.site import addUtility
 from lxml import etree
 from persistent.list import PersistentList
 from plone.app.contenttypes.migration.migration import migrate_documents
@@ -16,7 +14,6 @@
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_MIGRATION_FUNCTIONAL_TESTING  # noqa
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_MIGRATION_TESTING  # noqa
 from plone.app.contenttypes.testing import set_browserlayer
-from plone.app.referenceablebehavior.referenceable import IReferenceable
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.app.testing import applyProfile
@@ -34,7 +31,6 @@
 from zc.relation.interfaces import ICatalog
 from zope.annotation.interfaces import IAnnotations
 from zope.component import getMultiAdapter
-from zope.component import getSiteManager
 from zope.component import getUtility
 from zope.component import queryUtility
 from zope.interface import alsoProvides
@@ -821,10 +817,6 @@ def test_blob_newsitem_content_is_migrated(self):
     def test_modifield_date_is_unchanged(self):
         set_browserlayer(self.request)
 
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create folders
         self.portal.invokeFactory('Folder', 'folder1')
         at_folder1 = self.portal['folder1']
@@ -964,10 +956,6 @@ def test_folder_children_are_migrated(self):
         self.assertTrue(at_child in dx_folder.contentValues())
 
     def test_relations_are_migrated(self):
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create folders
         self.portal.invokeFactory('Folder', 'folder1')
         at_folder1 = self.portal['folder1']
@@ -1038,10 +1026,6 @@ def test_backrelations_are_migrated_for_unnested_content(self):
         """relate a doc to a newsitem, migrate the newsitem but not the doc.
         check if the relations are still in place."""
 
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create ATFolder and ATDocument
         self.portal.invokeFactory('News Item', 'news')
         at_news = self.portal['news']
@@ -1091,10 +1075,6 @@ def test_backrelations_are_migrated_for_unnested_content(self):
     def test_dx_at_relations_migrated_for_partially_migrated_nested(self):
         """This fails if referenceablebehavior is not enabled
         """
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-        IReferenceable
         # create ATFolder and ATDocument
         self.portal.invokeFactory('Folder', 'folder')
         at_folder = self.portal['folder']
@@ -1144,10 +1124,6 @@ def test_dx_at_relations_migrated_for_partially_migrated_nested(self):
 
     def test_at_dx_relations_migrated_for_partialy_migrated_nested(self):
         """Fails if referenceablebehavior is not enabled"""
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create ATFolder and ATDocument
         self.portal.invokeFactory('Folder', 'folder')
         at_folder = self.portal['folder']
@@ -1193,7 +1169,6 @@ def test_at_dx_relations_migrated_for_partialy_migrated_nested(self):
         self.assertEqual(at_folder.getRelatedItems(), [dx_doc])
         self.assertEqual(self._backrefs(dx_doc), [at_folder])
         self.assertEqual(dx_doc.relatedItems, [])
-        self.assertEqual(dx_doc.relatedItems, [])
 
     def _backrefs(self, obj):
         from Products.Archetypes.interfaces.referenceable import IReferenceable
@@ -1223,9 +1198,6 @@ def _enable_referenceable_for(self, typename):
         fti._updateProperty('behaviors', tuple(behaviors))
 
     def test_store_references(self):
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         intids = getUtility(IIntIds)
 
         applyProfile(
@@ -1268,9 +1240,6 @@ def test_store_references(self):
 
     def test_export_references(self):
         """Test the Browser-View @@export_all_references."""
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         intids = getUtility(IIntIds)
         set_browserlayer(self.request)
 
@@ -1306,9 +1275,6 @@ def test_export_references(self):
 
     def test_migrate_references_with_storage_on_portal(self):
         set_browserlayer(self.request)
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         intids = getUtility(IIntIds)
 
         applyProfile(
@@ -1589,10 +1555,6 @@ def test_aaa_migration_results_page(self):
         from plone.app.contenttypes.interfaces import IDocument
         from plone.app.contenttypes.interfaces import ICollection
 
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create folders
         self.portal.invokeFactory('Folder', 'folder1')
         at_folder1 = self.portal['folder1']
@@ -1651,9 +1613,6 @@ def test_aaa_migration_results_page(self):
 
     def test_migration_view_confirmation(self):
         set_browserlayer(self.request)
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         applyProfile(self.portal, 'plone.app.contenttypes:default')
         migration_view = getMultiAdapter(
             (self.portal, self.request),


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-08-23T17:22:02+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/b309a31bd5795d5ac8d7a55d1a185def8c894934

improve comments about refs and migration

Files changed:
M plone/app/contenttypes/migration/utils.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/test_migration.py

diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 24e4e33..dfd80c0 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -389,8 +389,8 @@ def link_items(  # noqa
 
     if source_type == 'AT':
         # If there is any Archetypes-content there is also the
-        # reference_catalog and the uid_catalog.
-        # For a site without AT content these might not be there at all.
+        # reference_catalog. For a site without AT content this
+        # might not be there at all.
         reference_catalog = getToolByName(context, REFERENCE_CATALOG)
         uid_catalog = getToolByName(context, 'uid_catalog')
         if target_type == 'DX' and not is_referenceable(target_obj):
@@ -429,7 +429,7 @@ def link_items(  # noqa
         targetUIDs = [ref.targetUID for ref in reference_catalog.getReferences(
             source_obj, relationship)]
         if target_uid in targetUIDs:
-            # Replace relations since is probably broken.
+            # Drop relation since the old ones are most likely broken.
             reference_catalog.deleteReference(
                 source_obj, target_uid, relationship)
 
diff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py
index 55bcdee..8e17e43 100644
--- a/plone/app/contenttypes/testing.py
+++ b/plone/app/contenttypes/testing.py
@@ -45,14 +45,6 @@ def setUpZope(self, app, configurationContext):
     def setUpPloneSite(self, portal):
         applyProfile(portal, 'plone.app.contenttypes:default')
 
-        # install and enable referenceablebehavior on Documents to be able to
-        # test controlpanel to enable plone.app.linkintegrity checks
-        # XXX Disabled as it is causing test errors in comments
-        # see https://github.com/plone/Products.CMFPlone/issues/255
-        # applyProfile(portal, 'plone.app.referenceablebehavior:default')
-        # portal.portal_types.Document.behaviors += \
-        #   ('plone.app.referenceablebehavior.referenceable.IReferenceable',)
-
         mtr = portal.mimetypes_registry
         mime_doc = mtr.lookup('application/msword')[0]
         mime_doc.icon_path = 'custom.png'
diff --git a/plone/app/contenttypes/tests/test_migration.py b/plone/app/contenttypes/tests/test_migration.py
index 623e07f..be8045f 100644
--- a/plone/app/contenttypes/tests/test_migration.py
+++ b/plone/app/contenttypes/tests/test_migration.py
@@ -1154,13 +1154,16 @@ def test_at_dx_relations_migrated_for_partialy_migrated_nested(self):
 
         at_folder = self.portal['folder']
         dx_doc = at_folder['doc']
+        self.assertTrue(is_referenceable(dx_doc))
+        self.assertTrue(is_referenceable(at_folder))
 
         # references are not restored yet
         # the at-folder has a broken reference now
         # since at_doc is now <ATDocument at /plone/folder/doc_MIGRATION_>
         self.assertNotEqual(at_folder.getRelatedItems(), [at_doc])
         self.assertEqual(dx_doc.relatedItems, [])
-        self._backrefs(dx_doc)
+        # the backref is found since the reference_catalog is not purged
+        self.assertEqual(self._backrefs(dx_doc), [at_folder])
 
         # restore references
         restore_references(self.portal)


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-08-23T17:22:03+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/4f10cd2f855416f3e20caf778c55424acb77aa16

dx no longer needs to be referenceable for linkintegrity

Files changed:
M plone/app/contenttypes/migration/utils.py

diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index dfd80c0..d15328c 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -383,7 +383,7 @@ def link_items(  # noqa
         # with a link to the target and should not be created manually.
         if source_type == 'AT':
             modifiedArchetype(source_obj, None)
-        if source_type == 'DX' and is_referenceable(source_obj):
+        if source_type == 'DX':
             modifiedDexterity(source_obj, None)
         return
 


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-08-23T17:22:03+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/616ebb6af64a69ea975f19f2aa1f1c115e295fc7

skip test with test-isolation-problems

Files changed:
M plone/app/contenttypes/tests/test_migration.py

diff --git a/plone/app/contenttypes/tests/test_migration.py b/plone/app/contenttypes/tests/test_migration.py
index be8045f..e4efb65 100644
--- a/plone/app/contenttypes/tests/test_migration.py
+++ b/plone/app/contenttypes/tests/test_migration.py
@@ -1403,6 +1403,7 @@ def test_migration_extendedtypes_vocabulary_registered(self):
         vocabulary = factory(self.portal)
         self.assertEqual((), tuple(vocabulary))
 
+    @unittest.skip('Creates test-isolation-issues. See https://github.com/plone/plone.app.contenttypes/issues/251')  # noqa
     def test_migration_extendedtypes_vocabulary_result(self):
         from archetypes.schemaextender.extender import CACHE_ENABLED
         from archetypes.schemaextender.extender import CACHE_KEY


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2015-08-24T13:40:48-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/5a48a68641bb7ea22766386c84a1de5a548a439f

Merge pull request #259 from plone/linkintegrity

Linkintegrity

Files changed:
M plone/app/contenttypes/migration/utils.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/test_migration.py

diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 24e4e33..d15328c 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -383,14 +383,14 @@ def link_items(  # noqa
         # with a link to the target and should not be created manually.
         if source_type == 'AT':
             modifiedArchetype(source_obj, None)
-        if source_type == 'DX' and is_referenceable(source_obj):
+        if source_type == 'DX':
             modifiedDexterity(source_obj, None)
         return
 
     if source_type == 'AT':
         # If there is any Archetypes-content there is also the
-        # reference_catalog and the uid_catalog.
-        # For a site without AT content these might not be there at all.
+        # reference_catalog. For a site without AT content this
+        # might not be there at all.
         reference_catalog = getToolByName(context, REFERENCE_CATALOG)
         uid_catalog = getToolByName(context, 'uid_catalog')
         if target_type == 'DX' and not is_referenceable(target_obj):
@@ -429,7 +429,7 @@ def link_items(  # noqa
         targetUIDs = [ref.targetUID for ref in reference_catalog.getReferences(
             source_obj, relationship)]
         if target_uid in targetUIDs:
-            # Replace relations since is probably broken.
+            # Drop relation since the old ones are most likely broken.
             reference_catalog.deleteReference(
                 source_obj, target_uid, relationship)
 
diff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py
index e8407ae..8e17e43 100644
--- a/plone/app/contenttypes/testing.py
+++ b/plone/app/contenttypes/testing.py
@@ -45,14 +45,6 @@ def setUpZope(self, app, configurationContext):
     def setUpPloneSite(self, portal):
         applyProfile(portal, 'plone.app.contenttypes:default')
 
-        # install and enable referenceablebehavior on Documents to be able to
-        # test controlpanel to enable plone.app.linkintegrity checks
-        # XXX Disabled as it is causing test errors in comments
-        # see https://github.com/plone/Products.CMFPlone/issues/255
-        # applyProfile(portal, 'plone.app.referenceablebehavior:default')
-        # portal.portal_types.Document.behaviors += \
-        #   ('plone.app.referenceablebehavior.referenceable.IReferenceable',)
-
         mtr = portal.mimetypes_registry
         mime_doc = mtr.lookup('application/msword')[0]
         mime_doc.icon_path = 'custom.png'
@@ -104,6 +96,8 @@ def setUpZope(self, app, configurationContext):
             plone.app.contenttypes,
             context=configurationContext
         )
+        import plone.app.referenceablebehavior
+        self.loadZCML(package=plone.app.referenceablebehavior)
 
     def tearDownZope(self, app):
         try:
@@ -130,6 +124,8 @@ def setUpPloneSite(self, portal):
         if 'plone.app.collection:default' in profiles:
             applyProfile(portal, 'plone.app.collection:default')
 
+        applyProfile(portal, 'plone.app.referenceablebehavior:default')
+
 
 PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()
 PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING = IntegrationTesting(
diff --git a/plone/app/contenttypes/tests/test_migration.py b/plone/app/contenttypes/tests/test_migration.py
index 20e41fd..e4efb65 100644
--- a/plone/app/contenttypes/tests/test_migration.py
+++ b/plone/app/contenttypes/tests/test_migration.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from five.intid.intid import IntIds
-from five.intid.site import addUtility
 from lxml import etree
 from persistent.list import PersistentList
 from plone.app.contenttypes.migration.migration import migrate_documents
@@ -16,7 +14,6 @@
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_MIGRATION_FUNCTIONAL_TESTING  # noqa
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_MIGRATION_TESTING  # noqa
 from plone.app.contenttypes.testing import set_browserlayer
-from plone.app.referenceablebehavior.referenceable import IReferenceable
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.app.testing import applyProfile
@@ -34,7 +31,6 @@
 from zc.relation.interfaces import ICatalog
 from zope.annotation.interfaces import IAnnotations
 from zope.component import getMultiAdapter
-from zope.component import getSiteManager
 from zope.component import getUtility
 from zope.component import queryUtility
 from zope.interface import alsoProvides
@@ -821,10 +817,6 @@ def test_blob_newsitem_content_is_migrated(self):
     def test_modifield_date_is_unchanged(self):
         set_browserlayer(self.request)
 
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create folders
         self.portal.invokeFactory('Folder', 'folder1')
         at_folder1 = self.portal['folder1']
@@ -964,10 +956,6 @@ def test_folder_children_are_migrated(self):
         self.assertTrue(at_child in dx_folder.contentValues())
 
     def test_relations_are_migrated(self):
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create folders
         self.portal.invokeFactory('Folder', 'folder1')
         at_folder1 = self.portal['folder1']
@@ -1038,10 +1026,6 @@ def test_backrelations_are_migrated_for_unnested_content(self):
         """relate a doc to a newsitem, migrate the newsitem but not the doc.
         check if the relations are still in place."""
 
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create ATFolder and ATDocument
         self.portal.invokeFactory('News Item', 'news')
         at_news = self.portal['news']
@@ -1091,10 +1075,6 @@ def test_backrelations_are_migrated_for_unnested_content(self):
     def test_dx_at_relations_migrated_for_partially_migrated_nested(self):
         """This fails if referenceablebehavior is not enabled
         """
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-        IReferenceable
         # create ATFolder and ATDocument
         self.portal.invokeFactory('Folder', 'folder')
         at_folder = self.portal['folder']
@@ -1144,10 +1124,6 @@ def test_dx_at_relations_migrated_for_partially_migrated_nested(self):
 
     def test_at_dx_relations_migrated_for_partialy_migrated_nested(self):
         """Fails if referenceablebehavior is not enabled"""
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create ATFolder and ATDocument
         self.portal.invokeFactory('Folder', 'folder')
         at_folder = self.portal['folder']
@@ -1178,13 +1154,16 @@ def test_at_dx_relations_migrated_for_partialy_migrated_nested(self):
 
         at_folder = self.portal['folder']
         dx_doc = at_folder['doc']
+        self.assertTrue(is_referenceable(dx_doc))
+        self.assertTrue(is_referenceable(at_folder))
 
         # references are not restored yet
         # the at-folder has a broken reference now
         # since at_doc is now <ATDocument at /plone/folder/doc_MIGRATION_>
         self.assertNotEqual(at_folder.getRelatedItems(), [at_doc])
         self.assertEqual(dx_doc.relatedItems, [])
-        self._backrefs(dx_doc)
+        # the backref is found since the reference_catalog is not purged
+        self.assertEqual(self._backrefs(dx_doc), [at_folder])
 
         # restore references
         restore_references(self.portal)
@@ -1193,7 +1172,6 @@ def test_at_dx_relations_migrated_for_partialy_migrated_nested(self):
         self.assertEqual(at_folder.getRelatedItems(), [dx_doc])
         self.assertEqual(self._backrefs(dx_doc), [at_folder])
         self.assertEqual(dx_doc.relatedItems, [])
-        self.assertEqual(dx_doc.relatedItems, [])
 
     def _backrefs(self, obj):
         from Products.Archetypes.interfaces.referenceable import IReferenceable
@@ -1223,9 +1201,6 @@ def _enable_referenceable_for(self, typename):
         fti._updateProperty('behaviors', tuple(behaviors))
 
     def test_store_references(self):
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         intids = getUtility(IIntIds)
 
         applyProfile(
@@ -1268,9 +1243,6 @@ def test_store_references(self):
 
     def test_export_references(self):
         """Test the Browser-View @@export_all_references."""
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         intids = getUtility(IIntIds)
         set_browserlayer(self.request)
 
@@ -1306,9 +1278,6 @@ def test_export_references(self):
 
     def test_migrate_references_with_storage_on_portal(self):
         set_browserlayer(self.request)
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         intids = getUtility(IIntIds)
 
         applyProfile(
@@ -1434,6 +1403,7 @@ def test_migration_extendedtypes_vocabulary_registered(self):
         vocabulary = factory(self.portal)
         self.assertEqual((), tuple(vocabulary))
 
+    @unittest.skip('Creates test-isolation-issues. See https://github.com/plone/plone.app.contenttypes/issues/251')  # noqa
     def test_migration_extendedtypes_vocabulary_result(self):
         from archetypes.schemaextender.extender import CACHE_ENABLED
         from archetypes.schemaextender.extender import CACHE_KEY
@@ -1589,10 +1559,6 @@ def test_aaa_migration_results_page(self):
         from plone.app.contenttypes.interfaces import IDocument
         from plone.app.contenttypes.interfaces import ICollection
 
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
-
         # create folders
         self.portal.invokeFactory('Folder', 'folder1')
         at_folder1 = self.portal['folder1']
@@ -1651,9 +1617,6 @@ def test_aaa_migration_results_page(self):
 
     def test_migration_view_confirmation(self):
         set_browserlayer(self.request)
-        # IIntIds is not registered in the test env. So register it here
-        sm = getSiteManager(self.portal)
-        addUtility(sm, IIntIds, IntIds, ofs_name='intids', findroot=False)
         applyProfile(self.portal, 'plone.app.contenttypes:default')
         migration_view = getMultiAdapter(
             (self.portal, self.request),


