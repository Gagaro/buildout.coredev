Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2015-09-20T17:35:14+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.iterate/commit/6075351a3886e285d244eabe928ad5951b4b4c6f

Move portal_properties settings to configuration registry

commit 28c8b8570307ebe493c81ead8a283885395ea62c
Author: Philip Bauer &lt;bauer@starzel.de&gt;
Date:   Sat Sep 19 19:12:07 2015 +0200

    properties moved to registry

commit 8a69e04021386f9bef55b34873c793ef70bfba9d
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 18:02:41 2015 +0200

    Create registry records

commit e82110856209dae7ca236bc2acf7a0cc512ab11e
Author: esteele &lt;eric@esteele.net&gt;
Date:   Sat Sep 19 18:00:48 2015 +0200

    Add iterate settings schema

Files changed:
A plone/app/iterate/profiles/default/registry.xml
M plone/app/iterate/interfaces.py
M plone/app/iterate/subscribers/workflow.py
M plone/app/iterate/tests/browser.rst
D plone/app/iterate/profiles/default/propertiestool.xml

diff --git a/plone/app/iterate/interfaces.py b/plone/app/iterate/interfaces.py
index 627bae4..9fce57e 100644
--- a/plone/app/iterate/interfaces.py
+++ b/plone/app/iterate/interfaces.py
@@ -27,9 +27,9 @@
 from zope import schema
 
 from zope.component.interfaces import IObjectEvent
+from plone.app.iterate import PloneMessageFactory as _
 from plone.locking.interfaces import LockType
 from plone.locking.interfaces import MAX_TIMEOUT
-
 from Products.Archetypes.interfaces import IReference
 
 ################################
@@ -289,3 +289,20 @@ def checkin(baseline, wc, references, storage):
     def checkinBackReferences(baseline, wc, references, storage):
         """
         """
+
+
+class IIterateSettings(Interface):
+
+    enable_checkout_workflow = schema.Bool(
+        title=_(u'Enable checkout workflow'),
+        description=u'',
+        default=False,
+        required=False
+    )
+
+    checkout_workflow_policy = schema.TextLine(
+        title=_(u'Checkout workflow policy'),
+        description=u'',
+        default=u'checkout_workflow_policy',
+        required=True
+    )
diff --git a/plone/app/iterate/profiles/default/propertiestool.xml b/plone/app/iterate/profiles/default/propertiestool.xml
deleted file mode 100644
index 21a7ae4..0000000
--- a/plone/app/iterate/profiles/default/propertiestool.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="enable_checkout_workflow" type="boolean">False</property>
-  <property name="checkout_workflow_policy" type="string">checkout_workflow_policy</property>
- </object>
-</object>
diff --git a/plone/app/iterate/profiles/default/registry.xml b/plone/app/iterate/profiles/default/registry.xml
new file mode 100644
index 0000000..19a17d7
--- /dev/null
+++ b/plone/app/iterate/profiles/default/registry.xml
@@ -0,0 +1,3 @@
+<registry>
+    <records interface="plone.app.iterate.interfaces.IIterateSettings" />
+</registry>
\ No newline at end of file
diff --git a/plone/app/iterate/subscribers/workflow.py b/plone/app/iterate/subscribers/workflow.py
index eb8313f..6d68c8e 100644
--- a/plone/app/iterate/subscribers/workflow.py
+++ b/plone/app/iterate/subscribers/workflow.py
@@ -26,54 +26,56 @@
 
 """
 
-from Acquisition import aq_base, aq_inner
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlacefulWorkflow.WorkflowPolicyConfig import WorkflowPolicyConfig
-from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import WorkflowPolicyConfig_id
+from Acquisition import aq_base
+from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import WorkflowPolicyConfig_id  # noqa
+from Products.CMFPlacefulWorkflow.WorkflowPolicyConfig import WorkflowPolicyConfig  # noqa
+from plone.app.iterate.interfaces import IIterateSettings
 from plone.app.iterate.util import get_storage
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+
 
 USE_WORKFLOW = "checkout_workflow_policy"
 
 policy_storage = "previous_wf_policy"
 
-def handleCheckout( event ):
+
+def handleCheckout(event):
     # defer to setting
-    properties = getToolByName(aq_inner(event.object), 'portal_properties')
-    enabled = properties.site_properties.getProperty('enable_checkout_workflow')
-    if not enabled:
+    registry = getUtility(IRegistry)
+    settings = registry.forInterface(IIterateSettings)
+    if not settings.enable_checkout_workflow:
         return
+    policy_id = settings.checkout_workflow_policy
 
-    policy_id = properties.site_properties.getProperty('checkout_workflow_policy')
-
-    existing_policy = getattr( aq_base( event.working_copy ), WorkflowPolicyConfig_id, None )
-    storage = get_storage( event.relation )
+    existing_policy = getattr(
+        aq_base(event.working_copy), WorkflowPolicyConfig_id, None)
+    storage = get_storage(event.relation)
 
     # set config for policy in and below
-    policy = WorkflowPolicyConfig( policy_id, policy_id)
+    policy = WorkflowPolicyConfig(policy_id, policy_id)
     policy.coci_created = True
 
     if existing_policy is not None:
-        storage[ policy_storage ] = policy
+        storage[policy_storage] = policy
 
     # we setattr because we want the effect on non containerish objects
-    setattr( event.working_copy, WorkflowPolicyConfig_id, policy )
+    setattr(event.working_copy, WorkflowPolicyConfig_id, policy)
     event.working_copy.notifyWorkflowCreated()
     event.working_copy.reindexObjectSecurity()
 
-def handleCheckin( event ):
-    policy = getattr( aq_base(event.object), WorkflowPolicyConfig_id, None )
-    storage = get_storage( event.relation )
-    previous_policy = storage.get( policy_storage )
+
+def handleCheckin(event):
+    policy = getattr(aq_base(event.object), WorkflowPolicyConfig_id, None)
+    storage = get_storage(event.relation)
+    previous_policy = storage.get(policy_storage)
     if previous_policy is None:
-        if policy and not getattr(policy,'coci_created',False):  # only reset workflows we know.. could use are own storage
+        # only reset workflows we know.. could use are own storage
+        if policy and not getattr(policy, 'coci_created', False):
             return
         elif policy is None:
             return
         else:
-            delattr( event.object, WorkflowPolicyConfig_id )
+            delattr(event.object, WorkflowPolicyConfig_id)
     else:
-        setattr( event.object, WorkflowPolicyConfig_id, previous_policy)
-
-
-
-
+        setattr(event.object, WorkflowPolicyConfig_id, previous_policy)
diff --git a/plone/app/iterate/tests/browser.rst b/plone/app/iterate/tests/browser.rst
index 6c3d9c5..754cbd1 100644
--- a/plone/app/iterate/tests/browser.rst
+++ b/plone/app/iterate/tests/browser.rst
@@ -220,14 +220,21 @@ with Products.CMFPlacefulWorkflow.  This usually makes sense: you should be
 checking in a working copy rather than publishing it.
 
 We have a working copy workflow defined in our textfixture profile.  To enable
-you need to set a couple of site properties::
+you need to set a couple of registry-entries::
 
     >>> browser.addHeader('Authorization',
     ...                   'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))
-    >>> browser.open("http://nohost/plone/portal_properties/site_properties/manage_propertiesForm")
-    >>> browser.getControl(name="enable_checkout_workflow:boolean").value = [True]
-    >>> browser.getControl(name="checkout_workflow_policy:string").value = 'working-copy'
-    >>> browser.getControl(name="manage_editProperties:method").click()
+    >>> browser.open("http://nohost/plone/portal_registry/edit/plone.app.iterate.interfaces.IIterateSettings.checkout_workflow_policy")
+    >>> browser.getControl(name="form.widgets.value").value
+    'checkout_workflow_policy'
+    >>> browser.getControl(name="form.widgets.value").value = 'working-copy'
+    >>> browser.getControl(name="form.buttons.save").click()
+    >>> browser.open("http://nohost/plone/portal_registry/edit/plone.app.iterate.interfaces.IIterateSettings.enable_checkout_workflow")
+    >>> browser.getControl(name="form.widgets.value:list").value
+    []
+    >>> browser.getControl(name="form.widgets.value:list").value = [True]
+    >>> browser.getControl(name="form.buttons.save").click()
+    >>> browser.open("http://nohost/plone/portal_registry/edit/plone.app.iterate.interfaces.IIterateSettings.checkout_workflow_policy")
 
 Create a new page to test workflows with::
 
@@ -277,7 +284,7 @@ permission to modify it but we still want them to see the info messages::
     ...                   'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))
 
     >>> from plone.app.iterate.permissions import CheckoutPermission
-    >>> browser.open('{0}/manage_permissionForm?permission_to_manage={1}'.format(portal.absolute_url(), CheckoutPermission)) 
+    >>> browser.open('{0}/manage_permissionForm?permission_to_manage={1}'.format(portal.absolute_url(), CheckoutPermission))
     >>> browser.getControl(name='roles:list').value = browser.getControl(name='roles:list').value + ['Contributor']
     >>> browser.getControl('Save Changes').click()
 


