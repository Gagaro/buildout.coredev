Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2015-09-19T21:32:52-07:00
Author: Alec Mitchell (alecpm) <alecpm@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/1facc30f9d42051eae5f05cde24e3fe32de12e22

Fix permission checker for add view/form to use temporary object instead of add context.  Refs plone/Products.CMFPlone#1027

Files changed:
M CHANGES.rst
M plone/app/dexterity/permissions.py
M plone/app/dexterity/tests/test_permissions.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5a54e4d..154dc3b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.13 (unreleased)
 -------------------
 
+- Fix issue with permission checker add form context (`1027`_).
+  [alecm]
+
 - Fix ace editor javascript reference (`895`_).
   [rodfersou]
 
diff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py
index 8ede354..b40a2ac 100644
--- a/plone/app/dexterity/permissions.py
+++ b/plone/app/dexterity/permissions.py
@@ -6,7 +6,7 @@
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
 from plone.autoform.utils import resolveDottedName
 from plone.dexterity.interfaces import IDexterityContent
-from plone.dexterity.utils import iterSchemata, getAdditionalSchemata
+from plone.dexterity.utils import iterSchemata
 from plone.supermodel.utils import mergedTaggedValueDict
 from z3c.form.interfaces import IAddForm
 from z3c.form.interfaces import IFieldWidget
@@ -86,17 +86,7 @@ class DXAddViewFieldPermissionChecker(DXFieldPermissionChecker):
     adapts(IAddForm)
 
     def __init__(self, view):
-        self.context = view.context
-        # This may fail for views that aren't DefaultAddForm or
-        # DefaultAddView sub-classes, but they can register their own
-        # more specific adapters, if needed.
-        self.fti = getattr(view, 'fti', None)
-        if self.fti is None:
-            self.fti = view.ti
-        self._request = view.request
-
-    def _get_schemata(self):
-        fti = self.fti
-        yield fti.lookupSchema()
-        for schema in getAdditionalSchemata(portal_type=fti.getId()):
-            yield schema
+        if getattr(view, 'form_instance', None) is not None:
+            view = view.form_instance
+        content = view.create({})
+        self.context = content.__of__(view.context)
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
index eccafa4..d3a2c42 100644
--- a/plone/app/dexterity/tests/test_permissions.py
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -10,6 +10,7 @@
 from plone.autoform.interfaces import WIDGETS_KEY
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
 from plone.dexterity.fti import DexterityFTI
+from plone.dexterity.browser.add import DefaultAddForm, DefaultAddView
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.util import getSpecification
 from z3c.form.widget import FieldWidget
@@ -195,3 +196,27 @@ def test_vocabulary_on_adapted_widget(self):
         data = json.loads(view())
         self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
         _disable_custom_widget(IMockSchema['adapted_widget_field'])
+
+    def test_vocabulary_field_allowed_from_add_view(self):
+        add_view = DefaultAddView(self.portal, self.request,
+                                  self.portal.portal_types['dx_mock'])
+        view = VocabularyView(add_view, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'allowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+    def test_vocabulary_field_allowed_from_add_form(self):
+        add_form = DefaultAddForm(self.portal, self.request)
+        add_form.portal_type = 'dx_mock'
+        view = VocabularyView(add_form, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'allowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))


