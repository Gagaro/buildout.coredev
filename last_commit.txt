Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-30T02:15:36+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/b423f8c76678582473959295db0e98ee8e08e188

Fixed white space pep8 warnings.

Files changed:
M CHANGES.rst
M Products/CMFPlone/ActionsTool.py
M Products/CMFPlone/DublinCore.py
M Products/CMFPlone/MigrationTool.py
M Products/CMFPlone/PloneBatch.py
M Products/CMFPlone/PloneControlPanel.py
M Products/CMFPlone/PloneFolder.py
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/Portal.py
M Products/CMFPlone/PropertiesTool.py
M Products/CMFPlone/QuickInstallerTool.py
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/TranslationServiceTool.py
M Products/CMFPlone/TypesTool.py
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/UnicodeSplitter/config.py
M Products/CMFPlone/UnicodeSplitter/splitter.py
M Products/CMFPlone/WorkflowTool.py
M Products/CMFPlone/_scripts/_generate_gruntfile.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/browser/atd.py
M Products/CMFPlone/browser/interfaces.py
M Products/CMFPlone/browser/sitemap.py
M Products/CMFPlone/browser/syndication/adapters.py
M Products/CMFPlone/browser/syndication/views.py
M Products/CMFPlone/controlpanel/bbb/language.py
M Products/CMFPlone/controlpanel/browser/language.py
M Products/CMFPlone/controlpanel/browser/quickinstaller.py
M Products/CMFPlone/controlpanel/browser/resourceregistry.py
M Products/CMFPlone/controlpanel/browser/usergroups.py
M Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
M Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py
M Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.py
M Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py
M Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_usergroups_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_security.py
M Products/CMFPlone/controlpanel/utils.py
M Products/CMFPlone/exportimport/controlpanel.py
M Products/CMFPlone/exportimport/propertiestool.py
M Products/CMFPlone/exportimport/tests/testControlPanel.py
M Products/CMFPlone/interfaces/constrains.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/interfaces/events.py
M Products/CMFPlone/interfaces/language.py
M Products/CMFPlone/interfaces/resources.py
M Products/CMFPlone/interfaces/syndication.py
M Products/CMFPlone/patches/__init__.py
M Products/CMFPlone/patches/csrf.py
M Products/CMFPlone/patches/securemailhost.py
M Products/CMFPlone/patches/security.py
M Products/CMFPlone/patches/templatecookcheck.py
M Products/CMFPlone/patches/unicodehacks.py
M Products/CMFPlone/patterns/utils.py
M Products/CMFPlone/permissions.py
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/resources/exportimport/resourceregistry.py
M Products/CMFPlone/setuphandlers.py
M Products/CMFPlone/tests/dummy.py
M Products/CMFPlone/tests/testBatch.py
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testBrowserLayerPrecedence.py
M Products/CMFPlone/tests/testCSSandJSRegistry.py
M Products/CMFPlone/tests/testCatalogTool.py
M Products/CMFPlone/tests/testCheckId.py
M Products/CMFPlone/tests/testContentPublishing.py
M Products/CMFPlone/tests/testContentSecurity.py
M Products/CMFPlone/tests/testControlPanel.py
M Products/CMFPlone/tests/testControlPanelScripts.py
M Products/CMFPlone/tests/testCookieAuth.py
M Products/CMFPlone/tests/testDateComponentsSupport.py
M Products/CMFPlone/tests/testDateTimeIntegration.py
M Products/CMFPlone/tests/testEmailLogin.py
M Products/CMFPlone/tests/testExternalEditorEnabled.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testLoggedIn.py
M Products/CMFPlone/tests/testMigrationTool.py
M Products/CMFPlone/tests/testNavTree.py
M Products/CMFPlone/tests/testNavigationParent.py
M Products/CMFPlone/tests/testNavigationView.py
M Products/CMFPlone/tests/testNextPrevious.py
M Products/CMFPlone/tests/testPatternSettings.py
M Products/CMFPlone/tests/testPloneFolder.py
M Products/CMFPlone/tests/testPloneTestCase.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testRegistrationTool.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/testSSOLogin.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/testSecurityDeclarations.py
M Products/CMFPlone/tests/testSiteAdminRole.py
M Products/CMFPlone/tests/testSyndication.py
M Products/CMFPlone/tests/testTranslationServiceTool.py
M Products/CMFPlone/tests/testURLTool.py
M Products/CMFPlone/tests/testUnicodeSplitter.py
M Products/CMFPlone/tests/testUserFolderBasics.py
M Products/CMFPlone/tests/testWebDAV.py
M Products/CMFPlone/tests/testWorkflowTool.py
M Products/CMFPlone/tests/test_doctests.py
M Products/CMFPlone/tests/test_mails.py
M Products/CMFPlone/tests/test_utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8fe5a15..df335cc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -37,6 +37,9 @@ New:
 
 Fixes:
 
+- Fixed white space pep8 warnings.
+  [maurits]
+
 - Prevented breaking Plone when TinyMCE JSON settings fields contain
   invalid JSON.
   [petschki]
diff --git a/Products/CMFPlone/ActionsTool.py b/Products/CMFPlone/ActionsTool.py
index 91d9b04..8334160 100644
--- a/Products/CMFPlone/ActionsTool.py
+++ b/Products/CMFPlone/ActionsTool.py
@@ -18,6 +18,7 @@ class ActionsTool(PloneBaseTool, BaseTool):
     #   ActionProvider interface
     #
     security.declarePrivate('listActions')
+
     def listActions(self, info=None, object=None,
                     categories=None, ignore_categories=None):
         """ List all the actions defined by a provider.
@@ -29,10 +30,10 @@ def listActions(self, info=None, object=None,
 
         if categories is None:
             categories = [cat for cat in self
-                              if cat not in ignore_categories]
+                          if cat not in ignore_categories]
         else:
             categories = [cat for cat in self
-                              if cat in categories]
+                          if cat in categories]
 
         for category in categories:
             if IActionCategory.providedBy(self[category]):
@@ -40,6 +41,7 @@ def listActions(self, info=None, object=None,
         return tuple(actions)
 
     security.declarePublic('listActionInfos')
+
     def listActionInfos(self, action_chain=None, object=None,
                         check_visibility=1, check_permissions=1,
                         check_condition=1, max=-1,
@@ -69,7 +71,7 @@ def listActionInfos(self, action_chain=None, object=None,
 
         if ignore_categories is not None:
             actions = [ai for ai in actions
-                          if ai['category'] not in ignore_categories]
+                       if ai['category'] not in ignore_categories]
 
         action_infos = []
         for ai in actions:
@@ -88,6 +90,7 @@ def listActionInfos(self, action_chain=None, object=None,
     #   'portal_actions' interface methods
     #
     security.declarePublic('listFilteredActionsFor')
+
     def listFilteredActionsFor(self, object=None,
                                ignore_providers=(),
                                ignore_categories=None):
@@ -96,7 +99,7 @@ def listFilteredActionsFor(self, object=None,
         actions = []
 
         providers = [name for name in self.listActionProviders()
-                          if name not in ignore_providers]
+                     if name not in ignore_providers]
 
         # Include actions from specific tools.
         for provider_name in providers:
@@ -124,7 +127,7 @@ def listFilteredActionsFor(self, object=None,
                             'object': [],
                             'global': [],
                             'workflow': [],
-                           }
+                            }
 
         for action in actions:
             catlist = filtered_actions.setdefault(action['category'], [])
diff --git a/Products/CMFPlone/DublinCore.py b/Products/CMFPlone/DublinCore.py
index 46590f2..4607acc 100644
--- a/Products/CMFPlone/DublinCore.py
+++ b/Products/CMFPlone/DublinCore.py
@@ -29,40 +29,40 @@
 from Products.CMFPlone.permissions import View
 from Products.CMFPlone.utils import WWW_DIR
 
-_marker=[]
+_marker = []
 
 # For http://www.zope.org/Collectors/CMF/325
 # We only really need this once, at startup.
 _zone = DateTime().timezone()
 
 
-def seq_strip(seq, stripper=lambda x: x.strip() ):
+def seq_strip(seq, stripper=lambda x: x.strip()):
     """ Strip a sequence of strings.
     """
     if isinstance(seq, list):
-        return map( stripper, seq )
+        return map(stripper, seq)
 
     if isinstance(seq, tuple):
-        return tuple( map( stripper, seq ) )
+        return tuple(map(stripper, seq))
 
-    raise ValueError, "%s of unsupported sequencetype %s" % ( seq, type( seq ) )
+    raise ValueError, "%s of unsupported sequencetype %s" % (seq, type(seq))
 
 
-def tuplize( valueName, value, splitter=lambda x: x.split() ):
+def tuplize(valueName, value, splitter=lambda x: x.split()):
 
     if isinstance(value, tuple):
-        return seq_strip( value )
+        return seq_strip(value)
 
     if isinstance(value, list):
-        return seq_strip( tuple( value ) )
+        return seq_strip(tuple(value))
 
     if isinstance(value, basestring):
-        return seq_strip( tuple( splitter( value ) ) )
+        return seq_strip(tuple(splitter(value)))
 
     raise ValueError, "%s of unsupported type" % valueName
 
 
-class DefaultDublinCoreImpl( PropertyManager ):
+class DefaultDublinCoreImpl(PropertyManager):
 
     """ Mix-in class which provides Dublin Core methods.
     """
@@ -71,31 +71,14 @@ class DefaultDublinCoreImpl( PropertyManager ):
 
     security = ClassSecurityInfo()
 
-    def __init__( self
-                , title=''
-                , subject=()
-                , description=''
-                , contributors=()
-                , effective_date=None
-                , expiration_date=None
-                , format='text/html'
-                , language=''
-                , rights=''
-                ):
+    def __init__(self, title='', subject=(), description='', contributors=(), effective_date=None, expiration_date=None, format='text/html', language='', rights=''
+                 ):
         now = DateTime()
         self.creation_date = now
         self.modification_date = now
         self.creators = ()
-        self._editMetadata( title
-                          , subject
-                          , description
-                          , contributors
-                          , effective_date
-                          , expiration_date
-                          , format
-                          , language
-                          , rights
-                          )
+        self._editMetadata(title, subject, description, contributors, effective_date, expiration_date, format, language, rights
+                           )
 
     #
     #  Set-modification-date-related methods.
@@ -106,6 +89,7 @@ def __init__( self
     modification_date = None
 
     security.declarePrivate('notifyModified')
+
     def notifyModified(self):
         """ Take appropriate action after the resource has been modified.
 
@@ -115,6 +99,7 @@ def notifyModified(self):
         self.setModificationDate()
 
     security.declareProtected(ModifyPortalContent, 'addCreator')
+
     def addCreator(self, creator=None):
         """ Add creator to Dublin Core creators.
         """
@@ -127,6 +112,7 @@ def addCreator(self, creator=None):
             self.creators = self.creators + (creator, )
 
     security.declareProtected(ModifyPortalContent, 'setModificationDate')
+
     def setModificationDate(self, modification_date=None):
         """ Set the date when the resource was last modified.
 
@@ -141,12 +127,14 @@ def setModificationDate(self, modification_date=None):
     #  DublinCore interface query methods
     #
     security.declareProtected(View, 'Title')
-    def Title( self ):
+
+    def Title(self):
         """ Dublin Core Title element - resource name.
         """
         return self.title
 
     security.declareProtected(View, 'listCreators')
+
     def listCreators(self):
         """ List Dublin Core Creator elements - resource authors.
         """
@@ -160,6 +148,7 @@ def listCreators(self):
         return self.creators
 
     security.declareProtected(View, 'Creator')
+
     def Creator(self):
         """ Dublin Core Creator element - resource author.
         """
@@ -167,19 +156,22 @@ def Creator(self):
         return creators and creators[0] or ''
 
     security.declareProtected(View, 'Subject')
-    def Subject( self ):
+
+    def Subject(self):
         """ Dublin Core Subject element - resource keywords.
         """
-        return getattr( self, 'subject', () ) # compensate for *old* content
+        return getattr(self, 'subject', ())  # compensate for *old* content
 
     security.declareProtected(View, 'Description')
-    def Description( self ):
+
+    def Description(self):
         """ Dublin Core Description element - resource summary.
         """
         return self.description
 
     security.declareProtected(View, 'Publisher')
-    def Publisher( self ):
+
+    def Publisher(self):
         """ Dublin Core Publisher element - resource publisher.
         """
         tool = getToolByName(self, 'portal_metadata', None)
@@ -190,31 +182,35 @@ def Publisher( self ):
         return 'No publisher'
 
     security.declareProtected(View, 'listContributors')
+
     def listContributors(self):
         """ Dublin Core Contributor elements - resource collaborators.
         """
         return self.contributors
 
     security.declareProtected(View, 'Contributors')
+
     def Contributors(self):
         """ Deprecated alias of listContributors.
         """
         return self.listContributors()
 
     security.declareProtected(View, 'Date')
-    def Date( self, zone=None ):
+
+    def Date(self, zone=None):
         """ Dublin Core Date element - default date.
         """
         if zone is None:
             zone = _zone
         # Return effective_date if set, modification date otherwise
-        date = getattr(self, 'effective_date', None )
+        date = getattr(self, 'effective_date', None)
         if date is None:
             date = self.modified()
         return date.toZone(zone).ISO()
 
     security.declareProtected(View, 'CreationDate')
-    def CreationDate( self, zone=None ):
+
+    def CreationDate(self, zone=None):
         """ Dublin Core Date element - date resource created.
         """
         if zone is None:
@@ -226,25 +222,28 @@ def CreationDate( self, zone=None ):
             return 'Unknown'
 
     security.declareProtected(View, 'EffectiveDate')
-    def EffectiveDate( self, zone=None ):
+
+    def EffectiveDate(self, zone=None):
         """ Dublin Core Date element - date resource becomes effective.
         """
         if zone is None:
             zone = _zone
-        ed = getattr( self, 'effective_date', None )
+        ed = getattr(self, 'effective_date', None)
         return ed and ed.toZone(zone).ISO() or 'None'
 
     security.declareProtected(View, 'ExpirationDate')
-    def ExpirationDate( self, zone=None ):
+
+    def ExpirationDate(self, zone=None):
         """ Dublin Core Date element - date resource expires.
         """
         if zone is None:
             zone = _zone
-        ed = getattr( self, 'expiration_date', None )
+        ed = getattr(self, 'expiration_date', None)
         return ed and ed.toZone(zone).ISO() or 'None'
 
     security.declareProtected(View, 'ModificationDate')
-    def ModificationDate( self, zone=None ):
+
+    def ModificationDate(self, zone=None):
         """ Dublin Core Date element - date resource last modified.
         """
         if zone is None:
@@ -252,20 +251,23 @@ def ModificationDate( self, zone=None ):
         return self.modified().toZone(zone).ISO()
 
     security.declareProtected(View, 'Type')
-    def Type( self ):
+
+    def Type(self):
         """ Dublin Core Type element - resource type.
         """
         ti = self.getTypeInfo()
         return ti is not None and ti.Title() or 'Unknown'
 
     security.declareProtected(View, 'Format')
-    def Format( self ):
+
+    def Format(self):
         """ Dublin Core Format element - resource format.
         """
         return self.format
 
     security.declareProtected(View, 'Identifier')
-    def Identifier( self ):
+
+    def Identifier(self):
         """ Dublin Core Identifier element - resource ID.
         """
         # XXX: fixme using 'portal_metadata' (we need to prepend the
@@ -273,13 +275,15 @@ def Identifier( self ):
         return self.absolute_url()
 
     security.declareProtected(View, 'Language')
-    def Language( self ):
+
+    def Language(self):
         """ Dublin Core Language element - resource language.
         """
         return self.language
 
     security.declareProtected(View, 'Rights')
-    def Rights( self ):
+
+    def Rights(self):
         """ Dublin Core Rights element - resource copyright.
         """
         return self.rights
@@ -287,55 +291,60 @@ def Rights( self ):
     #
     #  DublinCore utility methods
     #
-    def content_type( self ):
+    def content_type(self):
         """ WebDAV needs this to do the Right Thing (TM).
         """
         return self.Format()
 
-    __FLOOR_DATE = DateTime( 1970, 0 ) # always effective
+    __FLOOR_DATE = DateTime(1970, 0)  # always effective
 
     security.declareProtected(View, 'isEffective')
-    def isEffective( self, date ):
+
+    def isEffective(self, date):
         """ Is the date within the resource's effective range?
         """
-        pastEffective = ( self.effective_date is None
-                       or self.effective_date <= date )
-        beforeExpiration = ( self.expiration_date is None
-                          or self.expiration_date >= date )
+        pastEffective = (self.effective_date is None
+                         or self.effective_date <= date)
+        beforeExpiration = (self.expiration_date is None
+                            or self.expiration_date >= date)
         return pastEffective and beforeExpiration
 
     #
     #  CatalogableDublinCore methods
     #
     security.declareProtected(View, 'created')
-    def created( self ):
+
+    def created(self):
         """ Dublin Core Date element - date resource created.
         """
         # allow for non-existent creation_date, existed always
-        date = getattr( self, 'creation_date', None )
+        date = getattr(self, 'creation_date', None)
         return date is None and self.__FLOOR_DATE or date
 
     security.declareProtected(View, 'effective')
-    def effective( self ):
+
+    def effective(self):
         """ Dublin Core Date element - date resource becomes effective.
         """
         marker = []
-        date = getattr( self, 'effective_date', marker )
+        date = getattr(self, 'effective_date', marker)
         if date is marker:
-            date = getattr( self, 'creation_date', None )
+            date = getattr(self, 'creation_date', None)
         return date is None and self.__FLOOR_DATE or date
 
-    __CEILING_DATE = DateTime( 2500, 0 ) # never expires
+    __CEILING_DATE = DateTime(2500, 0)  # never expires
 
     security.declareProtected(View, 'expires')
-    def expires( self ):
+
+    def expires(self):
         """ Dublin Core Date element - date resource expires.
         """
-        date = getattr( self, 'expiration_date', None )
+        date = getattr(self, 'expiration_date', None)
         return date is None and self.__CEILING_DATE or date
 
     security.declareProtected(View, 'modified')
-    def modified( self ):
+
+    def modified(self):
         """ Dublin Core Date element - date resource last modified.
         """
         date = self.modification_date
@@ -346,92 +355,104 @@ def modified( self ):
         return date
 
     security.declareProtected(View, 'getMetadataHeaders')
-    def getMetadataHeaders( self ):
+
+    def getMetadataHeaders(self):
         """ Return RFC-822-style headers.
         """
         hdrlist = []
-        hdrlist.append( ( 'Title', self.Title() ) )
-        hdrlist.append( ( 'Subject', ', '.join( self.Subject() ) ) )
-        hdrlist.append( ( 'Publisher', self.Publisher() ) )
-        hdrlist.append( ( 'Description', self.Description() ) )
-        hdrlist.append( ( 'Contributors', '; '.join( self.Contributors() ) ) )
-        hdrlist.append( ( 'Effective_date', self.EffectiveDate() ) )
-        hdrlist.append( ( 'Expiration_date', self.ExpirationDate() ) )
-        hdrlist.append( ( 'Type', self.Type() ) )
-        hdrlist.append( ( 'Format', self.Format() ) )
-        hdrlist.append( ( 'Language', self.Language() ) )
-        hdrlist.append( ( 'Rights', self.Rights() ) )
+        hdrlist.append(('Title', self.Title()))
+        hdrlist.append(('Subject', ', '.join(self.Subject())))
+        hdrlist.append(('Publisher', self.Publisher()))
+        hdrlist.append(('Description', self.Description()))
+        hdrlist.append(('Contributors', '; '.join(self.Contributors())))
+        hdrlist.append(('Effective_date', self.EffectiveDate()))
+        hdrlist.append(('Expiration_date', self.ExpirationDate()))
+        hdrlist.append(('Type', self.Type()))
+        hdrlist.append(('Format', self.Format()))
+        hdrlist.append(('Language', self.Language()))
+        hdrlist.append(('Rights', self.Rights()))
         return hdrlist
 
     #
     #  MutableDublinCore methods
     #
-    security.declarePrivate( '_datify' )
-    def _datify( self, attrib ):
+    security.declarePrivate('_datify')
+
+    def _datify(self, attrib):
         if attrib == 'None':
             attrib = None
-        elif not isinstance( attrib, DateTime ):
+        elif not isinstance(attrib, DateTime):
             if attrib is not None:
-                attrib = DateTime( attrib )
+                attrib = DateTime(attrib)
         return attrib
 
     security.declareProtected(ModifyPortalContent, 'setTitle')
-    def setTitle( self, title ):
+
+    def setTitle(self, title):
         """ Set Dublin Core Title element - resource name.
         """
         self.title = title
 
     security.declareProtected(ModifyPortalContent, 'setCreators')
+
     def setCreators(self, creators):
         """ Set Dublin Core Creator elements - resource authors.
         """
         self.creators = tuplize('creators', creators)
 
     security.declareProtected(ModifyPortalContent, 'setSubject')
-    def setSubject( self, subject ):
+
+    def setSubject(self, subject):
         """ Set Dublin Core Subject element - resource keywords.
         """
-        self.subject = tuplize( 'subject', subject )
+        self.subject = tuplize('subject', subject)
 
     security.declareProtected(ModifyPortalContent, 'setDescription')
-    def setDescription( self, description ):
+
+    def setDescription(self, description):
         """ Set Dublin Core Description element - resource summary.
         """
         self.description = description
 
     security.declareProtected(ModifyPortalContent, 'setContributors')
-    def setContributors( self, contributors ):
+
+    def setContributors(self, contributors):
         """ Set Dublin Core Contributor elements - resource collaborators.
         """
-        semi_split = lambda s: map(lambda x: x.strip(), s.split( ';' ) )
+        semi_split = lambda s: map(lambda x: x.strip(), s.split(';'))
         self.contributors = tuplize('contributors', contributors, semi_split)
 
     security.declareProtected(ModifyPortalContent, 'setEffectiveDate')
-    def setEffectiveDate( self, effective_date ):
+
+    def setEffectiveDate(self, effective_date):
         """ Set Dublin Core Date element - date resource becomes effective.
         """
-        self.effective_date = self._datify( effective_date )
+        self.effective_date = self._datify(effective_date)
 
     security.declareProtected(ModifyPortalContent, 'setExpirationDate')
-    def setExpirationDate( self, expiration_date ):
+
+    def setExpirationDate(self, expiration_date):
         """ Set Dublin Core Date element - date resource expires.
         """
-        self.expiration_date = self._datify( expiration_date )
+        self.expiration_date = self._datify(expiration_date)
 
     security.declareProtected(ModifyPortalContent, 'setFormat')
-    def setFormat( self, format ):
+
+    def setFormat(self, format):
         """ Set Dublin Core Format element - resource format.
         """
         self.format = format
 
     security.declareProtected(ModifyPortalContent, 'setLanguage')
-    def setLanguage( self, language ):
+
+    def setLanguage(self, language):
         """ Set Dublin Core Language element - resource language.
         """
         self.language = language
 
     security.declareProtected(ModifyPortalContent, 'setRights')
-    def setRights( self, rights ):
+
+    def setRights(self, rights):
         """ Set Dublin Core Rights element - resource copyright.
         """
         self.rights = rights
@@ -440,77 +461,50 @@ def setRights( self, rights ):
     #  Management tab methods
     #
 
-    security.declarePrivate( '_editMetadata' )
-    def _editMetadata( self
-                     , title=_marker
-                     , subject=_marker
-                     , description=_marker
-                     , contributors=_marker
-                     , effective_date=_marker
-                     , expiration_date=_marker
-                     , format=_marker
-                     , language=_marker
-                     , rights=_marker
-                     ):
+    security.declarePrivate('_editMetadata')
+
+    def _editMetadata(self, title=_marker, subject=_marker, description=_marker, contributors=_marker, effective_date=_marker, expiration_date=_marker, format=_marker, language=_marker, rights=_marker
+                      ):
         """ Update the editable metadata for this resource.
         """
         if title is not _marker:
-            self.setTitle( title )
+            self.setTitle(title)
         if subject is not _marker:
-            self.setSubject( subject )
+            self.setSubject(subject)
         if description is not _marker:
-            self.setDescription( description )
+            self.setDescription(description)
         if contributors is not _marker:
-            self.setContributors( contributors )
+            self.setContributors(contributors)
         if effective_date is not _marker:
-            self.setEffectiveDate( effective_date )
+            self.setEffectiveDate(effective_date)
         if expiration_date is not _marker:
-            self.setExpirationDate( expiration_date )
+            self.setExpirationDate(expiration_date)
         if format is not _marker:
-            self.setFormat( format )
+            self.setFormat(format)
         if language is not _marker:
-            self.setLanguage( language )
+            self.setLanguage(language)
         if rights is not _marker:
-            self.setRights( rights )
+            self.setRights(rights)
 
     security.declareProtected(ModifyPortalContent, 'manage_metadata')
-    manage_metadata = DTMLFile( 'zmi_metadata', WWW_DIR )
+    manage_metadata = DTMLFile('zmi_metadata', WWW_DIR)
 
     security.declareProtected(ModifyPortalContent, 'manage_editMetadata')
-    def manage_editMetadata( self
-                           , title
-                           , subject
-                           , description
-                           , contributors
-                           , effective_date
-                           , expiration_date
-                           , format
-                           , language
-                           , rights
-                           , REQUEST
-                           ):
+
+    def manage_editMetadata(self, title, subject, description, contributors, effective_date, expiration_date, format, language, rights, REQUEST
+                            ):
         """ Update metadata from the ZMI.
         """
-        self._editMetadata( title, subject, description, contributors
-                          , effective_date, expiration_date
-                          , format, language, rights
-                          )
-        REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-                                + '/manage_metadata'
-                                + '?manage_tabs_message=Metadata+updated.' )
+        self._editMetadata(title, subject, description, contributors, effective_date, expiration_date, format, language, rights
+                           )
+        REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                     + '/manage_metadata'
+                                     + '?manage_tabs_message=Metadata+updated.')
 
     security.declareProtected(ModifyPortalContent, 'editMetadata')
-    def editMetadata(self
-                   , title=''
-                   , subject=()
-                   , description=''
-                   , contributors=()
-                   , effective_date=None
-                   , expiration_date=None
-                   , format='text/html'
-                   , language='en-US'
-                   , rights=''
-                    ):
+
+    def editMetadata(self, title='', subject=(), description='', contributors=(), effective_date=None, expiration_date=None, format='text/html', language='en-US', rights=''
+                     ):
         """
         Need to add check for webDAV locked resource for TTW methods.
         """
@@ -519,16 +513,8 @@ def editMetadata(self
         if hasattr(self, 'failIfLocked'):
             self.failIfLocked()
 
-        self._editMetadata(title=title
-                     , subject=subject
-                     , description=description
-                     , contributors=contributors
-                     , effective_date=effective_date
-                     , expiration_date=expiration_date
-                     , format=format
-                     , language=language
-                     , rights=rights
-                     )
+        self._editMetadata(title=title, subject=subject, description=description, contributors=contributors, effective_date=effective_date, expiration_date=expiration_date, format=format, language=language, rights=rights
+                           )
         self.reindexObject()
 
 InitializeClass(DefaultDublinCoreImpl)
diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index ddbb00a..ce53f6c 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -101,7 +101,7 @@ def upgrade_all(self, context):
     Addon(profile_id=u'plone.app.querystring:default'),
     Addon(profile_id=u'plone.app.theming:default'),
     Addon(profile_id=u'plone.app.users:default'),
-    ])
+])
 
 
 class MigrationTool(PloneBaseTool, UniqueObject, SimpleItem):
@@ -123,6 +123,7 @@ class MigrationTool(PloneBaseTool, UniqueObject, SimpleItem):
     security = ClassSecurityInfo()
 
     security.declareProtected(ManagePortal, 'getInstanceVersion')
+
     def getInstanceVersion(self):
         """ The version this instance of plone is on """
         setup = getToolByName(self, 'portal_setup')
@@ -150,6 +151,7 @@ def getInstanceVersion(self):
         return version
 
     security.declareProtected(ManagePortal, 'setInstanceVersion')
+
     def setInstanceVersion(self, version):
         """ The version this instance of plone is on """
         setup = getToolByName(self, 'portal_setup')
@@ -157,6 +159,7 @@ def setInstanceVersion(self, version):
         self._version = False
 
     security.declareProtected(ManagePortal, 'getFileSystemVersion')
+
     def getFileSystemVersion(self):
         """ The version this instance of plone is on """
         setup = getToolByName(self, 'portal_setup')
@@ -167,17 +170,20 @@ def getFileSystemVersion(self):
         return None
 
     security.declareProtected(ManagePortal, 'getSoftwareVersion')
+
     def getSoftwareVersion(self):
         """ The software version."""
         dist = pkg_resources.get_distribution('Products.CMFPlone')
         return dist.version
 
     security.declareProtected(ManagePortal, 'needUpgrading')
+
     def needUpgrading(self):
         """ Need upgrading? """
         return self.getInstanceVersion() != self.getFileSystemVersion()
 
     security.declareProtected(ManagePortal, 'coreVersions')
+
     def coreVersions(self):
         """ Useful core information """
         vars = {}
@@ -209,6 +215,7 @@ def coreVersions(self):
         return vars
 
     security.declareProtected(ManagePortal, 'coreVersionsList')
+
     def coreVersionsList(self):
         """ Useful core information """
         res = self.coreVersions().items()
@@ -216,16 +223,19 @@ def coreVersionsList(self):
         return res
 
     security.declareProtected(ManagePortal, 'needUpdateRole')
+
     def needUpdateRole(self):
         """ Do roles need to be updated? """
         return self._needUpdateRole
 
     security.declareProtected(ManagePortal, 'needRecatalog')
+
     def needRecatalog(self):
         """ Does this thing now need recataloging? """
         return self._needRecatalog
 
     security.declareProtected(ManagePortal, 'upgrade')
+
     def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
         """ perform the upgrade """
         setup = getToolByName(self, 'portal_setup')
diff --git a/Products/CMFPlone/PloneBatch.py b/Products/CMFPlone/PloneBatch.py
index 6471ae3..48b396e 100644
--- a/Products/CMFPlone/PloneBatch.py
+++ b/Products/CMFPlone/PloneBatch.py
@@ -15,16 +15,16 @@ def __init__(self, sequence, size, start=0, end=0, orphan=0,
                  b_start_str='b_start'):
         super(Batch, self).__init__(sequence, size, start,
                                     end, orphan, overlap,
-              pagerange, quantumleap)
+                                    pagerange, quantumleap)
         self.b_start_str = b_start_str
 
     def __len__(self):
         return self.length
     __len__ = deprecated(__len__,
-        ('Using len() is deprecated. Use the `length` attribute for the '
-         'size of the current page, which is what we return now. '
-         'Use the `sequence_length` attribute for the size of the '
-         'entire sequence. '))
+                         ('Using len() is deprecated. Use the `length` attribute for the '
+                          'size of the current page, which is what we return now. '
+                          'Use the `sequence_length` attribute for the size of the '
+                          'entire sequence. '))
 
     def __nonzero__(self):
         # Without __nonzero__ a bool(self) would call len(self), which
@@ -50,7 +50,7 @@ def navurls(self, formvariables, navlist=None):
         if not navlist:
             navlist = self.navlist
         return map(lambda x, formvariables=formvariables:
-                (x, self.pageurl(formvariables, x)), navlist)
+                   (x, self.pageurl(formvariables, x)), navlist)
 
     def prevurls(self, formvariables):
         """ Helper method to get prev navigation list from templates """
diff --git a/Products/CMFPlone/PloneControlPanel.py b/Products/CMFPlone/PloneControlPanel.py
index a127414..c939db7 100644
--- a/Products/CMFPlone/PloneControlPanel.py
+++ b/Products/CMFPlone/PloneControlPanel.py
@@ -64,14 +64,14 @@ class PloneControlPanel(PloneBaseTool, UniqueObject,
             ('Member', _(u'My Preferences')),
         ],
         site=[
-              ('plone-general', _(u'General')),
-              ('plone-content', _(u'Content')),
-              ('plone-users', _(u'Users')),
-              ('plone-security', _(u'Security')),
-              ('plone-advanced', _(u'Advanced')),
-              ('Plone', _(u'Plone Configuration')),
-              ('Products', _(u'Add-on Configuration')),
-             ]
+            ('plone-general', _(u'General')),
+            ('plone-content', _(u'Content')),
+            ('plone-users', _(u'Users')),
+            ('plone-security', _(u'Security')),
+            ('plone-advanced', _(u'Advanced')),
+            ('Plone', _(u'Plone Configuration')),
+            ('Products', _(u'Add-on Configuration')),
+        ]
     )
 
     def __init__(self, **kw):
@@ -79,21 +79,25 @@ def __init__(self, **kw):
             self.__dict__.update(**kw)
 
     security.declareProtected(ManagePortal, 'registerConfiglets')
+
     def registerConfiglets(self, configlets):
         for conf in configlets:
             self.registerConfiglet(**conf)
 
     security.declareProtected(ManagePortal, 'getGroupIds')
+
     def getGroupIds(self, category='site'):
         groups = self.group.get(category, [])
         return [g[0] for g in groups if g]
 
     security.declareProtected(View, 'getGroups')
+
     def getGroups(self, category='site'):
         groups = self.group.get(category, [])
         return [{'id': g[0], 'title': g[1]} for g in groups if g]
 
     security.declarePrivate('listActions')
+
     def listActions(self, info=None, object=None):
         # This exists here to shut up a deprecation warning about old-style
         # actions in CMFCore's ActionProviderBase.  It was decided not to
@@ -103,6 +107,7 @@ def listActions(self, info=None, object=None):
         return self._actions or ()
 
     security.declarePublic('maySeeSomeConfiglets')
+
     def maySeeSomeConfiglets(self):
         groups = self.getGroups('site')
 
@@ -113,6 +118,7 @@ def maySeeSomeConfiglets(self):
         return len(all) != 0
 
     security.declarePublic('enumConfiglets')
+
     def enumConfiglets(self, group=None):
         portal = getToolByName(self, 'portal_url').getPortalObject()
         context = createExprContext(self, portal, self)
@@ -140,6 +146,7 @@ def _id(v):
         return res
 
     security.declareProtected(ManagePortal, 'unregisterConfiglet')
+
     def unregisterConfiglet(self, id):
         actids = [o.id for o in self.listActions()]
         selection = [actids.index(a) for a in actids if a == id]
@@ -148,6 +155,7 @@ def unregisterConfiglet(self, id):
         self.deleteActions(selection)
 
     security.declareProtected(ManagePortal, 'unregisterApplication')
+
     def unregisterApplication(self, appId):
         acts = list(self.listActions())
         selection = [acts.index(a) for a in acts if a.appId == appId]
@@ -203,6 +211,7 @@ def _extractAction(self, properties, index):
                               )
 
     security.declareProtected(ManagePortal, 'addAction')
+
     def addAction(self,
                   id,
                   name,
@@ -252,6 +261,7 @@ def addAction(self,
     registerConfiglet = addAction
 
     security.declareProtected(ManagePortal, 'manage_editActionsForm')
+
     def manage_editActionsForm(self, REQUEST, manage_tabs_message=None):
         """ Show the 'Actions' management tab.
         """
@@ -285,7 +295,7 @@ def manage_editActionsForm(self, REQUEST, manage_tabs_message=None):
             possible_permissions=pp,
             management_view='Actions',
             manage_tabs_message=manage_tabs_message,
-            )
+        )
 
 InitializeClass(PloneControlPanel)
 registerToolInterface('portal_controlpanel', IControlPanel)
diff --git a/Products/CMFPlone/PloneFolder.py b/Products/CMFPlone/PloneFolder.py
index 06325b7..c0a64d1 100644
--- a/Products/CMFPlone/PloneFolder.py
+++ b/Products/CMFPlone/PloneFolder.py
@@ -17,11 +17,11 @@
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.CMFCatalogAware import CatalogAware, WorkflowAware, \
-                    OpaqueItemManager
+    OpaqueItemManager
 from Products.CMFCore.PortalFolder import PortalFolderBase
 from Products.CMFCore.permissions import AccessContentsInformation, \
-                    AddPortalContent, AddPortalFolders, ListFolderContents, \
-                    ModifyPortalContent
+    AddPortalContent, AddPortalFolders, ListFolderContents, \
+    ModifyPortalContent
 from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl
 
 from zope.interface import implements
@@ -45,6 +45,7 @@ class OrderedContainer(Folder, OrderSupport):
     security = ClassSecurityInfo()
 
     security.declareProtected(ModifyPortalContent, 'moveObject')
+
     def moveObject(self, id, position):
         obj_idx = self.getObjectPosition(id)
         if obj_idx == position:
@@ -58,17 +59,19 @@ def moveObject(self, id, position):
         self._objects = tuple(metadata)
 
     security.declarePrivate('getIdsSubset')
+
     def getIdsSubset(self, objs):
         """Get the ids of only cmf objects (used for moveObjectsByDelta)."""
         ttool = getToolByName(self, 'portal_types')
         cmf_meta_types = [ti.Metatype() for ti in ttool.listTypeInfo()]
         return [obj['id'] for obj in objs
-                    if obj['meta_type'] in cmf_meta_types]
+                if obj['meta_type'] in cmf_meta_types]
 
     # BBB
     getCMFObjectsSubsetIds = getIdsSubset
 
     security.declareProtected(ModifyPortalContent, 'getObjectPosition')
+
     def getObjectPosition(self, id):
         try:
             pos = OrderSupport.getObjectPosition(self, id)
@@ -100,7 +103,7 @@ class BasePloneFolder(CatalogAware, WorkflowAware, OpaqueItemManager,
     implements(IWriteLock)
 
     manage_options = Folder.manage_options + \
-                     WorkflowAware.manage_options
+        WorkflowAware.manage_options
 
     # Fix permissions set by CopySupport.py
     __ac_permissions__ = (
@@ -108,7 +111,7 @@ class BasePloneFolder(CatalogAware, WorkflowAware, OpaqueItemManager,
          ('manage_cutObjects', 'manage_pasteObjects',
           'manage_renameForm', 'manage_renameObject',
           'manage_renameObjects', )),
-        )
+    )
 
     security.declareProtected(Permissions.copy_or_move, 'manage_copyObjects')
 
@@ -130,7 +133,7 @@ def __call__(self):
                 return method()
         else:
             raise NotFound('Cannot find default view for "%s"' %
-                            '/'.join(self.getPhysicalPath()))
+                           '/'.join(self.getPhysicalPath()))
 
     security.declareProtected(Permissions.view, 'view')
     view = __call__
@@ -156,6 +159,7 @@ def index_html(self):
     index_html = ComputedAttribute(index_html, 1)
 
     security.declareProtected(AddPortalFolders, 'manage_addPloneFolder')
+
     def manage_addPloneFolder(self, id, title='', REQUEST=None):
         """Adds a new PloneFolder."""
         ob = PloneFolder(id, title)
@@ -168,6 +172,7 @@ def manage_addPloneFolder(self, id, title='', REQUEST=None):
     manage_renameObject = PortalFolderBase.manage_renameObject
 
     security.declareProtected(Permissions.delete_objects, 'manage_delObjects')
+
     def manage_delObjects(self, ids=None, REQUEST=None):
         """We need to enforce security."""
         if ids is None:
@@ -188,6 +193,7 @@ def __browser_default__(self, request):
         return getToolByName(self, 'plone_utils').browserDefault(self)
 
     security.declarePublic('contentValues')
+
     def contentValues(self, filter=None, sort_on=None, reverse=0):
         """Able to sort on field."""
         values = PortalFolderBase.contentValues(self, filter=filter)
@@ -201,19 +207,21 @@ def contentValues(self, filter=None, sort_on=None, reverse=0):
         return values
 
     security.declareProtected(ListFolderContents, 'listFolderContents')
+
     def listFolderContents(self, contentFilter=None,
                            suppressHiddenFiles=0):
         """Optionally you can suppress "hidden" files, or files that
         begin with .
         """
         contents = PortalFolderBase.listFolderContents(self,
-                                                  contentFilter=contentFilter)
+                                                       contentFilter=contentFilter)
         if suppressHiddenFiles:
             contents = [obj for obj in contents if obj.getId()[:1] != '.']
         return contents
 
     security.declareProtected(AccessContentsInformation,
                               'folderlistingFolderContents')
+
     def folderlistingFolderContents(self, contentFilter=None,
                                     suppressHiddenFiles=0):
         """Calls listFolderContents in protected only by ACI so that
@@ -224,6 +232,7 @@ def folderlistingFolderContents(self, contentFilter=None,
     # Override CMFCore's invokeFactory to return the id returned by the
     # factory in case the factory modifies the id
     security.declareProtected(AddPortalContent, 'invokeFactory')
+
     def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         """Invokes the portal_types tool."""
         pt = getToolByName(self, 'portal_types')
diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index 7ca7f32..5e59bc4 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -73,17 +73,17 @@
     # The first two rows are handle in a special way
     # 'Description'      : 'description',
     # 'Subject'          : 'keywords',
-    'Description'      : 'DC.description',
-    'Subject'          : 'DC.subject',
-    'Creator'          : 'DC.creator',
-    'Contributors'     : 'DC.contributors',
-    'Publisher'        : 'DC.publisher',
-    'CreationDate'     : 'DC.date.created',
-    'ModificationDate' : 'DC.date.modified',
-    'Type'             : 'DC.type',
-    'Format'           : 'DC.format',
-    'Language'         : 'DC.language',
-    'Rights'           : 'DC.rights',
+    'Description': 'DC.description',
+    'Subject': 'DC.subject',
+    'Creator': 'DC.creator',
+    'Contributors': 'DC.contributors',
+    'Publisher': 'DC.publisher',
+    'CreationDate': 'DC.date.created',
+    'ModificationDate': 'DC.date.modified',
+    'Type': 'DC.type',
+    'Format': 'DC.format',
+    'Language': 'DC.language',
+    'Rights': 'DC.rights',
 }
 METADATA_DC_AUTHORFIELDS = ('Creator', 'Contributors', 'Publisher')
 
@@ -302,7 +302,7 @@ def _makeTransactionNote(self, obj, msg=''):
         )
         if not msg:
             msg = relative_path + '/' + obj.title_or_id() \
-                    + ' has been modified.'
+                + ' has been modified.'
         if isinstance(msg, UnicodeType):
             # Convert unicode to a regular string for the backend write IO.
             # UTF-8 is the only reasonable choice, as using unicode means
@@ -955,7 +955,8 @@ def listMetaTags(self, context):
         mt = getToolByName(self, 'portal_membership')
 
         registry = getUtility(IRegistry)
-        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)
+        site_settings = registry.forInterface(
+            ISiteSchema, prefix="plone", check=False)
         use_all = site_settings.exposeDCMetaTags
 
         try:
diff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py
index 0f5ca29..d4ad75f 100644
--- a/Products/CMFPlone/Portal.py
+++ b/Products/CMFPlone/Portal.py
@@ -48,8 +48,8 @@ class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
         (ReplyToItem, ()),
         (View, ('isEffective',)),
         (ModifyPortalContent, ('manage_cutObjects', 'manage_pasteObjects',
-            'manage_renameForm', 'manage_renameObject',
-            'manage_renameObjects')))
+                               'manage_renameForm', 'manage_renameObject',
+                               'manage_renameObjects')))
 
     security.declareProtected(Permissions.copy_or_move, 'manage_copyObjects')
 
@@ -66,7 +66,7 @@ class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
     _properties = (
         {'id': 'title', 'type': 'string', 'mode': 'w'},
         {'id': 'description', 'type': 'text', 'mode': 'w'},
-        )
+    )
     title = ''
     description = ''
     icon = 'misc_/CMFPlone/tool.gif'
@@ -107,6 +107,7 @@ def manage_beforeDelete(self, container, item):
                                                             item)
 
     security.declareProtected(permissions.DeleteObjects, 'manage_delObjects')
+
     def manage_delObjects(self, ids=None, REQUEST=None):
         """We need to enforce security."""
         if ids is None:
@@ -139,6 +140,7 @@ def folderlistingFolderContents(self, contentFilter=None):
         return self.listFolderContents(contentFilter)
 
     security.declarePublic('availableLanguages')
+
     def availableLanguages(self):
         util = queryUtility(IMetadataLanguageAvailability)
         languages = util.getLanguageListing()
@@ -147,6 +149,7 @@ def availableLanguages(self):
         languages.insert(0, (u'', _(u'Language neutral (site default)')))
 
         return languages
+
     def isEffective(self, date):
         """ Override DefaultDublinCoreImpl's test, since we are always viewable.
         """
diff --git a/Products/CMFPlone/PropertiesTool.py b/Products/CMFPlone/PropertiesTool.py
index f712fda..6450cba 100644
--- a/Products/CMFPlone/PropertiesTool.py
+++ b/Products/CMFPlone/PropertiesTool.py
@@ -32,13 +32,13 @@ class PropertiesTool(PloneBaseTool, Folder, UniqueObject):
     meta_types = ((
         {'name': 'Plone Property Sheet',
          'action': 'manage_addPropertySheetForm'},
-        ))
+    ))
 
     implements(IPropertiesTool)
 
     manage_options = ((Folder.manage_options[0], ) +
                       ({'label': 'Overview',
-                       'action': 'manage_overview'},) +
+                        'action': 'manage_overview'},) +
                       SimpleItem.manage_options)
 
     manage_addPropertySheetForm = PageTemplateFile('www/addPropertySheet',
@@ -47,12 +47,13 @@ class PropertiesTool(PloneBaseTool, Folder, UniqueObject):
     security = ClassSecurityInfo()
 
     security.declareProtected(ManagePortal, 'manage_overview')
-    manage_overview = DTMLFile('explainPropertiesTool', WWW_DIR )
+    manage_overview = DTMLFile('explainPropertiesTool', WWW_DIR)
 
     def all_meta_types(self, interfaces=None):
         return self.meta_types
 
     security.declareProtected(ManagePortal, 'addPropertySheet')
+
     def addPropertySheet(self, id, title='', propertysheet=None):
         """ Add a new PropertySheet
         """
@@ -73,6 +74,7 @@ def addPropertySheet(self, id, title='', propertysheet=None):
         self._setObject(id, o)
 
     security.declareProtected(ManagePortal, 'manage_addPropertySheet')
+
     def manage_addPropertySheet(self, id, title='',
                                 propertysheet=None, REQUEST=None):
         """ Add a instance of a Property Sheet if handed a
@@ -87,6 +89,7 @@ def manage_addPropertySheet(self, id, title='',
     #   'portal_properties' interface methods
     #
     security.declareProtected(ManagePortal, 'editProperties')
+
     def editProperties(self, props):
         """Change portal settings
         """
@@ -124,6 +127,6 @@ def __init__(self, id, title=''):
     meta_type = 'Plone Property Sheet'
 
     manage_options = (PropertyManager.manage_options
-                     + SimpleItem.manage_options)
+                      + SimpleItem.manage_options)
 
 InitializeClass(SimpleItemWithProperties)
diff --git a/Products/CMFPlone/QuickInstallerTool.py b/Products/CMFPlone/QuickInstallerTool.py
index d15e507..c04f8d6 100644
--- a/Products/CMFPlone/QuickInstallerTool.py
+++ b/Products/CMFPlone/QuickInstallerTool.py
@@ -18,6 +18,7 @@ class QuickInstallerTool(PloneBaseTool, BaseTool):
     toolicon = 'skins/plone_images/product_icon.png'
 
     security.declareProtected(ManagePortal, 'upgradeInfo')
+
     def upgradeInfo(self, pid):
         """Returns a dict with two booleans values, stating if an upgrade
         is required and available.
@@ -37,7 +38,7 @@ def upgradeInfo(self, pid):
                 hasProfile=False,
                 installedVersion=installed_product_version,
                 newVersion=product_version,
-                )
+            )
         profile_id = profile['id']
         setup = getToolByName(self, 'portal_setup')
         profile_version = str(setup.getVersionForProfile(profile_id))
@@ -57,9 +58,10 @@ def upgradeInfo(self, pid):
             hasProfile=True,
             installedVersion=installed_profile_version,
             newVersion=profile_version,
-            )
+        )
 
     security.declareProtected(ManagePortal, 'getLatestUpgradeStep')
+
     def getLatestUpgradeStep(self, profile_id):
         '''
         Get the highest ordered upgrade step available to
@@ -75,13 +77,14 @@ def getLatestUpgradeStep(self, profile_id):
             if available:  # could return empty sequence
                 latest = available[-1]
                 profile_version = max(latest['dest'],
-                        key=pkg_resources.parse_version)
+                                      key=pkg_resources.parse_version)
         except Exception:
             pass
 
         return profile_version
 
     security.declareProtected(ManagePortal, 'upgradeProduct')
+
     def upgradeProduct(self, pid):
         profile = self.getInstallProfile(pid)
         if profile is None:
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index cfcdeb5..ca8108b 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -150,6 +150,7 @@ def getPassword(self, length=5, s=None):
             return password
 
     security.declarePublic('isValidEmail')
+
     def isValidEmail(self, email):
         """ checks for valid email """
         if EMAIL_RE.search(email) == None:
@@ -164,9 +165,9 @@ def isValidEmail(self, email):
     #
     #   'portal_registration' interface
     #
-    security.declarePublic( 'testPasswordValidity' )
-    def testPasswordValidity(self, password, confirm=None):
+    security.declarePublic('testPasswordValidity')
 
+    def testPasswordValidity(self, password, confirm=None):
         """ Verify that the password satisfies the portal's requirements.
 
         o If the password is valid, return None.
@@ -193,17 +194,17 @@ def pasValidation(self, property, password):
         for validator_id, validator in validators:
             user = None
             set_id = ''
-            set_info = {property:password}
-            errors = validator.validateUserInfo( user, set_id, set_info )
+            set_info = {property: password}
+            errors = validator.validateUserInfo(user, set_id, set_info)
             # We will assume that the PASPlugin returns a list of error
             # strings that have already been translated.
             # We just need to join them in an i18n friendly way
-            for error in [info['error'] for info in errors if info['id'] == property ]:
+            for error in [info['error'] for info in errors if info['id'] == property]:
                 if not err:
                     err = error
                 else:
                     msgid = _(u'${sentances}. ${sentance}',
-                            mapping={'sentances': err, 'sentance':error})
+                              mapping={'sentances': err, 'sentance': error})
                     err = self.translate(msgid)
         if not err:
             return None
@@ -211,8 +212,8 @@ def pasValidation(self, property, password):
             return err
 
     security.declarePublic('testPropertiesValidity')
-    def testPropertiesValidity(self, props, member=None):
 
+    def testPropertiesValidity(self, props, member=None):
         """ Verify that the properties supplied satisfy portal's requirements.
 
         o If the properties are valid, return None.
@@ -261,6 +262,7 @@ def testPropertiesValidity(self, props, member=None):
         return None
 
     security.declareProtected(AddPortalMember, 'isMemberIdAllowed')
+
     def isMemberIdAllowed(self, id):
         if len(id) < 1 or id == 'Anonymous User':
             return 0
@@ -301,6 +303,7 @@ def isMemberIdAllowed(self, id):
         return 1
 
     security.declarePublic('generatePassword')
+
     def generatePassword(self):
         """Generate a strong default password. The user never gets sent
         this so we can make it very long."""
@@ -308,12 +311,14 @@ def generatePassword(self):
         return self.getPassword(56)
 
     security.declarePublic('generateResetCode')
+
     def generateResetCode(self, salt, length=14):
         """Generates a reset code which is guaranteed to return the
         same value for a given length and salt, every time."""
         return self.getPassword(length, salt)
 
     security.declarePublic('mailPassword')
+
     def mailPassword(self, login, REQUEST, immediate=False):
         """ Wrapper around mailPassword """
         membership = getToolByName(self, 'portal_membership')
@@ -391,6 +396,7 @@ def mailPassword(self, login, REQUEST, immediate=False):
         return self.mail_password_response(self, REQUEST)
 
     security.declarePublic('registeredNotify')
+
     def registeredNotify(self, new_member_id):
         """ Wrapper around registeredNotify """
         membership = getToolByName(self, 'portal_membership')
@@ -435,8 +441,8 @@ def registeredNotify(self, new_member_id):
 
         return self.mail_password_response(self, self.REQUEST)
 
-
     security.declareProtected(ManagePortal, 'editMember')
+
     @postonly
     def editMember(self, member_id, properties=None, password=None,
                    roles=None, domains=None, REQUEST=None):
@@ -450,7 +456,7 @@ def editMember(self, member_id, properties=None, password=None,
         mtool = getToolByName(self, 'portal_membership')
         member = mtool.getMemberById(member_id)
         member.setMemberProperties(properties)
-        member.setSecurityProfile(password,roles,domains)
+        member.setSecurityProfile(password, roles, domains)
 
         return member
 
@@ -459,25 +465,26 @@ def editMember(self, member_id, properties=None, password=None,
 
 _TESTS = (
     (re.compile("^[0-9a-zA-Z\.\-\_\+\']+\@[0-9a-zA-Z\.\-]+$"),
-      True, "Failed a"),
+     True, "Failed a"),
     (re.compile("^[^0-9a-zA-Z]|[^0-9a-zA-Z]$"),
-      False, "Failed b"),
+     False, "Failed b"),
     (re.compile("([0-9a-zA-Z_]{1})\@."),
-      True, "Failed c"),
+     True, "Failed c"),
     (re.compile(".\@([0-9a-zA-Z]{1})"),
      True, "Failed d"),
     (re.compile(".\.\-.|.\-\..|.\.\..|.!(xn)\-\-."),
-      False, "Failed e"),
+     False, "Failed e"),
     (re.compile(".\.\_.|.\-\_.|.\_\..|.\_\-.|.\_\_."),
-      False, "Failed f"),
+     False, "Failed f"),
     (re.compile("(.\.([a-zA-Z]{2,}))$|(.\.(xn--[0-9a-z]+))$"),
-      True, "Failed g"),
-      )
+     True, "Failed g"),
+)
 
 
 class EmailAddressInvalid(ValidationError):
     __doc__ = _(u'Invalid email address.')
 
+
 def _checkEmail(address):
     for pattern, expected, message in _TESTS:
         matched = pattern.search(address) is not None
@@ -490,15 +497,15 @@ def _checkEmail(address):
 # characters allowed in atom: A-Za-z0-9!#$%&'*+-/=?^_`{|}~
 # RFC 2821 domain: max 255 characters
 _LOCAL_RE = re.compile(r'([A-Za-z0-9!#$%&\'*+\-/=?^_`{|}~]+'
-                     r'(\.[A-Za-z0-9!#$%&\'*+\-/=?^_`{|}~]+)*|'
-                     r'"[^(\|")]*")@[^@]{3,255}$')
+                       r'(\.[A-Za-z0-9!#$%&\'*+\-/=?^_`{|}~]+)*|'
+                       r'"[^(\|")]*")@[^@]{3,255}$')
 
 # RFC 2821 local-part: max 64 characters
 # RFC 2821 domain: sequence of dot-separated labels
 # characters allowed in label: A-Za-z0-9-, first is a letter
 # Even though the RFC does not allow it all-numeric domains do exist
 _DOMAIN_RE = re.compile(r'[^@]{1,64}@[A-Za-z0-9][A-Za-z0-9-]*'
-                                r'(\.[A-Za-z0-9][A-Za-z0-9-]*)+$')
+                        r'(\.[A-Za-z0-9][A-Za-z0-9-]*)+$')
 
 
 def checkEmailAddress(address):
diff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py
index 899f899..f8e536e 100644
--- a/Products/CMFPlone/SkinsTool.py
+++ b/Products/CMFPlone/SkinsTool.py
@@ -18,22 +18,24 @@ class SkinsTool(PloneBaseTool, BaseTool):
     request_varname = 'plone_skin'
 
     security.declareProtected(ManagePortal, 'addSkinSelection')
+
     def addSkinSelection(self, skinname, skinpath, test=0, make_default=0):
         """ adds a skin selection 
         """
         super(SkinsTool, self).addSkinSelection(skinname, skinpath,
-            test=test, make_default=make_default)
+                                                test=test, make_default=make_default)
         # when adding a new skin, we need to tell RR about it
         cookWhenChangingSettings(None, None)
 
     security.declareProtected(ManagePortal, 'manage_skinLayers')
+
     def manage_skinLayers(self, chosen=(), add_skin=0, del_skin=0,
                           skinname='', skinpath='', REQUEST=None):
         """ Change the skinLayers.
         """
         response = super(SkinsTool, self).manage_skinLayers(chosen=chosen,
-            add_skin=add_skin, del_skin=del_skin, skinname=skinname,
-            skinpath=skinpath, REQUEST=REQUEST)
+                                                            add_skin=add_skin, del_skin=del_skin, skinname=skinname,
+                                                            skinpath=skinpath, REQUEST=REQUEST)
         # when changing skins, we need to tell RR about it
         cookWhenChangingSettings(None, None)
         return response
diff --git a/Products/CMFPlone/TranslationServiceTool.py b/Products/CMFPlone/TranslationServiceTool.py
index 7c7e9b6..b7fa8a1 100644
--- a/Products/CMFPlone/TranslationServiceTool.py
+++ b/Products/CMFPlone/TranslationServiceTool.py
@@ -34,10 +34,12 @@ class TranslationServiceTool(PloneBaseTool, UniqueObject, SimpleItem):
     implements(ITranslationServiceTool)
 
     security.declarePublic('utranslate')
+
     def utranslate(self, *args, **kw):
         return self.translate(*args, **kw)
 
     security.declarePublic('translate')
+
     def translate(self, msgid, domain=None, mapping=None, context=None,
                   target_language=None, default=None):
         # Translate method for resticted code like skins.
@@ -50,6 +52,7 @@ def translate(self, msgid, domain=None, mapping=None, context=None,
                          default=default)
 
     security.declarePublic('encode')
+
     def encode(self, m, input_encoding=None, output_encoding=None,
                errors='strict'):
         # encode a give unicode type or string type to string type in encoding
@@ -68,6 +71,7 @@ def encode(self, m, input_encoding=None, output_encoding=None,
         return m.encode(output_encoding, errors)
 
     security.declarePublic('asunicodetype')
+
     def asunicodetype(self, m, input_encoding=None, errors='strict'):
         # create type unicode from type string
 
@@ -81,6 +85,7 @@ def asunicodetype(self, m, input_encoding=None, errors='strict'):
         return unicode(str(m), input_encoding, errors)
 
     security.declarePublic('ulocalized_time')
+
     def ulocalized_time(self, time, long_format=None, time_only=None,
                         context=None, domain='plonelocales', request=None):
         # get some context if none is passed
@@ -90,6 +95,7 @@ def ulocalized_time(self, time, long_format=None, time_only=None,
                                context, domain, request)
 
     security.declarePublic('day_msgid')
+
     def day_msgid(self, number, format=None):
         """ Returns the msgid which can be passed to the translation service
         for l10n of weekday names. Format is either None, 'a' or 's'.
@@ -121,6 +127,7 @@ def day_msgid(self, number, format=None):
         return method(number)
 
     security.declarePublic('month_msgid')
+
     def month_msgid(self, number, format=None):
         """ Returns the msgid which can be passed to the translation service
         for l10n of month names. Format is either '' or 'a' (long or
@@ -142,6 +149,7 @@ def month_msgid(self, number, format=None):
                or monthname_msgid(number)
 
     security.declarePublic('month_english')
+
     def month_english(self, number, format=None):
         """ Returns the english name of month by number. Format is either '' or
         'a' (long or abbreviation).
@@ -157,6 +165,7 @@ def month_english(self, number, format=None):
         return monthname_english(number, format=format)
 
     security.declarePublic('month')
+
     def month(self, number, format=None, default=None):
         """ Returns a Message with the month name, that can be translated by
         the TAL engine. Format is either None or 'a' (long or abbreviation).
@@ -169,6 +178,7 @@ def month(self, number, format=None, default=None):
         return PLMF(value, default=default)
 
     security.declarePublic('weekday_english')
+
     def weekday_english(self, number, format=None):
         """ Returns the english name of a week by number. Format is
         either None, 'a' or 'p'.
diff --git a/Products/CMFPlone/TypesTool.py b/Products/CMFPlone/TypesTool.py
index e72ed31..5fe4de9 100644
--- a/Products/CMFPlone/TypesTool.py
+++ b/Products/CMFPlone/TypesTool.py
@@ -15,6 +15,7 @@ class TypesTool(PloneBaseTool, BaseTool):
     toolicon = 'skins/plone_images/document_icon.png'
 
     security.declarePublic('listTypeTitles')
+
     def listTypeTitles(self, container=None):
         """ Return a dictionary of id/Title combinations """
         typenames = {}
@@ -26,6 +27,7 @@ def listTypeTitles(self, container=None):
         return typenames
 
     security.declarePrivate('listActions')
+
     def listActions(self, info=None, object=None, category=None):
         """ List all the actions defined by a provider.
         """
@@ -43,12 +45,13 @@ def listActions(self, info=None, object=None, category=None):
 
         if category == 'folder/add':
             add_actions = [ti for ti in self.values()
-                            if IAction.providedBy(ti)]
+                           if IAction.providedBy(ti)]
             actions.extend(add_actions)
 
         return actions
 
     security.declarePublic('listActionInfos')
+
     def listActionInfos(self, action_chain=None, object=None,
                         check_visibility=1, check_permissions=1,
                         check_condition=1, max=-1, category=None):
diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index f54e8ff..eb38ece 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -17,6 +17,7 @@ class URLTool(PloneBaseTool, BaseTool):
     toolicon = 'skins/plone_images/link_icon.png'
 
     security.declarePublic('isURLInPortal')
+
     def isURLInPortal(self, url, context=None):
         """ Check if a given url is on the same host and contains the portal
             path.  Used to ensure that login forms can determine relevant
diff --git a/Products/CMFPlone/UnicodeSplitter/config.py b/Products/CMFPlone/UnicodeSplitter/config.py
index f418f1b..12177ee 100644
--- a/Products/CMFPlone/UnicodeSplitter/config.py
+++ b/Products/CMFPlone/UnicodeSplitter/config.py
@@ -8,7 +8,7 @@
 
 STOP_WORD = []
 
-## Setting, adding langs.
+# Setting, adding langs.
 rangetable = dict(
     # ascii=u"a-zA-Z0-9_",
     # digit=u"\d",
@@ -29,15 +29,15 @@
 
     cj=u"\u3040-\u30FF\u4E00-\u9FFF\u3400-\u4DBF\uF900-\uFAFF",
     thai=u"\u0E00-\u0E7F",  # U+0E00-0E7F Thai タイ文字
-    )
-## End of setting.
+)
+# End of setting.
 
 
-## Splitting core.
+# Splitting core.
 ps = rangetable.values()
 allp = u"".join(ps)
 glob_true = u"[^%s]([^%s]|[\*\?])*|" \
-                % (allp, allp) + u"|".join([u"[%s]+" % (x, ) for x in ps])
+    % (allp, allp) + u"|".join([u"[%s]+" % (x, ) for x in ps])
 
 glob_false = u"[^%s]+|" % allp + u"|".join(u"[%s]+" % x for x in ps)
 
diff --git a/Products/CMFPlone/UnicodeSplitter/splitter.py b/Products/CMFPlone/UnicodeSplitter/splitter.py
index d1b76c5..5517e58 100644
--- a/Products/CMFPlone/UnicodeSplitter/splitter.py
+++ b/Products/CMFPlone/UnicodeSplitter/splitter.py
@@ -13,7 +13,7 @@
 from Products.ZCTextIndex.PipelineFactory import element_factory
 
 from Products.CMFPlone.UnicodeSplitter.config import rx_U, rxGlob_U, \
-            rx_L, rxGlob_L, rx_all, pattern, pattern_g
+    rx_L, rxGlob_L, rx_all, pattern, pattern_g
 from plone.i18n.normalizer.base import baseNormalize
 
 
@@ -150,7 +150,7 @@ def process_post_glob(self, lst):
 
 try:
     element_factory.registerFactory('Word Splitter',
-        'Unicode Whitespace splitter', Splitter)
+                                    'Unicode Whitespace splitter', Splitter)
 except ValueError:
     # In case the splitter is already registered, ValueError is raised
     pass
@@ -176,7 +176,7 @@ def process(self, lst):
 
 try:
     element_factory.registerFactory('Case Normalizer',
-        'Unicode Case Normalizer', CaseNormalizer)
+                                    'Unicode Case Normalizer', CaseNormalizer)
 except ValueError:
     # In case the normalizer is already registered, ValueError is raised
     pass
@@ -206,7 +206,7 @@ def process(self, lst):
 
 try:
     element_factory.registerFactory('Case Normalizer',
-        'Unicode Ignoring Accents Case Normalizer', I18NNormalizer)
+                                    'Unicode Ignoring Accents Case Normalizer', I18NNormalizer)
 except ValueError:
     # In case the normalizer is already registered, ValueError is raised
     pass
diff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py
index 7bba5f1..5527f96 100644
--- a/Products/CMFPlone/WorkflowTool.py
+++ b/Products/CMFPlone/WorkflowTool.py
@@ -77,6 +77,7 @@ def flattenTransitionsForPaths(self, paths):
         return tuple(transitions[:])
 
     security.declarePublic('getTransitionsFor')
+
     def getTransitionsFor(self, obj=None, container=None, REQUEST=None):
         if type(obj) is type([]):
             return self.flattenTransitions(objs=obj, container=container)
@@ -95,15 +96,15 @@ def getTransitionsFor(self, obj=None, container=None, REQUEST=None):
                            wf._checkTransitionGuard(tdef, obj) and \
                            not tdef.id in result:
                             result[tdef.id] = {
-                                    'id': tdef.id,
-                                    'title': tdef.title,
-                                    'title_or_id': tdef.title_or_id(),
-                                    'description': tdef.description,
-                                    'name': tdef.actbox_name,
-                                    'url': tdef.actbox_url %
-                                           {'content_url': obj.absolute_url(),
-                                            'portal_url': '',
-                                            'folder_url': ''}}
+                                'id': tdef.id,
+                                'title': tdef.title,
+                                'title_or_id': tdef.title_or_id(),
+                                'description': tdef.description,
+                                'name': tdef.actbox_name,
+                                'url': tdef.actbox_url %
+                                {'content_url': obj.absolute_url(),
+                                 'portal_url': '',
+                                 'folder_url': ''}}
         return tuple(result.values())
 
     def workflows_in_use(self):
@@ -121,6 +122,7 @@ def workflows_in_use(self):
         return tuple(in_use[:])
 
     security.declarePublic('getWorklists')
+
     def getWorklists(self):
         """ instead of manually scraping actions_box, lets:
             query for all worklists in all workflow definitions.
@@ -185,6 +187,7 @@ def getWorklists(self):
         return wf_with_wlists
 
     security.declarePublic('getWorklistsResults')
+
     def getWorklistsResults(self):
         """Return all the objects concerned by one or more worklists
 
@@ -244,6 +247,7 @@ def getWorklistsResults(self):
         return tuple([obj[1] for obj in results])
 
     security.declareProtected(ManagePortal, 'getChainForPortalType')
+
     def getChainForPortalType(self, pt_name, managescreen=0):
         """ Get a chain for a specific portal type.
         """
@@ -258,12 +262,14 @@ def getChainForPortalType(self, pt_name, managescreen=0):
                 return self._default_chain
 
     security.declareProtected(ManagePortal, 'listWorkflows')
+
     def listWorkflows(self):
         """ Return the list of workflows
         """
         return self.keys()
 
     security.declarePublic('getTitleForStateOnType')
+
     def getTitleForStateOnType(self, state_name, p_type):
         """Returns the workflow state title for a given state name,
            uses a portal_type to determine which workflow to use
@@ -277,10 +283,11 @@ def getTitleForStateOnType(self, state_name, p_type):
                     state = getattr(states, state_name, None)
                     if state is not None:
                         return getattr(aq_base(state), 'title', None) \
-                                or state_name
+                            or state_name
         return state_name
 
     security.declarePublic('getTitleForTransitionOnType')
+
     def getTitleForTransitionOnType(self, trans_name, p_type):
         """Returns the workflow transition title for a given transition name,
            uses a portal_type to determine which workflow to use
@@ -294,10 +301,11 @@ def getTitleForTransitionOnType(self, trans_name, p_type):
                     trans = getattr(transitions, trans_name, None)
                     if trans is not None:
                         return getattr(aq_base(trans), 'actbox_name', None) \
-                                or trans_name
+                            or trans_name
         return trans_name
 
     security.declarePublic('listWFStatesByTitle')
+
     def listWFStatesByTitle(self, filter_similar=False):
         """Returns the states of all available workflows, optionally filtering
            out states with matching title and id"""
@@ -326,8 +334,8 @@ def getChainFor(self, ob):
         return getMultiAdapter((ob, self), IWorkflowChain)
 
     security.declarePrivate('listActions')
-    def listActions(self, info=None, object=None):
 
+    def listActions(self, info=None, object=None):
         """ Returns a list of actions to be displayed to the user.
 
         o Invoked by the portal_actions tool.
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 84eaa17..a005d06 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -353,7 +353,8 @@ def resource_to_dir(resource, file_type='.js'):
                 js_object = portal.unrestrictedTraverse(res_obj.js, None)
                 if js_object:
                     main_js_path = resource_to_dir(js_object)
-                    target_path = resource_to_dir(portal.unrestrictedTraverse(res_obj.js))
+                    target_path = resource_to_dir(
+                        portal.unrestrictedTraverse(res_obj.js))
                     target_path = '/'.join(target_path.split('/')[:-1])
                     watch_files.append(main_js_path)
                     rjs_paths = paths.copy()
@@ -368,7 +369,8 @@ def resource_to_dir(resource, file_type='.js'):
                         out=target_path + '/' + resource + '-compiled.js'
                     )
                     require_configs += rc
-                    js_files.append(target_path + '/' + resource + '-compiled.js')
+                    js_files.append(target_path + '/' +
+                                    resource + '-compiled.js')
                     js_resources.append(resource)
 
             if res_obj.css:
@@ -440,7 +442,8 @@ def resource_to_dir(resource, file_type='.js'):
 
         requirejs_tasks = ''
         if js_resources:
-            requirejs_tasks = ','.join(['"requirejs:' + r + '"' for r in js_resources]) + ','
+            requirejs_tasks = ','.join(
+                ['"requirejs:' + r + '"' for r in js_resources]) + ','
         bundle_grunt_tasks += (
             "\ngrunt.registerTask('compile-%s',"
             "[%s 'less:%s', %s, 'uglify:%s']);"
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 09c2af5..75aa438 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -205,7 +205,8 @@ def grouped_languages(self, default='en'):
         # Sort list by language, next by country
         data = sorted(grouped.values(), key=lambda k: k['label'])
         for item in data:
-            item['languages'] = sorted(item['languages'], key=lambda k: k['langcode'])
+            item['languages'] = sorted(
+                item['languages'], key=lambda k: k['langcode'])
         return data
 
     def timezones(self):
diff --git a/Products/CMFPlone/browser/atd.py b/Products/CMFPlone/browser/atd.py
index ac3ca8e..804e5c4 100644
--- a/Products/CMFPlone/browser/atd.py
+++ b/Products/CMFPlone/browser/atd.py
@@ -17,7 +17,8 @@ def checkDocument(self):
             See http://www.afterthedeadline.com/api.slp for more info.
         """
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(ITinyMCESchema, prefix="plone", check=False)
+        settings = registry.forInterface(
+            ITinyMCESchema, prefix="plone", check=False)
         if settings.libraries_spellchecker_choice != 'AtD':
             return 'atd not enabled'
 
@@ -43,4 +44,4 @@ def checkDocument(self):
         service.close()
         xml = respxml.strip().replace("\r", '').replace("\n", '').replace(
             '>  ', '>')
-        return xml
\ No newline at end of file
+        return xml
diff --git a/Products/CMFPlone/browser/interfaces.py b/Products/CMFPlone/browser/interfaces.py
index 6a0cde8..6f87832 100644
--- a/Products/CMFPlone/browser/interfaces.py
+++ b/Products/CMFPlone/browser/interfaces.py
@@ -14,7 +14,7 @@
     "It has been moved to plone.app.layout.navigation.interfaces. "
     "This alias will be removed in Plone 5.0",
     INavigationRoot='plone.app.layout.navigation.interfaces:INavigationRoot',
-    )
+)
 
 
 class INavigationBreadcrumbs(Interface):
@@ -380,6 +380,7 @@ class IContactForm(Interface):
         required=False
     )
 
+
 class IAuthorFeedbackForm(Interface):
     """ Interface describing the author feedback form """
 
@@ -395,4 +396,3 @@ class IAuthorFeedbackForm(Interface):
 
     author = schema.TextLine()
     referer = schema.TextLine(required=False)
-
diff --git a/Products/CMFPlone/browser/sitemap.py b/Products/CMFPlone/browser/sitemap.py
index c11707b..1fd204f 100644
--- a/Products/CMFPlone/browser/sitemap.py
+++ b/Products/CMFPlone/browser/sitemap.py
@@ -29,7 +29,7 @@ def _renderLevel(self, children=[], level=2):
             if len(children):
                 output += \
                     '<ul class="navTree navTreeLevel%d">\n%s\n</ul>\n' % (
-                        level, self._renderLevel(children, level+1))
+                        level, self._renderLevel(children, level + 1))
             output += '</li>\n'
 
         return output
diff --git a/Products/CMFPlone/browser/syndication/adapters.py b/Products/CMFPlone/browser/syndication/adapters.py
index 6c5b625..e3ba42c 100644
--- a/Products/CMFPlone/browser/syndication/adapters.py
+++ b/Products/CMFPlone/browser/syndication/adapters.py
@@ -134,7 +134,7 @@ def _brains(self):
         return catalog(path={
             'query': '/'.join(self.context.getPhysicalPath()),
             'depth': 1
-            })
+        })
 
     def _items(self):
         """
@@ -163,6 +163,7 @@ def language(self):
 
 
 class CollectionFeed(FolderFeed):
+
     def _brains(self):
         return self.context.queryCatalog(batch=False)[:self.limit]
 
diff --git a/Products/CMFPlone/browser/syndication/views.py b/Products/CMFPlone/browser/syndication/views.py
index c74f4bc..311e116 100644
--- a/Products/CMFPlone/browser/syndication/views.py
+++ b/Products/CMFPlone/browser/syndication/views.py
@@ -40,6 +40,7 @@ def __call__(self):
 
 
 class SearchFeedView(FeedView):
+
     def feed(self):
         f = queryAdapter(self.context, ISearchFeed)
         if f is None:
diff --git a/Products/CMFPlone/controlpanel/bbb/language.py b/Products/CMFPlone/controlpanel/bbb/language.py
index 9c50df1..a84eff9 100644
--- a/Products/CMFPlone/controlpanel/bbb/language.py
+++ b/Products/CMFPlone/controlpanel/bbb/language.py
@@ -35,7 +35,7 @@ def set_available_languages(self, value):
         self.settings.available_languages = value
 
     available_languages = property(get_available_languages,
-                                set_available_languages)
+                                   set_available_languages)
 
     def get_use_combined_language_codes(self):
         return self.settings.use_combined_language_codes
@@ -53,7 +53,7 @@ def set_display_flags(self, value):
         self.settings.display_flags = value
 
     display_flags = property(get_display_flags,
-                                           set_display_flags)
+                             set_display_flags)
 
     def get_always_show_selector(self):
         return self.settings.always_show_selector
@@ -62,7 +62,7 @@ def set_always_show_selector(self, value):
         self.settings.always_show_selector = value
 
     always_show_selector = property(get_always_show_selector,
-                                           set_always_show_selector)
+                                    set_always_show_selector)
 
     def get_use_content_negotiation(self):
         return self.settings.use_content_negotiation
@@ -71,7 +71,7 @@ def set_use_content_negotiation(self, value):
         self.settings.use_content_negotiation = value
 
     use_content_negotiation = property(get_use_content_negotiation,
-                                           set_use_content_negotiation)
+                                       set_use_content_negotiation)
 
     def get_use_path_negotiation(self):
         return self.settings.use_path_negotiation
@@ -80,7 +80,7 @@ def set_use_path_negotiation(self, value):
         self.settings.use_path_negotiation = value
 
     use_path_negotiation = property(get_use_path_negotiation,
-                                       set_use_path_negotiation)
+                                    set_use_path_negotiation)
 
     def get_use_cookie_negotiation(self):
         return self.settings.use_cookie_negotiation
@@ -89,7 +89,7 @@ def set_use_cookie_negotiation(self, value):
         self.settings.use_cookie_negotiation = value
 
     use_cookie_negotiation = property(get_use_cookie_negotiation,
-                                       set_use_cookie_negotiation)
+                                      set_use_cookie_negotiation)
 
     def get_authenticated_users_only(self):
         return self.settings.authenticated_users_only
@@ -98,7 +98,7 @@ def set_authenticated_users_only(self, value):
         self.settings.authenticated_users_only = value
 
     authenticated_users_only = property(get_authenticated_users_only,
-                                       set_authenticated_users_only)
+                                        set_authenticated_users_only)
 
     def get_set_cookie_always(self):
         return self.settings.set_cookie_always
@@ -107,7 +107,7 @@ def set_set_cookie_always(self, value):
         self.settings.set_cookie_always = value
 
     set_cookie_always = property(get_set_cookie_always,
-                                       set_set_cookie_always)
+                                 set_set_cookie_always)
 
     def get_use_subdomain_negotiation(self):
         return self.settings.use_subdomain_negotiation
@@ -116,7 +116,7 @@ def set_use_subdomain_negotiation(self, value):
         self.settings.use_subdomain_negotiation = value
 
     use_subdomain_negotiation = property(get_use_subdomain_negotiation,
-                                       set_use_subdomain_negotiation)
+                                         set_use_subdomain_negotiation)
 
     def get_use_cctld_negotiation(self):
         return self.settings.use_cctld_negotiation
@@ -125,7 +125,7 @@ def set_use_cctld_negotiation(self, value):
         self.settings.use_cctld_negotiation = value
 
     use_cctld_negotiation = property(get_use_cctld_negotiation,
-                                       set_use_cctld_negotiation)
+                                     set_use_cctld_negotiation)
 
     def get_use_request_negotiation(self):
         return self.settings.use_request_negotiation
diff --git a/Products/CMFPlone/controlpanel/browser/language.py b/Products/CMFPlone/controlpanel/browser/language.py
index 558389c..f0ede21 100644
--- a/Products/CMFPlone/controlpanel/browser/language.py
+++ b/Products/CMFPlone/controlpanel/browser/language.py
@@ -55,7 +55,7 @@ class LanguageControlPanel(controlpanel.ControlPanelFormWrapper):
     form = LanguageControlPanelForm
 
 
-#class LanguageControlPanel(ControlPanelForm):
+# class LanguageControlPanel(ControlPanelForm):
 #    form_fields = FormFields(ILanguageSchema)
 #    form_fields['default_language'].custom_widget = \
 #       LanguageDropdownChoiceWidget
diff --git a/Products/CMFPlone/controlpanel/browser/quickinstaller.py b/Products/CMFPlone/controlpanel/browser/quickinstaller.py
index a5ce2f8..89ef4e9 100644
--- a/Products/CMFPlone/controlpanel/browser/quickinstaller.py
+++ b/Products/CMFPlone/controlpanel/browser/quickinstaller.py
@@ -189,6 +189,7 @@ class UpgradeProductsView(BrowserView):
     """
     Upgrade a product... or twenty
     """
+
     def __call__(self):
         qi = ManageProductsView(self.context, self.request)
         products = self.request.get('prefs_reinstallProducts', None)
@@ -218,6 +219,7 @@ def __call__(self):
 
 
 class UninstallProductsView(BrowserView):
+
     def __call__(self):
         qi = getToolByName(self.context, 'portal_quickinstaller')
         products = self.request.get('uninstall_products')
@@ -228,11 +230,13 @@ def __call__(self):
             for product in products:
                 try:
                     qi.uninstallProducts(products=[product, ])
-                    msg = _(u'Uninstalled ${product}.', mapping={'product': product})
+                    msg = _(u'Uninstalled ${product}.',
+                            mapping={'product': product})
                 except Exception, e:
                     logging.error("Could not uninstall %s: %s" % (product, e))
                     msg_type = 'error'
-                    msg = _(u'Error uninstalling ${product}.', mapping={'product': product})
+                    msg = _(u'Error uninstalling ${product}.', mapping={
+                            'product': product})
                 messages.addStatusMessage(msg, type=msg_type)
 
         purl = getToolByName(self.context, 'portal_url')()
diff --git a/Products/CMFPlone/controlpanel/browser/resourceregistry.py b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
index 054205d..e59fbf5 100644
--- a/Products/CMFPlone/controlpanel/browser/resourceregistry.py
+++ b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
@@ -26,6 +26,7 @@
 
 
 class JSONEncoder(json.JSONEncoder):
+
     def default(self, obj):
         if hasattr(obj, 'isoformat'):
             return obj.isoformat()
@@ -125,7 +126,8 @@ def make_links_relative(self, filepath, data):
             css_url = css_url.lstrip('url(').rstrip(')').\
                 strip('"').strip("'")
             if css_url.startswith(site_url):
-                data = data.replace(css_url, self._rewrite_url(full_resource_url, css_url))
+                data = data.replace(css_url, self._rewrite_url(
+                    full_resource_url, css_url))
 
         return data
 
@@ -191,7 +193,8 @@ def registry(self):
         return getUtility(IRegistry)
 
     def update_registry_collection(self, itype, prefix, newdata):
-        rdata = self.registry.collectionOfInterface(itype, prefix=prefix, check=False)
+        rdata = self.registry.collectionOfInterface(
+            itype, prefix=prefix, check=False)
         for key, data in newdata.items():
             if key not in rdata:
                 record = rdata.add(key)
@@ -220,7 +223,8 @@ def save_registry(self):
         # it'd be difficult to know if the legacy bundle settings
         # changed or not so we need to just set the last import date
         # back so it gets re-built
-        self.registry.records['plone.resources.last_legacy_import'].value = datetime.now()
+        self.registry.records[
+            'plone.resources.last_legacy_import'].value = datetime.now()
         cookWhenChangingSettings(self.context)
 
         return json.dumps({
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups.py b/Products/CMFPlone/controlpanel/browser/usergroups.py
index fbc1bfa..800819a 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups.py
@@ -80,17 +80,24 @@ def membershipSearch(self, searchString='', searchUsers=True, searchGroups=True,
         gtool = getToolByName(self, 'portal_groups')
         mtool = getToolByName(self, 'portal_membership')
 
-        searchView = getMultiAdapter((aq_inner(self.context), self.request), name='pas_search')
+        searchView = getMultiAdapter(
+            (aq_inner(self.context), self.request), name='pas_search')
 
         if searchGroups:
-            groupResults = searchView.merge(chain(*[searchView.searchGroups(**{field: searchString}) for field in ['id', 'title']]), 'groupid')
-            groupResults = [gtool.getGroupById(g['id']) for g in groupResults if g['id'] not in ignore]
-            groupResults.sort(key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName()))
+            groupResults = searchView.merge(chain(
+                *[searchView.searchGroups(**{field: searchString}) for field in ['id', 'title']]), 'groupid')
+            groupResults = [gtool.getGroupById(g['id']) for g in groupResults if g[
+                'id'] not in ignore]
+            groupResults.sort(key=lambda x: x is not None and normalizeString(
+                x.getGroupTitleOrName()))
 
         if searchUsers:
-            userResults = searchView.merge(chain(*[searchView.searchUsers(**{field: searchString}) for field in ['login', 'fullname', 'email']]), 'userid')
-            userResults = [mtool.getMemberById(u['id']) for u in userResults if u['id'] not in ignore]
-            userResults.sort(key=lambda x: x is not None and x.getProperty('fullname') is not None and normalizeString(x.getProperty('fullname')) or '')
+            userResults = searchView.merge(chain(*[searchView.searchUsers(
+                **{field: searchString}) for field in ['login', 'fullname', 'email']]), 'userid')
+            userResults = [mtool.getMemberById(u['id']) for u in userResults if u[
+                'id'] not in ignore]
+            userResults.sort(key=lambda x: x is not None and x.getProperty(
+                'fullname') is not None and normalizeString(x.getProperty('fullname')) or '')
 
         return groupResults + userResults
 
@@ -117,7 +124,8 @@ def is_zope_manager(self):
     # True              True            True                    Show matching
 
     # TODO: Maybe have these methods return a text message (instead of a bool)
-    # corresponding to the actual result, e.g. "Too many to list", "Lists unavailable"
+    # corresponding to the actual result, e.g. "Too many to list", "Lists
+    # unavailable"
 
     @property
     def show_group_listing_warning(self):
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
index 08a0a10..ade6c25 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
@@ -22,7 +22,8 @@ def __call__(self):
         if self.group is not None:
             self.grouptitle = self.group.getGroupTitleOrName()
 
-        self.request.set('grouproles', self.group.getRoles() if self.group else [])
+        self.request.set('grouproles', self.group.getRoles()
+                         if self.group else [])
 
         submitted = self.request.form.get('form.submitted', False)
         if submitted:
@@ -46,13 +47,13 @@ def __call__(self):
                                               REQUEST=self.request)
                 if not success:
                     msg = _(u'Could not add group ${name}, perhaps a user or group with '
-                            u'this name already exists.', mapping={u'name' : addname})
+                            u'this name already exists.', mapping={u'name': addname})
                     IStatusMessage(self.request).add(msg, 'error')
                     return self.index()
 
                 self.group = self.gtool.getGroupById(addname)
                 msg = _(u'Group ${name} has been added.',
-                        mapping={u'name' : addname})
+                        mapping={u'name': addname})
 
             elif self.groupname:
                 self.gtool.editGroup(self.groupname, roles=None, groups=None,
@@ -69,12 +70,15 @@ def __call__(self):
                 processed[id] = self.request.get(id, None)
 
             if self.group:
-                # for what reason ever, the very first group created does not exist
+                # for what reason ever, the very first group created does not
+                # exist
                 self.group.setGroupProperties(processed)
 
-            IStatusMessage(self.request).add(msg, type=self.group and 'info' or 'error')
+            IStatusMessage(self.request).add(
+                msg, type=self.group and 'info' or 'error')
             if self.group and not self.groupname:
-                target_url = '%s/%s' % (self.context.absolute_url(), '@@usergroup-groupprefs')
+                target_url = '%s/%s' % (self.context.absolute_url(),
+                                        '@@usergroup-groupprefs')
                 self.request.response.redirect(target_url)
                 return ''
 
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py
index cf4300d..74dbee5 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py
@@ -18,7 +18,8 @@ def update(self):
 
         self.grouptitle = self.group.getGroupTitleOrName() or self.groupname
 
-        self.request.set('grouproles', self.group.getRoles() if self.group else [])
+        self.request.set('grouproles', self.group.getRoles()
+                         if self.group else [])
         self.canAddUsers = True
         if 'Manager' in self.request.get('grouproles') and not self.is_zope_manager:
             self.canAddUsers = False
@@ -41,13 +42,15 @@ def update(self):
                     raise Forbidden
 
                 for u in toAdd:
-                    self.gtool.addPrincipalToGroup(u, self.groupname, self.request)
+                    self.gtool.addPrincipalToGroup(
+                        u, self.groupname, self.request)
                 self.context.plone_utils.addPortalMessage(_(u'Changes made.'))
 
             toDelete = form.get('delete', [])
             if toDelete:
                 for u in toDelete:
-                    self.gtool.removePrincipalFromGroup(u, self.groupname, self.request)
+                    self.gtool.removePrincipalFromGroup(
+                        u, self.groupname, self.request)
                 self.context.plone_utils.addPortalMessage(_(u'Changes made.'))
 
             search = form.get('form.button.Search', None) is not None
@@ -61,7 +64,8 @@ def update(self):
                 form['searchstring'] = ''
             self.searchString = form.get('searchstring', '')
             if findAll or bool(self.searchString):
-                self.searchResults = self.getPotentialMembers(self.searchString)
+                self.searchResults = self.getPotentialMembers(
+                    self.searchString)
 
             if search or findAll:
                 self.newSearch = True
@@ -79,14 +83,17 @@ def getMembers(self):
         searchResults = self.gtool.getGroupMembers(self.groupname)
 
         groupResults = [self.gtool.getGroupById(m) for m in searchResults]
-        groupResults.sort(key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName()))
+        groupResults.sort(key=lambda x: x is not None and normalizeString(
+            x.getGroupTitleOrName()))
 
         userResults = [self.mtool.getMemberById(m) for m in searchResults]
-        userResults.sort(key=lambda x: x is not None and x.getProperty('fullname') is not None and normalizeString(x.getProperty('fullname')) or '')
+        userResults.sort(key=lambda x: x is not None and x.getProperty(
+            'fullname') is not None and normalizeString(x.getProperty('fullname')) or '')
 
         mergedResults = groupResults + userResults
         return filter(None, mergedResults)
 
     def getPotentialMembers(self, searchString):
-        ignoredUsersGroups = [x.id for x in self.getMembers() + [self.group,] if x is not None]
+        ignoredUsersGroups = [
+            x.id for x in self.getMembers() + [self.group, ] if x is not None]
         return self.membershipSearch(searchString, ignore=ignoredUsersGroups)
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.py b/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.py
index 6deaedf..4a6761f 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.py
@@ -40,19 +40,22 @@ def doSearch(self, searchString):
         acl = getToolByName(self, 'acl_users')
         rolemakers = acl.plugins.listPlugins(IRolesPlugin)
 
-        searchView = getMultiAdapter((aq_inner(self.context), self.request), name='pas_search')
+        searchView = getMultiAdapter(
+            (aq_inner(self.context), self.request), name='pas_search')
 
         # First, search for inherited roles assigned to each group.
         # We push this in the request so that IRoles plugins are told provide
         # the roles inherited from the groups to which the principal belongs.
         self.request.set('__ignore_group_roles__', False)
         self.request.set('__ignore_direct_roles__', True)
-        inheritance_enabled_groups = searchView.merge(chain(*[searchView.searchGroups(**{field: searchString}) for field in ['id', 'title']]), 'id')
+        inheritance_enabled_groups = searchView.merge(chain(
+            *[searchView.searchGroups(**{field: searchString}) for field in ['id', 'title']]), 'id')
         allInheritedRoles = {}
         for group_info in inheritance_enabled_groups:
             groupId = group_info['id']
             group = acl.getGroupById(groupId)
-            group_info['title'] = group.getProperty('title', group_info['title'])
+            group_info['title'] = group.getProperty(
+                'title', group_info['title'])
             allAssignedRoles = []
             for rolemaker_id, rolemaker in rolemakers:
                 # getRolesForPrincipal can return None
@@ -65,15 +68,18 @@ def doSearch(self, searchString):
         # the roles inherited from the groups to which the principal belongs.
         self.request.set('__ignore_group_roles__', True)
         self.request.set('__ignore_direct_roles__', False)
-        explicit_groups = searchView.merge(chain(*[searchView.searchGroups(**{field: searchString}) for field in ['id', 'title']]), 'id')
+        explicit_groups = searchView.merge(chain(
+            *[searchView.searchGroups(**{field: searchString}) for field in ['id', 'title']]), 'id')
 
         # Tack on some extra data, including whether each role is explicitly
-        # assigned ('explicit'), inherited ('inherited'), or not assigned at all (None).
+        # assigned ('explicit'), inherited ('inherited'), or not assigned at
+        # all (None).
         results = []
         for group_info in explicit_groups:
             groupId = group_info['id']
             group = acl.getGroupById(groupId)
-            group_info['title'] = group.getProperty('title', group_info['title'])
+            group_info['title'] = group.getProperty(
+                'title', group_info['title'])
 
             explicitlyAssignedRoles = []
             for rolemaker_id, rolemaker in rolemakers:
@@ -86,13 +92,13 @@ def doSearch(self, searchString):
                 canAssign = group.canAssignRole(role)
                 if role == 'Manager' and not self.is_zope_manager:
                     canAssign = False
-                roleList[role]={'canAssign': canAssign,
-                                'explicit': role in explicitlyAssignedRoles,
-                                'inherited': role in allInheritedRoles.get(groupId, [])}
+                roleList[role] = {'canAssign': canAssign,
+                                  'explicit': role in explicitlyAssignedRoles,
+                                  'inherited': role in allInheritedRoles.get(groupId, [])}
 
             canDelete = group.canDelete()
             if ('Manager' in explicitlyAssignedRoles or
-                'Manager' in allInheritedRoles.get(groupId, [])):
+                    'Manager' in allInheritedRoles.get(groupId, [])):
                 if not self.is_zope_manager:
                     canDelete = False
 
@@ -114,14 +120,14 @@ def manageGroup(self, groups=None, delete=None):
         CheckAuthenticator(self.request)
         context = aq_inner(self.context)
 
-        groupstool=context.portal_groups
+        groupstool = context.portal_groups
         utils = getToolByName(context, 'plone_utils')
         groupstool = getToolByName(context, 'portal_groups')
 
         message = _(u'No changes made.')
 
         for group in groups:
-            roles=[r for r in self.request.form['group_' + group] if r]
+            roles = [r for r in self.request.form['group_' + group] if r]
             group_obj = groupstool.getGroupById(group)
             current_roles = group_obj.getRoles()
             if not self.is_zope_manager:
@@ -139,6 +145,6 @@ def manageGroup(self, groups=None, delete=None):
                     raise Forbidden
 
             groupstool.removeGroups(delete)
-            message=_(u'Group(s) deleted.')
+            message = _(u'Group(s) deleted.')
 
         utils.addPortalMessage(message)
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py
index ddf5720..16d18fb 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py
@@ -24,7 +24,8 @@ def update(self):
             delete = form.get('delete', [])
             if delete:
                 for groupname in delete:
-                    self.gtool.removePrincipalFromGroup(self.userid, groupname, self.request)
+                    self.gtool.removePrincipalFromGroup(
+                        self.userid, groupname, self.request)
                 self.context.plone_utils.addPortalMessage(_(u'Changes made.'))
 
             add = form.get('add', [])
@@ -34,11 +35,13 @@ def update(self):
                     if 'Manager' in group.getRoles() and not self.is_zope_manager:
                         raise Forbidden
 
-                    self.gtool.addPrincipalToGroup(self.userid, groupname, self.request)
+                    self.gtool.addPrincipalToGroup(
+                        self.userid, groupname, self.request)
                 self.context.plone_utils.addPortalMessage(_(u'Changes made.'))
 
         search = form.get('form.button.Search', None) is not None
-        findAll = form.get('form.button.FindAll', None) is not None and not self.many_groups
+        findAll = form.get('form.button.FindAll',
+                           None) is not None and not self.many_groups
         self.searchString = not findAll and form.get('searchstring', '') or ''
 
         if findAll or not self.many_groups or self.searchString != '':
@@ -54,8 +57,10 @@ def __call__(self):
         return self.index()
 
     def getGroups(self):
-        groupResults = [self.gtool.getGroupById(m) for m in self.gtool.getGroupsForPrincipal(self.member)]
-        groupResults.sort(key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName()))
+        groupResults = [self.gtool.getGroupById(
+            m) for m in self.gtool.getGroupsForPrincipal(self.member)]
+        groupResults.sort(key=lambda x: x is not None and normalizeString(
+            x.getGroupTitleOrName()))
         return filter(None, groupResults)
 
     def getPotentialGroups(self, searchString):
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py
index 20fd97e..bd3f4c4 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py
@@ -69,7 +69,8 @@ def doSearch(self, searchString):
             user = acl.getUserById(userId)
             # play safe, though this should never happen
             if user is None:
-                logger.warn('Skipped user without principal object: %s' % userId)
+                logger.warn(
+                    'Skipped user without principal object: %s' % userId)
                 continue
             allAssignedRoles = []
             for rolemaker_id, rolemaker in rolemakers:
@@ -81,7 +82,8 @@ def doSearch(self, searchString):
         self.request.set('__ignore_group_roles__', True)
         self.request.set('__ignore_direct_roles__', False)
         explicit_users = searchView.merge(
-            chain(*[searchView.searchUsers(**{field: searchString}) for field in ['login', 'fullname', 'email']]), 'userid'
+            chain(*[searchView.searchUsers(**{field: searchString})
+                    for field in ['login', 'fullname', 'email']]), 'userid'
         )
 
         # Tack on some extra data, including whether each role is explicitly
@@ -93,20 +95,22 @@ def doSearch(self, searchString):
             user = mtool.getMemberById(userId)
             # play safe, though this should never happen
             if user is None:
-                logger.warn('Skipped user without principal object: %s' % userId)
+                logger.warn(
+                    'Skipped user without principal object: %s' % userId)
                 continue
             explicitlyAssignedRoles = []
             for rolemaker_id, rolemaker in rolemakers:
-                explicitlyAssignedRoles.extend(rolemaker.getRolesForPrincipal(user))
+                explicitlyAssignedRoles.extend(
+                    rolemaker.getRolesForPrincipal(user))
 
             roleList = {}
             for role in self.portal_roles:
                 canAssign = user.canAssignRole(role)
                 if role == 'Manager' and not self.is_zope_manager:
                     canAssign = False
-                roleList[role]={'canAssign': canAssign,
-                                'explicit': role in explicitlyAssignedRoles,
-                                'inherited': role in allInheritedRoles[userId]}
+                roleList[role] = {'canAssign': canAssign,
+                                  'explicit': role in explicitlyAssignedRoles,
+                                  'inherited': role in allInheritedRoles[userId]}
 
             canDelete = user.canDelete()
             canPasswordSet = user.canPasswordSet()
@@ -124,7 +128,8 @@ def doSearch(self, searchString):
             results.append(user_info)
 
         # Sort the users by fullname
-        results.sort(key=lambda x: x is not None and x['fullname'] is not None and normalizeString(x['fullname']) or '')
+        results.sort(key=lambda x: x is not None and x[
+                     'fullname'] is not None and normalizeString(x['fullname']) or '')
 
         # Reset the request variable, just in case.
         self.request.set('__ignore_group_roles__', False)
@@ -155,7 +160,8 @@ def manageUser(self, users=[], resetpassword=[], delete=[]):
                     # If the email field was disabled (ie: non-writeable), the
                     # property might not exist.
                     if user.email != member.getProperty('email'):
-                        utils.setMemberProperties(member, REQUEST=context.REQUEST, email=user.email)
+                        utils.setMemberProperties(
+                            member, REQUEST=context.REQUEST, email=user.email)
                         utils.addPortalMessage(_(u'Changes applied.'))
 
                 # If reset password has been checked email user a new password
@@ -166,7 +172,8 @@ def manageUser(self, users=[], resetpassword=[], delete=[]):
                     if not context.unrestrictedTraverse('@@overview-controlpanel').mailhost_warning():
                         pw = regtool.generatePassword()
                     else:
-                        utils.addPortalMessage(_(u'No mailhost defined. Unable to reset passwords.'), type='error')
+                        utils.addPortalMessage(
+                            _(u'No mailhost defined. Unable to reset passwords.'), type='error')
 
                 roles = user.get('roles', [])
                 if not self.is_zope_manager:
@@ -174,7 +181,8 @@ def manageUser(self, users=[], resetpassword=[], delete=[]):
                     if ('Manager' in roles) != ('Manager' in current_roles):
                         raise Forbidden
 
-                acl_users.userFolderEditUser(user.id, pw, roles, member.getDomains(), REQUEST=context.REQUEST)
+                acl_users.userFolderEditUser(
+                    user.id, pw, roles, member.getDomains(), REQUEST=context.REQUEST)
                 if pw:
                     context.REQUEST.form['new_password'] = pw
                     regtool.mailPassword(user.id, context.REQUEST)
@@ -187,9 +195,9 @@ def manageUser(self, users=[], resetpassword=[], delete=[]):
                     u"reset_passwords_msg",
                     default=u"The following users have been sent an e-mail with link to reset their password: ${user_ids}",
                     mapping={
-                        u"user_ids" : ', '.join(users_with_reset_passwords),
-                        },
-                    )
+                        u"user_ids": ', '.join(users_with_reset_passwords),
+                    },
+                )
                 utils.addPortalMessage(reset_passwords_message)
             utils.addPortalMessage(_(u'Changes applied.'))
 
@@ -217,7 +225,7 @@ def deleteMembers(self, member_ids):
             acl_users.userFolderDelUsers(member_ids)
         except (AttributeError, NotImplementedError):
             raise NotImplementedError('The underlying User Folder '
-                                     'doesn\'t support deleting members.')
+                                      'doesn\'t support deleting members.')
 
         # Delete member data in portal_memberdata.
         mdtool = getToolByName(context, 'portal_memberdata', None)
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
index a96d998..949d001 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
@@ -64,7 +64,8 @@ def test_set_available_languages(self):
             self.settings.available_languages,
             ['en']
         )
-        getAdapter(self.portal, ILanguageSchema).available_languages = ['de', 'en']
+        getAdapter(self.portal, ILanguageSchema).available_languages = [
+            'de', 'en']
         self.assertEquals(
             self.settings.available_languages,
             ['de', 'en']
@@ -78,7 +79,8 @@ def test_get_use_combined_language_codes(self):
         )
         self.settings.use_combined_language_codes = False
         self.assertEquals(
-            getAdapter(self.portal, ILanguageSchema).use_combined_language_codes,
+            getAdapter(
+                self.portal, ILanguageSchema).use_combined_language_codes,
             False
         )
 
@@ -88,7 +90,7 @@ def test_set_use_combined_language_codes(self):
             True
         )
         getAdapter(
-              self.portal, ILanguageSchema).use_combined_language_codes = False
+            self.portal, ILanguageSchema).use_combined_language_codes = False
         self.assertEquals(
             self.settings.use_combined_language_codes,
             False
@@ -309,4 +311,3 @@ def test_set_use_request_negotiation(self):
             self.settings.use_request_negotiation,
             True
         )
-
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_usergroups_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_usergroups_adapter.py
index 1264f21..a8e0612 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_usergroups_adapter.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_usergroups_adapter.py
@@ -31,7 +31,8 @@ def test_adapter_lookup(self):
     def test_many_groups(self):
         getAdapter(self.portal, IUserGroupsSettingsSchema).set_many_groups(True)
         self.assertEqual(
-            getAdapter(self.portal, IUserGroupsSettingsSchema).get_many_groups(),
+            getAdapter(
+                self.portal, IUserGroupsSettingsSchema).get_many_groups(),
             True
         )
 
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
index 0001508..f8cb81e 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
@@ -328,5 +328,3 @@ def test_use_request_negotiation(self):
         self.browser.getControl('Save').click()
 
         self.assertEqual(settings.use_request_negotiation, True)
-
-
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py
index 2688433..0b5324f 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py
@@ -64,7 +64,7 @@ def test_mail_controlpanel_smtp_host(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         registry = getUtility(IRegistry)
@@ -80,7 +80,7 @@ def test_mail_controlpanel_smtp_port(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         registry = getUtility(IRegistry)
@@ -96,7 +96,7 @@ def test_mail_controlpanel_smtp_userid(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         registry = getUtility(IRegistry)
@@ -112,7 +112,7 @@ def test_mail_controlpanel_smtp_pass(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         registry = getUtility(IRegistry)
@@ -130,7 +130,7 @@ def test_mail_controlpanel_smtp_pass_keep_on_saving(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
         self.browser.getControl(name='form.buttons.save').click()
 
@@ -145,7 +145,7 @@ def test_mail_controlpanel_email_from_name(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         registry = getUtility(IRegistry)
@@ -159,7 +159,7 @@ def test_mail_controlpanel_email_from_address(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         registry = getUtility(IRegistry)
@@ -173,7 +173,7 @@ def test_mail_controlpanel_contactinfo_page(self):
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         self.browser.open(
@@ -191,7 +191,7 @@ def test_controlpanel_overview_shows_no_unconfigured_mailhost_warning(
             name='form.widgets.email_from_name').value = 'John'
         self.browser.getControl(
             name='form.widgets.email_from_address').value = \
-                'john@example.com'
+            'john@example.com'
         self.browser.getControl(name='form.buttons.save').click()
 
         self.browser.open(
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
index 6d7c102..cbf718b 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
@@ -73,6 +73,7 @@ def test_maintenance_pack_database(self):
         """
         self.browser.open(self.portal_url + '/@@maintenance-controlpanel')
         original_pack = ApplicationManager.manage_pack
+
         def manage_pack(self, days=0, REQUEST=None, _when=None):
             pass
         ApplicationManager.manage_pack = manage_pack
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py
index 94599b5..5de11ed 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py
@@ -30,61 +30,113 @@ def _generateGroups(self):
 
     def _generateUsers(self):
         self.members = [
-            {'username': 'DIispfuF', 'fullname': 'Kevin Hughes', 'email': 'DIispfuF@example.com'},
-            {'username': 'enTHXigm', 'fullname': 'Richard Ramirez', 'email': 'enTHXigm@example.com'},
-            {'username': 'q7UsYcrT', 'fullname': 'Kyle Brown', 'email': 'q7UsYcrT@example.com'},
-            {'username': 'j5g0xPmr', 'fullname': 'Julian Green', 'email': 'j5g0xPmr@example.com'},
-            {'username': 'o6Sx4It3', 'fullname': 'Makayla Coleman', 'email': 'o6Sx4It3@example.com'},
-            {'username': 'SLUhquYa', 'fullname': 'Sean Foster', 'email': 'SLUhquYa@example.com'},
-            {'username': 'nHWl3Ita', 'fullname': 'Molly Martin', 'email': 'nHWl3Ita@example.com'},
-            {'username': 'xdkpCKmX', 'fullname': 'Jordan Thompson', 'email': 'xdkpCKmX@example.com'},
-            {'username': 'p8H6CicB', 'fullname': 'Tyler Rivera', 'email': 'p8H6CicB@example.com'},
-            {'username': 'T6vdBXbD', 'fullname': 'Megan Murphy', 'email': 'T6vdBXbD@example.com'},
-            {'username': 'DohPmgIa', 'fullname': 'Gracie Diaz', 'email': 'DohPmgIa@example.com'},
-            {'username': 'CqHWi65B', 'fullname': 'Rachel Morgan', 'email': 'CqHWi65B@example.com'},
-            {'username': 'uHFQ7qk4', 'fullname': 'Maya Price', 'email': 'uHFQ7qk4@example.com'},
-            {'username': 'BlXLQh7r', 'fullname': 'Blake Jenkins', 'email': 'BlXLQh7r@example.com'},
-            {'username': 'FCrWUiSY', 'fullname': 'Owen Ramirez', 'email': 'FCrWUiSY@example.com'},
-            {'username': 'bX3PqgHK', 'fullname': 'Owen Cook', 'email': 'bX3PqgHK@example.com'},
-            {'username': 'sD35vVl0', 'fullname': 'Jayden Hill', 'email': 'sD35vVl0@example.com'},
-            {'username': 'mfOcjXAG', 'fullname': 'Joseph Ramirez', 'email': 'mfOcjXAG@example.com'},
-            {'username': 'GAJtdYbM', 'fullname': 'Nathan Young', 'email': 'GAJtdYbM@example.com'},
-            {'username': 'E1OWG6bv', 'fullname': 'Kaitlyn Hernandez', 'email': 'E1OWG6bv@example.com'},
-            {'username': 'BqOX2sCm', 'fullname': 'Faith Price', 'email': 'BqOX2sCm@example.com'},
-            {'username': 'tyOxRnml', 'fullname': 'Sofia Williams', 'email': '5yOxRjtl@example.com'},
-            {'username': 'fVcumDNl', 'fullname': 'David Sanders', 'email': 'fVcumDNl@example.com'},
-            {'username': 'Ge1hqdEI', 'fullname': 'Jack Simmons', 'email': 'Ge1hqdEI@example.com'},
-            {'username': 'o2CqT7kG', 'fullname': 'Cole Howard', 'email': 'o2CqT7kG@example.com'},
-            {'username': 'mpGtfNl6', 'fullname': 'Rachel Miller', 'email': 'mpGtfNl6@example.com'},
-            {'username': 'RGrpWiBg', 'fullname': 'Henry Patterson', 'email': 'RGrpWiBg@example.com'},
-            {'username': 'Bufmi0YS', 'fullname': 'Avery Cooper', 'email': 'Bufmi0YS@example.com'},
-            {'username': 'J7NvbjYd', 'fullname': 'Sydney Bennett', 'email': 'J7NvbjYd@example.com'},
-            {'username': 'u5Xem8U1', 'fullname': 'Daniel Johnson', 'email': 'u5Xem8U1@example.com'},
-            {'username': 'TWrMCLIo', 'fullname': 'Autumn Brooks', 'email': '0VrMCLIo@example.com'},
-            {'username': 'FElYwiIr', 'fullname': 'Alexandra Nelson', 'email': 'FElYwiIr@example.com'},
-            {'username': 'teK6pkhc', 'fullname': 'Brian Simmons', 'email': '0eK6pkhc@example.com'},
-            {'username': 'RwAO2YPa', 'fullname': 'Kevin Hughes', 'email': 'gracie@example.com'},
-            {'username': 'nlBMw26i', 'fullname': 'Sydney Evans', 'email': 'nlBMw26i@example.com'},
-            {'username': 'Ahr3EiRC', 'fullname': 'Emma Brown', 'email': 'Ahr3EiRC@example.com'},
-            {'username': 'NhuU0Y5x', 'fullname': 'Lauren Martin', 'email': 'NhuU0Y5x@example.com'},
-            {'username': 'j2R3mKQg', 'fullname': 'Isabelle Russell', 'email': 'j2R3mKQg@example.com'},
-            {'username': 'qOmK0iCN', 'fullname': 'Anna Baker', 'email': 'qOmK0iCN@example.com'},
-            {'username': 'uQbVOgo7', 'fullname': 'Brady Watson', 'email': 'uQbVOgo7@example.com'},
-            {'username': 'oLDCaQfW', 'fullname': 'Kaitlyn Robinson', 'email': 'oLDCaQfW@example.com'},
-            {'username': 'osYHeFD1', 'fullname': 'Riley Richardson', 'email': 'osYHeFD1@example.com'},
-            {'username': 'i4pHduDY', 'fullname': 'Kayla Sanders', 'email': 'i4pHduDY@example.com'},
-            {'username': 'BvyX6qF3', 'fullname': 'Sara Richardson', 'email': 'BvyX6qF3@example.com'},
-            {'username': 'a3EpwDYj', 'fullname': 'Trinity Gonzales', 'email': 'a3EpwDYj@example.com'},
-            {'username': 'JDMseWdt', 'fullname': 'Madeline Garcia', 'email': 'JDMseWdt@example.com'},
-            {'username': 'lPCYBvoi', 'fullname': 'Brian Gray', 'email': 'lPCYBvoi@example.com'},
-            {'username': 'AByCsRQ3', 'fullname': 'Victoria Perez', 'email': 'AByCsRQ3@example.com'},
-            {'username': 'CH7uVlNy', 'fullname': 'Charles Rodriguez', 'email': '5H7uVlNy@example.com'},
-            {'username': 'XYsmd7ux', 'fullname': 'Abigail Simmons', 'email': 'XYsmd7ux@example.com'},
-            {'username': 'DfaA1wqC3', 'fullname': 'Émilie Richard', 'email': 'DfaA1wqC3@example.com'},
+            {'username': 'DIispfuF', 'fullname': 'Kevin Hughes',
+                'email': 'DIispfuF@example.com'},
+            {'username': 'enTHXigm', 'fullname': 'Richard Ramirez',
+                'email': 'enTHXigm@example.com'},
+            {'username': 'q7UsYcrT', 'fullname': 'Kyle Brown',
+                'email': 'q7UsYcrT@example.com'},
+            {'username': 'j5g0xPmr', 'fullname': 'Julian Green',
+                'email': 'j5g0xPmr@example.com'},
+            {'username': 'o6Sx4It3', 'fullname': 'Makayla Coleman',
+                'email': 'o6Sx4It3@example.com'},
+            {'username': 'SLUhquYa', 'fullname': 'Sean Foster',
+                'email': 'SLUhquYa@example.com'},
+            {'username': 'nHWl3Ita', 'fullname': 'Molly Martin',
+                'email': 'nHWl3Ita@example.com'},
+            {'username': 'xdkpCKmX', 'fullname': 'Jordan Thompson',
+                'email': 'xdkpCKmX@example.com'},
+            {'username': 'p8H6CicB', 'fullname': 'Tyler Rivera',
+                'email': 'p8H6CicB@example.com'},
+            {'username': 'T6vdBXbD', 'fullname': 'Megan Murphy',
+                'email': 'T6vdBXbD@example.com'},
+            {'username': 'DohPmgIa', 'fullname': 'Gracie Diaz',
+                'email': 'DohPmgIa@example.com'},
+            {'username': 'CqHWi65B', 'fullname': 'Rachel Morgan',
+                'email': 'CqHWi65B@example.com'},
+            {'username': 'uHFQ7qk4', 'fullname': 'Maya Price',
+                'email': 'uHFQ7qk4@example.com'},
+            {'username': 'BlXLQh7r', 'fullname': 'Blake Jenkins',
+                'email': 'BlXLQh7r@example.com'},
+            {'username': 'FCrWUiSY', 'fullname': 'Owen Ramirez',
+                'email': 'FCrWUiSY@example.com'},
+            {'username': 'bX3PqgHK', 'fullname': 'Owen Cook',
+                'email': 'bX3PqgHK@example.com'},
+            {'username': 'sD35vVl0', 'fullname': 'Jayden Hill',
+                'email': 'sD35vVl0@example.com'},
+            {'username': 'mfOcjXAG', 'fullname': 'Joseph Ramirez',
+                'email': 'mfOcjXAG@example.com'},
+            {'username': 'GAJtdYbM', 'fullname': 'Nathan Young',
+                'email': 'GAJtdYbM@example.com'},
+            {'username': 'E1OWG6bv', 'fullname': 'Kaitlyn Hernandez',
+                'email': 'E1OWG6bv@example.com'},
+            {'username': 'BqOX2sCm', 'fullname': 'Faith Price',
+                'email': 'BqOX2sCm@example.com'},
+            {'username': 'tyOxRnml', 'fullname': 'Sofia Williams',
+                'email': '5yOxRjtl@example.com'},
+            {'username': 'fVcumDNl', 'fullname': 'David Sanders',
+                'email': 'fVcumDNl@example.com'},
+            {'username': 'Ge1hqdEI', 'fullname': 'Jack Simmons',
+                'email': 'Ge1hqdEI@example.com'},
+            {'username': 'o2CqT7kG', 'fullname': 'Cole Howard',
+                'email': 'o2CqT7kG@example.com'},
+            {'username': 'mpGtfNl6', 'fullname': 'Rachel Miller',
+                'email': 'mpGtfNl6@example.com'},
+            {'username': 'RGrpWiBg', 'fullname': 'Henry Patterson',
+                'email': 'RGrpWiBg@example.com'},
+            {'username': 'Bufmi0YS', 'fullname': 'Avery Cooper',
+                'email': 'Bufmi0YS@example.com'},
+            {'username': 'J7NvbjYd', 'fullname': 'Sydney Bennett',
+                'email': 'J7NvbjYd@example.com'},
+            {'username': 'u5Xem8U1', 'fullname': 'Daniel Johnson',
+                'email': 'u5Xem8U1@example.com'},
+            {'username': 'TWrMCLIo', 'fullname': 'Autumn Brooks',
+                'email': '0VrMCLIo@example.com'},
+            {'username': 'FElYwiIr', 'fullname': 'Alexandra Nelson',
+                'email': 'FElYwiIr@example.com'},
+            {'username': 'teK6pkhc', 'fullname': 'Brian Simmons',
+                'email': '0eK6pkhc@example.com'},
+            {'username': 'RwAO2YPa', 'fullname': 'Kevin Hughes',
+                'email': 'gracie@example.com'},
+            {'username': 'nlBMw26i', 'fullname': 'Sydney Evans',
+                'email': 'nlBMw26i@example.com'},
+            {'username': 'Ahr3EiRC', 'fullname': 'Emma Brown',
+                'email': 'Ahr3EiRC@example.com'},
+            {'username': 'NhuU0Y5x', 'fullname': 'Lauren Martin',
+                'email': 'NhuU0Y5x@example.com'},
+            {'username': 'j2R3mKQg', 'fullname': 'Isabelle Russell',
+                'email': 'j2R3mKQg@example.com'},
+            {'username': 'qOmK0iCN', 'fullname': 'Anna Baker',
+                'email': 'qOmK0iCN@example.com'},
+            {'username': 'uQbVOgo7', 'fullname': 'Brady Watson',
+                'email': 'uQbVOgo7@example.com'},
+            {'username': 'oLDCaQfW', 'fullname': 'Kaitlyn Robinson',
+                'email': 'oLDCaQfW@example.com'},
+            {'username': 'osYHeFD1', 'fullname': 'Riley Richardson',
+                'email': 'osYHeFD1@example.com'},
+            {'username': 'i4pHduDY', 'fullname': 'Kayla Sanders',
+                'email': 'i4pHduDY@example.com'},
+            {'username': 'BvyX6qF3', 'fullname': 'Sara Richardson',
+                'email': 'BvyX6qF3@example.com'},
+            {'username': 'a3EpwDYj', 'fullname': 'Trinity Gonzales',
+                'email': 'a3EpwDYj@example.com'},
+            {'username': 'JDMseWdt', 'fullname': 'Madeline Garcia',
+                'email': 'JDMseWdt@example.com'},
+            {'username': 'lPCYBvoi', 'fullname': 'Brian Gray',
+                'email': 'lPCYBvoi@example.com'},
+            {'username': 'AByCsRQ3', 'fullname': 'Victoria Perez',
+                'email': 'AByCsRQ3@example.com'},
+            {'username': 'CH7uVlNy', 'fullname': 'Charles Rodriguez',
+                'email': '5H7uVlNy@example.com'},
+            {'username': 'XYsmd7ux', 'fullname': 'Abigail Simmons',
+                'email': 'XYsmd7ux@example.com'},
+            {'username': 'DfaA1wqC3', 'fullname': 'Émilie Richard',
+                'email': 'DfaA1wqC3@example.com'},
         ]
         rtool = getToolByName(self.portal, 'portal_registration')
         for member in self.members:
-            rtool.addMember(member['username'], 'somepassword', properties=member)
+            rtool.addMember(member['username'],
+                            'somepassword', properties=member)
 
     def setUp(self):
         self.app = self.layer['app']
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
index cf28cc2..1b835e6 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
@@ -38,9 +38,9 @@ def afterSetUp(self):
         super(UserGroupsControlPanelTestCase, self).afterSetUp()
         members = [
             {
-              'username': 'DIispfuF',
-              'fullname': 'Kevin Hughes',
-              'email': 'DIispfuF@example.com'
+                'username': 'DIispfuF',
+                'fullname': 'Kevin Hughes',
+                'email': 'DIispfuF@example.com'
             },
         ]
         regtool = getToolByName(self.portal, 'portal_registration')
@@ -122,7 +122,7 @@ def testManagerCanDelegateManagerRoleForUsers(self):
             'users.roles:list:records': 'Manager',
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish('/plone/@@usergroup-userprefs',
                            request_method='POST', stdin=post_data,
@@ -139,7 +139,7 @@ def testNonManagersCannotDelegateManagerRoleForUsers(self):
             'users.roles:list:records': 'Manager',
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish('/plone/@@usergroup-userprefs',
                            request_method='POST', stdin=post_data,
@@ -157,7 +157,7 @@ def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):
             'users.roles:list:records': ('Member', 'Manager'),
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form, doseq=True))
         res = self.publish('/plone/@@usergroup-userprefs',
                            request_method='POST', stdin=post_data,
@@ -183,7 +183,7 @@ def testManagerCanDelegateManagerRoleForGroups(self):
             'group_Reviewers:list': ('', 'Manager'),
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form, doseq=True))
         res = self.publish('/plone/@@usergroup-groupprefs',
                            request_method='POST', stdin=post_data,
@@ -199,7 +199,7 @@ def testNonManagersCannotDelegateManagerRoleForGroups(self):
             'group_Reviewers:list': ('', 'Manager'),
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form, doseq=True))
         res = self.publish('/plone/@@usergroup-groupprefs',
                            request_method='POST', stdin=post_data,
@@ -216,7 +216,7 @@ def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):
             'group_Administrators:list': ('', 'Member', 'Manager'),
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form, doseq=True))
         res = self.publish('/plone/@@usergroup-groupprefs',
                            request_method='POST', stdin=post_data,
@@ -243,7 +243,7 @@ def test_usergroup_usermembership_blocks_escalation(self):
             '_authenticator': self.siteadmin_token,
             'add:list': 'Administrators',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish(
             '/plone/@@usergroup-usermembership?userid=%s' % self.normal_user,
@@ -269,7 +269,7 @@ def test_usergroup_groupmembership_blocks_escalation(self):
             '_authenticator': self.siteadmin_token,
             'add:list': self.normal_user,
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish(
             '/plone/@@usergroup-groupmembership?groupname=Administrators',
@@ -301,7 +301,7 @@ def test_user_registration_form_blocks_escalation(self):
             'form.widgets.groups:list': 'Administrators',
             'form.widgets.groups-empty-marker': '1',
             'form.buttons.register': 'Register',
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish('/plone/@@new-user',
                            request_method='POST', stdin=post_data,
@@ -312,7 +312,8 @@ def test_user_registration_form_blocks_escalation(self):
     def test_users_overview_blocks_deleting_managers(self):
         # a user without the Manager role cannot delete a user with the
         # Manager role
-        res = self.publish('/plone/@@usergroup-userprefs', basic='siteadmin:secret')
+        res = self.publish('/plone/@@usergroup-userprefs',
+                           basic='siteadmin:secret')
         contents = self._simplify_white_space(res.getOutput())
         self.assertTrue('<input type="checkbox" class="noborder notify" '
                         'name="delete:list" value="root" disabled="disabled" />'
@@ -324,7 +325,7 @@ def test_users_overview_blocks_deleting_managers(self):
             'delete:list': 'root',
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish('/plone/@@usergroup-userprefs',
                            request_method='POST', stdin=post_data,
@@ -352,7 +353,7 @@ def test_groups_overview_blocks_deleting_managers(self):
             'delete:list': 'Administrators',
             'form.button.Modify': 'Save',
             'form.submitted': 1,
-            }
+        }
         post_data = StringIO(urlencode(form))
         res = self.publish('/plone/@@usergroup-groupprefs',
                            request_method='POST', stdin=post_data,
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
index fff1af4..ba2fe7f 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_language.py
@@ -73,5 +73,3 @@ def test_use_cctld_negotiation(self):
 
     def test_use_request_negotiation(self):
         self.assertTrue(hasattr(self.settings, 'use_request_negotiation'))
-
-
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_security.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_security.py
index 3b29843..6b97c8b 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_security.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_security.py
@@ -35,7 +35,7 @@ def test_security_controlpanel_view(self):
     def test_plone_app_registry_in_controlpanel(self):
         self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
         self.assertTrue('plone.app.registry' in [a.getAction(self)['id']
-                            for a in self.controlpanel.listActions()])
+                                                 for a in self.controlpanel.listActions()])
 
     def test_enable_self_reg_setting(self):
         self.assertTrue(hasattr(self.settings, 'enable_self_reg'))
diff --git a/Products/CMFPlone/controlpanel/utils.py b/Products/CMFPlone/controlpanel/utils.py
index 851ca34..e6d9d04 100644
--- a/Products/CMFPlone/controlpanel/utils.py
+++ b/Products/CMFPlone/controlpanel/utils.py
@@ -14,7 +14,7 @@ def migrate_to_email_login(context):
     # names immediately, but we want to do that explicitly ourselves
     # and set the lowercase email address as login name, instead of
     # the lower case user id.
-    #pas.manage_changeProperties(login_transform='lower')
+    # pas.manage_changeProperties(login_transform='lower')
     pas.login_transform = 'lower'
 
     # Update the users.
diff --git a/Products/CMFPlone/exportimport/controlpanel.py b/Products/CMFPlone/exportimport/controlpanel.py
index 4db290c..cac7675 100644
--- a/Products/CMFPlone/exportimport/controlpanel.py
+++ b/Products/CMFPlone/exportimport/controlpanel.py
@@ -130,7 +130,7 @@ def _initConfiglets(self, node):
                 if permNode.nodeName == 'permission':
                     for textNode in permNode.childNodes:
                         if textNode.nodeName != '#text' or \
-                               not textNode.nodeValue.strip():
+                                not textNode.nodeValue.strip():
                             continue
                         permission = str(textNode.nodeValue)
                         break  # only one permission is allowed
diff --git a/Products/CMFPlone/exportimport/propertiestool.py b/Products/CMFPlone/exportimport/propertiestool.py
index 5b0cc0c..7d819ed 100644
--- a/Products/CMFPlone/exportimport/propertiestool.py
+++ b/Products/CMFPlone/exportimport/propertiestool.py
@@ -48,7 +48,7 @@ def exportPloneProperties(context):
         return
 
     exporter = queryMultiAdapter((ptool, context), IBody)
-    #IBody(ptool)
+    # IBody(ptool)
     if exporter is None:
         logger.warning('Export adapter missing.')
         return
@@ -107,10 +107,10 @@ def _importNode(self, node):
 
     def _initObjects(self, node):
         """Import subobjects"""
-        ## XXX: We could just use the _initObjects() from
-        ## ObjectManagerHelpers except that it looks up the object
-        ## constructor from Products.meta_type and
-        ## SimpleItemWithProperties doesn't get registered there.
+        # XXX: We could just use the _initObjects() from
+        # ObjectManagerHelpers except that it looks up the object
+        # constructor from Products.meta_type and
+        # SimpleItemWithProperties doesn't get registered there.
         for child in node.childNodes:
             if child.nodeName != 'object':
                 continue
diff --git a/Products/CMFPlone/exportimport/tests/testControlPanel.py b/Products/CMFPlone/exportimport/tests/testControlPanel.py
index 4d13771..f72abac 100644
--- a/Products/CMFPlone/exportimport/tests/testControlPanel.py
+++ b/Products/CMFPlone/exportimport/tests/testControlPanel.py
@@ -36,7 +36,7 @@ def _populate(self, obj):
             visible=True,
             appId='QuickInstaller',
             icon_expr='string:${portal_url}/product_icon.png',
-          )
+        )
 
     def setUp(self):
         from Products.GenericSetup.interfaces import ISetupEnviron
@@ -44,7 +44,8 @@ def setUp(self):
         self.site = Folder('site')
         self.site.portal_control_panel = PloneControlPanel()
         provideUtility(self.site.portal_control_panel, IControlPanel)
-        provideAdapter(self._getTargetClass(), (IControlPanel, ISetupEnviron), IBody)
+        provideAdapter(self._getTargetClass(),
+                       (IControlPanel, ISetupEnviron), IBody)
         self._obj = self.site.portal_control_panel
         self._BODY = _CONTROLPANEL_XML
 
diff --git a/Products/CMFPlone/interfaces/constrains.py b/Products/CMFPlone/interfaces/constrains.py
index 6403016..3686052 100644
--- a/Products/CMFPlone/interfaces/constrains.py
+++ b/Products/CMFPlone/interfaces/constrains.py
@@ -3,7 +3,7 @@
 
 ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
 DISABLED = 0  # use default behavior of PortalFolder,
-              # which uses the FTI information
+# which uses the FTI information
 ENABLED = 1  # allow types from locallyAllowedTypes only
 
 
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 02e3818..56f4c66 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -213,8 +213,8 @@ class ILanguageSchema(Interface):
             'use_subdomain_negotiation',
             'use_cctld_negotiation',
             'use_request_negotiation',
-            ],
-        )
+        ],
+    )
     use_content_negotiation = schema.Bool(
         title=_(u"heading_language_of_the_content",
                 default=u"Use the language of the content item"),
@@ -266,7 +266,7 @@ class ILanguageSchema(Interface):
             default=(u"i.e. also when the 'set_language' request parameter is absent")),
         default=False,
         required=False,
-        )
+    )
 
     use_subdomain_negotiation = schema.Bool(
         title=_(u"heading_use_subdomain",
@@ -275,7 +275,7 @@ class ILanguageSchema(Interface):
                       default=u"e.g.: de.plone.org"),
         default=False,
         required=False,
-        )
+    )
 
     use_cctld_negotiation = schema.Bool(
         title=_(u"heading_top_level_domain",
@@ -284,7 +284,7 @@ class ILanguageSchema(Interface):
                       default=u"e.g.: www.plone.de"),
         default=False,
         required=False,
-        )
+    )
 
     use_request_negotiation = schema.Bool(
         title=_(u"heading_browser_language_request_negotiation",
@@ -293,7 +293,7 @@ class ILanguageSchema(Interface):
                       default=u"Use browser language request negotiation."),
         default=False,
         required=False,
-        )
+    )
 
 
 class ITagAttrPair(Interface):
@@ -633,7 +633,8 @@ class ITinyMCEPluginSchema(Interface):
 
     custom_buttons = schema.List(
         title=_(u"Custom buttons"),
-        description=_(u"Enter a list of custom buttons which will be added to toolbar"),
+        description=_(
+            u"Enter a list of custom buttons which will be added to toolbar"),
         required=False,
         value_type=schema.TextLine(),
         missing_value=[],
@@ -942,7 +943,8 @@ class INavigationSchema(Interface):
 
     parent_types_not_to_query = schema.List(
         title=_(u"Hide children of these types"),
-        description=_(u"Hide content inside the following types in Navigation."),
+        description=_(
+            u"Hide content inside the following types in Navigation."),
         default=[u'TempFolder'],
         value_type=schema.TextLine(),
         missing_value=(),
@@ -1099,7 +1101,8 @@ class ISiteSchema(Interface):
 
     display_publication_date_in_byline = schema.Bool(
         title=_(u'Display publication date'),
-        description=_(u'Show the date a content item was published in the byline.'),
+        description=_(
+            u'Show the date a content item was published in the byline.'),
         default=False,
         required=False)
 
@@ -1414,7 +1417,8 @@ class ISocialMediaSchema(Interface):
 
     facebook_app_id = schema.TextLine(
         title=_(u'Facebook app id'),
-        description=_(u'To be used with some integrations like open graph data'),
+        description=_(
+            u'To be used with some integrations like open graph data'),
         required=False,
         default=u'')
 
diff --git a/Products/CMFPlone/interfaces/events.py b/Products/CMFPlone/interfaces/events.py
index 22ec020..081b4ae 100644
--- a/Products/CMFPlone/interfaces/events.py
+++ b/Products/CMFPlone/interfaces/events.py
@@ -7,6 +7,7 @@ class ISiteManagerCreatedEvent(IObjectEvent):
     """An event that's fired once the Plone portal is enabled as a site.
     """
 
+
 class IReorderedEvent(IObjectEvent):
     """An event that's fired once the Plone Tool has been notified of
        a reordering
diff --git a/Products/CMFPlone/interfaces/language.py b/Products/CMFPlone/interfaces/language.py
index d78e9a7..e3838c3 100644
--- a/Products/CMFPlone/interfaces/language.py
+++ b/Products/CMFPlone/interfaces/language.py
@@ -8,4 +8,4 @@ def get_language(self):
         """ return the contents language """
 
     def set_language(self):
-        """ return the contents language """
\ No newline at end of file
+        """ return the contents language """
diff --git a/Products/CMFPlone/interfaces/resources.py b/Products/CMFPlone/interfaces/resources.py
index 22579dc..ffd5243 100644
--- a/Products/CMFPlone/interfaces/resources.py
+++ b/Products/CMFPlone/interfaces/resources.py
@@ -59,17 +59,20 @@ class IBundleRegistry(zope.interface.Interface):
 
     expression = schema.ASCIILine(
         title=_(u"Expression to render"),
-        description=_(u"In case its a bundle we can have a condition to render it"),
+        description=_(
+            u"In case its a bundle we can have a condition to render it"),
         required=False)
 
     conditionalcomment = schema.ASCIILine(
         title=_(u"Conditional comment"),
-        description=_(u"In case you want to render this resource on conditional comment"),
+        description=_(
+            u"In case you want to render this resource on conditional comment"),
         required=False)
 
     resources = schema.List(
         title=_(u"Loaded resources"),
-        description=_(u"The resources that is going to be loaded on this bundle in order"),
+        description=_(
+            u"The resources that is going to be loaded on this bundle in order"),
         value_type=schema.ASCIILine(title=_(u"Resource name")),
         required=False)
 
@@ -80,13 +83,15 @@ class IBundleRegistry(zope.interface.Interface):
 
     compile = schema.Bool(
         title=_(u"Does your bundle contains any RequireJS or LESS file?"),
-        description=_(u"If its true and you modify this bundle you need to build it before production"),
+        description=_(
+            u"If its true and you modify this bundle you need to build it before production"),
         default=True,
         required=False)
 
     depends = schema.ASCIILine(
         title=_(u"Depends on another bundle"),
-        description=_(u"In case you want to be the last: *, in case its the first should be empty"),
+        description=_(
+            u"In case you want to be the last: *, in case its the first should be empty"),
         required=False)
 
     develop_javascript = schema.Bool(
diff --git a/Products/CMFPlone/interfaces/syndication.py b/Products/CMFPlone/interfaces/syndication.py
index 385c57c..28c9d29 100644
--- a/Products/CMFPlone/interfaces/syndication.py
+++ b/Products/CMFPlone/interfaces/syndication.py
@@ -8,6 +8,7 @@ class ISyndicatable(Interface):
 
 
 class IFeedData(Interface):
+
     def link():
         """
         Link to item
diff --git a/Products/CMFPlone/patches/__init__.py b/Products/CMFPlone/patches/__init__.py
index 9d93dd2..30becca 100644
--- a/Products/CMFPlone/patches/__init__.py
+++ b/Products/CMFPlone/patches/__init__.py
@@ -1,13 +1,13 @@
 import addzmiplonesite          # Add an explicit link to add a new Plone
-                                # site to the ZMI for faster access
+# site to the ZMI for faster access
 
 import addzmisecuritywarning    # Add a warning to the ZMI security tab
-                                # that you shouldn't use it
+# that you shouldn't use it
 
 import dateIndexPatch           # Avoid OverflowErrors in Date*Indexes
 
 import unicodeFallbackPatch     # Makes the TAL engine in Zope 2.10+ accept
-                                # utf-8 encoded strings as well as Unicode
+# utf-8 encoded strings as well as Unicode
 
 import csrf                     # Protects most important methods from
 csrf.applyPatches()             # CSRF attacks
@@ -26,4 +26,4 @@
 sendmail.applyPatches()
 
 import templatecookcheck        # Make sure templates aren't re-read in
-                                # production sites
+# production sites
diff --git a/Products/CMFPlone/patches/csrf.py b/Products/CMFPlone/patches/csrf.py
index 14c052e..cbd234f 100644
--- a/Products/CMFPlone/patches/csrf.py
+++ b/Products/CMFPlone/patches/csrf.py
@@ -51,7 +51,7 @@ def setProperties(self, properties=None, REQUEST=None, **kw):
         GroupsTool.removePrincipalFromGroup)
 
     from Products.PluggableAuthService.PluggableAuthService import \
-         PluggableAuthService as PAS
+        PluggableAuthService as PAS
     PAS.userFolderAddUser = patch(PAS.userFolderAddUser)
     PAS.userFolderEditUser = patch(PAS.userFolderEditUser)
     PAS.userFolderDelUsers = patch(PAS.userFolderDelUsers)
diff --git a/Products/CMFPlone/patches/securemailhost.py b/Products/CMFPlone/patches/securemailhost.py
index 3280829..35baf08 100644
--- a/Products/CMFPlone/patches/securemailhost.py
+++ b/Products/CMFPlone/patches/securemailhost.py
@@ -26,17 +26,17 @@
 fake_module = ModuleProxy(smh_module or sys.modules[__name__])
 deferred = fake_module.__deferred_definitions__
 deferred['EMAIL_RE'] = DeferredAndDeprecated(
-                'EMAIL_RE',
-                'Products.CMFPlone.PloneTool:EMAIL_RE',
-                'EMAIL_RE has been moved from SecureMailHost, which is no '
-                'longer shipped with Plone.  It can be imported from '
-                'Products.CMFPlone.utils.EMAIL_RE')
+    'EMAIL_RE',
+    'Products.CMFPlone.PloneTool:EMAIL_RE',
+    'EMAIL_RE has been moved from SecureMailHost, which is no '
+    'longer shipped with Plone.  It can be imported from '
+    'Products.CMFPlone.utils.EMAIL_RE')
 deferred['EMAIL_CUTOFF_RE'] = DeferredAndDeprecated(
-                     'EMAIL_CUTOFF_RE',
-                     'Products.CMFPlone.PloneTool:EMAIL_CUTOFF_RE',
-                     'EMAIL_CUTOFF_RE has been moved from SecureMailHost, '
-                     'which is no longer shipped with Plone.  It can be '
-                     'imported from Products.CMFPlone.utils.EMAIL_CUTOFF_RE')
+    'EMAIL_CUTOFF_RE',
+    'Products.CMFPlone.PloneTool:EMAIL_CUTOFF_RE',
+    'EMAIL_CUTOFF_RE has been moved from SecureMailHost, '
+    'which is no longer shipped with Plone.  It can be '
+    'imported from Products.CMFPlone.utils.EMAIL_CUTOFF_RE')
 
 
 # We can't depend on SecureMailHost, so we have to reimplement
diff --git a/Products/CMFPlone/patches/security.py b/Products/CMFPlone/patches/security.py
index 22a0d56..622f789 100644
--- a/Products/CMFPlone/patches/security.py
+++ b/Products/CMFPlone/patches/security.py
@@ -6,6 +6,8 @@
 from zope.traversing import namespace
 from zope.traversing.interfaces import TraversalError
 old_traverse = namespace.view.traverse
+
+
 def traverse(self, name, ignored):
     if not name:
         raise TraversalError(self.context, name)
@@ -17,6 +19,8 @@ def traverse(self, name, ignored):
 from zExceptions import Unauthorized
 from OFS.ObjectManager import ObjectManager
 ObjectManager.__old_manage_FTPlist = ObjectManager.manage_FTPlist
+
+
 def manage_FTPlist(self, REQUEST):
     """Returns a directory listing consisting of a tuple of
     (id,stat) tuples, marshaled to a string. Note, the listing it
@@ -35,6 +39,8 @@ def manage_FTPlist(self, REQUEST):
 # 4. Make sure z3c.form widgets don't get declared as public
 from Products.Five.metaconfigure import ClassDirective
 old_require = ClassDirective.require
+
+
 def require(self, *args, **kw):
     if self._ClassDirective__class.__module__.startswith('z3c.form.browser'):
         return
diff --git a/Products/CMFPlone/patches/templatecookcheck.py b/Products/CMFPlone/patches/templatecookcheck.py
index 1f01d61..9be05f1 100644
--- a/Products/CMFPlone/patches/templatecookcheck.py
+++ b/Products/CMFPlone/patches/templatecookcheck.py
@@ -24,7 +24,7 @@ def _cook_check(self):
     assert self._v_cooked
     if self._v_errors:
         logging.error('PageTemplateFile: Error in template %s: %s',
-                self.filename, '\n'.join(self._v_errors))
+                      self.filename, '\n'.join(self._v_errors))
         return
     self._v_last_read = mtime
 
diff --git a/Products/CMFPlone/patches/unicodehacks.py b/Products/CMFPlone/patches/unicodehacks.py
index 92493b0..99a6893 100644
--- a/Products/CMFPlone/patches/unicodehacks.py
+++ b/Products/CMFPlone/patches/unicodehacks.py
@@ -20,7 +20,7 @@ def new__call__(self, econtext):
     except UnicodeDecodeError:
         pass
     return self._expr % tuple([_unicode_replace(var(econtext))
-                                for var in self._vars])
+                               for var in self._vars])
 
 
 class FasterStringIO(list):
diff --git a/Products/CMFPlone/patterns/utils.py b/Products/CMFPlone/patterns/utils.py
index f7c7c45..3ecd82c 100644
--- a/Products/CMFPlone/patterns/utils.py
+++ b/Products/CMFPlone/patterns/utils.py
@@ -35,4 +35,4 @@ def get_portal_url(context):
                 return portal.absolute_url()
         else:
             return portal.absolute_url()
-    return ''
\ No newline at end of file
+    return ''
diff --git a/Products/CMFPlone/permissions.py b/Products/CMFPlone/permissions.py
index ebf99df..07370e2 100644
--- a/Products/CMFPlone/permissions.py
+++ b/Products/CMFPlone/permissions.py
@@ -65,5 +65,3 @@
 
 security.declarePublic('ViewManagementScreens')
 from Products.CMFCore.permissions import ViewManagementScreens
-
-
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index da9316b..f44c458 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -112,9 +112,11 @@ def cookWhenChangingSettings(context, bundle=None):
             # Storing css if defined
             resource_path = css_path.split('++plone++')[-1]
             resource_name, resource_filepath = resource_path.split('/', 1)
-            persistent_directory = getUtility(IResourceDirectory, name="persistent")
+            persistent_directory = getUtility(
+                IResourceDirectory, name="persistent")
             if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
-                persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)
+                persistent_directory.makeDirectory(
+                    OVERRIDE_RESOURCE_DIRECTORY_NAME)
             container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
             if resource_name not in container:
                 container.makeDirectory(resource_name)
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index 5529991..cc9810c 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -31,7 +31,8 @@ def get_data(self, bundle, result):
                         result.append(data)
         else:
             if bundle.compile is False:
-                # Its a legacy css bundle OR compiling is happening outside of plone
+                # Its a legacy css bundle OR compiling is happening outside of
+                # plone
                 if ((not bundle.last_compilation
                         or self.last_legacy_import > bundle.last_compilation)
                         and bundle.resources):
@@ -42,7 +43,8 @@ def get_data(self, bundle, result):
                 js_path = bundle.jscompilation
                 if '++plone++' in js_path:
                     resource_path = js_path.split('++plone++')[-1]
-                    resource_name, resource_filepath = resource_path.split('/', 1)
+                    resource_name, resource_filepath = resource_path.split(
+                        '/', 1)
                     js_location = '%s/++plone++%s/++unique++%s/%s' % (
                         self.site_url,
                         resource_name,
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index b6ab76d..9ae829e 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -64,7 +64,8 @@ def get_data(self, bundle, result):
                 css_path = bundle.csscompilation
                 if '++plone++' in css_path:
                     resource_path = css_path.split('++plone++')[-1]
-                    resource_name, resource_filepath = resource_path.split('/', 1)
+                    resource_name, resource_filepath = resource_path.split(
+                        '/', 1)
                     css_location = '%s/++plone++%s/++unique++%s/%s' % (
                         self.site_url,
                         resource_name,
diff --git a/Products/CMFPlone/resources/exportimport/resourceregistry.py b/Products/CMFPlone/resources/exportimport/resourceregistry.py
index df926b9..7fb8aef 100644
--- a/Products/CMFPlone/resources/exportimport/resourceregistry.py
+++ b/Products/CMFPlone/resources/exportimport/resourceregistry.py
@@ -113,7 +113,8 @@ def _importNode(self, node):
                 elif self.resource_type == 'stylesheet':
                     proxy.css = [data['url']]
                 if 'enabled' in data and not data['enabled']:
-                    # if we are disabling it, we need to remove from legacy resources
+                    # if we are disabling it, we need to remove from legacy
+                    # resources
                     if res_id in legacy.resources:
                         legacy.resources.remove(res_id)
                     continue
@@ -160,5 +161,6 @@ def _importNode(self, node):
             try:
                 cookWhenChangingSettings(self.context, legacy)
             except (AssertionError, ComponentLookupError):
-                # zope.globalrequest and the site might not be setup, don't error out
-                pass
\ No newline at end of file
+                # zope.globalrequest and the site might not be setup, don't
+                # error out
+                pass
diff --git a/Products/CMFPlone/setuphandlers.py b/Products/CMFPlone/setuphandlers.py
index 79db103..f09f997 100644
--- a/Products/CMFPlone/setuphandlers.py
+++ b/Products/CMFPlone/setuphandlers.py
@@ -65,7 +65,7 @@ def getNonInstallableProducts(self):
             'plone.protect',
             'plone.resource',
             'plonetheme.barceloneta',
-            ]
+        ]
 
 
 def addCacheHandlers(portal):
@@ -97,14 +97,14 @@ def addCacheForResourceRegistry(portal):
     reg = getToolByName(portal, 'portal_css', None)
     if reg is not None \
             and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) \
-                is not None:
+    is not None:
         reg.ZCacheable_setManagerId(ram_cache_id)
         reg.ZCacheable_setEnabled(1)
 
     reg = getToolByName(portal, 'portal_javascripts', None)
     if reg is not None \
             and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) \
-                is not None:
+    is not None:
         reg.ZCacheable_setManagerId(ram_cache_id)
         reg.ZCacheable_setEnabled(1)
 
@@ -130,42 +130,42 @@ def setProfileVersion(portal):
 
 def assignTitles(portal):
     titles = {
-     'acl_users': 'User / Group storage and authentication settings',
-     'archetype_tool': 'Archetypes specific settings',
-     'caching_policy_manager': 'Settings related to proxy caching',
-     'content_type_registry': 'MIME type settings',
-     'error_log': 'Error and exceptions log viewer',
-     'MailHost': 'Mail server settings for outgoing mail',
-     'mimetypes_registry': 'MIME types recognized by Plone',
-     'plone_utils': 'Various utility methods',
-     'portal_actions': 'Contains custom tabs and buttons',
-     'portal_calendar': 'Controls how events are shown',
-     'portal_catalog': 'Indexes all content in the site',
-     'portal_controlpanel': 'Registry of control panel screen',
-     'portal_css': 'Registry of CSS files',
-     'portal_diff': 'Settings for content version comparisions',
-     'portal_groupdata': 'Handles properties on groups',
-     'portal_groups': 'Handles group related functionality',
-     'portal_javascripts': 'Registry of JavaScript files',
-     'portal_languages': 'Language specific settings',
-     'portal_membership': 'Handles membership policies',
-     'portal_memberdata': 'Handles the available properties on members',
-     'portal_migration': 'Upgrades to newer Plone versions',
-     'portal_password_reset': 'Handles password retention policy',
-     'portal_properties': 'General settings registry',
-     'portal_quickinstaller': 'Allows to install/uninstall products',
-     'portal_registration': 'Handles registration of new users',
-     'portal_setup': 'Add-on and configuration management',
-     'portal_skins': 'Controls skin behaviour (search order etc)',
-     'portal_transforms': 'Handles data conversion between MIME types',
-     'portal_types': 'Controls the available content types in your portal',
-     'portal_url': 'Methods to anchor you to the root of your Plone site',
-     'portal_view_customizations': 'Template customizations',
-     'portal_workflow': 'Contains workflow definitions for your portal',
-     'reference_catalog': 'Catalog of content references',
-     'translation_service': 'Provides access to the translation machinery',
-     'uid_catalog': 'Catalog of unique content identifiers',
-     }
+        'acl_users': 'User / Group storage and authentication settings',
+        'archetype_tool': 'Archetypes specific settings',
+        'caching_policy_manager': 'Settings related to proxy caching',
+        'content_type_registry': 'MIME type settings',
+        'error_log': 'Error and exceptions log viewer',
+        'MailHost': 'Mail server settings for outgoing mail',
+        'mimetypes_registry': 'MIME types recognized by Plone',
+        'plone_utils': 'Various utility methods',
+        'portal_actions': 'Contains custom tabs and buttons',
+        'portal_calendar': 'Controls how events are shown',
+        'portal_catalog': 'Indexes all content in the site',
+        'portal_controlpanel': 'Registry of control panel screen',
+        'portal_css': 'Registry of CSS files',
+        'portal_diff': 'Settings for content version comparisions',
+        'portal_groupdata': 'Handles properties on groups',
+        'portal_groups': 'Handles group related functionality',
+        'portal_javascripts': 'Registry of JavaScript files',
+        'portal_languages': 'Language specific settings',
+        'portal_membership': 'Handles membership policies',
+        'portal_memberdata': 'Handles the available properties on members',
+        'portal_migration': 'Upgrades to newer Plone versions',
+        'portal_password_reset': 'Handles password retention policy',
+        'portal_properties': 'General settings registry',
+        'portal_quickinstaller': 'Allows to install/uninstall products',
+        'portal_registration': 'Handles registration of new users',
+        'portal_setup': 'Add-on and configuration management',
+        'portal_skins': 'Controls skin behaviour (search order etc)',
+        'portal_transforms': 'Handles data conversion between MIME types',
+        'portal_types': 'Controls the available content types in your portal',
+        'portal_url': 'Methods to anchor you to the root of your Plone site',
+        'portal_view_customizations': 'Template customizations',
+        'portal_workflow': 'Contains workflow definitions for your portal',
+        'reference_catalog': 'Catalog of content references',
+        'translation_service': 'Provides access to the translation machinery',
+        'uid_catalog': 'Catalog of unique content identifiers',
+    }
     for oid, obj in portal.items():
         title = titles.get(oid, None)
         if title:
diff --git a/Products/CMFPlone/tests/dummy.py b/Products/CMFPlone/tests/dummy.py
index 12bcd1a..c8ee519 100644
--- a/Products/CMFPlone/tests/dummy.py
+++ b/Products/CMFPlone/tests/dummy.py
@@ -22,8 +22,8 @@
 TEXT = 'file data'
 UTEXT = u'file data'
 GIF = open(os.path.join(os.path.dirname(__file__),
-           os.pardir,
-           'tool.gif')).read()
+                        os.pardir,
+                        'tool.gif')).read()
 
 
 class Dummy:
@@ -62,6 +62,7 @@ def get_size(self):
 
 
 class FieldStorage(object):
+
     def __init__(self, file, filename='testfile', headers=None):
         self.file = file
         if headers is None:
diff --git a/Products/CMFPlone/tests/testBatch.py b/Products/CMFPlone/tests/testBatch.py
index b13ee50..4fcc283 100644
--- a/Products/CMFPlone/tests/testBatch.py
+++ b/Products/CMFPlone/tests/testBatch.py
@@ -8,7 +8,7 @@ class TestBatch(PloneTestCase):
     def test_batch_no_lazy(self):
         batch = Batch(range(100), size=10, start=10)
         self.assertEqual([b for b in batch],
-            [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
+                         [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
 
     def test_batch_lazy_map(self):
         def get(key):
diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index b523944..ab7dd3c 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -238,7 +238,7 @@ def testDefaultPageSetting(self):
         self.assertEqual(
             default,
             [u'index_html', u'index.html', u'index.htm', u'FrontPage']
-            )
+        )
 
 
 class TestPortalBrowserDefault(unittest.TestCase):
diff --git a/Products/CMFPlone/tests/testBrowserLayerPrecedence.py b/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
index 523b0cc..f8d90b2 100644
--- a/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
+++ b/Products/CMFPlone/tests/testBrowserLayerPrecedence.py
@@ -31,4 +31,5 @@ def testCustomBrowserLayerHasPrecedenceOverDefaultLayer(self):
         iro = self._get_request_interfaces()
         unregister_layer('Plone.testlayer')
 
-        self.assertTrue(iro.index(IAdditiveLayer) < iro.index(IDefaultBrowserLayer))
+        self.assertTrue(iro.index(IAdditiveLayer) <
+                        iro.index(IDefaultBrowserLayer))
diff --git a/Products/CMFPlone/tests/testCSSandJSRegistry.py b/Products/CMFPlone/tests/testCSSandJSRegistry.py
index 05cc30b..b651486 100644
--- a/Products/CMFPlone/tests/testCSSandJSRegistry.py
+++ b/Products/CMFPlone/tests/testCSSandJSRegistry.py
@@ -15,7 +15,7 @@ def testDefaultCssIsInstalled(self):
             IResourceRegistry, prefix="plone.resources")
         expected = [
             '++plone++static/plone.less',
-            ]
+        ]
         css_files = [y for x in installedResources.values() for y in x.css]
         for e in expected:
             self.assertTrue(e in css_files, e)
@@ -26,7 +26,7 @@ def testBundleIsInstalled(self):
         expected = [
             'plone',
             'plone-legacy'
-            ]
+        ]
         for e in expected:
             self.assertTrue(e in installedBundles.keys(), e)
 
@@ -56,7 +56,7 @@ def testDefaultJSIsInstalled(self):
         expected = [
             '++resource++plone.js',
             'jquery.highlightsearchterms.js'
-            ]
+        ]
         js_files = [x.js for x in installedResources.values()]
         for e in expected:
             self.assertTrue(e in js_files, e)
diff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py
index 6deaf22..5298f3c 100644
--- a/Products/CMFPlone/tests/testCatalogTool.py
+++ b/Products/CMFPlone/tests/testCatalogTool.py
@@ -398,7 +398,7 @@ def testSearchReturnsDocumentUsing_OR(self):
         self.assertEqual(len(results), 2)
 
     def testSearchIgnoresAccents(self):
-        #plip 12110
+        # plip 12110
         self.folder.invokeFactory(
             'Document', id='docwithaccents1', description='Econométrie')
         self.folder.invokeFactory(
@@ -540,8 +540,8 @@ def testSortableTitleOutput(self):
         self.assertEqual(wrapped.sortable_title, '0012 document 0025')
 
     def testSortableNonASCIITitles(self):
-        #test a utf-8 encoded string gets properly unicode converted
-        #sort must ignore accents
+        # test a utf-8 encoded string gets properly unicode converted
+        # sort must ignore accents
         title = 'La Pe\xc3\xb1a'
         doc = self.folder.doc
         doc.setTitle(title)
@@ -636,7 +636,7 @@ def testSetTitleDoesNotUpdateCatalog(self):
         title = 'Test Folder - Snooze!'
         self.assertTrue(self.catalog(getId='foo'))
         self.folder.foo.setTitle(title)
-        #Title is a TextIndex
+        # Title is a TextIndex
         self.assertFalse(self.catalog(Title='Snooze'))
 
 
@@ -644,10 +644,14 @@ class TestCatalogOrdering(PloneTestCase):
 
     def afterSetUp(self):
         self.catalog = self.portal.portal_catalog
-        self.folder.invokeFactory('Document', id='doc1', text='foo', title='First')
-        self.folder.invokeFactory('Document', id='doc2', text='bar', title='Second')
-        self.folder.invokeFactory('Document', id='doc3', text='bloo', title='Third')
-        self.folder.invokeFactory('Document', id='doc4', text='blee', title='Fourth')
+        self.folder.invokeFactory(
+            'Document', id='doc1', text='foo', title='First')
+        self.folder.invokeFactory(
+            'Document', id='doc2', text='bar', title='Second')
+        self.folder.invokeFactory(
+            'Document', id='doc3', text='bloo', title='Third')
+        self.folder.invokeFactory(
+            'Document', id='doc4', text='blee', title='Fourth')
 
     def testInitialOrder(self):
         self.assertEqual(self.folder.getObjectPosition('doc1'), 0)
@@ -660,9 +664,9 @@ def testOrderIsUnchangedOnDefaultFolderPosition(self):
         # give no complaints and have no effect.
         folder_position(self.folder)
         folder_docs = self.catalog(
-                            portal_type='Document',
-                            path='/'.join(self.folder.getPhysicalPath()),
-                            sort_on='getObjPositionInParent')
+            portal_type='Document',
+            path='/'.join(self.folder.getPhysicalPath()),
+            sort_on='getObjPositionInParent')
         expected = ['doc1', 'doc2', 'doc3', 'doc4']
         self.assertEqual([b.getId for b in folder_docs], expected)
 
@@ -709,27 +713,28 @@ def testOrderIsUpdatedOnMoveBottom(self):
     def testOrderIsUpdatedOnSort(self):
         folder_position(self.folder, position='ordered', id='Title')
         folder_docs = self.catalog(
-                            portal_type='Document',
-                            path='/'.join(self.folder.getPhysicalPath()),
-                            sort_on='getObjPositionInParent')
+            portal_type='Document',
+            path='/'.join(self.folder.getPhysicalPath()),
+            sort_on='getObjPositionInParent')
         expected = ['doc1', 'doc4', 'doc2', 'doc3']
         self.assertEqual([b.getId for b in folder_docs], expected)
 
     def testOrderIsUpdatedOnReverse(self):
-        folder_position(self.folder, position='ordered', id='Title', reverse=True)
+        folder_position(self.folder, position='ordered',
+                        id='Title', reverse=True)
         folder_docs = self.catalog(
-                            portal_type='Document',
-                            path='/'.join(self.folder.getPhysicalPath()),
-                            sort_on='getObjPositionInParent')
+            portal_type='Document',
+            path='/'.join(self.folder.getPhysicalPath()),
+            sort_on='getObjPositionInParent')
         expected = ['doc3', 'doc2', 'doc4', 'doc1']
         self.assertEqual([b.getId for b in folder_docs], expected)
 
     def testOrderIsUpdatedOnSimpleReverse(self):
         folder_position(self.folder, position='ordered', reverse=True)
         folder_docs = self.catalog(
-                            portal_type='Document',
-                            path='/'.join(self.folder.getPhysicalPath()),
-                            sort_on='getObjPositionInParent')
+            portal_type='Document',
+            path='/'.join(self.folder.getPhysicalPath()),
+            sort_on='getObjPositionInParent')
         expected = ['doc4', 'doc3', 'doc2', 'doc1']
         self.assertEqual([b.getId for b in folder_docs], expected)
 
@@ -800,9 +805,9 @@ def testOrderAfterALotOfChanges(self):
         self.assertEqual([b.getId for b in folder_docs], expected)
 
     def testAllObjectsHaveOrder(self):
-        #Make sure that a query with sort_on='getObjPositionInParent'
-        #returns the same number of results as one without, make sure
-        #the Members folder is in the catalog and has getObjPositionInParent
+        # Make sure that a query with sort_on='getObjPositionInParent'
+        # returns the same number of results as one without, make sure
+        # the Members folder is in the catalog and has getObjPositionInParent
         all_objs = self.catalog()
         sorted_objs = self.catalog(sort_on='getObjPositionInParent')
         self.assertEqual(len(all_objs), len(sorted_objs))
diff --git a/Products/CMFPlone/tests/testCheckId.py b/Products/CMFPlone/tests/testCheckId.py
index 9b30c47..2c16fb7 100644
--- a/Products/CMFPlone/tests/testCheckId.py
+++ b/Products/CMFPlone/tests/testCheckId.py
@@ -77,7 +77,7 @@ def testCatalogIndex(self):
         portal_membership = getToolByName(self.portal, 'portal_membership')
         have_permission = portal_membership.checkPermission
         self.assertTrue(have_permission('Search ZCatalog',
-                        self.portal.portal_catalog),
+                                        self.portal.portal_catalog),
                         'Expected permission "Search ZCatalog"')
 
         r = self.folder.check_id('created')
diff --git a/Products/CMFPlone/tests/testContentPublishing.py b/Products/CMFPlone/tests/testContentPublishing.py
index 4cb7fc6..013e004 100644
--- a/Products/CMFPlone/tests/testContentPublishing.py
+++ b/Products/CMFPlone/tests/testContentPublishing.py
@@ -149,8 +149,8 @@ def testPublishingNonDefaultPageLeavesFolderAlone(self):
         self.assertEqual(self.workflow.getInfoFor(self.folder, 'review_state'),
                          'visible')
         self.assertEqual(
-                    self.workflow.getInfoFor(self.folder.d1, 'review_state'),
-                    'published')
+            self.workflow.getInfoFor(self.folder.d1, 'review_state'),
+            'published')
 
     def testPublishingDefaultPagePublishesFolder(self):
         self.setRoles(['Manager'])  # Make sure we can publish directly
@@ -160,8 +160,8 @@ def testPublishingDefaultPagePublishesFolder(self):
         self.assertEqual(self.workflow.getInfoFor(self.folder, 'review_state'),
                          'published')
         self.assertEqual(
-                    self.workflow.getInfoFor(self.folder.d1, 'review_state'),
-                    'published')
+            self.workflow.getInfoFor(self.folder.d1, 'review_state'),
+            'published')
 
     def testPublishingDefaultPageWhenFolderCannotBePublished(self):
         self.setRoles(['Manager'])  # Make sure we can publish directly
@@ -176,8 +176,8 @@ def testPublishingDefaultPageWhenFolderCannotBePublished(self):
         self.assertEqual(self.workflow.getInfoFor(self.folder, 'review_state'),
                          'published')
         self.assertEqual(
-                    self.workflow.getInfoFor(self.folder.d1, 'review_state'),
-                    'published')
+            self.workflow.getInfoFor(self.folder.d1, 'review_state'),
+            'published')
 
     # test setting effective/expiration date and isExpired script
 
diff --git a/Products/CMFPlone/tests/testContentSecurity.py b/Products/CMFPlone/tests/testContentSecurity.py
index 6f83342..b4dde7a 100644
--- a/Products/CMFPlone/tests/testContentSecurity.py
+++ b/Products/CMFPlone/tests/testContentSecurity.py
@@ -62,14 +62,14 @@ def testCreateFailsWithLocalRoleBlocked(self):
         folder.manage_addLocalRoles('user2', ('Owner',))
 
         sharingView = self.folder.unrestrictedTraverse('@@sharing')
-        sharingView.update_role_settings([{'id':'user2',
-                                           'type':'user',
-                                           'roles':['Owner']}])
+        sharingView.update_role_settings([{'id': 'user2',
+                                           'type': 'user',
+                                           'roles': ['Owner']}])
 
         folder.invokeFactory('Folder', id='subfolder')
-        #Turn off local role acquisition
+        # Turn off local role acquisition
         folder.subfolder.unrestrictedTraverse('@@sharing') \
-                .update_inherit(False)
+            .update_inherit(False)
 
         self.login('user2')
         # This should now raise ValueError
@@ -84,7 +84,7 @@ def testCreateSucceedsWithLocalRoleBlockedInParentButAssingedInSubFolder(self):
         folder.manage_addLocalRoles('user2', ('Owner',))
         folder.invokeFactory('Folder', id='subfolder')
         subfolder = folder.subfolder
-        #Turn off local role acquisition
+        # Turn off local role acquisition
         subfolder.unrestrictedTraverse('@@sharing').update_inherit(False)
         subfolder.invokeFactory('Folder', id='subsubfolder')
         subfolder.subsubfolder.manage_addLocalRoles('user2', ('Owner',))
@@ -104,7 +104,7 @@ def testViewAllowedOnContentInAcquisitionBlockedFolder(self):
         folder.invokeFactory('Folder', id='subfolder')
         subfolder = folder.subfolder
         subfolder.unrestrictedTraverse('@@sharing').update_inherit(False)
-        #Turn off local role acquisition
+        # Turn off local role acquisition
         subfolder.invokeFactory('Document', id='new')
         subfolder.new.content_status_modify(workflow_action='publish')
         subfolder.new.manage_addLocalRoles('user2', ('Member',))
diff --git a/Products/CMFPlone/tests/testControlPanel.py b/Products/CMFPlone/tests/testControlPanel.py
index dd2bb7b..bf51dd0 100644
--- a/Products/CMFPlone/tests/testControlPanel.py
+++ b/Products/CMFPlone/tests/testControlPanel.py
@@ -24,5 +24,5 @@ def testDefaultGroups(self):
     def testDefaultConfiglets(self):
         for title in self.configlets:
             self.assertTrue(title in [a.getAction(self)['id']
-                            for a in self.controlpanel.listActions()],
+                                      for a in self.controlpanel.listActions()],
                             "Missing configlet with id '%s'" % title)
diff --git a/Products/CMFPlone/tests/testControlPanelScripts.py b/Products/CMFPlone/tests/testControlPanelScripts.py
index d49788d..99ea0b4 100644
--- a/Products/CMFPlone/tests/testControlPanelScripts.py
+++ b/Products/CMFPlone/tests/testControlPanelScripts.py
@@ -52,9 +52,9 @@ def addMember(self, username, fullname, email, roles, last_login_time):
         self.membership.addMember(username, 'secret', roles, [])
         member = self.membership.getMemberById(username)
         member.setMemberProperties({
-                        'fullname': fullname,
-                        'email': email,
-                        'last_login_time': DateTime(last_login_time), })
+            'fullname': fullname,
+            'email': email,
+            'last_login_time': DateTime(last_login_time), })
 
     def test_ploneChangePasswordPostOnly(self):
         self.login(TEST_USER_NAME)
diff --git a/Products/CMFPlone/tests/testCookieAuth.py b/Products/CMFPlone/tests/testCookieAuth.py
index b62eab5..3f70348 100644
--- a/Products/CMFPlone/tests/testCookieAuth.py
+++ b/Products/CMFPlone/tests/testCookieAuth.py
@@ -36,7 +36,8 @@ def testInsufficientPrivileges(self):
 
     def testSetSessionCookie(self):
         # The __ac cookie should be set for the session only
-        form = {'__ac_name': TEST_USER_NAME, '__ac_password': TEST_USER_PASSWORD}
+        form = {'__ac_name': TEST_USER_NAME,
+                '__ac_password': TEST_USER_PASSWORD}
 
         response = self.publish(self.portal_path + '/logged_in',
                                 env={'QUERY_STRING': urlencode(form)})
diff --git a/Products/CMFPlone/tests/testDateComponentsSupport.py b/Products/CMFPlone/tests/testDateComponentsSupport.py
index 237e350..eca12bc 100644
--- a/Products/CMFPlone/tests/testDateComponentsSupport.py
+++ b/Products/CMFPlone/tests/testDateComponentsSupport.py
@@ -17,15 +17,17 @@ def afterSetUp(self):
 
     def testElements(self):
         self.assertEqual(sortTuple(self.d.keys()),
-                ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
 
     def testYears(self):
         this_year = DateTime().year()
         from plone.registry.interfaces import IRegistry
         from zope.component import getUtility
         registry = getUtility(IRegistry)
-        min_year = registry.get('Products.Archetypes.calendar_starting_year', 1999)
-        max_year = registry.get('Products.Archetypes.calendar_future_years_available', 5) + this_year
+        min_year = registry.get(
+            'Products.Archetypes.calendar_starting_year', 1999)
+        max_year = registry.get(
+            'Products.Archetypes.calendar_future_years_available', 5) + this_year
 
         data = [
             {'selected': None, 'id': '--', 'value': '0000'}
@@ -173,15 +175,17 @@ def afterSetUp(self):
 
     def testElements(self):
         self.assertEqual(sortTuple(self.d.keys()),
-                ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
 
     def testYears(self):
         this_year = DateTime().year()
         from plone.registry.interfaces import IRegistry
         from zope.component import getUtility
         registry = getUtility(IRegistry)
-        min_year = registry.get('Products.Archetypes.calendar_starting_year', 1999)
-        max_year = registry.get('Products.Archetypes.calendar_future_years_available', 5) + this_year
+        min_year = registry.get(
+            'Products.Archetypes.calendar_starting_year', 1999)
+        max_year = registry.get(
+            'Products.Archetypes.calendar_future_years_available', 5) + this_year
 
         data = [
             {'selected': None, 'id': '--', 'value': '0000'}
@@ -325,7 +329,7 @@ def afterSetUp(self):
 
     def testElements(self):
         self.assertEqual(sortTuple(self.d.keys()),
-                ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
 
     def testHours(self):
         data = [
@@ -381,7 +385,7 @@ def afterSetUp(self):
 
     def testElements(self):
         self.assertEqual(sortTuple(self.d.keys()),
-                ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
 
     def testHours(self):
         data = [
diff --git a/Products/CMFPlone/tests/testDateTimeIntegration.py b/Products/CMFPlone/tests/testDateTimeIntegration.py
index 1644550..46974d7 100644
--- a/Products/CMFPlone/tests/testDateTimeIntegration.py
+++ b/Products/CMFPlone/tests/testDateTimeIntegration.py
@@ -22,7 +22,7 @@ def testModificationDate(self):
         modified = obj.ModificationDate()   # the string representation...
         modified = DateTime(modified)       # is usually parsed again in Plone
         self.assertTrue(int(before) <= int(modified) <= int(after),
-            (before, modified, after))
+                        (before, modified, after))
 
     def testCreationDate(self):
         before = DateTime()
@@ -31,7 +31,7 @@ def testCreationDate(self):
         creation = obj.CreationDate()       # the string representation...
         creation = DateTime(creation)       # is usually parsed again in Plone
         self.assertTrue(int(before) <= int(creation) <= int(after),
-            (before, creation, after))
+                        (before, creation, after))
 
     def testEffectiveDate(self):
         obj = self.folder
diff --git a/Products/CMFPlone/tests/testEmailLogin.py b/Products/CMFPlone/tests/testEmailLogin.py
index 72f6ecc..b603237 100644
--- a/Products/CMFPlone/tests/testEmailLogin.py
+++ b/Products/CMFPlone/tests/testEmailLogin.py
@@ -56,7 +56,7 @@ def testNormalMemberIdsAllowed(self):
         # PLIP9214: the next test actually passes with the original
         # pattern but fails with the new one as email addresses cannot
         # end in a number:
-        #self.assertTrue(pattern.match('maurits76'))
+        # self.assertTrue(pattern.match('maurits76'))
         self.assertTrue(pattern.match('MAURITS'))
 
     def testEmailMemberIdsAllowed(self):
diff --git a/Products/CMFPlone/tests/testExternalEditorEnabled.py b/Products/CMFPlone/tests/testExternalEditorEnabled.py
index d93ef40..834d94c 100644
--- a/Products/CMFPlone/tests/testExternalEditorEnabled.py
+++ b/Products/CMFPlone/tests/testExternalEditorEnabled.py
@@ -16,15 +16,15 @@ def afterSetUp(self):
         member.setMemberProperties({'ext_editor': 1})
 
         self.lockbody = ('<?xml version="1.0" encoding="utf-8"?>\n'
-                '<d:lockinfo xmlns:d="DAV:">\n'
-                '  <d:lockscope><d:exclusive/></d:lockscope>\n'
-                '  <d:locktype><d:write/></d:locktype>\n'
-                '  <d:depth>infinity</d:depth>\n'
-                '  <d:owner>\n'
-                '  <d:href>Zope External Editor</d:href>\n'
-                '  </d:owner>\n'
-                '</d:lockinfo>'
-                )
+                         '<d:lockinfo xmlns:d="DAV:">\n'
+                         '  <d:lockscope><d:exclusive/></d:lockscope>\n'
+                         '  <d:locktype><d:write/></d:locktype>\n'
+                         '  <d:depth>infinity</d:depth>\n'
+                         '  <d:owner>\n'
+                         '  <d:href>Zope External Editor</d:href>\n'
+                         '  </d:owner>\n'
+                         '</d:lockinfo>'
+                         )
 
     def testFailForAnonymous(self):
         self.assertTrue(self.doc.externalEditorEnabled())
diff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py
index 89b7855..b8b81aa 100644
--- a/Products/CMFPlone/tests/testInterfaces.py
+++ b/Products/CMFPlone/tests/testInterfaces.py
@@ -72,8 +72,8 @@ def interfaceImplementedByInstanceOf(self, klass, interface):
 
         # is the class really implemented by the given interface?
         self.assertTrue(interface.implementedBy(klass),
-            'The class %s does not implement %s' % (dottedName(klass),
-                                                    dottedName(interface)))
+                        'The class %s does not implement %s' % (dottedName(klass),
+                                                                dottedName(interface)))
         # verify if the implementation is correct
         try:
             verifyClass(interface, klass)
@@ -91,8 +91,8 @@ def interfaceImplementedBy(self, instance, interface):
 
         # is the class really implemented by the given interface?
         self.assertTrue(interface.providedBy(instance),
-            'The instance of %s does not implement %s'
-                % (dottedName(instance), dottedName(interface)))
+                        'The instance of %s does not implement %s'
+                        % (dottedName(instance), dottedName(interface)))
         # verify if the implementation is correct
         try:
             verifyObject(interface, instance)
@@ -101,7 +101,7 @@ def interfaceImplementedBy(self, instance, interface):
                 BrokenMethodImplementation), errmsg:
             self.fail(
                 'The instance of %s does not implement %s correctly: \n%s'
-                    % (dottedName(instance), dottedName(interface), errmsg))
+                % (dottedName(instance), dottedName(interface), errmsg))
 
     def getImplementsOfInstanceOf(self, klass):
         """ returns the interfaces implemented by the klass (flat)"""
@@ -131,7 +131,7 @@ def doesImplementBy(self, instance, interfaces):
             self.assertTrue(
                 interface in impl,
                 'The instance of %s does not implement %s'
-                    % (dottedName(instance), dottedName(interface)))
+                % (dottedName(instance), dottedName(interface)))
 
     def _testStuff(self):
         """ test self.klass and self.instance """
@@ -178,8 +178,8 @@ def interfaceImplementedBy(self, klass, interface):
 
         # is the class really implemented by the given interface?
         self.assertTrue(interface.implementedBy(klass),
-            'The class %s does not implement %s' % (dottedName(klass),
-                                                    dottedName(interface)))
+                        'The class %s does not implement %s' % (dottedName(klass),
+                                                                dottedName(interface)))
         # verify if the implementation is correct
         try:
             verifyClass(interface, klass)
@@ -197,8 +197,8 @@ def interfaceProvidedBy(self, instance, interface):
 
         # is the class really implemented by the given interface?
         self.assertTrue(interface.providedBy(instance),
-            'The instance of %s does not provide %s' % (dottedName(instance),
-                                                        dottedName(interface)))
+                        'The instance of %s does not provide %s' % (dottedName(instance),
+                                                                    dottedName(interface)))
         # verify if the implementation is correct
         try:
             verifyObject(interface, instance)
@@ -233,7 +233,7 @@ def doesProvidedBy(self, instance, interfaces):
             self.assertTrue(
                 interface in impl,
                 'The instance of %s does not provide %s'
-                    % (dottedName(instance), dottedName(interface)))
+                % (dottedName(instance), dottedName(interface)))
 
     def _testStuff(self):
         """ test self.klass and self.instance """
diff --git a/Products/CMFPlone/tests/testLoggedIn.py b/Products/CMFPlone/tests/testLoggedIn.py
index 4c8a3c0..6339b67 100644
--- a/Products/CMFPlone/tests/testLoggedIn.py
+++ b/Products/CMFPlone/tests/testLoggedIn.py
@@ -54,7 +54,7 @@ def testInitialLoginTimeDoesChange(self):
         # login_time did change
         member = self.membership.getAuthenticatedMember()
         self.assertTrue(
-			DateTime(member.getProperty('login_time')) > login_time)
+            DateTime(member.getProperty('login_time')) > login_time)
 
     def testInitialLoginTimeWithString(self):
         member = self.membership.getAuthenticatedMember()
diff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py
index dd627fe..b8faffe 100644
--- a/Products/CMFPlone/tests/testMigrationTool.py
+++ b/Products/CMFPlone/tests/testMigrationTool.py
@@ -17,15 +17,15 @@ def testMigrationFinished(self):
 
     def testMigrationNeedsUpgrading(self):
         self.assertFalse(self.migration.needUpgrading(),
-                    'Migration needs upgrading')
+                         'Migration needs upgrading')
 
     def testMigrationNeedsUpdateRole(self):
         self.assertFalse(self.migration.needUpdateRole(),
-                    'Migration needs role update')
+                         'Migration needs role update')
 
     def testMigrationNeedsRecatalog(self):
         self.assertFalse(self.migration.needRecatalog(),
-                    'Migration needs recataloging')
+                         'Migration needs recataloging')
 
     def testListUpgradeSteps(self):
         # There should be no upgrade steps from the current version
@@ -113,7 +113,7 @@ def test_upgrade_all(self):
             discussion,
             dexterity,
             foo
-            ])
+        ])
         # Calling it should give no errors.
         addonlist.upgrade_all(self.portal)
 
diff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py
index 91c046b..21dba84 100644
--- a/Products/CMFPlone/tests/testNavTree.py
+++ b/Products/CMFPlone/tests/testNavTree.py
@@ -87,20 +87,30 @@ def testGetFromRoot(self):
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/doc3')
         self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[3]['children']), 3)
-        self.assertEqual(tree[3]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[3]['children'][1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[3]['children'][2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[3]['children'][1][
+                         'item'].getPath(), rootPath + '/folder1/doc12')
+        self.assertEqual(tree[3]['children'][2][
+                         'item'].getPath(), rootPath + '/folder1/doc13')
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 5)
-        self.assertEqual(tree[5]['children'][0]['item'].getPath(), rootPath + '/folder2/doc21')
-        self.assertEqual(tree[5]['children'][1]['item'].getPath(), rootPath + '/folder2/doc22')
-        self.assertEqual(tree[5]['children'][2]['item'].getPath(), rootPath + '/folder2/doc23')
-        self.assertEqual(tree[5]['children'][3]['item'].getPath(), rootPath + '/folder2/file21')
-        self.assertEqual(tree[5]['children'][4]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[5]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/doc21')
+        self.assertEqual(tree[5]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/doc22')
+        self.assertEqual(tree[5]['children'][2][
+                         'item'].getPath(), rootPath + '/folder2/doc23')
+        self.assertEqual(tree[5]['children'][3][
+                         'item'].getPath(), rootPath + '/folder2/file21')
+        self.assertEqual(tree[5]['children'][4][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
         self.assertEqual(len(tree[5]['children'][4]['children']), 2)
-        self.assertEqual(tree[5]['children'][4]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21/doc211')
-        self.assertEqual(tree[5]['children'][4]['children'][1]['item'].getPath(), rootPath + '/folder2/folder21/doc212')
+        self.assertEqual(tree[5]['children'][4]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc211')
+        self.assertEqual(tree[5]['children'][4]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc212')
 
     def testGetFromRootWithSpecifiedRoot(self):
         rootPath = '/'.join(self.portal.getPhysicalPath())
@@ -108,12 +118,16 @@ def testGetFromRootWithSpecifiedRoot(self):
         strategy.rootPath = rootPath + '/folder1'
         tree = buildFolderTree(self.portal, strategy=strategy)['children']
         self.assertEqual(len(tree), 3)
-        self.assertEqual(tree[0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[0]['item'].getPath(),
+                         rootPath + '/folder1/doc11')
+        self.assertEqual(tree[1]['item'].getPath(),
+                         rootPath + '/folder1/doc12')
+        self.assertEqual(tree[2]['item'].getPath(),
+                         rootPath + '/folder1/doc13')
 
     def testGetFromRootWithNodeFilter(self):
         class Strategy(NavtreeStrategyBase):
+
             def nodeFilter(self, node):
                 return ('doc' not in node['item'].getId)
         tree = buildFolderTree(self.portal, strategy=Strategy())['children']
@@ -124,12 +138,15 @@ def nodeFilter(self, node):
         self.assertEqual(tree[1]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[2]['children']), 2)
-        self.assertEqual(tree[2]['children'][0]['item'].getPath(), rootPath + '/folder2/file21')
-        self.assertEqual(tree[2]['children'][1]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[2]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/file21')
+        self.assertEqual(tree[2]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
         self.assertEqual(len(tree[2]['children'][1]['children']), 0)
 
     def testGetFromRootWithNodeFilterOnFolder(self):
         class Strategy(NavtreeStrategyBase):
+
             def nodeFilter(self, node):
                 return ('folder' not in node['item'].getId)
         tree = buildFolderTree(self.portal, strategy=Strategy())['children']
@@ -142,6 +159,7 @@ def nodeFilter(self, node):
 
     def testGetFromRootWithSubtreeFilter(self):
         class Strategy(NavtreeStrategyBase):
+
             def subtreeFilter(self, node):
                 return ('folder2' != node['item'].getId)
         tree = buildFolderTree(self.portal, strategy=Strategy())['children']
@@ -152,9 +170,12 @@ def subtreeFilter(self, node):
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/doc3')
         self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[3]['children']), 3)
-        self.assertEqual(tree[3]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[3]['children'][1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[3]['children'][2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[3]['children'][1][
+                         'item'].getPath(), rootPath + '/folder1/doc12')
+        self.assertEqual(tree[3]['children'][2][
+                         'item'].getPath(), rootPath + '/folder1/doc13')
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 0)
@@ -187,7 +208,8 @@ def testShowAllParentsOverridesNonFolderishObjectNotExpanded(self):
         rootPath = '/'.join(self.portal.getPhysicalPath())
         self.assertEqual(tree[-1]['item'].getPath(), rootPath + '/ns_folder')
         self.assertEqual(len(tree[-1]['children']), 1)
-        self.assertEqual(tree[-1]['children'][0]['item'].getPath(), rootPath + '/ns_folder/doc')
+        self.assertEqual(tree[-1]['children'][0]
+                         ['item'].getPath(), rootPath + '/ns_folder/doc')
 
     def testGetWithRootContext(self):
         tree = buildFolderTree(self.portal, obj=self.portal)['children']
@@ -198,40 +220,58 @@ def testGetWithRootContext(self):
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/doc3')
         self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[3]['children']), 3)
-        self.assertEqual(tree[3]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[3]['children'][1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[3]['children'][2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[3]['children'][1][
+                         'item'].getPath(), rootPath + '/folder1/doc12')
+        self.assertEqual(tree[3]['children'][2][
+                         'item'].getPath(), rootPath + '/folder1/doc13')
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 5)
-        self.assertEqual(tree[5]['children'][0]['item'].getPath(), rootPath + '/folder2/doc21')
-        self.assertEqual(tree[5]['children'][1]['item'].getPath(), rootPath + '/folder2/doc22')
-        self.assertEqual(tree[5]['children'][2]['item'].getPath(), rootPath + '/folder2/doc23')
-        self.assertEqual(tree[5]['children'][3]['item'].getPath(), rootPath + '/folder2/file21')
-        self.assertEqual(tree[5]['children'][4]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[5]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/doc21')
+        self.assertEqual(tree[5]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/doc22')
+        self.assertEqual(tree[5]['children'][2][
+                         'item'].getPath(), rootPath + '/folder2/doc23')
+        self.assertEqual(tree[5]['children'][3][
+                         'item'].getPath(), rootPath + '/folder2/file21')
+        self.assertEqual(tree[5]['children'][4][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
         self.assertEqual(len(tree[5]['children'][4]['children']), 2)
-        self.assertEqual(tree[5]['children'][4]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21/doc211')
-        self.assertEqual(tree[5]['children'][4]['children'][1]['item'].getPath(), rootPath + '/folder2/folder21/doc212')
+        self.assertEqual(tree[5]['children'][4]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc211')
+        self.assertEqual(tree[5]['children'][4]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc212')
 
     def testGetFromFixed(self):
         rootPath = '/'.join(self.portal.getPhysicalPath())
         query = {'path': rootPath + '/folder1'}
         tree = buildFolderTree(self.portal, query=query)['children']
         self.assertEqual(len(tree), 3)
-        self.assertEqual(tree[0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[0]['item'].getPath(),
+                         rootPath + '/folder1/doc11')
+        self.assertEqual(tree[1]['item'].getPath(),
+                         rootPath + '/folder1/doc12')
+        self.assertEqual(tree[2]['item'].getPath(),
+                         rootPath + '/folder1/doc13')
 
     def testGetFromFixedAndDepth(self):
         rootPath = '/'.join(self.portal.getPhysicalPath())
         query = {'path': rootPath + '/folder2', 'depth': 1}
         tree = buildFolderTree(self.portal, query=query)['children']
         self.assertEqual(len(tree), 5)
-        self.assertEqual(tree[0]['item'].getPath(), rootPath + '/folder2/doc21')
-        self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder2/doc22')
-        self.assertEqual(tree[2]['item'].getPath(), rootPath + '/folder2/doc23')
-        self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder2/file21')
-        self.assertEqual(tree[4]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[0]['item'].getPath(),
+                         rootPath + '/folder2/doc21')
+        self.assertEqual(tree[1]['item'].getPath(),
+                         rootPath + '/folder2/doc22')
+        self.assertEqual(tree[2]['item'].getPath(),
+                         rootPath + '/folder2/doc23')
+        self.assertEqual(tree[3]['item'].getPath(),
+                         rootPath + '/folder2/file21')
+        self.assertEqual(tree[4]['item'].getPath(),
+                         rootPath + '/folder2/folder21')
 
     def testGetFromRootWithCurrent(self):
         context = self.portal.folder2.doc21
@@ -263,18 +303,26 @@ def testGetFromRootIgnoresDefaultPages(self):
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/doc3')
         self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[3]['children']), 2)
-        self.assertEqual(tree[3]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[3]['children'][1]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[3]['children'][1][
+                         'item'].getPath(), rootPath + '/folder1/doc13')
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 4)
-        self.assertEqual(tree[5]['children'][0]['item'].getPath(), rootPath + '/folder2/doc22')
-        self.assertEqual(tree[5]['children'][1]['item'].getPath(), rootPath + '/folder2/doc23')
-        self.assertEqual(tree[5]['children'][2]['item'].getPath(), rootPath + '/folder2/file21')
-        self.assertEqual(tree[5]['children'][3]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[5]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/doc22')
+        self.assertEqual(tree[5]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/doc23')
+        self.assertEqual(tree[5]['children'][2][
+                         'item'].getPath(), rootPath + '/folder2/file21')
+        self.assertEqual(tree[5]['children'][3][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
         self.assertEqual(len(tree[5]['children'][3]['children']), 2)
-        self.assertEqual(tree[5]['children'][3]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21/doc211')
-        self.assertEqual(tree[5]['children'][3]['children'][1]['item'].getPath(), rootPath + '/folder2/folder21/doc212')
+        self.assertEqual(tree[5]['children'][3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc211')
+        self.assertEqual(tree[5]['children'][3]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc212')
 
     def testGetFromRootWithCurrentIsDefaultPage(self):
         self.portal.folder2.setDefaultPage('doc21')
@@ -302,6 +350,7 @@ def testGetFromRootWithCustomQuery(self):
 
     def testGetFromRootWithDecoratorFactory(self):
         class Strategy(NavtreeStrategyBase):
+
             def decoratorFactory(self, node):
                 node['foo'] = True
                 return node
@@ -319,10 +368,12 @@ def testShowAllParents(self):
         self.assertEqual(len(tree), 2)
         self.assertEqual(tree[0]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[0]['children']), 1)
-        self.assertEqual(tree[0]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[0]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
         self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[1]['children']), 1)
-        self.assertEqual(tree[1]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[1]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
 
     def testShowAllParentsWithRestrictedParent(self):
         strategy = NavtreeStrategyBase()
@@ -338,10 +389,12 @@ def testShowAllParentsWithRestrictedParent(self):
         self.assertEqual(len(tree), 2)
         self.assertEqual(tree[0]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[0]['children']), 1)
-        self.assertEqual(tree[0]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[0]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
         self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[1]['children']), 1)
-        self.assertEqual(tree[1]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[1]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
 
     def testShowAllParentsWithParentNotInCatalog(self):
         strategy = NavtreeStrategyBase()
@@ -370,7 +423,8 @@ def testDontShowAllParents(self):
         self.assertEqual(len(tree[0]['children']), 0)
         self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[1]['children']), 1)
-        self.assertEqual(tree[1]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[1]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
 
     def testGetFromRootWithCurrentNavtree(self):
         context = self.portal.folder1.doc11
@@ -384,9 +438,12 @@ def testGetFromRootWithCurrentNavtree(self):
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/doc3')
         self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[3]['children']), 3)
-        self.assertEqual(tree[3]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[3]['children'][1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[3]['children'][2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[3]['children'][1][
+                         'item'].getPath(), rootPath + '/folder1/doc12')
+        self.assertEqual(tree[3]['children'][2][
+                         'item'].getPath(), rootPath + '/folder1/doc13')
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 0)
@@ -399,13 +456,18 @@ def testGetFromRootWithCurrentNavtreeAndStartLevel(self):
         rootPath = '/'.join(self.portal.getPhysicalPath())
         tree = buildFolderTree(self.portal, query=query)['children']
         self.assertEqual(len(tree), 3)
-        self.assertEqual(tree[0]['item'].getPath(), rootPath + '/folder1/doc11')
-        self.assertEqual(tree[1]['item'].getPath(), rootPath + '/folder1/doc12')
-        self.assertEqual(tree[2]['item'].getPath(), rootPath + '/folder1/doc13')
+        self.assertEqual(tree[0]['item'].getPath(),
+                         rootPath + '/folder1/doc11')
+        self.assertEqual(tree[1]['item'].getPath(),
+                         rootPath + '/folder1/doc12')
+        self.assertEqual(tree[2]['item'].getPath(),
+                         rootPath + '/folder1/doc13')
 
     def testGetFromRootWithCurrentNavtreePruned(self):
         context = self.portal.folder1.doc11
+
         class Strategy(NavtreeStrategyBase):
+
             def subtreeFilter(self, node):
                 return (node['item'].getId != 'folder1')
             showAllParents = True
@@ -413,14 +475,16 @@ def subtreeFilter(self, node):
         query = {'path': {'query': '/'.join(context.getPhysicalPath()),
                           'navtree': 1}}
         rootPath = '/'.join(self.portal.getPhysicalPath())
-        tree = buildFolderTree(self.portal, query=query, obj=context, strategy=Strategy())['children']
+        tree = buildFolderTree(self.portal, query=query,
+                               obj=context, strategy=Strategy())['children']
         self.assertEqual(len(tree), 6)
         self.assertEqual(tree[0]['item'].getPath(), rootPath + '/doc1')
         self.assertEqual(tree[1]['item'].getPath(), rootPath + '/doc2')
         self.assertEqual(tree[2]['item'].getPath(), rootPath + '/doc3')
         self.assertEqual(tree[3]['item'].getPath(), rootPath + '/folder1')
         self.assertEqual(len(tree[3]['children']), 1)
-        self.assertEqual(tree[3]['children'][0]['item'].getPath(), rootPath + '/folder1/doc11')
+        self.assertEqual(tree[3]['children'][0][
+                         'item'].getPath(), rootPath + '/folder1/doc11')
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 0)
@@ -429,6 +493,7 @@ def testGetFromRootWithCurrentFolderishNavtreePruned(self):
         context = self.portal.folder2.folder21
 
         class Strategy(NavtreeStrategyBase):
+
             def subtreeFilter(self, node):
                 return (node['item'].getId != 'folder2')
             showAllParents = True
@@ -436,7 +501,8 @@ def subtreeFilter(self, node):
         query = {'path': {'query': '/'.join(context.getPhysicalPath()),
                           'navtree': 1}}
         rootPath = '/'.join(self.portal.getPhysicalPath())
-        tree = buildFolderTree(self.portal, query=query, obj=context, strategy=Strategy())['children']
+        tree = buildFolderTree(self.portal, query=query,
+                               obj=context, strategy=Strategy())['children']
         self.assertEqual(len(tree), 6)
         self.assertEqual(tree[0]['item'].getPath(), rootPath + '/doc1')
         self.assertEqual(tree[1]['item'].getPath(), rootPath + '/doc2')
@@ -446,10 +512,13 @@ def subtreeFilter(self, node):
         self.assertEqual(tree[4]['item'].getPath(), rootPath + '/link1')
         self.assertEqual(tree[5]['item'].getPath(), rootPath + '/folder2')
         self.assertEqual(len(tree[5]['children']), 1)
-        self.assertEqual(tree[5]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21')
+        self.assertEqual(tree[5]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21')
         self.assertEqual(len(tree[5]['children'][0]['children']), 2)
-        self.assertEqual(tree[5]['children'][0]['children'][0]['item'].getPath(), rootPath + '/folder2/folder21/doc211')
-        self.assertEqual(tree[5]['children'][0]['children'][1]['item'].getPath(), rootPath + '/folder2/folder21/doc212')
+        self.assertEqual(tree[5]['children'][0]['children'][0][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc211')
+        self.assertEqual(tree[5]['children'][0]['children'][1][
+                         'item'].getPath(), rootPath + '/folder2/folder21/doc212')
 
     def testCurrentParent(self):
         self.loginAsPortalOwner()
@@ -470,13 +539,13 @@ def testGetNavigationRootPropertyNotSet(self):
 
     def testGetNavigationRootPropertyEmptyNoVirtualHost(self):
         self.portal.portal_properties.navtree_properties \
-                .manage_changeProperties(root='')
+            .manage_changeProperties(root='')
         root = getNavigationRoot(self.portal)
         self.assertEqual(root, '/'.join(self.portal.getPhysicalPath()))
 
     def testGetNavigationRootPropertyIsRoot(self):
         self.portal.portal_properties.navtree_properties \
-                .manage_changeProperties(root='/')
+            .manage_changeProperties(root='/')
         root = getNavigationRoot(self.portal)
         self.assertEqual(root, '/'.join(self.portal.getPhysicalPath()))
 
diff --git a/Products/CMFPlone/tests/testNavigationParent.py b/Products/CMFPlone/tests/testNavigationParent.py
index c36b9fc..4a4d8ae 100644
--- a/Products/CMFPlone/tests/testNavigationParent.py
+++ b/Products/CMFPlone/tests/testNavigationParent.py
@@ -58,26 +58,26 @@ def testNoFallThroughIndexHtmlInFolder(self):
         self.f2.invokeFactory('Document', 'index_html', title='Document 1')
         d1 = getattr(self.f2, 'index_html')
         self.assertEqual(d1.navigationParent(fallThroughDefaultPage=False),
-                            self.f2.absolute_url())
+                         self.f2.absolute_url())
 
     def testNoFallThroughDefaultPageInFolder(self):
         self.f2.invokeFactory('Document', 'd1', title='Document 1')
         d1 = getattr(self.f2, 'd1')
         self.f2.setDefaultPage('d1')
         self.assertEqual(d1.navigationParent(fallThroughDefaultPage=False),
-                            self.f2.absolute_url())
+                         self.f2.absolute_url())
 
     def testNoFallThroughFolderishIndexHtmlInFolder(self):
         self.f2.invokeFactory('Folder', 'index_html', title='Index folder')
         ih = getattr(self.f2, 'index_html')
         self.assertEqual(ih.navigationParent(fallThroughDefaultPage=False),
-                            self.f2.absolute_url())
+                         self.f2.absolute_url())
 
     def testNoFallThroughFolderishDefaultPageInFolder(self):
         self.f1.setDefaultPage('f2')
         self.assertEqual(self.f2.navigationParent(
-                            fallThroughDefaultPage=False),
-                            self.f1.absolute_url())
+            fallThroughDefaultPage=False),
+            self.f1.absolute_url())
 
     # Very special case - if you have an index_html inside an index_html...
     def testRecursiveDefaultPage(self):
@@ -116,4 +116,4 @@ def testNoParentListPermissions(self):
         self.setRoles(['Member'])
 
         self.assertTrue(lf.navigationParent(
-                checkPermissions=['List folder contents']) is None)
+            checkPermissions=['List folder contents']) is None)
diff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py
index f42ed0e..7974472 100644
--- a/Products/CMFPlone/tests/testNavigationView.py
+++ b/Products/CMFPlone/tests/testNavigationView.py
@@ -184,7 +184,7 @@ def testTopLevelWithPortalFactory(self):
         id = self.portal.generateUniqueId('Document')
         typeName = 'Document'
         newObject = self.portal.folder1.restrictedTraverse(
-                                'portal_factory/' + typeName + '/' + id)
+            'portal_factory/' + typeName + '/' + id)
         # Will raise a KeyError unless bug is fixed
         view = self.view_class(newObject, self.request)
         view.navigationTree()
diff --git a/Products/CMFPlone/tests/testNextPrevious.py b/Products/CMFPlone/tests/testNextPrevious.py
index 7c8735f..83ee28f 100644
--- a/Products/CMFPlone/tests/testNextPrevious.py
+++ b/Products/CMFPlone/tests/testNextPrevious.py
@@ -7,7 +7,7 @@ class TestNextPrevious(PloneTestCase.PloneTestCase):
     def afterSetUp(self):
         self.populateSite()
 
-    #set up a lot of content - can be reused in each (sub)test
+    # set up a lot of content - can be reused in each (sub)test
     def populateSite(self):
         self.setRoles(['Manager'])
         self.portal.invokeFactory('Document', 'doc1')
@@ -32,45 +32,46 @@ def populateSite(self):
     def testIfFolderImplementsPreviousNext(self):
         self.folder.invokeFactory('Folder', 'case')
         self.assertTrue(
-                INextPreviousProvider(self.folder.case, None) is not None)
+            INextPreviousProvider(self.folder.case, None) is not None)
 
     def testNextPreviousEnablingOnCreation(self):
         self.folder.invokeFactory('Folder', 'case')
 
-        #first the field on the atfolder direct, to get sure the field is there
+        # first the field on the atfolder direct, to get sure the field is
+        # there
         enabled = self.folder.case.getNextPreviousEnabled()
         self.assertFalse(enabled)
 
-        #secoundly we test if the adapter provides the isNextPreviousEnabled()
+        # secoundly we test if the adapter provides the isNextPreviousEnabled()
         adapter = INextPreviousProvider(self.folder.case)
         self.assertFalse(adapter.enabled)
 
     def testNextPreviousViewDisabled(self):
         view = self.portal.folder1.doc11.restrictedTraverse(
-                '@@plone_nextprevious_view', None)
+            '@@plone_nextprevious_view', None)
         self.assertFalse(view is None)
 
-        #is it enabled (default is false)
+        # is it enabled (default is false)
         self.assertFalse(view.enabled())
 
     def testNextPreviousViewEnabled(self):
-        #set the parent folder "getNextPreviousEnabled" to true
+        # set the parent folder "getNextPreviousEnabled" to true
         self.portal.folder1.setNextPreviousEnabled(True)
 
         # clear request memos
         view = self.portal.folder1.doc12.restrictedTraverse(
-                '@@plone_nextprevious_view', None)
+            '@@plone_nextprevious_view', None)
         self.assertTrue(view.enabled())
 
         # test the next method
         next = view.next()
         self.assertEqual(next['url'],
-                          self.portal.folder1.doc13.absolute_url())
+                         self.portal.folder1.doc13.absolute_url())
 
         # test the previous method
         previous = view.previous()
         self.assertEqual(previous['url'],
-                          self.portal.folder1.doc11.absolute_url())
+                         self.portal.folder1.doc11.absolute_url())
 
     def testAdapterOnPortal(self):
         view = self.portal.doc1.restrictedTraverse('@@plone_nextprevious_view',
@@ -89,24 +90,24 @@ def testNextPreviousItems(self):
 
         container = self.folder.case3
 
-        #set up the adapter for the folder
+        # set up the adapter for the folder
         adapter = INextPreviousProvider(container)
 
-        #test the next item of subDoc2
+        # test the next item of subDoc2
         next = adapter.getNextItem(self.folder.case3.subDoc2)
         self.assertEqual(next["id"], 'subDoc3')
 
-        #test that the contenttype is defined correct
+        # test that the contenttype is defined correct
         self.assertEqual(next["portal_type"], 'Document')
 
-        #test the previous item of subDoc2
+        # test the previous item of subDoc2
         previous = adapter.getPreviousItem(self.folder.case3.subDoc2)
         self.assertEqual(previous["id"], 'subDoc1')
 
-        #first item should not have a previous item
+        # first item should not have a previous item
         previous = adapter.getPreviousItem(self.folder.case3.subDoc1)
         self.assertEqual(previous, None)
 
-        #last item should not have a next item
+        # last item should not have a next item
         next = adapter.getNextItem(self.folder.case3.subDoc5)
         self.assertEqual(next, None)
diff --git a/Products/CMFPlone/tests/testPatternSettings.py b/Products/CMFPlone/tests/testPatternSettings.py
index afded69..6bcd9f2 100644
--- a/Products/CMFPlone/tests/testPatternSettings.py
+++ b/Products/CMFPlone/tests/testPatternSettings.py
@@ -11,7 +11,8 @@
 class TestTinyMCESettings(PloneTestCase.PloneTestCase):
 
     def get_conf(self):
-        adapter = PloneSettingsAdapter(self.portal, self.layer['request'], None)
+        adapter = PloneSettingsAdapter(
+            self.portal, self.layer['request'], None)
         return json.loads(adapter.tinymce()['data-pat-tinymce'])
 
     def test_atd_included(self):
diff --git a/Products/CMFPlone/tests/testPloneFolder.py b/Products/CMFPlone/tests/testPloneFolder.py
index e1abee0..648865c 100644
--- a/Products/CMFPlone/tests/testPloneFolder.py
+++ b/Products/CMFPlone/tests/testPloneFolder.py
@@ -25,7 +25,7 @@ def testGetObjectPositionRaisesError(self):
 
     def testSortOrder(self):
         self.assertEqual(self.folder.objectIds(),
-            ['sub1', 'sub2', 'sub3'])
+                         ['sub1', 'sub2', 'sub3'])
 
     def testCanViewManagementScreen(self):
         # Make sure the ZMI management screen works
diff --git a/Products/CMFPlone/tests/testPloneTestCase.py b/Products/CMFPlone/tests/testPloneTestCase.py
index 54b320c..473e14a 100644
--- a/Products/CMFPlone/tests/testPloneTestCase.py
+++ b/Products/CMFPlone/tests/testPloneTestCase.py
@@ -20,8 +20,8 @@ def testPublishDocument(self):
         self.setRoles(['Reviewer'])
         self.workflow.doActionFor(self.folder.new, 'publish')
         self.assertEqual(
-                self.workflow.getInfoFor(self.folder.new, 'review_state'),
-                'published')
+            self.workflow.getInfoFor(self.folder.new, 'review_state'),
+            'published')
         self.assertTrue(self.catalog(id='new', review_state='published'))
 
     def testRetractDocument(self):
@@ -29,13 +29,13 @@ def testRetractDocument(self):
         self.setRoles(['Reviewer'])
         self.workflow.doActionFor(self.folder.new, 'publish')
         self.assertEqual(
-                self.workflow.getInfoFor(self.folder.new, 'review_state'),
-                'published')
+            self.workflow.getInfoFor(self.folder.new, 'review_state'),
+            'published')
         self.setRoles(['Member'])
         self.workflow.doActionFor(self.folder.new, 'retract')
         self.assertEqual(
-                self.workflow.getInfoFor(self.folder.new, 'review_state'),
-                'visible')
+            self.workflow.getInfoFor(self.folder.new, 'review_state'),
+            'visible')
 
     def testEditDocument(self):
         self.folder.invokeFactory('Document', id='new')
diff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py
index c49d3e7..0b235be 100644
--- a/Products/CMFPlone/tests/testPloneTool.py
+++ b/Products/CMFPlone/tests/testPloneTool.py
@@ -15,6 +15,7 @@
 
 
 class DummyTitle(Implicit):
+
     def Title(self):
         # Should just return 'portal_catalog'
         tool = getToolByName(self, 'portal_catalog')
@@ -49,7 +50,8 @@ def testvalidateSingleEmailAddress(self):
             'user@example.org\n\rfoo',
             'user@example.org\r\nfoo',
             'user@example.org\r\rfoo',
-            'user@example.org\nfoo@example.org',  # only single address allowed, even if given one per line
+            # only single address allowed, even if given one per line
+            'user@example.org\nfoo@example.org',
             'user@example.org\nBcc: user@example.org',
             'user@example.org\nCc: user@example.org',
             'user@example.org\nSubject: Spam',
@@ -178,6 +180,7 @@ def testGetUserFriendlyTypes(self):
     def testReindexOnReorder(self):
         gsm = getGlobalSiteManager()
         reordered_parents = []
+
         def my_handler(obj, event):
             reordered_parents.append(obj)
         gsm.registerHandler(my_handler, (Interface, IReorderedEvent))
@@ -188,6 +191,7 @@ def my_handler(obj, event):
             gsm.unregisterHandler(my_handler, (Interface, IReorderedEvent))
         self.assertEqual(["fake_context"], reordered_parents)
 
+
 class TestOwnershipStuff(PloneTestCase.PloneTestCase):
 
     def afterSetUp(self):
@@ -217,7 +221,7 @@ def testChangeOwnershipOf(self):
 
         self.utils.changeOwnershipOf(self.folder1, 'new_owner')
         self.assertEqual(self.folder1.getOwnerTuple()[0], [portal_name,
-                         'acl_users'])
+                                                           'acl_users'])
         self.assertEqual(self.folder1.getOwnerTuple()[1], 'new_owner')
         self.assertList(self.folder1.get_local_roles_for_userid('new_owner'),
                         ['Owner'])
@@ -284,10 +288,10 @@ def testGetInheritedLocalRoles(self):
         self.folder1.manage_addLocalRoles('new_owner', ('Reviewer',))
         # Test Normal role acquisition is returned
         filtered_roles = [r for r in gILR(self.folder2)
-                             if r[0] == 'new_owner'][0]
+                          if r[0] == 'new_owner'][0]
         self.assertList(filtered_roles[1], ['Reviewer'])
         filtered_roles = [r for r in gILR(self.folder3)
-                             if r[0] == 'new_owner'][0]
+                          if r[0] == 'new_owner'][0]
         self.assertList(filtered_roles[1], ['Reviewer'])
 
     def testGetInheritedLocalRolesMultiLevel(self):
@@ -299,12 +303,12 @@ def testGetInheritedLocalRolesMultiLevel(self):
 
         # folder2 should have only the inherited role
         filtered_roles = [r for r in gILR(self.folder2)
-                             if r[0] == 'new_owner'][0]
+                          if r[0] == 'new_owner'][0]
         self.assertList(filtered_roles[1], ['Reviewer'])
 
         # folder3 should have roles inherited from parent and grand-parent
         filtered_roles = [r for r in gILR(self.folder3)
-                             if r[0] == 'new_owner'][0]
+                          if r[0] == 'new_owner'][0]
         self.assertList(filtered_roles[1], ['Owner', 'Reviewer'])
 
 
@@ -401,12 +405,12 @@ def testClearRights(self):
     def testSetEffectiveDate(self):
         self.assertEqual(self.doc.EffectiveDate(), 'None')
         self.utils.editMetadata(self.doc, effective_date='2001-01-01')
-        self.assertTrue(self.doc.effective_date.ISO8601() \
+        self.assertTrue(self.doc.effective_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
 
     def testClearEffectiveDate(self):
         self.utils.editMetadata(self.doc, effective_date='2001-01-01')
-        self.assertTrue(self.doc.effective_date.ISO8601() \
+        self.assertTrue(self.doc.effective_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
         self.utils.editMetadata(self.doc, effective_date='None')
         self.assertEqual(self.doc.EffectiveDate(), 'None')
@@ -415,12 +419,12 @@ def testClearEffectiveDate(self):
     def testSetExpirationDate(self):
         self.assertEqual(self.doc.ExpirationDate(), 'None')
         self.utils.editMetadata(self.doc, expiration_date='2001-01-01')
-        self.assertTrue(self.doc.expiration_date.ISO8601() \
+        self.assertTrue(self.doc.expiration_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
 
     def testClearExpirationDate(self):
         self.utils.editMetadata(self.doc, expiration_date='2001-01-01')
-        self.assertTrue(self.doc.expiration_date.ISO8601() \
+        self.assertTrue(self.doc.expiration_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
         self.utils.editMetadata(self.doc, expiration_date='None')
         self.assertEqual(self.doc.ExpirationDate(), 'None')
@@ -474,7 +478,7 @@ def afterSetUp(self):
                                 format='text/html',
                                 language='de',
                                 rights='Copyleft',
-                               )
+                                )
 
     def testEditTitleOnly(self):
         self.utils.editMetadata(self.doc, title='Oh Happy Day')
@@ -483,9 +487,9 @@ def testEditTitleOnly(self):
         self.assertEqual(self.doc.Subject(), ('Bar',))
         self.assertEqual(self.doc.Description(), 'Baz')
         self.assertEqual(self.doc.Contributors(), ('Fred',))
-        self.assertTrue(self.doc.effective_date.ISO8601() \
+        self.assertTrue(self.doc.effective_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
-        self.assertTrue(self.doc.expiration_date.ISO8601() \
+        self.assertTrue(self.doc.expiration_date.ISO8601()
                             .startswith('2003-01-01T00:00:00'))
         self.assertEqual(self.doc.Format(), 'text/html')
         self.assertEqual(self.doc.Language(), 'de')
@@ -498,9 +502,9 @@ def testEditSubjectOnly(self):
         self.assertEqual(self.doc.Title(), 'Foo')
         self.assertEqual(self.doc.Description(), 'Baz')
         self.assertEqual(self.doc.Contributors(), ('Fred',))
-        self.assertTrue(self.doc.effective_date.ISO8601() \
+        self.assertTrue(self.doc.effective_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
-        self.assertTrue(self.doc.expiration_date.ISO8601() \
+        self.assertTrue(self.doc.expiration_date.ISO8601()
                             .startswith('2003-01-01T00:00:00'))
         self.assertEqual(self.doc.Format(), 'text/html')
         self.assertEqual(self.doc.Language(), 'de')
@@ -508,14 +512,14 @@ def testEditSubjectOnly(self):
 
     def testEditEffectiveDateOnly(self):
         self.utils.editMetadata(self.doc, effective_date='2001-12-31')
-        self.assertTrue(self.doc.effective_date.ISO8601() \
+        self.assertTrue(self.doc.effective_date.ISO8601()
                             .startswith('2001-12-31T00:00:00'))
         # Other elements must not change
         self.assertEqual(self.doc.Title(), 'Foo')
         self.assertEqual(self.doc.Subject(), ('Bar',))
         self.assertEqual(self.doc.Description(), 'Baz')
         self.assertEqual(self.doc.Contributors(), ('Fred',))
-        self.assertTrue(self.doc.expiration_date.ISO8601() \
+        self.assertTrue(self.doc.expiration_date.ISO8601()
                             .startswith('2003-01-01T00:00:00'))
         self.assertEqual(self.doc.Format(), 'text/html')
         self.assertEqual(self.doc.Language(), 'de')
@@ -529,9 +533,9 @@ def testEditLanguageOnly(self):
         self.assertEqual(self.doc.Subject(), ('Bar',))
         self.assertEqual(self.doc.Description(), 'Baz')
         self.assertEqual(self.doc.Contributors(), ('Fred',))
-        self.assertTrue(self.doc.effective_date.ISO8601() \
+        self.assertTrue(self.doc.effective_date.ISO8601()
                             .startswith('2001-01-01T00:00:00'))
-        self.assertTrue(self.doc.expiration_date.ISO8601() \
+        self.assertTrue(self.doc.expiration_date.ISO8601()
                             .startswith('2003-01-01T00:00:00'))
         self.assertEqual(self.doc.Format(), 'text/html')
         self.assertEqual(self.doc.Rights(), 'Copyleft')
@@ -610,7 +614,7 @@ def test_pretty_title_or_id_when_autogenerated(self):
         self.assertEqual(self.utils.pretty_title_or_id(self.folder),
                          self.utils.getEmptyTitle())
         self.assertEqual(self.utils.pretty_title_or_id(self.folder, 'Marker'),
-                                'Marker')
+                         'Marker')
 
     def test_pretty_title_or_id_works_with_method_that_needs_context(self):
         self.setRoles(['Manager', 'Member'])
@@ -630,7 +634,7 @@ def test_pretty_title_or_id_on_catalog_brain(self):
         results = cat(Subject='foobar')
         self.assertEqual(len(results), 1)
         self.assertEqual(self.utils.pretty_title_or_id(results[0]),
-                                                        'My pretty title')
+                         'My pretty title')
 
     def test_pretty_title_or_id_on_catalog_brain_returns_id(self):
         cat = self.portal.portal_catalog
@@ -639,7 +643,7 @@ def test_pretty_title_or_id_on_catalog_brain_returns_id(self):
         results = cat(Subject='foobar')
         self.assertEqual(len(results), 1)
         self.assertEqual(self.utils.pretty_title_or_id(results[0]),
-                                                        self.folder.getId())
+                         self.folder.getId())
 
     def test_pretty_title_or_id_on_catalog_brain_autogenerated(self):
         cat = self.portal.portal_catalog
@@ -649,7 +653,7 @@ def test_pretty_title_or_id_on_catalog_brain_autogenerated(self):
         results = cat(Subject='foobar')
         self.assertEqual(len(results), 1)
         self.assertEqual(self.utils.pretty_title_or_id(results[0], 'Marker'),
-                                                        'Marker')
+                         'Marker')
 
     def test_pretty_title_or_id_on_catalog_brain_no_title(self):
         cat = self.portal.portal_catalog
@@ -664,7 +668,7 @@ def test_pretty_title_or_id_on_catalog_brain_no_title(self):
         # failure
         self.portal.title = 'This is not the title you are looking for'
         self.assertEqual(self.utils.pretty_title_or_id(results[0]),
-                                                        self.folder.getId())
+                         self.folder.getId())
 
     def testGetMethodAliases(self):
         fti = self.folder.getTypeInfo()
diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py
index c8c5d62..3d16a5c 100644
--- a/Products/CMFPlone/tests/testPortalCreation.py
+++ b/Products/CMFPlone/tests/testPortalCreation.py
@@ -26,9 +26,9 @@
 from Products.GenericSetup.browser.manage import ImportStepsView
 
 from Products.StandardCacheManagers.AcceleratedHTTPCacheManager import \
-     AcceleratedHTTPCacheManager
+    AcceleratedHTTPCacheManager
 from Products.StandardCacheManagers.RAMCacheManager import \
-     RAMCacheManager
+    RAMCacheManager
 
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
@@ -181,12 +181,18 @@ def testFormToolTipsProperty(self):
 
     def testNavTreeProperties(self):
         # navtree_properties should contain the new properties
-        self.assertFalse(self.properties.navtree_properties.hasProperty('parentMetaTypesNotToQuery'))
-        self.assertFalse(self.properties.navtree_properties.hasProperty('sitemapDepth'))
-        self.assertFalse(self.properties.navtree_properties.hasProperty('showAllParents'))
-        self.assertFalse(self.properties.navtree_properties.hasProperty('metaTypesNotToList'))
-        self.assertFalse(self.properties.navtree_properties.hasProperty('sortAttribute'))
-        self.assertFalse(self.properties.navtree_properties.hasProperty('sortOrder'))
+        self.assertFalse(self.properties.navtree_properties.hasProperty(
+            'parentMetaTypesNotToQuery'))
+        self.assertFalse(
+            self.properties.navtree_properties.hasProperty('sitemapDepth'))
+        self.assertFalse(
+            self.properties.navtree_properties.hasProperty('showAllParents'))
+        self.assertFalse(
+            self.properties.navtree_properties.hasProperty('metaTypesNotToList'))
+        self.assertFalse(
+            self.properties.navtree_properties.hasProperty('sortAttribute'))
+        self.assertFalse(
+            self.properties.navtree_properties.hasProperty('sortOrder'))
 
         registry = getUtility(IRegistry)
         self.assertTrue('plone.workflow_states_to_show' in registry)
@@ -240,7 +246,7 @@ def testNoNewsAction(self):
     def testNewsTopicIsIndexed(self):
         # News (smart) folder should be cataloged
         res = self.catalog(
-                path={'query': '/plone/news/aggregator', 'depth': 0})
+            path={'query': '/plone/news/aggregator', 'depth': 0})
         self.assertEqual(len(res), 1)
         self.assertEqual(res[0].getId, 'aggregator')
         self.assertEqual(res[0].Title, 'News')
@@ -249,7 +255,7 @@ def testNewsTopicIsIndexed(self):
     def testEventsTopicIsIndexed(self):
         # Events (smart) folder should be cataloged
         res = self.catalog(
-                path={'query': '/plone/events/aggregator', 'depth': 0})
+            path={'query': '/plone/events/aggregator', 'depth': 0})
         self.assertEqual(len(res), 1)
         self.assertEqual(res[0].getId, 'aggregator')
         self.assertEqual(res[0].Title, 'Events')
@@ -258,7 +264,7 @@ def testEventsTopicIsIndexed(self):
     def testNewsFolderIsIndexed(self):
         # News folder should be cataloged
         res = self.catalog(
-                path={'query': '/plone/news', 'depth': 0})
+            path={'query': '/plone/news', 'depth': 0})
         self.assertEqual(len(res), 1)
         self.assertEqual(res[0].getId, 'news')
         self.assertEqual(res[0].Title, 'News')
@@ -267,7 +273,7 @@ def testNewsFolderIsIndexed(self):
     def testEventsFolderIsIndexed(self):
         # Events folder should be cataloged
         res = self.catalog(
-                path={'query': '/plone/events', 'depth': 0})
+            path={'query': '/plone/events', 'depth': 0})
         self.assertEqual(len(res), 1)
         self.assertEqual(res[0].getId, 'events')
         self.assertEqual(res[0].Title, 'Events')
@@ -326,9 +332,9 @@ def testEventsCollection(self):
                          'o': 'plone.app.querystring.operation.selection.is',
                          'v': ['published']} in query)
         self.assertTrue({
-                'i': 'start',
-                'o': 'plone.app.querystring.operation.date.afterToday',
-                'v': ''} in query)
+            'i': 'start',
+            'o': 'plone.app.querystring.operation.date.afterToday',
+            'v': ''} in query)
         self.assertEqual(collection.checkCreationFlag(), False)
 
     def testObjectButtonActions(self):
@@ -409,7 +415,7 @@ def testFolderlistingAction(self):
         # that the layout template will be resolved
         # (see PloneTool.browserDefault)
         self.assertEqual(
-            self.types['Folder'].getActionObject('folder/folderlisting') \
+            self.types['Folder'].getActionObject('folder/folderlisting')
                 .getActionExpression(),
             'string:${folder_url}/view')
 
@@ -440,11 +446,11 @@ def testPortalFTIIsDynamicFTI(self):
     def testPloneSiteFTIHasMethodAliases(self):
         # Should add method aliases to the Plone Site FTI
         expected_aliases = {
-                '(Default)'  : '(dynamic view)',
-                'view'       : '(selected layout)',
-                'edit'       : '@@site-controlpanel',
-                'sharing'    : '@@sharing',
-              }
+            '(Default)': '(dynamic view)',
+            'view': '(selected layout)',
+            'edit': '@@site-controlpanel',
+            'sharing': '@@sharing',
+        }
         fti = self.portal.getTypeInfo()
         aliases = fti.getMethodAliases()
         self.assertEqual(aliases, expected_aliases)
@@ -454,7 +460,8 @@ def testSiteActions(self):
         atool = self.actions
         self.assertFalse(atool.getActionInfo('site_actions/sitemap') is None)
         self.assertFalse(atool.getActionInfo('site_actions/contact') is None)
-        self.assertFalse(atool.getActionInfo('site_actions/accessibility') is None)
+        self.assertFalse(atool.getActionInfo(
+            'site_actions/accessibility') is None)
 
     def testSetupAction(self):
         self.setRoles(['Manager', 'Member'])
@@ -493,10 +500,10 @@ def testNavigationAndSearchPanelsInstalled(self):
 
     def testOwnerHasAccessInactivePermission(self):
         permission_on_role = [p for p in self.portal.permissionsOfRole('Owner')
-            if p['name'] == AccessInactivePortalContent][0]
+                              if p['name'] == AccessInactivePortalContent][0]
         self.assertTrue(permission_on_role['selected'])
         cur_perms = self.portal.permission_settings(
-                            AccessInactivePortalContent)[0]
+            AccessInactivePortalContent)[0]
         self.assertTrue(cur_perms['acquire'])
 
     def testSyndicationEnabledByDefault(self):
@@ -547,7 +554,7 @@ def testObjectButtonActionsOnDefaultDocumentDoNotApplyToParent(self):
         urls = [a['url'] for a in buttons]
         for url in urls:
             self.assertFalse('index_html' not in url,
-                        'Action wrongly applied to parent object %s' % url)
+                             'Action wrongly applied to parent object %s' % url)
 
     def testObjectButtonActionsPerformCorrectAction(self):
         # only a manager would have proper permissions
@@ -563,12 +570,12 @@ def testObjectButtonActionsPerformCorrectAction(self):
             # ensure that e.g. the 'copy' url contains object_copy
             self.assertTrue('object_' + url[0] in url[1],
                             "%s does not perform the expected object_%s action"
-                                % (url[0], url[0]))
+                            % (url[0], url[0]))
 
         delete_action = [(a['id'], a['url']) for a in buttons
-                if a['id'] == 'delete'][0]
+                         if a['id'] == 'delete'][0]
         self.assertTrue('delete_confirmation' in delete_action[1],
-                         "object_delete does not use the confirmation form")
+                        "object_delete does not use the confirmation form")
 
     def testObjectButtonActionsInExpectedOrder(self):
         # The object buttons need to be in a standardized order
@@ -601,8 +608,8 @@ def testCustomSkinFolderComesFirst(self):
     def testMemberHasViewGroupsPermission(self):
         # Member should be granted the 'View Groups' permission
         member_has_permission = [p for p in
-                self.portal.permissionsOfRole('Member')
-                                        if p['name'] == 'View Groups'][0]
+                                 self.portal.permissionsOfRole('Member')
+                                 if p['name'] == 'View Groups'][0]
         self.assertTrue(member_has_permission['selected'])
 
     def testDiscussionItemWorkflow(self):
@@ -653,7 +660,7 @@ def testHomeActionUsesView(self):
         actions = self.actions.listActions()
         homeAction = [x for x in actions if x.id == 'index_html'][0]
         self.assertEqual(homeAction.getInfoData()[0]['url'].text,
-                          'string:${globals_view/navigationRootUrl}')
+                         'string:${globals_view/navigationRootUrl}')
 
     def testPloneLexicon(self):
         # Plone lexicon should use new splitter and case normalizer
@@ -730,12 +737,12 @@ def testUtilityRegistration(self):
     def testPortletManagersInstalled(self):
         sm = getSiteManager(self.portal)
         registrations = [r.name for r in sm.registeredUtilities()
-                            if IPortletManager == r.provided]
+                         if IPortletManager == r.provided]
         self.assertEqual(['plone.dashboard1', 'plone.dashboard2',
-                           'plone.dashboard3', 'plone.dashboard4',
-                           'plone.footerportlets',
-                           'plone.leftcolumn', 'plone.rightcolumn'],
-                           sorted(registrations))
+                          'plone.dashboard3', 'plone.dashboard4',
+                          'plone.footerportlets',
+                          'plone.leftcolumn', 'plone.rightcolumn'],
+                         sorted(registrations))
 
     def testPortletAssignmentsAtRoot(self):
         leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn')
@@ -754,14 +761,15 @@ def testPortletBlockingForMembersFolder(self):
         rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn')
         portletAssignments = getMultiAdapter((members, rightColumn,),
                                              ILocalPortletAssignmentManager)
-        self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+        self.assertEqual(
+            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testAddablePortletsInColumns(self):
         for name in (u'plone.leftcolumn', u'plone.rightcolumn'):
             column = getUtility(IPortletManager, name=name)
             addable_types = [
-              p.addview for p in column.getAddablePortletTypes()
-              ]
+                p.addview for p in column.getAddablePortletTypes()
+            ]
             addable_types.sort()
             self.assertEqual([
                 'plone.portlet.collection.Collection',
@@ -778,30 +786,30 @@ def testAddablePortletsInColumns(self):
 
     def testAddablePortletsInDashboard(self):
         for name in ('plone.dashboard1', 'plone.dashboard2',
-          'plone.dashboard3', 'plone.dashboard4'):
+                     'plone.dashboard3', 'plone.dashboard4'):
             column = getUtility(IPortletManager, name=name)
             addable_types = [
-              p.addview for p in column.getAddablePortletTypes()
-              ]
+                p.addview for p in column.getAddablePortletTypes()
+            ]
             addable_types.sort()
             self.assertEqual([
-              'plone.portlet.collection.Collection',
-              'plone.portlet.static.Static',
-              'portlets.Actions',
-              'portlets.Classic',
-              'portlets.News',
-              'portlets.Recent',
-              'portlets.Review',
-              'portlets.Search',
-              'portlets.rss'
-              ], addable_types)
+                'plone.portlet.collection.Collection',
+                'plone.portlet.static.Static',
+                'portlets.Actions',
+                'portlets.Classic',
+                'portlets.News',
+                'portlets.Recent',
+                'portlets.Review',
+                'portlets.Search',
+                'portlets.rss'
+            ], addable_types)
 
     def testReaderEditorRoles(self):
         self.assertTrue('Reader' in self.portal.valid_roles())
         self.assertTrue('Editor' in self.portal.valid_roles())
-        self.assertTrue('Reader' in self.portal.acl_users.portal_role_manager \
+        self.assertTrue('Reader' in self.portal.acl_users.portal_role_manager
                                         .listRoleIds())
-        self.assertTrue('Editor' in self.portal.acl_users.portal_role_manager \
+        self.assertTrue('Editor' in self.portal.acl_users.portal_role_manager
                                         .listRoleIds())
         self.assertTrue('View' in
                         [r['name'] for r in
@@ -814,13 +822,13 @@ def testReaderEditorRoles(self):
 
     def testWorkflowsInstalled(self):
         for wf in ['intranet_workflow', 'intranet_folder_workflow',
-                'one_state_workflow', 'simple_publication_workflow']:
+                   'one_state_workflow', 'simple_publication_workflow']:
             self.assertTrue(wf in self.portal.portal_workflow)
 
     def testAddPermisssionsGivenToContributorRole(self):
         self.assertTrue('Contributor' in self.portal.valid_roles())
-        self.assertTrue('Contributor' in self.portal.acl_users \
-                                            .portal_role_manager.listRoleIds())
+        self.assertTrue('Contributor' in self.portal.acl_users
+                        .portal_role_manager.listRoleIds())
         for p in ['Add portal content', 'Add portal folders',
                   'ATContentTypes: Add Document',
                   'ATContentTypes: Add Event', 'ATContentTypes: Add File',
@@ -828,8 +836,8 @@ def testAddPermisssionsGivenToContributorRole(self):
                   'ATContentTypes: Add Link',
                   'ATContentTypes: Add News Item', ]:
             self.assertTrue(p in [r['name'] for r in
-                                self.portal.permissionsOfRole('Contributor')
-                                if r['selected']])
+                                  self.portal.permissionsOfRole('Contributor')
+                                  if r['selected']])
 
     def testSharingAction(self):
         # Should be in portal_actions
@@ -837,14 +845,15 @@ def testSharingAction(self):
 
         # Should not be in any of the default FTIs
         for fti in self.types.values():
-            self.assertFalse('local_roles' in [a.id for a in fti.listActions()])
+            self.assertFalse('local_roles' in [
+                             a.id for a in fti.listActions()])
 
     def testSecondaryEditorPermissionsGivenToEditorRole(self):
         for p in ['Manage properties', 'Modify view template',
                   'Request review']:
             self.assertTrue(p in [r['name'] for r in
-                                self.portal.permissionsOfRole('Editor')
-                                if r['selected']])
+                                  self.portal.permissionsOfRole('Editor')
+                                  if r['selected']])
 
     def testNonFolderishTabsProperty(self):
         registry = getUtility(IRegistry)
@@ -893,6 +902,7 @@ def testFinalStepsWithMembersFolderDeleted(self):
         portal.manage_delObjects(['Members'])
 
         class FakeContext:
+
             def getSite(self):
                 return portal
 
diff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py
index f354ee2..5042b91 100644
--- a/Products/CMFPlone/tests/testRegistrationTool.py
+++ b/Products/CMFPlone/tests/testRegistrationTool.py
@@ -20,13 +20,13 @@ class TestRegistrationTool(PloneTestCase.PloneTestCase):
     def afterSetUp(self):
         self.registration = self.portal.portal_registration
         self.portal.acl_users.userFolderAddUser("userid", "password",
-                (), (), ())
+                                                (), (), ())
         self.portal.acl_users._doAddGroup("groupid", ())
 
     def testJoinCreatesUser(self):
         self.registration.addMember(member_id, 'secret',
-                          properties={'username': member_id,
-                                      'email': 'foo@bar.com'})
+                                    properties={'username': member_id,
+                                                'email': 'foo@bar.com'})
         user = self.portal.acl_users.getUserById(member_id)
         self.assertTrue(user, 'addMember failed to create user')
 
@@ -40,8 +40,8 @@ def testCannotRegisterWithRootAdminUsername(self):
 
     def testJoinWithUppercaseEmailCreatesUser(self):
         self.registration.addMember(member_id, 'secret',
-                          properties={'username': member_id,
-                                      'email': 'FOO@BAR.COM'})
+                                    properties={'username': member_id,
+                                                'email': 'FOO@BAR.COM'})
         user = self.portal.acl_users.getUserById(member_id)
         self.assertTrue(user, 'addMember failed to create user')
 
@@ -56,8 +56,8 @@ def testJoinWithBadEmailRaisesValueError(self):
                           self.registration.addMember,
                           member_id, 'secret',
                           properties={
-                            'username': member_id,
-                            'email': 'foo@bar.com, fred@bedrock.com'})
+                              'username': member_id,
+                              'email': 'foo@bar.com, fred@bedrock.com'})
 
     def testJoinAsExistingMemberRaisesValueError(self):
         self.assertRaises(ValueError,
@@ -117,8 +117,8 @@ def testRegisteredNotify(self):
         sm.registerUtility(mails, IMailHost)
         # Register a user
         self.registration.addMember(member_id, 'secret',
-                          properties={'username': member_id,
-                                      'email': 'foo@bar.com'})
+                                    properties={'username': member_id,
+                                                'email': 'foo@bar.com'})
 
         registry = getUtility(IRegistry)
         site_settings = registry.forInterface(ISiteSchema, prefix='plone')
@@ -147,8 +147,8 @@ def testRegisteredNotifyEncoding(self):
         sm.registerUtility(mails, IMailHost)
         # Register a user
         self.registration.addMember(member_id, 'secret',
-                          properties={'username': member_id,
-                                      'email': 'foo@bar.com'})
+                                    properties={'username': member_id,
+                                                'email': 'foo@bar.com'})
         registry = getUtility(IRegistry)
         site_settings = registry.forInterface(ISiteSchema, prefix='plone')
         site_settings.site_title = u'Test Portal'
@@ -176,8 +176,8 @@ def testMailPassword(self):
         sm.registerUtility(mails, IMailHost)
         # Register a user
         self.registration.addMember(member_id, 'secret',
-                          properties={'username': member_id,
-                                      'email': 'foo@bar.com'})
+                                    properties={'username': member_id,
+                                                'email': 'foo@bar.com'})
 
         registry = getUtility(IRegistry)
         site_settings = registry.forInterface(ISiteSchema, prefix='plone')
@@ -207,8 +207,8 @@ def testMailPasswordEncoding(self):
         sm.registerUtility(mails, IMailHost)
         # Register a user
         self.registration.addMember(member_id, 'secret',
-                          properties={'username': member_id,
-                                      'email': 'foo@bar.com'})
+                                    properties={'username': member_id,
+                                                'email': 'foo@bar.com'})
         registry = getUtility(IRegistry)
         site_settings = registry.forInterface(ISiteSchema, prefix='plone')
         site_settings.site_title = u'Tëst Portal'
@@ -260,7 +260,7 @@ def testGetDeterministicPassword(self):
     def testGeneratePassword(self):
         pw = self.registration.generatePassword()
         # default password is now very long as it's never seen by the user
-        self.assertTrue(len(pw)>=20)
+        self.assertTrue(len(pw) >= 20)
 
     def testGenerateResetCode(self):
         salt = 'foo'
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index ce5368b..335dbb8 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -35,9 +35,11 @@ def test_cooking_resources(self):
         resource.js = '++plone++static/foobar.js'
         bundle.resources = ['foobar']
 
-        persistent_directory = getUtility(IResourceDirectory, name="persistent")
+        persistent_directory = getUtility(
+            IResourceDirectory, name="persistent")
         if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
-            persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)
+            persistent_directory.makeDirectory(
+                OVERRIDE_RESOURCE_DIRECTORY_NAME)
         container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
         container.makeDirectory('static')
         directory = container['static']
@@ -85,9 +87,11 @@ def test_error(self):
         resource.js = '++plone++static/foobar.js'
         bundle.resources = ['foobar']
 
-        persistent_directory = getUtility(IResourceDirectory, name="persistent")
+        persistent_directory = getUtility(
+            IResourceDirectory, name="persistent")
         if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
-            persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)
+            persistent_directory.makeDirectory(
+                OVERRIDE_RESOURCE_DIRECTORY_NAME)
         container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
         container.makeDirectory('static')
         directory = container['static']
@@ -145,7 +149,8 @@ def test_resource_no_blacklist(self):
         importer._importNode(dom.documentElement)
         js_files = [x.js for x in self._get_resources().values()]
         self.assertTrue("++resource++/resource.js" in js_files)
-        self.assertTrue("resource-resource-js" in self._get_legacy_bundle().resources)
+        self.assertTrue(
+            "resource-resource-js" in self._get_legacy_bundle().resources)
 
     def test_insert_again(self):
         importer = self._get_importer()
@@ -194,7 +199,8 @@ def test_insert_after(self):
             """)
         importer._importNode(foobar.documentElement)
         resources = self._get_legacy_bundle().resources
-        self.assertTrue(resources.index('one') + 1, resources.index('foobar-js'))
+        self.assertTrue(resources.index('one') + 1,
+                        resources.index('foobar-js'))
 
     def test_insert_before(self):
         importer = self._get_importer()
@@ -213,7 +219,8 @@ def test_insert_before(self):
             """)
         importer._importNode(foobar.documentElement)
         resources = self._get_legacy_bundle().resources
-        self.assertTrue(resources.index('one') - 1, resources.index('foobar-js'))
+        self.assertTrue(resources.index('one') - 1,
+                        resources.index('foobar-js'))
 
     def test_be_able_to_disable_but_not_remove(self):
         importer = self._get_importer()
@@ -281,7 +288,8 @@ def test_override_rewrite_links(self):
         self.assertEquals(str(value), match)
 
     def test_get_require_js_config_uses_stub_modules(self):
-        view = ResourceRegistryControlPanelView(self.portal, self.layer['request'])
+        view = ResourceRegistryControlPanelView(
+            self.portal, self.layer['request'])
         self.layer['request'].form['bundle'] = 'plone-logged-in'
         config = json.loads(view.js_build_config())
-        self.assertEquals(config['paths']['jquery'], 'empty:')
\ No newline at end of file
+        self.assertEquals(config['paths']['jquery'], 'empty:')
diff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py
index c104a1f..7ab3692 100644
--- a/Products/CMFPlone/tests/testSSOLogin.py
+++ b/Products/CMFPlone/tests/testSSOLogin.py
@@ -14,8 +14,10 @@ def afterSetUp(self):
         PloneTestCase.afterSetUp(self)
 
         self.setRoles(['Manager'])
-        addPloneSite(self.app, 'login_portal', content_profile_id='Products.ATContentTypes:default')
-        addPloneSite(self.app, 'another_portal', content_profile_id='Products.ATContentTypes:default')
+        addPloneSite(self.app, 'login_portal',
+                     content_profile_id='Products.ATContentTypes:default')
+        addPloneSite(self.app, 'another_portal',
+                     content_profile_id='Products.ATContentTypes:default')
 
         self.browser = Browser(self.app)
         self.browser.handleErrors = False  # Don't get HTTP 500 pages
@@ -30,7 +32,8 @@ def afterSetUp(self):
                 TEST_USER_NAME,
                 TEST_USER_PASSWORD)
         for role in TEST_USER_ROLES:
-            portal.acl_users.portal_role_manager.doAssignRoleToPrincipal(TEST_USER_ID, role)
+            portal.acl_users.portal_role_manager.doAssignRoleToPrincipal(
+                TEST_USER_ID, role)
 
         registry = self.login_portal.portal_registry
 
@@ -138,7 +141,7 @@ def test_loginAndLogoutSSO(self):
         form.submit()
         # We are now inside the iframe
         self.assertTrue(
-                browser.url.startswith(self.login_portal.absolute_url()))
+            browser.url.startswith(self.login_portal.absolute_url()))
         # The Link to get  a new password points back to self.portal
         link = browser.getLink('we can send you a new one')
         self.assertTrue(link.url.startswith(self.portal.absolute_url()))
@@ -168,7 +171,7 @@ def test_loginAndLogoutSSO(self):
         form.submit()
         # We are now inside the iframe
         self.assertTrue(
-                browser.url.startswith(self.login_portal.absolute_url()))
+            browser.url.startswith(self.login_portal.absolute_url()))
         browser.getForm('external_login_form').submit()
         self.assertEqual(self.browser.cookies.getinfo('__ac')['path'],
                          self.another_portal.absolute_url_path())
diff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py
index af07977..1e25d5e 100644
--- a/Products/CMFPlone/tests/testSecurity.py
+++ b/Products/CMFPlone/tests/testSecurity.py
@@ -13,7 +13,7 @@ class TestAttackVectorsUnit(unittest.TestCase):
     def test_gtbn_funcglobals(self):
         from Products.CMFPlone.utils import getToolByName
         try:
-            getToolByName(self.assertTrue,'func_globals')['__builtins__']
+            getToolByName(self.assertTrue, 'func_globals')['__builtins__']
         except TypeError:
             pass
         else:
@@ -55,30 +55,37 @@ def test_PT_allow_module_not_available_in_RestrictedPython_2(self):
 
     def test_get_request_var_or_attr_disallowed(self):
         import App.Undo
-        self.assertFalse(hasattr(App.Undo.UndoSupport, 'get_request_var_or_attr'))
+        self.assertFalse(hasattr(App.Undo.UndoSupport,
+                                 'get_request_var_or_attr'))
 
 
 class TestAttackVectorsFunctional(PloneTestCase):
 
     def test_widget_traversal_1(self):
-        res = self.publish('/plone/@@discussion-settings/++widget++moderator_email')
+        res = self.publish(
+            '/plone/@@discussion-settings/++widget++moderator_email')
         self.assertEqual(302, res.status)
-        self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
+        self.assertTrue(res.headers['location'].startswith(
+            'http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
 
     def test_widget_traversal_2(self):
-        res = self.publish('/plone/@@discussion-settings/++widget++captcha/terms/field/interface/setTaggedValue?tag=cake&value=lovely')
+        res = self.publish(
+            '/plone/@@discussion-settings/++widget++captcha/terms/field/interface/setTaggedValue?tag=cake&value=lovely')
         self.assertEqual(302, res.status)
-        self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
+        self.assertTrue(res.headers['location'].startswith(
+            'http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
 
     def test_registerConfiglet_1(self):
         VECTOR = "/plone/portal_controlpanel/registerConfiglet?id=cake&name=Cakey&action=woo&permission=View&icon_expr="
         res = self.publish(VECTOR)
-        self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
+        self.assertTrue(res.headers['location'].startswith(
+            'http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
 
     def test_registerConfiglet_2(self):
         VECTOR = "/plone/portal_controlpanel/registerConfiglet?id=cake&name=Cakey&action=woo&permission=View&icon_expr="
         self.publish(VECTOR)
-        action_ids = [action.id for action in self.portal.portal_controlpanel._actions]
+        action_ids = [
+            action.id for action in self.portal.portal_controlpanel._actions]
         self.assertTrue('cake' not in action_ids)
 
     def _get_authenticator(self, basic=None):
@@ -92,13 +99,16 @@ def _get_authenticator(self, basic=None):
     def test_gtbn_faux_archetypes_tool(self):
         from Products.CMFCore.utils import FauxArchetypeTool
         from Products.CMFPlone.utils import getToolByName
-        self.portal.portal_factory.archetype_tool = FauxArchetypeTool(self.portal.archetype_tool)
-        self.assertEqual(self.portal.portal_factory.archetype_tool, getToolByName(self.portal.portal_factory, 'archetype_tool'))
+        self.portal.portal_factory.archetype_tool = FauxArchetypeTool(
+            self.portal.archetype_tool)
+        self.assertEqual(self.portal.portal_factory.archetype_tool, getToolByName(
+            self.portal.portal_factory, 'archetype_tool'))
 
     def test_searchForMembers(self):
         res = self.publish('/plone/portal_membership/searchForMembers')
         self.assertEqual(302, res.status)
-        self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
+        self.assertTrue(res.headers['location'].startswith(
+            'http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
 
     def test_getMemberInfo(self):
         res = self.publish('/plone/portal_membership/getMemberInfo?id=admin')
@@ -114,17 +124,20 @@ def test_resolve_url(self):
 
     def test_at_download(self):
         self.setRoles(['Manager'])
-        self.portal.portal_workflow.setChainForPortalTypes(['File'], 'plone_workflow')
+        self.portal.portal_workflow.setChainForPortalTypes(
+            ['File'], 'plone_workflow')
         self.portal.invokeFactory('File', 'test')
         self.portal.portal_workflow.doActionFor(self.portal.test, 'publish')
 
         # give it a more restricted read_permission
         self.portal.test.Schema()['file'].read_permission = 'Manage portal'
 
-        # make sure at_download disallows even though the user has View permission
+        # make sure at_download disallows even though the user has View
+        # permission
         res = self.publish('/plone/test/at_download/file')
         self.assertEqual(res.status, 302)
-        self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
+        self.assertTrue(res.headers['location'].startswith(
+            'http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
 
     def test_ftp(self):
         self.setRoles(['Manager', 'Owner'])
@@ -134,7 +147,8 @@ def test_ftp(self):
         self.portal.portal_workflow.doActionFor(self.portal.news, 'hide')
         self.setRoles(['Member'])
         from zExceptions import Unauthorized
-        self.assertRaises(Unauthorized, self.portal.news.manage_FTPlist, self.portal.REQUEST)
+        self.assertRaises(
+            Unauthorized, self.portal.news.manage_FTPlist, self.portal.REQUEST)
 
     def test_atat_does_not_return_anything(self):
         res = self.publish('/plone/@@')
@@ -142,7 +156,7 @@ def test_atat_does_not_return_anything(self):
 
     def test_go_back(self):
         res = self.publish('/plone/front-page/go_back?last_referer=http://${request}',
-            basic=SITE_OWNER_NAME + ':' + SITE_OWNER_PASSWORD)
+                           basic=SITE_OWNER_NAME + ':' + SITE_OWNER_PASSWORD)
         self.assertEqual(302, res.status)
         self.assertEqual('http://${request}', res.headers['location'][:17])
 
@@ -161,7 +175,8 @@ def test_utranslate(self):
     def test_createObject(self):
         res = self.publish('/plone/createObject?type_name=File&id=${foo}')
         self.assertEqual(302, res.status)
-        self.assertTrue(res.headers['location'].startswith('http://nohost/plone/portal_factory/File/${foo}/edit?_authenticator='))
+        self.assertTrue(res.headers['location'].startswith(
+            'http://nohost/plone/portal_factory/File/${foo}/edit?_authenticator='))
 
     def test_formatColumns(self):
         res = self.publish('/plone/formatColumns?items:list=')
diff --git a/Products/CMFPlone/tests/testSecurityDeclarations.py b/Products/CMFPlone/tests/testSecurityDeclarations.py
index 584f7e2..3fd2483 100644
--- a/Products/CMFPlone/tests/testSecurityDeclarations.py
+++ b/Products/CMFPlone/tests/testSecurityDeclarations.py
@@ -180,8 +180,8 @@ def testAccess_ConflictError(self):
 
     def testRaise_ConflictError(self):
         self.assertRaises(ConflictError,
-            self.check, 'from ZODB.POSException import ConflictError;'
-                        'raise ConflictError')
+                          self.check, 'from ZODB.POSException import ConflictError;'
+                          'raise ConflictError')
 
     def testCatch_ConflictErrorRaisedByRestrictedCode(self):
         try:
@@ -302,7 +302,8 @@ def testAccess_getToolByName(self):
                                'print utils.getToolByName')
 
     def testUse_getToolByName(self):
-        self.layer['app'].manage_addFolder('portal_membership')  # Fake a portal tool
+        self.layer['app'].manage_addFolder(
+            'portal_membership')  # Fake a portal tool
         self.check('from Products.CMFCore.utils import getToolByName;'
                    'print getToolByName(context, "portal_membership")')
 
diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index 025618b..153d837 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -203,7 +203,7 @@ def testExpectedPermissions(self):
             'WebDAV access':                                            1,
             'plone.portlet.collection: Add collection portlet':         1,
             'plone.portlet.static: Add static portlet':                 1,
-            }
+        }
         if 'products.kupu' in pkg_resources.working_set.by_key:
             expected.update({
                 'Add kupu Library Tools':                               0,
@@ -232,4 +232,4 @@ def testExpectedPermissions(self):
         if errors:
             self.fail('Unexpected permissions for Site Administrator role:\n' +
                       ''.join(['\t%s\n' % msg for msg in errors])
-                     )
+                      )
diff --git a/Products/CMFPlone/tests/testSyndication.py b/Products/CMFPlone/tests/testSyndication.py
index 1e137a6..d50e6ab 100644
--- a/Products/CMFPlone/tests/testSyndication.py
+++ b/Products/CMFPlone/tests/testSyndication.py
@@ -21,7 +21,7 @@ def afterSetUp(self):
         self.doc1 = self.folder.doc1
         self.doc2 = self.folder.doc2
         self.file = self.folder.file
-        #Enable syndication on folder
+        # Enable syndication on folder
         registry = getUtility(IRegistry)
         self.site_settings = registry.forInterface(ISiteSyndicationSettings)
         settings = IFeedSettings(self.folder)
@@ -143,12 +143,12 @@ def test_search_feed_view(self):
     def test_search_feed_view_raises_404(self):
         self.site_settings.search_rss_enabled = False
         self.assertRaises(NotFound,
-            self.portal.restrictedTraverse('@@search_rss'))
+                          self.portal.restrictedTraverse('@@search_rss'))
 
     def test_search_feed_view_raises_404_not_site_root(self):
         self.site_settings.search_rss_enabled = True
         self.assertRaises(NotFound,
-            self.folder.restrictedTraverse('@@search_rss'))
+                          self.folder.restrictedTraverse('@@search_rss'))
 
 
 class TestSyndicationFeedAdapter(BaseSyndicationTest):
@@ -164,7 +164,7 @@ def test_link_on_folder(self):
 
     def test_link_on_file(self):
         self.assertEqual(self.feeddatafile.link,
-            self.file.absolute_url() + '/view')
+                         self.file.absolute_url() + '/view')
 
     def test_items(self):
         self.assertEqual(len(self.feed._brains()), 3)
@@ -173,7 +173,7 @@ def test_items(self):
     def test_max_items(self):
         self.feed.settings.max_items = 2
         self.assertEqual(len([i for i in self.feed.items][:self.feed.limit]),
-                                                                           2)
+                         2)
 
     def test_has_enclosure(self):
         self.assertEqual(self.feeddatadoc.has_enclosure, False)
@@ -211,7 +211,7 @@ def afterSetUp(self):
         self.news2 = self.folder.news2
         self.news2.setTitle('News 2')
         self.news2.setText(ROOTED_BODY_TEXT)
-        #Enable syndication on folder
+        # Enable syndication on folder
         registry = getUtility(IRegistry)
         self.site_settings = registry.forInterface(ISiteSyndicationSettings)
         settings = IFeedSettings(self.folder)
@@ -247,12 +247,14 @@ def test_rss1(self):
         news_feed = '<item rdf:about="{0}">\s*<title>News 1</title>\s*' \
                     '<link>{0}</link>\s*' \
                     '<description>The news item #1</description>\s*' \
-                    '<content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"'.format(self.news1.absolute_url())
+                    '<content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"'.format(
+                        self.news1.absolute_url())
         self.assertTrue(re.search(news_feed, xml) is not None)
         news_feed = '<item rdf:about="{0}">\s*<title>News 2</title>\s*' \
                     '<link>{0}</link>\s*' \
                     '<description></description>\s*' \
-                    '<content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"'.format(self.news2.absolute_url())
+                    '<content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"'.format(
+                        self.news2.absolute_url())
         self.assertTrue(re.search(news_feed, xml) is not None)
 
     def test_rss2(self):
@@ -283,7 +285,7 @@ def afterSetUp(self):
         self.news2 = self.folder.news2
         self.news2.setText(ROOTED_BODY_TEXT)
         self.file = self.folder.file
-        #Enable syndication on folder
+        # Enable syndication on folder
         registry = getUtility(IRegistry)
         self.site_settings = registry.forInterface(ISiteSyndicationSettings)
         settings = IFeedSettings(self.folder)
diff --git a/Products/CMFPlone/tests/testTranslationServiceTool.py b/Products/CMFPlone/tests/testTranslationServiceTool.py
index 77cca41..145fdd5 100644
--- a/Products/CMFPlone/tests/testTranslationServiceTool.py
+++ b/Products/CMFPlone/tests/testTranslationServiceTool.py
@@ -38,27 +38,27 @@ def afterSetUp(self):
 
     def testLocalized_time(self):
         value = self.tool.ulocalized_time('Mar 9, 1997 1:45pm',
-                                         long_format=True,
-                                         time_only=False,
-                                         context=self.portal)
+                                          long_format=True,
+                                          time_only=False,
+                                          context=self.portal)
         # TranslationServiceTool falls back to time formats in site properties
         # because PTS isn't installed
         self.assertEqual(value, 'Mar 09, 1997 01:45 PM')
 
     def testLocalized_time_only_none(self):
         value = self.tool.ulocalized_time('Mar 9, 1997 1:45pm',
-                                         long_format=True,
-                                         time_only=None,
-                                         context=self.portal)
+                                          long_format=True,
+                                          time_only=None,
+                                          context=self.portal)
         # TranslationServiceTool falls back to time formats in site properties
         # because PTS isn't installed
         self.assertEqual(value, 'Mar 09, 1997 01:45 PM')
 
     def testLocalized_time_only(self):
         value = self.tool.ulocalized_time('Mar 9, 1997 1:45pm',
-                                         long_format=True,
-                                         time_only=True,
-                                         context=self.portal)
+                                          long_format=True,
+                                          time_only=True,
+                                          context=self.portal)
         # TranslationServiceTool falls back to time formats in site properties
         # because PTS isn't installed
         self.assertEqual(value, '01:45 PM')
diff --git a/Products/CMFPlone/tests/testURLTool.py b/Products/CMFPlone/tests/testURLTool.py
index 668ef2f..bd25393 100644
--- a/Products/CMFPlone/tests/testURLTool.py
+++ b/Products/CMFPlone/tests/testURLTool.py
@@ -11,6 +11,7 @@
 
 
 class DummyFolder(DummyFolder):
+
     def absolute_url(self):
         return '/'.join([aq_parent(self).absolute_url(), self.getId()])
 
@@ -21,10 +22,10 @@ class DummyLoginSettings():
         'http://external2/',
         'http://external3/site',
         'http://external4/site/'
-        ]
+    ]
 
-class DummyRegistry(DummyContent):
 
+class DummyRegistry(DummyContent):
 
     def __getitem__(self, name, default=None):
         if name == 'plone.allow_external_login_sites':
@@ -32,9 +33,8 @@ def __getitem__(self, name, default=None):
         return default
 
     def forInterface(self, iface, prefix=''):
-    	if iface == ILoginSchema:
-    		return DummyLoginSettings()
-
+        if iface == ILoginSchema:
+            return DummyLoginSettings()
 
 
 class TestURLTool(unittest.TestCase):
@@ -69,7 +69,7 @@ def test_isURLInPortalRelative(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
 
-        #non-root relative urls will need a current context to be passed in
+        # non-root relative urls will need a current context to be passed in
         self.assertTrue(iURLiP('images/img1.jpg'))
         self.assertTrue(iURLiP('./images/img1.jpg'))
 
diff --git a/Products/CMFPlone/tests/testUnicodeSplitter.py b/Products/CMFPlone/tests/testUnicodeSplitter.py
index 116dcaf..f7bc660 100644
--- a/Products/CMFPlone/tests/testUnicodeSplitter.py
+++ b/Products/CMFPlone/tests/testUnicodeSplitter.py
@@ -51,7 +51,8 @@ def testProcessGerman(self):
 
     def testProcessGreek(self):
         # Greek letters
-        input = [u'\u039d\u03af\u03ba\u03bf\u03c2 \u03a4\u03b6\u03ac\u03bd\u03bf\u03c2 foo']
+        input = [
+            u'\u039d\u03af\u03ba\u03bf\u03c2 \u03a4\u03b6\u03ac\u03bd\u03bf\u03c2 foo']
         output = [u'\u039d\u03af\u03ba\u03bf\u03c2',
                   u'\u03a4\u03b6\u03ac\u03bd\u03bf\u03c2', u'foo']
         output = [t.encode('utf-8') for t in output]
@@ -136,10 +137,10 @@ def afterSetUp(self):
         setDeprecatedManageAddDelete(DummyContent)
         self.catalog = getToolByName(self.portal, 'portal_catalog')
         self.folder._setObject('doc1',
-            DummyContent('doc1', catalog=self.catalog))
+                               DummyContent('doc1', catalog=self.catalog))
         self.doc1 = self.folder.doc1
         self.folder._setObject('doc2',
-            DummyContent('doc2', catalog=self.catalog))
+                               DummyContent('doc2', catalog=self.catalog))
         self.doc2 = self.folder.doc2
 
     def testQueryByUmlaut(self):
@@ -241,8 +242,8 @@ def testIndexUnicodeLower(self):
 
 # adding UnicodeSplitterPatcth
 from Products.CMFPlone.UnicodeSplitter \
-     import process_str, process_str_post, process_str_glob,\
-     process_unicode, process_unicode_glob
+    import process_str, process_str_post, process_str_glob,\
+    process_unicode, process_unicode_glob
 
 
 class TestBigramFunctions(unittest.TestCase):
@@ -254,7 +255,7 @@ def test_process_str(self):
             ("日本語", ["日本", "本語", "語"]),
             ("日本語python", ["日本", "本語", "語", "python"]),
             ("日本語12345", ["日本", "本語", "語", "12345"]),
-            ]
+        ]
         for lst, rst in lsts:
             self.assertEqual(rst, process_str(lst, "utf8"))
 
@@ -265,7 +266,7 @@ def test_process_unicode(self):
             (u"日本語", [u"日本", u"本語", u"語"]),
             (u"日本語python", [u"日本", u"本語", u"語", u"python"]),
             (u"日本語12345", [u"日本", u"本語", u"語", u"12345"]),
-            ]
+        ]
         for lst, rst in lsts:
             self.assertEqual(rst, list(process_unicode(lst)))
 
@@ -276,7 +277,7 @@ def test_process_str_glob(self):
             ("日", ["日*"]),
             ("日本語", ["日本", "本語"]),
             ("日本語python", ["日本", "本語", "語", "python"]),
-            ]
+        ]
         for lst, rst in lsts:
             self.assertEqual(rst, process_str_glob(lst, enc))
             for x, y in zip(rst, process_str_glob(lst, enc)):
@@ -289,7 +290,7 @@ def test_process_unicode_glob(self):
             (u"日", [u"日*"]),
             (u"日本語", [u"日本", u"本語"]),
             (u"日本語python", [u"日本", u"本語", u"語", u"python"]),
-            ]
+        ]
         for lst, rst in lsts:
             self.assertEqual(rst, list(process_unicode_glob(lst)))
             for x, y in zip(rst, process_unicode_glob(lst)):
@@ -301,7 +302,7 @@ def test_process_str_post(self):
         lsts = [
             ("日本", "日本"),
             ("日本*", "日本"),
-            ]
+        ]
         for lst, rst in lsts:
             self.assertEqual(rst, process_str_post(lst, enc))
 
@@ -339,6 +340,7 @@ def testSearch(self):
 
 class TestSearchingUnicodeJapanese(PloneTestCase.PloneTestCase):
     """ Install Unicode Japanese test """
+
     def afterSetUp(self):
         self.setRoles(('Manager',))
         self.portal.invokeFactory('Document', 'doc1')
diff --git a/Products/CMFPlone/tests/testUserFolderBasics.py b/Products/CMFPlone/tests/testUserFolderBasics.py
index 558e78c..2f5f3b7 100644
--- a/Products/CMFPlone/tests/testUserFolderBasics.py
+++ b/Products/CMFPlone/tests/testUserFolderBasics.py
@@ -21,7 +21,7 @@ def afterSetUp(self):
         self.uf = self.portal.acl_users
         self.basic = \
             'Basic %s' % base64.encodestring(
-                            '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD))
+                '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD))
         # Set up a published object accessible to the default user
         self.folder.addDTMLMethod('doc', file='')
         self.folder.doc.manage_permission('View', [user_role], acquire=0)
diff --git a/Products/CMFPlone/tests/testWebDAV.py b/Products/CMFPlone/tests/testWebDAV.py
index 44e6254..e8b6b96 100644
--- a/Products/CMFPlone/tests/testWebDAV.py
+++ b/Products/CMFPlone/tests/testWebDAV.py
@@ -209,7 +209,7 @@ def testPUTImageICONoContentType(self):
             self.folder['test.ico'].portal_type,
             'Image',
             'If you are on a Mac and this fails, please see: '
-                'http://plone.org/documentation/error/unittest to fix.')
+            'http://plone.org/documentation/error/unittest to fix.')
         self.assertEqual(str(self.folder['test.ico'].getImage().data),
                          dummy.GIF)
 
diff --git a/Products/CMFPlone/tests/testWorkflowTool.py b/Products/CMFPlone/tests/testWorkflowTool.py
index 8ae963d..dca6b3d 100644
--- a/Products/CMFPlone/tests/testWorkflowTool.py
+++ b/Products/CMFPlone/tests/testWorkflowTool.py
@@ -64,16 +64,16 @@ def testGetTransitionsForProvidesDescription(self):
     def testGetTitleForStateOnType(self):
         state_id = self.workflow.getInfoFor(self.doc, 'review_state', '')
         state_title = self.workflow.getTitleForStateOnType(
-                        state_id,
-                        self.doc.portal_type)
+            state_id,
+            self.doc.portal_type)
         self.assertEqual(state_id, 'visible')
         self.assertEqual(state_title.lower(), 'public draft')
 
     def testGetTitleForStateOnTypeFallsBackOnStateId(self):
         state_id = 'nonsense'
         state_title = self.workflow.getTitleForStateOnType(
-                        state_id,
-                        self.doc.portal_type)
+            state_id,
+            self.doc.portal_type)
         self.assertEqual(state_title, 'nonsense')
 
     def testGetTitleForStateOnTypeSucceedsWithNonString(self):
@@ -81,22 +81,22 @@ def testGetTitleForStateOnTypeSucceedsWithNonString(self):
         # Non content objects can pass None or MissingValue.
         state_id = None
         state_title = self.workflow.getTitleForStateOnType(
-                        state_id,
-                        self.doc.portal_type)
+            state_id,
+            self.doc.portal_type)
         self.assertEqual(state_title, state_id)
 
     def testGetTitleForTransitionOnType(self):
         state_id = 'hide'
         state_title = self.workflow.getTitleForTransitionOnType(
-                        state_id,
-                        self.doc.portal_type)
+            state_id,
+            self.doc.portal_type)
         self.assertEqual(state_title, 'Make private')
 
     def testGetTitleForTransitionOnTypeFallsBackOnTransitionId(self):
         state_id = 'nonsense'
         state_title = self.workflow.getTitleForTransitionOnType(
-                        state_id,
-                        self.doc.portal_type)
+            state_id,
+            self.doc.portal_type)
         self.assertEqual(state_title, 'nonsense')
 
     def testGetTitleForTransitionOnTypeSucceedsWithNonString(self):
@@ -104,8 +104,8 @@ def testGetTitleForTransitionOnTypeSucceedsWithNonString(self):
         # Non content objects can pass None or MissingValue.
         state_id = None
         state_title = self.workflow.getTitleForTransitionOnType(
-                        state_id,
-                        self.doc.portal_type)
+            state_id,
+            self.doc.portal_type)
         self.assertEqual(state_title, state_id)
 
     def testListWFStatesByTitle(self):
@@ -118,7 +118,7 @@ def testListWFStatesByTitle(self):
         external_states = [s for s in states if s[1] == 'external']
         internal_states = [s for s in states if s[1] == 'internal']
         internal_pub_states = [s for s in states
-                                 if s[1] == 'internally_published']
+                               if s[1] == 'internally_published']
 
         self.assertEqual(len(pub_states), all_states.count('published'))
         self.assertEqual(len(priv_states), all_states.count('private'))
@@ -135,7 +135,7 @@ def testAdaptationBasedWorkflowOverride(self):
         content = Dummy()
         directlyProvides(content, IDocument)
         provideAdapter(DummyWorkflowChainAdapter,
-                        adapts=(IDocument, IWorkflowTool))
+                       adapts=(IDocument, IWorkflowTool))
         self.assertEqual(self.workflow.getChainFor(content),
                          ('Static Workflow',))
         # undo our registration so we don't break tests
diff --git a/Products/CMFPlone/tests/test_doctests.py b/Products/CMFPlone/tests/test_doctests.py
index 9975064..944006f 100644
--- a/Products/CMFPlone/tests/test_doctests.py
+++ b/Products/CMFPlone/tests/test_doctests.py
@@ -13,6 +13,6 @@ def test_suite():
         DocTestSuite('Products.CMFPlone.TranslationServiceTool'),
         DocTestSuite('Products.CMFPlone.utils'),
         DocTestSuite('Products.CMFPlone.workflow'),
-        )
+    )
 
     return TestSuite(suites)
diff --git a/Products/CMFPlone/tests/test_mails.py b/Products/CMFPlone/tests/test_mails.py
index 1031902..7df8467 100644
--- a/Products/CMFPlone/tests/test_mails.py
+++ b/Products/CMFPlone/tests/test_mails.py
@@ -38,11 +38,11 @@ def test_suite():
             optionflags=OPTIONFLAGS,
             package='Products.CMFPlone.tests',
             test_class=MockMailHostTestCase,
-            ),
+        ),
         ZopeDocFileSuite(
             'emaillogin.txt',
             optionflags=OPTIONFLAGS,
             package='Products.CMFPlone.tests',
             test_class=MockMailHostTestCase
-            ),
-        ))
+        ),
+    ))
diff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py
index 53e2c9c..602a28f 100644
--- a/Products/CMFPlone/tests/test_utils.py
+++ b/Products/CMFPlone/tests/test_utils.py
@@ -49,6 +49,7 @@ def test_bodyfinder(self):
 
 
 class LogoTests(PloneTestCase.PloneTestCase):
+
     def test_getSiteLogo_with_setting(self):
         from Products.CMFPlone.utils import getSiteLogo
         registry = getUtility(IRegistry)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-30T02:16:42+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/09d5a073ae2f43d9b8ed0213208e93112913d317

Nuked trailing white space.

Files changed:
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/browser/syndication/templates/RSS.pt
M Products/CMFPlone/browser/syndication/templates/atom.xml.pt
M Products/CMFPlone/browser/syndication/templates/newsml.xml.pt
M Products/CMFPlone/browser/syndication/templates/rss.xml.pt
M Products/CMFPlone/browser/syndication/templates/search-rss.pt
M Products/CMFPlone/browser/templates/accessibility-info.pt
M Products/CMFPlone/browser/templates/plone-upgrade.pt
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/configure.zcml
M Products/CMFPlone/controlpanel/browser/quickinstaller.py
M Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt
M Products/CMFPlone/profiles.zcml
M Products/CMFPlone/resources/browser/styles.pt
M Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
M Products/CMFPlone/skins/plone_login/external_login_return.cpt

diff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py
index f8e536e..f9dc8aa 100644
--- a/Products/CMFPlone/SkinsTool.py
+++ b/Products/CMFPlone/SkinsTool.py
@@ -20,7 +20,7 @@ class SkinsTool(PloneBaseTool, BaseTool):
     security.declareProtected(ManagePortal, 'addSkinSelection')
 
     def addSkinSelection(self, skinname, skinpath, test=0, make_default=0):
-        """ adds a skin selection 
+        """ adds a skin selection
         """
         super(SkinsTool, self).addSkinSelection(skinname, skinpath,
                                                 test=test, make_default=make_default)
diff --git a/Products/CMFPlone/browser/syndication/templates/RSS.pt b/Products/CMFPlone/browser/syndication/templates/RSS.pt
index 268c3b9..3a8c89d 100644
--- a/Products/CMFPlone/browser/syndication/templates/RSS.pt
+++ b/Products/CMFPlone/browser/syndication/templates/RSS.pt
@@ -36,7 +36,7 @@
     <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"
         tal:condition="feed/settings/render_body">
         <tal:opencdata tal:replace="structure python:'&lt;![CDATA['" />
-        <tal:block tal:replace="structure item/render_content_core"/>          
+        <tal:block tal:replace="structure item/render_content_core"/>
         <tal:closecdata tal:replace="structure python:']]&gt;'" />
     </content:encoded>
     <dc:publisher tal:content="item/publisher" />
diff --git a/Products/CMFPlone/browser/syndication/templates/atom.xml.pt b/Products/CMFPlone/browser/syndication/templates/atom.xml.pt
index 82157a2..213fc24 100644
--- a/Products/CMFPlone/browser/syndication/templates/atom.xml.pt
+++ b/Products/CMFPlone/browser/syndication/templates/atom.xml.pt
@@ -16,7 +16,7 @@
         type="application/atom+xml"
         tal:attributes="href request/ACTUAL_URL" />
   <title type="html" tal:content="feed/title" />
-  <subtitle tal:content="feed/description" 
+  <subtitle tal:content="feed/description"
             tal:condition="feed/description" />
   <updated tal:content="python:feed.modified.ISO8601()" />
   <link href="atom.xml"
@@ -27,7 +27,7 @@
   <logo tal:content="feed/logo" />
   <icon tal:content="feed/icon" />
   <generator uri="http://www.plone.org" version="1.0">plone</generator>
-  <rights tal:content="feed/rights" 
+  <rights tal:content="feed/rights"
           tal:condition="feed/rights"/>
   <author tal:condition="python:feed.show_about and feed.author_name and feed.author_email">
     <name tal:content="feed/author_name" />
@@ -62,7 +62,7 @@
               tal:content="author_name" />
         <name tal:condition="python: not author_name"
               tal:content="creator" />
-        <email tal:condition="author_email" 
+        <email tal:condition="author_email"
                tal:content="author_email" />
       </author>
 
diff --git a/Products/CMFPlone/browser/syndication/templates/newsml.xml.pt b/Products/CMFPlone/browser/syndication/templates/newsml.xml.pt
index 737f7f0..9a60ab4 100644
--- a/Products/CMFPlone/browser/syndication/templates/newsml.xml.pt
+++ b/Products/CMFPlone/browser/syndication/templates/newsml.xml.pt
@@ -4,7 +4,7 @@
                     date python:feed.published or view.current_date;
                     published_iso python:date.asdatetime().strftime('%Y%m%dT%H%M%S%z');
                     logo feed/logo;">
-                    
+
     <tal:comment replace="nothing">
         <!--
         This NewsML implementation is done to be used by MSN to provide news feeds.
@@ -86,7 +86,7 @@
                         </media-reference>
                         <media-caption tal:content="item/context/imageCaption|nothing"></media-caption>
                         </media>
-                        <tal:block tal:replace="structure item/render_content_core"/>          
+                        <tal:block tal:replace="structure item/render_content_core"/>
                     </body.content>
                 </body>
                 </nitf>
diff --git a/Products/CMFPlone/browser/syndication/templates/rss.xml.pt b/Products/CMFPlone/browser/syndication/templates/rss.xml.pt
index d321789..bc76d18 100644
--- a/Products/CMFPlone/browser/syndication/templates/rss.xml.pt
+++ b/Products/CMFPlone/browser/syndication/templates/rss.xml.pt
@@ -5,7 +5,7 @@
   xmlns:atom="http://www.w3.org/2005/Atom"
   tal:define="feed view/feed">
   <channel>
-    <atom:link rel="self" 
+    <atom:link rel="self"
                type="application/rss+xml"
                tal:attributes="href request/ACTUAL_URL" />
     <title tal:content="feed/title" />
@@ -21,11 +21,11 @@
       <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"
           tal:condition="feed/settings/render_body">
           <tal:opencdata tal:replace="structure python:'&lt;![CDATA['" />
-          <tal:block tal:replace="structure item/render_content_core"/>          
+          <tal:block tal:replace="structure item/render_content_core"/>
           <tal:closecdata tal:replace="structure python:']]&gt;'" />
       </content:encoded>
       <pubDate tal:content="item/published/rfc822|item/modified/rfc822" />
       <guid tal:content="item/guid|nothing" />
     </item>
   </channel>
-</rss>
\ No newline at end of file
+</rss>
diff --git a/Products/CMFPlone/browser/syndication/templates/search-rss.pt b/Products/CMFPlone/browser/syndication/templates/search-rss.pt
index 0187dad..513e757 100644
--- a/Products/CMFPlone/browser/syndication/templates/search-rss.pt
+++ b/Products/CMFPlone/browser/syndication/templates/search-rss.pt
@@ -35,7 +35,7 @@
     <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"
         tal:condition="feed/settings/render_body">
         <tal:opencdata tal:replace="structure python:'&lt;![CDATA['" />
-        <tal:block tal:replace="structure item/render_content_core"/>          
+        <tal:block tal:replace="structure item/render_content_core"/>
         <tal:closecdata tal:replace="structure python:']]&gt;'" />
     </content:encoded>
     <tal:about tal:condition="syn/show_author_info">
diff --git a/Products/CMFPlone/browser/templates/accessibility-info.pt b/Products/CMFPlone/browser/templates/accessibility-info.pt
index 0bdb2a8..f26f8b4 100644
--- a/Products/CMFPlone/browser/templates/accessibility-info.pt
+++ b/Products/CMFPlone/browser/templates/accessibility-info.pt
@@ -13,19 +13,19 @@
         i18n:translate="heading_accessibility_info">Accessibility</h1>
 
     <div id="content-core">
-        
+
 
       <p><tal:i18n i18n:translate="description_accessibility_info">
-            This site uses the open source Content Management System <a href="http://plone.com" i18n:name="plone">Plone</a>. 
+            This site uses the open source Content Management System <a href="http://plone.com" i18n:name="plone">Plone</a>.
             It meets the Web Content Accessibility Guidelines
 	    (<a href="http://www.w3.org/TR/WCAG20/"><acronym i18n:name="wcag"
                   title="Web Content Accessibility Guidelines"
-                  i18n:attributes="title title_wcag;">WCAG</acronym> v2.0</a>) level 'AA' for people with disabilities, 
-            including blindness and low vision, deafness and hearing loss, learning disabilities, 
-            cognitive limitations, limited movement, speech disabilities, photosensitivity, 
+                  i18n:attributes="title title_wcag;">WCAG</acronym> v2.0</a>) level 'AA' for people with disabilities,
+            including blindness and low vision, deafness and hearing loss, learning disabilities,
+            cognitive limitations, limited movement, speech disabilities, photosensitivity,
             and combinations of these.</tal:i18n></p>
          <p><tal:i18n i18n:translate="description_accessibility_info2">
-            It is also accessible to content authors with disabilities per the level 'AA' Authoring Tool Accessibility Guidelines 
+            It is also accessible to content authors with disabilities per the level 'AA' Authoring Tool Accessibility Guidelines
             (<a href="http://www.w3.org/TR/ATAG20/"><acronym i18n:name="atag"
                  title="Authoring Tool Accessibility Guidelines"
                  i18n:attributes="title title_atag;">ATAG</acronym> 2.0</a>).
@@ -42,7 +42,7 @@
 
         <p i18n:translate="description_validation">
        The site uses assistive technology like WAI-ARIA roles to the current best practices;
-       however, site standards and content vary over time.         
+       however, site standards and content vary over time.
 
         If this web site does not validate correctly, please contact the
         <span i18n:name="site_admin"><a href="/contact-info"
@@ -51,7 +51,7 @@
         </p>
 
         <p i18n:translate="description_wcag_aa_rating">
-        A number of checkpoints in 
+        A number of checkpoints in
         <acronym i18n:name="wcag"
                  title="Web Content Accessibility Guidelines"
                  i18n:attributes="title title_wcag;">WCAG</acronym> 2.0 and <acronym i18n:name="atag"
diff --git a/Products/CMFPlone/browser/templates/plone-upgrade.pt b/Products/CMFPlone/browser/templates/plone-upgrade.pt
index 7a4e6b8..931ecd1 100644
--- a/Products/CMFPlone/browser/templates/plone-upgrade.pt
+++ b/Products/CMFPlone/browser/templates/plone-upgrade.pt
@@ -169,7 +169,7 @@
 
         <div class="field">
           <label for="dry_run"><input id="dry_run" name="dry_run" type="checkbox" value="1:int" /> <span i18n:translate="">Dry run mode</span></label>
-          
+
           <div class="formHelp"  i18n:translate="">
             Run the upgrade and show the result without actually writing
             anything to the database.
diff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt
index 771518a..11213d6 100644
--- a/Products/CMFPlone/browser/templates/search.pt
+++ b/Products/CMFPlone/browser/templates/search.pt
@@ -192,7 +192,7 @@
                 </span>
               </div>
 
-                  
+
 
               <metal:searchresults define-macro="search_results">
                 <div class="autotabs">
diff --git a/Products/CMFPlone/configure.zcml b/Products/CMFPlone/configure.zcml
index 9271400..5a9ec72 100644
--- a/Products/CMFPlone/configure.zcml
+++ b/Products/CMFPlone/configure.zcml
@@ -37,7 +37,7 @@
   <include package="plone.session" />
   <include package="plone.protect" />
   <include package="plone.indexer" />
-  
+
   <!-- mockup -->
   <include package="mockup" />
 
diff --git a/Products/CMFPlone/controlpanel/browser/quickinstaller.py b/Products/CMFPlone/controlpanel/browser/quickinstaller.py
index 89ef4e9..9ce8f82 100644
--- a/Products/CMFPlone/controlpanel/browser/quickinstaller.py
+++ b/Products/CMFPlone/controlpanel/browser/quickinstaller.py
@@ -113,7 +113,7 @@ def get_addons(self, apply_filter=None, product_name=None):
                   'upgrades': only products with upgrades
                   'available': products that are not installed bit
                                could be
-                  'broken': uninstallable products with broken 
+                  'broken': uninstallable products with broken
                             dependencies
 
         @product_name:= a specific product id that you want info on. Do
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt
index 1714600..f85f054 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt
@@ -39,7 +39,7 @@
     </tal:ifnogroups>
 
     <tal:ifgroups tal:condition="view/group | nothing">
-      <tal:defs 
+      <tal:defs
         tal:define="showAll python:request.get('showAll', '') and not view.newSearch and 'y';
                     Batch python:modules['Products.CMFPlone'].Batch;
                     resultcount python:len(view.searchResults);
@@ -61,7 +61,7 @@
                tal:define="token context/@@authenticator/token">
 
             <div class="autotabs">
-             
+
               <nav class="autotoc-nav">
                 <a class="active"
                    href="${portal_url}/@@usergroup-groupmembership?${groupquery}"
diff --git a/Products/CMFPlone/profiles.zcml b/Products/CMFPlone/profiles.zcml
index ecf2f33..4fdbb6a 100644
--- a/Products/CMFPlone/profiles.zcml
+++ b/Products/CMFPlone/profiles.zcml
@@ -28,5 +28,5 @@
       for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
       provides="Products.GenericSetup.interfaces.EXTENSION"
       />
- 
+
 </configure>
diff --git a/Products/CMFPlone/resources/browser/styles.pt b/Products/CMFPlone/resources/browser/styles.pt
index 3df7a10..b999678 100644
--- a/Products/CMFPlone/resources/browser/styles.pt
+++ b/Products/CMFPlone/resources/browser/styles.pt
@@ -1,7 +1,7 @@
 <tal:styles repeat="style view/styles"
   ><tal:block define="condcomment style/conditionalcomment"
     ><tal:wcondcomment tal:condition="condcomment">
-        <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />    
+        <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />
     </tal:wcondcomment
     ><link rel="style"
           type="text/css"
diff --git a/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt b/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
index 5ff3b8c..7eca5d2 100644
--- a/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
+++ b/Products/CMFPlone/skins/plone_content/folder_full_view_item.pt
@@ -65,9 +65,9 @@
 
         <p class="more" tal:condition="python:not(item_macro) or rendering_error">
             <a href=""
-               tal:attributes="href python:test(item_type in use_view_action, item_url+'/view', item_url);"> 
-               <span class="hiddenStructure"><span tal:replace="context/Title" /> - </span> 
-               <span i18n:translate="read_more">Read More&hellip;</span> 
+               tal:attributes="href python:test(item_type in use_view_action, item_url+'/view', item_url);">
+               <span class="hiddenStructure"><span tal:replace="context/Title" /> - </span>
+               <span i18n:translate="read_more">Read More&hellip;</span>
             </a>
         </p>
 
diff --git a/Products/CMFPlone/skins/plone_login/external_login_return.cpt b/Products/CMFPlone/skins/plone_login/external_login_return.cpt
index 898d94b..d926f00 100644
--- a/Products/CMFPlone/skins/plone_login/external_login_return.cpt
+++ b/Products/CMFPlone/skins/plone_login/external_login_return.cpt
@@ -78,7 +78,7 @@
   <metal:invalid tal:condition="not:valid">
       <div metal:use-macro="context/login_failed/macros/login_failed" />
   </metal:invalid>
- 
+
 </metal:main>
 
 </body>


