Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-01-28T16:10:42+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/3fc3eea16001041bada387d92a092aa5b430d213

Revert "Revert "Ported to plone.app.testing""

Files changed:
A README.rst
M CHANGES.txt
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browser/typeinfo.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/browserdefault.zcml
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M setup.py
D Products/CMFDynamicViewFTI/interface.py
D README.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index d2f3def..39ebd84 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,11 +1,17 @@
 Changelog
 =========
 
-4.0.6 (unreleased)
+4.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Ported tests to plone.app.testing
+  [tomgross]
 
+- Removed BBB interface.py module
+  [tomgross]
+
+- pep8ify
+  [tomgross]
 
 4.0.5 (2013-05-23)
 ------------------
diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index 7141eea..55ae3e2 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -5,6 +5,7 @@
 from Products.CMFCore import utils as cmf_utils
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
+
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
     cmf_utils.registerIcon(DynamicViewTypeInformation, 'images/typeinfo.gif', globals())
diff --git a/Products/CMFDynamicViewFTI/browser/typeinfo.py b/Products/CMFDynamicViewFTI/browser/typeinfo.py
index 80d341d..62f9140 100644
--- a/Products/CMFDynamicViewFTI/browser/typeinfo.py
+++ b/Products/CMFDynamicViewFTI/browser/typeinfo.py
@@ -7,10 +7,10 @@
 from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView
 from Products.CMFDynamicViewFTI import DynamicViewTypeInformation
 
+
 class DVFactoryTypeInformationAddView(FactoryTypeInformationAddView):
     """See FactoryTypeInformationAddView that does all the job"""
 
     klass = DynamicViewTypeInformation
 
     description = u'A dynamic view type information object defines a portal type.'
-
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index 09356e9..c6bd201 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -14,7 +14,6 @@
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Acquisition import aq_base
-from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.permissions import View
 
@@ -26,6 +25,7 @@
 _marker = object()
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
+
 class BrowserDefaultMixin(Base):
     """Mixin class for content types using the dynamic view FTI
 
@@ -39,13 +39,13 @@ class BrowserDefaultMixin(Base):
 
     _at_fti_meta_type = fti_meta_type
     aliases = {
-        '(Default)'  : '(dynamic view)',
-        'view'       : '(selected layout)',
-        'edit'       : 'base_edit',
-        'properties' : 'base_metadata',
-        'sharing'    : 'folder_localrole_form',
-        'gethtml'    : '',
-        'mkdir'      : '',
+        '(Default)': '(dynamic view)',
+        'view': '(selected layout)',
+        'edit': 'base_edit',
+        'properties': 'base_metadata',
+        'sharing': 'folder_localrole_form',
+        'gethtml': '',
+        'mkdir': '',
         }
 
     default_view = "base_view"
@@ -54,6 +54,7 @@ class BrowserDefaultMixin(Base):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'defaultView')
+
     def defaultView(self, request=None):
         """
         Get the actual view to use. If a default page is set, its id will
@@ -66,6 +67,7 @@ def defaultView(self, request=None):
             return fti.defaultView(self)
 
     security.declareProtected(View, '__call__')
+
     def __call__(self):
         """
         Resolve and return the selected view template applied to the object.
@@ -75,6 +77,7 @@ def __call__(self):
         return template()
 
     security.declareProtected(View, 'getDefaultPage')
+
     def getDefaultPage(self):
         """Return the id of the default page, or None if none is set.
 
@@ -91,6 +94,7 @@ def getDefaultPage(self):
                 return fti.getDefaultPage(self, check_exists=True)
 
     security.declareProtected(View, 'getLayout')
+
     def getLayout(self, **kw):
         """Get the selected view method.
 
@@ -103,6 +107,7 @@ def getLayout(self, **kw):
             return fti.getViewMethod(self)
 
     security.declarePublic('canSetDefaultPage')
+
     def canSetDefaultPage(self):
         """Check if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
@@ -114,6 +119,7 @@ def canSetDefaultPage(self):
         return member.has_permission(ModifyViewTemplate, self)
 
     security.declareProtected(ModifyViewTemplate, 'setDefaultPage')
+
     def setDefaultPage(self, objectId):
         """Set the default page to display in this (folderish) object.
 
@@ -127,18 +133,19 @@ def setDefaultPage(self, objectId):
         if objectId is not None:
             new_page = getattr(self, objectId, None)
         if self.hasProperty('default_page'):
-            pages = self.getProperty('default_page','')
+            pages = self.getProperty('default_page', '')
             if isinstance(pages, (list, tuple)):
                 for page in pages:
                     old_page = getattr(self, page, None)
-                    if page is not None: break
+                    if page is not None:
+                        break
             elif isinstance(pages, str):
                 old_page = getattr(self, pages, None)
 
             if objectId is None:
                 self.manage_delProperties(['default_page'])
             else:
-                self.manage_changeProperties(default_page = objectId)
+                self.manage_changeProperties(default_page=objectId)
         else:
             if objectId is not None:
                 self.manage_addProperty('default_page', objectId, 'string')
@@ -149,6 +156,7 @@ def setDefaultPage(self, objectId):
                 old_page.reindexObject(['is_default_page'])
 
     security.declareProtected(ModifyViewTemplate, 'setLayout')
+
     def setLayout(self, layout):
         """Set the layout as the current view.
 
@@ -157,7 +165,7 @@ def setLayout(self, layout):
         turned off by calling setDefaultPage(None).
         """
         if not (layout and isinstance(layout, basestring)):
-            raise ValueError, ("layout must be a non empty string, got %s(%s)" %
+            raise ValueError("layout must be a non empty string, got %s(%s)" %
                                (layout, type(layout)))
 
         defaultPage = self.getDefaultPage()
@@ -165,13 +173,13 @@ def setLayout(self, layout):
             return
 
         if self.hasProperty('layout'):
-            self.manage_changeProperties(layout = layout)
+            self.manage_changeProperties(layout=layout)
         else:
             if getattr(aq_base(self), 'layout', _marker) is not _marker:
                 # Archetypes remains? clean up
                 old = self.layout
                 if old and not isinstance(old, basestring):
-                    raise RuntimeError, ("layout attribute exists on %s and is"
+                    raise RuntimeError("layout attribute exists on %s and is"
                                          "no string: %s" % (self, type(old)))
                 delattr(self, 'layout')
 
@@ -180,16 +188,18 @@ def setLayout(self, layout):
         self.setDefaultPage(None)
 
     security.declareProtected(View, 'getDefaultLayout')
+
     def getDefaultLayout(self):
         """Get the default layout method.
         """
         fti = self.getTypeInfo()
         if fti is None:
-            return "base_view" # XXX
+            return "base_view"  # XXX
         else:
             return fti.getDefaultViewMethod(self)
 
     security.declarePublic('canSetLayout')
+
     def canSetLayout(self):
         """Check if the current authenticated user is permitted to select a layout.
         """
@@ -198,6 +208,7 @@ def canSetLayout(self):
         return member.has_permission(ModifyViewTemplate, self)
 
     security.declareProtected(View, 'getAvailableLayouts')
+
     def getAvailableLayouts(self):
         """Get the layouts registered for this object from its FTI.
         """
diff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py
index 631fb2a..59ddadf 100644
--- a/Products/CMFDynamicViewFTI/fti.py
+++ b/Products/CMFDynamicViewFTI/fti.py
@@ -56,6 +56,7 @@ def om_has_key(context, key):
 
 fti_meta_type = 'Factory-based Type Information with dynamic views'
 
+
 class DynamicViewTypeInformation(FactoryTypeInformation):
     """FTI with dynamic views
 
@@ -68,13 +69,13 @@ class DynamicViewTypeInformation(FactoryTypeInformation):
     security = ClassSecurityInfo()
 
     _properties = FactoryTypeInformation._properties + (
-        { 'id': 'default_view', 'type': 'string', 'mode': 'w',
+        {'id': 'default_view', 'type': 'string', 'mode': 'w',
           'label': 'Default view method'
         },
-        { 'id': 'view_methods', 'type': 'lines', 'mode': 'w',
+        {'id': 'view_methods', 'type': 'lines', 'mode': 'w',
           'label': 'Available view methods'
         },
-        { 'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
+        {'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
           'label': 'Fall back to default view?'
         },
     )
@@ -94,26 +95,29 @@ def manage_changeProperties(self, **kw):
             # TODO: use view action
             self.default_view = default_view = self.immediate_view
         if not view_methods:
-            self.view_methods = view_methods = (default_view,)
+            self.view_methods = view_methods = (default_view, )
         if default_view and default_view not in view_methods:
             raise ValueError, "%s not in %s" % (default_view, view_methods)
 
     security.declareProtected(View, 'getDefaultViewMethod')
+
     def getDefaultViewMethod(self, context):
         """Get the default view method from the FTI
         """
         return str(self.default_view)
 
     security.declareProtected(View, 'getAvailableViewMethods')
+
     def getAvailableViewMethods(self, context):
         """Get a list of registered view methods
         """
         methods = self.view_methods
         if isinstance(methods, basestring):
-            methods = (methods,)
+            methods = (methods, )
         return tuple(methods)
 
     security.declareProtected(View, 'getViewMethod')
+
     def getViewMethod(self, context, enforce_available=False, check_exists=False):
         """Get view method (aka layout) name from context
 
@@ -140,6 +144,7 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
         return layout
 
     security.declareProtected(View, 'getDefaultPage')
+
     def getDefaultPage(self, context, check_exists=False):
         """Get the default page from a folderish object
 
@@ -151,7 +156,7 @@ def getDefaultPage(self, context, check_exists=False):
         Return -- None for no default page or a string
         """
         if not getattr(aq_base(context), 'isPrincipiaFolderish', False):
-            return None # non folderish objects don't have a default page per se
+            return None  # non folderish objects don't have a default page per se
 
         default_page = getattr(aq_base(context), 'default_page', None)
 
@@ -171,6 +176,7 @@ def getDefaultPage(self, context, check_exists=False):
         return default_page
 
     security.declareProtected(View, 'defaultView')
+
     def defaultView(self, context):
         """Get the current view to use for an object. If a default page is  set,
         use that, else use the currently selected view method/layout.
@@ -189,6 +195,7 @@ def defaultView(self, context):
             return self.getViewMethod(context, check_exists=fallback)
 
     security.declarePublic('queryMethodID')
+
     def queryMethodID(self, alias, default=None, context=None):
         """ Query method ID by alias.
 
diff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py
deleted file mode 100644
index fdefee2..0000000
--- a/Products/CMFDynamicViewFTI/interface.py
+++ /dev/null
@@ -1,3 +0,0 @@
-# BBB module will be removed at some point
-from Products.CMFDynamicViewFTI.interfaces import *
-
diff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py
index c4f39b2..9d0f94a 100644
--- a/Products/CMFDynamicViewFTI/interfaces.py
+++ b/Products/CMFDynamicViewFTI/interfaces.py
@@ -2,6 +2,7 @@
 
 from Products.CMFCore.interfaces import ITypeInformation
 
+
 class IDynamicViewTypeInformation(ITypeInformation):
     """Interface for FTI with dynamic views
 
@@ -12,7 +13,7 @@ def getAvailableViewMethods(context):
         """Get a list of registered view methods
         """
 
-    def getViewMethod(context, enforce_available = True):
+    def getViewMethod(context, enforce_available=True):
         """Get view method name from context
 
         Return -- view method from context or default view name
@@ -44,6 +45,7 @@ def defaultView(context):
         Return -- a string containing the name of the layout
         """
 
+
 class IBrowserDefault(Interface):
     """Content supporting different views on a per-instance basis.
     
diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
index d709adc..373c6ac 100644
--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
@@ -1,34 +1,43 @@
 #
 # CMFDVFTITestCase
 #
-
-from Products.CMFTestCase.ctc import *
-from Products.CMFTestCase.layer import onsetup
+from plone.app.testing import bbb
+from plone.app import testing
 
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.GenericSetup import EXTENSION, profile_registry
 
-installProduct('CMFDynamicViewFTI')
 
-@onsetup
-def setupSampleTypeProfile():
-    profile_registry.registerProfile('CMFDVFTI_sampletypes',
-        'CMFDynamicViewFTI Sample Content Types',
-        'Extension profile including CMFDVFTI sample content types',
-        'profiles/sample_types',
-        'CMFDynamicViewFTI',
-        EXTENSION,
-        for_=ISiteRoot)
+class PloneTestCaseFixture(bbb.PloneTestCaseFixture):
 
-setupSampleTypeProfile()
-setupCMFSite(extension_profiles=['CMFDynamicViewFTI:CMFDVFTI_sampletypes'])
+    defaultBases = (bbb.PTC_FIXTURE, )
 
-class CMFDVFTITestCase(CMFTestCase):
-    """This is a stub now, but in case you want to try
-       something fancy on Your Branch (tm), put it here.
-    """
+    def setUpZope(self, app, configurationContext):
+        profile_registry.registerProfile('CMFDVFTI_sampletypes',
+            'CMFDynamicViewFTI Sample Content Types',
+            'Extension profile including CMFDVFTI sample content types',
+            'profiles/sample_types',
+            'CMFDynamicViewFTI',
+            EXTENSION,
+            for_=ISiteRoot)
+        import Products.CMFDynamicViewFTI.tests
+        self.loadZCML(name='browserdefault.zcml',
+                      package=Products.CMFDynamicViewFTI.tests)
+
+    def setUpPloneSite(self, portal):
+        self.applyProfile(portal, 'CMFDynamicViewFTI:CMFDVFTI_sampletypes')
 
-class FunctionalTestCase(Functional, CMFTestCase):
+    def tearDownZope(self, app):
+        pass
+
+CDV_FIXTURE = PloneTestCaseFixture()
+CDV_FUNCTIONAL_TESTING = testing.FunctionalTesting(
+    bases=(CDV_FIXTURE, ), name='CMFDynamicViewFTI Testing:Functional')
+
+
+class CMFDVFTITestCase(bbb.PloneTestCase):
     """This is a stub now, but in case you want to try
        something fancy on Your Branch (tm), put it here.
     """
+
+    layer = CDV_FUNCTIONAL_TESTING
diff --git a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
index a6ac4b3..1624eb1 100644
--- a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
+++ b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
@@ -1,5 +1,4 @@
 <configure
-    xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser"
     i18n_domain="plonetest">
 
diff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
index 796d1e7..05623cf 100644
--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
@@ -12,14 +12,17 @@
 
 from zope.interface.verify import verifyClass
 
+
 class DummyFolder(BrowserDefaultMixin):
 
     def getTypeInfo(self):
         return self.fti
 
+
 class IDummy(Interface):
     """ marker interface for a zope 3 view """
 
+
 class TestBrowserDefault(CMFDVFTITestCase.CMFDVFTITestCase):
 
     def test_doesImplementISelectableBrowserDefault(self):
@@ -30,6 +33,7 @@ def test_doesImplementISelectableBrowserDefault(self):
     def test_extendsInterface(self):
         self.failUnless(ISelectableBrowserDefault.extends(IBrowserDefault))
 
+
 class TestAvailableLayouts(CMFDVFTITestCase.CMFDVFTITestCase):
 
     def afterSetUp(self):
@@ -38,30 +42,20 @@ def afterSetUp(self):
         self.dfolder = DummyFolder()
         self.dfolder.fti = self.types['DynFolder']
 
-        try:
-            from Zope2.App import zcml
-        except ImportError:
-            from Products.Five import zcml
-        import plone.app.contentmenu
-        import Products.CMFDynamicViewFTI.tests
-        zcml.load_config('configure.zcml', plone.app.contentmenu)
-        zcml.load_config('browserdefault.zcml', 
-                         Products.CMFDynamicViewFTI.tests)
-        
     def test_Zope3View(self):
         dfolder = self.dfolder
         dfolder.layout = 'zope3_view'
         dfolder.REQUEST = TestRequest()
         view_methods = dfolder.getAvailableLayouts()
-        view_ids = [ view_id for view_id, foo in view_methods ]
+        view_ids = [view_id for view_id, foo in view_methods]
         self.failIf(dfolder.layout in view_ids)
-        
+
         # Mark the object with interface connected to the zope 3 view
         directlyProvides(dfolder, IDummy)
         view_methods = dfolder.getAvailableLayouts()
-        view_ids = [ view_id for view_id, foo in view_methods ]
+        view_ids = [view_id for view_id, foo in view_methods]
         self.failIf(dfolder.layout not in view_ids)
-        
+
     def test_Zope3ViewTitle(self):
         dfolder = self.dfolder
         dfolder.layout = 'zope3_view'
@@ -72,10 +66,3 @@ def test_Zope3ViewTitle(self):
         for id, title in view_methods:
             if id == dfolder.layout:
                 self.assertEqual(title, 'Zope3 Test View')
-        
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestBrowserDefault))
-    suite.addTest(makeSuite(TestAvailableLayouts))    
-    return suite
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index c5cf02a..68ea2f1 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -8,6 +8,9 @@
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
+from Products.Archetypes.atapi import StringField
+from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
 
@@ -169,37 +172,31 @@ def test_NonFolderishObjectReturnsNone(self):
         self.assertEqual(info.getDefaultPage(dynfolder), None)
 
 
-class TestEmptyLayoutBug(CMFDVFTITestCase.FunctionalTestCase):
+class TestEmptyLayoutBug(CMFDVFTITestCase.CMFDVFTITestCase):
     # Finally, here is why we did all this...
 
     def afterSetUp(self):
         # Make a DynFolder
         self.folder.invokeFactory('DynFolder', id='dynfolder')
         self.dynfolder = self.folder.dynfolder
-        self.dynfolder.layout = '' # Empty layout triggers bug
+        self.dynfolder.layout = ''  # Empty layout triggers bug
         self.dynfolder_path = self.dynfolder.absolute_url(1)
 
         # Make a DynDocument
         self.folder.invokeFactory('DynDocument', id='dyndocument')
         self.dyndocument = self.folder.dyndocument
-        self.dyndocument.layout = '' # Empty layout triggers bug
+        self.dyndocument.layout = ''  # Empty layout triggers bug
         self.dyndocument_path = self.dyndocument.absolute_url(1)
 
-        self.basic = '%s:%s' % (CMFDVFTITestCase.default_user,
-                                CMFDVFTITestCase.default_password)
+        self.basic = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
 
     def test_FolderEmptyLayoutBug(self):
-        response = self.publish(self.dynfolder_path+'/view', basic=self.basic)
+        response = self.publish(self.dynfolder_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
 
     def test_DocumentEmptyLayoutBug(self):
-        response = self.publish(self.dyndocument_path+'/view', basic=self.basic)
+        # add a text field to dyndocument which is not present
+        # but needed for the standard view
+        self.dyndocument.Schema().addField(StringField('text'))
+        response = self.publish(self.dyndocument_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestFTI))
-    suite.addTest(makeSuite(TestEmptyLayoutBug))
-    return suite
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..4d80970
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,13 @@
+Overview
+========
+
+CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
+an additional base class for types and a new factory type information (FTI).
+
+The FTI contains two new properties for the default view method and
+supplementary view methods. The queryMethodID functionality used for
+alias lookups is enhanced to support a new keyword (dynamic view).
+
+The BrowserDefaultMixin class adds some methods to classes. It is not required
+to make use of the basic features but it is recommend to subclass your types
+from the class to gain more functionality.
diff --git a/README.txt b/README.txt
deleted file mode 100644
index 4d80970..0000000
--- a/README.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Overview
-========
-
-CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
-an additional base class for types and a new factory type information (FTI).
-
-The FTI contains two new properties for the default view method and
-supplementary view methods. The queryMethodID functionality used for
-alias lookups is enhanced to support a new keyword (dynamic view).
-
-The BrowserDefaultMixin class adds some methods to classes. It is not required
-to make use of the basic features but it is recommend to subclass your types
-from the class to gain more functionality.
diff --git a/setup.py b/setup.py
index d6aa586..866827c 100644
--- a/setup.py
+++ b/setup.py
@@ -5,12 +5,14 @@
 setup(name='Products.CMFDynamicViewFTI',
       version=version,
       description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
-      long_description=open("README.txt").read() + "\n" +
+      long_description=open("README.rst").read() + "\n" +
                        open("CHANGES.txt").read(),
       classifiers=[
         "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
         "Framework :: Zope2",
         "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
       ],
       keywords='Zope CMF Plone dynamic view',
       author='Plone Foundation',
@@ -25,7 +27,8 @@
         test=[
             'plone.app.contentmenu',
             'zope.publisher',
-            'Products.CMFTestCase',
+            'plone.app.testing',
+            'Products.Archetypes',
         ]
       ),
       install_requires=[


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-03-10T15:44:16+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/a540ca7aa770c87d4f0ddafe13b7cb7524d20415

Merge pull request #3 from plone/revert-2-revert-1-tomgross-ptc

Revert "Revert "Ported to plone.app.testing""

Files changed:
A README.rst
M CHANGES.txt
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browser/typeinfo.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/browserdefault.zcml
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M setup.py
D Products/CMFDynamicViewFTI/interface.py
D README.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index d2f3def..39ebd84 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,11 +1,17 @@
 Changelog
 =========
 
-4.0.6 (unreleased)
+4.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Ported tests to plone.app.testing
+  [tomgross]
 
+- Removed BBB interface.py module
+  [tomgross]
+
+- pep8ify
+  [tomgross]
 
 4.0.5 (2013-05-23)
 ------------------
diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index 7141eea..55ae3e2 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -5,6 +5,7 @@
 from Products.CMFCore import utils as cmf_utils
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
+
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
     cmf_utils.registerIcon(DynamicViewTypeInformation, 'images/typeinfo.gif', globals())
diff --git a/Products/CMFDynamicViewFTI/browser/typeinfo.py b/Products/CMFDynamicViewFTI/browser/typeinfo.py
index 80d341d..62f9140 100644
--- a/Products/CMFDynamicViewFTI/browser/typeinfo.py
+++ b/Products/CMFDynamicViewFTI/browser/typeinfo.py
@@ -7,10 +7,10 @@
 from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView
 from Products.CMFDynamicViewFTI import DynamicViewTypeInformation
 
+
 class DVFactoryTypeInformationAddView(FactoryTypeInformationAddView):
     """See FactoryTypeInformationAddView that does all the job"""
 
     klass = DynamicViewTypeInformation
 
     description = u'A dynamic view type information object defines a portal type.'
-
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index 09356e9..c6bd201 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -14,7 +14,6 @@
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Acquisition import aq_base
-from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.permissions import View
 
@@ -26,6 +25,7 @@
 _marker = object()
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
+
 class BrowserDefaultMixin(Base):
     """Mixin class for content types using the dynamic view FTI
 
@@ -39,13 +39,13 @@ class BrowserDefaultMixin(Base):
 
     _at_fti_meta_type = fti_meta_type
     aliases = {
-        '(Default)'  : '(dynamic view)',
-        'view'       : '(selected layout)',
-        'edit'       : 'base_edit',
-        'properties' : 'base_metadata',
-        'sharing'    : 'folder_localrole_form',
-        'gethtml'    : '',
-        'mkdir'      : '',
+        '(Default)': '(dynamic view)',
+        'view': '(selected layout)',
+        'edit': 'base_edit',
+        'properties': 'base_metadata',
+        'sharing': 'folder_localrole_form',
+        'gethtml': '',
+        'mkdir': '',
         }
 
     default_view = "base_view"
@@ -54,6 +54,7 @@ class BrowserDefaultMixin(Base):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'defaultView')
+
     def defaultView(self, request=None):
         """
         Get the actual view to use. If a default page is set, its id will
@@ -66,6 +67,7 @@ def defaultView(self, request=None):
             return fti.defaultView(self)
 
     security.declareProtected(View, '__call__')
+
     def __call__(self):
         """
         Resolve and return the selected view template applied to the object.
@@ -75,6 +77,7 @@ def __call__(self):
         return template()
 
     security.declareProtected(View, 'getDefaultPage')
+
     def getDefaultPage(self):
         """Return the id of the default page, or None if none is set.
 
@@ -91,6 +94,7 @@ def getDefaultPage(self):
                 return fti.getDefaultPage(self, check_exists=True)
 
     security.declareProtected(View, 'getLayout')
+
     def getLayout(self, **kw):
         """Get the selected view method.
 
@@ -103,6 +107,7 @@ def getLayout(self, **kw):
             return fti.getViewMethod(self)
 
     security.declarePublic('canSetDefaultPage')
+
     def canSetDefaultPage(self):
         """Check if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
@@ -114,6 +119,7 @@ def canSetDefaultPage(self):
         return member.has_permission(ModifyViewTemplate, self)
 
     security.declareProtected(ModifyViewTemplate, 'setDefaultPage')
+
     def setDefaultPage(self, objectId):
         """Set the default page to display in this (folderish) object.
 
@@ -127,18 +133,19 @@ def setDefaultPage(self, objectId):
         if objectId is not None:
             new_page = getattr(self, objectId, None)
         if self.hasProperty('default_page'):
-            pages = self.getProperty('default_page','')
+            pages = self.getProperty('default_page', '')
             if isinstance(pages, (list, tuple)):
                 for page in pages:
                     old_page = getattr(self, page, None)
-                    if page is not None: break
+                    if page is not None:
+                        break
             elif isinstance(pages, str):
                 old_page = getattr(self, pages, None)
 
             if objectId is None:
                 self.manage_delProperties(['default_page'])
             else:
-                self.manage_changeProperties(default_page = objectId)
+                self.manage_changeProperties(default_page=objectId)
         else:
             if objectId is not None:
                 self.manage_addProperty('default_page', objectId, 'string')
@@ -149,6 +156,7 @@ def setDefaultPage(self, objectId):
                 old_page.reindexObject(['is_default_page'])
 
     security.declareProtected(ModifyViewTemplate, 'setLayout')
+
     def setLayout(self, layout):
         """Set the layout as the current view.
 
@@ -157,7 +165,7 @@ def setLayout(self, layout):
         turned off by calling setDefaultPage(None).
         """
         if not (layout and isinstance(layout, basestring)):
-            raise ValueError, ("layout must be a non empty string, got %s(%s)" %
+            raise ValueError("layout must be a non empty string, got %s(%s)" %
                                (layout, type(layout)))
 
         defaultPage = self.getDefaultPage()
@@ -165,13 +173,13 @@ def setLayout(self, layout):
             return
 
         if self.hasProperty('layout'):
-            self.manage_changeProperties(layout = layout)
+            self.manage_changeProperties(layout=layout)
         else:
             if getattr(aq_base(self), 'layout', _marker) is not _marker:
                 # Archetypes remains? clean up
                 old = self.layout
                 if old and not isinstance(old, basestring):
-                    raise RuntimeError, ("layout attribute exists on %s and is"
+                    raise RuntimeError("layout attribute exists on %s and is"
                                          "no string: %s" % (self, type(old)))
                 delattr(self, 'layout')
 
@@ -180,16 +188,18 @@ def setLayout(self, layout):
         self.setDefaultPage(None)
 
     security.declareProtected(View, 'getDefaultLayout')
+
     def getDefaultLayout(self):
         """Get the default layout method.
         """
         fti = self.getTypeInfo()
         if fti is None:
-            return "base_view" # XXX
+            return "base_view"  # XXX
         else:
             return fti.getDefaultViewMethod(self)
 
     security.declarePublic('canSetLayout')
+
     def canSetLayout(self):
         """Check if the current authenticated user is permitted to select a layout.
         """
@@ -198,6 +208,7 @@ def canSetLayout(self):
         return member.has_permission(ModifyViewTemplate, self)
 
     security.declareProtected(View, 'getAvailableLayouts')
+
     def getAvailableLayouts(self):
         """Get the layouts registered for this object from its FTI.
         """
diff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py
index 631fb2a..59ddadf 100644
--- a/Products/CMFDynamicViewFTI/fti.py
+++ b/Products/CMFDynamicViewFTI/fti.py
@@ -56,6 +56,7 @@ def om_has_key(context, key):
 
 fti_meta_type = 'Factory-based Type Information with dynamic views'
 
+
 class DynamicViewTypeInformation(FactoryTypeInformation):
     """FTI with dynamic views
 
@@ -68,13 +69,13 @@ class DynamicViewTypeInformation(FactoryTypeInformation):
     security = ClassSecurityInfo()
 
     _properties = FactoryTypeInformation._properties + (
-        { 'id': 'default_view', 'type': 'string', 'mode': 'w',
+        {'id': 'default_view', 'type': 'string', 'mode': 'w',
           'label': 'Default view method'
         },
-        { 'id': 'view_methods', 'type': 'lines', 'mode': 'w',
+        {'id': 'view_methods', 'type': 'lines', 'mode': 'w',
           'label': 'Available view methods'
         },
-        { 'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
+        {'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
           'label': 'Fall back to default view?'
         },
     )
@@ -94,26 +95,29 @@ def manage_changeProperties(self, **kw):
             # TODO: use view action
             self.default_view = default_view = self.immediate_view
         if not view_methods:
-            self.view_methods = view_methods = (default_view,)
+            self.view_methods = view_methods = (default_view, )
         if default_view and default_view not in view_methods:
             raise ValueError, "%s not in %s" % (default_view, view_methods)
 
     security.declareProtected(View, 'getDefaultViewMethod')
+
     def getDefaultViewMethod(self, context):
         """Get the default view method from the FTI
         """
         return str(self.default_view)
 
     security.declareProtected(View, 'getAvailableViewMethods')
+
     def getAvailableViewMethods(self, context):
         """Get a list of registered view methods
         """
         methods = self.view_methods
         if isinstance(methods, basestring):
-            methods = (methods,)
+            methods = (methods, )
         return tuple(methods)
 
     security.declareProtected(View, 'getViewMethod')
+
     def getViewMethod(self, context, enforce_available=False, check_exists=False):
         """Get view method (aka layout) name from context
 
@@ -140,6 +144,7 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
         return layout
 
     security.declareProtected(View, 'getDefaultPage')
+
     def getDefaultPage(self, context, check_exists=False):
         """Get the default page from a folderish object
 
@@ -151,7 +156,7 @@ def getDefaultPage(self, context, check_exists=False):
         Return -- None for no default page or a string
         """
         if not getattr(aq_base(context), 'isPrincipiaFolderish', False):
-            return None # non folderish objects don't have a default page per se
+            return None  # non folderish objects don't have a default page per se
 
         default_page = getattr(aq_base(context), 'default_page', None)
 
@@ -171,6 +176,7 @@ def getDefaultPage(self, context, check_exists=False):
         return default_page
 
     security.declareProtected(View, 'defaultView')
+
     def defaultView(self, context):
         """Get the current view to use for an object. If a default page is  set,
         use that, else use the currently selected view method/layout.
@@ -189,6 +195,7 @@ def defaultView(self, context):
             return self.getViewMethod(context, check_exists=fallback)
 
     security.declarePublic('queryMethodID')
+
     def queryMethodID(self, alias, default=None, context=None):
         """ Query method ID by alias.
 
diff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py
deleted file mode 100644
index fdefee2..0000000
--- a/Products/CMFDynamicViewFTI/interface.py
+++ /dev/null
@@ -1,3 +0,0 @@
-# BBB module will be removed at some point
-from Products.CMFDynamicViewFTI.interfaces import *
-
diff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py
index c4f39b2..9d0f94a 100644
--- a/Products/CMFDynamicViewFTI/interfaces.py
+++ b/Products/CMFDynamicViewFTI/interfaces.py
@@ -2,6 +2,7 @@
 
 from Products.CMFCore.interfaces import ITypeInformation
 
+
 class IDynamicViewTypeInformation(ITypeInformation):
     """Interface for FTI with dynamic views
 
@@ -12,7 +13,7 @@ def getAvailableViewMethods(context):
         """Get a list of registered view methods
         """
 
-    def getViewMethod(context, enforce_available = True):
+    def getViewMethod(context, enforce_available=True):
         """Get view method name from context
 
         Return -- view method from context or default view name
@@ -44,6 +45,7 @@ def defaultView(context):
         Return -- a string containing the name of the layout
         """
 
+
 class IBrowserDefault(Interface):
     """Content supporting different views on a per-instance basis.
     
diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
index d709adc..373c6ac 100644
--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
@@ -1,34 +1,43 @@
 #
 # CMFDVFTITestCase
 #
-
-from Products.CMFTestCase.ctc import *
-from Products.CMFTestCase.layer import onsetup
+from plone.app.testing import bbb
+from plone.app import testing
 
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.GenericSetup import EXTENSION, profile_registry
 
-installProduct('CMFDynamicViewFTI')
 
-@onsetup
-def setupSampleTypeProfile():
-    profile_registry.registerProfile('CMFDVFTI_sampletypes',
-        'CMFDynamicViewFTI Sample Content Types',
-        'Extension profile including CMFDVFTI sample content types',
-        'profiles/sample_types',
-        'CMFDynamicViewFTI',
-        EXTENSION,
-        for_=ISiteRoot)
+class PloneTestCaseFixture(bbb.PloneTestCaseFixture):
 
-setupSampleTypeProfile()
-setupCMFSite(extension_profiles=['CMFDynamicViewFTI:CMFDVFTI_sampletypes'])
+    defaultBases = (bbb.PTC_FIXTURE, )
 
-class CMFDVFTITestCase(CMFTestCase):
-    """This is a stub now, but in case you want to try
-       something fancy on Your Branch (tm), put it here.
-    """
+    def setUpZope(self, app, configurationContext):
+        profile_registry.registerProfile('CMFDVFTI_sampletypes',
+            'CMFDynamicViewFTI Sample Content Types',
+            'Extension profile including CMFDVFTI sample content types',
+            'profiles/sample_types',
+            'CMFDynamicViewFTI',
+            EXTENSION,
+            for_=ISiteRoot)
+        import Products.CMFDynamicViewFTI.tests
+        self.loadZCML(name='browserdefault.zcml',
+                      package=Products.CMFDynamicViewFTI.tests)
+
+    def setUpPloneSite(self, portal):
+        self.applyProfile(portal, 'CMFDynamicViewFTI:CMFDVFTI_sampletypes')
 
-class FunctionalTestCase(Functional, CMFTestCase):
+    def tearDownZope(self, app):
+        pass
+
+CDV_FIXTURE = PloneTestCaseFixture()
+CDV_FUNCTIONAL_TESTING = testing.FunctionalTesting(
+    bases=(CDV_FIXTURE, ), name='CMFDynamicViewFTI Testing:Functional')
+
+
+class CMFDVFTITestCase(bbb.PloneTestCase):
     """This is a stub now, but in case you want to try
        something fancy on Your Branch (tm), put it here.
     """
+
+    layer = CDV_FUNCTIONAL_TESTING
diff --git a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
index a6ac4b3..1624eb1 100644
--- a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
+++ b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
@@ -1,5 +1,4 @@
 <configure
-    xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser"
     i18n_domain="plonetest">
 
diff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
index 796d1e7..05623cf 100644
--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
@@ -12,14 +12,17 @@
 
 from zope.interface.verify import verifyClass
 
+
 class DummyFolder(BrowserDefaultMixin):
 
     def getTypeInfo(self):
         return self.fti
 
+
 class IDummy(Interface):
     """ marker interface for a zope 3 view """
 
+
 class TestBrowserDefault(CMFDVFTITestCase.CMFDVFTITestCase):
 
     def test_doesImplementISelectableBrowserDefault(self):
@@ -30,6 +33,7 @@ def test_doesImplementISelectableBrowserDefault(self):
     def test_extendsInterface(self):
         self.failUnless(ISelectableBrowserDefault.extends(IBrowserDefault))
 
+
 class TestAvailableLayouts(CMFDVFTITestCase.CMFDVFTITestCase):
 
     def afterSetUp(self):
@@ -38,30 +42,20 @@ def afterSetUp(self):
         self.dfolder = DummyFolder()
         self.dfolder.fti = self.types['DynFolder']
 
-        try:
-            from Zope2.App import zcml
-        except ImportError:
-            from Products.Five import zcml
-        import plone.app.contentmenu
-        import Products.CMFDynamicViewFTI.tests
-        zcml.load_config('configure.zcml', plone.app.contentmenu)
-        zcml.load_config('browserdefault.zcml', 
-                         Products.CMFDynamicViewFTI.tests)
-        
     def test_Zope3View(self):
         dfolder = self.dfolder
         dfolder.layout = 'zope3_view'
         dfolder.REQUEST = TestRequest()
         view_methods = dfolder.getAvailableLayouts()
-        view_ids = [ view_id for view_id, foo in view_methods ]
+        view_ids = [view_id for view_id, foo in view_methods]
         self.failIf(dfolder.layout in view_ids)
-        
+
         # Mark the object with interface connected to the zope 3 view
         directlyProvides(dfolder, IDummy)
         view_methods = dfolder.getAvailableLayouts()
-        view_ids = [ view_id for view_id, foo in view_methods ]
+        view_ids = [view_id for view_id, foo in view_methods]
         self.failIf(dfolder.layout not in view_ids)
-        
+
     def test_Zope3ViewTitle(self):
         dfolder = self.dfolder
         dfolder.layout = 'zope3_view'
@@ -72,10 +66,3 @@ def test_Zope3ViewTitle(self):
         for id, title in view_methods:
             if id == dfolder.layout:
                 self.assertEqual(title, 'Zope3 Test View')
-        
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestBrowserDefault))
-    suite.addTest(makeSuite(TestAvailableLayouts))    
-    return suite
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index c5cf02a..68ea2f1 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -8,6 +8,9 @@
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
+from Products.Archetypes.atapi import StringField
+from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
 
@@ -169,37 +172,31 @@ def test_NonFolderishObjectReturnsNone(self):
         self.assertEqual(info.getDefaultPage(dynfolder), None)
 
 
-class TestEmptyLayoutBug(CMFDVFTITestCase.FunctionalTestCase):
+class TestEmptyLayoutBug(CMFDVFTITestCase.CMFDVFTITestCase):
     # Finally, here is why we did all this...
 
     def afterSetUp(self):
         # Make a DynFolder
         self.folder.invokeFactory('DynFolder', id='dynfolder')
         self.dynfolder = self.folder.dynfolder
-        self.dynfolder.layout = '' # Empty layout triggers bug
+        self.dynfolder.layout = ''  # Empty layout triggers bug
         self.dynfolder_path = self.dynfolder.absolute_url(1)
 
         # Make a DynDocument
         self.folder.invokeFactory('DynDocument', id='dyndocument')
         self.dyndocument = self.folder.dyndocument
-        self.dyndocument.layout = '' # Empty layout triggers bug
+        self.dyndocument.layout = ''  # Empty layout triggers bug
         self.dyndocument_path = self.dyndocument.absolute_url(1)
 
-        self.basic = '%s:%s' % (CMFDVFTITestCase.default_user,
-                                CMFDVFTITestCase.default_password)
+        self.basic = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
 
     def test_FolderEmptyLayoutBug(self):
-        response = self.publish(self.dynfolder_path+'/view', basic=self.basic)
+        response = self.publish(self.dynfolder_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
 
     def test_DocumentEmptyLayoutBug(self):
-        response = self.publish(self.dyndocument_path+'/view', basic=self.basic)
+        # add a text field to dyndocument which is not present
+        # but needed for the standard view
+        self.dyndocument.Schema().addField(StringField('text'))
+        response = self.publish(self.dyndocument_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestFTI))
-    suite.addTest(makeSuite(TestEmptyLayoutBug))
-    return suite
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..4d80970
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,13 @@
+Overview
+========
+
+CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
+an additional base class for types and a new factory type information (FTI).
+
+The FTI contains two new properties for the default view method and
+supplementary view methods. The queryMethodID functionality used for
+alias lookups is enhanced to support a new keyword (dynamic view).
+
+The BrowserDefaultMixin class adds some methods to classes. It is not required
+to make use of the basic features but it is recommend to subclass your types
+from the class to gain more functionality.
diff --git a/README.txt b/README.txt
deleted file mode 100644
index 4d80970..0000000
--- a/README.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Overview
-========
-
-CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
-an additional base class for types and a new factory type information (FTI).
-
-The FTI contains two new properties for the default view method and
-supplementary view methods. The queryMethodID functionality used for
-alias lookups is enhanced to support a new keyword (dynamic view).
-
-The BrowserDefaultMixin class adds some methods to classes. It is not required
-to make use of the basic features but it is recommend to subclass your types
-from the class to gain more functionality.
diff --git a/setup.py b/setup.py
index d6aa586..866827c 100644
--- a/setup.py
+++ b/setup.py
@@ -5,12 +5,14 @@
 setup(name='Products.CMFDynamicViewFTI',
       version=version,
       description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
-      long_description=open("README.txt").read() + "\n" +
+      long_description=open("README.rst").read() + "\n" +
                        open("CHANGES.txt").read(),
       classifiers=[
         "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
         "Framework :: Zope2",
         "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
       ],
       keywords='Zope CMF Plone dynamic view',
       author='Plone Foundation',
@@ -25,7 +27,8 @@
         test=[
             'plone.app.contentmenu',
             'zope.publisher',
-            'Products.CMFTestCase',
+            'plone.app.testing',
+            'Products.Archetypes',
         ]
       ),
       install_requires=[


