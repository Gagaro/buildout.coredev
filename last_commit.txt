Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2015-07-27T18:15:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/3702159f818ae79bc4ede5f46b93a383b32f2220

Cleanup: PEP8 et al., security/zca via decorators, ...

Files changed:
A CHANGES.rst
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/content_for_tests.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interface.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/permissions.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/__init__.py
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M README.rst
M setup.py
D CHANGES.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..1587d32
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,270 @@
+Changelog
+=========
+
+4.1.3 (unreleased)
+------------------
+
+- Cleanup: PEP8 et al., security/zca via decorators, ...
+  [jensens]
+
+
+4.1.2 (2015-06-03)
+------------------
+
+- Fix https://github.com/plone/Products.CMFPlone/issues/591
+  [gotcha]
+
+
+4.1.1 (2015-05-13)
+------------------
+
+- Removed CMFDefault dependency
+  [tomgross]
+
+4.1.0 (2015-03-17)
+------------------
+
+- When a default object is used as layout for a container,
+  if the default object is deleted or moved with cut and paste,
+  reset the default_page property of the container.
+  [gotcha]
+
+- When a default object is used as layout for a container,
+  if the default object is renamed (iow id is changed),
+  fix the default_page property of the container.
+  [gotcha]
+
+4.0.6 (2015-03-13)
+------------------
+
+- Ported tests to plone.app.testing
+  [tomgross]
+
+- Removed BBB interface.py module
+  [tomgross]
+
+- pep8ify
+  [tomgross]
+
+
+4.0.5 (2013-05-23)
+------------------
+
+- Add i18n translation domain to the zcml to remove UserWarning.
+
+
+4.0.4 (2013-04-06)
+------------------
+
+- Add cmf.ModifyViewTemplate zcml permission for "Modify view template"
+  [toutpt]
+
+4.0.3 (2012-08-29)
+------------------
+
+- Import from zope.browsermenu.
+  [hannosch]
+
+4.0.2 - 2011-03-28
+------------------
+
+- Revert the BrowserDefaultMixin.__browser_default__ change, it is
+  unnecessary. Instead set the ``(Default)`` view alias to ``(dynamic view)``.
+  [elro]
+
+4.0.1 - 2011-03-28
+------------------
+
+- Provide BrowserDefaultMixin.__browser_default__ so subclasses do not have to
+  provide their own.
+  [elro]
+
+- Fix BrowserDefaultMixin.__call__ (never normally used in vanilla Plone) to
+  work with views. [elro]
+
+- Avoid deprecation warning in Zope 2.13.
+  [davisagli]
+
+- Fixed test setup to work with ZCA-based GenericSetup profile registry.
+  [davisagli]
+
+4.0 - 2010-07-18
+----------------
+
+- No changes.
+
+4.0b1 - 2009-12-27
+------------------
+
+- Removed BBB code for CMF prior to 1.6 and fixed import errors in tests.
+  [hannosch]
+
+4.0a1 - 2009-11-13
+------------------
+
+- Fixed dependency on zope.app.container for the IAdding interface.
+  [hannosch]
+
+- Don't use `manage_page_` macros anymore.
+  [hannosch]
+
+- Standardized the interface location to an interfaces module.
+  [hannosch]
+
+- Updated package metadata.
+  [hannosch]
+
+- Declared package dependencies and fixed deprecation warnings for use
+  of Globals.
+  [hannosch]
+
+- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
+  [elro]
+
+3.0.3 - unreleased
+------------------
+
+- Adjusted deprecation warnings to point to Plone 4.0 instead of Plone 3.5
+  since we changed the version numbering again.
+  [hannosch]
+
+3.0.2 - 2008-03-26
+------------------
+
+- Made tests compatible with CMF 2.2.
+  [hannosch]
+
+3.0.1 - 2007-10-07
+------------------
+
+- Copied addWithPresettings.pt from GenericSetup 1.3 branch r79408. This
+  fixes a startup error in buildouts caused by the move to an egg.
+  [fschulze]
+
+- Adding a Dynamic View FTI through ZMI is back. This closes
+  https://dev.plone.org/plone/ticket/6976
+  [glenfant]
+
+- Removed migrate module, which didn't work in CMF 2.1 anymore. Use
+  GenericSetup profiles for handling portal types instead. This closes
+  http://dev.plone.org/plone/ticket/6899.
+  [hannosch]
+
+3.0 - 2007-08-09
+----------------
+
+- No changes.
+  [hannosch]
+
+3.0rc1 - 2007-07-09
+-------------------
+
+- Removed some BBB code.
+  [hannosch]
+
+- Removed five:registerPackage.
+  [hannosch]
+
+3.0b1 - 2007-05-01
+------------------
+
+- Updated some import locations. We require a minimum of Zope 2.10 now.
+  [hannosch]
+
+- Rename menus - turns out dotted names don't really work with the ZCML
+  magic that's creating interfaces on the fly (it's akin to having a
+  variable name with a dot in it)
+  [optilude]
+
+- Use new displayviews menu to find view titles; rework Z3 view test to use
+  a test zcml file.
+  [mj]
+
+2.1.2 - 2007-04-22
+------------------
+
+- Removed bogus test setup. All the stuff is done by the layer anyway.
+  [stefan]
+
+- Removed tests/runalltests.py and tests/framework.py.
+  To run tests use Zope's testrunner:
+  ./bin/zopectl test --nowarn -s Products.CMFDynamicViewFTI
+  [stefan]
+
+2.1.1 - 2007-02-10
+------------------
+
+- Removed the view alias of index.html, as this would block uploading of
+  files called index.html into folders. You can enable this in your own
+  types if you want.
+  [hannosch]
+
+2.1.0 - 2006-09-08
+------------------
+
+- Implemented fallback to default view:
+  If a selected view (i.e. template) does not exist, return the
+  default view instead of - ultimately - NotFound. You can enable this
+  option by setting the FTI's new 'default_view_fallback' property to True.
+  [stefan]
+
+- Converted dummy test sample types to be extension profile based. This
+  profile is only registered during test runs.
+  [hannosch]
+
+- Slightly adjusted the tests to new CTC version.
+  [hannosch]
+
+2.0.0 - 2006-05-15
+------------------
+
+- Merged z3-views-integration branch.
+  [svincic]
+
+- Making use of Zope 3 interfaces with proper reverse bridges.
+  [optilude]
+
+- Fix tests to pass if Five/Zope3 is installed.
+  [hannosch]
+
+1.0.4 - 2006-03-19
+------------------
+
+- Made 'safe_callable' truly safe by using 'safe_hasattr'.
+- Made tests use CMFTestCase. There is no Plone dependency whatsoever.
+- Fixed a bug in getViewMethod. A present, but empty 'layout' attribute
+  now also returns the default view instead of ''. Returning the empty
+  string sends PortalContent.__call__() into a loop.
+  [stefan]
+
+1.0.3 - 2006-02-25
+------------------
+
+- Added conditional import for typeClasses to make the code CMF1.6
+  compatible while staying CMF1.5 backwards compatible.
+  [hannosch]
+
+1.0.2 - 2005-12-18
+------------------
+
+- Change getViewMethod's 'enforce_available' argument to default to False
+  instead of True. If someone goes to the trouble of either using python
+  or adding a property to indicate a specific template as the default
+  layout, we should let them.
+  [rafrombrc]
+
+1.0.1 - 2005-08-09
+------------------
+
+- Improved Plone 2.1 integration: getDefaultPage. Replace try/except with a
+  better checking for Plone. Bonus: whitespaces cleanup.
+  [deo]
+
+- Stop Acquisition for default_page.
+  [panjunyong]
+
+1.0.0 - 2005-07-29
+------------------
+
+- Initial release.
+
diff --git a/CHANGES.txt b/CHANGES.txt
deleted file mode 100644
index ca01ae8..0000000
--- a/CHANGES.txt
+++ /dev/null
@@ -1,269 +0,0 @@
-Changelog
-=========
-
-4.1.3 (unreleased)
-------------------
-
-- Nothing changed yet.
-
-
-4.1.2 (2015-06-03)
-------------------
-
-- Fix https://github.com/plone/Products.CMFPlone/issues/591
-  [gotcha]
-
-
-4.1.1 (2015-05-13)
-------------------
-
-- Removed CMFDefault dependency
-  [tomgross]
-
-4.1.0 (2015-03-17)
-------------------
-
-- When a default object is used as layout for a container,
-  if the default object is deleted or moved with cut and paste,
-  reset the default_page property of the container.
-  [gotcha]
-
-- When a default object is used as layout for a container,
-  if the default object is renamed (iow id is changed),
-  fix the default_page property of the container.
-  [gotcha]
-
-4.0.6 (2015-03-13)
-------------------
-
-- Ported tests to plone.app.testing
-  [tomgross]
-
-- Removed BBB interface.py module
-  [tomgross]
-
-- pep8ify
-  [tomgross]
-
-
-4.0.5 (2013-05-23)
-------------------
-
-- Add i18n translation domain to the zcml to remove UserWarning.
-
-
-4.0.4 (2013-04-06)
-------------------
-
-- Add cmf.ModifyViewTemplate zcml permission for "Modify view template"
-  [toutpt]
-
-4.0.3 (2012-08-29)
-------------------
-
-- Import from zope.browsermenu.
-  [hannosch]
-
-4.0.2 - 2011-03-28
-------------------
-
-- Revert the BrowserDefaultMixin.__browser_default__ change, it is
-  unnecessary. Instead set the ``(Default)`` view alias to ``(dynamic view)``.
-  [elro]
-
-4.0.1 - 2011-03-28
-------------------
-
-- Provide BrowserDefaultMixin.__browser_default__ so subclasses do not have to
-  provide their own.
-  [elro]
-
-- Fix BrowserDefaultMixin.__call__ (never normally used in vanilla Plone) to
-  work with views. [elro]
-
-- Avoid deprecation warning in Zope 2.13.
-  [davisagli]
-
-- Fixed test setup to work with ZCA-based GenericSetup profile registry.
-  [davisagli]
-
-4.0 - 2010-07-18
-----------------
-
-- No changes.
-
-4.0b1 - 2009-12-27
-------------------
-
-- Removed BBB code for CMF prior to 1.6 and fixed import errors in tests.
-  [hannosch]
-
-4.0a1 - 2009-11-13
-------------------
-
-- Fixed dependency on zope.app.container for the IAdding interface.
-  [hannosch]
-
-- Don't use `manage_page_` macros anymore.
-  [hannosch]
-
-- Standardized the interface location to an interfaces module.
-  [hannosch]
-
-- Updated package metadata.
-  [hannosch]
-
-- Declared package dependencies and fixed deprecation warnings for use
-  of Globals.
-  [hannosch]
-
-- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
-  [elro]
-
-3.0.3 - unreleased
-------------------
-
-- Adjusted deprecation warnings to point to Plone 4.0 instead of Plone 3.5
-  since we changed the version numbering again.
-  [hannosch]
-
-3.0.2 - 2008-03-26
-------------------
-
-- Made tests compatible with CMF 2.2.
-  [hannosch]
-
-3.0.1 - 2007-10-07
-------------------
-
-- Copied addWithPresettings.pt from GenericSetup 1.3 branch r79408. This
-  fixes a startup error in buildouts caused by the move to an egg.
-  [fschulze]
-
-- Adding a Dynamic View FTI through ZMI is back. This closes
-  https://dev.plone.org/plone/ticket/6976
-  [glenfant]
-
-- Removed migrate module, which didn't work in CMF 2.1 anymore. Use
-  GenericSetup profiles for handling portal types instead. This closes
-  http://dev.plone.org/plone/ticket/6899.
-  [hannosch]
-
-3.0 - 2007-08-09
-----------------
-
-- No changes.
-  [hannosch]
-
-3.0rc1 - 2007-07-09
--------------------
-
-- Removed some BBB code.
-  [hannosch]
-
-- Removed five:registerPackage.
-  [hannosch]
-
-3.0b1 - 2007-05-01
-------------------
-
-- Updated some import locations. We require a minimum of Zope 2.10 now.
-  [hannosch]
-
-- Rename menus - turns out dotted names don't really work with the ZCML
-  magic that's creating interfaces on the fly (it's akin to having a
-  variable name with a dot in it)
-  [optilude]
-
-- Use new displayviews menu to find view titles; rework Z3 view test to use
-  a test zcml file.
-  [mj]
-
-2.1.2 - 2007-04-22
-------------------
-
-- Removed bogus test setup. All the stuff is done by the layer anyway.
-  [stefan]
-
-- Removed tests/runalltests.py and tests/framework.py.
-  To run tests use Zope's testrunner:
-  ./bin/zopectl test --nowarn -s Products.CMFDynamicViewFTI
-  [stefan]
-
-2.1.1 - 2007-02-10
-------------------
-
-- Removed the view alias of index.html, as this would block uploading of
-  files called index.html into folders. You can enable this in your own
-  types if you want.
-  [hannosch]
-
-2.1.0 - 2006-09-08
-------------------
-
-- Implemented fallback to default view:
-  If a selected view (i.e. template) does not exist, return the
-  default view instead of - ultimately - NotFound. You can enable this
-  option by setting the FTI's new 'default_view_fallback' property to True.
-  [stefan]
-
-- Converted dummy test sample types to be extension profile based. This
-  profile is only registered during test runs.
-  [hannosch]
-
-- Slightly adjusted the tests to new CTC version.
-  [hannosch]
-
-2.0.0 - 2006-05-15
-------------------
-
-- Merged z3-views-integration branch.
-  [svincic]
-
-- Making use of Zope 3 interfaces with proper reverse bridges.
-  [optilude]
-
-- Fix tests to pass if Five/Zope3 is installed.
-  [hannosch]
-
-1.0.4 - 2006-03-19
-------------------
-
-- Made 'safe_callable' truly safe by using 'safe_hasattr'.
-- Made tests use CMFTestCase. There is no Plone dependency whatsoever.
-- Fixed a bug in getViewMethod. A present, but empty 'layout' attribute
-  now also returns the default view instead of ''. Returning the empty
-  string sends PortalContent.__call__() into a loop.
-  [stefan]
-
-1.0.3 - 2006-02-25
-------------------
-
-- Added conditional import for typeClasses to make the code CMF1.6
-  compatible while staying CMF1.5 backwards compatible.
-  [hannosch]
-
-1.0.2 - 2005-12-18
-------------------
-
-- Change getViewMethod's 'enforce_available' argument to default to False
-  instead of True. If someone goes to the trouble of either using python
-  or adding a property to indicate a specific template as the default
-  layout, we should let them.
-  [rafrombrc]
-
-1.0.1 - 2005-08-09
-------------------
-
-- Improved Plone 2.1 integration: getDefaultPage. Replace try/except with a
-  better checking for Plone. Bonus: whitespaces cleanup.
-  [deo]
-
-- Stop Acquisition for default_page.
-  [panjunyong]
-
-1.0.0 - 2005-07-29
-------------------
-
-- Initial release.
-
diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index 46dcb53..196c127 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -1,36 +1,33 @@
 # -*- coding: utf-8 -*-
-
-# $Id$
-
 from Products.CMFCore import utils as cmf_utils
 from Products.CMFCore.permissions import AddPortalContent
 from Products.CMFCore.permissions import AddPortalFolders
-from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 from Products.CMFDynamicViewFTI import content_for_tests
-
+from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
 
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
     cmf_utils.registerIcon(
-        DynamicViewTypeInformation, 'images/typeinfo.gif', globals()
+        DynamicViewTypeInformation,
+        'images/typeinfo.gif',
+        globals()
     )
 
     context.registerClass(
         content_for_tests.DynFolder,
         permission=AddPortalFolders,
-        constructors=(('addDynFolder',
-                       content_for_tests.addDynFolder),
-                      ),
+        constructors=(
+            ('addDynFolder', content_for_tests.addDynFolder),
+        ),
         icon='images/typeinfo.gif'
-        )
+    )
 
     context.registerClass(
         content_for_tests.DynDocument,
         permission=AddPortalContent,
-        constructors=(('addDynDocument',
-                       content_for_tests.addDynDocument),
-                      ),
+        constructors=(
+            ('addDynDocument', content_for_tests.addDynDocument),
+        ),
         icon='images/typeinfo.gif'
-        )
-    return
+    )
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index 64323d5..e47959a 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """Mixin class for selectable views
 
 This module contains a mixin-class to support selecting default layout
@@ -5,27 +6,24 @@
 The implementation extends TemplateMixin from Archetypes, and implements
 the ISelectableBrowserDefault interface from CMFPlone.
 """
-
-from zope.interface import implements
-import zope.component
-from zope.browsermenu.interfaces import IBrowserMenu
-
-from ExtensionClass import Base
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
+from App.class_init import InitializeClass
+from ExtensionClass import Base
 from Products.CMFCore.permissions import View
-
-from Products.CMFDynamicViewFTI.permissions import ModifyViewTemplate
+from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
-
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
+from Products.CMFDynamicViewFTI.permissions import ModifyViewTemplate
+from zope.browsermenu.interfaces import IBrowserMenu
+from zope.interface import implementer
+import zope.component
 
 _marker = object()
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
 
+@implementer(ISelectableBrowserDefault)
 class BrowserDefaultMixin(Base):
     """Mixin class for content types using the dynamic view FTI
 
@@ -35,7 +33,6 @@ class BrowserDefaultMixin(Base):
 
     Note: folderish content types should overwrite HEAD like ATContentTypes
     """
-    implements(ISelectableBrowserDefault)
 
     _at_fti_meta_type = fti_meta_type
     aliases = {
@@ -53,8 +50,7 @@ class BrowserDefaultMixin(Base):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'defaultView')
-
+    @security.protected(View)
     def defaultView(self, request=None):
         """
         Get the actual view to use. If a default page is set, its id will
@@ -66,8 +62,7 @@ def defaultView(self, request=None):
         else:
             return fti.defaultView(self)
 
-    security.declareProtected(View, '__call__')
-
+    @security.protected(View)
     def __call__(self):
         """
         Resolve and return the selected view template applied to the object.
@@ -76,8 +71,7 @@ def __call__(self):
         template = self.unrestrictedTraverse(self.getLayout())
         return template()
 
-    security.declareProtected(View, 'getDefaultPage')
-
+    @security.protected(View)
     def getDefaultPage(self):
         """Return the id of the default page, or None if none is set.
 
@@ -93,8 +87,7 @@ def getDefaultPage(self):
             else:
                 return fti.getDefaultPage(self, check_exists=True)
 
-    security.declareProtected(View, 'getLayout')
-
+    @security.protected(View)
     def getLayout(self, **kw):
         """Get the selected view method.
 
@@ -106,8 +99,7 @@ def getLayout(self, **kw):
         else:
             return fti.getViewMethod(self)
 
-    security.declarePublic('canSetDefaultPage')
-
+    @security.public
     def canSetDefaultPage(self):
         """Check if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
@@ -118,16 +110,16 @@ def canSetDefaultPage(self):
         member = mtool.getAuthenticatedMember()
         return member.has_permission(ModifyViewTemplate, self)
 
-    security.declareProtected(ModifyViewTemplate, 'setDefaultPage')
-
+    @security.protected(ModifyViewTemplate)
     def setDefaultPage(self, objectId):
         """Set the default page to display in this (folderish) object.
 
-        The objectId must be a value found in self.objectIds() (i.e. a contained
-        object). This object will be displayed as the default_page/index_html object
-        of this (folderish) object. This will override the current layout
-        template returned by getLayout(). Pass None for objectId to turn off
-        the default page and return to using the selected layout template.
+        The objectId must be a value found in self.objectIds() (i.e. a
+        contained object). This object will be displayed as the
+        default_page/index_html object of this (folderish) object. This will
+        override the current layout template returned by getLayout().
+        Pass None for objectId to turn off the default page and return to
+        using the selected layout template.
         """
         new_page = old_page = None
         if objectId is not None:
@@ -155,18 +147,19 @@ def setDefaultPage(self, objectId):
             if old_page is not None:
                 old_page.reindexObject(['is_default_page'])
 
-    security.declareProtected(ModifyViewTemplate, 'setLayout')
-
+    @security.protected(ModifyViewTemplate)
     def setLayout(self, layout):
         """Set the layout as the current view.
 
-        'layout' should be one of the list returned by getAvailableLayouts(), but it
-        is not enforced. If a default page has been set with setDefaultPage(), it is
-        turned off by calling setDefaultPage(None).
+        'layout' should be one of the list returned by getAvailableLayouts(),
+        but it is not enforced. If a default page has been set with
+        setDefaultPage(), it is turned off by calling setDefaultPage(None).
         """
         if not (layout and isinstance(layout, basestring)):
-            raise ValueError("layout must be a non empty string, got %s(%s)" %
-                               (layout, type(layout)))
+            raise ValueError(
+                "layout must be a non empty string, got %s(%s)" %
+                (layout, type(layout))
+            )
 
         defaultPage = self.getDefaultPage()
         if defaultPage is None and layout == self.getLayout():
@@ -179,24 +172,24 @@ def setLayout(self, layout):
                 # Archetypes remains? clean up
                 old = self.layout
                 if old and not isinstance(old, basestring):
-                    raise RuntimeError("layout attribute exists on %s and is"
-                                         "no string: %s" % (self, type(old)))
+                    raise RuntimeError(
+                        "layout attribute exists on %s and is no string: %s" %
+                        (self, type(old))
+                    )
                 delattr(self, 'layout')
 
             self.manage_addProperty('layout', layout, 'string')
 
         self.setDefaultPage(None)
 
-    security.declareProtected(View, 'getDefaultLayout')
-
+    @security.protected(View)
     def getDefaultLayout(self):
         """Get the default layout method.
         """
         fti = self.getTypeInfo()
         if fti is None:
             return "base_view"  # XXX
-        else:
-            return fti.getDefaultViewMethod(self)
+        return fti.getDefaultViewMethod(self)
 
     security.declarePublic('canSetLayout')
 
@@ -207,8 +200,7 @@ def canSetLayout(self):
         member = mtool.getAuthenticatedMember()
         return member.has_permission(ModifyViewTemplate, self)
 
-    security.declareProtected(View, 'getAvailableLayouts')
-
+    @security.protected(View)
     def getAvailableLayouts(self):
         """Get the layouts registered for this object from its FTI.
         """
@@ -218,13 +210,17 @@ def getAvailableLayouts(self):
         result = []
         method_ids = fti.getAvailableViewMethods(self)
         for mid in method_ids:
-            view = zope.component.queryMultiAdapter((self, self.REQUEST),
-                                                    zope.interface.Interface,
-                                                    name=mid)
+            view = zope.component.queryMultiAdapter(
+                (self, self.REQUEST),
+                zope.interface.Interface,
+                name=mid
+            )
 
             if view is not None:
                 menu = zope.component.getUtility(
-                    IBrowserMenu, 'plone_displayviews')
+                    IBrowserMenu,
+                    'plone_displayviews'
+                )
                 item = menu.getMenuItemByAction(self, self.REQUEST, mid)
                 title = item and item.title or mid
                 result.append((mid, title))
@@ -243,12 +239,21 @@ def getAvailableLayouts(self):
 
 
 def check_default_page(obj, event):
+    """event subscriber, unset default page if target no longer exists
+
+    used by default for zope.container.interfaces.IContainerModifiedEvent
+    """
     container = obj
     default_page_id = container.getProperty('default_page', '')
     if default_page_id and not (default_page_id in container.objectIds()):
         ISelectableBrowserDefault(container).setDefaultPage(None)
 
+
 def rename_default_page(obj, event):
+    """event subscriber, rename default page if targte was renamed
+
+    used by default for zope.lifecycleevent.interfaces.IObjectMovedEvent
+    """
     newParent = event.newParent
     if newParent != event.oldParent:
         return
diff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py
index 851f5b4..db6fc89 100644
--- a/Products/CMFDynamicViewFTI/content_for_tests.py
+++ b/Products/CMFDynamicViewFTI/content_for_tests.py
@@ -1,11 +1,7 @@
-from AccessControl.SecurityInfo import ClassSecurityInfo
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.permissions import AddPortalFolders
+# -*- coding: utf-8 -*-
 from Products.CMFCore.PortalFolder import PortalFolder
 from Products.CMFCore.PortalContent import PortalContent
-from App.class_init import InitializeClass
-
-from browserdefault import BrowserDefaultMixin
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 
 
 class DynFolder(PortalFolder, BrowserDefaultMixin):
diff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py
index 59ddadf..18d09d2 100644
--- a/Products/CMFDynamicViewFTI/fti.py
+++ b/Products/CMFDynamicViewFTI/fti.py
@@ -1,18 +1,13 @@
 # -*- coding: utf-8 -*-
-# $Id$
-
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
 from Acquisition import aq_base
-from types import ClassType
-
-from Products.CMFCore.TypesTool import FactoryTypeInformation
+from App.class_init import InitializeClass
 from Products.CMFCore.permissions import View
+from Products.CMFCore.TypesTool import FactoryTypeInformation
 from Products.CMFCore.utils import getToolByName
-
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
+from types import ClassType
+from zope.interface import implementer
 
 
 def safe_hasattr(obj, name, _marker=object()):
@@ -46,7 +41,7 @@ def om_has_key(context, key):
     klass = getattr(aq_base(context), '__class__', None)
     if hasattr(klass, 'has_key'):
         # BTreeFolder2 optimization
-        if context.has_key(key):
+        if key in context:
             return True
     else:
         # standard ObjectManager api
@@ -57,26 +52,35 @@ def om_has_key(context, key):
 fti_meta_type = 'Factory-based Type Information with dynamic views'
 
 
+@implementer(IDynamicViewTypeInformation)
 class DynamicViewTypeInformation(FactoryTypeInformation):
     """FTI with dynamic views
 
-    A value of (dynamic view) as alias is replaced by the output of defaultView()
+    A value of (dynamic view) as alias is replaced by the output of
+    defaultView()
     """
 
-    implements(IDynamicViewTypeInformation)
-
     meta_type = fti_meta_type
     security = ClassSecurityInfo()
 
     _properties = FactoryTypeInformation._properties + (
-        {'id': 'default_view', 'type': 'string', 'mode': 'w',
-          'label': 'Default view method'
+        {
+            'id': 'default_view',
+            'type': 'string',
+            'mode': 'w',
+            'label': 'Default view method',
         },
-        {'id': 'view_methods', 'type': 'lines', 'mode': 'w',
-          'label': 'Available view methods'
+        {
+            'id': 'view_methods',
+            'type': 'lines',
+            'mode': 'w',
+            'label': 'Available view methods'
         },
-        {'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
-          'label': 'Fall back to default view?'
+        {
+            'id': 'default_view_fallback',
+            'type': 'boolean',
+            'mode': 'w',
+            'label': 'Fall back to default view?'
         },
     )
 
@@ -97,17 +101,15 @@ def manage_changeProperties(self, **kw):
         if not view_methods:
             self.view_methods = view_methods = (default_view, )
         if default_view and default_view not in view_methods:
-            raise ValueError, "%s not in %s" % (default_view, view_methods)
-
-    security.declareProtected(View, 'getDefaultViewMethod')
+            raise ValueError("%s not in %s" % (default_view, view_methods))
 
+    @security.protected(View)
     def getDefaultViewMethod(self, context):
         """Get the default view method from the FTI
         """
         return str(self.default_view)
 
-    security.declareProtected(View, 'getAvailableViewMethods')
-
+    @security.protected(View)
     def getAvailableViewMethods(self, context):
         """Get a list of registered view methods
         """
@@ -116,9 +118,13 @@ def getAvailableViewMethods(self, context):
             methods = (methods, )
         return tuple(methods)
 
-    security.declareProtected(View, 'getViewMethod')
-
-    def getViewMethod(self, context, enforce_available=False, check_exists=False):
+    @security.protected(View)
+    def getViewMethod(
+        self,
+        context,
+        enforce_available=False,
+        check_exists=False
+    ):
         """Get view method (aka layout) name from context
 
         Return -- view method from context or default view name
@@ -131,8 +137,10 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
         if not layout:
             return default
         if not isinstance(layout, basestring):
-            raise TypeError, "layout of %s must be a string, got %s" % (
-                              repr(context), type(layout))
+            raise TypeError(
+                "layout of %s must be a string, got %s" %
+                (repr(context), type(layout))
+            )
         if enforce_available:
             available = self.getAvailableViewMethods(context)
             if layout not in available:
@@ -143,20 +151,20 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
                 return default
         return layout
 
-    security.declareProtected(View, 'getDefaultPage')
-
+    @security.protected(View)
     def getDefaultPage(self, context, check_exists=False):
         """Get the default page from a folderish object
 
         Non folderish objects don't have a default view.
 
-        If check_exists is enabled the method makes sure the object with the default
-        page id exists.
+        If check_exists is enabled the method makes sure the object with the
+        default page id exists.
 
         Return -- None for no default page or a string
         """
         if not getattr(aq_base(context), 'isPrincipiaFolderish', False):
-            return None  # non folderish objects don't have a default page per se
+            # non folderish objects don't have a default page per se
+            return None
 
         default_page = getattr(aq_base(context), 'default_page', None)
 
@@ -167,16 +175,17 @@ def getDefaultPage(self, context, check_exists=False):
         if isinstance(default_page, (tuple, list)):
             default_page = default_page[0]
         if not isinstance(default_page, str):
-            raise TypeError, ("default_page must be a string, got %s(%s):" %
-                              (default_page, type(default_page)))
+            raise TypeError(
+                "default_page must be a string, got %s(%s):" %
+                (default_page, type(default_page))
+            )
 
         if check_exists and not om_has_key(context, default_page):
             return None
 
         return default_page
 
-    security.declareProtected(View, 'defaultView')
-
+    @security.protected(View)
     def defaultView(self, context):
         """Get the current view to use for an object. If a default page is  set,
         use that, else use the currently selected view method/layout.
@@ -199,13 +208,18 @@ def defaultView(self, context):
     def queryMethodID(self, alias, default=None, context=None):
         """ Query method ID by alias.
 
-        Use "(dynamic view)" as the alias target to look up as per defaultView()
+        Use "(dynamic view)" as the alias target to look up as per
+        defaultView()
+
         Use "(selected layout)" as the alias target to look up as per
-            getViewMethod()
+        getViewMethod()
         """
-        methodTarget = FactoryTypeInformation.queryMethodID(self, alias,
-                                                         default=default,
-                                                         context=context)
+        methodTarget = FactoryTypeInformation.queryMethodID(
+            self,
+            alias,
+            default=default,
+            context=context
+        )
         if not isinstance(methodTarget, basestring):
             # nothing to do, method_id is probably None
             return methodTarget
diff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py
index 5d75c2e..309af6a 100644
--- a/Products/CMFDynamicViewFTI/interface.py
+++ b/Products/CMFDynamicViewFTI/interface.py
@@ -1,4 +1,10 @@
+# -*- coding: utf-8 -*-
 # BBB module will be removed at some point. We will still need it as long as
 # we plan to support Plone 4.3.x
 from Products.CMFDynamicViewFTI.interfaces import *
+import warnings
 
+warnings.warn(
+    'import from Products.CMFDynamicViewFTI.interfaces instead',
+    DeprecationWarning
+)
diff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py
index 9d0f94a..6f0b3af 100644
--- a/Products/CMFDynamicViewFTI/interfaces.py
+++ b/Products/CMFDynamicViewFTI/interfaces.py
@@ -1,6 +1,6 @@
-from zope.interface import Interface
-
+# -*- coding: utf-8 -*-
 from Products.CMFCore.interfaces import ITypeInformation
+from zope.interface import Interface
 
 
 class IDynamicViewTypeInformation(ITypeInformation):
@@ -28,8 +28,8 @@ def getDefaultPage(context, check_exists=False):
 
         Non folderish objects don't have a default view.
 
-        If check_exists is enabled the method makes sure the object with the default
-        page id exists.
+        If check_exists is enabled the method makes sure the object with the
+        default page id exists.
 
         Return -- None for no default page or a string
         """
@@ -37,8 +37,8 @@ def getDefaultPage(context, check_exists=False):
     def defaultView(context):
         """Get the layout for an object
 
-        At first it tries to get the default page from the context. A default page
-        must be listed on the folder or else it is ignored.
+        At first it tries to get the default page from the context.
+        A default page must be listed on the folder or else it is ignored.
 
         At last it get the view method.
 
@@ -48,33 +48,33 @@ def defaultView(context):
 
 class IBrowserDefault(Interface):
     """Content supporting different views on a per-instance basis.
-    
-    This can be either as a page template (a layout), or as the id of a 
+
+    This can be either as a page template (a layout), or as the id of a
     contained object (aka a default page, set inside a folderish item only).
     """
 
     def defaultView(request=None):
-        """Get the actual view to use. 
-        
+        """Get the actual view to use.
+
         If a default page is set, its id will
         be returned. Else, the current layout's page template id is returned.
         """
 
     def __call__():
         """Resolve and return the selected view template applied to the object.
-        
+
         This should not consider any default page set.
         """
 
     def getDefaultPage():
-        """Return the id of the default page, or None if none is set. 
-        
+        """Return the id of the default page, or None if none is set.
+
         The default page must be contained within this (folderish) item.
         """
 
     def getLayout(**kw):
-        """Get the selected layout template. 
-        
+        """Get the selected layout template.
+
         Note that a selected default page will override the layout template.
         """
 
@@ -84,25 +84,26 @@ def getDefaultLayout():
 
 
 class ISelectableBrowserDefault(IBrowserDefault):
-    """Content supporting operations to explicitly set the default layout 
+    """Content supporting operations to explicitly set the default layout
     template or default page object.
     """
 
     def canSetDefaultPage():
         """Can a default page be set?
-        
+
         Return True if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
         """
 
     def setDefaultPage(objectId):
-        """Set the default page to display in this (folderish) object. 
-        
-        The objectId must be a value found in self.objectIds() (i.e. a contained 
-        object). This object will be displayed as the default_page/index_html 
-        object of this (folderish) object. This will override the current layout
-        template returned by getLayout(). Pass None for objectId to turn off
-        the default page and return to using the selected layout template.
+        """Set the default page to display in this (folderish) object.
+
+        The objectId must be a value found in self.objectIds() (i.e. a
+        contained object). This object will be displayed as the
+        default_page/index_html object of this (folderish) object. This will
+        override the current layout template returned by getLayout(). Pass None
+        for objectId to turn off the default page and return to using the
+        selected layout template.
         """
 
     def canSetLayout():
@@ -111,10 +112,10 @@ def canSetLayout():
         """
 
     def setLayout(layout):
-        """Set the layout as the current view. 
-        
-        'layout' should be one of the list returned by getAvailableLayouts(). 
-        If a default page has been set with setDefaultPage(), it is turned off 
+        """Set the layout as the current view.
+
+        'layout' should be one of the list returned by getAvailableLayouts().
+        If a default page has been set with setDefaultPage(), it is turned off
         by calling setDefaultPage(None).
         """
 
diff --git a/Products/CMFDynamicViewFTI/permissions.py b/Products/CMFDynamicViewFTI/permissions.py
index d0af6b4..4a56d90 100644
--- a/Products/CMFDynamicViewFTI/permissions.py
+++ b/Products/CMFDynamicViewFTI/permissions.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.permissions import setDefaultRoles
 
 ModifyViewTemplate = "Modify view template"
diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
index 373c6ac..9f80f9f 100644
--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
@@ -1,9 +1,9 @@
+# -*- coding: utf-8 -*-
 #
 # CMFDVFTITestCase
 #
-from plone.app.testing import bbb
 from plone.app import testing
-
+from plone.app.testing import bbb
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.GenericSetup import EXTENSION, profile_registry
 
@@ -13,13 +13,15 @@ class PloneTestCaseFixture(bbb.PloneTestCaseFixture):
     defaultBases = (bbb.PTC_FIXTURE, )
 
     def setUpZope(self, app, configurationContext):
-        profile_registry.registerProfile('CMFDVFTI_sampletypes',
+        profile_registry.registerProfile(
+            'CMFDVFTI_sampletypes',
             'CMFDynamicViewFTI Sample Content Types',
             'Extension profile including CMFDVFTI sample content types',
             'profiles/sample_types',
             'CMFDynamicViewFTI',
             EXTENSION,
-            for_=ISiteRoot)
+            for_=ISiteRoot
+        )
         import Products.CMFDynamicViewFTI.tests
         self.loadZCML(name='browserdefault.zcml',
                       package=Products.CMFDynamicViewFTI.tests)
diff --git a/Products/CMFDynamicViewFTI/tests/__init__.py b/Products/CMFDynamicViewFTI/tests/__init__.py
index 5b3912c..40a96af 100644
--- a/Products/CMFDynamicViewFTI/tests/__init__.py
+++ b/Products/CMFDynamicViewFTI/tests/__init__.py
@@ -1 +1 @@
-# testing package
+# -*- coding: utf-8 -*-
diff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
index 05623cf..d718248 100644
--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
@@ -1,16 +1,13 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
+from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
+from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
 from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
-
 from zope.interface import directlyProvides
 from zope.interface import Interface
-from zope.publisher.browser import TestRequest
-
-from Products.CMFCore.utils import getToolByName
-
-from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
-from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
-
 from zope.interface.verify import verifyClass
+from zope.publisher.browser import TestRequest
 
 
 class DummyFolder(BrowserDefaultMixin):
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index a972cf7..fa19a70 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -1,17 +1,14 @@
-import transaction
-
-from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
-
-from zope.interface.verify import verifyObject
-
+# -*- coding: utf-8 -*-
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
+from Products.Archetypes.atapi import StringField
 from Products.CMFCore.interfaces import ITypeInformation
 from Products.CMFCore.utils import getToolByName
-
-from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
-
-from Products.Archetypes.atapi import StringField
-from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
+from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
+from zope.interface.verify import verifyObject
+import transaction
 
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
@@ -50,7 +47,10 @@ def test_CreateDynFolder(self):
         self.assertEqual(info.getId(), 'DynFolder')
         self.assertEqual(info.Title(), 'DynFolder')
         self.assertEqual(info.getDefaultViewMethod(dynfolder), 'index_html')
-        self.assertEqual(info.getAvailableViewMethods(dynfolder), ('index_html', 'custom_view', 'zope3_view'))
+        self.assertEqual(
+            info.getAvailableViewMethods(dynfolder),
+            ('index_html', 'custom_view', 'zope3_view')
+        )
 
     def test_DynFolderDefaultView(self):
         dynfolder = self._makeOne()
@@ -59,7 +59,9 @@ def test_DynFolderDefaultView(self):
 
     def test_DynFolderCustomView(self):
         dynfolder = self._makeOne()
-        self.types.DynFolder.manage_changeProperties(default_view='custom_view')
+        self.types.DynFolder.manage_changeProperties(
+            default_view='custom_view'
+        )
         info = self.types.getTypeInfo(dynfolder)
         self.assertEqual(info.getViewMethod(dynfolder), 'custom_view')
 
@@ -97,26 +99,38 @@ def test_EnforceLayoutAvailable(self):
         dynfolder = self._makeOne()
         dynfolder.layout = 'custom_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, enforce_available=True), 'custom_view')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, enforce_available=True),
+            'custom_view'
+        )
 
     def test_UnavailableLayoutReturnsDefaultView(self):
         dynfolder = self._makeOne()
         dynfolder.layout = 'bad_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, enforce_available=True), 'index_html')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, enforce_available=True),
+            'index_html'
+        )
 
     def test_CheckLayoutExists(self):
         dynfolder = self._makeOne()
         dynfolder.manage_addDTMLMethod('custom_view', file='')
         dynfolder.layout = 'custom_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, check_exists=True), 'custom_view')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, check_exists=True),
+            'custom_view'
+        )
 
     def test_MissingLayoutReturnsDefaultView(self):
         dynfolder = self._makeOne()
         dynfolder.layout = 'bad_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, check_exists=True), 'index_html')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, check_exists=True),
+            'index_html'
+        )
 
     def test_DynFolderDefaultPage(self):
         dynfolder = self._makeOne()
@@ -158,13 +172,19 @@ def test_CheckDefaultPageExists(self):
         dynfolder.manage_addDTMLMethod('custom_page', file='')
         dynfolder.default_page = 'custom_page'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getDefaultPage(dynfolder, check_exists=True), 'custom_page')
+        self.assertEqual(
+            info.getDefaultPage(dynfolder, check_exists=True),
+            'custom_page'
+        )
 
     def test_MissingDefaultPageReturnsNone(self):
         dynfolder = self._makeOne()
         dynfolder.default_page = 'bad_page'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getDefaultPage(dynfolder, check_exists=True), None)
+        self.assertEqual(
+            info.getDefaultPage(dynfolder, check_exists=True),
+            None
+        )
 
     def test_NonFolderishObjectReturnsNone(self):
         dynfolder = self._makeOne()
@@ -193,14 +213,20 @@ def afterSetUp(self):
         self.basic = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
 
     def test_FolderEmptyLayoutBug(self):
-        response = self.publish(self.dynfolder_path + '/view', basic=self.basic)
+        response = self.publish(
+            self.dynfolder_path + '/view',
+            basic=self.basic
+        )
         self.assertEqual(response.getStatus(), 200)
 
     def test_DocumentEmptyLayoutBug(self):
         # add a text field to dyndocument which is not present
         # but needed for the standard view
         self.dyndocument.Schema().addField(StringField('text'))
-        response = self.publish(self.dyndocument_path + '/view', basic=self.basic)
+        response = self.publish(
+            self.dyndocument_path + '/view',
+            basic=self.basic
+        )
         self.assertEqual(response.getStatus(), 200)
 
 
diff --git a/README.rst b/README.rst
index 4d80970..6719d7f 100644
--- a/README.rst
+++ b/README.rst
@@ -1,13 +1,28 @@
 Overview
 ========
 
-CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
-an additional base class for types and a new factory type information (FTI).
+CMFDynamicViewFTI is a product for dynamic views in CMF.
+The product contains an additional base class for types and a new factory type information (FTI).
 
-The FTI contains two new properties for the default view method and
-supplementary view methods. The queryMethodID functionality used for
-alias lookups is enhanced to support a new keyword (dynamic view).
+The FTI contains two new properties for the default view method and supplementary view methods.
+The queryMethodID functionality used for alias lookups is enhanced to support a new keyword (dynamic view).
 
-The BrowserDefaultMixin class adds some methods to classes. It is not required
-to make use of the basic features but it is recommend to subclass your types
-from the class to gain more functionality.
+The BrowserDefaultMixin class adds some methods to classes.
+It is not required to make use of the basic features
+but it is recommend to subclass your types from the class to gain more functionality.
+
+There are two event subscribers registered:
+
+``zope.container.interfaces.IContainerModifiedEvent``
+    unset default page if target no longer exists
+
+``zope.lifecycleevent.interfaces.IObjectMovedEvent``
+    rename default page if target was renamed
+
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/Products.CMFDynamicViewFTI>`_.
diff --git a/setup.py b/setup.py
index 90ac033..e97b5b6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,45 +1,52 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '4.1.3.dev0'
 
-setup(name='Products.CMFDynamicViewFTI',
-      version=version,
-      description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
-      long_description=open("README.rst").read() + "\n" +
-                       open("CHANGES.txt").read(),
-      classifiers=[
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Zope2",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-      ],
-      keywords='Zope CMF Plone dynamic view',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/Products.CMFDynamicViewFTI',
-      license='ZPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['Products'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
-        test=[
-            'plone.app.contentmenu',
-            'zope.publisher',
-            'plone.app.testing >= 4.2.5',
-            'Products.Archetypes',
-        ]
-      ),
-      install_requires=[
-        'setuptools',
-        'zope.browsermenu',
-        'zope.component',
-        'zope.interface',
-        'Products.CMFCore',
-        'Products.GenericSetup',
-        'Acquisition',
-        'ExtensionClass',
-        'Zope2',
-      ],
+long_description = open("README.rst").read()
+long_description += "\n"
+long_description += open("CHANGES.rst").read()
+
+
+setup(
+    name='Products.CMFDynamicViewFTI',
+    version=version,
+    description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
+    long_description=long_description,
+    classifiers=[
+      "Framework :: Plone",
+      "Framework :: Plone :: 5.0",
+      "Framework :: Zope2",
+      "Programming Language :: Python",
+      "Programming Language :: Python :: 2.7",
+    ],
+    keywords='Zope CMF Plone dynamic view',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/Products.CMFDynamicViewFTI',
+    license='ZPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['Products'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
+      test=[
+        'plone.app.contentmenu',
+        'zope.publisher',
+        'plone.app.testing >= 4.2.5',
+        'Products.Archetypes',
+      ]
+    ),
+    install_requires=[
+      'setuptools',
+      'zope.browsermenu',
+      'zope.component',
+      'zope.interface',
+      'Products.CMFCore',
+      'Products.GenericSetup',
+      'Acquisition',
+      'ExtensionClass',
+      'Zope2',
+    ],
 )


Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2015-07-27T19:37:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/15d5a240c19e9379cff464c8c698b37baa226c12

Merge pull request #7 from plone/jensens-cleanup

Cleanup: PEP8 et al., security/zca via decorators, ...

Files changed:
A CHANGES.rst
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/content_for_tests.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interface.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/permissions.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/__init__.py
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M README.rst
M setup.py
D CHANGES.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..1587d32
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,270 @@
+Changelog
+=========
+
+4.1.3 (unreleased)
+------------------
+
+- Cleanup: PEP8 et al., security/zca via decorators, ...
+  [jensens]
+
+
+4.1.2 (2015-06-03)
+------------------
+
+- Fix https://github.com/plone/Products.CMFPlone/issues/591
+  [gotcha]
+
+
+4.1.1 (2015-05-13)
+------------------
+
+- Removed CMFDefault dependency
+  [tomgross]
+
+4.1.0 (2015-03-17)
+------------------
+
+- When a default object is used as layout for a container,
+  if the default object is deleted or moved with cut and paste,
+  reset the default_page property of the container.
+  [gotcha]
+
+- When a default object is used as layout for a container,
+  if the default object is renamed (iow id is changed),
+  fix the default_page property of the container.
+  [gotcha]
+
+4.0.6 (2015-03-13)
+------------------
+
+- Ported tests to plone.app.testing
+  [tomgross]
+
+- Removed BBB interface.py module
+  [tomgross]
+
+- pep8ify
+  [tomgross]
+
+
+4.0.5 (2013-05-23)
+------------------
+
+- Add i18n translation domain to the zcml to remove UserWarning.
+
+
+4.0.4 (2013-04-06)
+------------------
+
+- Add cmf.ModifyViewTemplate zcml permission for "Modify view template"
+  [toutpt]
+
+4.0.3 (2012-08-29)
+------------------
+
+- Import from zope.browsermenu.
+  [hannosch]
+
+4.0.2 - 2011-03-28
+------------------
+
+- Revert the BrowserDefaultMixin.__browser_default__ change, it is
+  unnecessary. Instead set the ``(Default)`` view alias to ``(dynamic view)``.
+  [elro]
+
+4.0.1 - 2011-03-28
+------------------
+
+- Provide BrowserDefaultMixin.__browser_default__ so subclasses do not have to
+  provide their own.
+  [elro]
+
+- Fix BrowserDefaultMixin.__call__ (never normally used in vanilla Plone) to
+  work with views. [elro]
+
+- Avoid deprecation warning in Zope 2.13.
+  [davisagli]
+
+- Fixed test setup to work with ZCA-based GenericSetup profile registry.
+  [davisagli]
+
+4.0 - 2010-07-18
+----------------
+
+- No changes.
+
+4.0b1 - 2009-12-27
+------------------
+
+- Removed BBB code for CMF prior to 1.6 and fixed import errors in tests.
+  [hannosch]
+
+4.0a1 - 2009-11-13
+------------------
+
+- Fixed dependency on zope.app.container for the IAdding interface.
+  [hannosch]
+
+- Don't use `manage_page_` macros anymore.
+  [hannosch]
+
+- Standardized the interface location to an interfaces module.
+  [hannosch]
+
+- Updated package metadata.
+  [hannosch]
+
+- Declared package dependencies and fixed deprecation warnings for use
+  of Globals.
+  [hannosch]
+
+- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
+  [elro]
+
+3.0.3 - unreleased
+------------------
+
+- Adjusted deprecation warnings to point to Plone 4.0 instead of Plone 3.5
+  since we changed the version numbering again.
+  [hannosch]
+
+3.0.2 - 2008-03-26
+------------------
+
+- Made tests compatible with CMF 2.2.
+  [hannosch]
+
+3.0.1 - 2007-10-07
+------------------
+
+- Copied addWithPresettings.pt from GenericSetup 1.3 branch r79408. This
+  fixes a startup error in buildouts caused by the move to an egg.
+  [fschulze]
+
+- Adding a Dynamic View FTI through ZMI is back. This closes
+  https://dev.plone.org/plone/ticket/6976
+  [glenfant]
+
+- Removed migrate module, which didn't work in CMF 2.1 anymore. Use
+  GenericSetup profiles for handling portal types instead. This closes
+  http://dev.plone.org/plone/ticket/6899.
+  [hannosch]
+
+3.0 - 2007-08-09
+----------------
+
+- No changes.
+  [hannosch]
+
+3.0rc1 - 2007-07-09
+-------------------
+
+- Removed some BBB code.
+  [hannosch]
+
+- Removed five:registerPackage.
+  [hannosch]
+
+3.0b1 - 2007-05-01
+------------------
+
+- Updated some import locations. We require a minimum of Zope 2.10 now.
+  [hannosch]
+
+- Rename menus - turns out dotted names don't really work with the ZCML
+  magic that's creating interfaces on the fly (it's akin to having a
+  variable name with a dot in it)
+  [optilude]
+
+- Use new displayviews menu to find view titles; rework Z3 view test to use
+  a test zcml file.
+  [mj]
+
+2.1.2 - 2007-04-22
+------------------
+
+- Removed bogus test setup. All the stuff is done by the layer anyway.
+  [stefan]
+
+- Removed tests/runalltests.py and tests/framework.py.
+  To run tests use Zope's testrunner:
+  ./bin/zopectl test --nowarn -s Products.CMFDynamicViewFTI
+  [stefan]
+
+2.1.1 - 2007-02-10
+------------------
+
+- Removed the view alias of index.html, as this would block uploading of
+  files called index.html into folders. You can enable this in your own
+  types if you want.
+  [hannosch]
+
+2.1.0 - 2006-09-08
+------------------
+
+- Implemented fallback to default view:
+  If a selected view (i.e. template) does not exist, return the
+  default view instead of - ultimately - NotFound. You can enable this
+  option by setting the FTI's new 'default_view_fallback' property to True.
+  [stefan]
+
+- Converted dummy test sample types to be extension profile based. This
+  profile is only registered during test runs.
+  [hannosch]
+
+- Slightly adjusted the tests to new CTC version.
+  [hannosch]
+
+2.0.0 - 2006-05-15
+------------------
+
+- Merged z3-views-integration branch.
+  [svincic]
+
+- Making use of Zope 3 interfaces with proper reverse bridges.
+  [optilude]
+
+- Fix tests to pass if Five/Zope3 is installed.
+  [hannosch]
+
+1.0.4 - 2006-03-19
+------------------
+
+- Made 'safe_callable' truly safe by using 'safe_hasattr'.
+- Made tests use CMFTestCase. There is no Plone dependency whatsoever.
+- Fixed a bug in getViewMethod. A present, but empty 'layout' attribute
+  now also returns the default view instead of ''. Returning the empty
+  string sends PortalContent.__call__() into a loop.
+  [stefan]
+
+1.0.3 - 2006-02-25
+------------------
+
+- Added conditional import for typeClasses to make the code CMF1.6
+  compatible while staying CMF1.5 backwards compatible.
+  [hannosch]
+
+1.0.2 - 2005-12-18
+------------------
+
+- Change getViewMethod's 'enforce_available' argument to default to False
+  instead of True. If someone goes to the trouble of either using python
+  or adding a property to indicate a specific template as the default
+  layout, we should let them.
+  [rafrombrc]
+
+1.0.1 - 2005-08-09
+------------------
+
+- Improved Plone 2.1 integration: getDefaultPage. Replace try/except with a
+  better checking for Plone. Bonus: whitespaces cleanup.
+  [deo]
+
+- Stop Acquisition for default_page.
+  [panjunyong]
+
+1.0.0 - 2005-07-29
+------------------
+
+- Initial release.
+
diff --git a/CHANGES.txt b/CHANGES.txt
deleted file mode 100644
index ca01ae8..0000000
--- a/CHANGES.txt
+++ /dev/null
@@ -1,269 +0,0 @@
-Changelog
-=========
-
-4.1.3 (unreleased)
-------------------
-
-- Nothing changed yet.
-
-
-4.1.2 (2015-06-03)
-------------------
-
-- Fix https://github.com/plone/Products.CMFPlone/issues/591
-  [gotcha]
-
-
-4.1.1 (2015-05-13)
-------------------
-
-- Removed CMFDefault dependency
-  [tomgross]
-
-4.1.0 (2015-03-17)
-------------------
-
-- When a default object is used as layout for a container,
-  if the default object is deleted or moved with cut and paste,
-  reset the default_page property of the container.
-  [gotcha]
-
-- When a default object is used as layout for a container,
-  if the default object is renamed (iow id is changed),
-  fix the default_page property of the container.
-  [gotcha]
-
-4.0.6 (2015-03-13)
-------------------
-
-- Ported tests to plone.app.testing
-  [tomgross]
-
-- Removed BBB interface.py module
-  [tomgross]
-
-- pep8ify
-  [tomgross]
-
-
-4.0.5 (2013-05-23)
-------------------
-
-- Add i18n translation domain to the zcml to remove UserWarning.
-
-
-4.0.4 (2013-04-06)
-------------------
-
-- Add cmf.ModifyViewTemplate zcml permission for "Modify view template"
-  [toutpt]
-
-4.0.3 (2012-08-29)
-------------------
-
-- Import from zope.browsermenu.
-  [hannosch]
-
-4.0.2 - 2011-03-28
-------------------
-
-- Revert the BrowserDefaultMixin.__browser_default__ change, it is
-  unnecessary. Instead set the ``(Default)`` view alias to ``(dynamic view)``.
-  [elro]
-
-4.0.1 - 2011-03-28
-------------------
-
-- Provide BrowserDefaultMixin.__browser_default__ so subclasses do not have to
-  provide their own.
-  [elro]
-
-- Fix BrowserDefaultMixin.__call__ (never normally used in vanilla Plone) to
-  work with views. [elro]
-
-- Avoid deprecation warning in Zope 2.13.
-  [davisagli]
-
-- Fixed test setup to work with ZCA-based GenericSetup profile registry.
-  [davisagli]
-
-4.0 - 2010-07-18
-----------------
-
-- No changes.
-
-4.0b1 - 2009-12-27
-------------------
-
-- Removed BBB code for CMF prior to 1.6 and fixed import errors in tests.
-  [hannosch]
-
-4.0a1 - 2009-11-13
-------------------
-
-- Fixed dependency on zope.app.container for the IAdding interface.
-  [hannosch]
-
-- Don't use `manage_page_` macros anymore.
-  [hannosch]
-
-- Standardized the interface location to an interfaces module.
-  [hannosch]
-
-- Updated package metadata.
-  [hannosch]
-
-- Declared package dependencies and fixed deprecation warnings for use
-  of Globals.
-  [hannosch]
-
-- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
-  [elro]
-
-3.0.3 - unreleased
-------------------
-
-- Adjusted deprecation warnings to point to Plone 4.0 instead of Plone 3.5
-  since we changed the version numbering again.
-  [hannosch]
-
-3.0.2 - 2008-03-26
-------------------
-
-- Made tests compatible with CMF 2.2.
-  [hannosch]
-
-3.0.1 - 2007-10-07
-------------------
-
-- Copied addWithPresettings.pt from GenericSetup 1.3 branch r79408. This
-  fixes a startup error in buildouts caused by the move to an egg.
-  [fschulze]
-
-- Adding a Dynamic View FTI through ZMI is back. This closes
-  https://dev.plone.org/plone/ticket/6976
-  [glenfant]
-
-- Removed migrate module, which didn't work in CMF 2.1 anymore. Use
-  GenericSetup profiles for handling portal types instead. This closes
-  http://dev.plone.org/plone/ticket/6899.
-  [hannosch]
-
-3.0 - 2007-08-09
-----------------
-
-- No changes.
-  [hannosch]
-
-3.0rc1 - 2007-07-09
--------------------
-
-- Removed some BBB code.
-  [hannosch]
-
-- Removed five:registerPackage.
-  [hannosch]
-
-3.0b1 - 2007-05-01
-------------------
-
-- Updated some import locations. We require a minimum of Zope 2.10 now.
-  [hannosch]
-
-- Rename menus - turns out dotted names don't really work with the ZCML
-  magic that's creating interfaces on the fly (it's akin to having a
-  variable name with a dot in it)
-  [optilude]
-
-- Use new displayviews menu to find view titles; rework Z3 view test to use
-  a test zcml file.
-  [mj]
-
-2.1.2 - 2007-04-22
-------------------
-
-- Removed bogus test setup. All the stuff is done by the layer anyway.
-  [stefan]
-
-- Removed tests/runalltests.py and tests/framework.py.
-  To run tests use Zope's testrunner:
-  ./bin/zopectl test --nowarn -s Products.CMFDynamicViewFTI
-  [stefan]
-
-2.1.1 - 2007-02-10
-------------------
-
-- Removed the view alias of index.html, as this would block uploading of
-  files called index.html into folders. You can enable this in your own
-  types if you want.
-  [hannosch]
-
-2.1.0 - 2006-09-08
-------------------
-
-- Implemented fallback to default view:
-  If a selected view (i.e. template) does not exist, return the
-  default view instead of - ultimately - NotFound. You can enable this
-  option by setting the FTI's new 'default_view_fallback' property to True.
-  [stefan]
-
-- Converted dummy test sample types to be extension profile based. This
-  profile is only registered during test runs.
-  [hannosch]
-
-- Slightly adjusted the tests to new CTC version.
-  [hannosch]
-
-2.0.0 - 2006-05-15
-------------------
-
-- Merged z3-views-integration branch.
-  [svincic]
-
-- Making use of Zope 3 interfaces with proper reverse bridges.
-  [optilude]
-
-- Fix tests to pass if Five/Zope3 is installed.
-  [hannosch]
-
-1.0.4 - 2006-03-19
-------------------
-
-- Made 'safe_callable' truly safe by using 'safe_hasattr'.
-- Made tests use CMFTestCase. There is no Plone dependency whatsoever.
-- Fixed a bug in getViewMethod. A present, but empty 'layout' attribute
-  now also returns the default view instead of ''. Returning the empty
-  string sends PortalContent.__call__() into a loop.
-  [stefan]
-
-1.0.3 - 2006-02-25
-------------------
-
-- Added conditional import for typeClasses to make the code CMF1.6
-  compatible while staying CMF1.5 backwards compatible.
-  [hannosch]
-
-1.0.2 - 2005-12-18
-------------------
-
-- Change getViewMethod's 'enforce_available' argument to default to False
-  instead of True. If someone goes to the trouble of either using python
-  or adding a property to indicate a specific template as the default
-  layout, we should let them.
-  [rafrombrc]
-
-1.0.1 - 2005-08-09
-------------------
-
-- Improved Plone 2.1 integration: getDefaultPage. Replace try/except with a
-  better checking for Plone. Bonus: whitespaces cleanup.
-  [deo]
-
-- Stop Acquisition for default_page.
-  [panjunyong]
-
-1.0.0 - 2005-07-29
-------------------
-
-- Initial release.
-
diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index 46dcb53..196c127 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -1,36 +1,33 @@
 # -*- coding: utf-8 -*-
-
-# $Id$
-
 from Products.CMFCore import utils as cmf_utils
 from Products.CMFCore.permissions import AddPortalContent
 from Products.CMFCore.permissions import AddPortalFolders
-from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 from Products.CMFDynamicViewFTI import content_for_tests
-
+from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
 
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
     cmf_utils.registerIcon(
-        DynamicViewTypeInformation, 'images/typeinfo.gif', globals()
+        DynamicViewTypeInformation,
+        'images/typeinfo.gif',
+        globals()
     )
 
     context.registerClass(
         content_for_tests.DynFolder,
         permission=AddPortalFolders,
-        constructors=(('addDynFolder',
-                       content_for_tests.addDynFolder),
-                      ),
+        constructors=(
+            ('addDynFolder', content_for_tests.addDynFolder),
+        ),
         icon='images/typeinfo.gif'
-        )
+    )
 
     context.registerClass(
         content_for_tests.DynDocument,
         permission=AddPortalContent,
-        constructors=(('addDynDocument',
-                       content_for_tests.addDynDocument),
-                      ),
+        constructors=(
+            ('addDynDocument', content_for_tests.addDynDocument),
+        ),
         icon='images/typeinfo.gif'
-        )
-    return
+    )
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index 64323d5..e47959a 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """Mixin class for selectable views
 
 This module contains a mixin-class to support selecting default layout
@@ -5,27 +6,24 @@
 The implementation extends TemplateMixin from Archetypes, and implements
 the ISelectableBrowserDefault interface from CMFPlone.
 """
-
-from zope.interface import implements
-import zope.component
-from zope.browsermenu.interfaces import IBrowserMenu
-
-from ExtensionClass import Base
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
+from App.class_init import InitializeClass
+from ExtensionClass import Base
 from Products.CMFCore.permissions import View
-
-from Products.CMFDynamicViewFTI.permissions import ModifyViewTemplate
+from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
-
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
+from Products.CMFDynamicViewFTI.permissions import ModifyViewTemplate
+from zope.browsermenu.interfaces import IBrowserMenu
+from zope.interface import implementer
+import zope.component
 
 _marker = object()
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
 
+@implementer(ISelectableBrowserDefault)
 class BrowserDefaultMixin(Base):
     """Mixin class for content types using the dynamic view FTI
 
@@ -35,7 +33,6 @@ class BrowserDefaultMixin(Base):
 
     Note: folderish content types should overwrite HEAD like ATContentTypes
     """
-    implements(ISelectableBrowserDefault)
 
     _at_fti_meta_type = fti_meta_type
     aliases = {
@@ -53,8 +50,7 @@ class BrowserDefaultMixin(Base):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'defaultView')
-
+    @security.protected(View)
     def defaultView(self, request=None):
         """
         Get the actual view to use. If a default page is set, its id will
@@ -66,8 +62,7 @@ def defaultView(self, request=None):
         else:
             return fti.defaultView(self)
 
-    security.declareProtected(View, '__call__')
-
+    @security.protected(View)
     def __call__(self):
         """
         Resolve and return the selected view template applied to the object.
@@ -76,8 +71,7 @@ def __call__(self):
         template = self.unrestrictedTraverse(self.getLayout())
         return template()
 
-    security.declareProtected(View, 'getDefaultPage')
-
+    @security.protected(View)
     def getDefaultPage(self):
         """Return the id of the default page, or None if none is set.
 
@@ -93,8 +87,7 @@ def getDefaultPage(self):
             else:
                 return fti.getDefaultPage(self, check_exists=True)
 
-    security.declareProtected(View, 'getLayout')
-
+    @security.protected(View)
     def getLayout(self, **kw):
         """Get the selected view method.
 
@@ -106,8 +99,7 @@ def getLayout(self, **kw):
         else:
             return fti.getViewMethod(self)
 
-    security.declarePublic('canSetDefaultPage')
-
+    @security.public
     def canSetDefaultPage(self):
         """Check if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
@@ -118,16 +110,16 @@ def canSetDefaultPage(self):
         member = mtool.getAuthenticatedMember()
         return member.has_permission(ModifyViewTemplate, self)
 
-    security.declareProtected(ModifyViewTemplate, 'setDefaultPage')
-
+    @security.protected(ModifyViewTemplate)
     def setDefaultPage(self, objectId):
         """Set the default page to display in this (folderish) object.
 
-        The objectId must be a value found in self.objectIds() (i.e. a contained
-        object). This object will be displayed as the default_page/index_html object
-        of this (folderish) object. This will override the current layout
-        template returned by getLayout(). Pass None for objectId to turn off
-        the default page and return to using the selected layout template.
+        The objectId must be a value found in self.objectIds() (i.e. a
+        contained object). This object will be displayed as the
+        default_page/index_html object of this (folderish) object. This will
+        override the current layout template returned by getLayout().
+        Pass None for objectId to turn off the default page and return to
+        using the selected layout template.
         """
         new_page = old_page = None
         if objectId is not None:
@@ -155,18 +147,19 @@ def setDefaultPage(self, objectId):
             if old_page is not None:
                 old_page.reindexObject(['is_default_page'])
 
-    security.declareProtected(ModifyViewTemplate, 'setLayout')
-
+    @security.protected(ModifyViewTemplate)
     def setLayout(self, layout):
         """Set the layout as the current view.
 
-        'layout' should be one of the list returned by getAvailableLayouts(), but it
-        is not enforced. If a default page has been set with setDefaultPage(), it is
-        turned off by calling setDefaultPage(None).
+        'layout' should be one of the list returned by getAvailableLayouts(),
+        but it is not enforced. If a default page has been set with
+        setDefaultPage(), it is turned off by calling setDefaultPage(None).
         """
         if not (layout and isinstance(layout, basestring)):
-            raise ValueError("layout must be a non empty string, got %s(%s)" %
-                               (layout, type(layout)))
+            raise ValueError(
+                "layout must be a non empty string, got %s(%s)" %
+                (layout, type(layout))
+            )
 
         defaultPage = self.getDefaultPage()
         if defaultPage is None and layout == self.getLayout():
@@ -179,24 +172,24 @@ def setLayout(self, layout):
                 # Archetypes remains? clean up
                 old = self.layout
                 if old and not isinstance(old, basestring):
-                    raise RuntimeError("layout attribute exists on %s and is"
-                                         "no string: %s" % (self, type(old)))
+                    raise RuntimeError(
+                        "layout attribute exists on %s and is no string: %s" %
+                        (self, type(old))
+                    )
                 delattr(self, 'layout')
 
             self.manage_addProperty('layout', layout, 'string')
 
         self.setDefaultPage(None)
 
-    security.declareProtected(View, 'getDefaultLayout')
-
+    @security.protected(View)
     def getDefaultLayout(self):
         """Get the default layout method.
         """
         fti = self.getTypeInfo()
         if fti is None:
             return "base_view"  # XXX
-        else:
-            return fti.getDefaultViewMethod(self)
+        return fti.getDefaultViewMethod(self)
 
     security.declarePublic('canSetLayout')
 
@@ -207,8 +200,7 @@ def canSetLayout(self):
         member = mtool.getAuthenticatedMember()
         return member.has_permission(ModifyViewTemplate, self)
 
-    security.declareProtected(View, 'getAvailableLayouts')
-
+    @security.protected(View)
     def getAvailableLayouts(self):
         """Get the layouts registered for this object from its FTI.
         """
@@ -218,13 +210,17 @@ def getAvailableLayouts(self):
         result = []
         method_ids = fti.getAvailableViewMethods(self)
         for mid in method_ids:
-            view = zope.component.queryMultiAdapter((self, self.REQUEST),
-                                                    zope.interface.Interface,
-                                                    name=mid)
+            view = zope.component.queryMultiAdapter(
+                (self, self.REQUEST),
+                zope.interface.Interface,
+                name=mid
+            )
 
             if view is not None:
                 menu = zope.component.getUtility(
-                    IBrowserMenu, 'plone_displayviews')
+                    IBrowserMenu,
+                    'plone_displayviews'
+                )
                 item = menu.getMenuItemByAction(self, self.REQUEST, mid)
                 title = item and item.title or mid
                 result.append((mid, title))
@@ -243,12 +239,21 @@ def getAvailableLayouts(self):
 
 
 def check_default_page(obj, event):
+    """event subscriber, unset default page if target no longer exists
+
+    used by default for zope.container.interfaces.IContainerModifiedEvent
+    """
     container = obj
     default_page_id = container.getProperty('default_page', '')
     if default_page_id and not (default_page_id in container.objectIds()):
         ISelectableBrowserDefault(container).setDefaultPage(None)
 
+
 def rename_default_page(obj, event):
+    """event subscriber, rename default page if targte was renamed
+
+    used by default for zope.lifecycleevent.interfaces.IObjectMovedEvent
+    """
     newParent = event.newParent
     if newParent != event.oldParent:
         return
diff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py
index 851f5b4..db6fc89 100644
--- a/Products/CMFDynamicViewFTI/content_for_tests.py
+++ b/Products/CMFDynamicViewFTI/content_for_tests.py
@@ -1,11 +1,7 @@
-from AccessControl.SecurityInfo import ClassSecurityInfo
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.permissions import AddPortalFolders
+# -*- coding: utf-8 -*-
 from Products.CMFCore.PortalFolder import PortalFolder
 from Products.CMFCore.PortalContent import PortalContent
-from App.class_init import InitializeClass
-
-from browserdefault import BrowserDefaultMixin
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 
 
 class DynFolder(PortalFolder, BrowserDefaultMixin):
diff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py
index 59ddadf..18d09d2 100644
--- a/Products/CMFDynamicViewFTI/fti.py
+++ b/Products/CMFDynamicViewFTI/fti.py
@@ -1,18 +1,13 @@
 # -*- coding: utf-8 -*-
-# $Id$
-
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
 from Acquisition import aq_base
-from types import ClassType
-
-from Products.CMFCore.TypesTool import FactoryTypeInformation
+from App.class_init import InitializeClass
 from Products.CMFCore.permissions import View
+from Products.CMFCore.TypesTool import FactoryTypeInformation
 from Products.CMFCore.utils import getToolByName
-
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
+from types import ClassType
+from zope.interface import implementer
 
 
 def safe_hasattr(obj, name, _marker=object()):
@@ -46,7 +41,7 @@ def om_has_key(context, key):
     klass = getattr(aq_base(context), '__class__', None)
     if hasattr(klass, 'has_key'):
         # BTreeFolder2 optimization
-        if context.has_key(key):
+        if key in context:
             return True
     else:
         # standard ObjectManager api
@@ -57,26 +52,35 @@ def om_has_key(context, key):
 fti_meta_type = 'Factory-based Type Information with dynamic views'
 
 
+@implementer(IDynamicViewTypeInformation)
 class DynamicViewTypeInformation(FactoryTypeInformation):
     """FTI with dynamic views
 
-    A value of (dynamic view) as alias is replaced by the output of defaultView()
+    A value of (dynamic view) as alias is replaced by the output of
+    defaultView()
     """
 
-    implements(IDynamicViewTypeInformation)
-
     meta_type = fti_meta_type
     security = ClassSecurityInfo()
 
     _properties = FactoryTypeInformation._properties + (
-        {'id': 'default_view', 'type': 'string', 'mode': 'w',
-          'label': 'Default view method'
+        {
+            'id': 'default_view',
+            'type': 'string',
+            'mode': 'w',
+            'label': 'Default view method',
         },
-        {'id': 'view_methods', 'type': 'lines', 'mode': 'w',
-          'label': 'Available view methods'
+        {
+            'id': 'view_methods',
+            'type': 'lines',
+            'mode': 'w',
+            'label': 'Available view methods'
         },
-        {'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
-          'label': 'Fall back to default view?'
+        {
+            'id': 'default_view_fallback',
+            'type': 'boolean',
+            'mode': 'w',
+            'label': 'Fall back to default view?'
         },
     )
 
@@ -97,17 +101,15 @@ def manage_changeProperties(self, **kw):
         if not view_methods:
             self.view_methods = view_methods = (default_view, )
         if default_view and default_view not in view_methods:
-            raise ValueError, "%s not in %s" % (default_view, view_methods)
-
-    security.declareProtected(View, 'getDefaultViewMethod')
+            raise ValueError("%s not in %s" % (default_view, view_methods))
 
+    @security.protected(View)
     def getDefaultViewMethod(self, context):
         """Get the default view method from the FTI
         """
         return str(self.default_view)
 
-    security.declareProtected(View, 'getAvailableViewMethods')
-
+    @security.protected(View)
     def getAvailableViewMethods(self, context):
         """Get a list of registered view methods
         """
@@ -116,9 +118,13 @@ def getAvailableViewMethods(self, context):
             methods = (methods, )
         return tuple(methods)
 
-    security.declareProtected(View, 'getViewMethod')
-
-    def getViewMethod(self, context, enforce_available=False, check_exists=False):
+    @security.protected(View)
+    def getViewMethod(
+        self,
+        context,
+        enforce_available=False,
+        check_exists=False
+    ):
         """Get view method (aka layout) name from context
 
         Return -- view method from context or default view name
@@ -131,8 +137,10 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
         if not layout:
             return default
         if not isinstance(layout, basestring):
-            raise TypeError, "layout of %s must be a string, got %s" % (
-                              repr(context), type(layout))
+            raise TypeError(
+                "layout of %s must be a string, got %s" %
+                (repr(context), type(layout))
+            )
         if enforce_available:
             available = self.getAvailableViewMethods(context)
             if layout not in available:
@@ -143,20 +151,20 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
                 return default
         return layout
 
-    security.declareProtected(View, 'getDefaultPage')
-
+    @security.protected(View)
     def getDefaultPage(self, context, check_exists=False):
         """Get the default page from a folderish object
 
         Non folderish objects don't have a default view.
 
-        If check_exists is enabled the method makes sure the object with the default
-        page id exists.
+        If check_exists is enabled the method makes sure the object with the
+        default page id exists.
 
         Return -- None for no default page or a string
         """
         if not getattr(aq_base(context), 'isPrincipiaFolderish', False):
-            return None  # non folderish objects don't have a default page per se
+            # non folderish objects don't have a default page per se
+            return None
 
         default_page = getattr(aq_base(context), 'default_page', None)
 
@@ -167,16 +175,17 @@ def getDefaultPage(self, context, check_exists=False):
         if isinstance(default_page, (tuple, list)):
             default_page = default_page[0]
         if not isinstance(default_page, str):
-            raise TypeError, ("default_page must be a string, got %s(%s):" %
-                              (default_page, type(default_page)))
+            raise TypeError(
+                "default_page must be a string, got %s(%s):" %
+                (default_page, type(default_page))
+            )
 
         if check_exists and not om_has_key(context, default_page):
             return None
 
         return default_page
 
-    security.declareProtected(View, 'defaultView')
-
+    @security.protected(View)
     def defaultView(self, context):
         """Get the current view to use for an object. If a default page is  set,
         use that, else use the currently selected view method/layout.
@@ -199,13 +208,18 @@ def defaultView(self, context):
     def queryMethodID(self, alias, default=None, context=None):
         """ Query method ID by alias.
 
-        Use "(dynamic view)" as the alias target to look up as per defaultView()
+        Use "(dynamic view)" as the alias target to look up as per
+        defaultView()
+
         Use "(selected layout)" as the alias target to look up as per
-            getViewMethod()
+        getViewMethod()
         """
-        methodTarget = FactoryTypeInformation.queryMethodID(self, alias,
-                                                         default=default,
-                                                         context=context)
+        methodTarget = FactoryTypeInformation.queryMethodID(
+            self,
+            alias,
+            default=default,
+            context=context
+        )
         if not isinstance(methodTarget, basestring):
             # nothing to do, method_id is probably None
             return methodTarget
diff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py
index 5d75c2e..309af6a 100644
--- a/Products/CMFDynamicViewFTI/interface.py
+++ b/Products/CMFDynamicViewFTI/interface.py
@@ -1,4 +1,10 @@
+# -*- coding: utf-8 -*-
 # BBB module will be removed at some point. We will still need it as long as
 # we plan to support Plone 4.3.x
 from Products.CMFDynamicViewFTI.interfaces import *
+import warnings
 
+warnings.warn(
+    'import from Products.CMFDynamicViewFTI.interfaces instead',
+    DeprecationWarning
+)
diff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py
index 9d0f94a..6f0b3af 100644
--- a/Products/CMFDynamicViewFTI/interfaces.py
+++ b/Products/CMFDynamicViewFTI/interfaces.py
@@ -1,6 +1,6 @@
-from zope.interface import Interface
-
+# -*- coding: utf-8 -*-
 from Products.CMFCore.interfaces import ITypeInformation
+from zope.interface import Interface
 
 
 class IDynamicViewTypeInformation(ITypeInformation):
@@ -28,8 +28,8 @@ def getDefaultPage(context, check_exists=False):
 
         Non folderish objects don't have a default view.
 
-        If check_exists is enabled the method makes sure the object with the default
-        page id exists.
+        If check_exists is enabled the method makes sure the object with the
+        default page id exists.
 
         Return -- None for no default page or a string
         """
@@ -37,8 +37,8 @@ def getDefaultPage(context, check_exists=False):
     def defaultView(context):
         """Get the layout for an object
 
-        At first it tries to get the default page from the context. A default page
-        must be listed on the folder or else it is ignored.
+        At first it tries to get the default page from the context.
+        A default page must be listed on the folder or else it is ignored.
 
         At last it get the view method.
 
@@ -48,33 +48,33 @@ def defaultView(context):
 
 class IBrowserDefault(Interface):
     """Content supporting different views on a per-instance basis.
-    
-    This can be either as a page template (a layout), or as the id of a 
+
+    This can be either as a page template (a layout), or as the id of a
     contained object (aka a default page, set inside a folderish item only).
     """
 
     def defaultView(request=None):
-        """Get the actual view to use. 
-        
+        """Get the actual view to use.
+
         If a default page is set, its id will
         be returned. Else, the current layout's page template id is returned.
         """
 
     def __call__():
         """Resolve and return the selected view template applied to the object.
-        
+
         This should not consider any default page set.
         """
 
     def getDefaultPage():
-        """Return the id of the default page, or None if none is set. 
-        
+        """Return the id of the default page, or None if none is set.
+
         The default page must be contained within this (folderish) item.
         """
 
     def getLayout(**kw):
-        """Get the selected layout template. 
-        
+        """Get the selected layout template.
+
         Note that a selected default page will override the layout template.
         """
 
@@ -84,25 +84,26 @@ def getDefaultLayout():
 
 
 class ISelectableBrowserDefault(IBrowserDefault):
-    """Content supporting operations to explicitly set the default layout 
+    """Content supporting operations to explicitly set the default layout
     template or default page object.
     """
 
     def canSetDefaultPage():
         """Can a default page be set?
-        
+
         Return True if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
         """
 
     def setDefaultPage(objectId):
-        """Set the default page to display in this (folderish) object. 
-        
-        The objectId must be a value found in self.objectIds() (i.e. a contained 
-        object). This object will be displayed as the default_page/index_html 
-        object of this (folderish) object. This will override the current layout
-        template returned by getLayout(). Pass None for objectId to turn off
-        the default page and return to using the selected layout template.
+        """Set the default page to display in this (folderish) object.
+
+        The objectId must be a value found in self.objectIds() (i.e. a
+        contained object). This object will be displayed as the
+        default_page/index_html object of this (folderish) object. This will
+        override the current layout template returned by getLayout(). Pass None
+        for objectId to turn off the default page and return to using the
+        selected layout template.
         """
 
     def canSetLayout():
@@ -111,10 +112,10 @@ def canSetLayout():
         """
 
     def setLayout(layout):
-        """Set the layout as the current view. 
-        
-        'layout' should be one of the list returned by getAvailableLayouts(). 
-        If a default page has been set with setDefaultPage(), it is turned off 
+        """Set the layout as the current view.
+
+        'layout' should be one of the list returned by getAvailableLayouts().
+        If a default page has been set with setDefaultPage(), it is turned off
         by calling setDefaultPage(None).
         """
 
diff --git a/Products/CMFDynamicViewFTI/permissions.py b/Products/CMFDynamicViewFTI/permissions.py
index d0af6b4..4a56d90 100644
--- a/Products/CMFDynamicViewFTI/permissions.py
+++ b/Products/CMFDynamicViewFTI/permissions.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.permissions import setDefaultRoles
 
 ModifyViewTemplate = "Modify view template"
diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
index 373c6ac..9f80f9f 100644
--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
@@ -1,9 +1,9 @@
+# -*- coding: utf-8 -*-
 #
 # CMFDVFTITestCase
 #
-from plone.app.testing import bbb
 from plone.app import testing
-
+from plone.app.testing import bbb
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.GenericSetup import EXTENSION, profile_registry
 
@@ -13,13 +13,15 @@ class PloneTestCaseFixture(bbb.PloneTestCaseFixture):
     defaultBases = (bbb.PTC_FIXTURE, )
 
     def setUpZope(self, app, configurationContext):
-        profile_registry.registerProfile('CMFDVFTI_sampletypes',
+        profile_registry.registerProfile(
+            'CMFDVFTI_sampletypes',
             'CMFDynamicViewFTI Sample Content Types',
             'Extension profile including CMFDVFTI sample content types',
             'profiles/sample_types',
             'CMFDynamicViewFTI',
             EXTENSION,
-            for_=ISiteRoot)
+            for_=ISiteRoot
+        )
         import Products.CMFDynamicViewFTI.tests
         self.loadZCML(name='browserdefault.zcml',
                       package=Products.CMFDynamicViewFTI.tests)
diff --git a/Products/CMFDynamicViewFTI/tests/__init__.py b/Products/CMFDynamicViewFTI/tests/__init__.py
index 5b3912c..40a96af 100644
--- a/Products/CMFDynamicViewFTI/tests/__init__.py
+++ b/Products/CMFDynamicViewFTI/tests/__init__.py
@@ -1 +1 @@
-# testing package
+# -*- coding: utf-8 -*-
diff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
index 05623cf..d718248 100644
--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
@@ -1,16 +1,13 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
+from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
+from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
 from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
-
 from zope.interface import directlyProvides
 from zope.interface import Interface
-from zope.publisher.browser import TestRequest
-
-from Products.CMFCore.utils import getToolByName
-
-from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
-from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
-
 from zope.interface.verify import verifyClass
+from zope.publisher.browser import TestRequest
 
 
 class DummyFolder(BrowserDefaultMixin):
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index a972cf7..fa19a70 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -1,17 +1,14 @@
-import transaction
-
-from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
-
-from zope.interface.verify import verifyObject
-
+# -*- coding: utf-8 -*-
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
+from Products.Archetypes.atapi import StringField
 from Products.CMFCore.interfaces import ITypeInformation
 from Products.CMFCore.utils import getToolByName
-
-from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
-
-from Products.Archetypes.atapi import StringField
-from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
+from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
+from zope.interface.verify import verifyObject
+import transaction
 
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
@@ -50,7 +47,10 @@ def test_CreateDynFolder(self):
         self.assertEqual(info.getId(), 'DynFolder')
         self.assertEqual(info.Title(), 'DynFolder')
         self.assertEqual(info.getDefaultViewMethod(dynfolder), 'index_html')
-        self.assertEqual(info.getAvailableViewMethods(dynfolder), ('index_html', 'custom_view', 'zope3_view'))
+        self.assertEqual(
+            info.getAvailableViewMethods(dynfolder),
+            ('index_html', 'custom_view', 'zope3_view')
+        )
 
     def test_DynFolderDefaultView(self):
         dynfolder = self._makeOne()
@@ -59,7 +59,9 @@ def test_DynFolderDefaultView(self):
 
     def test_DynFolderCustomView(self):
         dynfolder = self._makeOne()
-        self.types.DynFolder.manage_changeProperties(default_view='custom_view')
+        self.types.DynFolder.manage_changeProperties(
+            default_view='custom_view'
+        )
         info = self.types.getTypeInfo(dynfolder)
         self.assertEqual(info.getViewMethod(dynfolder), 'custom_view')
 
@@ -97,26 +99,38 @@ def test_EnforceLayoutAvailable(self):
         dynfolder = self._makeOne()
         dynfolder.layout = 'custom_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, enforce_available=True), 'custom_view')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, enforce_available=True),
+            'custom_view'
+        )
 
     def test_UnavailableLayoutReturnsDefaultView(self):
         dynfolder = self._makeOne()
         dynfolder.layout = 'bad_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, enforce_available=True), 'index_html')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, enforce_available=True),
+            'index_html'
+        )
 
     def test_CheckLayoutExists(self):
         dynfolder = self._makeOne()
         dynfolder.manage_addDTMLMethod('custom_view', file='')
         dynfolder.layout = 'custom_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, check_exists=True), 'custom_view')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, check_exists=True),
+            'custom_view'
+        )
 
     def test_MissingLayoutReturnsDefaultView(self):
         dynfolder = self._makeOne()
         dynfolder.layout = 'bad_view'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getViewMethod(dynfolder, check_exists=True), 'index_html')
+        self.assertEqual(
+            info.getViewMethod(dynfolder, check_exists=True),
+            'index_html'
+        )
 
     def test_DynFolderDefaultPage(self):
         dynfolder = self._makeOne()
@@ -158,13 +172,19 @@ def test_CheckDefaultPageExists(self):
         dynfolder.manage_addDTMLMethod('custom_page', file='')
         dynfolder.default_page = 'custom_page'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getDefaultPage(dynfolder, check_exists=True), 'custom_page')
+        self.assertEqual(
+            info.getDefaultPage(dynfolder, check_exists=True),
+            'custom_page'
+        )
 
     def test_MissingDefaultPageReturnsNone(self):
         dynfolder = self._makeOne()
         dynfolder.default_page = 'bad_page'
         info = self.types.getTypeInfo(dynfolder)
-        self.assertEqual(info.getDefaultPage(dynfolder, check_exists=True), None)
+        self.assertEqual(
+            info.getDefaultPage(dynfolder, check_exists=True),
+            None
+        )
 
     def test_NonFolderishObjectReturnsNone(self):
         dynfolder = self._makeOne()
@@ -193,14 +213,20 @@ def afterSetUp(self):
         self.basic = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
 
     def test_FolderEmptyLayoutBug(self):
-        response = self.publish(self.dynfolder_path + '/view', basic=self.basic)
+        response = self.publish(
+            self.dynfolder_path + '/view',
+            basic=self.basic
+        )
         self.assertEqual(response.getStatus(), 200)
 
     def test_DocumentEmptyLayoutBug(self):
         # add a text field to dyndocument which is not present
         # but needed for the standard view
         self.dyndocument.Schema().addField(StringField('text'))
-        response = self.publish(self.dyndocument_path + '/view', basic=self.basic)
+        response = self.publish(
+            self.dyndocument_path + '/view',
+            basic=self.basic
+        )
         self.assertEqual(response.getStatus(), 200)
 
 
diff --git a/README.rst b/README.rst
index 4d80970..6719d7f 100644
--- a/README.rst
+++ b/README.rst
@@ -1,13 +1,28 @@
 Overview
 ========
 
-CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
-an additional base class for types and a new factory type information (FTI).
+CMFDynamicViewFTI is a product for dynamic views in CMF.
+The product contains an additional base class for types and a new factory type information (FTI).
 
-The FTI contains two new properties for the default view method and
-supplementary view methods. The queryMethodID functionality used for
-alias lookups is enhanced to support a new keyword (dynamic view).
+The FTI contains two new properties for the default view method and supplementary view methods.
+The queryMethodID functionality used for alias lookups is enhanced to support a new keyword (dynamic view).
 
-The BrowserDefaultMixin class adds some methods to classes. It is not required
-to make use of the basic features but it is recommend to subclass your types
-from the class to gain more functionality.
+The BrowserDefaultMixin class adds some methods to classes.
+It is not required to make use of the basic features
+but it is recommend to subclass your types from the class to gain more functionality.
+
+There are two event subscribers registered:
+
+``zope.container.interfaces.IContainerModifiedEvent``
+    unset default page if target no longer exists
+
+``zope.lifecycleevent.interfaces.IObjectMovedEvent``
+    rename default page if target was renamed
+
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/Products.CMFDynamicViewFTI>`_.
diff --git a/setup.py b/setup.py
index 90ac033..e97b5b6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,45 +1,52 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '4.1.3.dev0'
 
-setup(name='Products.CMFDynamicViewFTI',
-      version=version,
-      description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
-      long_description=open("README.rst").read() + "\n" +
-                       open("CHANGES.txt").read(),
-      classifiers=[
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Zope2",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-      ],
-      keywords='Zope CMF Plone dynamic view',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/Products.CMFDynamicViewFTI',
-      license='ZPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['Products'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
-        test=[
-            'plone.app.contentmenu',
-            'zope.publisher',
-            'plone.app.testing >= 4.2.5',
-            'Products.Archetypes',
-        ]
-      ),
-      install_requires=[
-        'setuptools',
-        'zope.browsermenu',
-        'zope.component',
-        'zope.interface',
-        'Products.CMFCore',
-        'Products.GenericSetup',
-        'Acquisition',
-        'ExtensionClass',
-        'Zope2',
-      ],
+long_description = open("README.rst").read()
+long_description += "\n"
+long_description += open("CHANGES.rst").read()
+
+
+setup(
+    name='Products.CMFDynamicViewFTI',
+    version=version,
+    description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
+    long_description=long_description,
+    classifiers=[
+      "Framework :: Plone",
+      "Framework :: Plone :: 5.0",
+      "Framework :: Zope2",
+      "Programming Language :: Python",
+      "Programming Language :: Python :: 2.7",
+    ],
+    keywords='Zope CMF Plone dynamic view',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/Products.CMFDynamicViewFTI',
+    license='ZPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['Products'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
+      test=[
+        'plone.app.contentmenu',
+        'zope.publisher',
+        'plone.app.testing >= 4.2.5',
+        'Products.Archetypes',
+      ]
+    ),
+    install_requires=[
+      'setuptools',
+      'zope.browsermenu',
+      'zope.component',
+      'zope.interface',
+      'Products.CMFCore',
+      'Products.GenericSetup',
+      'Acquisition',
+      'ExtensionClass',
+      'Zope2',
+    ],
 )


