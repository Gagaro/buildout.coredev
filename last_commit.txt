Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-03-05T00:52:40+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/61aaacf59a54d42fe48cec4cd90162d90667823d

For the link_redirect_view, don't modify the urls for mailto:, tel:, callto: and file: link types but render them as-is.

Files changed:
M docs/CHANGES.rst
M plone/app/contenttypes/browser/link_redirect_view.py
M plone/app/contenttypes/tests/test_link.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 61d9679..e5495af 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 1.2 (unreleased)
 ----------------
 
+- For the link_redirect_view, don't modify the urls for ``mailto:``, ``tel:``,
+  ``callto:`` and ``file:`` link types but render them as-is.
+  [thet]
+
 - When installing the default profile, restrict uninstalling of old types to
   old FTI based ones.
   [thet]
diff --git a/plone/app/contenttypes/browser/link_redirect_view.py b/plone/app/contenttypes/browser/link_redirect_view.py
index 4e4a45d..0bd5ae8 100644
--- a/plone/app/contenttypes/browser/link_redirect_view.py
+++ b/plone/app/contenttypes/browser/link_redirect_view.py
@@ -32,7 +32,8 @@ def __call__(self):
 
     def absolute_target_url(self):
         """Compute the absolute target URL."""
-        if self.context.remoteUrl.startswith('.'):
+        url = self.context.remoteUrl
+        if url.startswith('.'):
             # we just need to adapt ../relative/links, /absolute/ones work
             # anyway -> this requires relative links to start with ./ or
             # ../
@@ -41,13 +42,17 @@ def absolute_target_url(self):
             )
             url = '/'.join([
                 context_state.canonical_object_url(),
-                self.context.remoteUrl
+                url
             ])
+        elif url.startswith('mailto:')\
+                or url.startswith('tel:')\
+                or url.startswith('callto:')\
+                or url.startswith('file:')\
+                or url.startswith('#'):
+            # Do nothing for html/html5 links
+            pass
         else:
-            url = replace_link_variables_by_paths(
-                self.context,
-                self.context.remoteUrl
-            )
+            url = replace_link_variables_by_paths(self.context, url)
             if not (url.startswith('http://') or url.startswith('https://')):
                 url = self.request.physicalPathToURL(url)
 
diff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py
index 88d5b45..144069c 100644
--- a/plone/app/contenttypes/tests/test_link.py
+++ b/plone/app/contenttypes/tests/test_link.py
@@ -162,6 +162,30 @@ def test_link_redirect_view_path_with_variable(self):
         self.assertTrue(view())
         self._assert_redirect('http://nohost/plone/my-folder/my-item')
 
+    def test_mailto_type(self):
+        self.link.remoteUrl = 'mailto:stress@test.us'
+        view = self._get_link_redirect_view(self.link)
+        rendered = view()
+        self.assertTrue('href="mailto:stress@test.us"' in rendered)
+
+    def test_tel_type(self):
+        self.link.remoteUrl = 'tel:123'
+        view = self._get_link_redirect_view(self.link)
+        rendered = view()
+        self.assertTrue('href="tel:123"' in rendered)
+
+    def test_callto_type(self):
+        self.link.remoteUrl = 'callto:123'
+        view = self._get_link_redirect_view(self.link)
+        rendered = view()
+        self.assertTrue('href="callto:123"' in rendered)
+
+    def test_file_type(self):
+        self.link.remoteUrl = 'file:///tmp'
+        view = self._get_link_redirect_view(self.link)
+        rendered = view()
+        self.assertTrue('href="file:///tmp"' in rendered)
+
     def _publish(self, obj):
         portal_workflow = getToolByName(self.portal, "portal_workflow")
         portal_workflow.doActionFor(obj, 'publish')


