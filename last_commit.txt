Repository: plone.app.intid


Branch: refs/heads/master
Date: 2015-08-04T20:40:27+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.intid/commit/12c080d4cc067cae9bc3a85aac64f24fc84228e7

fix test after p.a.intid is always available

Files changed:
M plone/app/intid/tests/test_setup.py

diff --git a/plone/app/intid/tests/test_setup.py b/plone/app/intid/tests/test_setup.py
index 9a81972..b2919ba 100644
--- a/plone/app/intid/tests/test_setup.py
+++ b/plone/app/intid/tests/test_setup.py
@@ -1,9 +1,7 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from plone.app.intid.setuphandlers import add_intids
 from plone.app.intid.testing import SETUP_TESTING
 from plone.app.testing import TEST_USER_ID
-from plone.app.testing import applyProfile
 from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
 from zope.component import getUtility
@@ -18,7 +16,7 @@ def setUp(self):
         self.portal = self.layer['portal']
         # XXX below code is only needed if theres no Folder FTI already setup.
         typetool = getToolByName(self.portal, "portal_types")
-        if not "Folder" in typetool.objectIds():
+        if "Folder" not in typetool.objectIds():
             # XXX Check if this is needed for Plone 5.0! In 4.3 the FTI is
             # already setup
             fti = DexterityFTI('Folder')
@@ -27,6 +25,19 @@ def setUp(self):
     def tearDown(self):
         setRoles(self.portal, TEST_USER_ID, ['Member'])
 
+    def test_already_installed(self):
+        """plone.app.intid is a dependency of plone.app.linknitegrity
+        which is a dependency of CMFPlone, so it is always installed.
+        This tests if this is true.
+        """
+        # we create a folder
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+        intids = getUtility(IIntIds)
+        self.assertIsNotNone(intids.getId(folder))
+
+    @unittest.skip('p.a.intid is always installed')
     def test_install(self):
         """When p.app.intid is intalled it registers some utility
         from zope.intid and five.intid and search in portal_catalog
@@ -35,6 +46,8 @@ def test_install(self):
         This test checks that all pre existing contents
         are registered correctly
         """
+        from plone.app.intid.setuphandlers import add_intids
+        from plone.app.testing import applyProfile
 
         # we create a folder before the intallation of plone.app.intid
         setRoles(self.portal, TEST_USER_ID, ['Manager'])


Repository: plone.app.intid


Branch: refs/heads/master
Date: 2015-08-07T13:23:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.intid/commit/d1ece9642f07ea47bfeb6adb77e8eec310724862

remove duplicate (they are 100% the same)

Files changed:
M plone/app/intid/configure.zcml

diff --git a/plone/app/intid/configure.zcml b/plone/app/intid/configure.zcml
index 6307478..bddfd9e 100644
--- a/plone/app/intid/configure.zcml
+++ b/plone/app/intid/configure.zcml
@@ -9,40 +9,20 @@
   <include file="profiles.zcml" />
 
   <!-- Register intid handlers for all CMF/Plone content -->
-  <configure zcml:condition="installed zope.lifecycleevent.interfaces.IObjectMovedEvent">
-    <subscriber
-        handler="five.intid.intid.addIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectAddedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.removeIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectRemovedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.moveIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectMovedEvent"
-        />
-  </configure>
-  <!-- Zope 2.10 compatibility -->
-  <configure zcml:condition="not-installed zope.lifecycleevent.interfaces.IObjectMovedEvent">
-    <subscriber
-        handler="five.intid.intid.addIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectAddedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.removeIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectRemovedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.moveIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectMovedEvent"
-        />
-  </configure>
+  <subscriber
+      handler="five.intid.intid.addIntIdSubscriber"
+      for="Products.CMFCore.interfaces.IDynamicType
+           zope.lifecycleevent.interfaces.IObjectAddedEvent"
+      />
+  <subscriber
+      handler="five.intid.intid.removeIntIdSubscriber"
+      for="Products.CMFCore.interfaces.IDynamicType
+           zope.lifecycleevent.interfaces.IObjectRemovedEvent"
+      />
+  <subscriber
+      handler="five.intid.intid.moveIntIdSubscriber"
+      for="Products.CMFCore.interfaces.IDynamicType
+           zope.lifecycleevent.interfaces.IObjectMovedEvent"
+      />
 
 </configure>


Repository: plone.app.intid


Branch: refs/heads/master
Date: 2015-08-24T13:40:21-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/e0afa20dd562a6fa855a4344dc2baed140742717

Merge pull request #3 from plone/linkintegrity

Linkintegrity

Files changed:
M plone/app/intid/configure.zcml
M plone/app/intid/tests/test_setup.py

diff --git a/plone/app/intid/configure.zcml b/plone/app/intid/configure.zcml
index 6307478..bddfd9e 100644
--- a/plone/app/intid/configure.zcml
+++ b/plone/app/intid/configure.zcml
@@ -9,40 +9,20 @@
   <include file="profiles.zcml" />
 
   <!-- Register intid handlers for all CMF/Plone content -->
-  <configure zcml:condition="installed zope.lifecycleevent.interfaces.IObjectMovedEvent">
-    <subscriber
-        handler="five.intid.intid.addIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectAddedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.removeIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectRemovedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.moveIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectMovedEvent"
-        />
-  </configure>
-  <!-- Zope 2.10 compatibility -->
-  <configure zcml:condition="not-installed zope.lifecycleevent.interfaces.IObjectMovedEvent">
-    <subscriber
-        handler="five.intid.intid.addIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectAddedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.removeIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectRemovedEvent"
-        />
-    <subscriber
-        handler="five.intid.intid.moveIntIdSubscriber"
-        for="Products.CMFCore.interfaces.IDynamicType
-             zope.lifecycleevent.interfaces.IObjectMovedEvent"
-        />
-  </configure>
+  <subscriber
+      handler="five.intid.intid.addIntIdSubscriber"
+      for="Products.CMFCore.interfaces.IDynamicType
+           zope.lifecycleevent.interfaces.IObjectAddedEvent"
+      />
+  <subscriber
+      handler="five.intid.intid.removeIntIdSubscriber"
+      for="Products.CMFCore.interfaces.IDynamicType
+           zope.lifecycleevent.interfaces.IObjectRemovedEvent"
+      />
+  <subscriber
+      handler="five.intid.intid.moveIntIdSubscriber"
+      for="Products.CMFCore.interfaces.IDynamicType
+           zope.lifecycleevent.interfaces.IObjectMovedEvent"
+      />
 
 </configure>
diff --git a/plone/app/intid/tests/test_setup.py b/plone/app/intid/tests/test_setup.py
index 9a81972..b2919ba 100644
--- a/plone/app/intid/tests/test_setup.py
+++ b/plone/app/intid/tests/test_setup.py
@@ -1,9 +1,7 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from plone.app.intid.setuphandlers import add_intids
 from plone.app.intid.testing import SETUP_TESTING
 from plone.app.testing import TEST_USER_ID
-from plone.app.testing import applyProfile
 from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
 from zope.component import getUtility
@@ -18,7 +16,7 @@ def setUp(self):
         self.portal = self.layer['portal']
         # XXX below code is only needed if theres no Folder FTI already setup.
         typetool = getToolByName(self.portal, "portal_types")
-        if not "Folder" in typetool.objectIds():
+        if "Folder" not in typetool.objectIds():
             # XXX Check if this is needed for Plone 5.0! In 4.3 the FTI is
             # already setup
             fti = DexterityFTI('Folder')
@@ -27,6 +25,19 @@ def setUp(self):
     def tearDown(self):
         setRoles(self.portal, TEST_USER_ID, ['Member'])
 
+    def test_already_installed(self):
+        """plone.app.intid is a dependency of plone.app.linknitegrity
+        which is a dependency of CMFPlone, so it is always installed.
+        This tests if this is true.
+        """
+        # we create a folder
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+        intids = getUtility(IIntIds)
+        self.assertIsNotNone(intids.getId(folder))
+
+    @unittest.skip('p.a.intid is always installed')
     def test_install(self):
         """When p.app.intid is intalled it registers some utility
         from zope.intid and five.intid and search in portal_catalog
@@ -35,6 +46,8 @@ def test_install(self):
         This test checks that all pre existing contents
         are registered correctly
         """
+        from plone.app.intid.setuphandlers import add_intids
+        from plone.app.testing import applyProfile
 
         # we create a folder before the intallation of plone.app.intid
         setRoles(self.portal, TEST_USER_ID, ['Manager'])


