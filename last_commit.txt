Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-11-02T15:12:49Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/6858e97d0d86012353e222637b3b13104045c0e7

remove commented code

Files changed:
M Products/CMFPlone/resources/browser/scripts.py

diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index cc9810c..c263b5a 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -92,13 +92,6 @@ def scripts(self):
                 'conditionalcomment': None,
                 'bundle': 'basic'
             })
-            # result.append({
-            #     'src': '%s/%s' % (
-            #         self.site_url,
-            #         self.registry.records['plone.resources.less-modify'].value),
-            #     'conditionalcomment': None,
-            #     'bundle': 'basic'
-            # })
         result.append({
             'src': '%s/%s' % (
                 self.site_url,


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-11-02T15:28:18Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/49010f79e8c91cbb2114eec8f1fc095104de1d01

Split hard coded JavaScript resources into seperate method for easier customization and added tests

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index df335cc..45f2c0e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -35,6 +35,10 @@ New:
 - Added missing_value parameter to controlpanel list and tuple fields.
   [tomgross]
 
+- Split hard coded JavaScript resources into seperate method for easier
+  customization.
+  [tomgross]
+
 Fixes:
 
 - Fixed white space pep8 warnings.
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index c263b5a..652d729 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -63,9 +63,8 @@ def get_data(self, bundle, result):
                     'src': js_location
                 })
 
-    def scripts(self):
-        """The requirejs scripts, the ones that are not resources are loaded on
-        configjs.py
+    def default_resources(self):
+        """ Default resources used by Plone itself
         """
         result = []
         # We always add jquery resource
@@ -106,6 +105,13 @@ def scripts(self):
             'conditionalcomment': None,
             'bundle': 'basic'
         })
+        return result
+
+    def scripts(self):
+        """The requirejs scripts, the ones that are not resources are loaded on
+        configjs.py
+        """
+        result = self.default_resources()
         result.extend(self.ordered_bundles_result())
 
         # Add manual added resources
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 335dbb8..fc8ea51 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -1,4 +1,5 @@
 import json
+import mock
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager
@@ -7,10 +8,13 @@
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
+from Products.CMFPlone.resources import add_resource_on_request
+from Products.CMFPlone.resources.browser.scripts import ScriptsView
 from Products.CMFPlone.resources.exportimport.resourceregistry import (
     ResourceRegistryNodeAdapter)
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
+from plone.app.testing import logout
 from plone.registry.interfaces import IRegistry
 from plone.resource.interfaces import IResourceDirectory
 from plone.subrequest import subrequest
@@ -293,3 +297,47 @@ def test_get_require_js_config_uses_stub_modules(self):
         self.layer['request'].form['bundle'] = 'plone-logged-in'
         config = json.loads(view.js_build_config())
         self.assertEquals(config['paths']['jquery'], 'empty:')
+
+
+class DummyResource(object):
+
+    def __init__(self, js):
+        self.js = js
+
+
+class TestScriptsViewlet(PloneTestCase.PloneTestCase):
+
+    def test_scripts_viewlet(self):
+        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[0],
+            {'src': 'http://nohost/plone/++plone++static/components/jquery/dist/jquery.min.js',
+             'conditionalcomment': None, 'bundle': 'basic'})
+        self.assertEqual(len(results), 6)
+
+    def test_scripts_viewlet_anonymous(self):
+        logout()
+        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[0],
+            {'src': 'http://nohost/plone/++plone++static/components/jquery/dist/jquery.min.js',
+             'conditionalcomment': None, 'bundle': 'basic'})
+        self.assertEqual(len(results), 5)
+
+    @mock.patch.object(ScriptsView,
+                       'get_resources',
+                       new=lambda self: {'foo': DummyResource('++resource++foo.js')})
+    def test_request_resources(self):
+        add_resource_on_request(self.layer['request'], 'foo')
+        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[-1], {'src': 'http://nohost/plone/++resource++foo.js',
+                          'conditionalcomment': '',
+                          'bundle': 'none'})
+


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-11-04T17:40:34+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/fe1bce51de12116631c7bc4edf959081f427fc2b

Merge pull request #1218 from plone/tomgross-scriptscondition

Scripts viewlet refactor

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 497c78e..3f188f6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -39,6 +39,10 @@ New:
 - Added missing_value parameter to controlpanel list and tuple fields.
   [tomgross]
 
+- Split hard coded JavaScript resources into seperate method for easier
+  customization.
+  [tomgross]
+
 Fixes:
 
 - Fixed white space pep8 warnings.
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index cc9810c..652d729 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -63,9 +63,8 @@ def get_data(self, bundle, result):
                     'src': js_location
                 })
 
-    def scripts(self):
-        """The requirejs scripts, the ones that are not resources are loaded on
-        configjs.py
+    def default_resources(self):
+        """ Default resources used by Plone itself
         """
         result = []
         # We always add jquery resource
@@ -92,13 +91,6 @@ def scripts(self):
                 'conditionalcomment': None,
                 'bundle': 'basic'
             })
-            # result.append({
-            #     'src': '%s/%s' % (
-            #         self.site_url,
-            #         self.registry.records['plone.resources.less-modify'].value),
-            #     'conditionalcomment': None,
-            #     'bundle': 'basic'
-            # })
         result.append({
             'src': '%s/%s' % (
                 self.site_url,
@@ -113,6 +105,13 @@ def scripts(self):
             'conditionalcomment': None,
             'bundle': 'basic'
         })
+        return result
+
+    def scripts(self):
+        """The requirejs scripts, the ones that are not resources are loaded on
+        configjs.py
+        """
+        result = self.default_resources()
         result.extend(self.ordered_bundles_result())
 
         # Add manual added resources
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 335dbb8..fc8ea51 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -1,4 +1,5 @@
 import json
+import mock
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager
@@ -7,10 +8,13 @@
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
+from Products.CMFPlone.resources import add_resource_on_request
+from Products.CMFPlone.resources.browser.scripts import ScriptsView
 from Products.CMFPlone.resources.exportimport.resourceregistry import (
     ResourceRegistryNodeAdapter)
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
+from plone.app.testing import logout
 from plone.registry.interfaces import IRegistry
 from plone.resource.interfaces import IResourceDirectory
 from plone.subrequest import subrequest
@@ -293,3 +297,47 @@ def test_get_require_js_config_uses_stub_modules(self):
         self.layer['request'].form['bundle'] = 'plone-logged-in'
         config = json.loads(view.js_build_config())
         self.assertEquals(config['paths']['jquery'], 'empty:')
+
+
+class DummyResource(object):
+
+    def __init__(self, js):
+        self.js = js
+
+
+class TestScriptsViewlet(PloneTestCase.PloneTestCase):
+
+    def test_scripts_viewlet(self):
+        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[0],
+            {'src': 'http://nohost/plone/++plone++static/components/jquery/dist/jquery.min.js',
+             'conditionalcomment': None, 'bundle': 'basic'})
+        self.assertEqual(len(results), 6)
+
+    def test_scripts_viewlet_anonymous(self):
+        logout()
+        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[0],
+            {'src': 'http://nohost/plone/++plone++static/components/jquery/dist/jquery.min.js',
+             'conditionalcomment': None, 'bundle': 'basic'})
+        self.assertEqual(len(results), 5)
+
+    @mock.patch.object(ScriptsView,
+                       'get_resources',
+                       new=lambda self: {'foo': DummyResource('++resource++foo.js')})
+    def test_request_resources(self):
+        add_resource_on_request(self.layer['request'], 'foo')
+        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[-1], {'src': 'http://nohost/plone/++resource++foo.js',
+                          'conditionalcomment': '',
+                          'bundle': 'none'})
+


