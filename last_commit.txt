Repository: plone.app.discussion
Branch: refs/heads/master
Date: 2015-02-16T11:28:49+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.discussion/commit/535af3aaceedbf99b52fbe737b341cb22d813dbf

Count acquisition wrapped comments

If the View permission is not set directly on the workflow,
but instead is left to be acquired,
total_comments will always return 0.

Files changed:
M plone/app/discussion/conversation.py

diff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py
index 540bf97..e73546a 100644
--- a/plone/app/discussion/conversation.py
+++ b/plone/app/discussion/conversation.py
@@ -80,7 +80,7 @@ def enabled(self):
     @property
     def total_comments(self):
         public_comments = [
-            x for x in self._comments.values()
+            x for x in self.values()
             if user_nobody.has_permission('View', x)
         ]
         return len(public_comments)


Repository: plone.app.discussion
Branch: refs/heads/master
Date: 2015-02-16T11:31:47+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.discussion/commit/d5b5b1c2cd269f1cfa27fb47df8fd44d18a6c4ef

Fix total_comments indexer

"@property removes Acquisition wrappers from 'self'.
I don't remember why exactly (some implementation detail of Acquisition),
but it's a fact of life."

Quote from @davisagli on
https://github.com/plone/plone.app.discussion/pull/58

In short: removing the @property from total_comments fix the problem.

Files changed:
M plone/app/discussion/catalog.py
M plone/app/discussion/conversation.py

diff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py
index 12382df..5034928 100644
--- a/plone/app/discussion/catalog.py
+++ b/plone/app/discussion/catalog.py
@@ -33,7 +33,7 @@ def total_comments(object):
     if object.meta_type != 'Discussion Item':
         try:
             conversation = IConversation(object)
-            return conversation.total_comments
+            return conversation.total_comments()
         except TypeError:  # pragma: no cover
             # The item is contentish but nobody
             # implemented an adapter for it
diff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py
index e73546a..01d3182 100644
--- a/plone/app/discussion/conversation.py
+++ b/plone/app/discussion/conversation.py
@@ -77,7 +77,6 @@ def enabled(self):
         parent = aq_inner(self.__parent__)
         return parent.restrictedTraverse('@@conversation_view').enabled()
 
-    @property
     def total_comments(self):
         public_comments = [
             x for x in self.values()


Repository: plone.app.discussion
Branch: refs/heads/master
Date: 2015-02-16T16:35:43+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.discussion/commit/4ea41aba434c59ef40bcffbd5262f13013dc5d9d

Fix tests

Files changed:
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_conversation.py

diff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py
index 5277f5f..467680b 100644
--- a/plone/app/discussion/tests/test_comment.py
+++ b/plone/app/discussion/tests/test_comment.py
@@ -433,7 +433,7 @@ def test_delete_comment(self):
         self.assertEqual(len(replies), 0)
 
         # Make sure the first comment is still in the conversation
-        self.assertEqual(conversation.total_comments, 1)
+        self.assertEqual(conversation.total_comments(), 1)
 
     def test_traversal(self):
         # Create a nested structure of comment replies and check the traversal
diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py
index 8400b05..b990a54 100644
--- a/plone/app/discussion/tests/test_conversation.py
+++ b/plone/app/discussion/tests/test_conversation.py
@@ -78,7 +78,7 @@ def test_add_comment(self):
         self.assertEqual(new_id, comment.comment_id)
         self.assertEqual(len(list(conversation.getComments())), 1)
         self.assertEqual(len(tuple(conversation.getThreads())), 1)
-        self.assertEqual(conversation.total_comments, 1)
+        self.assertEqual(conversation.total_comments(), 1)
         self.assertTrue(
             conversation.last_comment_date - datetime.utcnow() <
             timedelta(seconds=1)
@@ -91,7 +91,7 @@ def test_private_comment(self):
         comment.author_username = "nobody"
         conversation.addComment(comment)
         comment.manage_permission("View", roles=tuple())
-        self.assertEqual(0, conversation.total_comments)
+        self.assertEqual(0, conversation.total_comments())
         self.assertEqual(None, conversation.last_comment_date)
         self.assertEqual(["nobody"], list(conversation.commentators))
         self.assertEqual([], list(conversation.public_commentators))
@@ -112,7 +112,7 @@ def test_delete_comment(self):
         # make sure the comment has been added
         self.assertEqual(len(list(conversation.getComments())), 1)
         self.assertEqual(len(tuple(conversation.getThreads())), 1)
-        self.assertEqual(conversation.total_comments, 1)
+        self.assertEqual(conversation.total_comments(), 1)
 
         # delete the comment we just created
         del conversation[new_id]
@@ -120,7 +120,7 @@ def test_delete_comment(self):
         # make sure there is no comment left in the conversation
         self.assertEqual(len(list(conversation.getComments())), 0)
         self.assertEqual(len(tuple(conversation.getThreads())), 0)
-        self.assertEqual(conversation.total_comments, 0)
+        self.assertEqual(conversation.total_comments(), 0)
 
     def test_delete_recursive(self):
         # Create a conversation. In this case we doesn't assign it to an
@@ -195,7 +195,7 @@ def test_delete_comment_when_content_object_is_deleted(self):
         # Make sure the comment has been deleted as well
         self.assertEqual(len(list(conversation.getComments())), 0)
         self.assertEqual(len(tuple(conversation.getThreads())), 0)
-        self.assertEqual(conversation.total_comments, 0)
+        self.assertEqual(conversation.total_comments(), 0)
 
     def test_comments_enabled_on_doc_in_subfolder(self):
         typetool = self.portal.portal_types
@@ -422,7 +422,7 @@ def test_total_comments(self):
         conversation.addComment(comment2)
         conversation.addComment(comment3)
 
-        self.assertEqual(conversation.total_comments, 3)
+        self.assertEqual(conversation.total_comments(), 3)
 
     def test_commentators(self):
         # add and remove a few comments to make sure the commentators
@@ -432,7 +432,7 @@ def test_commentators(self):
         # object, as we just want to check the Conversation object API.
         conversation = IConversation(self.portal.doc1)
 
-        self.assertEqual(conversation.total_comments, 0)
+        self.assertEqual(conversation.total_comments(), 0)
 
         # Add a four comments from three different users
         # Note: in real life, we always create
@@ -459,7 +459,7 @@ def test_commentators(self):
         new_comment4_id = conversation.addComment(comment4)
 
         # check if all commentators are in the commentators list
-        self.assertEqual(conversation.total_comments, 4)
+        self.assertEqual(conversation.total_comments(), 4)
         self.assertTrue('Jim' in conversation.commentators)
         self.assertTrue('Joe' in conversation.commentators)
         self.assertTrue('Jack' in conversation.commentators)
@@ -472,7 +472,7 @@ def test_commentators(self):
         self.assertTrue('Jim' in conversation.commentators)
         self.assertTrue('Joe' in conversation.commentators)
         self.assertTrue('Jack' in conversation.commentators)
-        self.assertEqual(conversation.total_comments, 3)
+        self.assertEqual(conversation.total_comments(), 3)
 
         # remove the second comment from Jack
         del conversation[new_comment4_id]
@@ -481,7 +481,7 @@ def test_commentators(self):
         self.assertTrue('Jim' in conversation.commentators)
         self.assertTrue('Joe' in conversation.commentators)
         self.assertFalse('Jack' in conversation.commentators)
-        self.assertEqual(conversation.total_comments, 2)
+        self.assertEqual(conversation.total_comments(), 2)
 
     def test_last_comment_date(self):
         # add and remove some comments and check if last_comment_date
@@ -868,7 +868,7 @@ def test_dict_api(self):
 
         # check that replies only contain the direct comments
         # and no comments deeper than 1
-        self.assertEqual(conversation.total_comments, 6)
+        self.assertEqual(conversation.total_comments(), 6)
         self.assertEqual(len(replies), 2)
         self.assertEqual(len(replies_to_comment1), 2)
         self.assertEqual(len(replies_to_comment1_1), 1)


Repository: plone.app.discussion
Branch: refs/heads/master
Date: 2015-02-25T21:47:08+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.discussion/commit/2a423095abee2b6d3e73b280a84500a591c9b8e7

Add note on CHANGES.rst

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index b0bbbb8..5b8ca9f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -20,6 +20,10 @@ Changelog
 - Read mail settings from new (Plone 5) registry.
   [timo]
 
+- Remove @property from Conversation.total_comments as @property and
+  Acquisition don't play well together.
+  [gforcada]
+
 
 2.3.3 (2014-10-23)
 ------------------


Repository: plone.app.discussion
Branch: refs/heads/master
Date: 2015-02-25T21:47:42+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.discussion/commit/2faf69bdbb6c1999d3858063be7b6b1008a9a2c8

Merge pull request #62 from plone/acquisition-total-comments-4

Acquisition total comments

Files changed:
M CHANGES.rst
M plone/app/discussion/catalog.py
M plone/app/discussion/conversation.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_conversation.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b0bbbb8..5b8ca9f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -20,6 +20,10 @@ Changelog
 - Read mail settings from new (Plone 5) registry.
   [timo]
 
+- Remove @property from Conversation.total_comments as @property and
+  Acquisition don't play well together.
+  [gforcada]
+
 
 2.3.3 (2014-10-23)
 ------------------
diff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py
index 12382df..5034928 100644
--- a/plone/app/discussion/catalog.py
+++ b/plone/app/discussion/catalog.py
@@ -33,7 +33,7 @@ def total_comments(object):
     if object.meta_type != 'Discussion Item':
         try:
             conversation = IConversation(object)
-            return conversation.total_comments
+            return conversation.total_comments()
         except TypeError:  # pragma: no cover
             # The item is contentish but nobody
             # implemented an adapter for it
diff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py
index 540bf97..01d3182 100644
--- a/plone/app/discussion/conversation.py
+++ b/plone/app/discussion/conversation.py
@@ -77,10 +77,9 @@ def enabled(self):
         parent = aq_inner(self.__parent__)
         return parent.restrictedTraverse('@@conversation_view').enabled()
 
-    @property
     def total_comments(self):
         public_comments = [
-            x for x in self._comments.values()
+            x for x in self.values()
             if user_nobody.has_permission('View', x)
         ]
         return len(public_comments)
diff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py
index 5277f5f..467680b 100644
--- a/plone/app/discussion/tests/test_comment.py
+++ b/plone/app/discussion/tests/test_comment.py
@@ -433,7 +433,7 @@ def test_delete_comment(self):
         self.assertEqual(len(replies), 0)
 
         # Make sure the first comment is still in the conversation
-        self.assertEqual(conversation.total_comments, 1)
+        self.assertEqual(conversation.total_comments(), 1)
 
     def test_traversal(self):
         # Create a nested structure of comment replies and check the traversal
diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py
index 8400b05..b990a54 100644
--- a/plone/app/discussion/tests/test_conversation.py
+++ b/plone/app/discussion/tests/test_conversation.py
@@ -78,7 +78,7 @@ def test_add_comment(self):
         self.assertEqual(new_id, comment.comment_id)
         self.assertEqual(len(list(conversation.getComments())), 1)
         self.assertEqual(len(tuple(conversation.getThreads())), 1)
-        self.assertEqual(conversation.total_comments, 1)
+        self.assertEqual(conversation.total_comments(), 1)
         self.assertTrue(
             conversation.last_comment_date - datetime.utcnow() <
             timedelta(seconds=1)
@@ -91,7 +91,7 @@ def test_private_comment(self):
         comment.author_username = "nobody"
         conversation.addComment(comment)
         comment.manage_permission("View", roles=tuple())
-        self.assertEqual(0, conversation.total_comments)
+        self.assertEqual(0, conversation.total_comments())
         self.assertEqual(None, conversation.last_comment_date)
         self.assertEqual(["nobody"], list(conversation.commentators))
         self.assertEqual([], list(conversation.public_commentators))
@@ -112,7 +112,7 @@ def test_delete_comment(self):
         # make sure the comment has been added
         self.assertEqual(len(list(conversation.getComments())), 1)
         self.assertEqual(len(tuple(conversation.getThreads())), 1)
-        self.assertEqual(conversation.total_comments, 1)
+        self.assertEqual(conversation.total_comments(), 1)
 
         # delete the comment we just created
         del conversation[new_id]
@@ -120,7 +120,7 @@ def test_delete_comment(self):
         # make sure there is no comment left in the conversation
         self.assertEqual(len(list(conversation.getComments())), 0)
         self.assertEqual(len(tuple(conversation.getThreads())), 0)
-        self.assertEqual(conversation.total_comments, 0)
+        self.assertEqual(conversation.total_comments(), 0)
 
     def test_delete_recursive(self):
         # Create a conversation. In this case we doesn't assign it to an
@@ -195,7 +195,7 @@ def test_delete_comment_when_content_object_is_deleted(self):
         # Make sure the comment has been deleted as well
         self.assertEqual(len(list(conversation.getComments())), 0)
         self.assertEqual(len(tuple(conversation.getThreads())), 0)
-        self.assertEqual(conversation.total_comments, 0)
+        self.assertEqual(conversation.total_comments(), 0)
 
     def test_comments_enabled_on_doc_in_subfolder(self):
         typetool = self.portal.portal_types
@@ -422,7 +422,7 @@ def test_total_comments(self):
         conversation.addComment(comment2)
         conversation.addComment(comment3)
 
-        self.assertEqual(conversation.total_comments, 3)
+        self.assertEqual(conversation.total_comments(), 3)
 
     def test_commentators(self):
         # add and remove a few comments to make sure the commentators
@@ -432,7 +432,7 @@ def test_commentators(self):
         # object, as we just want to check the Conversation object API.
         conversation = IConversation(self.portal.doc1)
 
-        self.assertEqual(conversation.total_comments, 0)
+        self.assertEqual(conversation.total_comments(), 0)
 
         # Add a four comments from three different users
         # Note: in real life, we always create
@@ -459,7 +459,7 @@ def test_commentators(self):
         new_comment4_id = conversation.addComment(comment4)
 
         # check if all commentators are in the commentators list
-        self.assertEqual(conversation.total_comments, 4)
+        self.assertEqual(conversation.total_comments(), 4)
         self.assertTrue('Jim' in conversation.commentators)
         self.assertTrue('Joe' in conversation.commentators)
         self.assertTrue('Jack' in conversation.commentators)
@@ -472,7 +472,7 @@ def test_commentators(self):
         self.assertTrue('Jim' in conversation.commentators)
         self.assertTrue('Joe' in conversation.commentators)
         self.assertTrue('Jack' in conversation.commentators)
-        self.assertEqual(conversation.total_comments, 3)
+        self.assertEqual(conversation.total_comments(), 3)
 
         # remove the second comment from Jack
         del conversation[new_comment4_id]
@@ -481,7 +481,7 @@ def test_commentators(self):
         self.assertTrue('Jim' in conversation.commentators)
         self.assertTrue('Joe' in conversation.commentators)
         self.assertFalse('Jack' in conversation.commentators)
-        self.assertEqual(conversation.total_comments, 2)
+        self.assertEqual(conversation.total_comments(), 2)
 
     def test_last_comment_date(self):
         # add and remove some comments and check if last_comment_date
@@ -868,7 +868,7 @@ def test_dict_api(self):
 
         # check that replies only contain the direct comments
         # and no comments deeper than 1
-        self.assertEqual(conversation.total_comments, 6)
+        self.assertEqual(conversation.total_comments(), 6)
         self.assertEqual(len(replies), 2)
         self.assertEqual(len(replies_to_comment1), 2)
         self.assertEqual(len(replies_to_comment1_1), 1)


