Repository: plone.portlet.static
Branch: refs/heads/master
Date: 2015-03-06T14:54:46+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.portlet.static/commit/618081c11dae293de58ba7cfb10dcdfffc4521a6

Clean up test setup.

Files changed:
M CHANGES.rst
M plone/portlet/static/testing.py
M plone/portlet/static/tests/test_portlet_static.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 74a2f68..73bcc0e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,6 +5,9 @@ Changelog
 3.0.2 (unreleased)
 ------------------
 
+- Clean up test setup.
+  [timo]
+
 - Check that renderer has a '__portlet_metadata__' attribute
   and compute 'assignment context' only for 'context' portlet.
   [sverbois]
diff --git a/plone/portlet/static/testing.py b/plone/portlet/static/testing.py
index e486b4e..8b49af5 100644
--- a/plone/portlet/static/testing.py
+++ b/plone/portlet/static/testing.py
@@ -1,23 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import applyProfile
-from plone.app.testing import login
-from plone.app.testing import setRoles
 from plone.app.testing.layers import IntegrationTesting
-from plone.testing import z2
 from zope.configuration import xmlconfig
 
 
 class PlonePortletStaticLayer(PloneSandboxLayer):
 
     def setUpZope(self, app, configurationContext):
-        import Products.ATContentTypes
-        self.loadZCML(package=Products.ATContentTypes)
-        z2.installProduct(app, 'Products.Archetypes')
-        z2.installProduct(app, 'Products.ATContentTypes')
-        z2.installProduct(app, 'plone.portlet.static')
         import plone.portlet.static
         xmlconfig.file(
             'configure.zcml',
@@ -25,24 +15,7 @@ def setUpZope(self, app, configurationContext):
             context=configurationContext)
 
     def setUpPloneSite(self, portal):
-        applyProfile(portal, 'Products.ATContentTypes:default')
         applyProfile(portal, 'plone.portlet.static:default')
-        setRoles(portal, TEST_USER_ID, ['Manager'])
-        login(portal, TEST_USER_NAME)
-        portal.acl_users.userFolderAddUser(
-            'admin',
-            'secret',
-            ['Manager'],
-            []
-        )
-        portal.invokeFactory(
-            "Folder",
-            id="test-folder",
-            title=u"Test Folder"
-        )
-
-    def tearDownZope(self, app):
-        z2.uninstallProduct(app, 'plone.portlet.static')
 
 PLONEPORTLETSTATIC_FIXTURE = PlonePortletStaticLayer()
 
diff --git a/plone/portlet/static/tests/test_portlet_static.py b/plone/portlet/static/tests/test_portlet_static.py
index e0a6ebb..cc8424d 100644
--- a/plone/portlet/static/tests/test_portlet_static.py
+++ b/plone/portlet/static/tests/test_portlet_static.py
@@ -21,7 +21,6 @@ class TestPortlet(unittest.TestCase):
 
     def setUp(self):
         self.portal = self.layer['portal']
-        self.folder = getattr(self.portal, 'test-folder')
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         login(self.portal, TEST_USER_NAME)
 
@@ -52,16 +51,16 @@ def testInvokeAddview(self):
 
     def testInvokeEditView(self):
         mapping = PortletAssignmentMapping()
-        request = self.folder.REQUEST
+        request = self.portal.REQUEST
 
         mapping['foo'] = static.Assignment(header=u"title", text="text")
         editview = getMultiAdapter((mapping['foo'], request), name='edit')
         self.failUnless(isinstance(editview, static.EditForm))
 
     def testRenderer(self):
-        context = self.folder
-        request = self.folder.REQUEST
-        view = self.folder.restrictedTraverse('@@plone')
+        context = self.portal
+        request = self.portal.REQUEST
+        view = self.portal.restrictedTraverse('@@plone')
         manager = getUtility(
             IPortletManager,
             name='plone.rightcolumn',
@@ -85,15 +84,14 @@ class TestRenderer(unittest.TestCase):
 
     def setUp(self):
         self.portal = self.layer['portal']
-        self.folder = getattr(self.portal, 'test-folder')
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         login(self.portal, TEST_USER_NAME)
 
     def renderer(self, context=None, request=None, view=None, manager=None,
                  assignment=None):
-        context = context or self.folder
-        request = request or self.folder.REQUEST
-        view = view or self.folder.restrictedTraverse('@@plone')
+        context = context or self.portal
+        request = request or self.portal.REQUEST
+        view = view or self.portal.restrictedTraverse('@@plone')
         manager = manager or getUtility(
             IPortletManager,
             name='plone.rightcolumn',
@@ -120,7 +118,7 @@ def test_render(self):
                 text="<b>text</b>"
             )
         )
-        r = r.__of__(self.folder)
+        r = r.__of__(self.portal)
         r.update()
         output = r.render()
         self.failUnless('title' in output)
@@ -131,7 +129,7 @@ def test_no_header(self):
             context=self.portal,
             assignment=static.Assignment(text="<b>text</b>")
         )
-        r = r.__of__(self.folder)
+        r = r.__of__(self.portal)
         r.update()
         output = r.render()
         self.assertTrue('<a class="tile"' not in output)
@@ -151,18 +149,13 @@ def test_css_class(self):
         self.assertEquals('portlet-static-welcome-text', r.css_class())
 
     def test_relative_link(self):
-        folder_id = self.portal.invokeFactory(
-            'Folder',
-            id='folder1',
-            title='My Folder Title'
-        )
         r = self.renderer(
-            context=self.portal[folder_id],
+            context=self.portal,
             assignment=static.Assignment(
                 text="""<a href="relative/link">link</a>"""
             )
         )
-        r = r.__of__(self.folder)
+        r = r.__of__(self.portal)
         r.__portlet_metadata__ = dict(
             category='context', key='/'.join(self.portal.getPhysicalPath()))
         r.update()


