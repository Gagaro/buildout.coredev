Repository: plone.app.contentmenu
Branch: refs/heads/master
Date: 2015-05-03T11:54:22-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.contentmenu/commit/0fe4f197539f66f7e04951ad2c317b4aba428448

more test fixes

Files changed:
M plone/app/contentmenu/tests/test_menu.py

diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 2e1cd7c..3895a5c 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -18,7 +18,6 @@
 from plone.app.testing import logout
 from plone.app.testing import setRoles
 from plone.locking.interfaces import ILockable
-from plone.protect.authenticator import createToken
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
 from zope.interface import directlyProvides
@@ -306,10 +305,11 @@ def testAddViewExpressionUsedInMenu(self):
         if self.is_dx:
             self.assertIn('%s/++add++File' % self.folder.absolute_url(), urls)
         else:
-            token = createToken()
-            self.assertIn(
-                '%s/createObject?type_name=File&_authenticator=%s' % (self.folder.absolute_url(), token),
-                urls)
+            found = False
+            for url in urls:
+                if '%s/createObject?type_name=File' % self.folder.absolute_url() in url:  # noqa
+                    found = True
+            self.assertTrue(found)
 
     def testFrontPageExpressionContext(self):
         # If the expression context uses the front-page instead of the
@@ -334,12 +334,14 @@ def testTypeNameIsURLQuoted(self):
             # DX does not use plusquote
             return
         actions = self.menu.getMenuItems(self.folder, self.request)
-        self.assertIn(
-            self.folder.absolute_url() + '/createObject?type_name=News+Item&_authenticator=' + createToken(),
-            [a['action'] for a in actions])
+        found = False
+        for url in [a['action'] for a in actions]:
+            if self.folder.absolute_url() + '/createObject?type_name=News+Item' in url:
+                found = True
+        self.assertTrue(found)
 
     def testMenuIncludesFactoriesOnNonFolderishContext(self):
-        actions = self.menu.getMenuItems(self.folder.doc1, self.request )
+        actions = self.menu.getMenuItems(self.folder.doc1, self.request)
         img = None
         for a in actions:
             if a['extra']['id'] == 'image':
@@ -389,9 +391,8 @@ def testMenuForFolderishDefaultPages(self):
                 actions[-2]['action'])
         else:
             self.assertEqual(len(actions), 10)
-            self.assertEqual(
-                'http://nohost/plone/folder1/createObject?type_name=Document&_authenticator=' + createToken(),
-                actions[-2]['action'])
+            self.assertTrue(
+                'http://nohost/plone/folder1/createObject?type_name=Document' in actions[-2]['action'])  # noqa
 
         # test non-folderish default_page
         self.portal.setDefaultPage('doc1')
@@ -401,9 +402,8 @@ def testMenuForFolderishDefaultPages(self):
                 'http://nohost/plone/++add++Document',
                 actions[-1]['action'])
         else:
-            self.assertEqual(
-                'http://nohost/plone/createObject?type_name=Document',
-                actions[-1]['action'])
+            self.assertTrue(
+                'http://nohost/plone/createObject?type_name=Document' in actions[-1]['action'])  # noqa
 
         # test folderish default_page
         # We need to test a different folder than folder1 to beat memoize.
@@ -426,9 +426,8 @@ def testMenuForFolderishDefaultPages(self):
                 'http://nohost/plone/++add++Document',
                 actions[-1]['action'])
         else:
-            self.assertEqual(
-                'http://nohost/plone/createObject?type_name=Document',
-                actions[-1]['action'])
+            self.assertTrue(
+                'http://nohost/plone/createObject?type_name=Document' in actions[-1]['action'])  # noqa
 
     def testConstrainTypes(self):
         constraints = ISelectableConstrainTypes(self.folder)


