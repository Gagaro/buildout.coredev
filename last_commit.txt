Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-07-29T02:25:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/77964d609b84bab6128713db19cbd4af9522cf3d

Move DefaultPage universe from here to Products.CMFPlone and keep placeholders

Files changed:
M CHANGES.rst
M plone/app/layout/navigation/configure.zcml
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cf0f346..32efbd0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,11 +4,17 @@ Changelog
 2.5.10 (unreleased)
 -------------------
 
+- Move getDefaultPage, isDefaultPage, IDefaultPage and DefaultPage view to
+  Products.CMFPlone in order to avoid circular imports between both packages.
+  Moved test for it as well. Placed deferred deprecated imports for all old
+  names here.
+  [jensens]
+
 - Remove deprecated ``context`` parameter from ``DefaultPage`` methods.
   [jensens]
 
 - minor cleanup in getDefaultPage function
-  [jensens[]
+  [jensens]
 
 - Added a test for the complex getDefaultPage function
   [jensens]
diff --git a/plone/app/layout/navigation/configure.zcml b/plone/app/layout/navigation/configure.zcml
index 898d003..3dad49e 100644
--- a/plone/app/layout/navigation/configure.zcml
+++ b/plone/app/layout/navigation/configure.zcml
@@ -6,12 +6,4 @@
         <allow interface=".interfaces.INavtreeStrategy" />
     </class>
 
-    <browser:page
-      for="*"
-      name="default_page"
-      class=".defaultpage.DefaultPage"
-      permission="zope.Public"
-      allowed_interface=".interfaces.IDefaultPage"
-      />
-
 </configure>
diff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py
index c09099a..96ef302 100644
--- a/plone/app/layout/navigation/defaultpage.py
+++ b/plone/app/layout/navigation/defaultpage.py
@@ -1,118 +1,9 @@
 # -*- coding: utf-8 -*-
-from Acquisition import aq_inner, aq_base
-from plone.app.layout.navigation.interfaces import IDefaultPage
-from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
-from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
-from Products.Five.browser import BrowserView
-from zope.component import queryAdapter
-from zope.component import queryUtility
-from zope.interface import implementer
-
-
-@implementer(IDefaultPage)
-class DefaultPage(BrowserView):
-
-    def isDefaultPage(self, obj):
-        return isDefaultPage(aq_inner(self.context), obj)
-
-    def getDefaultPage(self):
-        return getDefaultPage(aq_inner(self.context))
-
-
-def isDefaultPage(container, obj):
-    """Finds out if the given obj is the default page in its parent folder.
-
-    Only considers explicitly contained objects, either set as index_html,
-    with the default_page property, or using IBrowserDefault.
-    """
-    parentDefaultPage = getDefaultPage(container)
-    precondition = (
-        parentDefaultPage is not None
-        and '/' not in parentDefaultPage
-        and hasattr(obj, 'getId')
-    )
-    return precondition and (parentDefaultPage == obj.getId())
-
-
-def getDefaultPage(context):
-    """Given a folderish item, find out if it has a default-page using
-    the following lookup rules:
-
-        1. A content object called 'index_html' wins
-        2. Else check for IBrowserDefault, either if the container implements
-           it or if an adapter exists. In both cases fetch its FTI and either
-           take it if it implements IDynamicViewTypeInformation or adapt it to
-           IDynamicViewTypeInformation. call getDefaultPage on the implementer
-           and take value if given.
-        3. Else, look up the attribute default_page on the object, without
-           acquisition in place
-        3.1 look for a content in the container with the id, no acquisition!
-        3.2 look for a content at portal, with acquisition
-        4. Else, look up the property default_page in site_properties for
-           magic ids and test these
-
-    The id of the first matching item is then used to lookup a translation
-    and if found, its id is returned. If no default page is set, None is
-    returned. If a non-folderish item is passed in, return None always.
-    """
-    # The ids where we look for default - must support __contains__
-    ids = set()
-
-    # For BTreeFolders we just use the __contains__ otherwise build a set
-    if isinstance(aq_base(context), BTreeFolder2Base):
-        ids = context
-    elif hasattr(aq_base(context), 'objectIds'):
-        ids = set(context.objectIds())
-
-    # 1. test for contentish index_html
-    if 'index_html' in ids:
-        return 'index_html'
-
-    # 2. Test for IBrowserDefault
-    if IBrowserDefault.providedBy(context):
-        browserDefault = context
-    else:
-        browserDefault = queryAdapter(context, IBrowserDefault)
-
-    if browserDefault is not None:
-        fti = context.getTypeInfo()
-        if fti is not None:
-            if IDynamicViewTypeInformation.providedBy(fti):
-                dynamicFTI = fti
-            else:
-                dynamicFTI = queryAdapter(fti, IDynamicViewTypeInformation)
-            if dynamicFTI is not None:
-                page = dynamicFTI.getDefaultPage(context, check_exists=True)
-                if page is not None:
-                    return page
-
-    # 3.1 Test for default_page attribute in folder, no acquisition
-    pages = getattr(aq_base(context), 'default_page', [])
-    if isinstance(pages, basestring):
-        pages = [pages]
-    for page in pages:
-        if page and page in ids:
-            return page
-
-    portal = queryUtility(ISiteRoot)
-    # Might happen during portal creation
-    if portal is None:
-        return
-
-    # 3.2 Test for default page in portal, acquire
-    for page in pages:
-        if portal.unrestrictedTraverse(page, None):
-            return page
-
-    # 4. Test for default sitewide default_page setting
-    pp = getattr(portal, 'portal_properties', None)
-    if pp is not None:
-        site_properties = getattr(pp, 'site_properties', None)
-        if site_properties is not None:
-            for page in site_properties.getProperty('default_page', []):
-                if page in ids:
-                    return page
-
-    return
+from zope.deferredimport import deprecated
+
+deprecated(
+    "Import from Products.CMFPlone instead",
+    DefaultPage='Products.CMFPlone.browser.defaultpage:DefaultPage',
+    isDefaultPage='Products.CMFPlone.defaultpage:is_default_page',
+    getDefaultPage='Products.CMFPlone.defaultpage:get_default_page',
+)
diff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py
index 33067d6..a94728d 100644
--- a/plone/app/layout/navigation/interfaces.py
+++ b/plone/app/layout/navigation/interfaces.py
@@ -1,28 +1,19 @@
 # -*- coding: utf-8 -*-
+from zope.deferredimport import deprecated
 from zope.interface import Attribute
 from zope.interface import Interface
 
+deprecated(
+    "Import from Products.CMFPlone instead",
+    IDefaultPage='Products.CMFPlone.interfaces.defaultpage:DefaultPage',
+)
+
 
 class INavigationRoot(Interface):
     """A marker interface for signaling the navigation root.
     """
 
 
-class IDefaultPage(Interface):
-    """Interface for a view that can determine if its context is the
-    default page or not.
-    """
-
-    def isDefaultPage(obj):
-        """Finds out if the given obj is the default page for the
-        adapted object.
-        """
-
-    def getDefaultPage():
-        """Returns the id of the default page for the adapted object.
-        """
-
-
 class INavigationQueryBuilder(Interface):
     """An object which returns a catalog query when called, used to
     construct a navigation tree.
diff --git a/setup.py b/setup.py
index 9861826..3aa8454 100644
--- a/setup.py
+++ b/setup.py
@@ -42,6 +42,7 @@
           'Products.CMFPlone >=5.0b3.dev0',
           'setuptools',
           'zope.component',
+          'zope.deferredimport',
           'zope.deprecation',
           'zope.dottedname',
           'zope.i18n',


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-07-30T10:53:19+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/8c5b47bff141113a193e429a511651e1fc939d42

Merge pull request #52 from plone/jensens-move-defaultpage-to-cmfplone

Remove DefaultPage universe from here to Products.CMFPlone and keep placeholders

Files changed:
M CHANGES.rst
M plone/app/layout/navigation/configure.zcml
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cf0f346..32efbd0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,11 +4,17 @@ Changelog
 2.5.10 (unreleased)
 -------------------
 
+- Move getDefaultPage, isDefaultPage, IDefaultPage and DefaultPage view to
+  Products.CMFPlone in order to avoid circular imports between both packages.
+  Moved test for it as well. Placed deferred deprecated imports for all old
+  names here.
+  [jensens]
+
 - Remove deprecated ``context`` parameter from ``DefaultPage`` methods.
   [jensens]
 
 - minor cleanup in getDefaultPage function
-  [jensens[]
+  [jensens]
 
 - Added a test for the complex getDefaultPage function
   [jensens]
diff --git a/plone/app/layout/navigation/configure.zcml b/plone/app/layout/navigation/configure.zcml
index 898d003..3dad49e 100644
--- a/plone/app/layout/navigation/configure.zcml
+++ b/plone/app/layout/navigation/configure.zcml
@@ -6,12 +6,4 @@
         <allow interface=".interfaces.INavtreeStrategy" />
     </class>
 
-    <browser:page
-      for="*"
-      name="default_page"
-      class=".defaultpage.DefaultPage"
-      permission="zope.Public"
-      allowed_interface=".interfaces.IDefaultPage"
-      />
-
 </configure>
diff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py
index c09099a..96ef302 100644
--- a/plone/app/layout/navigation/defaultpage.py
+++ b/plone/app/layout/navigation/defaultpage.py
@@ -1,118 +1,9 @@
 # -*- coding: utf-8 -*-
-from Acquisition import aq_inner, aq_base
-from plone.app.layout.navigation.interfaces import IDefaultPage
-from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault
-from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
-from Products.Five.browser import BrowserView
-from zope.component import queryAdapter
-from zope.component import queryUtility
-from zope.interface import implementer
-
-
-@implementer(IDefaultPage)
-class DefaultPage(BrowserView):
-
-    def isDefaultPage(self, obj):
-        return isDefaultPage(aq_inner(self.context), obj)
-
-    def getDefaultPage(self):
-        return getDefaultPage(aq_inner(self.context))
-
-
-def isDefaultPage(container, obj):
-    """Finds out if the given obj is the default page in its parent folder.
-
-    Only considers explicitly contained objects, either set as index_html,
-    with the default_page property, or using IBrowserDefault.
-    """
-    parentDefaultPage = getDefaultPage(container)
-    precondition = (
-        parentDefaultPage is not None
-        and '/' not in parentDefaultPage
-        and hasattr(obj, 'getId')
-    )
-    return precondition and (parentDefaultPage == obj.getId())
-
-
-def getDefaultPage(context):
-    """Given a folderish item, find out if it has a default-page using
-    the following lookup rules:
-
-        1. A content object called 'index_html' wins
-        2. Else check for IBrowserDefault, either if the container implements
-           it or if an adapter exists. In both cases fetch its FTI and either
-           take it if it implements IDynamicViewTypeInformation or adapt it to
-           IDynamicViewTypeInformation. call getDefaultPage on the implementer
-           and take value if given.
-        3. Else, look up the attribute default_page on the object, without
-           acquisition in place
-        3.1 look for a content in the container with the id, no acquisition!
-        3.2 look for a content at portal, with acquisition
-        4. Else, look up the property default_page in site_properties for
-           magic ids and test these
-
-    The id of the first matching item is then used to lookup a translation
-    and if found, its id is returned. If no default page is set, None is
-    returned. If a non-folderish item is passed in, return None always.
-    """
-    # The ids where we look for default - must support __contains__
-    ids = set()
-
-    # For BTreeFolders we just use the __contains__ otherwise build a set
-    if isinstance(aq_base(context), BTreeFolder2Base):
-        ids = context
-    elif hasattr(aq_base(context), 'objectIds'):
-        ids = set(context.objectIds())
-
-    # 1. test for contentish index_html
-    if 'index_html' in ids:
-        return 'index_html'
-
-    # 2. Test for IBrowserDefault
-    if IBrowserDefault.providedBy(context):
-        browserDefault = context
-    else:
-        browserDefault = queryAdapter(context, IBrowserDefault)
-
-    if browserDefault is not None:
-        fti = context.getTypeInfo()
-        if fti is not None:
-            if IDynamicViewTypeInformation.providedBy(fti):
-                dynamicFTI = fti
-            else:
-                dynamicFTI = queryAdapter(fti, IDynamicViewTypeInformation)
-            if dynamicFTI is not None:
-                page = dynamicFTI.getDefaultPage(context, check_exists=True)
-                if page is not None:
-                    return page
-
-    # 3.1 Test for default_page attribute in folder, no acquisition
-    pages = getattr(aq_base(context), 'default_page', [])
-    if isinstance(pages, basestring):
-        pages = [pages]
-    for page in pages:
-        if page and page in ids:
-            return page
-
-    portal = queryUtility(ISiteRoot)
-    # Might happen during portal creation
-    if portal is None:
-        return
-
-    # 3.2 Test for default page in portal, acquire
-    for page in pages:
-        if portal.unrestrictedTraverse(page, None):
-            return page
-
-    # 4. Test for default sitewide default_page setting
-    pp = getattr(portal, 'portal_properties', None)
-    if pp is not None:
-        site_properties = getattr(pp, 'site_properties', None)
-        if site_properties is not None:
-            for page in site_properties.getProperty('default_page', []):
-                if page in ids:
-                    return page
-
-    return
+from zope.deferredimport import deprecated
+
+deprecated(
+    "Import from Products.CMFPlone instead",
+    DefaultPage='Products.CMFPlone.browser.defaultpage:DefaultPage',
+    isDefaultPage='Products.CMFPlone.defaultpage:is_default_page',
+    getDefaultPage='Products.CMFPlone.defaultpage:get_default_page',
+)
diff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py
index 33067d6..a94728d 100644
--- a/plone/app/layout/navigation/interfaces.py
+++ b/plone/app/layout/navigation/interfaces.py
@@ -1,28 +1,19 @@
 # -*- coding: utf-8 -*-
+from zope.deferredimport import deprecated
 from zope.interface import Attribute
 from zope.interface import Interface
 
+deprecated(
+    "Import from Products.CMFPlone instead",
+    IDefaultPage='Products.CMFPlone.interfaces.defaultpage:DefaultPage',
+)
+
 
 class INavigationRoot(Interface):
     """A marker interface for signaling the navigation root.
     """
 
 
-class IDefaultPage(Interface):
-    """Interface for a view that can determine if its context is the
-    default page or not.
-    """
-
-    def isDefaultPage(obj):
-        """Finds out if the given obj is the default page for the
-        adapted object.
-        """
-
-    def getDefaultPage():
-        """Returns the id of the default page for the adapted object.
-        """
-
-
 class INavigationQueryBuilder(Interface):
     """An object which returns a catalog query when called, used to
     construct a navigation tree.
diff --git a/setup.py b/setup.py
index 9861826..3aa8454 100644
--- a/setup.py
+++ b/setup.py
@@ -42,6 +42,7 @@
           'Products.CMFPlone >=5.0b3.dev0',
           'setuptools',
           'zope.component',
+          'zope.deferredimport',
           'zope.deprecation',
           'zope.dottedname',
           'zope.i18n',


