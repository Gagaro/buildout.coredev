Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2015-10-01T03:04:26+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/d77f240540a01b28b77f45a0262e963459db8f81

White space only pep8 cleanup.  Not in the skins.

Fixes about 1200 out of 1600 pep8 warnings.

Files changed:
M CHANGES.txt
M Products/ATContentTypes/__init__.py
M Products/ATContentTypes/browser/calendar.py
M Products/ATContentTypes/browser/criteria.py
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/config.py
M Products/ATContentTypes/configuration/config.py
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/favorite.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/schemata.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/__init__.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/schemata.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/exportimport/atcttool.py
M Products/ATContentTypes/exportimport/factorytool.py
M Products/ATContentTypes/exportimport/tests/test_factory_tool.py
M Products/ATContentTypes/factories.py
M Products/ATContentTypes/interfaces/__init__.py
M Products/ATContentTypes/interfaces/factories.py
M Products/ATContentTypes/interfaces/folder.py
M Products/ATContentTypes/interfaces/interfaces.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/imagetransform.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/migration/v1_2/__init__.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/setuphandlers.py
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/testContentTypes.py
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atevent.py
M Products/ATContentTypes/tests/test_atfile.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_atlink.py
M Products/ATContentTypes/tests/test_atnewsitem.py
M Products/ATContentTypes/tests/test_attopic.py
M Products/ATContentTypes/tests/test_base_profile.py
M Products/ATContentTypes/tests/test_browserdefaultmixin.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/tests/test_calendar.py
M Products/ATContentTypes/tests/test_constraintypes.py
M Products/ATContentTypes/tests/test_content_profile.py
M Products/ATContentTypes/tests/test_controlpanel.py
M Products/ATContentTypes/tests/test_criteria.py
M Products/ATContentTypes/tests/test_default_mimetypes.py
M Products/ATContentTypes/tests/test_doctests.py
M Products/ATContentTypes/tests/test_installation.py
M Products/ATContentTypes/tests/test_portal_factory.py
M Products/ATContentTypes/tests/test_skinScripts.py
M Products/ATContentTypes/tests/test_tool.py
M Products/ATContentTypes/tests/test_topictool.py
M Products/ATContentTypes/thirdparty/exif.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py
M setup.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 9750eef..eb78323 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,9 @@ Changelog
 2.2.8 (unreleased)
 ------------------
 
+- White space only pep8 cleanup.  Not in the skins.
+  [maurits]
+
 - Removed use_folder_tabs from Topic.
   [maurits]
 
diff --git a/Products/ATContentTypes/__init__.py b/Products/ATContentTypes/__init__.py
index 1f07274..d7c4e65 100644
--- a/Products/ATContentTypes/__init__.py
+++ b/Products/ATContentTypes/__init__.py
@@ -20,7 +20,8 @@
 # Import "ATCTMessageFactory as _" to create messages in atcontenttypes domain
 from zope.i18nmessageid import MessageFactory
 ATCTMessageFactory = MessageFactory('atcontenttypes')
-ModuleSecurityInfo('Products.ATContentTypes').declarePublic('ATCTMessageFactory')
+ModuleSecurityInfo('Products.ATContentTypes').declarePublic(
+    'ATCTMessageFactory')
 
 # first level imports: configuration and validation
 import Products.ATContentTypes.configuration
@@ -74,4 +75,4 @@ def initialize(context):
             content_types=(atype,),
             permission=permissions[atype.portal_type],
             extra_constructors=(constructor,),
-            ).initialize(context)
+        ).initialize(context)
diff --git a/Products/ATContentTypes/browser/calendar.py b/Products/ATContentTypes/browser/calendar.py
index 6f56d3e..4da44ac 100644
--- a/Products/ATContentTypes/browser/calendar.py
+++ b/Products/ATContentTypes/browser/calendar.py
@@ -13,6 +13,7 @@ def cachekey(fun, self):
           * fingerprint of the brains found in the query
         the returned key is suitable for usage with `memoize.ram.cache` """
     context = self.context
+
     def add(brain):
         path = brain.getPath().decode('ascii', 'replace').encode('utf-8')
         return '%s\n%s\n\n' % (path, brain.modified)
@@ -38,7 +39,8 @@ def render(self):
         request = self.request
         name = '%s.ics' % context.getId()
         request.RESPONSE.setHeader('Content-Type', 'text/calendar')
-        request.RESPONSE.setHeader('Content-Disposition', 'attachment; filename="%s"' % name)
+        request.RESPONSE.setHeader(
+            'Content-Disposition', 'attachment; filename="%s"' % name)
         request.RESPONSE.write(self.feeddata())
 
     @ram.cache(cachekey)
diff --git a/Products/ATContentTypes/browser/criteria.py b/Products/ATContentTypes/browser/criteria.py
index 4347771..f6b892e 100644
--- a/Products/ATContentTypes/browser/criteria.py
+++ b/Products/ATContentTypes/browser/criteria.py
@@ -8,13 +8,14 @@ class JSONCriteriaForField(BrowserView):
 
     def __call__(self):
         vocab = self.context.allowedCriteriaForField(self.request['field'],
-            display_list=True)
+                                                     display_list=True)
 
         self.request.response.setHeader(
             'Content-Type', 'application/json; charset=utf-8')
         return json.dumps([
             dict(
                 value=item,
-                label=translate(vocab.getValue(item), domain="plone", context=self.request)
+                label=translate(vocab.getValue(item),
+                                domain="plone", context=self.request)
             ) for item in vocab
         ])
diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index 66ea985..634cf29 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -74,7 +74,7 @@ def itemRelatives(self, oid):
         nextPrevious = {
             'next': next,
             'previous': previous,
-            }
+        }
 
         return nextPrevious
 
diff --git a/Products/ATContentTypes/config.py b/Products/ATContentTypes/config.py
index 6f8e1ee..9f1e479 100644
--- a/Products/ATContentTypes/config.py
+++ b/Products/ATContentTypes/config.py
@@ -10,13 +10,13 @@
 import os
 from Products.ATContentTypes.configuration import zconf
 
-## options for mx tidy
-## read http://www.egenix.com/files/python/mxTidy.html for more informations
+# options for mx tidy
+# read http://www.egenix.com/files/python/mxTidy.html for more informations
 MX_TIDY_ENABLED = zconf.mxtidy.enable
 MX_TIDY_OPTIONS = zconf.mxtidy.options
 
 ###############################################################################
-## private options
+# private options
 
 PROJECTNAME = "ATContentTypes"
 TOOLNAME = "portal_atct"
@@ -27,10 +27,10 @@
 
 GLOBALS = globals()
 
-## swallow PIL exceptions when resizing the image?
+# swallow PIL exceptions when resizing the image?
 SWALLOW_IMAGE_RESIZE_EXCEPTIONS = zconf.swallowImageResizeExceptions.enable
 
-## mxTidy available?
+# mxTidy available?
 try:
     # I am not sure, which pkg should contain mx.Tidy
     from mx import Tidy
@@ -43,12 +43,12 @@
     except AttributeError:
         pass
 
-## tidy only these document types
+# tidy only these document types
 MX_TIDY_MIMETYPES = (
     'text/html',
-     )
+)
 
-## ExternalStorage available?
+# ExternalStorage available?
 try:
     pkg_resources.get_distribution('Products.ExternalStorage')
 except pkg_resources.DistributionNotFound:
@@ -56,7 +56,7 @@
 else:
     HAS_EXT_STORAGE = True
 
-## LinguaPlone addon?
+# LinguaPlone addon?
 try:
     pkg_resources.get_distribution('Products.LinguaPlone')
 except pkg_resources.DistributionNotFound:
@@ -73,13 +73,13 @@
     HAS_PIL = True
 
 
-## workflow mapping for the installer
+# workflow mapping for the installer
 WORKFLOW_DEFAULT = '(Default)'
 WORKFLOW_FOLDER = 'folder_workflow'
 WORKFLOW_TOPIC = 'folder_workflow'
 WORKFLOW_CRITERIA = ''
 
-## icon map used for overwriting ATFile icons
+# icon map used for overwriting ATFile icons
 ICONMAP = {'application/pdf': 'pdf_icon.png',
            'image': 'image_icon.png'}
 
@@ -92,4 +92,4 @@
     'structured-text': 'text/structured',
     'restructuredtext': 'text/x-rst',
     'text/restructured': 'text/x-rst',
-    }
+}
diff --git a/Products/ATContentTypes/configuration/config.py b/Products/ATContentTypes/configuration/config.py
index 13e5eb0..7aa89a7 100644
--- a/Products/ATContentTypes/configuration/config.py
+++ b/Products/ATContentTypes/configuration/config.py
@@ -23,7 +23,7 @@
     ATCT_CONFIG = None
 if not os.path.isfile(ATCT_CONFIG_IN):
     raise RuntimeError("Unable to find configuration file at %s" %
-                        ATCT_CONFIG_IN)
+                       ATCT_CONFIG_IN)
 FILES = (INSTANCE_CONFIG, ATCT_CONFIG, ATCT_CONFIG_IN,)
 
 # config
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index c1eacf8..0d16452 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -40,7 +40,7 @@ def permission_handler(value):
         permission = _getValueFromDottedName(value)
     if not isinstance(permission, basestring):
         raise ValueError, 'Permission %s is not a string: %s' % (permission,
-            type(permission))
+                                                                 type(permission))
     return permission
 
 
@@ -113,7 +113,7 @@ def __init__(self, section):
         self._names = {}
         self._parse()
 
-    #def __call__(self):
+    # def __call__(self):
     #    if not self._parsed:
     #        self._parse()
     #    return self
@@ -137,8 +137,8 @@ def _parse(self):
         self.set('enable', sec.enable)
         cfg = {}
         for id in ('char_encoding', 'drop_empty_paras', 'drop_font_tags',
-          'indent_spaces', 'input_xml', 'output_xhtml', 'quiet', 'show_warnings',
-          'tab_size', 'word_2000', 'wrap'):
+                   'indent_spaces', 'input_xml', 'output_xhtml', 'quiet', 'show_warnings',
+                   'tab_size', 'word_2000', 'wrap'):
             cfg[id] = getattr(sec, id)
         self.set('options', cfg)
 
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index b608b64..d679c35 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -80,6 +80,7 @@ def translateMimetypeAlias(alias):
 
 class ReplaceableWrapper:
     """A wrapper around an object to make it replaceable."""
+
     def __init__(self, ob):
         self.__ob = ob
 
@@ -110,6 +111,7 @@ class ATCTMixin(BrowserDefaultMixin):
 
     security.declareProtected(ModifyPortalContent,
                               'initializeArchetype')
+
     def initializeArchetype(self, **kwargs):
         """called by the generated add* factory in types tool
 
@@ -135,6 +137,7 @@ def initializeArchetype(self, **kwargs):
                 raise
 
     security.declarePrivate('copyLayoutFromParent')
+
     def copyLayoutFromParent(self):
         """Copies the layout from the parent object if it's of the same type."""
         parent = aq_parent(aq_inner(self))
@@ -150,6 +153,7 @@ def copyLayoutFromParent(self):
                     self.setLayout(parent_layout)
 
     security.declareProtected(ModifyPortalContent, 'edit')
+
     def edit(self, *args, **kwargs):
         """Reimplementing edit() to have a compatibility method for the old
         cmf edit() method
@@ -174,6 +178,7 @@ def edit(self, *args, **kwargs):
         return self.update(**kwargs)
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(self, *args, **kwargs):
         """Overwrite this method to make AT compatible with the crappy
         CMF edit()
@@ -190,6 +195,7 @@ def exclude_from_nav(self):
             return False
 
     security.declareProtected(View, 'get_size')
+
     def get_size(self):
         """ZMI / Plone get size method
         """
@@ -207,6 +213,7 @@ class ATCTContent(ATCTMixin, BaseContent):
     security = ClassSecurityInfo()
 
     security.declarePrivate('manage_afterPUT')
+
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
@@ -243,6 +250,7 @@ class ATCTFileContent(ATCTContent):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'download')
+
     def download(self, REQUEST=None, RESPONSE=None):
         """Download the file (use default index_html)
         """
@@ -254,6 +262,7 @@ def download(self, REQUEST=None, RESPONSE=None):
         return field.download(self, REQUEST, RESPONSE)
 
     security.declareProtected(View, 'index_html')
+
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Make it directly viewable when entering the objects URL
         """
@@ -268,6 +277,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
         # XXX what should be returned if no data is present?
 
     security.declareProtected(View, 'get_data')
+
     def get_data(self):
         """CMF compatibility method
         """
@@ -277,12 +287,14 @@ def get_data(self):
     data = ComputedAttribute(get_data, 1)
 
     security.declareProtected(View, 'size')
+
     def size(self):
         """Get size (image_view.pt)
         """
         return self.get_size()
 
     security.declareProtected(View, 'get_content_type')
+
     def get_content_type(self):
         """CMF compatibility method
         """
@@ -292,6 +304,7 @@ def get_content_type(self):
     content_type = ComputedAttribute(get_content_type, 1)
 
     security.declarePrivate('update_data')
+
     def update_data(self, data, content_type=None, size='ignored'):
         kwargs = {}
         if content_type is not None:
@@ -300,6 +313,7 @@ def update_data(self, data, content_type=None, size='ignored'):
         mutator(data, **kwargs)
 
     security.declareProtected(ModifyPortalContent, 'manage_edit')
+
     def manage_edit(self, title, content_type, precondition='',
                     filedata=None, REQUEST=None):
         """
@@ -343,7 +357,7 @@ def _setATCTFileContent(self, value, **kwargs):
                 # the user has disabled "short name editing".
                 pass
             elif clean_filename and \
-                 self._should_set_id_to_filename(filename, self.Title()):
+                    self._should_set_id_to_filename(filename, self.Title()):
                 # If the user doesn't fill the Title field, Title() returns the
                 # uploaded file's name.
 
@@ -357,6 +371,7 @@ def _setATCTFileContent(self, value, **kwargs):
             # it does if we don't setId() here).
 
     security.declarePrivate('_should_set_id_to_filename')
+
     def _should_set_id_to_filename(self, filename, title):
         """Given the name of the uploaded file and my title, return whether the filename should be used as my ID.
 
@@ -366,6 +381,7 @@ def _should_set_id_to_filename(self, filename, title):
         return filename != self.getId()
 
     security.declareProtected(View, 'post_validate')
+
     def post_validate(self, REQUEST=None, errors=None):
         """Validates upload file and id
         """
@@ -397,7 +413,7 @@ def post_validate(self, REQUEST=None, errors=None):
             # If check_id is not available just look for conflicting ids
             parent = aq_parent(aq_inner(self))
             check_id = used_id in parent and \
-                       'Id %s conflicts with an existing item' % used_id or False
+                'Id %s conflicts with an existing item' % used_id or False
         if check_id and used_id == id:
             errors['id'] = check_id
             REQUEST.form['id'] = used_id
@@ -405,6 +421,7 @@ def post_validate(self, REQUEST=None, errors=None):
             errors[f_name] = check_id
 
     security.declarePrivate('manage_afterPUT')
+
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
@@ -441,6 +458,7 @@ class ATCTFolder(ATCTMixin, BaseFolder):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'get_size')
+
     def get_size(self):
         """Returns 1 as folders have no size."""
         return 1
@@ -461,11 +479,13 @@ def __browser_default__(self, request):
         return getToolByName(self, 'plone_utils').browserDefault(self)
 
     security.declareProtected(View, 'get_size')
+
     def get_size(self):
         """Returns 1 as folders have no size."""
         return 1
 
     security.declarePrivate('manage_afterMKCOL')
+
     def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
         """After MKCOL handler
 
@@ -487,6 +507,7 @@ def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
             new.update(title=id)
 
     security.declareProtected(View, 'HEAD')
+
     def HEAD(self, REQUEST, RESPONSE):
         """HTTP HEAD handler"""
         return WebdavResoure.HEAD(self, REQUEST, RESPONSE)
@@ -500,6 +521,7 @@ class ATCTOrderedFolder(ATCTFolderMixin, OrderedBaseFolder):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'index_html')
+
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Special case index_html"""
         request = REQUEST
@@ -526,7 +548,8 @@ def manage_renameObject(self, id, new_id, REQUEST=None):
         """Rename a particular sub-object without changing its position.
         """
         old_position = self.getObjectPosition(id)
-        result = OrderedBaseFolder.manage_renameObject(self, id, new_id, REQUEST)
+        result = OrderedBaseFolder.manage_renameObject(
+            self, id, new_id, REQUEST)
         self.moveObjectToPosition(new_id, old_position)
         putils = getToolByName(self, 'plone_utils')
         putils.reindexOnReorder(self)
@@ -541,6 +564,7 @@ class ATCTBTreeFolder(ATCTFolderMixin, BaseBTreeFolder):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'index_html')
+
     def index_html(self, REQUEST=None, RESPONSE=None):
         """
         BTree folders don't store objects as attributes, the
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 059d497..69f0a59 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -39,29 +39,29 @@
               primary=True,
               storage=AnnotationStorage(migrate=True),
               validators=('isTidyHtmlWithCleanup',),
-              #validators=('isTidyHtml',),
+              # validators=('isTidyHtml',),
               default_output_type='text/x-html-safe',
               widget=TinyMCEWidget(
-                        description='',
-                        label=_(u'label_body_text', default=u'Body Text'),
-                        rows=25,
-                        allow_file_upload=zconf.ATDocument.allow_document_upload),
-    ),
+                  description='',
+                  label=_(u'label_body_text', default=u'Body Text'),
+                  rows=25,
+                  allow_file_upload=zconf.ATDocument.allow_document_upload),
+              ),
 
     BooleanField('tableContents',
-        required=False,
-        languageIndependent=True,
-        widget=BooleanWidget(
-            label=_(
-                u'help_enable_table_of_contents',
-                default=u'Table of contents'),
-            description=_(
-                u'help_enable_table_of_contents_description',
-                default=u'If selected, this will show a table of contents at the top of the page.')
-            ),
-    )),
+                 required=False,
+                 languageIndependent=True,
+                 widget=BooleanWidget(
+                     label=_(
+                         u'help_enable_table_of_contents',
+                         default=u'Table of contents'),
+                     description=_(
+                         u'help_enable_table_of_contents_description',
+                         default=u'If selected, this will show a table of contents at the top of the page.')
+                 ),
+                 )),
     marshall=RFC822Marshaller()
-    )
+)
 
 ATDocumentSchema['description'].widget.label = \
     _(u'label_summary', default=u'Summary')
@@ -79,18 +79,21 @@ class ATDocumentBase(ATCTContent, HistoryAwareMixin):
     cmf_edit_kws = ('text_format',)
 
     security.declareProtected(View, 'CookedBody')
+
     def CookedBody(self, stx_level='ignored'):
         """CMF compatibility method
         """
         return self.getText()
 
     security.declareProtected(ModifyPortalContent, 'EditableBody')
+
     def EditableBody(self):
         """CMF compatibility method
         """
         return self.getRawText()
 
     security.declareProtected(ModifyPortalContent, 'setFormat')
+
     def setFormat(self, value):
         """CMF compatibility method
 
@@ -109,6 +112,7 @@ def setFormat(self, value):
         ATCTContent.setFormat(self, value)
 
     security.declareProtected(ModifyPortalContent, 'setText')
+
     def setText(self, value, **kwargs):
         """Body text mutator
 
@@ -134,6 +138,7 @@ def setText(self, value, **kwargs):
     text_format = ComputedAttribute(ATCTContent.getContentType, 1)
 
     security.declarePrivate('guessMimetypeOfText')
+
     def guessMimetypeOfText(self):
         """For ftp/webdav upload: get the mimetype from the id and data
         """
@@ -157,6 +162,7 @@ def guessMimetypeOfText(self):
         return mimetype.normalized()
 
     security.declarePrivate('getTidyOutput')
+
     def getTidyOutput(self, field):
         """Get the tidied output for a specific field from the request
         if available
@@ -175,6 +181,7 @@ def _notifyOfCopyTo(self, container, op=0):
         return ATCTContent._notifyOfCopyTo(self, container, op=op)
 
     security.declarePrivate('manage_afterAdd')
+
     def manage_afterAdd(self, item, container):
         """Fix text when created througt webdav
         Guess the right mimetype from the id/data
@@ -196,12 +203,14 @@ def manage_afterAdd(self, item, container):
                 field.set(self, tidyOutput)  # set is ok
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(self, text_format, text, file='', safety_belt='', **kwargs):
         assert file == '', 'file currently not supported'  # XXX
         self.setText(text, mimetype=translateMimetypeAlias(text_format))
         self.update(**kwargs)
 
     security.declarePrivate('manage_afterPUT')
+
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index 1d6dc04..0e0ee68 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -36,7 +36,7 @@
                 widget=StringWidget(
                     description='',
                     label=_(u'label_event_location', default=u'Event Location')
-                    )),
+                )),
 
     DateTimeField('startDate',
                   required=True,
@@ -46,9 +46,9 @@
                   default_method=DateTime,
                   languageIndependent=True,
                   widget=DatetimeWidget(
-                        description='',
-                        label=_(u'label_event_start', default=u'Event Starts')
-                        )),
+                      description='',
+                      label=_(u'label_event_start', default=u'Event Starts')
+                  )),
 
     DateTimeField('endDate',
                   required=True,
@@ -58,9 +58,9 @@
                   default_method=DateTime,
                   languageIndependent=True,
                   widget=DatetimeWidget(
-                        description='',
-                        label=_(u'label_event_end', default=u'Event Ends')
-                        )),
+                      description='',
+                      label=_(u'label_event_end', default=u'Event Ends')
+                  )),
 
     TextField('text',
               required=False,
@@ -70,19 +70,20 @@
               validators=('isTidyHtmlWithCleanup',),
               default_output_type='text/x-html-safe',
               widget=TinyMCEWidget(
-                        description='',
-                        label=_(u'label_event_announcement', default=u'Event body text'),
-                        rows=25,
-                        allow_file_upload=zconf.ATDocument.allow_document_upload)),
+                  description='',
+                  label=_(u'label_event_announcement',
+                          default=u'Event body text'),
+                  rows=25,
+                  allow_file_upload=zconf.ATDocument.allow_document_upload)),
 
     LinesField('attendees',
                languageIndependent=True,
                searchable=True,
                write_permission=ModifyPortalContent,
                widget=LinesWidget(
-                      description='',
-                      label=_(u'label_event_attendees', default=u'Attendees')
-                      )),
+                   description='',
+                   label=_(u'label_event_attendees', default=u'Attendees')
+               )),
 
     StringField('eventUrl',
                 required=False,
@@ -91,11 +92,11 @@
                 write_permission=ModifyPortalContent,
                 validators=('isURL',),
                 widget=StringWidget(
-                        description=_(u'help_event_url',
-                                      default=u"Web address with more info about the event. "
-                                               "Add http:// for external links."),
-                        label=_(u'label_event_url', default=u'Event URL')
-                        )),
+                    description=_(u'help_event_url',
+                                  default=u"Web address with more info about the event. "
+                                  "Add http:// for external links."),
+                    label=_(u'label_event_url', default=u'Event URL')
+                )),
 
     StringField('contactName',
                 required=False,
@@ -103,9 +104,9 @@
                 accessor='contact_name',
                 write_permission=ModifyPortalContent,
                 widget=StringWidget(
-                        description='',
-                        label=_(u'label_contact_name', default=u'Contact Name')
-                        )),
+                    description='',
+                    label=_(u'label_contact_name', default=u'Contact Name')
+                )),
 
     StringField('contactEmail',
                 required=False,
@@ -114,9 +115,9 @@
                 write_permission=ModifyPortalContent,
                 validators=('isEmail',),
                 widget=StringWidget(
-                        description='',
-                        label=_(u'label_contact_email', default=u'Contact E-mail')
-                        )),
+                    description='',
+                    label=_(u'label_contact_email', default=u'Contact E-mail')
+                )),
 
     StringField('contactPhone',
                 required=False,
@@ -125,11 +126,11 @@
                 write_permission=ModifyPortalContent,
                 validators=(),
                 widget=StringWidget(
-                        description='',
-                        label=_(u'label_contact_phone', default=u'Contact Phone')
-                        )),
-    ), marshall=RFC822Marshaller()
-    )
+                    description='',
+                    label=_(u'label_contact_phone', default=u'Contact Phone')
+                )),
+), marshall=RFC822Marshaller()
+)
 
 # Repurpose the subject field for the event type
 ATEventSchema.moveField('subject', before='eventUrl')
@@ -156,28 +157,29 @@ class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
     assocMimetypes = ()
     assocFileExt = ('event', )
     cmf_edit_kws = ('effectiveDay', 'effectiveMo', 'effectiveYear',
-                      'expirationDay', 'expirationMo', 'expirationYear',
-                      'start_time', 'startAMPM', 'stop_time', 'stopAMPM',
-                      'start_date', 'end_date', 'contact_name', 'contact_email',
-                      'contact_phone', 'event_url')
+                    'expirationDay', 'expirationMo', 'expirationYear',
+                    'start_time', 'startAMPM', 'stop_time', 'stopAMPM',
+                    'start_date', 'end_date', 'contact_name', 'contact_email',
+                    'contact_phone', 'event_url')
 
     implements(IATEvent)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(
-        self, title=None, description=None, effectiveDay=None,
-        effectiveMo=None, effectiveYear=None, expirationDay=None,
-        expirationMo=None, expirationYear=None, start_date=None,
-        start_time=None, startAMPM=None, end_date=None,
-        stop_time=None, stopAMPM=None, location=None,
-        contact_name=None, contact_email=None, contact_phone=None,
-        event_url=None):
+            self, title=None, description=None, effectiveDay=None,
+            effectiveMo=None, effectiveYear=None, expirationDay=None,
+            expirationMo=None, expirationYear=None, start_date=None,
+            start_time=None, startAMPM=None, end_date=None,
+            stop_time=None, stopAMPM=None, location=None,
+            contact_name=None, contact_email=None, contact_phone=None,
+            event_url=None):
 
         if effectiveDay and effectiveMo and effectiveYear and start_time:
             sdate = '%s-%s-%s %s %s' % (effectiveDay, effectiveMo, effectiveYear,
-                                         start_time, startAMPM)
+                                        start_time, startAMPM)
         elif start_date:
             if not start_time:
                 start_time = '00:00:00'
@@ -207,6 +209,7 @@ def cmf_edit(
             contactPhone=contact_phone, eventUrl=event_url)
 
     security.declareProtected(View, 'post_validate')
+
     def post_validate(self, REQUEST=None, errors=None):
         """Validates start and end date
 
@@ -293,6 +296,7 @@ def __hash__(self):
         return hash((self.start_date, self.duration, self.title))
 
     security.declareProtected(ModifyPortalContent, 'update')
+
     def update(self, event=None, **kwargs):
         # Clashes with BaseObject.update, so
         # we handle gracefully
diff --git a/Products/ATContentTypes/content/favorite.py b/Products/ATContentTypes/content/favorite.py
index 20bae52..9351266 100644
--- a/Products/ATContentTypes/content/favorite.py
+++ b/Products/ATContentTypes/content/favorite.py
@@ -4,8 +4,8 @@
 
 logger = logging.getLogger('ATContentTypes')
 logger.log(logging.INFO, 'Warning: You have content instances of the '
-    'ATFavorite type in your site. This type is no longer available. Please '
-    'remove all remaining instances of this type or migrate them to links.')
+           'ATFavorite type in your site. This type is no longer available. Please '
+           'remove all remaining instances of this type or migrate them to links.')
 
 
 class ATFavorite(link.ATLink):
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index 403784d..33aac19 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -46,11 +46,11 @@
               validators=(('isNonEmptyFile', V_REQUIRED),
                           ('checkFileMaxSize', V_REQUIRED)),
               widget=FileWidget(
-                        description='',
-                        label=_(u'label_file', default=u'File'),
-                        show_content_type=False,)),
-    ), marshall=PrimaryFieldMarshaller()
-    )
+                  description='',
+                  label=_(u'label_file', default=u'File'),
+                  show_content_type=False,)),
+), marshall=PrimaryFieldMarshaller()
+)
 
 # Title is pulled from the file name if we don't specify anything,
 # so it's not strictly required, unlike in the rest of ATCT.
@@ -82,6 +82,7 @@ class ATFile(ATCTFileContent):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'index_html')
+
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Download the file
         """
@@ -96,6 +97,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
         return field.download(self)
 
     security.declareProtected(ModifyPortalContent, 'setFile')
+
     def setFile(self, value, **kwargs):
         """Set id to uploaded id
         """
@@ -107,6 +109,7 @@ def __str__(self):
         return self.get_data()
 
     security.declarePublic('getIcon')
+
     def getIcon(self, relative_to_portal=0):
         """Calculate the icon using the mime type of the file
         """
@@ -130,7 +133,8 @@ def getIcon(self, relative_to_portal=0):
             try:
                 mimetypeitem = mtr.lookup(contenttype)
             except MimeTypeException, msg:
-                LOG.error('MimeTypeException for %s. Error is: %s' % (self.absolute_url(), str(msg)))
+                LOG.error('MimeTypeException for %s. Error is: %s' %
+                          (self.absolute_url(), str(msg)))
             if not mimetypeitem:
                 return BaseContent.getIcon(self, relative_to_portal)
             icon = mimetypeitem[0].icon_path
@@ -145,12 +149,14 @@ def getIcon(self, relative_to_portal=0):
             return res
 
     security.declareProtected(View, 'icon')
+
     def icon(self):
         """for ZMI
         """
         return self.getIcon()
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(self, precondition='', file=None):
         if file is not None:
             self.setFile(file)
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index e547132..7284839 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -19,7 +19,8 @@
 from plone.app.folder import folder
 
 ATFolderSchema = folder.ATFolderSchema
-ObsoleteATFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema + NextPreviousAwareSchema
+ObsoleteATFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema + \
+    NextPreviousAwareSchema
 ATBTreeFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema
 
 finalizeATCTSchema(folder.ATFolderSchema, folderish=True, moveDiscussion=False)
@@ -39,7 +40,8 @@ class ObsoleteATFolder(ATCTOrderedFolder):
 
     portal_type = 'Folder'
     archetype_name = 'Folder'
-    _atct_newTypeFor = {'portal_type': 'CMF Folder', 'meta_type': 'Plone Folder'}
+    _atct_newTypeFor = {'portal_type': 'CMF Folder',
+                        'meta_type': 'Plone Folder'}
     assocMimetypes = ()
     assocFileExt = ()
     cmf_edit_kws = ()
@@ -52,6 +54,7 @@ class ObsoleteATFolder(ATCTOrderedFolder):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'getNextPreviousParentValue')
+
     def getNextPreviousParentValue(self):
         """If the parent node is also an IATFolder and has next/previous
         navigation enabled, then let this folder have it enabled by
@@ -68,9 +71,9 @@ def getNextPreviousParentValue(self):
 
 
 FOLDER_MANAGE_OPTIONS = (
- {'action': 'manage_main', 'label': 'Contents'},
- {'action': '', 'label': 'View'},
- {'action': 'manage_interfaces', 'label': 'Interfaces'},
+    {'action': 'manage_main', 'label': 'Contents'},
+    {'action': '', 'label': 'View'},
+    {'action': 'manage_interfaces', 'label': 'Interfaces'},
 )
 
 
@@ -82,6 +85,7 @@ class ATFolder(I18NOnlyBaseBTreeFolder, folder.ATFolder):
         security = ClassSecurityInfo()
 
         security.declarePrivate('manage_beforeDelete')
+
         def manage_beforeDelete(self, item, container):
             I18NOnlyBaseBTreeFolder.manage_beforeDelete(self, item, container)
             folder.ATFolder.manage_beforeDelete(self, item, container)
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index e23bd96..bd05acf 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -49,16 +49,16 @@
                       'tile': (64, 64),
                       'icon': (32, 32),
                       'listing': (16, 16),
-                     },
+                      },
                validators=(('isNonEmptyFile', V_REQUIRED),
                            ('checkImageMaxSize', V_REQUIRED)),
                widget=ImageWidget(
-                        description='',
-                        label=_(u'label_image', default=u'Image'),
-                        show_content_type=False,)),
+                   description='',
+                   label=_(u'label_image', default=u'Image'),
+                   show_content_type=False,)),
 
-    ), marshall=PrimaryFieldMarshaller()
-    )
+), marshall=PrimaryFieldMarshaller()
+)
 
 # Title is pulled from the file name if we don't specify anything,
 # so it's not strictly required, unlike in the rest of ATCT.
@@ -74,7 +74,8 @@ class ATImage(ATCTFileContent, ATCTImageTransform):
 
     portal_type = 'Image'
     archetype_name = 'Image'
-    _atct_newTypeFor = {'portal_type': 'CMF Image', 'meta_type': 'Portal Image'}
+    _atct_newTypeFor = {'portal_type': 'CMF Image',
+                        'meta_type': 'Portal Image'}
     assocMimetypes = ('image/*', )
     assocFileExt = ('jpg', 'jpeg', 'png', 'gif', )
     cmf_edit_kws = ('file', )
@@ -87,6 +88,7 @@ def exportImage(self, format, width, height):
         return '', ''
 
     security.declareProtected(ModifyPortalContent, 'setImage')
+
     def setImage(self, value, refresh_exif=True, **kwargs):
         """Set ID to uploaded file name if Title is empty."""
         # set exif first because rotation might screw up the exif data
@@ -97,10 +99,12 @@ def setImage(self, value, refresh_exif=True, **kwargs):
 
     def _should_set_id_to_filename(self, filename, title):
         """If title is blank, have the caller set my ID to the uploaded file's name."""
-        # When the title is blank, sometimes the filename is returned as the title.
+        # When the title is blank, sometimes the filename is returned as the
+        # title.
         return filename == title or not title
 
     security.declareProtected(View, 'tag')
+
     def tag(self, **kwargs):
         """Generate image tag using the api of the ImageField
         """
@@ -112,6 +116,7 @@ def __str__(self):
         return self.tag()
 
     security.declareProtected(View, 'get_size')
+
     def get_size(self):
         """ZMI / Plone get size method
 
@@ -124,15 +129,18 @@ def get_size(self):
         return img.get_size()
 
     security.declareProtected(View, 'getSize')
+
     def getSize(self, scale=None):
         field = self.getField('image')
         return field.getSize(self, scale=scale)
 
     security.declareProtected(View, 'getWidth')
+
     def getWidth(self, scale=None):
         return self.getSize(scale)[0]
 
     security.declareProtected(View, 'getHeight')
+
     def getHeight(self, scale=None):
         return self.getSize(scale)[1]
 
@@ -140,6 +148,7 @@ def getHeight(self, scale=None):
     height = ComputedAttribute(getHeight, 1)
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(self, precondition='', file=None, title=None):
         if file is not None:
             self.setImage(file)
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index fb7ed41..87f32b4 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -22,18 +22,18 @@
 
 ATLinkSchema = ATContentTypeSchema.copy() + Schema((
     StringField('remoteUrl',
-        required=True,
-        searchable=True,
-        primary=True,
-        default="http://",
-        # either mailto, absolute url or relative url
-        validators=(),
-        widget=StringWidget(
-            description='',
-            label=_(u'label_url', default=u'URL'),
-            maxlength='511',
-            )),
-    ))
+                required=True,
+                searchable=True,
+                primary=True,
+                default="http://",
+                # either mailto, absolute url or relative url
+                validators=(),
+                widget=StringWidget(
+                    description='',
+                    label=_(u'label_url', default=u'URL'),
+                    maxlength='511',
+                )),
+))
 finalizeATCTSchema(ATLinkSchema)
 
 
@@ -54,6 +54,7 @@ class ATLink(ATCTContent):
     security = ClassSecurityInfo()
 
     security.declareProtected(ModifyPortalContent, 'setRemoteUrl')
+
     def setRemoteUrl(self, value, **kwargs):
         """remute url mutator
 
@@ -65,23 +66,27 @@ def setRemoteUrl(self, value, **kwargs):
         self.getField('remoteUrl').set(self, value, **kwargs)
 
     security.declareProtected(View, 'remote_url')
+
     def remote_url(self):
         """CMF compatibility method
         """
         return self.getRemoteUrl()
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(self, remote_url=None, **kwargs):
         if not remote_url:
             remote_url = kwargs.get('remote_url', None)
         self.update(remoteUrl=remote_url, **kwargs)
 
     security.declareProtected(View, 'getRemoteUrl')
+
     def getRemoteUrl(self):
         """Sanitize output
         """
         value = self.Schema()['remoteUrl'].get(self)
-        if not value: value = ''  # ensure we have a string
+        if not value:
+            value = ''  # ensure we have a string
         return quote(value, safe='?$#@/:=+;$,&%')
 
 registerATCT(ATLink, PROJECTNAME)
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index 3cf41b8..7fa298c 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -36,51 +36,52 @@
 
 ATNewsItemSchema = ATContentTypeSchema.copy() + Schema((
     TextField('text',
-        required=False,
-        searchable=True,
-        primary=True,
-        storage=AnnotationStorage(migrate=True),
-        validators=('isTidyHtmlWithCleanup',),
-        #validators=('isTidyHtml',),
-        default_output_type='text/x-html-safe',
-        widget=TinyMCEWidget(
-            description='',
-            label=_(u'label_body_text', u'Body Text'),
-            rows=25,
-            allow_file_upload=zconf.ATDocument.allow_document_upload)
-        ),
+              required=False,
+              searchable=True,
+              primary=True,
+              storage=AnnotationStorage(migrate=True),
+              validators=('isTidyHtmlWithCleanup',),
+              # validators=('isTidyHtml',),
+              default_output_type='text/x-html-safe',
+              widget=TinyMCEWidget(
+                  description='',
+                  label=_(u'label_body_text', u'Body Text'),
+                  rows=25,
+                  allow_file_upload=zconf.ATDocument.allow_document_upload)
+              ),
 
     ImageField('image',
-        required=False,
-        storage=AnnotationStorage(migrate=True),
-        languageIndependent=True,
-        max_size=zconf.ATNewsItem.max_image_dimension,
-        sizes={'large': (768, 768),
-               'preview': (400, 400),
-               'mini': (200, 200),
-               'thumb': (128, 128),
-               'tile': (64, 64),
-               'icon': (32, 32),
-               'listing': (16, 16),
-              },
-        validators=(('isNonEmptyFile', V_REQUIRED),
-                    ('checkNewsImageMaxSize', V_REQUIRED)),
-        widget=ImageWidget(
-            description=_(u'help_news_image', default=u'Will be shown in the news listing, and in the news item itself. Image will be scaled to a sensible size.'),
-            label=_(u'label_news_image', default=u'Image'),
-            show_content_type=False)
-        ),
+               required=False,
+               storage=AnnotationStorage(migrate=True),
+               languageIndependent=True,
+               max_size=zconf.ATNewsItem.max_image_dimension,
+               sizes={'large': (768, 768),
+                      'preview': (400, 400),
+                      'mini': (200, 200),
+                      'thumb': (128, 128),
+                      'tile': (64, 64),
+                      'icon': (32, 32),
+                      'listing': (16, 16),
+                      },
+               validators=(('isNonEmptyFile', V_REQUIRED),
+                           ('checkNewsImageMaxSize', V_REQUIRED)),
+               widget=ImageWidget(
+                   description=_(
+                       u'help_news_image', default=u'Will be shown in the news listing, and in the news item itself. Image will be scaled to a sensible size.'),
+                   label=_(u'label_news_image', default=u'Image'),
+                   show_content_type=False)
+               ),
 
     StringField('imageCaption',
-        required=False,
-        searchable=True,
-        widget=StringWidget(
-            description='',
-            label=_(u'label_image_caption', default=u'Image Caption'),
-            size=40)
-        ),
-    ), marshall=RFC822Marshaller()
-    )
+                required=False,
+                searchable=True,
+                widget=StringWidget(
+                    description='',
+                    label=_(u'label_image_caption', default=u'Image Caption'),
+                    size=40)
+                ),
+), marshall=RFC822Marshaller()
+)
 
 ATNewsItemSchema['description'].widget.label = \
     _(u'label_summary', default=u'Summary')
@@ -95,7 +96,8 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
 
     portal_type = 'News Item'
     archetype_name = 'News Item'
-    _atct_newTypeFor = {'portal_type': 'CMF News Item', 'meta_type': 'News Item'}
+    _atct_newTypeFor = {
+        'portal_type': 'CMF News Item', 'meta_type': 'News Item'}
     assocMimetypes = ()
     assocFileExt = ('news', )
     cmf_edit_kws = ATDocumentBase.cmf_edit_kws
@@ -105,6 +107,7 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'tag')
+
     def tag(self, **kwargs):
         """Generate image tag using the api of the ImageField
         """
@@ -113,6 +116,7 @@ def tag(self, **kwargs):
         return self.getField('image').tag(self, **kwargs)
 
     security.declarePrivate('cmf_edit')
+
     def cmf_edit(self, text, description=None, text_format=None, **kwargs):
         if description is not None:
             self.setDescription(description)
diff --git a/Products/ATContentTypes/content/schemata.py b/Products/ATContentTypes/content/schemata.py
index 03b9ba1..79113f4 100644
--- a/Products/ATContentTypes/content/schemata.py
+++ b/Products/ATContentTypes/content/schemata.py
@@ -12,17 +12,19 @@
 # just like CMF
 ATContentTypeSchema = BaseSchema.copy() + MetadataSchema((
     BooleanField('excludeFromNav',
-        required=False,
-        languageIndependent=True,
-        schemata='metadata',  # moved to 'default' for folders
-        widget=BooleanWidget(
-            description=_(u'help_exclude_from_nav', default=u'If selected, this item will not appear in the navigation tree'),
-            label=_(u'label_exclude_from_nav', default=u'Exclude from navigation'),
-            visible={'view': 'hidden',
-                     'edit': 'visible'},
-            ),
-        ),
-    ),)
+                 required=False,
+                 languageIndependent=True,
+                 schemata='metadata',  # moved to 'default' for folders
+                 widget=BooleanWidget(
+                     description=_(u'help_exclude_from_nav',
+                                   default=u'If selected, this item will not appear in the navigation tree'),
+                     label=_(u'label_exclude_from_nav',
+                             default=u'Exclude from navigation'),
+                     visible={'view': 'hidden',
+                              'edit': 'visible'},
+                 ),
+                 ),
+),)
 
 ATContentTypeSchema['id'].searchable = True
 ATContentTypeSchema['id'].validators = ('isValidId',)
@@ -36,38 +38,42 @@
 ATContentTypeBaseSchema = ATContentTypeSchema
 
 relatedItemsField = ReferenceField('relatedItems',
-        relationship='relatesTo',
-        multiValued=True,
-        isMetadata=True,
-        languageIndependent=False,
-        index='KeywordIndex',
-        referencesSortable=True,
-        keepReferencesOnCopy=True,
-        write_permission=ModifyPortalContent,
-        widget=RelatedItemsWidget(
-            label=_(u'label_related_items', default=u'Related Items'),
-            description='',
-            visible={'edit': 'visible', 'view': 'invisible'}
-            )
-        )
+                                   relationship='relatesTo',
+                                   multiValued=True,
+                                   isMetadata=True,
+                                   languageIndependent=False,
+                                   index='KeywordIndex',
+                                   referencesSortable=True,
+                                   keepReferencesOnCopy=True,
+                                   write_permission=ModifyPortalContent,
+                                   widget=RelatedItemsWidget(
+                                       label=_(u'label_related_items',
+                                               default=u'Related Items'),
+                                       description='',
+                                       visible={'edit': 'visible',
+                                                'view': 'invisible'}
+                                   )
+                                   )
 ATContentTypeSchema.addField(relatedItemsField.copy())
 
-#Enabling next / previous navigation
+# Enabling next / previous navigation
 
 NextPreviousAwareSchema = MetadataSchema((
     BooleanField('nextPreviousEnabled',
-        #required=False,
-        languageIndependent=True,
-        schemata='metadata',
-        widget=BooleanWidget(
-            description=_(u'help_nextprevious', default=u'This enables next/previous widget on content items contained in this folder.'),
-            label=_(u'label_nextprevious', default=u'Enable next previous navigation'),
-            visible={'view': 'hidden',
-                     'edit': 'visible'},
-            ),
-        default_method="getNextPreviousParentValue"
-        ),
-    ),)
+                 # required=False,
+                 languageIndependent=True,
+                 schemata='metadata',
+                 widget=BooleanWidget(
+                     description=_(
+                         u'help_nextprevious', default=u'This enables next/previous widget on content items contained in this folder.'),
+                     label=_(u'label_nextprevious',
+                             default=u'Enable next previous navigation'),
+                     visible={'view': 'hidden',
+                              'edit': 'visible'},
+                 ),
+                 default_method="getNextPreviousParentValue"
+                 ),
+),)
 
 
 def marshall_register(schema):
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index d98eecc..eee7ef2 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -48,9 +48,9 @@
 # A couple of fields just don't make sense to sort (for a user),
 # some are just doubles.
 IGNORED_FIELDS = ['Date', 'allowedRolesAndUsers', 'getId', 'in_reply_to',
-    'meta_type',
-    # 'portal_type' # portal type and Type might differ!
-    ]
+                  'meta_type',
+                  # 'portal_type' # portal type and Type might differ!
+                  ]
 
 ATTopicSchema = ATContentTypeSchema.copy() + Schema((
     TextField('text',
@@ -59,77 +59,81 @@
               primary=True,
               storage=AnnotationStorage(migrate=True),
               validators=('isTidyHtmlWithCleanup',),
-              #validators=('isTidyHtml',),
+              # validators=('isTidyHtml',),
               default_output_type='text/x-html-safe',
               write_permission=ChangeTopics,
               widget=TinyMCEWidget(
-                    description='',
-                    label=_(u'label_body_text', default=u'Body Text'),
-                    rows=25,
-                    allow_file_upload=zconf.ATDocument.allow_document_upload),
-    ),
+                  description='',
+                  label=_(u'label_body_text', default=u'Body Text'),
+                  rows=25,
+                  allow_file_upload=zconf.ATDocument.allow_document_upload),
+              ),
     BooleanField('acquireCriteria',
-                required=False,
-                mode="rw",
-                default=False,
-                write_permission=ChangeTopics,
-                widget=BooleanWidget(
-                        label=_(u'label_inherit_criteria', default=u'Inherit Criteria'),
-                        description=_(u'help_inherit_collection_criteria',
-                                      default=u"Narrow down the search results from the parent Collection(s) "
-                                               "by using the criteria from this Collection."),
-                        # Only show when the parent object is a Topic also,
-                        condition="python:object.aq_parent.portal_type == 'Topic'"),
-                ),
+                 required=False,
+                 mode="rw",
+                 default=False,
+                 write_permission=ChangeTopics,
+                 widget=BooleanWidget(
+                     label=_(u'label_inherit_criteria',
+                             default=u'Inherit Criteria'),
+                     description=_(u'help_inherit_collection_criteria',
+                                   default=u"Narrow down the search results from the parent Collection(s) "
+                                   "by using the criteria from this Collection."),
+                     # Only show when the parent object is a Topic also,
+                     condition="python:object.aq_parent.portal_type == 'Topic'"),
+                 ),
     BooleanField('limitNumber',
-                required=False,
-                mode="rw",
-                default=False,
-                write_permission=ChangeTopics,
-                widget=BooleanWidget(
-                        label=_(u'label_limit_number', default=u'Limit Search Results'),
-                        description=_(u'help_limit_number',
-                                      default=u"If selected, only the 'Number of Items' "
-                                               "indicated below will be displayed.")
-                        ),
-                ),
+                 required=False,
+                 mode="rw",
+                 default=False,
+                 write_permission=ChangeTopics,
+                 widget=BooleanWidget(
+                     label=_(u'label_limit_number',
+                             default=u'Limit Search Results'),
+                     description=_(u'help_limit_number',
+                                   default=u"If selected, only the 'Number of Items' "
+                                   "indicated below will be displayed.")
+                 ),
+                 ),
     IntegerField('itemCount',
-                required=False,
-                mode="rw",
-                default=0,
-                write_permission=ChangeTopics,
-                widget=IntegerWidget(
-                        label=_(u'label_item_count', default=u'Number of Items'),
-                        description=''
-                        ),
+                 required=False,
+                 mode="rw",
+                 default=0,
+                 write_permission=ChangeTopics,
+                 widget=IntegerWidget(
+                     label=_(u'label_item_count', default=u'Number of Items'),
+                     description=''
+                 ),
                  ),
     BooleanField('customView',
-                required=False,
-                mode="rw",
-                default=False,
-                write_permission=ChangeTopics,
-                widget=BooleanWidget(
-                        label=_(u'label_custom_view', default=u'Display as Table'),
-                        description=_(u'help_custom_view',
-                                      default=u"Columns in the table are controlled "
-                                               "by 'Table Columns' below.")
-                        ),
+                 required=False,
+                 mode="rw",
+                 default=False,
+                 write_permission=ChangeTopics,
+                 widget=BooleanWidget(
+                     label=_(u'label_custom_view',
+                             default=u'Display as Table'),
+                     description=_(u'help_custom_view',
+                                   default=u"Columns in the table are controlled "
+                                   "by 'Table Columns' below.")
                  ),
-    LinesField('customViewFields',
-                required=False,
-                mode="rw",
-                default=('Title',),
-                vocabulary='listMetaDataFields',
-                enforceVocabulary=True,
-                write_permission=ChangeTopics,
-                widget=InAndOutWidget(
-                        label=_(u'label_custom_view_fields', default=u'Table Columns'),
-                        description=_(u'help_custom_view_fields',
-                                      default=u"Select which fields to display when "
-                                               "'Display as Table' is checked.")
-                        ),
                  ),
-    ))
+    LinesField('customViewFields',
+               required=False,
+               mode="rw",
+               default=('Title',),
+               vocabulary='listMetaDataFields',
+               enforceVocabulary=True,
+               write_permission=ChangeTopics,
+               widget=InAndOutWidget(
+                    label=_(u'label_custom_view_fields',
+                            default=u'Table Columns'),
+                    description=_(u'help_custom_view_fields',
+                                  default=u"Select which fields to display when "
+                                  "'Display as Table' is checked.")
+               ),
+               ),
+))
 finalizeATCTSchema(ATTopicSchema, folderish=False, moveDiscussion=False)
 
 
@@ -140,7 +144,8 @@ class ATTopic(ATCTFolder):
 
     portal_type = 'Topic'
     archetype_name = 'Collection'
-    _atct_newTypeFor = {'portal_type': 'CMF Topic', 'meta_type': 'Portal Topic'}
+    _atct_newTypeFor = {'portal_type': 'CMF Topic',
+                        'meta_type': 'Portal Topic'}
     assocMimetypes = ()
     assocFileExt = ()
     cmf_edit_kws = ()
@@ -158,17 +163,19 @@ def initializeArchetype(self, **kwargs):
         syn_tool = getToolByName(self, 'portal_syndication', None)
         if syn_tool is not None:
             if (syn_tool.isSiteSyndicationAllowed() and
-                                    not syn_tool.isSyndicationAllowed(self)):
+                    not syn_tool.isSyndicationAllowed(self)):
                 syn_tool.enableSyndication(self)
         return ret_val
 
     security.declareProtected(ChangeTopics, 'validateAddCriterion')
+
     def validateAddCriterion(self, indexId, criteriaType):
         """Is criteriaType acceptable criteria for indexId
         """
         return criteriaType in self.criteriaByIndexId(indexId)
 
     security.declareProtected(ChangeTopics, 'criteriaByIndexId')
+
     def criteriaByIndexId(self, indexId):
         catalog_tool = getToolByName(self, 'portal_catalog')
         indexObj = catalog_tool.Indexes[indexId]
@@ -176,14 +183,16 @@ def criteriaByIndexId(self, indexId):
         return results
 
     security.declareProtected(ChangeTopics, 'listCriteriaTypes')
+
     def listCriteriaTypes(self):
         """List available criteria types as dict
         """
         return [{'name': ctype,
-                 'description':_criterionRegistry[ctype].shortDesc}
+                 'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listCriteriaMetaTypes()]
 
     security.declareProtected(ChangeTopics, 'listCriteriaMetaTypes')
+
     def listCriteriaMetaTypes(self):
         """List available criteria
         """
@@ -192,14 +201,16 @@ def listCriteriaMetaTypes(self):
         return val
 
     security.declareProtected(ChangeTopics, 'listSearchCriteriaTypes')
+
     def listSearchCriteriaTypes(self):
         """List available search criteria types as dict
         """
         return [{'name': ctype,
-                 'description':_criterionRegistry[ctype].shortDesc}
+                 'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSearchCriteriaMetaTypes()]
 
     security.declareProtected(ChangeTopics, 'listSearchCriteriaMetaTypes')
+
     def listSearchCriteriaMetaTypes(self):
         """List available search criteria
         """
@@ -208,14 +219,16 @@ def listSearchCriteriaMetaTypes(self):
         return val
 
     security.declareProtected(ChangeTopics, 'listSortCriteriaTypes')
+
     def listSortCriteriaTypes(self):
         """List available sort criteria types as dict
         """
         return [{'name': ctype,
-                 'description':_criterionRegistry[ctype].shortDesc}
+                 'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSortCriteriaMetaTypes()]
 
     security.declareProtected(ChangeTopics, 'listSortCriteriaMetaTypes')
+
     def listSortCriteriaMetaTypes(self):
         """List available sort criteria
         """
@@ -224,6 +237,7 @@ def listSortCriteriaMetaTypes(self):
         return val
 
     security.declareProtected(View, 'listCriteria')
+
     def listCriteria(self):
         """Return a list of our criteria objects.
         """
@@ -231,19 +245,22 @@ def listCriteria(self):
         return val
 
     security.declareProtected(View, 'listSearchCriteria')
+
     def listSearchCriteria(self):
         """Return a list of our search criteria objects.
         """
         return [val for val in self.listCriteria() if
-             IATTopicSearchCriterion.providedBy(val)]
+                IATTopicSearchCriterion.providedBy(val)]
 
     security.declareProtected(ChangeTopics, 'hasSortCriterion')
+
     def hasSortCriterion(self):
         """Tells if a sort criterai is already setup.
         """
         return not self.getSortCriterion() is None
 
     security.declareProtected(ChangeTopics, 'getSortCriterion')
+
     def getSortCriterion(self):
         """Return the Sort criterion if setup.
         """
@@ -253,6 +270,7 @@ def getSortCriterion(self):
         return None
 
     security.declareProtected(ChangeTopics, 'removeSortCriterion')
+
     def removeSortCriterion(self):
         """remove the Sort criterion.
         """
@@ -260,6 +278,7 @@ def removeSortCriterion(self):
             self.deleteCriterion(self.getSortCriterion().getId())
 
     security.declareProtected(ChangeTopics, 'setSortCriterion')
+
     def setSortCriterion(self, field, reversed):
         """Set the Sort criterion.
         """
@@ -268,12 +287,14 @@ def setSortCriterion(self, field, reversed):
         self.getSortCriterion().setReversed(reversed)
 
     security.declareProtected(ChangeTopics, 'listIndicesByCriterion')
+
     def listIndicesByCriterion(self, criterion):
         """
         """
         return _criterionRegistry.indicesByCriterion(criterion)
 
     security.declareProtected(ChangeTopics, 'listFields')
+
     def listFields(self):
         """Return a list of fields from portal_catalog.
         """
@@ -281,27 +302,30 @@ def listFields(self):
         return tool.getEnabledFields()
 
     security.declareProtected(ChangeTopics, 'listSortFields')
+
     def listSortFields(self):
         """Return a list of available fields for sorting."""
         fields = [field
-                    for field in self.listFields()
-                    if self.validateAddCriterion(field[0], 'ATSortCriterion')]
+                  for field in self.listFields()
+                  if self.validateAddCriterion(field[0], 'ATSortCriterion')]
         return fields
 
     security.declareProtected(ChangeTopics, 'listAvailableFields')
+
     def listAvailableFields(self):
         """Return a list of available fields for new criteria.
         """
         current = [crit.Field() for crit in self.listCriteria()
-                      if not IATTopicSortCriterion.providedBy(crit)]
+                   if not IATTopicSortCriterion.providedBy(crit)]
         fields = self.listFields()
         val = [field
-                 for field in fields
-                 if field[0] not in current
-              ]
+               for field in fields
+               if field[0] not in current
+               ]
         return val
 
     security.declareProtected(View, 'listSubtopics')
+
     def listSubtopics(self):
         """Return a list of our subtopics.
         """
@@ -316,6 +340,7 @@ def listSubtopics(self):
         return tops
 
     security.declareProtected(View, 'hasSubtopics')
+
     def hasSubtopics(self):
         """Returns true if subtopics have been created on this topic.
         """
@@ -323,6 +348,7 @@ def hasSubtopics(self):
         return not not val
 
     security.declareProtected(View, 'listMetaDataFields')
+
     def listMetaDataFields(self, exclude=True):
         """Return a list of metadata fields from portal_catalog.
         """
@@ -330,6 +356,7 @@ def listMetaDataFields(self, exclude=True):
         return tool.getMetadataDisplay(exclude)
 
     security.declareProtected(View, 'allowedCriteriaForField')
+
     def allowedCriteriaForField(self, field, display_list=False):
         """ Return all valid criteria for a given field.  Optionally include
             descriptions in list in format [(desc1, val1) , (desc2, val2)] for
@@ -337,7 +364,7 @@ def allowedCriteriaForField(self, field, display_list=False):
         tool = getToolByName(self, TOOLNAME)
         criteria = tool.getIndex(field).criteria
         allowed = [crit for crit in criteria
-                                if self.validateAddCriterion(field, crit)]
+                   if self.validateAddCriterion(field, crit)]
         if display_list:
             flat = []
             for a in allowed:
@@ -347,6 +374,7 @@ def allowedCriteriaForField(self, field, display_list=False):
         return allowed
 
     security.declareProtected(View, 'buildQuery')
+
     def buildQuery(self):
         """Construct a catalog query using our criterion objects.
         """
@@ -365,7 +393,8 @@ def buildQuery(self):
                 clear_start = True
                 parent = aq_parent(aq_inner(self))
                 result.update(parent.buildQuery())
-            except (AttributeError, Unauthorized):  # oh well, can't find parent, or it isn't a Topic.
+            # oh well, can't find parent, or it isn't a Topic.
+            except (AttributeError, Unauthorized):
                 pass
 
         for criterion in criteria:
@@ -380,14 +409,15 @@ def buildQuery(self):
                 # - the date criteria is set to 'now' (0)
                 # - the end key is set
                 if clear_start and criterion.meta_type in ['ATFriendlyDateCriteria'] \
-                and not criterion.value and key == 'end' and 'start' in result:
+                        and not criterion.value and key == 'end' and 'start' in result:
                     del result['start']
                 result[key] = value
         return result
 
     security.declareProtected(View, 'queryCatalog')
+
     def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
-                                                    full_objects=False, **kw):
+                     full_objects=False, **kw):
         # Invoke the catalog using our criteria to augment any passed
         # in query before calling the catalog.
         if REQUEST is None:
@@ -396,8 +426,8 @@ def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
 
         pcatalog = getToolByName(self, 'portal_catalog')
         mt = getToolByName(self, 'portal_membership')
-        related = [i for i in self.getRelatedItems() \
-                        if mt.checkPermission(View, i)]
+        related = [i for i in self.getRelatedItems()
+                   if mt.checkPermission(View, i)]
         if not full_objects:
             uids = [r.UID() for r in related]
             query = dict(UID=uids)
@@ -429,7 +459,7 @@ def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
         if limit and not batch:
             if full_objects:
                 return related[:max_items] + \
-                       [b.getObject() for b in results[:max_items - len(related)]]
+                    [b.getObject() for b in results[:max_items - len(related)]]
             return related[:max_items] + results[:max_items - len(related)]
         elif full_objects:
             results = related + LazyCat([[b.getObject() for b in results]])
@@ -441,6 +471,7 @@ def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
         return results
 
     security.declareProtected(ChangeTopics, 'addCriterion')
+
     def addCriterion(self, field, criterion_type):
         """Add a new search criterion. Return the resulting object.
         """
@@ -452,6 +483,7 @@ def addCriterion(self, field, criterion_type):
         return self._getOb(newid)
 
     security.declareProtected(ChangeTopics, 'deleteCriterion')
+
     def deleteCriterion(self, criterion_id):
         """Delete selected criterion.
         """
@@ -462,6 +494,7 @@ def deleteCriterion(self, criterion_id):
                 self._delObject(cid)
 
     security.declareProtected(View, 'getCriterion')
+
     def getCriterion(self, criterion_id):
         """Get the criterion object.
         """
@@ -471,6 +504,7 @@ def getCriterion(self, criterion_id):
             return self._getOb(criterion_id)
 
     security.declareProtected(AddPortalContent, 'addSubtopic')
+
     def addSubtopic(self, id):
         """Add a new subtopic.
         """
@@ -479,6 +513,7 @@ def addSubtopic(self, id):
         return self._getOb(id)
 
     security.declareProtected(View, 'synContentValues')
+
     def synContentValues(self):
         """Getter for syndacation support
         """
@@ -487,6 +522,7 @@ def synContentValues(self):
         return self.queryCatalog(sort_limit=limit)[:limit]
 
     security.declarePublic('canSetDefaultPage')
+
     def canSetDefaultPage(self):
         """
         Override BrowserDefaultMixin because default page stuff doesn't make
@@ -495,6 +531,7 @@ def canSetDefaultPage(self):
         return False
 
     security.declarePublic('getCriterionUniqueWidgetAttr')
+
     def getCriteriaUniqueWidgetAttr(self, attr):
         """Get a unique list values for a specific attribute for all widgets
            on all criteria"""
@@ -512,11 +549,13 @@ def getCriteriaUniqueWidgetAttr(self, attr):
         return order
 
     security.declareProtected(View, 'HEAD')
+
     def HEAD(self, REQUEST, RESPONSE):
         """HTTP HEAD handler"""
         return WebdavResoure.HEAD(self, REQUEST, RESPONSE)
 
     security.declareProtected(ChangeTopics, 'setText')
+
     def setText(self, value, **kwargs):
         """Body text mutator
 
@@ -540,6 +579,7 @@ def setText(self, value, **kwargs):
         field.set(self, value, **kwargs)  # set is ok
 
     security.declarePrivate('getTidyOutput')
+
     def getTidyOutput(self, field):
         """Get the tidied output for a specific field from the request
         if available
diff --git a/Products/ATContentTypes/criteria/__init__.py b/Products/ATContentTypes/criteria/__init__.py
index 27e31cc..00d5280 100644
--- a/Products/ATContentTypes/criteria/__init__.py
+++ b/Products/ATContentTypes/criteria/__init__.py
@@ -22,7 +22,7 @@
 
 # Indices that can take a list of values
 LIST_INDICES = ('FieldIndex', 'KeywordIndex', 'PathIndex', 'NavtreeIndexNG',
-                  'ExtendedPathIndex', 'TopicIndex')
+                'ExtendedPathIndex', 'TopicIndex')
 
 TEXT_INDICES = ('TextIndex', 'TextIndexNG2', 'TextIndexNG3', 'ZCTextIndex')
 
@@ -79,11 +79,11 @@ def listTypes(self):
 
     def listSortTypes(self):
         return [key for key in self.keys()
-                    if IATTopicSortCriterion.implementedBy(self[key])]
+                if IATTopicSortCriterion.implementedBy(self[key])]
 
     def listSearchTypes(self):
         return [key for key in self.keys()
-                    if IATTopicSearchCriterion.implementedBy(self[key])]
+                if IATTopicSearchCriterion.implementedBy(self[key])]
 
     def listCriteria(self):
         return self.values()
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index 462852f..bb475cc 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -20,20 +20,27 @@ class NonRefCatalogContent(BaseContentMixin):
 
     # reference register / unregister methods
     def _register(self, *args, **kwargs): pass
+
     def _unregister(self, *args, **kwargs): pass
+
     def _updateCatalog(self, *args, **kwargs): pass
+
     def _referenceApply(self, *args, **kwargs): pass
+
     def _uncatalogUID(self, *args, **kwargs): pass
+
     def _uncatalogRefs(self, *args, **kwargs): pass
 
     # catalog methods
     def indexObject(self, *args, **kwargs): pass
+
     def unindexObject(self, *args, **kwargs): pass
+
     def reindexObject(self, *args, **kwargs): pass
 
 classImplementsOnly(NonRefCatalogContent,
-                    *(iface for iface in implementedBy(NonRefCatalogContent)\
-                    if iface is not IReferenceable))
+                    *(iface for iface in implementedBy(NonRefCatalogContent)
+                      if iface is not IReferenceable))
 
 
 class ATBaseCriterion(NonRefCatalogContent):
@@ -58,6 +65,7 @@ def __init__(self, id=None, field=None, oid=None):
         self.getField('field').set(self, field)
 
     security.declareProtected(View, 'getId')
+
     def getId(self):
         """Get the object id"""
         return str(self.id)
@@ -68,15 +76,18 @@ def setId(self, value, *kw):
         assert value == self.getId(), 'You are not allowed to change the id'
 
     security.declareProtected(View, 'Type')
+
     def Type(self):
         return self.archetype_name
 
     security.declareProtected(View, 'Description')
+
     def Description(self):
         lines = [line.strip() for line in self.__doc__.splitlines()]
         return ' '.join([line for line in lines if line])
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         """Return a sequence of items to be used to build the catalog query.
         """
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index c67eccd..a4c7b79 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -20,17 +20,17 @@
 
 ATBooleanCriterionSchema = ATBaseCriterionSchema + Schema((
     BooleanField('bool',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default=None,
-                widget=BooleanWidget(
-                    label=_(u'label_boolean_criteria_bool', default=u'Value'),
-                    description=_(u'help_boolean_criteria_bool',
-                                  default=u'True or false')
-                    ),
-                ),
-    ))
+                 required=1,
+                 mode="rw",
+                 write_permission=ChangeTopics,
+                 default=None,
+                 widget=BooleanWidget(
+                     label=_(u'label_boolean_criteria_bool', default=u'Value'),
+                     description=_(u'help_boolean_criteria_bool',
+                                   default=u'True or false')
+                 ),
+                 ),
+))
 
 
 class ATBooleanCriterion(ATBaseCriterion):
@@ -45,6 +45,7 @@ class ATBooleanCriterion(ATBaseCriterion):
     shortDesc = 'Boolean (True/False)'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
         if self.getBool():
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 9569e63..85d549d 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -5,7 +5,7 @@
 from AccessControl import ClassSecurityInfo
 
 from Products.ATContentTypes.criteria import registerCriterion, \
-                                             LIST_INDICES
+    LIST_INDICES
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
@@ -25,10 +25,12 @@ class ATCurrentAuthorCriterion(ATBaseCriterion):
     shortDesc = 'Restrict to current user'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
 
-        user = getToolByName(self, 'portal_membership').getAuthenticatedMember().getId()
+        user = getToolByName(
+            self, 'portal_membership').getAuthenticatedMember().getId()
 
         if user is not '':
             result.append((self.Field(), user))
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index a54b2fa..47b35f8 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -32,34 +32,35 @@
     (31 * 6, _(u'6 Months')),
     (365, _(u'1 Year')),
     (365 * 2, _(u'2 Years')),
-    ))
+))
 
 CompareOperations = DisplayList((
     ('more', _(u'More than')),
     ('less', _(u'Less than')),
     ('within_day', _(u'On the day')),
-    ))
+))
 
 RangeOperations = DisplayList((
     ('-', _(u'in the past')),
     ('+', _(u'in the future')),
-    ))
+))
 
 ATDateCriteriaSchema = ATBaseCriterionSchema + Schema((
     IntegerField('value',
-                required=1,
-                mode="rw",
-                accessor="Value",
-                mutator="setValue",
-                write_permission=ChangeTopics,
-                default=None,
-                vocabulary=DateOptions,
-                widget=SelectionWidget(
-                    label=_(u'label_date_criteria_value', default=u'Which day'),
-                    description=_(u'help_date_criteria_value',
-                                  default=u'Select the date criteria value.')
-                    ),
-                ),
+                 required=1,
+                 mode="rw",
+                 accessor="Value",
+                 mutator="setValue",
+                 write_permission=ChangeTopics,
+                 default=None,
+                 vocabulary=DateOptions,
+                 widget=SelectionWidget(
+                     label=_(u'label_date_criteria_value',
+                             default=u'Which day'),
+                     description=_(u'help_date_criteria_value',
+                                   default=u'Select the date criteria value.')
+                 ),
+                 ),
     StringField('dateRange',
                 required=1,
                 mode="rw",
@@ -82,12 +83,13 @@
                 vocabulary=CompareOperations,
                 enforceVocabulary=1,
                 widget=SelectionWidget(
-                    label=_(u'label_date_criteria_operation', default=u'More or less'),
+                    label=_(u'label_date_criteria_operation',
+                            default=u'More or less'),
                     description=_(u'help_date_criteria_operation',
                                   default=u'Select the date criteria operation.'),
                     format="select"),
                 ),
-    ))
+))
 
 
 class ATDateCriteria(ATBaseCriterion):
@@ -102,6 +104,7 @@ class ATDateCriteria(ATBaseCriterion):
     shortDesc = 'Relative date'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         """Return a sequence of items to be used to build the catalog query.
         """
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index a834138..ed1e6b5 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -22,29 +22,31 @@
 
 ATDateRangeCriterionSchema = ATBaseCriterionSchema + Schema((
     DateTimeField('start',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default=None,
-                widget=CalendarWidget(
-                    label=_(u'label_date_range_criteria_start', default=u'Start Date'),
-                    description=_(u'help_date_range_criteria_start',
-                                  default=u'The beginning of the date range to search')
-                    ),
-                ),
+                  required=1,
+                  mode="rw",
+                  write_permission=ChangeTopics,
+                  default=None,
+                  widget=CalendarWidget(
+                      label=_(u'label_date_range_criteria_start',
+                              default=u'Start Date'),
+                      description=_(u'help_date_range_criteria_start',
+                                    default=u'The beginning of the date range to search')
+                  ),
+                  ),
     DateTimeField('end',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default=None,
-                widget=CalendarWidget(
-                    label=_(u'label_date_range_criteria_end', default=u'End Date'),
-                    description=_(u'help_date_range_criteria_end',
-                                  default=u'The ending of the date range to search.')
+                  required=1,
+                  mode="rw",
+                  write_permission=ChangeTopics,
+                  default=None,
+                  widget=CalendarWidget(
+                      label=_(u'label_date_range_criteria_end',
+                              default=u'End Date'),
+                      description=_(u'help_date_range_criteria_end',
+                                    default=u'The ending of the date range to search.')
 
-                    ),
-                ),
-    ))
+                  ),
+                  ),
+))
 
 
 class ATDateRangeCriterion(ATBaseCriterion):
@@ -59,10 +61,12 @@ class ATDateRangeCriterion(ATBaseCriterion):
     shortDesc = 'Date range'
 
     security.declareProtected(View, 'Value')
+
     def Value(self):
         return (self.getStart(), self.getEnd())
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
 
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index 9412ce9..12b3362 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -22,22 +22,22 @@
 CompareOperators = DisplayList((
     ('and', _(u'and')),
     ('or', _(u'or')),
-    ))
+))
 
 ATListCriterionSchema = ATBaseCriterionSchema + Schema((
     LinesField('value',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Value",
-                mutator="setValue",
-                default=[],
-                widget=LinesWidget(
+               required=1,
+               mode="rw",
+               write_permission=ChangeTopics,
+               accessor="Value",
+               mutator="setValue",
+               default=[],
+               widget=LinesWidget(
                     label=_(u'label_list_criteria_value', default=u'Values'),
                     description=_(u'help_list_criteria_value',
                                   default=u'Values, each on its own line.')
-                    ),
-                ),
+               ),
+               ),
     StringField('operator',
                 required=1,
                 mode="rw",
@@ -49,9 +49,9 @@
                             default=u'operator name'),
                     description=_(u'help_list_criteria_operator',
                                   default=u'Operator used to join the tests on each value.')
-                    ),
                 ),
-    ))
+                ),
+))
 
 
 class ATListCriterion(ATBaseCriterion):
@@ -66,6 +66,7 @@ class ATListCriterion(ATBaseCriterion):
     shortDesc = 'List of values'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         # filter out empty strings
         result = []
@@ -73,7 +74,8 @@ def getCriteriaItems(self):
         value = tuple([value for value in self.Value() if value])
         if not value:
             return ()
-        result.append((self.Field(), {'query': value, 'operator': self.getOperator()}),)
+        result.append(
+            (self.Field(), {'query': value, 'operator': self.getOperator()}),)
 
         return tuple(result)
 
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index c48a2f5..7ba5b55 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -22,35 +22,37 @@
 
 ATPathCriterionSchema = ATBaseCriterionSchema + Schema((
     ReferenceField('value',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Value",
-                mutator="setValue",
-                allowed_types_method="getNavTypes",
-                multiValued=True,
-                keepReferencesOnCopy=True,
-                relationship="paths",
-                widget=RelatedItemsWidget(
-                    allow_search=1,
-                    label=_(u'label_path_criteria_value', default=u'Folders'),
-                    description=_(u'help_path_criteria_value',
-                                  default=u'Folders to search in.'),
-                    base_query={'is_folderish': True},
-                    restrict_browse=True,
-                    startup_directory='../')
-                ),
+                   required=1,
+                   mode="rw",
+                   write_permission=ChangeTopics,
+                   accessor="Value",
+                   mutator="setValue",
+                   allowed_types_method="getNavTypes",
+                   multiValued=True,
+                   keepReferencesOnCopy=True,
+                   relationship="paths",
+                   widget=RelatedItemsWidget(
+                       allow_search=1,
+                       label=_(u'label_path_criteria_value',
+                               default=u'Folders'),
+                       description=_(u'help_path_criteria_value',
+                                     default=u'Folders to search in.'),
+                       base_query={'is_folderish': True},
+                       restrict_browse=True,
+                       startup_directory='../')
+                   ),
     BooleanField('recurse',
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Recurse",
-                default=False,
-                widget=BooleanWidget(
-                    label=_(u'label_path_criteria_recurse', default=u'Search Sub-Folders'),
-                    description='',
-                    ),
-                ),
-    ))
+                 mode="rw",
+                 write_permission=ChangeTopics,
+                 accessor="Recurse",
+                 default=False,
+                 widget=BooleanWidget(
+                     label=_(u'label_path_criteria_recurse',
+                             default=u'Search Sub-Folders'),
+                     description='',
+                 ),
+                 ),
+))
 
 
 class ATPathCriterion(ATBaseCriterion):
@@ -75,10 +77,12 @@ def setValue(self, value):
         self.reindexObject()
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
         depth = (not self.Recurse() and 1) or -1
-        paths = ['/'.join(o.getPhysicalPath()) for o in self.Value() if o is not None]
+        paths = ['/'.join(o.getPhysicalPath())
+                 for o in self.Value() if o is not None]
 
         if paths is not '':
             result.append((self.Field(), {'query': paths, 'depth': depth}))
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 05de4c9..2fc6a13 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -38,6 +38,7 @@ class ATPortalTypeCriterion(ATSelectionCriterion):
     shortDesc = 'Select content types'
 
     security.declareProtected(View, 'getCurrentValues')
+
     def getCurrentValues(self):
         """Return enabled portal types"""
         vocab = queryUtility(IVocabularyFactory, name=VOCAB_ID)(self)
@@ -58,6 +59,7 @@ def getCurrentValues(self):
         return DisplayList(result)
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
         if self.Value() is not '':
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 945d58f..08bd5d6 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -36,7 +36,8 @@ def getCurrentValues(self):
             query['Language'] = [self.Language(), '']
 
         brains = uid_cat(**query)
-        display = [((putils.pretty_title_or_id(b)).lower(), b.UID, b.Title or b.id) for b in brains]
+        display = [((putils.pretty_title_or_id(b)).lower(),
+                    b.UID, b.Title or b.id) for b in brains]
         display.sort()
         display_list = DisplayList([(d[1], d[2]) for d in display])
 
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index 19b23a7..07030aa 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -27,18 +27,18 @@
                                     i18n_domain="plone",
                                     description="Enter a relative path e.g.: <br /> '..' for the parent folder <br /> '../..' for the parent's parent <br />'../somefolder' for a sibling folder")),
     BooleanField('recurse',
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Recurse",
-                default=False,
-                widget=BooleanWidget(
-                    label="Search Sub-Folders",
-                    label_msgid="label_path_criteria_recurse",
-                    description="",
-                    description_msgid="help_path_criteria_recurse",
-                    i18n_domain="plone"),
-                ),
-    ))
+                 mode="rw",
+                 write_permission=ChangeTopics,
+                 accessor="Recurse",
+                 default=False,
+                 widget=BooleanWidget(
+                     label="Search Sub-Folders",
+                     label_msgid="label_path_criteria_recurse",
+                     description="",
+                     description_msgid="help_path_criteria_recurse",
+                     i18n_domain="plone"),
+                 ),
+))
 
 
 class ATRelativePathCriterion(ATBaseCriterion):
@@ -58,16 +58,19 @@ def getNavTypes(self):
         return nav_types
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
         depth = (not self.Recurse() and 1) or -1
         relPath = self.getRelativePath()
 
-        # sanitize a bit: you never know, with all those windoze users out there
+        # sanitize a bit: you never know, with all those windoze users out
+        # there
         relPath = relPath.replace("\\", "/")
 
         # get the path to the portal object
-        portalPath = list(getToolByName(self, 'portal_url').getPortalObject().getPhysicalPath())
+        portalPath = list(getToolByName(
+            self, 'portal_url').getPortalObject().getPhysicalPath())
 
         if relPath[0] == '/':
             # someone didn't enter a relative path.
diff --git a/Products/ATContentTypes/criteria/schemata.py b/Products/ATContentTypes/criteria/schemata.py
index 48cb62b..3ce31ec 100644
--- a/Products/ATContentTypes/criteria/schemata.py
+++ b/Products/ATContentTypes/criteria/schemata.py
@@ -20,9 +20,9 @@
                     label=_(u'label_short_name', default=u'Short Name'),
                     description=_(u'help_shortname',
                                   default=u"Should not contain spaces, underscores or mixed case. "
-                                           "Short Name is part of the item's web address."),
+                                  "Short Name is part of the item's web address."),
                     visible={'view': 'invisible'}
-                    ),
+                ),
                 ),
     StringField('field',
                 required=1,
@@ -31,10 +31,11 @@
                 write_permission=ChangeTopics,
                 default=None,
                 widget=StringWidget(
-                    label=_(u'label_criteria_field_name', default=u'Field name'),
+                    label=_(u'label_criteria_field_name',
+                            default=u'Field name'),
                     description=_(u'help_shortname',
                                   default=u"Should not contain spaces, underscores or mixed case. "
-                                           "Short Name is part of the item's web address.")
-                    ),
+                                  "Short Name is part of the item's web address.")
+                ),
                 ),
-    ))
+))
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index 54c3d77..9b42f15 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -23,22 +23,23 @@
 CompareOperators = DisplayList((
     ('and', _(u'and')),
     ('or', _(u'or')),
-    ))
+))
 
 ATSelectionCriterionSchema = ATBaseCriterionSchema + Schema((
     LinesField('value',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Value",
-                mutator="setValue",
-                default=[],
-                vocabulary="getCurrentValues",
-                widget=MultiSelectionWidget(
+               required=1,
+               mode="rw",
+               write_permission=ChangeTopics,
+               accessor="Value",
+               mutator="setValue",
+               default=[],
+               vocabulary="getCurrentValues",
+               widget=MultiSelectionWidget(
                     label=_(u'label_criteria_values', default=u'Values'),
-                    description=_(u'help_criteria_values', default=u'Existing values.')
-                    ),
-                ),
+                    description=_(u'help_criteria_values',
+                                  default=u'Existing values.')
+               ),
+               ),
     StringField('operator',
                 required=1,
                 mode="rw",
@@ -46,12 +47,13 @@
                 default='or',
                 vocabulary=CompareOperators,
                 widget=SelectionWidget(
-                    label=_(u'label_list_criteria_operator', default=u'operator name'),
+                    label=_(u'label_list_criteria_operator',
+                            default=u'operator name'),
                     description=_(u'help_list_criteria_operator',
                                   default=u'Operator used to join the tests on each value.')
-                    ),
                 ),
-    ))
+                ),
+))
 
 
 class ATSelectionCriterion(ATBaseCriterion):
@@ -72,11 +74,13 @@ def getCurrentValues(self):
         # DisplayList keys though it is supposed to (it should
         # probably accept Booleans as well) so we only accept strings
         # for now
-        options = [(o.lower(), o) for o in options if isinstance(o, basestring)]
+        options = [(o.lower(), o)
+                   for o in options if isinstance(o, basestring)]
         options.sort()
         return [o[1] for o in options]
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         # filter out empty strings
         result = []
@@ -84,7 +88,8 @@ def getCriteriaItems(self):
         value = tuple([value for value in self.Value() if value])
         if not value:
             return ()
-        result.append((self.Field(), {'query': value, 'operator': self.getOperator()}),)
+        result.append(
+            (self.Field(), {'query': value, 'operator': self.getOperator()}),)
 
         return tuple(result)
 
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 72fbef2..090b8f6 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -24,35 +24,36 @@
     ('min', _(u'Greater than')),
     ('max', _(u'Less than')),
     ('min:max', _(u'Between')),
-    ))
+))
 
 ATSimpleIntCriterionSchema = ATBaseCriterionSchema + Schema((
     IntegerField('value',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Value",
-                mutator="setValue",
-                default=None,
-                widget=IntegerWidget(
-                    label=_(u'label_int_criteria_value', default=u'Value'),
-                    description=_(u'help_int_criteria_value',
-                                  default=u'An integer number.')
-                    ),
-                ),
+                 required=1,
+                 mode="rw",
+                 write_permission=ChangeTopics,
+                 accessor="Value",
+                 mutator="setValue",
+                 default=None,
+                 widget=IntegerWidget(
+                     label=_(u'label_int_criteria_value', default=u'Value'),
+                     description=_(u'help_int_criteria_value',
+                                   default=u'An integer number.')
+                 ),
+                 ),
     IntegerField('value2',
-                required=0,
-                mode="rw",
-                write_permission=ChangeTopics,
-                accessor="Value2",
-                mutator="setValue2",
-                default=None,
-                widget=IntegerWidget(
-                    label=_(u'label_int_criteria_value2', default=u'Second Value'),
-                    description=_(u'help_int_criteria_value2',
-                                  default=u'An integer number used as the maximum value if the between direction is selected.')
-                    ),
-                ),
+                 required=0,
+                 mode="rw",
+                 write_permission=ChangeTopics,
+                 accessor="Value2",
+                 mutator="setValue2",
+                 default=None,
+                 widget=IntegerWidget(
+                     label=_(u'label_int_criteria_value2',
+                             default=u'Second Value'),
+                     description=_(u'help_int_criteria_value2',
+                                   default=u'An integer number used as the maximum value if the between direction is selected.')
+                 ),
+                 ),
     StringField('direction',
                 required=0,
                 mode="rw",
@@ -61,12 +62,13 @@
                 vocabulary=DirectionOperations,
                 enforceVocabulary=1,
                 widget=SelectionWidget(
-                    label=_(u'label_int_criteria_direction', default=u'Direction'),
+                    label=_(u'label_int_criteria_direction',
+                            default=u'Direction'),
                     description=_(u'help_int_criteria_direction',
                                   default=u'Specify whether you want to find values lesser than, greater than, equal to, or between the chosen value(s).')
-                    ),
                 ),
-    ))
+                ),
+))
 
 
 class ATSimpleIntCriterion(ATBaseCriterion):
@@ -81,6 +83,7 @@ class ATSimpleIntCriterion(ATBaseCriterion):
     shortDesc = 'Integer value or range'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
         val = self.Value()
@@ -91,13 +94,15 @@ def getCriteriaItems(self):
             else:
                 val = int(val)
             if direction:
-                result.append((self.Field(), {'query': val, 'range': direction}))
+                result.append(
+                    (self.Field(), {'query': val, 'range': direction}))
             else:
                 result.append((self.Field(), {'query': val}))
 
         return tuple(result)
 
     security.declareProtected(View, 'post_validate')
+
     def post_validate(self, REQUEST, errors):
         """Check that Value2 is set if range is set to min:max"""
         direction = REQUEST.get('direction', self.getDirection())
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index 48e49ef..fa2dcbc 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -30,7 +30,7 @@
                     description=_(u'help_string_criteria_value',
                                   default=u'A string value.'))
                 ),
-    ))
+))
 
 
 class ATSimpleStringCriterion(ATBaseCriterion):
@@ -45,6 +45,7 @@ class ATSimpleStringCriterion(ATBaseCriterion):
     shortDesc = 'Text'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = []
 
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index f65a6b8..69da318 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -17,14 +17,14 @@
 
 ATSortCriterionSchema = ATBaseCriterionSchema + Schema((
     BooleanField('reversed',
-                required=0,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default=0,
-                widget=BooleanWidget(label=_(u'Reverse')),
-                ),
+                 required=0,
+                 mode="rw",
+                 write_permission=ChangeTopics,
+                 default=0,
+                 widget=BooleanWidget(label=_(u'Reverse')),
+                 ),
 
-    ))
+))
 
 
 class ATSortCriterion(ATBaseCriterion):
@@ -38,6 +38,7 @@ class ATSortCriterion(ATBaseCriterion):
     shortDesc = 'Sort'
 
     security.declareProtected(View, 'getCriteriaItems')
+
     def getCriteriaItems(self):
         result = [('sort_on', self.Field())]
 
diff --git a/Products/ATContentTypes/exportimport/atcttool.py b/Products/ATContentTypes/exportimport/atcttool.py
index ff06841..94c0934 100644
--- a/Products/ATContentTypes/exportimport/atcttool.py
+++ b/Products/ATContentTypes/exportimport/atcttool.py
@@ -66,28 +66,30 @@ def _initSettings(self, node):
                         except AttributeError:
                             self.context.addIndex(name)
 
-                        description = safeGetAttribute(indexNode, 'description')
+                        description = safeGetAttribute(
+                            indexNode, 'description')
                         enabled = safeGetAttribute(indexNode, 'enabled')
                         if enabled is not None:
                             enabled = self._convertToBoolean(enabled)
-                        friendlyName = safeGetAttribute(indexNode, 'friendlyName')
+                        friendlyName = safeGetAttribute(
+                            indexNode, 'friendlyName')
 
                         criteria = None
                         for critNode in indexNode.childNodes:
                             if critNode.nodeName == 'criteria':
                                 for textNode in critNode.childNodes:
                                     if textNode.nodeName != '#text' or \
-                                        not textNode.nodeValue.strip():
+                                            not textNode.nodeValue.strip():
                                         continue
                                     if criteria is None:
                                         criteria = []
                                     criteria.append(str(textNode.nodeValue))
 
                         self.context.updateIndex(name,
-                                              friendlyName=friendlyName,
-                                              description=description,
-                                              enabled=enabled,
-                                              criteria=criteria)
+                                                 friendlyName=friendlyName,
+                                                 description=description,
+                                                 enabled=enabled,
+                                                 criteria=criteria)
 
             if child.nodeName == 'topic_metadata':
                 for metadataNode in child.childNodes:
@@ -102,15 +104,17 @@ def _initSettings(self, node):
                         except AttributeError:
                             self.context.addMetadata(name)
 
-                        description = safeGetAttribute(metadataNode, 'description')
+                        description = safeGetAttribute(
+                            metadataNode, 'description')
                         enabled = safeGetAttribute(metadataNode, 'enabled')
                         if enabled is not None:
                             enabled = self._convertToBoolean(enabled)
-                        friendlyName = safeGetAttribute(metadataNode, 'friendlyName')
+                        friendlyName = safeGetAttribute(
+                            metadataNode, 'friendlyName')
                         self.context.updateMetadata(name,
-                                                 friendlyName=friendlyName,
-                                                 description=description,
-                                                 enabled=enabled)
+                                                    friendlyName=friendlyName,
+                                                    description=description,
+                                                    enabled=enabled)
 
     def _extractSettings(self):
         fragment = self._doc.createDocumentFragment()
diff --git a/Products/ATContentTypes/exportimport/factorytool.py b/Products/ATContentTypes/exportimport/factorytool.py
index d55d895..c398bc8 100644
--- a/Products/ATContentTypes/exportimport/factorytool.py
+++ b/Products/ATContentTypes/exportimport/factorytool.py
@@ -39,7 +39,7 @@ def _initFactoryToolSettings(self, node):
                 for type in child.getElementsByTagName("type"):
                     types.add(type.getAttribute("portal_type"))
                 self.context.manage_setPortalFactoryTypes(
-                                    listOfTypeIds=list(types))
+                    listOfTypeIds=list(types))
 
     def _extractFactoryToolSettings(self):
         node = self._doc.createElement("factorytypes")
diff --git a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
index 4b5a3c9..7233033 100644
--- a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
+++ b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
@@ -44,7 +44,8 @@ def setUp(self):
         self.site = Folder('site')
         self.site.portal_types = DummyTypesTool()
         provideUtility(self.site.portal_types, ITypesTool)
-        provideAdapter(self._getTargetClass(), (IFactoryTool, ISetupEnviron), IBody)
+        provideAdapter(self._getTargetClass(),
+                       (IFactoryTool, ISetupEnviron), IBody)
         self.site.portal_factory = FactoryTool()
 
         self._obj = self.site.portal_factory
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
index 15e0795..5a87e34 100644
--- a/Products/ATContentTypes/factories.py
+++ b/Products/ATContentTypes/factories.py
@@ -61,4 +61,4 @@ def __call__(self, name, content_type, data):
             transaction.commit()
         finally:
             upload_lock.release()
-        return obj
\ No newline at end of file
+        return obj
diff --git a/Products/ATContentTypes/interfaces/__init__.py b/Products/ATContentTypes/interfaces/__init__.py
index 16e9d3a..4bbe008 100644
--- a/Products/ATContentTypes/interfaces/__init__.py
+++ b/Products/ATContentTypes/interfaces/__init__.py
@@ -21,4 +21,4 @@
 from Products.ATContentTypes.interfaces.topic import IATTopicCriterion
 from Products.ATContentTypes.interfaces.topic import IATTopicSearchCriterion
 from Products.ATContentTypes.interfaces.topic import IATTopicSortCriterion
-from Products.ATContentTypes.interfaces.factories import IATCTFileFactory
\ No newline at end of file
+from Products.ATContentTypes.interfaces.factories import IATCTFileFactory
diff --git a/Products/ATContentTypes/interfaces/factories.py b/Products/ATContentTypes/interfaces/factories.py
index 68173ac..f9d2ebc 100644
--- a/Products/ATContentTypes/interfaces/factories.py
+++ b/Products/ATContentTypes/interfaces/factories.py
@@ -3,4 +3,4 @@
 
 class IATCTFileFactory(IFileFactory):
     """ adapter factory for ATCT
-    """
\ No newline at end of file
+    """
diff --git a/Products/ATContentTypes/interfaces/folder.py b/Products/ATContentTypes/interfaces/folder.py
index d4281f2..1ebd264 100644
--- a/Products/ATContentTypes/interfaces/folder.py
+++ b/Products/ATContentTypes/interfaces/folder.py
@@ -7,6 +7,7 @@
 
 
 class IFilterFolder(Interface):
+
     def listObjects():
         """
         """
diff --git a/Products/ATContentTypes/interfaces/interfaces.py b/Products/ATContentTypes/interfaces/interfaces.py
index 39577d2..5188986 100644
--- a/Products/ATContentTypes/interfaces/interfaces.py
+++ b/Products/ATContentTypes/interfaces/interfaces.py
@@ -12,7 +12,8 @@ class IATContentType(ISelectableBrowserDefault, IBaseContent):
     """Marker interface for AT Content Types
     """
 
-    default_view = Attribute('''Default view template - used for dynamic view''')
+    default_view = Attribute(
+        '''Default view template - used for dynamic view''')
     suppl_views = Attribute('''Supplementary views - used for dynamic view''')
 
     _atct_newTypeFor = Attribute('''XXX''')
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index 00d8a79..41563eb 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -94,14 +94,14 @@ class CalendarSupportMixin:
         'action': 'string:${object_url}/ics_view',
         'permissions': (View, ),
         'category': 'document_actions',
-         },
-         {
+    },
+        {
         'id': 'vcs',
         'name': 'vCalendar',
         'action': 'string:${object_url}/vcs_view',
         'permissions': (View, ),
         'category': 'document_actions',
-         },
+    },
     )
 
     _at_action_icons = ({
@@ -110,17 +110,18 @@ class CalendarSupportMixin:
         'icon_expr': 'ical_icon.gif',
         'title': 'iCalendar export',
         'priority': 0,
-        },
+    },
         {
         'category': 'plone',
         'action_id': 'vcs',
         'icon_expr': 'vcal_icon.gif',
         'title': 'vCalendar export',
         'priority': 0,
-        },
-        )
+    },
+    )
 
     security.declareProtected(View, 'getICal')
+
     def getICal(self):
         """get iCal data
         """
@@ -133,7 +134,7 @@ def getICal(self):
             'summary': vformat(self.Title()),
             'startdate': rfc2445dt(self.start()),
             'enddate': rfc2445dt(self.end()),
-            }
+        }
         out.write(ICS_EVENT_START % map)
 
         description = self.Description()
@@ -149,8 +150,8 @@ def getICal(self):
             out.write('CATEGORIES:%s\n' % ', '.join(subject))
 
         # TODO  -- NO! see the RFC; ORGANIZER field is not to be used for non-group-scheduled entities
-        #ORGANIZER;CN=%(name):MAILTO=%(email)
-        #ATTENDEE;CN=%(name);ROLE=REQ-PARTICIPANT:mailto:%(email)
+        # ORGANIZER;CN=%(name):MAILTO=%(email)
+        # ATTENDEE;CN=%(name);ROLE=REQ-PARTICIPANT:mailto:%(email)
 
         cn = []
         contact = self.contact_name()
@@ -173,11 +174,13 @@ def getICal(self):
         return out.getvalue()
 
     security.declareProtected(View, 'ics_view')
+
     def ics_view(self, REQUEST, RESPONSE):
         """iCalendar output
         """
         RESPONSE.setHeader('Content-Type', 'text/calendar')
-        RESPONSE.setHeader('Content-Disposition', 'attachment; filename="%s.ics"' % self.getId())
+        RESPONSE.setHeader('Content-Disposition',
+                           'attachment; filename="%s.ics"' % self.getId())
         out = StringIO()
         out.write(ICS_HEADER % {'prodid': PRODID})
         out.write(self.getICal())
@@ -185,6 +188,7 @@ def ics_view(self, REQUEST, RESPONSE):
         return n2rn(out.getvalue())
 
     security.declareProtected(View, 'getVCal')
+
     def getVCal(self):
         """get vCal data
         """
@@ -197,7 +201,7 @@ def getVCal(self):
             'summary': vformat(self.Title()),
             'startdate': rfc2445dt(self.start()),
             'enddate': rfc2445dt(self.end()),
-            }
+        }
         out.write(VCS_EVENT_START % map)
         description = self.Description()
         if description:
@@ -211,11 +215,13 @@ def getVCal(self):
         return out.getvalue()
 
     security.declareProtected(View, 'vcs_view')
+
     def vcs_view(self, REQUEST, RESPONSE):
         """vCalendar output
         """
         RESPONSE.setHeader('Content-Type', 'text/x-vCalendar')
-        RESPONSE.setHeader('Content-Disposition', 'attachment; filename="%s.vcs"' % self.getId())
+        RESPONSE.setHeader('Content-Disposition',
+                           'attachment; filename="%s.vcs"' % self.getId())
         out = StringIO()
         out.write(VCS_HEADER % {'prodid': PRODID})
         out.write(self.getVCal())
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index d92b326..a08a3e2 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -35,72 +35,74 @@
 #  behaviour (same as DISABLED).
 
 enableDisplayList = IntDisplayList((
-    (ACQUIRE, _(u'constraintypes_acquire_label', default=u'Use parent folder settings')),
+    (ACQUIRE, _(u'constraintypes_acquire_label',
+                default=u'Use parent folder settings')),
     (DISABLED, _(u'constraintypes_disable_label', default=u'Use portal default')),
     (ENABLED, _(u'constraintypes_enable_label', default=u'Select manually')),
-    ))
+))
 
 ConstrainTypesMixinSchema = Schema((
     IntegerField('constrainTypesMode',
-        required=False,
-        default_method="_ct_defaultConstrainTypesMode",
-        vocabulary=enableDisplayList,
-        languageIndependent=True,
-        write_permission=ATCTPermissions.ModifyConstrainTypes,
-        widget=SelectionWidget(
-            label=_(u'label_contrain_types_mode',
-                    default=u'Constrain types mode'),
-            description=_(u'description_constrain_types_mode',
-                          default=u'Select the constraint type mode for this folder.'),
-            visible={'view': 'invisible',
-                     'edit': 'invisible',
-                    },
-            ),
-        ),
+                 required=False,
+                 default_method="_ct_defaultConstrainTypesMode",
+                 vocabulary=enableDisplayList,
+                 languageIndependent=True,
+                 write_permission=ATCTPermissions.ModifyConstrainTypes,
+                 widget=SelectionWidget(
+                     label=_(u'label_contrain_types_mode',
+                             default=u'Constrain types mode'),
+                     description=_(u'description_constrain_types_mode',
+                                   default=u'Select the constraint type mode for this folder.'),
+                     visible={'view': 'invisible',
+                              'edit': 'invisible',
+                              },
+                 ),
+                 ),
 
     LinesField('locallyAllowedTypes',
-        vocabulary='_ct_vocabularyPossibleTypes',
-        enforceVocabulary=False,
-        languageIndependent=True,
-        default_method='_ct_defaultAddableTypeIds',
-        accessor='getLocallyAllowedTypes',  # Respects ENABLE/DISABLE/ACQUIRE
-        write_permission=ATCTPermissions.ModifyConstrainTypes,
-        multiValued=True,
-        widget=MultiSelectionWidget(
-            size=10,
-            label=_(u'label_constrain_allowed_types',
-                    default=u'Permitted types'),
-            description=_(u'description_constrain_allowed_types',
-                          default=u'Select the types which will be addable inside this folder.'
-                         ),
-            visible={'view': 'invisible',
-                     'edit': 'invisible',
-                    },
-            ),
-        ),
-
-     LinesField('immediatelyAddableTypes',
-        vocabulary='_ct_vocabularyPossibleTypes',
-        enforceVocabulary=False,
-        languageIndependent=True,
-        default_method='_ct_defaultAddableTypeIds',
-        accessor='getImmediatelyAddableTypes',  # Respects ENABLE/DISABLE/ACQUIRE
-        write_permission=ATCTPermissions.ModifyConstrainTypes,
-        multiValued=True,
-        widget=MultiSelectionWidget(
-            size=10,
-            label=_(u'label_constrain_preferred_types', u'Preferred types'),
-            description=_(u'description_constrain_preferred_types',
-                          default=u'Select the types which will be addable '
-                                   'from the "Add new item" menu. Any '
-                                   'additional types set in the list above '
-                                   'will be addable from a separate form.'),
-            visible={'view': 'invisible',
-                     'edit': 'invisible',
-                    },
-            ),
-        ),
-    ))
+               vocabulary='_ct_vocabularyPossibleTypes',
+               enforceVocabulary=False,
+               languageIndependent=True,
+               default_method='_ct_defaultAddableTypeIds',
+               accessor='getLocallyAllowedTypes',  # Respects ENABLE/DISABLE/ACQUIRE
+               write_permission=ATCTPermissions.ModifyConstrainTypes,
+               multiValued=True,
+               widget=MultiSelectionWidget(
+                   size=10,
+                   label=_(u'label_constrain_allowed_types',
+                           default=u'Permitted types'),
+                   description=_(u'description_constrain_allowed_types',
+                                 default=u'Select the types which will be addable inside this folder.'
+                                 ),
+                   visible={'view': 'invisible',
+                            'edit': 'invisible',
+                            },
+               ),
+               ),
+
+    LinesField('immediatelyAddableTypes',
+               vocabulary='_ct_vocabularyPossibleTypes',
+               enforceVocabulary=False,
+               languageIndependent=True,
+               default_method='_ct_defaultAddableTypeIds',
+               accessor='getImmediatelyAddableTypes',  # Respects ENABLE/DISABLE/ACQUIRE
+               write_permission=ATCTPermissions.ModifyConstrainTypes,
+               multiValued=True,
+               widget=MultiSelectionWidget(
+                   size=10,
+                   label=_(u'label_constrain_preferred_types',
+                           u'Preferred types'),
+                   description=_(u'description_constrain_preferred_types',
+                                 default=u'Select the types which will be addable '
+                                 'from the "Add new item" menu. Any '
+                                 'additional types set in the list above '
+                                 'will be addable from a separate form.'),
+                   visible={'view': 'invisible',
+                            'edit': 'invisible',
+                            },
+               ),
+               ),
+))
 
 
 def getParent(obj):
@@ -145,6 +147,7 @@ class ConstrainTypesMixin:
     # Sanity validator
     #
     security.declareProtected(ModifyPortalContent, 'validate_preferredTypes')
+
     def validate_preferredTypes(self, value):
         """Ensure that the preferred types is a subset of the allowed types.
         """
@@ -158,13 +161,14 @@ def validate_preferredTypes(self, value):
 
         if disallowed:
             return "The following types are not permitted: %s" % \
-                        ','.join(disallowed)
+                ','.join(disallowed)
 
     #
     # Overrides + supplements for CMF types machinery
     #
 
     security.declareProtected(View, 'getLocallyAllowedTypes')
+
     def getLocallyAllowedTypes(self, context=None):
         """If enableTypeRestrictions is ENABLE, return the list of types
         set. If it is ACQUIRE, get the types set on the parent so long
@@ -185,13 +189,14 @@ def getLocallyAllowedTypes(self, context=None):
                 return [fti.getId() for fti in self.getDefaultAddableTypes(context)]
             elif not parentPortalTypeEqual(self):
                 # if parent.portal_type != self.portal_type:
-                default_addable_types = [fti.getId() for fti in self.getDefaultAddableTypes(context)]
+                default_addable_types = [
+                    fti.getId() for fti in self.getDefaultAddableTypes(context)]
                 if ISelectableConstrainTypes.providedBy(parent):
                     return [t for t in parent.getLocallyAllowedTypes(context)
-                                if t in default_addable_types]
+                            if t in default_addable_types]
                 else:
                     return [t for t in parent.getLocallyAllowedTypes()
-                                if t in default_addable_types]
+                            if t in default_addable_types]
             else:
                 if ISelectableConstrainTypes.providedBy(parent):
                     return parent.getLocallyAllowedTypes(context)
@@ -201,6 +206,7 @@ def getLocallyAllowedTypes(self, context=None):
             raise ValueError, "Invalid value for enableAddRestriction"
 
     security.declareProtected(View, 'getImmediatelyAddableTypes')
+
     def getImmediatelyAddableTypes(self, context=None):
         """Get the list of type ids which should be immediately addable.
         If enableTypeRestrictions is ENABLE, return the list set; if it is
@@ -212,20 +218,20 @@ def getImmediatelyAddableTypes(self, context=None):
         mode = self.getConstrainTypesMode()
 
         if mode == DISABLED:
-            return [fti.getId() for fti in \
-                        self.getDefaultAddableTypes(context)]
+            return [fti.getId() for fti in
+                    self.getDefaultAddableTypes(context)]
         elif mode == ENABLED:
             return self.getField('immediatelyAddableTypes').get(self)
         elif mode == ACQUIRE:
             parent = getParent(self)
             if not parent or parent.portal_type == 'Plone Site':
-                return [fti.getId() for fti in \
+                return [fti.getId() for fti in
                         PortalFolder.allowedContentTypes(self)]
             elif not parentPortalTypeEqual(self):
-                default_allowed = [fti.getId() for fti in \
-                        PortalFolder.allowedContentTypes(self)]
-                return [t for t in parent.getImmediatelyAddableTypes(context) \
-                           if t in default_allowed]
+                default_allowed = [fti.getId() for fti in
+                                   PortalFolder.allowedContentTypes(self)]
+                return [t for t in parent.getImmediatelyAddableTypes(context)
+                        if t in default_allowed]
             else:
                 parent = aq_parent(aq_inner(self))
                 return parent.getImmediatelyAddableTypes(context)
@@ -261,6 +267,7 @@ def allowedContentTypes(self, context=None):
 
     # overrides CMFCore's PortalFolder invokeFactory
     security.declareProtected(AddPortalContent, 'invokeFactory')
+
     def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         """Invokes the portal_types tool
         """
@@ -269,12 +276,12 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         # Short circuit if we are disabled or acquiring from non-compatible
         # parent
 
-        #if mode == DISABLED or \
+        # if mode == DISABLED or \
         #        (parent and parent.portal_types != self.portal_types):
         if mode == DISABLED or \
-              (mode == ACQUIRE and not parentPortalTypeEqual(self)):
+                (mode == ACQUIRE and not parentPortalTypeEqual(self)):
             return PortalFolder.invokeFactory(self, type_name, id,
-                                                RESPONSE=None, *args, **kw)
+                                              RESPONSE=None, *args, **kw)
 
         if not type_name in [fti.getId() for fti in self.allowedContentTypes()]:
             raise ValueError('Disallowed subobject type: %s' % type_name)
@@ -284,6 +291,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         return pt.constructContent(*args, **kw)
 
     security.declareProtected(View, 'getDefaultAddableTypes')
+
     def getDefaultAddableTypes(self, context=None):
         """returns a list of normally allowed objects as ftis.
         Exactly like PortalFolder.allowedContentTypes except this
@@ -307,6 +315,7 @@ def getDefaultAddableTypes(self, context=None):
         return [t for t in result if t.isConstructionAllowed(context)]
 
     security.declarePublic('canSetConstrainTypes')
+
     def canSetConstrainTypes(self):
         """Find out if the current user is allowed to set the allowable types
         """
@@ -320,16 +329,18 @@ def canSetConstrainTypes(self):
 
     # Vocab for type lists
     security.declarePrivate('_ct_vocabularyPossibleTypes')
+
     def _ct_vocabularyPossibleTypes(self):
         """Get a DisplayList of types which may be added (id -> title)
         """
         typelist = [(fti.title_or_id(), fti.getId())
-                     for fti in self.getDefaultAddableTypes()]
+                    for fti in self.getDefaultAddableTypes()]
         typelist.sort()
         return DisplayList([(id, title) for title, id in typelist])
 
     # Default method for type lists
     security.declarePrivate('_ct_defaultAddableTypeIds')
+
     def _ct_defaultAddableTypeIds(self):
         """Get a list of types which are addable in the ordinary case w/o the
         constraint machinery.
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index 699e320..2a2fdc9 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -36,10 +36,11 @@ class HistoryAwareMixin(ATHistoryAwareMixin):
         'action': 'string:${object_url}/atct_history',
         'permissions': (ATCTPermissions.ViewHistory, ),
         'visible': False,
-         },
+    },
     )
 
     security.declarePrivate('getHistorySource')
+
     def getHistorySource(self):
         """get source for HistoryAwareMixin
 
@@ -52,6 +53,7 @@ def getHistorySource(self):
             return ''
 
     security.declareProtected(View, 'getLastEditor')
+
     def getLastEditor(self):
         """Returns the user name of the last editor.
 
@@ -61,9 +63,11 @@ def getLastEditor(self):
         if not histories:
             return None
         user = histories[0][3].split(" ")[-1].strip()
-        return  user
+        return user
+
+    security.declareProtected(
+        ATCTPermissions.ViewHistory, 'getDocumentComparisons')
 
-    security.declareProtected(ATCTPermissions.ViewHistory, 'getDocumentComparisons')
     def getDocumentComparisons(self, max=10, filterComment=0):
         """Get history as unified diff
         """
@@ -86,9 +90,9 @@ def getDocumentComparisons(self, max=10, filterComment=0):
             member = mTool.getMemberById(newUser.split(' ')[-1])
 
             lines = [
-                     html_quote(line)
-                     for line in difflib.unified_diff(oldText, newText)
-                    ][3:]
+                html_quote(line)
+                for line in difflib.unified_diff(oldText, newText)
+            ][3:]
 
             description = newDesc
             if filterComment:
@@ -97,19 +101,19 @@ def getDocumentComparisons(self, max=10, filterComment=0):
                               [line
                                for line in description.split('\n')
                                if line.find(relativUrl) != -1]
-                              )
+                )
             else:
                 description.replace('\n', '<br />\n')
 
             if lines:
                 lst.append({
-                            'lines': lines,
-                            'oldTime': oldTime,
-                            'newTime': newTime,
-                            'description': description,
-                            'user': newUser,
-                            'member': member
-                           })
+                    'lines': lines,
+                    'oldTime': oldTime,
+                    'newTime': newTime,
+                    'description': description,
+                    'user': newUser,
+                    'member': member
+                })
         return lst
 
 InitializeClass(HistoryAwareMixin)
diff --git a/Products/ATContentTypes/lib/imagetransform.py b/Products/ATContentTypes/lib/imagetransform.py
index 51d96c5..ed5aca2 100644
--- a/Products/ATContentTypes/lib/imagetransform.py
+++ b/Products/ATContentTypes/lib/imagetransform.py
@@ -37,14 +37,14 @@
     ROTATE_270: _(u'Rotate 90 clockwise'),
     ROTATE_180: _(u'Rotate 180'),
     ROTATE_90: _(u'Rotate 90 counterclockwise'),
-   }
+}
 
 AUTO_ROTATE_MAP = {
     0: None,
     90: ROTATE_270,
     180: ROTATE_180,
     270: ROTATE_90,
-    }
+}
 
 
 class ATCTImageTransform(Base):
@@ -57,6 +57,7 @@ class ATCTImageTransform(Base):
     security = ClassSecurityInfo()
 
     security.declarePrivate('getImageAsFile')
+
     def getImageAsFile(self, img=None, scale=None):
         """Get the img as file like object
         """
@@ -72,7 +73,7 @@ def getImageAsFile(self, img=None, scale=None):
         elif isinstance(img, str):
             data = img
         elif isinstance(img, file) or (hasattr(img, 'read') and
-          hasattr(img, 'seek')):
+                                       hasattr(img, 'seek')):
             img.seek(0)
             return img
         if data:
@@ -84,6 +85,7 @@ def getImageAsFile(self, img=None, scale=None):
     # partly based on CMFPhoto
 
     security.declareProtected(View, 'getEXIF')
+
     def getEXIF(self, img=None, refresh=False):
         """Get the exif informations of the file
 
@@ -104,7 +106,8 @@ def getEXIF(self, img=None, refresh=False):
                     io.seek(0)
                     exif_data = exif.process_file(io, debug=False)
                 except:
-                    LOG.error('Failed to process EXIF information', exc_info=True)
+                    LOG.error('Failed to process EXIF information',
+                              exc_info=True)
                     exif_data = {}
                 # seek to 0 and do NOT close because we might work
                 # on a file upload which is required later
@@ -125,6 +128,7 @@ def getEXIF(self, img=None, refresh=False):
         return exif_data
 
     security.declareProtected(View, 'getEXIFOrientation')
+
     def getEXIFOrientation(self):
         """Get the rotation and mirror orientation from the EXIF data
 
@@ -158,6 +162,7 @@ def getEXIFOrientation(self):
         return (mirror, rotation)
 
     security.declareProtected(View, 'getEXIFOrigDate')
+
     def getEXIFOrigDate(self):
         """Get the EXIF DateTimeOriginal from the image (or None)
         """
@@ -168,10 +173,12 @@ def getEXIFOrigDate(self):
             try:
                 return DateTime(str(raw_date))
             except:
-                LOG.error('Failed to parse exif date %s' % raw_date, exc_info=True)
+                LOG.error('Failed to parse exif date %s' %
+                          raw_date, exc_info=True)
         return None
 
     security.declareProtected(ModifyPortalContent, 'transformImage')
+
     def transformImage(self, method, REQUEST=None):
         """
         Transform an Image:
@@ -218,6 +225,7 @@ def transformImage(self, method, REQUEST=None):
             REQUEST.RESPONSE.redirect(target)
 
     security.declareProtected(ModifyPortalContent, 'autoTransformImage')
+
     def autoTransformImage(self, REQUEST=None):
         """Auto transform image according to EXIF data
 
@@ -236,12 +244,14 @@ def autoTransformImage(self, REQUEST=None):
             return mirror, rotation, transform
 
     security.declareProtected(View, 'getTransformMap')
+
     def getTransformMap(self):
         """Get map for tranforming the image
         """
         return [{'name': n, 'value': v} for v, n in TRANSPOSE_MAP.items()]
 
     security.declareProtected(View, 'hasPIL')
+
     def hasPIL(self):
         """Is PIL installed?
         """
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 056b067..878a317 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -40,7 +40,8 @@
 # get the encoding from an uploaded html-page
 # e.g. <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 # we get ISO-8859-1 into the second match, the rest into the first and third.
-RE_GET_HTML_ENCODING = re.compile('(<meta.*?content-type.*?charset[\s]*=[\s]*)([^"]*?)("[^>]*?>)', re.S | re.I)
+RE_GET_HTML_ENCODING = re.compile(
+    '(<meta.*?content-type.*?charset[\s]*=[\s]*)([^"]*?)("[^>]*?>)', re.S | re.I)
 
 # subtract 11 line numbers from the warning/error
 SUBTRACT_LINES = 11
@@ -151,7 +152,8 @@ def __call__(self, value, *args, **kw):
         else:
             return 1
 
-validatorList.append(TidyHtmlWithCleanupValidator('isTidyHtmlWithCleanup', title='', description=''))
+validatorList.append(TidyHtmlWithCleanupValidator(
+    'isTidyHtmlWithCleanup', title='', description=''))
 
 
 class NonEmptyFileValidator:
@@ -171,7 +173,7 @@ def __call__(self, value, *args, **kwargs):
 
         # calculate size
         if isinstance(value, FileUpload) or type(value) is FileType \
-          or hasattr(aq_base(value), 'tell'):
+                or hasattr(aq_base(value), 'tell'):
             value.seek(0, 2)  # eof
             size = value.tell()
             value.seek(0)
@@ -187,7 +189,8 @@ def __call__(self, value, *args, **kwargs):
             return True
 
 
-validatorList.append(NonEmptyFileValidator('isNonEmptyFile', title='', description=''))
+validatorList.append(NonEmptyFileValidator(
+    'isNonEmptyFile', title='', description=''))
 
 for validator in validatorList:
     # register the validators
@@ -265,16 +268,16 @@ def unwrapValueFromHTML(value):
     else:
         raise ValueError('%s is not a html string' % value)
 
-##    # remove 2 spaces from the beginning of each line
+# remove 2 spaces from the beginning of each line
 ##    nlines = []
-##    for line in body.split('\n'):
-##        print line
-##        if line[:2] == '  ':
-##            nlines.append(line[2:])
-##        else:
-##            nlines.append(line)
+# for line in body.split('\n'):
+# print line
+# if line[:2] == '  ':
+# nlines.append(line[2:])
+# else:
+# nlines.append(line)
 ##
-##    return '\n'.join(nlines)
+# return '\n'.join(nlines)
     return body
 
 
@@ -286,7 +289,7 @@ def correctEncoding(value):
     # we have nothing to do if mxTidy has no
     # fixed char_encoding
     if 'char_encoding' not in MX_TIDY_OPTIONS  \
-           or (MX_TIDY_OPTIONS['char_encoding'] == 'raw'):
+            or (MX_TIDY_OPTIONS['char_encoding'] == 'raw'):
         return value
 
     match = RE_GET_HTML_ENCODING.search(value)
@@ -302,13 +305,14 @@ def correctEncoding(value):
         c_enc = encodings.search_function(char_encoding)
 
         # one encoding is missing or they are equal
-        if not (h_enc and c_enc) or  h_enc == c_enc:
+        if not (h_enc and c_enc) or h_enc == c_enc:
             return value
         else:
             try:
                 return unicode(value, html_encoding).encode(char_encoding)
             except:
-                logger.info("Error correcting encoding from %s to %s" % (html_encoding, char_encoding))
+                logger.info("Error correcting encoding from %s to %s" %
+                            (html_encoding, char_encoding))
     return value
 
 
diff --git a/Products/ATContentTypes/migration/v1_2/__init__.py b/Products/ATContentTypes/migration/v1_2/__init__.py
index 2573f3a..aa3120b 100644
--- a/Products/ATContentTypes/migration/v1_2/__init__.py
+++ b/Products/ATContentTypes/migration/v1_2/__init__.py
@@ -25,10 +25,13 @@ def upgradeATCTTool(portal):
     # real copies of the various objects
     old_conf = {}
     old_conf['album_batch_size'] = int(getattr(tool, 'album_batch_size', 30))
-    old_conf['album_image_scale'] = str(getattr(tool, 'album_image_scale', 'thumb'))
-    old_conf['image_types'] = list(getattr(tool, 'image_types', ['Image', 'News Item']))
+    old_conf['album_image_scale'] = str(
+        getattr(tool, 'album_image_scale', 'thumb'))
+    old_conf['image_types'] = list(
+        getattr(tool, 'image_types', ['Image', 'News Item']))
     old_conf['folder_types'] = list(getattr(tool, 'folder_types', ['Image']))
-    old_conf['single_image_scale'] = str(getattr(tool, 'single_image_scale', 'preview'))
+    old_conf['single_image_scale'] = str(
+        getattr(tool, 'single_image_scale', 'preview'))
     old_conf['topic_indexes'] = tool.topic_indexes.copy()
     old_conf['topic_metadata'] = tool.topic_metadata.copy()
     old_conf['allowed_portal_types'] = tuple(tool.allowed_portal_types)
@@ -49,7 +52,8 @@ def upgradeATCTTool(portal):
     tool._setPropValue('image_types', tuple(old_conf['image_types']))
     tool._setPropValue('folder_types', tuple(old_conf['folder_types']))
     tool._setPropValue('single_image_scale', old_conf['single_image_scale'])
-    tool._setPropValue('allowed_portal_types', old_conf['allowed_portal_types'])
+    tool._setPropValue('allowed_portal_types', old_conf[
+                       'allowed_portal_types'])
 
     # XXX Index and metadata should be updated instead of being reapplied
     tool._setPropValue('topic_indexes', old_conf['topic_indexes'])
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index 3031f4c..9fbfd66 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -25,7 +25,8 @@
 setDefaultRoles(ChangeEvents, ('Manager', 'Site Administrator', 'Owner',))
 
 ModifyConstrainTypes = "Modify constrain types"
-setDefaultRoles(ModifyConstrainTypes, ('Manager', 'Site Administrator', 'Owner'))
+setDefaultRoles(ModifyConstrainTypes,
+                ('Manager', 'Site Administrator', 'Owner'))
 
 ModifyViewTemplate = "Modify view template"
 setDefaultRoles(ModifyViewTemplate, ('Manager', 'Site Administrator', 'Owner'))
@@ -50,7 +51,8 @@ def wireAddPermissions():
         if IATTopic.implementedBy(atct['klass']):
             permission = AddTopics
         elif IATTopicCriterion.implementedBy(atct['klass']):
-            permission = "%s Topic: Add %s" % (PROJECTNAME, atct['portal_type'])
+            permission = "%s Topic: Add %s" % (
+                PROJECTNAME, atct['portal_type'])
             setDefaultRoles(permission, CRITERION_ROLES)
         else:
             permission = "%s: Add %s" % (PROJECTNAME, atct['portal_type'])
diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index 11e3a73..89059d1 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -99,22 +99,22 @@ def setupPortalContent(p):
             util = queryUtility(ITranslationDomain, 'plonefrontpage')
             if util is not None:
                 front_title = util.translate(
-                                    u'front-title',
-                                    target_language=target_language,
-                                    default="Welcome to Plone")
+                    u'front-title',
+                    target_language=target_language,
+                    default="Welcome to Plone")
                 front_desc = util.translate(
                     u'front-description',
                     target_language=target_language,
                     default="Congratulations! You have successfully installed "
                             "Plone.")
                 translated_text = util.translate(u'front-text',
-                                   target_language=target_language)
+                                                 target_language=target_language)
                 if translated_text != u'front-text':
                     front_text = translated_text
 
         if front_text is None and request is not None:
             view = queryMultiAdapter((p, request),
-                name='plone-frontpage-setup')
+                                     name='plone-frontpage-setup')
             if view is not None:
                 front_text = bodyfinder(view.index()).strip()
 
@@ -141,11 +141,11 @@ def setupPortalContent(p):
             util = queryUtility(ITranslationDomain, 'plonefrontpage')
             if util is not None:
                 news_title = util.translate(u'news-title',
-                                       target_language=target_language,
-                                       default='News')
+                                            target_language=target_language,
+                                            default='News')
                 news_desc = util.translate(u'news-description',
-                                      target_language=target_language,
-                                      default='Site News')
+                                           target_language=target_language,
+                                           default='Site News')
 
         _createObjectByType('Folder', p, id='news',
                             title=news_title, description=news_desc)
@@ -191,11 +191,11 @@ def setupPortalContent(p):
             util = queryUtility(ITranslationDomain, 'plonefrontpage')
             if util is not None:
                 events_title = util.translate(u'events-title',
-                                       target_language=target_language,
-                                       default='Events')
+                                              target_language=target_language,
+                                              default='Events')
                 events_desc = util.translate(u'events-description',
-                                      target_language=target_language,
-                                      default='Site Events')
+                                             target_language=target_language,
+                                             default='Site Events')
 
         _createObjectByType('Folder', p, id='events',
                             title=events_title, description=events_desc)
@@ -246,11 +246,11 @@ def setupPortalContent(p):
             util = queryUtility(ITranslationDomain, 'plonefrontpage')
             if util is not None:
                 members_title = util.translate(u'members-title',
-                                       target_language=target_language,
-                                       default='Users')
+                                               target_language=target_language,
+                                               default='Users')
                 members_desc = util.translate(u'members-description',
-                                      target_language=target_language,
-                                      default="Site Users")
+                                              target_language=target_language,
+                                              default="Site Users")
 
         members = getattr(p, 'Members')
         members.setTitle(members_title)
@@ -269,8 +269,8 @@ def setupPortalContent(p):
         manager = queryUtility(IPortletManager, name='plone.rightcolumn')
         if manager is not None:
             assignable = queryMultiAdapter(
-                            (members, manager),
-                            ILocalPortletAssignmentManager)
+                (members, manager),
+                ILocalPortletAssignmentManager)
             assignable.setBlacklistStatus('context', True)
             assignable.setBlacklistStatus('group', True)
             assignable.setBlacklistStatus('content_type', True)
diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index f255124..6afd506 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -61,7 +61,8 @@ def setupTestObject(self):
         self.obj_id = 'test_object'
         self.title = u'test \xf6bject'
         if not self.obj_id in self.folder:
-            self.folder.invokeFactory(self.portal_type, self.obj_id, title=self.title)
+            self.folder.invokeFactory(
+                self.portal_type, self.obj_id, title=self.title)
         self.obj = getattr(self.folder.aq_explicit, self.obj_id)
         self.obj_url = self.obj.absolute_url()
         self.obj_path = '/%s' % self.obj.absolute_url(1)
@@ -88,12 +89,15 @@ def test_createObject(self):
         self.assertEqual(response.getStatus(), 200)  # OK
         temp_id = body.split('/')[-2]
 
-        new_obj = self.folder.portal_factory._getTempFolder(self.portal_type)[temp_id]
-        self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
+        new_obj = self.folder.portal_factory._getTempFolder(self.portal_type)[
+            temp_id]
+        # object is not yet edited
+        self.assertEqual(new_obj.checkCreationFlag(), True)
 
     def check_newly_created(self):
         """Objects created programmatically should not have the creation flag set"""
-        self.assertEqual(self.obj.checkCreationFlag(), False)  # object is fully created
+        self.assertEqual(self.obj.checkCreationFlag(),
+                         False)  # object is fully created
 
     def test_edit_view(self):
         # edit should work
@@ -106,7 +110,8 @@ def test_edit_view(self):
 
     def test_base_view(self):
         # base view should work
-        response = self.publish('%s/base_view' % self.obj_path, self.basic_auth)
+        response = self.publish('%s/base_view' %
+                                self.obj_path, self.basic_auth)
         self.assertEqual(response.getStatus(), 200)  # OK
 
     def test_dynamic_view(self):
@@ -123,15 +128,17 @@ def test_local_sharing_view(self):
     if HAS_LINGUA_PLONE:
 
         def test_linguaplone_views(self):
-            response = self.publish('%s/translate_item' % self.obj_path, self.basic_auth)
+            response = self.publish('%s/translate_item' %
+                                    self.obj_path, self.basic_auth)
             self.assertEqual(response.getStatus(), 200)  # OK
-            response = self.publish('%s/manage_translations_form' % self.obj_path, self.basic_auth)
+            response = self.publish(
+                '%s/manage_translations_form' % self.obj_path, self.basic_auth)
             self.assertEqual(response.getStatus(), 200)  # OK
 
         def test_linguaplone_create_translation(self):
             # create translation creates a new object
             response = self.publish('%s/createTranslation?language=de&set_language=de'
-                                     % self.obj_path, self.basic_auth)
+                                    % self.obj_path, self.basic_auth)
             self.assertEqual(response.getStatus(), 302)  # Redirect
 
             body = response.getBody()
@@ -150,9 +157,10 @@ def test_linguaplone_create_translation(self):
     def test_additional_view(self):
         # additional views:
         for view in self.views:
-            response = self.publish('%s/%s' % (self.obj_path, view), self.basic_auth)
+            response = self.publish(
+                '%s/%s' % (self.obj_path, view), self.basic_auth)
             self.assertEqual(response.getStatus(), 200,
-                "%s: %s" % (view, response.getStatus()))  # OK
+                             "%s: %s" % (view, response.getStatus()))  # OK
 
     def test_dynamicViewContext(self):
         # register and add a testing template (it's a script)
@@ -160,7 +168,8 @@ def test_dynamicViewContext(self):
 
         ttool = self.portal.portal_types
         fti = getattr(ttool, self.portal_type)
-        view_methods = fti.getAvailableViewMethods(self.obj) + ('unittestGetTitleOf',)
+        view_methods = fti.getAvailableViewMethods(
+            self.obj) + ('unittestGetTitleOf',)
         fti.manage_changeProperties(view_methods=view_methods)
 
         self.obj.setLayout('unittestGetTitleOf')
@@ -175,4 +184,5 @@ def test_dynamicViewContext(self):
         output = response.getBody().split(',')
         self.assertEqual(len(output), 4, output)
 
-        self.assertEqual(output, ['the obj', 'the folder', 'the obj', 'the folder'])
+        self.assertEqual(
+            output, ['the obj', 'the folder', 'the obj', 'the folder'])
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 65af665..8d901b8 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -46,7 +46,8 @@ def afterSetUp(self):
         #  - Large Plone Folder
         #  - Topic
         user = self.portal.acl_users.getUserById(default_user)
-        orig_roles = self.portal.acl_users.portal_role_manager.getRolesForPrincipal(user)
+        orig_roles = self.portal.acl_users.portal_role_manager.getRolesForPrincipal(
+            user)
         self.setRoles(['Manager'])
         ttool = self.portal.portal_types
         cb_copy_data = ttool.manage_copyObjects(['Folder'])
@@ -172,10 +173,11 @@ def test_idValidation(self):
 
         # invalid ids
         ids = ['asdf2', '???', '/asdf2', ' asdf2', 'portal_workflow',
-            'portal_url']
+               'portal_url']
         for id in ids:
             request.form = {'id': id, 'fieldset': 'default'}
-            self.assertNotEquals(asdf.validate(REQUEST=request), {}, "Not catched id: %s" % id)
+            self.assertNotEquals(asdf.validate(
+                REQUEST=request), {}, "Not catched id: %s" % id)
 
         # valid ids
         ids = ['', 'abcd', 'blafasel']
@@ -305,8 +307,10 @@ def test_relateditems(self):
         self.assertTrue(field.getLayerImpl('storage') == AttributeStorage())
         self.assertEqual(field.validators, EmptyValidator)
         self.assertTrue(isinstance(field.widget, RelatedItemsWidget))
-        self.assertTrue(field.widget.allow_sorting, u'field and widget need to enable sorting')
-        self.assertTrue(field.referencesSortable, u'field and widget need to enable sorting')
+        self.assertTrue(field.widget.allow_sorting,
+                        u'field and widget need to enable sorting')
+        self.assertTrue(field.referencesSortable,
+                        u'field and widget need to enable sorting')
 
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, DisplayList))
diff --git a/Products/ATContentTypes/tests/testContentTypes.py b/Products/ATContentTypes/tests/testContentTypes.py
index eca957c..78343cc 100644
--- a/Products/ATContentTypes/tests/testContentTypes.py
+++ b/Products/ATContentTypes/tests/testContentTypes.py
@@ -7,7 +7,7 @@
 
 atct_types = ('Document', 'Event', 'File', 'Folder',
               'Image', 'Link', 'News Item',
-             )
+              )
 
 
 class TestATContentTypes(PloneTestCase):
@@ -67,9 +67,9 @@ def testEventEdit(self):
                                start_date='2003-09-18',
                                end_date='2003-09-19')
         self.assertEqual(self.folder.event.Title(), 'Foo')
-        self.assertTrue(self.folder.event.start().ISO8601() \
+        self.assertTrue(self.folder.event.start().ISO8601()
                             .startswith('2003-09-18T00:00:00'))
-        self.assertTrue(self.folder.event.end().ISO8601() \
+        self.assertTrue(self.folder.event.end().ISO8601()
                             .startswith('2003-09-19T00:00:00'))
 
     def testFileEdit(self):
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index 80d2392..c8d9ddf 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -79,8 +79,9 @@ def test_cmf_edit_failure(self):
     def test_rename_keeps_contenttype(self):
         doc = self._ATCT
         doc.setText(example_rest, mimetype="text/x-rst")
-        self.assertTrue(str(doc.getField('text').getContentType(doc)) == "text/x-rst")
-        #make sure we have _p_jar
+        self.assertTrue(
+            str(doc.getField('text').getContentType(doc)) == "text/x-rst")
+        # make sure we have _p_jar
         transaction.savepoint(optimistic=True)
 
         cur_id = 'ATCT'
@@ -97,7 +98,7 @@ def test_x_safe_html(self):
             # MTR doens't know about text/stx, and transforming
             # doubles the tags. Yuck.
             ('text/structured', '<p><p>test</p></p>\n'),
-           )
+        )
         for mimetype, expected in mimetypes:
             # scrub html is removing unallowed tags
             text = "<p>test</p><script>I'm a nasty boy<p>nested</p></script>"
@@ -207,15 +208,18 @@ def test_textField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getText',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setText',
@@ -276,24 +280,28 @@ def test_id_change_on_initial_edit(self):
         response = self.publish(edit_form_path, self.basic_auth)
         self.assertEqual(response.getStatus(), 200)  # OK
 
-        #Change the title
+        # Change the title
         temp_id = location.split('/')[-2]
         obj_title = "New Title for Object"
         new_id = "new-title-for-object"
         new_obj = self.folder.portal_factory._getTempFolder('Document')[new_id]
         #new_obj = getattr(self.folder.aq_explicit, temp_id)
         new_obj_path = '/%s' % new_obj.absolute_url(1)
-        self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
+        # object is not yet edited
+        self.assertEqual(new_obj.checkCreationFlag(), True)
 
         from plone.protect import auto
         auto.CSRF_DISABLED = True
-        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % (new_obj_path, obj_title, auth), self.basic_auth)  # Edit object
+        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' %
+                                (new_obj_path, obj_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
         new_obj = self.folder[new_id]
         self.assertEqual(new_obj.getId(), new_id)  # does id match
-        self.assertEqual(new_obj.checkCreationFlag(), False)  # object is fully created
+        self.assertEqual(new_obj.checkCreationFlag(),
+                         False)  # object is fully created
         new_title = "Second Title"
-        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % ('/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
+        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % (
+            '/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
         self.assertEqual(new_obj.getId(), new_id)  # id shouldn't have changed
         auto.CSRF_DISABLED = False
diff --git a/Products/ATContentTypes/tests/test_atevent.py b/Products/ATContentTypes/tests/test_atevent.py
index 4658882..3e6c24c 100644
--- a/Products/ATContentTypes/tests/test_atevent.py
+++ b/Products/ATContentTypes/tests/test_atevent.py
@@ -147,15 +147,18 @@ def test_locationField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getLocation',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setLocation',
@@ -187,13 +190,16 @@ def test_subjectField(self):
         field = dummy.getField('subject')
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == (), 'Value is %s' % str(str(field.default)))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == (), 'Value is %s' %
+                        str(str(field.default)))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 1,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 1, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 1, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'Subject',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setSubject',
@@ -223,15 +229,18 @@ def test_eventUrlField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'event_url',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setEventUrl',
@@ -264,16 +273,20 @@ def test_startDateField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
-        self.assertTrue(field.default == None, 'Value is %s' % str(field.default))
-        self.assertTrue(field.default_method == DateTime, 'Value is %s' % str(field.default_method))
-        self.assertTrue(field.searchable == False, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == None, 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.default_method == DateTime,
+                        'Value is %s' % str(field.default_method))
+        self.assertTrue(field.searchable == False,
+                        'Value is %s' % field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'start',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setStartDate',
@@ -307,16 +320,20 @@ def test_endDateField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
-        self.assertTrue(field.default == None, 'Value is %s' % str(field.default))
-        self.assertTrue(field.default_method == DateTime, 'Value is %s' % str(field.default_method))
-        self.assertTrue(field.searchable == False, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == None, 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.default_method == DateTime,
+                        'Value is %s' % str(field.default_method))
+        self.assertTrue(field.searchable == False,
+                        'Value is %s' % field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'end',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setEndDate',
@@ -350,15 +367,18 @@ def test_contactNameField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'contact_name',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setContactName',
@@ -392,15 +412,18 @@ def test_contactEmailField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'contact_email',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setContactEmail',
@@ -434,15 +457,18 @@ def test_contactPhoneField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'contact_phone',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setContactPhone',
@@ -475,15 +501,18 @@ def test_attendeesField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == (), 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == (), 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getAttendees',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setAttendees',
@@ -515,15 +544,18 @@ def test_textField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getText',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setText',
diff --git a/Products/ATContentTypes/tests/test_atfile.py b/Products/ATContentTypes/tests/test_atfile.py
index 6243603..60cd146 100644
--- a/Products/ATContentTypes/tests/test_atfile.py
+++ b/Products/ATContentTypes/tests/test_atfile.py
@@ -156,14 +156,16 @@ def test_fileField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == True, 'Value is %s' % field.searchable)
+        self.assertTrue(field.searchable == True,
+                        'Value is %s' % field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getFile',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setFile',
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 7fd273b..176db46 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -21,6 +21,7 @@ def editATCT(obj):
 class FolderTestMixin:
     """Contains some general tests for both ATFolder and ATBTreeFolder
     """
+
     def test_implementsConstrainTypes(self):
         self.assertTrue(ISelectableConstrainTypes.providedBy(self._ATCT))
         self.assertTrue(verifyObject(ISelectableConstrainTypes, self._ATCT))
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index e970294..7a04b8c 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -37,7 +37,8 @@ def loadImage(name, size=0):
 TEST_GIF = loadImage('test.gif')
 TEST_GIF_LEN = len(TEST_GIF)
 TEST_DIV_ERROR = loadImage('divisionerror.jpg')
-TEST_JPEG_FILE = open(os.path.join(PACKAGE_HOME, 'input', 'canoneye.jpg'), 'rb')
+TEST_JPEG_FILE = open(os.path.join(
+    PACKAGE_HOME, 'input', 'canoneye.jpg'), 'rb')
 # XXX replace it by an image with exif informations but w/o
 # the nasty error ...
 TEST_JPEG = loadImage('canoneye.jpg')
@@ -56,7 +57,8 @@ class TestIDFromTitle(FunctionalTestCase):
     def afterSetUp(self):
         self.userId = 'fred'
         self.password = 'secret'
-        self.portal.acl_users.userFolderAddUser(self.userId, self.password, ['Manager'], [])
+        self.portal.acl_users.userFolderAddUser(
+            self.userId, self.password, ['Manager'], [])
         commit()
         self.browser = Browser(self.layer['app'])
         self._log_in()
@@ -71,7 +73,8 @@ def _log_in(self):
 
     def _make_image(self, title, filename='canoneye.jpg'):
         """Add a new Image at the root of the Plone site."""
-        self.browser.open(self.portal.absolute_url() + '/createObject?type_name=Image')
+        self.browser.open(self.portal.absolute_url() +
+                          '/createObject?type_name=Image')
         self.browser.getControl('Title').value = title
         image = self.browser.getControl(name='image_file')
         image.filename = filename
@@ -234,15 +237,18 @@ def test_imageField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
-        self.assertTrue(field.default == None, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 0, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == None, 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 0, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getImage',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setImage',
diff --git a/Products/ATContentTypes/tests/test_atlink.py b/Products/ATContentTypes/tests/test_atlink.py
index 7456191..cf19e68 100644
--- a/Products/ATContentTypes/tests/test_atlink.py
+++ b/Products/ATContentTypes/tests/test_atlink.py
@@ -52,12 +52,12 @@ def testLinkSanitizesOutput(self):
         url = 'javascript:alert("test")'
         obj.setRemoteUrl(url)
         self.assertEqual(obj.getRemoteUrl(),
-                             'javascript:alert%28%22test%22%29')
+                         'javascript:alert%28%22test%22%29')
         # Keep question marks and ampersands intact, please.
         url = 'http://something.sane/f.php?p1=value&p2=value'
         obj.setRemoteUrl(url)
         self.assertEqual(obj.getRemoteUrl(),
-                             'http://something.sane/f.php?p1=value&p2=value')
+                         'http://something.sane/f.php?p1=value&p2=value')
         # already quoted values should also remain intact
         url = 'http://something.sane/except with spaces in it'
         expected = 'http://something.sane/except%20with%20spaces%20in%20it'
@@ -90,15 +90,18 @@ def test_remoteUrlField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
-        self.assertTrue(field.default == 'http://', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == 'http://',
+                        'Value is %s' % str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getRemoteUrl',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setRemoteUrl',
diff --git a/Products/ATContentTypes/tests/test_atnewsitem.py b/Products/ATContentTypes/tests/test_atnewsitem.py
index 351a129..ac33f01 100644
--- a/Products/ATContentTypes/tests/test_atnewsitem.py
+++ b/Products/ATContentTypes/tests/test_atnewsitem.py
@@ -73,15 +73,18 @@ def test_textField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == '', 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 1, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == '', 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 1, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getText',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setText',
diff --git a/Products/ATContentTypes/tests/test_attopic.py b/Products/ATContentTypes/tests/test_attopic.py
index d244948..8d3d214 100644
--- a/Products/ATContentTypes/tests/test_attopic.py
+++ b/Products/ATContentTypes/tests/test_attopic.py
@@ -29,25 +29,25 @@
 FIELDS = ('start', 'end', 'Creator')
 
 CRITERIA_SETUP = {'Integer Criterion':  # Meta Type
-                        ('portal_type',  # Field
-                         '10 10',  # Value
-                         'min:max'),  # Direction
+                  ('portal_type',  # Field
+                   '10 10',  # Value
+                   'min:max'),  # Direction
                   'String Criterion':
-                        ('SearchableText',
-                         'portal'),
+                  ('SearchableText',
+                   'portal'),
                   'Friendly Date Criterion':
-                        ('start',
-                         '10',
-                         'within_day',  # Operation
-                         'ahead'),  # DateRange
+                  ('start',
+                   '10',
+                   'within_day',  # Operation
+                   'ahead'),  # DateRange
                   'List Criterion':
-                        ('Subject',
-                         "value1\nportal\ntest",
-                         'OR'),  # Operator
+                  ('Subject',
+                   "value1\nportal\ntest",
+                   'OR'),  # Operator
                   'Sort Criterion':
-                        ('getId',
-                         False),  # Reversed
-                }
+                  ('getId',
+                   False),  # Reversed
+                  }
 
 CRIT_MAP = {'Integer Criterion': 'ATSimpleIntCriterion',
             'String Criterion': 'ATSimpleStringCriterion',
@@ -63,8 +63,8 @@ def editATCT(obj):
     obj.setAcquireCriteria(ACQUIRE)
     obj.setLimitNumber(LIMIT)
     obj.setItemCount(COUNT)
-    #obj.setCustomView(CUSTOM)
-    #obj.setCustomViewFields(FIELDS)
+    # obj.setCustomView(CUSTOM)
+    # obj.setCustomViewFields(FIELDS)
     for meta in CRITERIA_SETUP.keys():
         AT_META = CRIT_MAP[meta]
         CRIT_FIELD = CRITERIA_SETUP[meta][0]
@@ -103,7 +103,8 @@ def convert_old_catalog_usage(criteria_items):
             extra_param = ':'.join(usage[1:]).strip()
         else:
             extra_type = criteria_items[1][0].replace('%s_' % field, '')
-        criteria_items = [(field, {'query': query_val, extra_type: extra_param})]
+        criteria_items = [
+            (field, {'query': query_val, extra_type: extra_param})]
     return tuple(criteria_items)
 
 
@@ -204,7 +205,7 @@ def test_nested(self):
 
         subtopic.setAcquireCriteria(True)
 
-        #Ensure an empty subtopic uses it's parents' queries
+        # Ensure an empty subtopic uses it's parents' queries
         self.assertEqual(subtopic.buildQuery(), topic.buildQuery())
 
         subtopic.addCriterion('baz', 'ATSimpleStringCriterion')
@@ -254,7 +255,8 @@ def test_nested_friendly_date_criteria(self):
         # fetch the query
         query = subtopic.buildQuery()
         self.assertTrue(query['end'])
-        # query shouldn't have a start key https://dev.plone.org/plone/ticket/8827
+        # query shouldn't have a start key
+        # https://dev.plone.org/plone/ticket/8827
         self.assertFalse('start' in query)
 
     def test_nested_friendly_date_criteria_reverse(self):
@@ -312,7 +314,7 @@ def test_nested_friendly_date_criteria_with_a_start(self):
         date_crit.setValue(31)  # 1 month
         date_crit.setDateRange('-')  # the opposite is marked '+'
         date_crit.setOperation('less')  # the opposite is marked 'more'
-        #not sur about this one
+        # not sur about this one
         subtopic.setAcquireCriteria(True)
         # fetch the query
         query = subtopic.buildQuery()
@@ -350,22 +352,25 @@ def test_queryCatalogBatchingWithLimit(self):
         num_items = len(topic.queryCatalog())
         # We better have some folders
         self.assertTrue(num_items >= 6)
-        self.assertEqual(topic.queryCatalog(batch=True).sequence_length, num_items)
+        self.assertEqual(topic.queryCatalog(
+            batch=True).sequence_length, num_items)
         # Set some limits
         topic.setLimitNumber(True)
         topic.setItemCount(2)
-        self.assertEqual(topic.queryCatalog(batch=True).sequence_length, num_items)
+        self.assertEqual(topic.queryCatalog(
+            batch=True).sequence_length, num_items)
 
     def test_queryCatalogBrains(self):
-        #Ensure that we feturn full objects when requested
+        # Ensure that we feturn full objects when requested
         topic = self._ATCT
         crit = topic.addCriterion('portal_type', 'ATSimpleStringCriterion')
         crit.setValue('Folder')
-        self.assertTrue(isinstance(topic.queryCatalog(full_objects=True)[0], ATFolder))
+        self.assertTrue(isinstance(
+            topic.queryCatalog(full_objects=True)[0], ATFolder))
         self.assertFalse(isinstance(topic.queryCatalog()[0], ATFolder))
 
     def test_queryCatalogLimitChangesBatchSize(self):
-        #Ensure that a set limit overrides batch size
+        # Ensure that a set limit overrides batch size
         topic = self._ATCT
         topic.setLimitNumber(True)
         topic.setItemCount(10)
@@ -379,29 +384,31 @@ def test_queryCatalogLimitChangesBatchSize(self):
         self.assertEqual(len(topic.queryCatalog(batch=True)), 10)
 
     def test_queryCatalogBSizeChangesBatchSize(self):
-        #Ensure that a set limit overrides batch size
+        # Ensure that a set limit overrides batch size
         topic = self._ATCT
         crit = topic.addCriterion('portal_type', 'ATSimpleStringCriterion')
         crit.setValue('Folder')
         # Add a bunch of folders.
         for i in range(1, 20):
             self.folder.invokeFactory('Folder', str(i))
-        self.assertTrue(isinstance(topic.queryCatalog(batch=True, b_size=5), Batch))
+        self.assertTrue(isinstance(
+            topic.queryCatalog(batch=True, b_size=5), Batch))
         # Check the batch length
         self.assertEqual(len(topic.queryCatalog(batch=True, b_size=5)), 5)
 
     def test_queryCatalogAddCriteria(self):
-        #Ensure that we can add params
+        # Ensure that we can add params
         topic = self._ATCT
         crit = topic.addCriterion('portal_type', 'ATSimpleStringCriterion')
         crit.setValue('Folder')
         # Add a bunch of folders.
         for i in range(1, 20):
             self.folder.invokeFactory('Folder', str(i))
-        self.assertEqual(len(topic.queryCatalog(sort_on='Date', sort_limit=5)), 5)
+        self.assertEqual(len(topic.queryCatalog(
+            sort_on='Date', sort_limit=5)), 5)
 
     def test_queryCatalogOverrideCriteria(self):
-        #Ensure that we can override params
+        # Ensure that we can override params
         topic = self._ATCT
         crit = topic.addCriterion('portal_type', 'ATSimpleStringCriterion')
         crit.setValue('Document')
@@ -432,10 +439,11 @@ def test_sort_criterion_does_not_affect_available_fields(self):
         crit = topic.addCriterion('created', 'ATFriendlyDateCriteria')
         # It should no longer be available
         self.assertFalse([i for i in topic.listAvailableFields()
-                     if i[0] == 'created'])
+                          if i[0] == 'created'])
 
     def test_album_images_collection(self):
-        # album view of a collection of Image objects display images in 'images' section
+        # album view of a collection of Image objects display images in
+        # 'images' section
         portal = self.portal
         self.loginAsPortalOwner()
         portal.invokeFactory('Image', 'image1')
@@ -467,15 +475,18 @@ def test_acquireCriteriaField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == False, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 0, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == False, 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 0, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == field_vocab,
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getAcquireCriteria',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setAcquireCriteria',
@@ -509,15 +520,18 @@ def test_limitNumberField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == False, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 0, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == False, 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 0, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == field_vocab,
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getLimitNumber',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setLimitNumber',
@@ -551,14 +565,16 @@ def test_itemCountField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertTrue(field.default == 0, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 0, 'Value is %s' % field.searchable)
+        self.assertTrue(field.searchable == 0, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getItemCount',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setItemCount',
@@ -592,15 +608,18 @@ def test_customViewField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == False, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 0, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == False, 'Value is %s' %
+                        str(field.default))
+        self.assertTrue(field.searchable == 0, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == 0,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getCustomView',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setCustomView',
@@ -634,15 +653,18 @@ def test_customViewFieldsField(self):
 
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
-        self.assertTrue(field.default == ('Title',), 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == 0, 'Value is %s' % field.searchable)
+        self.assertTrue(field.default == ('Title',),
+                        'Value is %s' % str(field.default))
+        self.assertTrue(field.searchable == 0, 'Value is %s' %
+                        field.searchable)
         self.assertTrue(field.vocabulary == 'listMetaDataFields',
                         'Value is %s' % str(field.vocabulary))
         self.assertTrue(field.enforceVocabulary == True,
                         'Value is %s' % field.enforceVocabulary)
         self.assertTrue(field.multiValued == 0,
                         'Value is %s' % field.multiValued)
-        self.assertTrue(field.isMetadata == 0, 'Value is %s' % field.isMetadata)
+        self.assertTrue(field.isMetadata == 0, 'Value is %s' %
+                        field.isMetadata)
         self.assertTrue(field.accessor == 'getCustomViewFields',
                         'Value is %s' % field.accessor)
         self.assertTrue(field.mutator == 'setCustomViewFields',
diff --git a/Products/ATContentTypes/tests/test_base_profile.py b/Products/ATContentTypes/tests/test_base_profile.py
index de63c42..657f809 100644
--- a/Products/ATContentTypes/tests/test_base_profile.py
+++ b/Products/ATContentTypes/tests/test_base_profile.py
@@ -11,7 +11,8 @@ def afterSetUp(self):
         qi = self.portal.portal_quickinstaller
         qi.uninstallProducts(['ATContentTypes'])
         portal_setup = self.portal.portal_setup
-        portal_setup.runAllImportStepsFromProfile('profile-Products.ATContentTypes:base')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-Products.ATContentTypes:base')
 
     def test_attypes_not_installed(self):
         tt = getToolByName(self.portal, 'portal_types')
diff --git a/Products/ATContentTypes/tests/test_browserdefaultmixin.py b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
index 234d8f3..706cac4 100644
--- a/Products/ATContentTypes/tests/test_browserdefaultmixin.py
+++ b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
@@ -13,6 +13,8 @@
 RE_REMOVE_AUTHENTICATOR = re.compile(r'_authenticator=.*\"')
 
 # XXX: This should probably move to the new CMFDynamicViewFTI
+
+
 class TestBrowserDefaultMixin(atcttestcase.ATCTSiteTestCase):
     folder_type = 'Folder'
     image_type = 'Image'
@@ -98,14 +100,16 @@ def test_setDefaultPageUpdatesCatalog(self):
         cat = self.portal.portal_catalog
         self.af.invokeFactory('Document', 'ad')
         self.af.invokeFactory('Document', 'other')
-        self.assertEqual(len(cat(getId=['ad', 'other'], is_default_page=True)), 0)
+        self.assertEqual(
+            len(cat(getId=['ad', 'other'], is_default_page=True)), 0)
         self.af.setDefaultPage('ad')
         self.assertEqual(len(cat(getId='ad', is_default_page=True)), 1)
         self.af.setDefaultPage('other')
         self.assertEqual(len(cat(getId='other', is_default_page=True)), 1)
         self.assertEqual(len(cat(getId='ad', is_default_page=True)), 0)
         self.af.setDefaultPage(None)
-        self.assertEqual(len(cat(getId=['ad', 'other'], is_default_page=True)), 0)
+        self.assertEqual(
+            len(cat(getId=['ad', 'other'], is_default_page=True)), 0)
 
     def test_setLayoutUnsetsDefaultPage(self):
         layout = 'atct_album_view'
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index 0db6e33..17be0aa 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -22,7 +22,7 @@ def test_wfmapping(self):
             'Link': default,
             'News Item': default,
             'Collection': default,
-            }
+        }
 
         for pt, wf in mapping.items():
             pwf = self.portal.portal_workflow.getChainFor(pt)
@@ -33,7 +33,8 @@ def test_striphtmlbug(self):
         self.folder.invokeFactory('Document', 'document')
         d = getattr(self.folder, 'document')
         d.setTitle("HTML end tags start with </ and end with >")
-        self.assertEqual(d.Title(), "HTML end tags start with </ and end with >")
+        self.assertEqual(
+            d.Title(), "HTML end tags start with </ and end with >")
 
     def test_validation_layer_from_id_field_from_base_schema_was_initialized(self):
         field = ATContentTypeSchema['id']
diff --git a/Products/ATContentTypes/tests/test_calendar.py b/Products/ATContentTypes/tests/test_calendar.py
index 22c5449..93d3912 100644
--- a/Products/ATContentTypes/tests/test_calendar.py
+++ b/Products/ATContentTypes/tests/test_calendar.py
@@ -17,6 +17,7 @@ def makeResponse(request):
     output = []
 
     class Response:
+
         def setHeader(self, header, value):
             headers[header] = value
 
@@ -33,13 +34,13 @@ def afterSetUp(self):
         super(EventCalendarTests, self).afterSetUp()
         folder = self.folder
         event1 = folder[folder.invokeFactory('Event',
-            id='ploneconf2007', title='Plone Conf 2007',
-            startDate='2007/10/10', endDate='2007/10/12', location='Naples',
-            eventUrl='http://plone.org/events/conferences/2007-naples')]
+                                             id='ploneconf2007', title='Plone Conf 2007',
+                                             startDate='2007/10/10', endDate='2007/10/12', location='Naples',
+                                             eventUrl='http://plone.org/events/conferences/2007-naples')]
         event2 = folder[folder.invokeFactory('Event',
-            id='ploneconf2008', title='Plone Conf 2008',
-            startDate='2008/10/08', endDate='2008/10/10', location='DC',
-            eventUrl='http://plone.org/events/conferences/2008-washington-dc')]
+                                             id='ploneconf2008', title='Plone Conf 2008',
+                                             startDate='2008/10/08', endDate='2008/10/10', location='DC',
+                                             eventUrl='http://plone.org/events/conferences/2008-washington-dc')]
         classImplements(TestRequest, IAttributeAnnotatable)
 
     def testCalendarView(self):
@@ -47,7 +48,7 @@ def testCalendarView(self):
         view.update()
         self.assertEqual(len(view.events), 2)
         self.assertEqual(sorted([e.Title for e in view.events]),
-            ['Plone Conf 2007', 'Plone Conf 2008'])
+                         ['Plone Conf 2007', 'Plone Conf 2008'])
 
     def testCalendarViewForTopic(self):
         self.setRoles(('Manager',))
@@ -59,14 +60,14 @@ def testCalendarViewForTopic(self):
         view.update()
         self.assertEqual(len(view.events), 1)
         self.assertEqual(sorted([e.Title for e in view.events]),
-            ['Plone Conf 2008'])
+                         ['Plone Conf 2008'])
         folder[folder.invokeFactory('Event',
-            id='inaug09', title='Inauguration Day 2009',
-            startDate='2009/01/20', endDate='2009/01/20', location='DC')]
+                                    id='inaug09', title='Inauguration Day 2009',
+                                    startDate='2009/01/20', endDate='2009/01/20', location='DC')]
         view.update()
         self.assertEqual(len(view.events), 2)
         self.assertEqual(sorted([e.Title for e in view.events]),
-            ['Inauguration Day 2009', 'Plone Conf 2008'])
+                         ['Inauguration Day 2009', 'Plone Conf 2008'])
 
     def testDuplicateQueryParameters(self):
         self.setRoles(('Manager',))
@@ -79,18 +80,19 @@ def testDuplicateQueryParameters(self):
         query = topic.buildQuery()
         self.assertEqual(len(query), 2)
         self.assertEqual(query['portal_type'], 'Event')
-        self.assertEqual(query['object_provides'], ICalendarSupport.__identifier__)
+        self.assertEqual(query['object_provides'],
+                         ICalendarSupport.__identifier__)
         view = getMultiAdapter((topic, TestRequest()), name='ics_view')
         view.update()
         self.assertEqual(len(view.events), 2)
         self.assertEqual(sorted([e.Title for e in view.events]),
-            ['Plone Conf 2007', 'Plone Conf 2008'])
+                         ['Plone Conf 2007', 'Plone Conf 2008'])
 
     def checkOrder(self, text, *order):
         for item in order:
             position = text.find(item)
             self.assertTrue(position >= 0,
-                'menu item "%s" missing or out of order' % item)
+                            'menu item "%s" missing or out of order' % item)
             text = text[position:]
 
     def testRendering(self):
@@ -100,17 +102,17 @@ def testRendering(self):
         self.assertEqual(len(headers), 2)
         self.assertEqual(headers['Content-Type'], 'text/calendar')
         self.checkOrder(''.join(output),
-            'BEGIN:VCALENDAR',
-            'BEGIN:VEVENT',
-            'SUMMARY:Plone Conf 2007',
-            'LOCATION:Naples',
-            'URL:http://plone.org/events/conferences/2007-naples',
-            'END:VEVENT',
-            'BEGIN:VEVENT',
-            'SUMMARY:Plone Conf 2008',
-            'LOCATION:DC',
-            'END:VEVENT',
-            'END:VCALENDAR')
+                        'BEGIN:VCALENDAR',
+                        'BEGIN:VEVENT',
+                        'SUMMARY:Plone Conf 2007',
+                        'LOCATION:Naples',
+                        'URL:http://plone.org/events/conferences/2007-naples',
+                        'END:VEVENT',
+                        'BEGIN:VEVENT',
+                        'SUMMARY:Plone Conf 2008',
+                        'LOCATION:DC',
+                        'END:VEVENT',
+                        'END:VCALENDAR')
 
     def testCalendarInfo(self):
         self.folder.processForm(values={'title': 'Foo', 'description': 'Bar'})
@@ -118,36 +120,36 @@ def testCalendarInfo(self):
         view = getMultiAdapter((self.folder, request), name='ics_view')
         view.render()
         self.checkOrder(''.join(output),
-            'BEGIN:VCALENDAR',
-            'X-WR-CALNAME:Foo',
-            'X-WR-CALDESC:Bar',
-            'BEGIN:VEVENT',
-            'BEGIN:VEVENT',
-            'END:VCALENDAR')
+                        'BEGIN:VCALENDAR',
+                        'X-WR-CALNAME:Foo',
+                        'X-WR-CALDESC:Bar',
+                        'BEGIN:VEVENT',
+                        'BEGIN:VEVENT',
+                        'END:VCALENDAR')
         # another folder should have another name, even though the set
         # of events might be the same...
         headers, output, request = makeResponse(TestRequest())
         view = getMultiAdapter((self.portal, request), name='ics_view')
         view.render()
         self.checkOrder(''.join(output),
-            'BEGIN:VCALENDAR',
-            'X-WR-CALNAME:Plone site',
-            'X-WR-CALDESC:',
-            'BEGIN:VEVENT',
-            'BEGIN:VEVENT',
-            'END:VCALENDAR')
+                        'BEGIN:VCALENDAR',
+                        'X-WR-CALNAME:Plone site',
+                        'X-WR-CALDESC:',
+                        'BEGIN:VEVENT',
+                        'BEGIN:VEVENT',
+                        'END:VCALENDAR')
         # changing the title should be immediately reflected...
         self.folder.processForm(values={'title': 'Föö!!'})
         headers, output, request = makeResponse(TestRequest())
         view = getMultiAdapter((self.folder, request), name='ics_view')
         view.render()
         self.checkOrder(''.join(output),
-            'BEGIN:VCALENDAR',
-            'X-WR-CALNAME:Föö!!',
-            'X-WR-CALDESC:Bar',
-            'BEGIN:VEVENT',
-            'BEGIN:VEVENT',
-            'END:VCALENDAR')
+                        'BEGIN:VCALENDAR',
+                        'X-WR-CALNAME:Föö!!',
+                        'X-WR-CALDESC:Bar',
+                        'BEGIN:VEVENT',
+                        'BEGIN:VEVENT',
+                        'END:VCALENDAR')
 
     def testRenderingForTopic(self):
         self.setRoles(('Manager',))
@@ -161,13 +163,13 @@ def testRenderingForTopic(self):
         self.assertEqual(len(headers), 2)
         self.assertEqual(headers['Content-Type'], 'text/calendar')
         self.checkOrder(''.join(output),
-            'BEGIN:VCALENDAR',
-            'BEGIN:VEVENT',
-            'SUMMARY:Plone Conf 2008',
-            'LOCATION:DC',
-            'URL:http://plone.org/events/conferences/2008-washington-dc',
-            'END:VEVENT',
-            'END:VCALENDAR')
+                        'BEGIN:VCALENDAR',
+                        'BEGIN:VEVENT',
+                        'SUMMARY:Plone Conf 2008',
+                        'LOCATION:DC',
+                        'URL:http://plone.org/events/conferences/2008-washington-dc',
+                        'END:VEVENT',
+                        'END:VCALENDAR')
         lines = ''.join(output).splitlines()
         self.assertEqual(len([l for l in lines if l == 'BEGIN:VEVENT']), 1)
 
@@ -188,15 +190,16 @@ def testCacheKey(self):
         key3 = cachekey(None, view)
         self.assertEqual(key1, key3)
         # however, if one of the object gets changed, the key should as well
-        self.folder.ploneconf2007.processForm(values={'location': 'Naples, Italy'})
+        self.folder.ploneconf2007.processForm(
+            values={'location': 'Naples, Italy'})
         view.update()
         key4 = cachekey(None, view)
         self.assertNotEqual(key1, key4)
         # the same goes if another one is added
         self.folder[self.folder.invokeFactory('Event',
-            id='ploneconf2009', title='Plone Conf 2009',
-            startDate='2008/10/28', endDate='2008/10/30', location='Budapest',
-            eventUrl='http://plone.org/events/conferences/2009')]
+                                              id='ploneconf2009', title='Plone Conf 2009',
+                                              startDate='2008/10/28', endDate='2008/10/30', location='Budapest',
+                                              eventUrl='http://plone.org/events/conferences/2009')]
         view.update()
         key5 = cachekey(None, view)
         self.assertNotEqual(key1, key5)
diff --git a/Products/ATContentTypes/tests/test_constraintypes.py b/Products/ATContentTypes/tests/test_constraintypes.py
index 1272e59..25781f0 100644
--- a/Products/ATContentTypes/tests/test_constraintypes.py
+++ b/Products/ATContentTypes/tests/test_constraintypes.py
@@ -39,9 +39,9 @@ def test_enabled(self):
         self.af.setImmediatelyAddableTypes(['Folder'])
 
         self.assertEqual(self.af.getLocallyAllowedTypes(),
-                                ('Folder', 'Image',))
+                         ('Folder', 'Image',))
         self.assertEqual(self.af.getImmediatelyAddableTypes(),
-                                ('Folder',))
+                         ('Folder',))
 
         self.assertRaises(ValueError, self.af.invokeFactory, 'Document', 'a')
         try:
@@ -57,9 +57,9 @@ def test_disabled(self):
         # We can still set and persist, even though it is disabled - must
         # remember!
         self.assertEqual(self.af.getRawLocallyAllowedTypes(),
-                                ('Folder', 'Image',))
+                         ('Folder', 'Image',))
         self.assertEqual(self.af.getRawImmediatelyAddableTypes(),
-                                ('Folder',))
+                         ('Folder',))
 
         try:
             self.af.invokeFactory('Document', 'whatever', title='life')
@@ -88,9 +88,9 @@ def test_acquireFromHomogenousParent(self):
         inner.setImmediatelyAddableTypes(['Document'])
 
         self.assertEqual(inner.getRawLocallyAllowedTypes(),
-                                ('Document', 'Event',))
+                         ('Document', 'Event',))
         self.assertEqual(inner.getRawImmediatelyAddableTypes(),
-                                ('Document',))
+                         ('Document',))
 
         self.assertRaises(ValueError, inner.invokeFactory, 'Event', 'a')
         try:
@@ -100,16 +100,17 @@ def test_acquireFromHomogenousParent(self):
 
         # Make sure immediately-addable are inherited
         self.assertEqual(inner.getImmediatelyAddableTypes(),
-                                self.af.getImmediatelyAddableTypes())
+                         self.af.getImmediatelyAddableTypes())
 
         # Create a new unprivileged user who can only access the inner folder
-        self.portal.acl_users._doAddUser('restricted', 'secret', ['Member'], [])
+        self.portal.acl_users._doAddUser(
+            'restricted', 'secret', ['Member'], [])
         inner.manage_addLocalRoles('restricted', ('Manager',))
         # Login the new user
         user = self.portal.acl_users.getUserById('restricted')
         newSecurityManager(None, user)
         self.assertEqual(inner.getLocallyAllowedTypes(),
-                        ('Folder', 'Image'))
+                         ('Folder', 'Image'))
 
     def test_acquireFromHetereogenousParent(self):
 
@@ -137,9 +138,9 @@ def test_acquireFromHetereogenousParent(self):
         inner.setImmediatelyAddableTypes(['Document'])
 
         self.assertEqual(inner.getRawLocallyAllowedTypes(),
-                                ('Document', 'Event',))
+                         ('Document', 'Event',))
         self.assertEqual(inner.getRawImmediatelyAddableTypes(),
-                                ('Document',))
+                         ('Document',))
 
         # Fail - we didn't acquire this, really, since we can't acquire
         # from parent folder of different type
@@ -148,13 +149,14 @@ def test_acquireFromHetereogenousParent(self):
 
         # Make sure immediately-addable are set to default
         self.assertEqual(inner.getImmediatelyAddableTypes(),
-                                inner.getLocallyAllowedTypes())
+                         inner.getLocallyAllowedTypes())
 
     def test_acquireFromCustomHetereogenousParent(self):
         self.loginAsPortalOwner()
         cp = self.portal.portal_types.manage_copyObjects(['Folder'])
         self.portal.portal_types.manage_pasteObjects(cp)
-        self.portal.portal_types.manage_renameObject('copy_of_Folder', 'Folder2')
+        self.portal.portal_types.manage_renameObject(
+            'copy_of_Folder', 'Folder2')
 
         # Let folder use a restricted set of types
         self.portal.portal_types.Folder.filter_content_types = 1
@@ -176,9 +178,10 @@ def test_acquireFromCustomHetereogenousParent(self):
         folder2.setConstrainTypesMode(constraintypes.ACQUIRE)
 
         # News item is not in addable types because it is globally forbidden in Folder2 type
-        # and Folder is not in addable types because it is locally forbidden in folder2 parent
+        # and Folder is not in addable types because it is locally forbidden in
+        # folder2 parent
         self.assertEqual([fti.getId() for fti in folder2.allowedContentTypes()],
-                             ['Image'])
+                         ['Image'])
         self.assertEqual(folder2.getImmediatelyAddableTypes(), ['Image'])
 
 tests.append(TestConstrainTypes)
diff --git a/Products/ATContentTypes/tests/test_content_profile.py b/Products/ATContentTypes/tests/test_content_profile.py
index eed5ab6..d32379d 100644
--- a/Products/ATContentTypes/tests/test_content_profile.py
+++ b/Products/ATContentTypes/tests/test_content_profile.py
@@ -7,7 +7,8 @@ class TestContentProfile(PloneTestCase):
 
     def afterSetUp(self):
         portal_setup = self.portal.portal_setup
-        portal_setup.runAllImportStepsFromProfile('profile-Products.ATContentTypes:content')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-Products.ATContentTypes:content')
 
     def testPortalContentLanguage(self):
         from zope.component import provideUtility
diff --git a/Products/ATContentTypes/tests/test_controlpanel.py b/Products/ATContentTypes/tests/test_controlpanel.py
index 3e6d93d..b7b138a 100644
--- a/Products/ATContentTypes/tests/test_controlpanel.py
+++ b/Products/ATContentTypes/tests/test_controlpanel.py
@@ -12,5 +12,5 @@ def afterSetUp(self):
     def testDefaultConfiglets(self):
         for title in self.configlets:
             self.assertTrue(title in [a.getAction(self)['id']
-                            for a in self.controlpanel.listActions()],
+                                      for a in self.controlpanel.listActions()],
                             "Missing configlet with id '%s'" % title)
diff --git a/Products/ATContentTypes/tests/test_criteria.py b/Products/ATContentTypes/tests/test_criteria.py
index 285e6c0..f550745 100644
--- a/Products/ATContentTypes/tests/test_criteria.py
+++ b/Products/ATContentTypes/tests/test_criteria.py
@@ -133,11 +133,11 @@ def test_LessThanPast(self):
         query = items[0][1]
         field = items[0][0]
         self.assertEqual(field, 'created')
-        #range should start in past at the beginning of the day
+        # range should start in past at the beginning of the day
         self.assertEqual(query['query'][0], expected_begin)
         # range should end today
         self.assertEqual(query['query'][1].earliestTime(),
-                                                    DateTime().earliestTime())
+                         DateTime().earliestTime())
         self.assertEqual(query['range'], 'min:max')
 
     def test_LessThanFuture(self):
@@ -152,11 +152,11 @@ def test_LessThanFuture(self):
         items = self.dummy.getCriteriaItems()
         self.assertEqual(len(items), 1)
         query = items[0][1]
-        #Range should end on future date at the end of the day
+        # Range should end on future date at the end of the day
         self.assertEqual(query['query'][1], expected_end)
-        #Range should start today
+        # Range should start today
         self.assertEqual(query['query'][0].earliestTime(),
-                                                    DateTime().earliestTime())
+                         DateTime().earliestTime())
         self.assertEqual(query['range'], 'min:max')
 
     def test_MoreThanPast(self):
@@ -352,7 +352,7 @@ class TestATSelectionCriterion(CriteriaTest):
     meta_type = 'ATSelectionCriterion'
     portal_type = 'ATSelectionCriterion'
 
-    #Same as list criterion but without operator and with special vocabulary
+    # Same as list criterion but without operator and with special vocabulary
     def test_selection_query(self):
         self.dummy.Schema()['field'].set(self.dummy, 'Subject')
         self.dummy.setValue(('1', '2', '3'))
@@ -366,12 +366,12 @@ def test_selection_query(self):
         self.assertEqual(query['operator'], 'and')
 
     def test_vocabulary(self):
-        #Should return some ids
+        # Should return some ids
         self.dummy.Schema()['field'].set(self.dummy, 'getId')
         self.assertTrue(self.dummy.getCurrentValues())
 
     def test_vocabulary_sorted(self):
-        #Should return sorted ids
+        # Should return sorted ids
         self.dummy.Schema()['field'].set(self.dummy, 'getId')
         orig_vocab = [a.lower() for a in list(self.dummy.getCurrentValues())]
         sorted_vocab = orig_vocab[:]
@@ -410,7 +410,7 @@ class TestATReferenceCriterion(CriteriaTest):
     meta_type = 'ATReferenceCriterion'
     portal_type = 'ATReferenceCriterion'
 
-    #Same as list criterion but without operator and with special vocabulary
+    # Same as list criterion but without operator and with special vocabulary
     def test_reference_query(self):
         self.dummy.Schema()['field'].set(self.dummy, 'getRawRelatedItems')
         self.folder.invokeFactory('Document', 'doc1')
@@ -481,7 +481,7 @@ class TestATPortalTypeCriterion(CriteriaTest):
     meta_type = 'ATPortalTypeCriterion'
     portal_type = 'ATPortalTypeCriterion'
 
-    #Same as list criterion but without operator and with special vocabulary
+    # Same as list criterion but without operator and with special vocabulary
     def test_portaltype_query(self):
         self.dummy.Schema()['field'].set(self.dummy, 'portal_type')
         self.dummy.setValue(('Document', 'Folder', 'Topic'))
@@ -493,13 +493,14 @@ def test_portaltype_query(self):
         self.assertEqual(query, ('Document', 'Folder', 'Topic'))
 
     def test_vocabulary(self):
-        #Should return standard types, but not blacklisted types
+        # Should return standard types, but not blacklisted types
         self.dummy.Schema()['field'].set(self.dummy, 'portal_types')
         self.assertTrue('Document' in self.dummy.getCurrentValues().keys())
-        self.assertTrue('ATSimpleStringCriterion' not in self.dummy.getCurrentValues().keys())
+        self.assertTrue(
+            'ATSimpleStringCriterion' not in self.dummy.getCurrentValues().keys())
 
     def test_vocabulary_sorts_by_title(self):
-        #Should return standard types, but not blacklisted types
+        # Should return standard types, but not blacklisted types
         self.dummy.Schema()['field'].set(self.dummy, 'Type')
         type_names = self.dummy.getCurrentValues().values()
         self.assertTrue(type_names.index('Page') > type_names.index('Event'))
@@ -539,7 +540,8 @@ class TestATCurrentAuthorCriterion(CriteriaTest):
     def afterSetUp(self):
         CriteriaTest.afterSetUp(self)
         self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
+        self.portal.acl_users._doAddUser(
+            'reviewer', 'secret', ['Reviewer'], [])
 
     def test_author_query(self):
         self.dummy.Schema()['field'].set(self.dummy, 'creator')
@@ -577,53 +579,71 @@ def afterSetUp(self):
         self.portal.folderB.invokeFactory('Folder', 'folderB1')
 
         # create topic in folderA1
-        self.portal.folderA.folderA1.invokeFactory('Topic', 'new_topic', title='New Topic')
+        self.portal.folderA.folderA1.invokeFactory(
+            'Topic', 'new_topic', title='New Topic')
 
         self.topic = self.portal.folderA.folderA1.new_topic
         # Add a path criterion
-        self.path_crit = self.topic.addCriterion('path', 'ATRelativePathCriterion')
+        self.path_crit = self.topic.addCriterion(
+            'path', 'ATRelativePathCriterion')
 
     def test_relative_path_query1(self):
-        self.path_crit.setRelativePath('..')  # should give the parent==folderA1
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone/folderA/folderA1', 'depth': 1}),))
+        # should give the parent==folderA1
+        self.path_crit.setRelativePath('..')
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderA/folderA1', 'depth': 1}),))
 
     def test_relative_path_query2(self):
         self.path_crit.setRelativePath('../..')  # should give folderA
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone/folderA', 'depth': 1}),))
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderA', 'depth': 1}),))
 
     def test_relative_path_query3(self):
-        self.path_crit.setRelativePath('../../..')  # should give the /plone (portal)
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone', 'depth': 1}),))
+        # should give the /plone (portal)
+        self.path_crit.setRelativePath('../../..')
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone', 'depth': 1}),))
 
     def test_relative_path_query4(self):
-        self.path_crit.setRelativePath('../../../../../../..')  # should give the /plone (portal): cannot go higher than the portal
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone', 'depth': 1}),))
+        # should give the /plone (portal): cannot go higher than the portal
+        self.path_crit.setRelativePath('../../../../../../..')
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone', 'depth': 1}),))
 
     def test_relative_path_query5(self):
-        self.path_crit.setRelativePath('../../../folderB')  # should give folderB
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone/folderB', 'depth': 1}),))
+        self.path_crit.setRelativePath(
+            '../../../folderB')  # should give folderB
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderB', 'depth': 1}),))
 
     def test_relative_path_query6(self):
-        self.path_crit.setRelativePath('/folderB')  # should give folderB also (absolute paths are supported)
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone/folderB', 'depth': 1}),))
+        # should give folderB also (absolute paths are supported)
+        self.path_crit.setRelativePath('/folderB')
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderB', 'depth': 1}),))
 
     def test_relative_path_query7(self):
-        self.path_crit.setRelativePath('../../folderA1/../../folderB/folderB1/..')   # should give folderB
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone/folderB', 'depth': 1}),))
+        self.path_crit.setRelativePath(
+            '../../folderA1/../../folderB/folderB1/..')   # should give folderB
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderB', 'depth': 1}),))
 
     def test_relative_path_query8(self):
         self.path_crit.setRelativePath('.')  # should give the new_topic
-        self.assertTrue(self.path_crit.getCriteriaItems() == (('path', {'query': '/plone/folderA/folderA1/new_topic', 'depth': 1}),))
+        self.assertTrue(self.path_crit.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderA/folderA1/new_topic', 'depth': 1}),))
 
     def test_relative_path_query9(self):
         # Acquisition can mess us up, for example when a BrowserView
         # is in the acquisition chain, like in
         # plone.app.content.browser.foldercontents
-        self.path_crit.setRelativePath('..')  # should give the parent==folderA1
+        # should give the parent==folderA1
+        self.path_crit.setRelativePath('..')
         from Products.Five import BrowserView
         view = BrowserView(self.topic, self.topic.REQUEST)
         criterion = view.context.getCriterion('path_ATRelativePathCriterion')
-        self.assertTrue(criterion.getCriteriaItems() == (('path', {'query': '/plone/folderA/folderA1', 'depth': 1}),))
+        self.assertTrue(criterion.getCriteriaItems() == (
+            ('path', {'query': '/plone/folderA/folderA1', 'depth': 1}),))
 
 
 tests.append(TestATRelativePathCriterion)
@@ -647,7 +667,8 @@ def test_path_query(self):
         query = items[0][1]
         field = items[0][0]
         self.assertEqual(field, 'path')
-        self.assertEqual(tuple(query['query']), ('/plone/Members/test_user_1_/doc1',))
+        self.assertEqual(tuple(query['query']),
+                         ('/plone/Members/test_user_1_/doc1',))
         self.assertEqual(query['depth'], -1)
         self.dummy.setRecurse(False)
         items = self.dummy.getCriteriaItems()
@@ -693,7 +714,8 @@ def testRegisterCriteria(self):
         # works as expected
         # check if the expected criteria is there
         self.assertTrue(ATDateCriteria in self.crit_registry.listCriteria())
-        self.assertTrue(self.crit_registry.indicesByCriterion('ATFriendlyDateCriteria'))
+        self.assertTrue(self.crit_registry.indicesByCriterion(
+            'ATFriendlyDateCriteria'))
         # remove and ensure that it was removed
         self.crit_registry.unregister(ATDateCriteria)
         self.assertFalse(ATDateCriteria in self.crit_registry.listCriteria())
@@ -701,7 +723,7 @@ def testRegisterCriteria(self):
         self.crit_registry.register(ATDateCriteria, ('Bogus Index',))
         self.assertTrue(ATDateCriteria in self.crit_registry.listCriteria())
         self.assertEqual(self.crit_registry.indicesByCriterion('ATFriendlyDateCriteria'),
-                                                        ('Bogus Index',))
+                         ('Bogus Index',))
 
     def testCriteriaIndexLookupOnBadIndex(self):
         # Make sure we don't throw errors when someone has a non-default index
diff --git a/Products/ATContentTypes/tests/test_default_mimetypes.py b/Products/ATContentTypes/tests/test_default_mimetypes.py
index f9d2f1b..7220d8b 100644
--- a/Products/ATContentTypes/tests/test_default_mimetypes.py
+++ b/Products/ATContentTypes/tests/test_default_mimetypes.py
@@ -9,7 +9,8 @@ class TestDefaultMimeTypes(ATCTSiteTestCase):
     def test_ATDocumentDefaultType(self):
         self.loginAsPortalOwner()
         # we create a new document:
-        self.portal.invokeFactory('Document', id='testdoc', title='TestDocument')
+        self.portal.invokeFactory(
+            'Document', id='testdoc', title='TestDocument')
         obj = self.portal.testdoc
         # its text field should have the site wide default 'text/html'
         textfield = obj.getField('text')
@@ -23,11 +24,14 @@ def test_ATDocumentDefaultType(self):
         setDefaultContentType(self.portal, "text/x-web-markdown")
         self.assertEqual(textfield.getContentType(obj), 'text/html')
         # this should only affect new objects:
-        self.assertFalse(textfield.getContentType(obj) == 'text/x-web-markdown')
-        self.portal.invokeFactory('Document', id='testdoc2', title='TestDocument with new default')
+        self.assertFalse(textfield.getContentType(obj)
+                         == 'text/x-web-markdown')
+        self.portal.invokeFactory(
+            'Document', id='testdoc2', title='TestDocument with new default')
         second_object = self.portal.testdoc2
         second_field = second_object.getField('text')
-        self.assertTrue(second_field.getContentType(second_object) == 'text/x-web-markdown')
+        self.assertTrue(second_field.getContentType(
+            second_object) == 'text/x-web-markdown')
 
 
 def test_suite():
diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 3842f44..eb8e7dd 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -18,13 +18,14 @@
 from plone.testing import layered
 from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 
+
 def test_suite():
     import unittest
     suite = unittest.TestSuite()
     for testfile in FILES:
         suite.addTest(layered(doctest.DocFileSuite(testfile,
-                                optionflags=OPTIONFLAGS,
-                                package="Products.ATContentTypes.tests",),
-                      layer=PTC_FUNCTIONAL_TESTING)
-                     )
+                                                   optionflags=OPTIONFLAGS,
+                                                   package="Products.ATContentTypes.tests",),
+                              layer=PTC_FUNCTIONAL_TESTING)
+                      )
     return suite
diff --git a/Products/ATContentTypes/tests/test_installation.py b/Products/ATContentTypes/tests/test_installation.py
index d4875f2..7902967 100644
--- a/Products/ATContentTypes/tests/test_installation.py
+++ b/Products/ATContentTypes/tests/test_installation.py
@@ -35,7 +35,7 @@ def test_skin_installed(self):
     def test_installedAllTypes(self):
         # test that all types are installed well
         ids = ('Document', 'File', 'Folder', 'Image', 'Link',
-            'News Item', 'Topic', 'Event')
+               'News Item', 'Topic', 'Event')
         for i in ids:
             self.assertTrue(i in self.ttool)
 
@@ -59,9 +59,9 @@ def test_reindex_doesnt_add_tools(self):
         # a rought guess
         self.assertFalse(len(ids) < 5)
         for id in ids:
-                result = cat(id=id)
-                l = len(result)
-                self.assertEqual(l, 0, (id, l, result))
+            result = cat(id=id)
+            l = len(result)
+            self.assertEqual(l, 0, (id, l, result))
 
     def test_adds_related_items_catalog_index(self):
         self.assertEqual(self.cat.Indexes['getRawRelatedItems'].__class__.__name__,
diff --git a/Products/ATContentTypes/tests/test_portal_factory.py b/Products/ATContentTypes/tests/test_portal_factory.py
index 309b03e..1d74fe5 100644
--- a/Products/ATContentTypes/tests/test_portal_factory.py
+++ b/Products/ATContentTypes/tests/test_portal_factory.py
@@ -10,7 +10,6 @@
 import urlparse
 
 
-
 def sortTuple(t):
     l = list(t)
     l.sort()
@@ -28,23 +27,23 @@ def afterSetUp(self):
 
     def testTraverse(self):
         temp_doc = self.folder.restrictedTraverse(
-                        'portal_factory/Document/tmp_id')
+            'portal_factory/Document/tmp_id')
         self.assertEqual(temp_doc.portal_type, 'Document')
         self.assertEqual(temp_doc.getId(), 'tmp_id')
 
     def testTraverseEditView(self):
         edit_view = self.folder.restrictedTraverse(
-                        'portal_factory/Document/tmp_id/edit')
+            'portal_factory/Document/tmp_id/edit')
         self.assertEqual('tmp_id', edit_view.im_self.getId())
         self.assertEqual('Document', edit_view.im_self.portal_type)
 
     def testTraverseTwiceByDifferentContentTypes(self):
         temp_doc = self.folder.restrictedTraverse(
-                        'portal_factory/Document/tmp_id')
+            'portal_factory/Document/tmp_id')
         self.assertEqual(temp_doc.portal_type, 'Document')
         self.assertEqual(temp_doc.getId(), 'tmp_id')
         temp_img = self.folder.restrictedTraverse(
-                        'portal_factory/Image/tmp_id_image')
+            'portal_factory/Image/tmp_id_image')
         self.assertEqual(temp_img.portal_type, 'Image')
         self.assertEqual(temp_img.getId(), 'tmp_id_image')
 
@@ -61,12 +60,12 @@ def testTempFolderLocalRoles(self):
                          ('Authenticated', 'Foo', 'Member'))
 
         temp_object = self.folder.restrictedTraverse(
-                        'portal_factory/Document/tmp_id')
+            'portal_factory/Document/tmp_id')
         self.assertEqual(sortTuple(member.getRolesInContext(temp_object)),
                          ('Authenticated', 'Foo', 'Member'))
 
         temp_object2 = self.folder.folder2.restrictedTraverse(
-                        'portal_factory/Document/tmp_id')
+            'portal_factory/Document/tmp_id')
         self.assertEqual(sortTuple(member.getRolesInContext(temp_object2)),
                          ('Authenticated', 'Foo', 'Member', 'Reviewer'))
 
@@ -84,11 +83,11 @@ def testTempFolderLocalRolesWithBlocking(self):
                                                   status=0)
 
         self.assertEqual(
-                sortTuple(member.getRolesInContext(self.folder.folder2)),
-                ('Authenticated', 'Member', 'Reviewer'))
+            sortTuple(member.getRolesInContext(self.folder.folder2)),
+            ('Authenticated', 'Member', 'Reviewer'))
 
         temp_object2 = self.folder.folder2.restrictedTraverse(
-                        'portal_factory/Document/tmp_id')
+            'portal_factory/Document/tmp_id')
         self.assertEqual(sortTuple(member.getRolesInContext(temp_object2)),
                          ('Authenticated', 'Member', 'Reviewer'))
 
@@ -100,7 +99,8 @@ def testTempObjectLocalRolesBug(self):
         self.login('manager')
         # BBB: we you launch this test suite with the others you need to reset
         # global_allow to True
-        self.portal.portal_types.Document.manage_changeProperties(global_allow=1)
+        self.portal.portal_types.Document.manage_changeProperties(
+            global_allow=1)
         self.portal.invokeFactory('Document', id='nontmp_id')
         nontemp_object = getattr(self.portal, 'nontmp_id')
 
@@ -108,7 +108,7 @@ def testTempObjectLocalRolesBug(self):
         self.login('member')
         folder = self.membership.getHomeFolder()
         temp_object = \
-                folder.restrictedTraverse('portal_factory/Document/tmp_id')
+            folder.restrictedTraverse('portal_factory/Document/tmp_id')
 
         # Make sure member is owner of temporary object
         self.assertEqual(sortTuple(member.getRolesInContext(temp_object)),
@@ -124,18 +124,18 @@ def testTempObjectLocalRolesBug(self):
     def testTempFolderPermissions(self):
         # TempFolder should "inherit" permission mappings from container
         previous_roles = \
-                [r for r in self.folder.rolesOfPermission(AddPortalContent)
-                    if r['name'] == 'Anonymous']
+            [r for r in self.folder.rolesOfPermission(AddPortalContent)
+             if r['name'] == 'Anonymous']
         self.folder.manage_permission(AddPortalContent, ['Anonymous'], 1)
         new_roles = [r for r in self.folder.rolesOfPermission(AddPortalContent)
-                        if r['name'] == 'Anonymous']
+                     if r['name'] == 'Anonymous']
         self.assertNotEqual(previous_roles, new_roles)
 
         temp_folder = self.folder.restrictedTraverse(
-                                'portal_factory/Document/tmp_id').aq_parent
+            'portal_factory/Document/tmp_id').aq_parent
         temp_roles = \
-                [r for r in temp_folder.rolesOfPermission(AddPortalContent)
-                    if r['name'] == 'Anonymous']
+            [r for r in temp_folder.rolesOfPermission(AddPortalContent)
+             if r['name'] == 'Anonymous']
 
         self.assertEqual(temp_roles, new_roles)
 
@@ -220,7 +220,7 @@ def testCreateObject(self):
         # The redirect URL should contain the factory parts
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(
-                                self.folder_url + '/portal_factory/Document/'))
+            self.folder_url + '/portal_factory/Document/'))
         # CMFFormController redirects should not do alias translation
         self.assertTrue('/edit' in location)
 
@@ -232,7 +232,7 @@ def testCreateObject(self):
     def testCreateNonGloballyAllowedObject(self):
         # TempFolder allows to create all portal types
         self.portal.portal_types.Document.manage_changeProperties(
-                                                        global_allow=0)
+            global_allow=0)
         response = self.publish(self.folder_path +
                                 '/createObject?type_name=Document',
                                 self.basic_auth)
@@ -243,7 +243,7 @@ def testCreateNonGloballyAllowedObject(self):
         # The redirect URL should contain the factory parts
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(
-                                self.folder_url + '/portal_factory/Document/'))
+            self.folder_url + '/portal_factory/Document/'))
         self.assertTrue('/edit' in location)
 
         # Perform the redirect
diff --git a/Products/ATContentTypes/tests/test_skinScripts.py b/Products/ATContentTypes/tests/test_skinScripts.py
index 6f4a418..e18e98d 100644
--- a/Products/ATContentTypes/tests/test_skinScripts.py
+++ b/Products/ATContentTypes/tests/test_skinScripts.py
@@ -30,18 +30,21 @@ def testFormatList(self):
                          'a, b, 1, 2, 3, 4')
         self.assertEqual(self.script(['a', 'b', 1, 2, 3, 4]),
                          'a, b, 1, 2, 3, 4')
-        # this also needs to be able to handle unicode that won't encode to ascii
+        # this also needs to be able to handle unicode that won't encode to
+        # ascii
         ustr = 'i\xc3\xadacute'.decode('utf8')
         self.assertEqual(self.script(['a', 'b', ustr]),
                          'a, b, i\xc3\xadacute'.decode('utf8'))
 
     def testFormatString(self):
-        self.assertEqual(self.script('fkj dsh ekjhsdf kjer'), 'fkj dsh ekjhsdf kjer')
+        self.assertEqual(self.script('fkj dsh ekjhsdf kjer'),
+                         'fkj dsh ekjhsdf kjer')
 
     def testFormatTruncates(self):
         registry = self.portal.portal_registry
         registry['plone.search_results_description_length'] = 12
-        self.assertEqual(self.script('fkj dsh ekjhsdf kjer'), 'fkj dsh ekjh...')
+        self.assertEqual(self.script(
+            'fkj dsh ekjhsdf kjer'), 'fkj dsh ekjh...')
 
     def testFormatStrange(self):
         self.assertEqual(self.script(None), '')
diff --git a/Products/ATContentTypes/tests/test_tool.py b/Products/ATContentTypes/tests/test_tool.py
index 1363781..fd74c79 100644
--- a/Products/ATContentTypes/tests/test_tool.py
+++ b/Products/ATContentTypes/tests/test_tool.py
@@ -41,9 +41,10 @@ def setupTestObject(self):
 
     def test_zmi_tabs(self):
         for view in self.zmi_tabs:
-            response = self.publish('%s/%s' % (self.obj_path, view), self.owner_auth)
+            response = self.publish(
+                '%s/%s' % (self.obj_path, view), self.owner_auth)
             self.assertEqual(response.getStatus(), 200,
-                "%s: %s" % (view, response.getStatus()))  # OK
+                             "%s: %s" % (view, response.getStatus()))  # OK
 
 tests.append(TestATCTToolFunctional)
 
diff --git a/Products/ATContentTypes/tests/test_topictool.py b/Products/ATContentTypes/tests/test_topictool.py
index 204bd54..6bd687e 100644
--- a/Products/ATContentTypes/tests/test_topictool.py
+++ b/Products/ATContentTypes/tests/test_topictool.py
@@ -13,11 +13,11 @@
              'friendlyName': 'End Date For Test',
              'description': 'This is an end Date',
              'criteria': ['ATDateCriteria', 'ATDateRangeCriteria']
-            }
+             }
 meta_def = {'metadata': 'ModificationDate',
             'friendlyName': 'Modification Date For Test',
             'description': ''
-           }
+            }
 
 
 class TestTool(atcttestcase.ATCTSiteTestCase):
@@ -29,7 +29,7 @@ def test_interface(self):
         self.assertTrue(IATCTTopicsTool.providedBy(self.tool))
         self.assertTrue(verifyObject(IATCTTopicsTool, self.tool))
 
-    #Index tests
+    # Index tests
     def test_add_index(self):
         t = self.tool
         t.addIndex(enabled=True, **index_def)
@@ -42,9 +42,11 @@ def test_add_index(self):
         self.assertEqual(index.criteria, tuple(index_def['criteria']))
 
         self.assertTrue(index in t.getEnabledIndexes())
-        self.assertTrue(index_def['index'] in [a[0] for a in t.getEnabledFields()])
+        self.assertTrue(index_def['index'] in [a[0]
+                                               for a in t.getEnabledFields()])
         self.assertTrue(index_def['index'] in t.getIndexDisplay(True).keys())
-        self.assertTrue(index_def['friendlyName'] in t.getIndexDisplay(True).values())
+        self.assertTrue(index_def['friendlyName']
+                        in t.getIndexDisplay(True).values())
         self.assertTrue(index_def['index'] in t.getIndexes(1))
 
     def test_disable_index(self):
@@ -59,13 +61,16 @@ def test_disable_index(self):
         self.assertEqual(index.criteria, tuple(index_def['criteria']))
 
         self.assertFalse(index in t.getEnabledIndexes())
-        self.assertFalse(index_def['index'] in [a[0] for a in t.getEnabledFields()])
+        self.assertFalse(index_def['index'] in [a[0]
+                                                for a in t.getEnabledFields()])
         self.assertFalse(index_def['index'] in t.getIndexes(1))
         self.assertFalse(index_def['index'] in t.getIndexDisplay(True).keys())
-        self.assertTrue(index_def['friendlyName'] not in t.getIndexDisplay(True).values())
+        self.assertTrue(index_def['friendlyName']
+                        not in t.getIndexDisplay(True).values())
         # Make sure it's still in the un-limited list
         self.assertTrue(index_def['index'] in t.getIndexDisplay(False).keys())
-        self.assertTrue(index_def['friendlyName'] in t.getIndexDisplay(False).values())
+        self.assertTrue(index_def['friendlyName']
+                        in t.getIndexDisplay(False).values())
         self.assertTrue(index_def['index'] in t.getIndexes())
 
     def test_add_bogus_index(self):
@@ -74,16 +79,16 @@ def test_add_bogus_index(self):
         t.addIndex('bogosity', enabled=True)
         self.assertTrue(t.getIndex('bogosity'))
 
-        #Add
+        # Add
         t.addIndex('bogosity', enabled=True)
         self.assertTrue('bogosity' in [a[0] for a in t.getEnabledFields()])
-        #Add
+        # Add
         t.addIndex('bogosity', enabled=True)
         self.assertTrue('bogosity' in t.getIndexDisplay(True).keys())
-        #Add
+        # Add
         t.addIndex('bogosity', enabled=True)
         self.assertTrue('bogosity' in t.getIndexes(1))
-        #Add
+        # Add
         t.addIndex('bogosity', enabled=True)
         self.assertTrue('bogosity' in [i.index for i in t.getEnabledIndexes()])
 
@@ -127,13 +132,14 @@ def test_all_indexes(self):
         indexes = [field for field in cat.indexes()]
         init_indexes = list(t.getIndexes())
         unique_indexes = [i for i in indexes if i not in init_indexes]
-        unique_indexes = unique_indexes + [i for i in init_indexes if i not in indexes]
+        unique_indexes = unique_indexes + \
+            [i for i in init_indexes if i not in indexes]
         self.assertFalse(unique_indexes)
 
     def test_change_catalog_index(self):
         t = self.tool
         cat = getToolByName(self.tool, 'portal_catalog')
-        #add
+        # add
         error = True
         cat.manage_addIndex('nonsense', 'FieldIndex')
         try:
@@ -141,7 +147,7 @@ def test_change_catalog_index(self):
         except AttributeError:
             error = False
         self.assertFalse(error)
-        #remove
+        # remove
         error = False
         cat.delIndex('nonsense')
         try:
@@ -150,7 +156,7 @@ def test_change_catalog_index(self):
             error = True
         self.assertTrue(error)
 
-    #Metadata tests
+    # Metadata tests
     def test_add_metadata(self):
         t = self.tool
         t.addMetadata(enabled=True, **meta_def)
@@ -162,8 +168,10 @@ def test_add_metadata(self):
         self.assertTrue(meta.enabled)
 
         self.assertTrue(meta in t.getEnabledMetadata())
-        self.assertTrue(meta_def['metadata'] in t.getMetadataDisplay(True).keys())
-        self.assertTrue(meta_def['friendlyName'] in t.getMetadataDisplay(True).values())
+        self.assertTrue(meta_def['metadata']
+                        in t.getMetadataDisplay(True).keys())
+        self.assertTrue(meta_def['friendlyName']
+                        in t.getMetadataDisplay(True).values())
         self.assertTrue(meta_def['metadata'] in t.getAllMetadata(1))
 
     def test_disable_metadata(self):
@@ -178,11 +186,15 @@ def test_disable_metadata(self):
 
         self.assertTrue(meta not in t.getEnabledMetadata())
         self.assertFalse(meta_def['metadata'] in t.getAllMetadata(1))
-        self.assertFalse(meta_def['metadata'] in t.getMetadataDisplay(True).keys())
-        self.assertFalse(meta_def['friendlyName'] in t.getMetadataDisplay(True).values())
+        self.assertFalse(meta_def['metadata']
+                         in t.getMetadataDisplay(True).keys())
+        self.assertFalse(meta_def['friendlyName']
+                         in t.getMetadataDisplay(True).values())
         # Make sure it's still in the un-limited list
-        self.assertTrue(meta_def['metadata'] in t.getMetadataDisplay(False).keys())
-        self.assertTrue(meta_def['friendlyName'] in t.getMetadataDisplay(False).values())
+        self.assertTrue(meta_def['metadata']
+                        in t.getMetadataDisplay(False).keys())
+        self.assertTrue(meta_def['friendlyName']
+                        in t.getMetadataDisplay(False).values())
         self.assertTrue(meta_def['metadata'] in t.getAllMetadata())
 
     def test_add_bogus_metadata(self):
@@ -191,15 +203,16 @@ def test_add_bogus_metadata(self):
         t.addMetadata('bogosity', enabled=True)
         self.assertTrue(t.getMetadata('bogosity'))
 
-        #Add
+        # Add
         t.addMetadata('bogosity', enabled=True)
         self.assertTrue('bogosity' in t.getMetadataDisplay(True).keys())
-        #Add
+        # Add
         t.addMetadata('bogosity', enabled=True)
         self.assertTrue('bogosity' in t.getAllMetadata(1))
-        #Add
+        # Add
         t.addMetadata('bogosity', enabled=True)
-        self.assertTrue('bogosity' in [i.index for i in t.getEnabledMetadata()])
+        self.assertTrue(
+            'bogosity' in [i.index for i in t.getEnabledMetadata()])
 
     def test_remove_metadata(self):
         t = self.tool
@@ -236,13 +249,14 @@ def test_all_metadata(self):
         metadata = [field for field in cat.schema()]
         init_metadata = list(t.getAllMetadata())
         unique_metadata = [i for i in metadata if i not in init_metadata]
-        unique_metadata = unique_metadata + [i for i in init_metadata if i not in metadata]
+        unique_metadata = unique_metadata + \
+            [i for i in init_metadata if i not in metadata]
         self.assertFalse(unique_metadata)
 
     def test_change_catalog_schema(self):
         t = self.tool
         cat = getToolByName(self.tool, 'portal_catalog')
-        #add
+        # add
         error = True
         cat.manage_addColumn('nonsense')
         try:
@@ -250,7 +264,7 @@ def test_change_catalog_schema(self):
         except AttributeError:
             error = False
         self.assertFalse(error)
-        #remove
+        # remove
         error = False
         cat.delColumn('nonsense')
         try:
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index 9af1092..2cbee58 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -116,7 +116,7 @@ class IFD_Tag:
     (2, 'SS', 'Signed Short'),
     (4, 'SL', 'Signed Long'),
     (8, 'SR', 'Signed Ratio')
-    )
+)
 
 # dictionary of main EXIF tag names
 # first element of tuple is tag name, optional second element is
@@ -268,7 +268,7 @@ class IFD_Tag:
     0xA301: ('SceneType',
              {1: 'Directly Photographed'}),
     0xA302: ('CVAPattern',),
-    }
+}
 
 # interoperability tags
 INTR_TAGS = {
@@ -277,7 +277,7 @@ class IFD_Tag:
     0x1000: ('RelatedImageFileFormat', ),
     0x1001: ('RelatedImageWidth', ),
     0x1002: ('RelatedImageLength', ),
-    }
+}
 
 # GPS tags (not used yet, haven't seen camera with GPS)
 GPS_TAGS = {
@@ -308,7 +308,7 @@ class IFD_Tag:
     0x0018: ('GPSDestBearing', ),
     0x0019: ('GPSDestDistanceRef', ),
     0x001A: ('GPSDestDistance', )
-    }
+}
 
 # Nikon E99x MakerNote Tags
 # http://members.tripod.com/~tawba/990exif.htm
@@ -369,7 +369,7 @@ class IFD_Tag:
     0x00AA: ('Saturation', ),
     0x00AB: ('DigitalVariProgram', ),
     0x0010: ('DataDump', )
-    }
+}
 
 MAKERNOTE_NIKON_OLDER_TAGS = {
     0x0003: ('Quality',
@@ -401,7 +401,7 @@ class IFD_Tag:
               4: 'Fluorescent',
               5: 'Cloudy',
               6: 'Speed Light'})
-    }
+}
 
 
 # decode Olympus SpecialMode tag in MakerNote
@@ -437,7 +437,7 @@ def olympus_special_mode(v):
     # print as string
     0x0209: ('CameraID', lambda x: ''.join(map(chr, x))),
     0x0F00: ('DataDump', )
-    }
+}
 
 MAKERNOTE_CASIO_TAGS = {
     0x0001: ('RecordingMode',
@@ -491,7 +491,7 @@ def olympus_special_mode(v):
               125: '+1.0',
               244: '+3.0',
               250: '+2.0'})
-    }
+}
 
 MAKERNOTE_FUJIFILM_TAGS = {
     0x0000: ('NoteVersion', lambda x: ''.join(map(chr, x))),
@@ -556,14 +556,14 @@ def olympus_special_mode(v):
     0x1302: ('AEWarning',
              {0: 'Off',
               1: 'On'})
-    }
+}
 
 MAKERNOTE_CANON_TAGS = {
     0x0006: ('ImageType', ),
     0x0007: ('FirmwareVersion', ),
     0x0008: ('ImageNumber', ),
     0x0009: ('OwnerName', )
-    }
+}
 
 # see http://www.burren.cx/david/canon.html by David Burren
 # this is in element offset, name, optional value dictionary format
@@ -673,7 +673,7 @@ def olympus_special_mode(v):
     32: ('FocusMode',
          {0: 'Single',
           1: 'Continuous'})
-    }
+}
 
 MAKERNOTE_CANON_TAG_0x004 = {
     7: ('WhiteBalance',
@@ -687,25 +687,25 @@ def olympus_special_mode(v):
     9: ('SequenceNumber', ),
     14: ('AFPointUsed', ),
     15: ('FlashBias',
-        {0XFFC0: '-2 EV',
-         0XFFCC: '-1.67 EV',
-         0XFFD0: '-1.50 EV',
-         0XFFD4: '-1.33 EV',
-         0XFFE0: '-1 EV',
-         0XFFEC: '-0.67 EV',
-         0XFFF0: '-0.50 EV',
-         0XFFF4: '-0.33 EV',
-         0X0000: '0 EV',
-         0X000C: '0.33 EV',
-         0X0010: '0.50 EV',
-         0X0014: '0.67 EV',
-         0X0020: '1 EV',
-         0X002C: '1.33 EV',
-         0X0030: '1.50 EV',
-         0X0034: '1.67 EV',
-         0X0040: '2 EV'}),
+         {0XFFC0: '-2 EV',
+          0XFFCC: '-1.67 EV',
+          0XFFD0: '-1.50 EV',
+          0XFFD4: '-1.33 EV',
+          0XFFE0: '-1 EV',
+          0XFFEC: '-0.67 EV',
+          0XFFF0: '-0.50 EV',
+          0XFFF4: '-0.33 EV',
+          0X0000: '0 EV',
+          0X000C: '0.33 EV',
+          0X0010: '0.50 EV',
+          0X0014: '0.67 EV',
+          0X0020: '1 EV',
+          0X002C: '1.33 EV',
+          0X0030: '1.50 EV',
+          0X0034: '1.67 EV',
+          0X0040: '2 EV'}),
     19: ('SubjectDistance', )
-    }
+}
 
 
 # extract multibyte integer in Motorola format (little endian)
@@ -737,6 +737,7 @@ def gcd(a, b):
 
 # class that handles an EXIF header
 class EXIF_header:
+
     def __init__(self, file, endian, offset, fake_exif, debug=0):
         self.file = file
         self.endian = endian
@@ -809,7 +810,7 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
             if not 0 < field_type < len(FIELD_TYPES):
                 # unknown field type
                 raise ValueError, \
-                      'unknown type %d in tag 0x%04X' % (field_type, tag)
+                    'unknown type %d in tag 0x%04X' % (field_type, tag)
 
             typelen = FIELD_TYPES[field_type][0]
             count = self.s2n(entry + 4, 4)
@@ -876,7 +877,8 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
                             printable += tag_entry[1].get(i, repr(i))
             printable = printable.strip().replace('\x00', '')
             if(values):
-                self.tags[ifd_name + ' ' + tag_name] = (values[0], printable, field_offset)
+                self.tags[ifd_name + ' ' +
+                          tag_name] = (values[0], printable, field_offset)
             if self.debug:
                 print ' debug:   %s: %s' % (tag_name,
                                             repr(self.tags[ifd_name + ' ' + tag_name]))
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index f5542fe..c5b70d0 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -40,9 +40,9 @@ class ATCTTool(UniqueObject, SimpleItem, PropertyManager, ATTopicsTool):
     implements(IATCTTool)
 
     manage_options = (
-            {'label': 'Overview', 'action': 'manage_overview'},
-            {'label': 'Image scales', 'action': 'manage_imageScales'}
-        ) + PropertyManager.manage_options
+        {'label': 'Overview', 'action': 'manage_overview'},
+        {'label': 'Image scales', 'action': 'manage_imageScales'}
+    ) + PropertyManager.manage_options
 
     # properties
 
@@ -54,7 +54,7 @@ class ATCTTool(UniqueObject, SimpleItem, PropertyManager, ATTopicsTool):
         {'id': 'album_batch_size', 'type': 'int', 'mode': 'w'},
         {'id': 'album_image_scale', 'type': 'string', 'mode': 'w'},
         {'id': 'single_image_scale', 'type': 'string', 'mode': 'w'},
-        )
+    )
 
     # templates
 
@@ -73,6 +73,7 @@ def om_icons(self):
     # image scales
 
     security.declareProtected(ManagePortal, 'recreateImageScales')
+
     def recreateImageScales(self, portal_type=None):
         """Recreates AT Image scales (doesn't remove unused!)
         """
@@ -109,6 +110,7 @@ def recreateImageScales(self, portal_type=None):
         return out.getvalue()
 
     security.declareProtected(ManagePortal, 'listContentTypes')
+
     def listContentTypes(self):
         """List all content types. Used for image/folder_types property.
         """
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index 888e5e6..06e268c 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -165,8 +165,8 @@ def getOwner(self, info=0,
                  getSecurityManager=getSecurityManager,
                  ):
         return aq_parent(
-                    aq_parent(self)).getOwner(
-                        info, aq_get, UnownableOwner, getSecurityManager)
+            aq_parent(self)).getOwner(
+            info, aq_get, UnownableOwner, getSecurityManager)
 
     def userCanTakeOwnership(self):
         return aq_parent(aq_parent(self)).userCanTakeOwnership()
@@ -196,7 +196,7 @@ def __getitem__(self, id):
 
         if id in self:
             return (aq_base(self._getOb(id)).__of__(temp_folder)) \
-                        .__of__(intended_parent)
+                .__of__(intended_parent)
         else:
             type_name = self.getId()
             try:
@@ -204,7 +204,7 @@ def __getitem__(self, id):
                 # object to be indexed in to avoid it showing up in the catalog
                 # in the first place.
                 self.archetype_tool = FauxArchetypeTool(
-                                        getToolByName(self, 'archetype_tool'))
+                    getToolByName(self, 'archetype_tool'))
                 _createObjectByType(type_name, self, id)
             except ConflictError:
                 raise
@@ -276,6 +276,7 @@ class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     _docs = stx2html(_docs)
 
     security.declarePublic('docs')
+
     def docs(self):
         """Returns FactoryTool docs formatted as HTML"""
         return self._docs
@@ -286,6 +287,7 @@ def getFactoryTypes(self):
         return self._factory_types
 
     security.declareProtected(ManagePortal, 'manage_setPortalFactoryTypes')
+
     def manage_setPortalFactoryTypes(self, REQUEST=None, listOfTypeIds=None):
         """Set the portal types that should use the factory."""
         if listOfTypeIds is not None:
@@ -363,7 +365,7 @@ def isTemporary(self, obj):
         """Check to see if an object is temporary"""
         ob = aq_base(aq_parent(aq_inner(obj)))
         return hasattr(ob, 'meta_type') \
-                and ob.meta_type == TempFolder.meta_type
+            and ob.meta_type == TempFolder.meta_type
 
     def __before_publishing_traverse__(self, other, REQUEST):
 
@@ -440,6 +442,7 @@ def __bobo_traverse__(self, REQUEST, name):
         return self._getTempFolder(str(name))
 
     security.declarePublic('__call__')
+
     def __call__(self, *args, **kwargs):
         """call method"""
         self._fixRequest()
@@ -451,7 +454,7 @@ def __call__(self, *args, **kwargs):
         # do a passthrough if parent contains the id
         if id in aq_parent(self):
             return aq_parent(self).restrictedTraverse(
-                        '/'.join(stack[1:]))(*args, **kwargs)
+                '/'.join(stack[1:]))(*args, **kwargs)
 
         tempFolder = self._getTempFolder(type_name)
         # Mysterious hack that fixes some problematic interactions with
@@ -474,8 +477,8 @@ def __call__(self, *args, **kwargs):
         else:
             obj = temp_obj
         return mapply(obj, self.REQUEST.args, self.REQUEST,
-                               call_object, 1, missing_name,
-                               dont_publish_class, self.REQUEST, bind=1)
+                      call_object, 1, missing_name,
+                      dont_publish_class, self.REQUEST, bind=1)
 
     index_html = None  # call __call__, not index_html
 
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 5b72653..078ff13 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -34,7 +34,7 @@ class MetadataError(Exception):
     """ Metadata error.  """
 
 
-class MetadataElementPolicy( SimpleItem ):
+class MetadataElementPolicy(SimpleItem):
 
     """ Represent a type-specific policy about a particular metadata element.
     """
@@ -43,11 +43,11 @@ class MetadataElementPolicy( SimpleItem ):
     #
     #   Default values.
     #
-    is_required         = 0
-    supply_default      = 0
-    default_value       = ''
-    enforce_vocabulary  = 0
-    allowed_vocabulary  = ()
+    is_required = 0
+    supply_default = 0
+    default_value = ''
+    enforce_vocabulary = 0
+    allowed_vocabulary = ()
 
     def __init__(self, is_multi_valued=False):
         self.is_multi_valued = bool(is_multi_valued)
@@ -55,64 +55,65 @@ def __init__(self, is_multi_valued=False):
     #
     #   Mutator.
     #
-    security.declareProtected(ManagePortal , 'edit')
-    def edit( self
-            , is_required
-            , supply_default
-            , default_value
-            , enforce_vocabulary
-            , allowed_vocabulary
-            ):
-        self.is_required        = bool(is_required)
-        self.supply_default     = bool(supply_default)
-        self.default_value      = default_value
+    security.declareProtected(ManagePortal, 'edit')
+
+    def edit(self, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
+             ):
+        self.is_required = bool(is_required)
+        self.supply_default = bool(supply_default)
+        self.default_value = default_value
         self.enforce_vocabulary = bool(enforce_vocabulary)
         self.allowed_vocabulary = tuple(allowed_vocabulary)
 
     #
     #   Query interface
     #
-    security.declareProtected(View , 'isMultiValued')
-    def isMultiValued( self ):
+    security.declareProtected(View, 'isMultiValued')
+
+    def isMultiValued(self):
         """ Can this element hold multiple values?
         """
         return self.is_multi_valued
 
-    security.declareProtected(View , 'isRequired')
-    def isRequired( self ):
+    security.declareProtected(View, 'isRequired')
+
+    def isRequired(self):
         """ Must this element be supplied?
         """
         return self.is_required
 
-    security.declareProtected(View , 'supplyDefault')
-    def supplyDefault( self ):
+    security.declareProtected(View, 'supplyDefault')
+
+    def supplyDefault(self):
         """ Should the tool supply a default?
         """
         return self.supply_default
 
-    security.declareProtected(View , 'defaultValue')
-    def defaultValue( self ):
+    security.declareProtected(View, 'defaultValue')
+
+    def defaultValue(self):
         """ If so, what is the default?
         """
         return self.default_value
 
-    security.declareProtected(View , 'enforceVocabulary')
-    def enforceVocabulary( self ):
+    security.declareProtected(View, 'enforceVocabulary')
+
+    def enforceVocabulary(self):
         """ Should the tool enforce the policy's vocabulary?
         """
         return self.enforce_vocabulary
 
-    security.declareProtected(View , 'allowedVocabulary')
-    def allowedVocabulary( self ):
+    security.declareProtected(View, 'allowedVocabulary')
+
+    def allowedVocabulary(self):
         """ What are the allowed values?
         """
         return self.allowed_vocabulary
 
-InitializeClass( MetadataElementPolicy )
+InitializeClass(MetadataElementPolicy)
 
 
-
-class ElementSpec( SimpleItem ):
+class ElementSpec(SimpleItem):
 
     """ Represent all the tool knows about a single metadata element.
     """
@@ -124,35 +125,39 @@ class ElementSpec( SimpleItem ):
     #
     is_multi_valued = 0
 
-    def __init__( self, is_multi_valued ):
-        self.is_multi_valued  = is_multi_valued
-        self.policies         = PersistentMapping()
-        self.policies[ None ] = self._makePolicy()  # set default policy
+    def __init__(self, is_multi_valued):
+        self.is_multi_valued = is_multi_valued
+        self.policies = PersistentMapping()
+        self.policies[None] = self._makePolicy()  # set default policy
+
+    security.declarePrivate('_makePolicy')
 
-    security.declarePrivate( '_makePolicy' )
-    def _makePolicy( self ):
-        return MetadataElementPolicy( self.is_multi_valued )
+    def _makePolicy(self):
+        return MetadataElementPolicy(self.is_multi_valued)
 
-    security.declareProtected(View , 'isMultiValued')
-    def isMultiValued( self ):
+    security.declareProtected(View, 'isMultiValued')
+
+    def isMultiValued(self):
         """
             Is this element multi-valued?
         """
         return self.is_multi_valued
 
-    security.declareProtected(View , 'getPolicy')
-    def getPolicy( self, typ=None ):
+    security.declareProtected(View, 'getPolicy')
+
+    def getPolicy(self, typ=None):
         """ Find the policy for this element for objects of the given type.
 
         o Return a default, if none found.
         """
         try:
-            return self.policies[ typ ].__of__(self)
+            return self.policies[typ].__of__(self)
         except KeyError:
-            return self.policies[ None ].__of__(self)
+            return self.policies[None].__of__(self)
 
-    security.declareProtected(View , 'listPolicies')
-    def listPolicies( self ):
+    security.declareProtected(View, 'listPolicies')
+
+    def listPolicies(self):
         """ Return a list of all policies for this element.
         """
         res = []
@@ -160,32 +165,34 @@ def listPolicies( self ):
             res.append((k, v.__of__(self)))
         return res
 
-    security.declareProtected(ManagePortal , 'addPolicy')
-    def addPolicy( self, typ ):
+    security.declareProtected(ManagePortal, 'addPolicy')
+
+    def addPolicy(self, typ):
         """ Add a policy to this element for objects of the given type.
         """
         if typ is None:
             raise MetadataError, "Can't replace default policy."
 
-        if self.policies.has_key( typ ):
+        if self.policies.has_key(typ):
             raise MetadataError, "Existing policy for content type:" + typ
 
-        self.policies[ typ ] = self._makePolicy()
+        self.policies[typ] = self._makePolicy()
 
     security.declareProtected(ManagePortal, 'removePolicy')
-    def removePolicy( self, typ ):
+
+    def removePolicy(self, typ):
         """ Remove the policy from this element for objects of the given type.
 
         o Do *not* remvoe the default, however.
         """
         if typ is None:
             raise MetadataError, "Can't remove default policy."
-        del self.policies[ typ ]
+        del self.policies[typ]
 
-InitializeClass( ElementSpec )
+InitializeClass(ElementSpec)
 
 
-class MetadataSchema( SimpleItem ):
+class MetadataSchema(SimpleItem):
 
     """ Describe a metadata schema.
     """
@@ -195,117 +202,90 @@ class MetadataSchema( SimpleItem ):
     meta_type = 'Metadata Schema'
     publisher = ''
 
-    def __init__( self, id, element_specs=() ):
-        self._setId( id )
+    def __init__(self, id, element_specs=()):
+        self._setId(id)
         self.element_specs = PersistentMapping()
         for name, is_multi_valued in element_specs:
-            self.element_specs[ name ] = ElementSpec( is_multi_valued )
-
+            self.element_specs[name] = ElementSpec(is_multi_valued)
 
     #
     #   ZMI methods
     #
-    manage_options = ( ( { 'label'      : 'Elements'
-                         , 'action'     : 'elementPoliciesForm'
-                         }
-                       ,
+    manage_options = (({'label': 'Elements', 'action': 'elementPoliciesForm'
+                        },
                        )
-                     + SimpleItem.manage_options
-                     )
+                      + SimpleItem.manage_options
+                      )
 
     security.declareProtected(ManagePortal, 'elementPoliciesForm')
-    elementPoliciesForm = DTMLFile( 'metadataElementPolicies', WWW_DIR )
+    elementPoliciesForm = DTMLFile('metadataElementPolicies', WWW_DIR)
 
     security.declareProtected(ManagePortal, 'addElementPolicy')
-    def addElementPolicy( self
-                        , element
-                        , content_type
-                        , is_required
-                        , supply_default
-                        , default_value
-                        , enforce_vocabulary
-                        , allowed_vocabulary
-                        , REQUEST=None
-                        ):
+
+    def addElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
+                         ):
         """ Add a type-specific policy for one of our elements.
         """
         if content_type == '<default>':
             content_type = None
 
-        spec = self.getElementSpec( element )
-        spec.addPolicy( content_type )
-        policy = spec.getPolicy( content_type )
-        policy.edit( is_required
-                   , supply_default
-                   , default_value
-                   , enforce_vocabulary
-                   , allowed_vocabulary
-                   )
+        spec = self.getElementSpec(element)
+        spec.addPolicy(content_type)
+        policy = spec.getPolicy(content_type)
+        policy.edit(is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
+                    )
         if REQUEST is not None:
-            REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-               + '/elementPoliciesForm'
-               + '?element=' + element
-               + '&manage_tabs_message=Policy+added.'
-               )
+            REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                         + '/elementPoliciesForm'
+                                         + '?element=' + element
+                                         + '&manage_tabs_message=Policy+added.'
+                                         )
 
     security.declareProtected(ManagePortal, 'removeElementPolicy')
-    def removeElementPolicy( self
-                           , element
-                           , content_type
-                           , REQUEST=None
-                           ):
+
+    def removeElementPolicy(self, element, content_type, REQUEST=None
+                            ):
         """ Remvoe a type-specific policy for one of our elements.
         """
         if content_type == '<default>':
             content_type = None
 
-        spec = self.getElementSpec( element )
-        spec.removePolicy( content_type )
+        spec = self.getElementSpec(element)
+        spec.removePolicy(content_type)
         if REQUEST is not None:
-            REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-               + '/elementPoliciesForm'
-               + '?element=' + element
-               + '&manage_tabs_message=Policy+removed.'
-               )
+            REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                         + '/elementPoliciesForm'
+                                         + '?element=' + element
+                                         + '&manage_tabs_message=Policy+removed.'
+                                         )
 
     security.declareProtected(ManagePortal, 'updateElementPolicy')
-    def updateElementPolicy( self
-                           , element
-                           , content_type
-                           , is_required
-                           , supply_default
-                           , default_value
-                           , enforce_vocabulary
-                           , allowed_vocabulary
-                           , REQUEST=None
-                           ):
+
+    def updateElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
+                            ):
         """ Update a policy for one of our elements 
 
         o 'content_type' will be '<default>' when we edit the default.
         """
         if content_type == '<default>':
             content_type = None
-        spec = self.getElementSpec( element )
-        policy = spec.getPolicy( content_type )
-        policy.edit( is_required
-                   , supply_default
-                   , default_value
-                   , enforce_vocabulary
-                   , allowed_vocabulary
-                   )
+        spec = self.getElementSpec(element)
+        policy = spec.getPolicy(content_type)
+        policy.edit(is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
+                    )
         if REQUEST is not None:
-            REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-               + '/elementPoliciesForm'
-               + '?element=' + element
-               + '&manage_tabs_message=Policy+updated.'
-               )
-
+            REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                         + '/elementPoliciesForm'
+                                         + '?element=' + element
+                                         + '&manage_tabs_message=Policy+updated.'
+                                         )
 
     #
     #   Element spec manipulation.
     #
     security.declareProtected(ManagePortal, 'listElementSpecs')
-    def listElementSpecs( self ):
+
+    def listElementSpecs(self):
         """ Return a list of ElementSpecs representing the elements we manage.
         """
         res = []
@@ -314,60 +294,60 @@ def listElementSpecs( self ):
         return res
 
     security.declareProtected(ManagePortal, 'getElementSpec')
-    def getElementSpec( self, element ):
+
+    def getElementSpec(self, element):
         """ Return an ElementSpec for the given 'element'.
         """
-        return self.element_specs[ element ].__of__( self )
+        return self.element_specs[element].__of__(self)
 
     security.declareProtected(ManagePortal, 'addElementSpec')
-    def addElementSpec( self, element, is_multi_valued, REQUEST=None ):
+
+    def addElementSpec(self, element, is_multi_valued, REQUEST=None):
         """ Add 'element' to our list of managed elements.
         """
         # Don't replace.
-        if self.element_specs.has_key( element ):
+        if self.element_specs.has_key(element):
             return
 
-        self.element_specs[ element ] = ElementSpec( is_multi_valued )
+        self.element_specs[element] = ElementSpec(is_multi_valued)
 
         if REQUEST is not None:
-            REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-               + '/propertiesForm'
-               + '?manage_tabs_message=Element+' + element + '+added.'
-               )
+            REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                         + '/propertiesForm'
+                                         + '?manage_tabs_message=Element+' + element + '+added.'
+                                         )
 
     security.declareProtected(ManagePortal, 'removeElementSpec')
-    def removeElementSpec( self, element, REQUEST=None ):
+
+    def removeElementSpec(self, element, REQUEST=None):
         """ Remove 'element' from our list of managed elements.
         """
-        del self.element_specs[ element ]
+        del self.element_specs[element]
 
         if REQUEST is not None:
-            REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-               + '/propertiesForm'
-               + '?manage_tabs_message=Element+' + element + '+removed.'
-               )
+            REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                         + '/propertiesForm'
+                                         + '?manage_tabs_message=Element+' + element + '+removed.'
+                                         )
 
     security.declareProtected(ManagePortal, 'listPolicies')
-    def listPolicies( self, typ=None ):
+
+    def listPolicies(self, typ=None):
         """ Show all policies for a given content type
 
         o If 'typ' is none, return the list of default policies.
         """
         result = []
         for element, spec in self.listElementSpecs():
-            result.append( ( element, spec.getPolicy( typ ) ) )
+            result.append((element, spec.getPolicy(typ)))
         return result
 
 InitializeClass(MetadataSchema)
 
 
-_DCMI_ELEMENT_SPECS = ( ( 'Title', 0 )
-                      , ( 'Description', 0 )
-                      , ( 'Subject', 1 )
-                      , ( 'Format', 0 )
-                      , ( 'Language', 0 )
-                      , ( 'Rights', 0 )
-                      )
+_DCMI_ELEMENT_SPECS = (('Title', 0), ('Description', 0), ('Subject', 1), ('Format', 0), ('Language', 0), ('Rights', 0)
+                       )
+
 
 class MetadataTool(PloneBaseTool, UniqueObject, Folder):
 
@@ -380,11 +360,11 @@ class MetadataTool(PloneBaseTool, UniqueObject, Folder):
     #
     #   Default values.
     #
-    publisher           = ''
+    publisher = ''
 
     security = ClassSecurityInfo()
 
-    def __init__( self, publisher=None ):
+    def __init__(self, publisher=None):
 
         self.editProperties(publisher)
         self.DCMI = MetadataSchema('DCMI', _DCMI_ELEMENT_SPECS)
@@ -392,180 +372,173 @@ def __init__( self, publisher=None ):
     #
     #   ZMI methods
     #
-    manage_options = ( ( { 'label'      : 'Schema'
-                         , 'action'     : 'propertiesForm'
-                         }
-                       , { 'label'      : 'Overview'
-                         , 'action'     : 'manage_overview'
-                         }
+    manage_options = (({'label': 'Schema', 'action': 'propertiesForm'
+                        }, {'label': 'Overview', 'action': 'manage_overview'
+                            }
                        )
-                     + Folder.manage_options
-                     )
+                      + Folder.manage_options
+                      )
 
     security.declareProtected(ManagePortal, 'manage_overview')
-    manage_overview = DTMLFile( 'explainMetadataTool', WWW_DIR )
+    manage_overview = DTMLFile('explainMetadataTool', WWW_DIR)
 
     security.declareProtected(ManagePortal, 'propertiesForm')
-    propertiesForm = DTMLFile( 'metadataProperties', WWW_DIR )
+    propertiesForm = DTMLFile('metadataProperties', WWW_DIR)
 
     security.declareProtected(ManagePortal, 'editProperties')
-    def editProperties( self
-                      , publisher=None
-                      , REQUEST=None
-                      ):
+
+    def editProperties(self, publisher=None, REQUEST=None
+                       ):
         """ Form handler for "tool-wide" properties 
         """
         if publisher is not None:
             self.publisher = publisher
 
         if REQUEST is not None:
-            REQUEST[ 'RESPONSE' ].redirect( self.absolute_url()
-                                        + '/propertiesForm'
-                                        + '?manage_tabs_message=Tool+updated.'
-                                        )
+            REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                         + '/propertiesForm'
+                                         + '?manage_tabs_message=Tool+updated.'
+                                         )
 
     security.declareProtected(ManagePortal, 'manage_addSchema')
-    def manage_addSchema( self, schema_id, elements, REQUEST ):
+
+    def manage_addSchema(self, schema_id, elements, REQUEST):
         """ ZMI wrapper around addSchema
         """
         massaged = []
         for element in elements:
             if isinstance(element, basestring):
                 element = element.split(',')
-                if len( element ) < 2:
+                if len(element) < 2:
                     element.append(0)
-            massaged.append( element )
-        self.addSchema( schema_id, massaged )
+            massaged.append(element)
+        self.addSchema(schema_id, massaged)
 
-        REQUEST['RESPONSE'].redirect( self.absolute_url()
-                                    + '/propertiesForm'
-                                    + '?manage_tabs_message=Schema+added.'
-                                    )
+        REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                     + '/propertiesForm'
+                                     + '?manage_tabs_message=Schema+added.'
+                                     )
 
     security.declareProtected(ManagePortal, 'manage_removeSchemas')
-    def manage_removeSchemas( self, schema_ids, REQUEST ):
+
+    def manage_removeSchemas(self, schema_ids, REQUEST):
         """ ZMI wrapper around removeSchema
         """
         if not schema_ids:
             raise ValueError, 'No schemas selected!'
 
         for schema_id in schema_ids:
-            self.removeSchema( schema_id )
+            self.removeSchema(schema_id)
 
-        REQUEST['RESPONSE'].redirect( self.absolute_url()
-                                    + '/propertiesForm'
-                                    + '?manage_tabs_message=Schemas+removed.'
-                                    )
+        REQUEST['RESPONSE'].redirect(self.absolute_url()
+                                     + '/propertiesForm'
+                                     + '?manage_tabs_message=Schemas+removed.'
+                                     )
 
-    security.declarePrivate( 'getFullName' )
-    def getFullName( self, userid ):
+    security.declarePrivate('getFullName')
+
+    def getFullName(self, userid):
         """ See IMetadataTool.
         """
         return userid   # TODO: do lookup here
 
-    security.declarePublic( 'getPublisher' )
-    def getPublisher( self ):
+    security.declarePublic('getPublisher')
+
+    def getPublisher(self):
         """ See IMetadataTool.
         """
         return self.publisher
 
-    security.declarePublic( 'listAllowedSubjects' )
-    def listAllowedSubjects( self, content=None, content_type=None ):
+    security.declarePublic('listAllowedSubjects')
+
+    def listAllowedSubjects(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary( 'DCMI'
-                                         , 'Subject'
-                                         , content
-                                         , content_type
-                                         )
+        return self.listAllowedVocabulary('DCMI', 'Subject', content, content_type
+                                          )
+
+    security.declarePublic('listAllowedFormats')
 
-    security.declarePublic( 'listAllowedFormats' )
-    def listAllowedFormats( self, content=None, content_type=None ):
+    def listAllowedFormats(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary( 'DCMI'
-                                         , 'Format'
-                                         , content
-                                         , content_type
-                                         )
+        return self.listAllowedVocabulary('DCMI', 'Format', content, content_type
+                                          )
+
+    security.declarePublic('listAllowedLanguages')
 
-    security.declarePublic( 'listAllowedLanguages' )
-    def listAllowedLanguages( self, content=None, content_type=None ):
+    def listAllowedLanguages(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary( 'DCMI'
-                                         , 'Language'
-                                         , content
-                                         , content_type
-                                         )
+        return self.listAllowedVocabulary('DCMI', 'Language', content, content_type
+                                          )
+
+    security.declarePublic('listAllowedRights')
 
-    security.declarePublic( 'listAllowedRights' )
-    def listAllowedRights( self, content=None, content_type=None ):
+    def listAllowedRights(self, content=None, content_type=None):
         """ See IMetadata Tool.
         """
-        return self.listAllowedVocabulary( 'DCMI'
-                                         , 'Rights'
-                                         , content
-                                         , content_type
-                                         )
+        return self.listAllowedVocabulary('DCMI', 'Rights', content, content_type
+                                          )
 
-    security.declarePublic( 'listAllowedVocabulary' )
-    def listAllowedVocabulary( self
-                             , schema
-                             , element
-                             , content=None
-                             , content_type=None
-                             ):
+    security.declarePublic('listAllowedVocabulary')
+
+    def listAllowedVocabulary(self, schema, element, content=None, content_type=None
+                              ):
         """ See IMetadataTool.
         """
-        schema_def = getattr( self, schema )
-        spec = schema_def.getElementSpec( element )
+        schema_def = getattr(self, schema)
+        spec = schema_def.getElementSpec(element)
         if content_type is None and content:
             content_type = content.getPortalTypeName()
-        return spec.getPolicy( content_type ).allowedVocabulary()
+        return spec.getPolicy(content_type).allowedVocabulary()
+
+    security.declarePublic('listSchemas')
 
-    security.declarePublic( 'listSchemas' )
-    def listSchemas( self ):
+    def listSchemas(self):
         """ See IMetadataTool.
         """
-        result = [ ( 'DCMI', self.DCMI ) ]
-        result.extend( self.objectItems( [ MetadataSchema.meta_type ] ) )
+        result = [('DCMI', self.DCMI)]
+        result.extend(self.objectItems([MetadataSchema.meta_type]))
         return result
 
     security.declareProtected(ModifyPortalContent, 'addSchema')
-    def addSchema( self, schema_id, elements=() ):
+
+    def addSchema(self, schema_id, elements=()):
         """ See IMetadataTool.
         """
         if schema_id == 'DCMI' or schema_id in self.objectIds():
             raise KeyError, 'Duplicate schema ID: %s' % schema_id
 
-        schema = MetadataSchema( schema_id, elements )
-        self._setObject( schema_id, schema )
+        schema = MetadataSchema(schema_id, elements)
+        self._setObject(schema_id, schema)
 
-        return self._getOb( schema_id )
+        return self._getOb(schema_id)
 
     security.declareProtected(ModifyPortalContent, 'removeSchema')
-    def removeSchema( self, schema_id ):
+
+    def removeSchema(self, schema_id):
         """ See IMetadataTool.
         """
         if schema_id == 'DCMI' or schema_id not in self.objectIds():
             raise KeyError, 'Invalid schema ID: %s' % schema_id
 
-        self._delObject( schema_id )
+        self._delObject(schema_id)
 
     security.declareProtected(ModifyPortalContent, 'setInitialMetadata')
-    def setInitialMetadata( self, content ):
+
+    def setInitialMetadata(self, content):
         """ See IMetadataTool.
         """
         for schema_id, schema in self.listSchemas():
             for element, policy in schema.listPolicies(
-                                    content.getPortalTypeName()):
+                    content.getPortalTypeName()):
 
-                if not getattr( content, element )():
+                if not getattr(content, element)():
 
                     if policy.supplyDefault():
-                        setter = getattr( content, 'set%s' % element )
-                        setter( policy.defaultValue() )
+                        setter = getattr(content, 'set%s' % element)
+                        setter(policy.defaultValue())
                     elif policy.isRequired():
                         raise MetadataError, \
                             'Metadata element %s is required.' % element
@@ -573,25 +546,26 @@ def setInitialMetadata( self, content ):
         # TODO:  Call initial_values_hook, if present
 
     security.declareProtected(View, 'validateMetadata')
-    def validateMetadata( self, content ):
+
+    def validateMetadata(self, content):
         """ See IMetadataTool.
         """
         for schema_id, schema in self.listSchemas():
             for element, policy in schema.listPolicies(
-                                    content.getPortalTypeName()):
+                    content.getPortalTypeName()):
 
-                value = getattr( content, element )()
+                value = getattr(content, element)()
                 if not value and policy.isRequired():
                     raise MetadataError, \
-                            'Metadata element %s is required.' % element
+                        'Metadata element %s is required.' % element
 
                 if value and policy.enforceVocabulary():
-                    values = policy.isMultiValued() and value or [ value ]
+                    values = policy.isMultiValued() and value or [value]
                     for value in values:
                         if not value in policy.allowedVocabulary():
                             raise MetadataError, \
-                            'Value %s is not in allowed vocabulary for ' \
-                            'metadata element %s.' % ( value, element )
+                                'Value %s is not in allowed vocabulary for ' \
+                                'metadata element %s.' % (value, element)
 
-InitializeClass( MetadataTool )
+InitializeClass(MetadataTool)
 registerToolInterface('portal_metadata', IMetadataTool)
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index e95b4bc..f2050d9 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -54,17 +54,19 @@ def getCriteriaForIndex(self, index, as_dict=False):
             indexObj = catalog_tool.Indexes[index]
         except KeyError:
             return ()
-        criteria = tuple(_criterionRegistry.criteriaByIndex(indexObj.meta_type))
+        criteria = tuple(
+            _criterionRegistry.criteriaByIndex(indexObj.meta_type))
         search_criteria = _criterionRegistry.listSearchTypes()
         if as_dict:
             criteria = [{'name': a, 'description': _criterionRegistry[a].shortDesc}
-                                for a in criteria if a in search_criteria]
+                        for a in criteria if a in search_criteria]
         else:
             criteria = [a for a in criteria if a in search_criteria]
         criteria.sort()
         return criteria
 
     security.declareProtected(ManagePortal, 'addIndex')
+
     def addIndex(self, index, friendlyName='', description='', enabled=False, criteria=None):
         """ Add a new index along with descriptive information to the index
             registry """
@@ -77,12 +79,14 @@ def addIndex(self, index, friendlyName='', description='', enabled=False, criter
             objIndex.enabled = enabled
             objIndex.criteria = tuple(criteria)
         else:
-            objIndex = TopicIndex(index, friendlyName, description, enabled, criteria)
+            objIndex = TopicIndex(index, friendlyName,
+                                  description, enabled, criteria)
 
         self.topic_indexes[index] = objIndex
         self._p_changed = True
 
     security.declareProtected(ManagePortal, 'addMetadata')
+
     def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
         """ Add a new metadata field along with descriptive information to the
             metadata registry """
@@ -98,6 +102,7 @@ def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
         self._p_changed = True
 
     security.declareProtected(ManagePortal, 'updateIndex')
+
     def updateIndex(self, index, friendlyName=None, description=None, enabled=None, criteria=None):
         """ Updates an existing index in the registry, unrecognized values are
             added """
@@ -114,6 +119,7 @@ def updateIndex(self, index, friendlyName=None, description=None, enabled=None,
         self.addIndex(index, friendlyName, description, enabled, criteria)
 
     security.declareProtected(ManagePortal, 'updateMetadata')
+
     def updateMetadata(self, metadata, friendlyName=None, description=None, enabled=None):
         """ Updates an existing metadata field in the registry, unrecognized values are
             added """
@@ -127,6 +133,7 @@ def updateMetadata(self, metadata, friendlyName=None, description=None, enabled=
         self.addMetadata(metadata, friendlyName, description, enabled)
 
     security.declareProtected(ManagePortal, 'removeIndex')
+
     def removeIndex(self, index):
         """ Removes an existing index from the registry """
         if index in self.topic_indexes:
@@ -134,6 +141,7 @@ def removeIndex(self, index):
             self._p_changed = True
 
     security.declareProtected(ManagePortal, 'removeMetadata')
+
     def removeMetadata(self, metadata):
         """ Removes an existing metadata field from the registry """
         if metadata in self.topic_metadata:
@@ -141,6 +149,7 @@ def removeMetadata(self, metadata):
             self._p_changed = True
 
     security.declareProtected(ManagePortal, 'createInitialIndexes')
+
     def createInitialIndexes(self):
         """ create indexes for all indexes in the catalog """
         indexes = self.listCatalogFields()
@@ -151,6 +160,7 @@ def createInitialIndexes(self):
         return True
 
     security.declareProtected(ManagePortal, 'createInitialMetadata')
+
     def createInitialMetadata(self):
         """ create metadata for all indexes in the catalog """
         metas = self.listCatalogMetadata()
@@ -161,6 +171,7 @@ def createInitialMetadata(self):
         return True
 
     security.declarePrivate('listCatalogFields')
+
     def listCatalogFields(self):
         """ Return a list of fields from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
@@ -170,6 +181,7 @@ def listCatalogFields(self):
         return val
 
     security.declarePrivate('listCatalogMetadata')
+
     def listCatalogMetadata(self):
         """ Return a list of columns from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
@@ -192,13 +204,15 @@ def getAllowedPortalTypes(self, populate_for_end_usage=1):
         all_types = self.getAllPortalTypes()
 
         if populate_for_end_usage == 0:
-            # return whatever is in self.allowed_portal_types and make it a (id, title) tuple
+            # return whatever is in self.allowed_portal_types and make it a
+            # (id, title) tuple
             return [t for t in all_types if t[0] in self.allowed_portal_types]
 
         if self.allowed_portal_types == []:
             filtered_types = all_types
         else:
-            filtered_types = [type for type in all_types if type[0] in self.allowed_portal_types]
+            filtered_types = [type for type in all_types if type[
+                0] in self.allowed_portal_types]
 
         return filtered_types
 
@@ -240,8 +254,8 @@ def getEnabledFields(self):
         """ Returns a list of tuples containing the index name, friendly name,
             and description for each enabled index. """
         enabledIndexes = self.getEnabledIndexes()
-        dec_fields = [(i.friendlyName.lower() or \
-                       i.index.lower(), i.index, i.friendlyName or \
+        dec_fields = [(i.friendlyName.lower() or
+                       i.index.lower(), i.index, i.friendlyName or
                        i.index, i.description) for i in enabledIndexes]
         dec_fields.sort()
         fields = [(a[1], a[2], a[3]) for a in dec_fields]
@@ -257,11 +271,13 @@ def getFriendlyName(self, index):
             return index
 
     security.declareProtected(ManagePortal, 'getIndexes')
+
     def getIndexes(self, enabledOnly=False):
         """ Returns the full list of available indexes, optionally filtering
             out those that are not marked enabled """
         if enabledOnly:
-            indexes_dec = [(i.index.lower(), i.index) for i in self.getEnabledIndexes()]
+            indexes_dec = [(i.index.lower(), i.index)
+                           for i in self.getEnabledIndexes()]
         else:
             self.createInitialIndexes()  # update in case of new catalogue indexes
             indexes_dec = [(i.lower(), i) for i in self.topic_indexes.keys()]
@@ -271,11 +287,13 @@ def getIndexes(self, enabledOnly=False):
         return indexes
 
     security.declareProtected(ManagePortal, 'getAllMetadata')
+
     def getAllMetadata(self, enabledOnly=False):
         """ Returns the full list of available metadata fields, optionally
             filtering out those that are not marked enabled """
         if enabledOnly:
-            meta_dec = [(i.index.lower(), i.index) for i in self.getEnabledMetadata()]
+            meta_dec = [(i.index.lower(), i.index)
+                        for i in self.getEnabledMetadata()]
         else:
             self.createInitialMetadata()  # update in case of new catalogue metadata
             meta_dec = [(i.lower(), i) for i in self.topic_metadata.keys()]
@@ -299,28 +317,32 @@ def getMetadata(self, metadata):
             raise AttributeError('Metadata ' + str(metadata) + ' not found')
 
     security.declareProtected(ManagePortal, 'manage_saveTopicSetup')
+
     def manage_saveTopicSetup(self, REQUEST=None):
         """ Set indexes and metadata from form """
         if REQUEST == None:
-            return  'Nothing saved.'
+            return 'Nothing saved.'
 
         data = REQUEST.get('index', [])
         for index in data:
             enabled = 'enabled' in index
             criteria = index.get('criteria', ())
-            self.updateIndex(index['index'], index['friendlyName'], index['description'], enabled, criteria)
+            self.updateIndex(index['index'], index['friendlyName'], index[
+                             'description'], enabled, criteria)
 
         meta = REQUEST.get('metadata', [])
         for metadata in meta:
             enabled = 'enabled' in metadata
-            self.updateMetadata(metadata['index'], metadata['friendlyName'], metadata['description'], enabled)
+            self.updateMetadata(metadata['index'], metadata[
+                                'friendlyName'], metadata['description'], enabled)
         return True
 
     security.declareProtected(ManagePortal, 'manage_saveTopicSetupTypes')
+
     def manage_saveTopicSetupTypes(self, REQUEST=None):
         """ Set portal types from form """
         if REQUEST == None:
-            return  'Nothing saved.'
+            return 'Nothing saved.'
 
         self.allowed_portal_types = REQUEST.get('allowed_types', [])
         return True
diff --git a/setup.py b/setup.py
index 1950f95..b94668b 100644
--- a/setup.py
+++ b/setup.py
@@ -5,14 +5,14 @@
 setup(name='Products.ATContentTypes',
       version=version,
       description="Default Content Types for Plone",
-      long_description=open("README.txt").read() + "\n" + \
-                       open("CHANGES.txt").read(),
+      long_description=open("README.txt").read() + "\n" +
+      open("CHANGES.txt").read(),
       classifiers=[
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        ],
+          "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
+          "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
+      ],
       keywords='Plone Content Types',
       author='AT Content Types development team',
       author_email='plone-developers@lists.sourceforge.net',
@@ -23,11 +23,11 @@
       include_package_data=True,
       zip_safe=False,
       extras_require=dict(
-        test=[
-            'zope.annotation',
-            'zope.testing',
-            'plone.app.testing',
-        ]
+          test=[
+              'zope.annotation',
+              'zope.testing',
+              'plone.app.testing',
+          ]
       ),
       install_requires=[
           'setuptools',


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2015-10-01T03:06:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/98149e5902c1d898fe683d054e8da040dcc54493

Moved txt to rst.

Files changed:
A CHANGES.rst
A README.rst
M MANIFEST.in
M setup.py
D CHANGES.txt
D README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..eb78323
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,2975 @@
+Changelog
+=========
+
+2.2.8 (unreleased)
+------------------
+
+- White space only pep8 cleanup.  Not in the skins.
+  [maurits]
+
+- Removed use_folder_tabs from Topic.
+  [maurits]
+
+
+2.2.7 (2015-09-20)
+------------------
+
+- Pull value for link_redirect, types_view_action_in_listings
+  settings from the configuration registry.
+  [esteele]
+
+2.2.6 (2015-07-18)
+------------------
+
+- createObject moved to Archetpyes.
+  [tomgross]
+
+- Add CSRF authenticator in createObject script
+  [ebrehault]
+
+
+2.2.5 (2015-05-04)
+------------------
+
+- Move tests from PloneTestCase to plone.app.testing.
+  [tomgross,timo]
+
+- Set language settings in setupPortalContent on the new registry.
+  [timo]
+
+
+2.2.4 (2015-03-26)
+------------------
+
+- Merge PLIP 13091, plone.app.multilingual
+  [bloodbare]
+
+2.2.3 (2015-03-08)
+------------------
+
+- Define ``default_page_types`` in the ``propertiestool.xml`` profile.
+  [thet]
+
+- Add profile 'base' to allow addons to depend on ATContentTypes in Plone 5
+  without uninstalling the dexterity default-types.
+  [pbauer]
+
+
+2.2.2 (2014-10-23)
+------------------
+
+- Update template markup to match Barcelonetta
+  [albertcasado, sneridagh]
+
+- Remove deprecated imports.
+  [tomgross]
+
+
+2.2.1 (2014-04-13)
+------------------
+
+- Remove DL's from portalMessage templates.
+  https://github.com/plone/Products.CMFPlone/issues/153
+  [khink]
+
+
+2.2.0 (2014-03-01)
+------------------
+
+- Don't use spamProtect script in event_view; it doesn't do much.
+  [davisagli]
+
+- Use the new member search form as the layout for the Members folder.
+  [davisagli]
+
+- Moved Products.CMFFormController dependency
+  from Products.CMFPlone to Products.ATContentTypes (PLIP #13770)
+  [ale-rt]
+
+- Moved portal_factory and portal_metadata from Products.CMFPlone
+  to Products.ATContentTypes. (PLIP #13770)
+  [ale-rt]
+
+- Remove test_discussion test which tests the old discussion (pre Plone 4.1)
+  tool.
+  [timo]
+
+- Add 'content' profile which adds demo/test content.
+  This used to be in CMFPlone and is still used by PloneTestCase
+  in Plone 5.
+  [davisagli]
+
+- Update ICONMAP (.gif to .png).
+  [mathias.leimgruber]
+
+- Move content type profile definitions from Products.CMFPlone into here.
+  (Merge of PLIP 12344)
+  [davisagli et al.]
+
+- Remove the presentation mode setting from documents.
+  If the feature is still desired, use the plone.app.s5slideshow
+  addon.
+  [davisagli]
+
+- Removed backwards compatibility stub Products.ATReferenceBrowserWidget
+  [tomgross]
+
+- Don't throw a traceback if atct_topic_view is called on a non topic.
+  Redirect to the default view of context instead
+  [tomgross]
+
+- Move ATContent types views in there instead of CMFPlone
+  [encolpe]
+
+2.1.12 (2013-03-05)
+-------------------
+
+- Fix missing references on copy of (old-style) Collection path
+  criterion and relatedItems on stock content using the schema
+  flag keepReferencesOnCopy.  Refs: https://dev.plone.org/ticket/9919
+  [seanupton]
+
+
+2.1.11 (2013-01-13)
+-------------------
+
+- Fix deprecated import from Archetypes: use atapi instead of public
+  [toutpt]
+
+2.1.10 (2012-12-09)
+-------------------
+
+- change string ownership to creators as it makes more sense
+  refs http://dev.plone.org/ticket/8725
+  [maartenkling]
+
+- Make sure ATTopic.queryCatalog cannot be published. This fixes
+  http://plone.org/products/plone/security/advisories/20121106/14
+  [davisagli]
+
+2.1.9 (2012-10-11)
+------------------
+
+- Silence false security warning during startup complaining about
+  `ATTopic.setText`.
+  [hannosch]
+
+- Notify modified when an image is transformed
+  through transform image tab.
+  This updates modification date and refresh Etag.
+  Refs http://dev.plone.org/ticket/13169.
+  [thomasdesvenain]
+
+- add @@download view for IFileContent
+  [vangheem]
+
+- Implement ISyndicatable for folder and topic in 4.3
+  [vangheem]
+
+
+2.1.8 (2012-08-18)
+------------------
+
+- Fixes album view - when scales generation failed,
+  file name appeared twice.
+  Refs http://dev.plone.org/ticket/13082.
+  [thomasdesvenain]
+
+- PEP 8 (ignoring W602, E301, E501 and E701).
+  [hvelarde]
+
+- Deprecated aliases were replaced on tests.
+  [hvelarde]
+
+- iCal export: Don't escape COLON character in TEXT property.
+  Fixes http://dev.plone.org/ticket/11540.
+  [patch by jenskl, applied by kleist]
+
+- Changed deprecated getSiteEncoding to hardcoded `utf-8`
+  [tom_gross]
+
+2.1.7 (2012-04-09)
+------------------
+
+- Restored icon display in topic tabular view
+  [tom_gross]
+
+
+2.1.6 (2012-01-26)
+------------------
+
+- Fix the change/modify permission used for changing or managing
+  Topic/Collection criteria.
+  [rossp]
+
+- Calculate the localized datetime string based on UTC time. Refs
+  https://dev.plone.org/ticket/12197.
+  [malthe, ajung]
+
+- Replace getParentNode() with __parent__ / aq_parent as appropriate.
+  [elro]
+
+2.1.5 (2011-10-06)
+------------------
+
+- Enable sorting by the getObjPositionInParent index.
+  [davisagli]
+
+
+2.1.4 (2011-08-31)
+------------------
+
+- Avoid critical error if for any reason,
+  constrain type mode is set to ACQUIRE on a folder at the root level.
+  Refs http://dev.plone.org/plone/ticket/11950#comment:3
+  [yulka, thomasdesvenain]
+
+- Fixed a bug in listSubtopics that caused unauthorized exceptions when
+  subtopics were private
+  [afd]
+
+- Make relatedItems sortable. Fixes http://dev.plone.org/plone/ticket/12098
+  [fRiSi]
+
+2.1.3 (2011-07-12)
+------------------
+
+- PortalType-criteria should use archetype_name as value when querying for the
+  Type-index. Fixes http://dev.plone.org/plone/ticket/11913
+  [WouterVH]
+
+- NonRefCatalogContent-objects, e.g. criteria, should not obtain a UUID.
+  Fixes http://dev.plone.org/plone/ticket/11904
+  [WouterVH]
+
+- When a folder is not of the same type than its parent,
+  if this folder acquires constraint,
+  the allowed types are the intersection of globally allowed types in folder
+  and locally allowed types of its parent.
+  This fixes http://dev.plone.org/plone/ticket/11950.
+  [thomasdesvenain]
+
+- For collections displayed in table view, show localized date-format.
+  Fixes http://dev.plone.org/plone/ticket/11155
+  [WouterVH]
+
+- Fixed: adding a disallowed subobject raises ValueError instead of Unauthorized
+  if disallow is related to content types restriction.
+  [thomasdesvenain]
+
+- Activate manual sorting on relatedItems field.
+  [toutpt]
+
+2.1.2 (2011-05-12)
+------------------
+
+- Use DateTime's built-in support to do `datetime.datetime` conversions.
+  [hannosch]
+
+- Fixed `atdocument` tests to be compatible with Archetypes 1.7.5.
+  [hannosch]
+
+- Optimize images and icon file sizes.
+  [hannosch]
+
+- The implementations of HEAD for folderish objects were severely outdated
+  and never made much sense to begin with. Replace with basic
+  WebdavResource.HEAD.
+  [stefan]
+
+2.1.1 (2011-02-04)
+------------------
+
+- Added support for the new BooleanIndex and UUIDIndex for collections.
+  [hannosch]
+
+- Remove superfluous and/or operator for "Item type" criterion.
+  This fixes http://dev.plone.org/plone/ticket/10882
+  [msmith64]
+
+2.1.0 (2011-01-03)
+------------------
+
+- Depend on ``Products.CMFPlone`` instead of ``Plone``.
+  [elro]
+
+- Added CSS id to subtopics-header in atct_topic_view.pt to allow styling.
+  [tom_gross]
+
+- Make sure topic criteria get a valid UUID using plone.uuid.
+  [toutpt, davisagli]
+
+2.0.7 (2011-01-03)
+------------------
+
+- Pass on batching arguments into the catalog query call inside the collections
+  `queryCatalog` method.
+  [hannosch]
+
+- Add Site Administrator role to various permissions, for forward compatibility
+  with Plone 4.1.
+  [davisagli]
+
+- Avoid some deprecation warnings under Zope 2.13.
+  [hannosch]
+
+- Add missing content-core macro definition to atct_topic_view template.
+  [davisagli]
+
+2.0.6 (2010-09-28)
+------------------
+
+- Fixed: album view of a collection of Image items
+  displayed images on three sections (images, folders, others)
+  due to atctListAlbum script bad use of topic API.
+  [thomasdesvenain]
+
+2.0.5 (2010-09-08)
+------------------
+
+- Changed order of input fields in ``atct_manageTopicIndex.cpt`` and
+  ``atct_manageTopicMetadata.cpt``. Checkbox field *must not* be the first one
+  because http request ``:records`` gets messed up otherwise. This fixes
+  http://dev.plone.org/plone/ticket/10896.
+  [petschki]
+
+- Added browser tests for collection management templates.
+  [petschki]
+
+2.0.4 (2010-08-08)
+------------------
+
+- Adjusted tests to reflect new sub-collections default policy.
+  [hannosch]
+
+2.0.3 (2010-08-04)
+------------------
+
+- Fixed a test failure.
+  [davisagli]
+
+2.0.2 (2010-07-29)
+------------------
+
+- Fixed missing manage_beforeDelete declaration on the LinguaPlone folder class
+  variation. This closes http://plone.org/products/linguaplone/issues/241.
+  [hannosch]
+
+- Corrected timezone name generation in the DateTime -> datetime conversion
+  code.
+  [mj]
+
+2.0.1 (2010-07-18)
+------------------
+
+- Provide some minimal backwards compatibility for the ancient favorite type.
+  This closes http://dev.plone.org/plone/ticket/10677.
+  [hannosch]
+
+- Remove duplicate batching navigation in atct_topic_view.
+  Refs http://dev.plone.org/plone/ticket/10754.
+  [esteele]
+
+- Removed try/except in atctListAlbum.py that had no effect because
+  calling aq_base in a skin script always throws an Unauthorized
+  error.  Refs http://dev.plone.org/plone/ticket/9796.
+  [maurits]
+
+- Make sure the atct_album_view calls getText with a full acquisition
+  chain to avoid an AttributeError: kupu_captioned_image, but avoid
+  getting the text field from an acquisition parent.
+  See http://dev.plone.org/plone/ticket/8463
+  and http://dev.plone.org/plone/ticket/8190.
+  [maurits]
+
+- Removed REQUEST parameter from searchResults call in queryCatalog() of
+  the Topic class. searchResults should not be called with regular
+  parameters AND REQUEST.
+  [do3cc]
+
+2.0 (2010-07-01)
+----------------
+
+- Removed some ancient hardcoded HTML in the Collection Settings control panel.
+  [limi]
+
+- Deleting objects referred by path criterions resulted in the collection
+  being neither view- nor editable. This fixes
+  http://dev.plone.org/plone/ticket/10708.
+  [fRiSi]
+
+2.0b11 (2010-06-13)
+-------------------
+
+- Avoid deprecation warnings under Zope 2.13.
+  [hannosch]
+
+- Avoid testing dependency on zope.app.testing.
+  [hannosch]
+
+2.0b10 (2010-06-03)
+-------------------
+
+- Ensure text is shown for the various Collection views.
+  Related to http://dev.plone.org/plone/changeset/36850
+  Which fixed http://dev.plone.org/plone/ticket/10226
+
+- Products.ATContentTypes.content.folder.ATBTreeFolder is now deprecated.
+  Normal ATFolders (as implemented in plone.app.folder) are now suitable for
+  storing large numbers of items in most cases.  If you need a folder that
+  doesn't track order at all, use a normal ATFolder (from plone.app.folder)
+  with the ordering attribute set to u'unordered'.
+  [davisagli]
+
+- Merge fix of test_queryCatalogOverrideCriteria from 1.3.6 branch
+  [toutpt]
+
+2.0b9 (2010-05-01)
+------------------
+
+- Values in dropdown "criterion_type" in criterion_edit_form template are now
+  properly translated. This closes http://dev.plone.org/plone/ticket/9715
+  [vincentfretin]
+
+
+2.1.4 - Unreleased
+------------------
+
+- Nothing changed yet.
+
+
+2.0b8 - 2010-05-01
+------------------
+
+- Check the ISO of the stored date, not the ISO8601 (with timezone) that is
+  now returned by the accessors
+  [davisagli]
+
+
+2.0b7 - 2010-04-12
+------------------
+
+- List subcollections, not all subobjects, in the subcollections view.
+  [elvix]
+
+- Fixed Collection control panel to show the prefs portlet again.
+  [davisagli]
+
+- Fixed displaying the links and icons when 'display as table' is checked.
+  Links are shown using 'typesUseViewActionInListings', icons are shown using
+  plone_view.getIcon.
+  [kcleong]
+
+
+2.0b6 - 2010-03-08
+------------------
+
+- Adjust the tests now that `DateTime` objects are stored with a time zone.
+  Refs http://dev.plone.org/plone/ticket/10141
+  [witsch]
+
+
+2.0b5 - 2010-03-07
+------------------
+
+- Adjust the tests regarding content id generation to expect the re-instated,
+  previous behavior.  Refs http://dev.plone.org/plone/ticket/8591
+  [witsch]
+
+
+2.0b4 - 2010-03-05
+------------------
+
+- Fix issues with sliding modification/publishing dates by using `DateTime`'s
+  `ISO8601` method instead of `ISO`, which doesn't include time zones.
+  Refs http://dev.plone.org/plone/ticket/10140, 10141 & 10171.
+  [davisagli, witsch]
+
+- Polished markup for "tabs simulation" on collection management screens to
+  play nice in Sunburst.
+  [spliter]
+
+- Fixed validation for atct_manageTopicMetadata.cpt and
+  atct_manageTopicIndex.cpt
+  [spliter]
+
+- Updating atct_manageTopicMetadata.cpt and atct_manageTopicIndex.cpt to
+  recent markup conventions. References
+  http://dev.plone.org/plone/ticket/9981.
+  [spliter]
+
+
+2.0b3 - 2010-02-17
+------------------
+
+- Removing redundant .documentContent markup.
+  This refs http://dev.plone.org/plone/ticket/10231.
+  [limi]
+
+- Updated templates to follow recent markup conventions.
+  References http://dev.plone.org/plone/ticket/9981
+  [spliter]
+
+- Fixed the portal type criterion to use the really user friendly types
+  vocabulary, which makes it independent of the types selection allowed for
+  searching. We also provide the proper translated title of all types and sort
+  by it now. This closes http://dev.plone.org/plone/ticket/9802.
+  [hannosch]
+
+2.0b2 - 2010-01-25
+------------------
+
+- Removed a displayContentsTab related hack from topic.py. Whatever this was
+  supposed to do, has long changed.
+  [hannosch]
+
+- Ported fix for http://dev.plone.org/plone/ticket/7324 - it was not possible
+  to empty Collection's 'text' field. Again fixes #7324
+  [naro]
+
+2.0b1 - 2010-01-02
+------------------
+
+- Don't specify PIL as a direct dependencies. It is not installed as an egg on
+  all platforms.
+  [hannosch]
+
+2.0a6 - 2009-12-27
+------------------
+
+- Respect "show content type icons" setting for collection table view.
+  This fixes http://dev.plone.org/plone/ticket/9630.
+  [dukebody]
+
+- Removed cmf_klass leftovers from tests.
+  [hannosch]
+
+- Removed useless manual tests of the icon names of all types.
+  [hannosch]
+
+- Removed overly creative code using access rules in webdav tests.
+  [hannosch]
+
+- Added manage_options restriction for new folderish types.
+  [hannosch]
+
+- Removed no longer required ATCTContent.manage_options restriction.
+  [hannosch]
+
+- Corrected package dependencies.
+  [hannosch]
+
+2.0a5 - 2009-12-16
+------------------
+
+- Apply patch from mr_savage. Fixes a broken call to normalizeString in
+  atct_topic_view. http://dev.plone.org/plone/ticket/9897
+  [esteele]
+
+2.0a4 - 2009-12-03
+------------------
+
+- Use "Modify portal content" and "Add portal content" for topic and event
+  instead of the type-specific permissions previously used.
+  [esteele]
+
+2.0a3 - 2009-12-03
+------------------
+
+- Replace the custom __bobo_traverse__ for handling image scales on ATNewsItem
+  and ATImage, because it's still needed for path traversal to scales to work.
+  This fixes http://dev.plone.org/plone/ticket/9706.
+  [davisagli]
+
+2.0a2 - 2009-12-02
+------------------
+
+- Attempt to Acquisition unwrap the context but allow the (potentially)
+  wrapped object through if unwrapping fails. This closes
+  http://dev.plone.org/old/plone/ticket/9796.
+  [matthewwilkes]
+
+- Adjust the reindex tests for the change I just made in Archetypes.
+  [davisagli]
+
+- Remove the eventType field and merge it into the subject field.
+  Closes http://dev.plone.org/old/plone/ticket/5058.
+  [rossp]
+
+2.0a1 - 2009-11-18
+------------------
+
+- Pass an _initializing_ flag when updating fields on object initialization,
+  to avoid indexing twice (since CMF indexes on the item's ObjectAddedEvent,
+  which now takes place after the call to initializeArchetype).
+  [davisagli]
+
+- Replaced date criterion "ago/from now" by "in the past/in the future".
+  [vincentfretin]
+
+- help_criteria_field_name msgid was used twice but with different default
+  messages. Fixed that.
+  [vincentfretin]
+
+- Made ATImage compute its ID from its title if provided. Closes
+  http://dev.plone.org/old/plone/ticket/9186.
+  [erikrose]
+
+- Changed the canonical location of interfaces to be in a subpackage called
+  interfaces in its standard plural form. Leave BBB imports behind in
+  interface.py.
+  [hannosch, davisagli, witsch]
+
+- Updated the ATCT tool upgrade to register the new tool with the portal
+  site manager.
+  [davisagli]
+
+- Subtopics shouldn't always acquire the 'start' query. Fixes
+  http://dev.plone.org/plone/ticket/8827
+  [pelle]
+
+- Use correct location for IObjectEvent.
+  [hannosch]
+
+- Removed test only PluggableAuthService dependency.
+  [hannosch]
+
+- Moved content type specific GenericSetup related functionality from CMFPlone
+  into this package.
+  [hannosch]
+
+- Drop the dependency on simplejson. It's integrated into Python 2.6 as json.
+  [hannosch]
+
+- Avoid acquiring `portal_properties` and call it via a proper API.
+  [hannosch]
+
+- Changed objectIds and objectValues calls to use the IContainer API.
+  [hannosch]
+
+- Don't assume regular (non-btree) folders for next/previous support.
+  [witsch]
+
+- Removed various dependencies on CMFPlone.
+  [hannosch]
+
+- Cleaned up tests some more. No longer rely on the testfixture extension
+  profile but adapt the tests to default Plone instead.
+  [hannosch]
+
+- Declare package dependencies and fixed deprecation warnings for use
+  of Globals.
+  [hannosch]
+
+- Changed parameter name at script getXMLSelectVocab.py from 'method' to
+  'vocab_method' to avoid getting overridden from ZPublisher.HTTPRequest.
+  This closes http://dev.plone.org/plone/ticket/6960.
+  [igbun]
+
+- Changed description label to summary for page and news item. This closes
+  http://dev.plone.org/plone/ticket/8700.
+  [hannosch]
+
+- Adjusted functional tests to not rely on login portlet.
+  [hannosch]
+
+- Moved a manage_renameObject method from the autosort code into the ordered
+  base class. It wasn't quite obvious, but the code was actually used.
+  [hannosch]
+
+- Removed icalendar package from the thirdparty folder. We don't use it
+  ourselves and it's easy installable nowadays for anyone who wants it.
+  [hannosch]
+
+- Removed never fully implemented autosort and urlupload modules.
+  [hannosch]
+
+- Removed the weird Zope2 Interface to zope.interface bridging code.
+  [hannosch]
+
+- Removed annoying license statements from the source files. We have a central
+  license.txt for that.
+  [hannosch]
+
+- Removed module aliases for content created before ATCT 1.0.
+  [hannosch]
+
+- Adjusted code to current Plone trunk after some deprecated code got removed.
+  Moved old_folder_contents code into atct_topic_subtopics.
+  [hannosch]
+
+- Fixed some test failures concerning criterion editing.
+  [hannosch]
+
+- Adjusted reindex sanity tests to changed order of the indexing calls.
+  [hannosch]
+
+- Increase the version number to 2.0, to make it possible to release minor
+  feature releases for the Plone 3.x line.
+  [hannosch]
+
+- Adjusted events test to new reality including zope.app.container and
+  DCWorkflow events.
+  [hannosch]
+
+- Removed half-implemented and unmaintained archive and adapters code.
+  [hannosch]
+
+- Removed unmaintained and unused Favorite content type.
+  [hannosch]
+
+- Removed references to external editor in comments.
+  [hannosch]
+
+- Removed empty test_getobjpositioninparent test from the base test case.
+  [hannosch]
+
+- Adjusted tests to reflect using png instead of gifs for content types.
+  [hannosch]
+
+- Use human understandable language for describing the relative date range
+  criteria. This closes http://dev.plone.org/plone/ticket/6841.
+  [hannosch]
+
+- Fixed duplicate link icon in the custom topic view. This closes
+  http://dev.plone.org/plone/ticket/6049.
+  [hannosch]
+
+- Removed confusing behavior of ATEvent mixing eventType and Subject.
+  This closes http://dev.plone.org/plone/ticket/5058.
+  [hannosch]
+
+- Added application/x-shockwave-flash to the inline mimetypes, so they can
+  be shown in a page without causing a download prompt. This closes
+  http://dev.plone.org/plone/ticket/5778.
+  [hannosch]
+
+- Removed a shortcut in the relative path criterion, which wouldn't work in
+  all cases. This closes http://dev.plone.org/plone/ticket/7785.
+  [hannosch]
+
+- The photo album view never showed the number of images in subfolders.
+  This closes http://dev.plone.org/plone/ticket/7759.
+  [hannosch]
+
+- Removed txng_get method from file content type. The hook is deprecated and
+  TextIndexNG 3 doesn't use it anymore. This closes
+  http://dev.plone.org/plone/ticket/4297.
+  [hannosch]
+
+- Fixed problem in parsing GPS information in exif metadata. This closes
+  http://dev.plone.org/plone/ticket/7057.
+  [hannosch]
+
+- Increased the maxlength for the url field of links from 255 to 511. This
+  closes http://dev.plone.org/plone/ticket/6422.
+  [hannosch]
+
+- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
+  Consider branching before this revision if release required before Plone 4.
+  [elro]
+
+- Remove __bobo_traverse__ from ATNewsItem and ATImage. Instead rely on the
+  generic ImageTraverse publish traverser from Archetypes and removed the
+  accompanying tests for it.
+  [wichert, hannosch]
+
+- Added tests for utils.dt2DT and utils.DT2dt that expose a bug as found
+  in Vice regarding converted dates becoming naive of timezones. Fixed.
+  [matthewwilkes]
+
+- Moved interface declarations from ZCML to the classes themselves.
+  [hannosch]
+
+- Ported editing.txt, events.txt, reindex_sanity.txt and traversal.txt tests
+  from Archetypes and adjusted them for the ATContentTypes specific behavior.
+  [hannosch]
+
+- Adjusted tests to changed test base classes of Archetypes.
+  [hannosch]
+
+- Removed the unmaintained utilities folder including the report scripts.
+  [hannosch]
+
+- Moved old_folder_contents over from CMFPlone as it is still used in
+  atct_topic_subtopics.pt.
+  [hannosch]
+
+- Fixed editing.txt browser test by opening 'http://nohost/plone' instead
+  of 'http://nohost/plone/login_form', because the latter incorrectly
+  redirected to 'http://nohost/plone/localhost'
+  [sirgarr]
+
+
+1.3.4 - unreleased
+------------------
+
+- Fix my previous Chameleon fix in criterion_edit_form.cpt, which broke
+  creation of new criteria. This closes http://dev.plone.org/ticket/9522
+  [davisagli]
+
+1.3.3 - 2009-09-06
+------------------
+
+- Subtopics shouldn't always acquire the 'start' query. Fixes
+  http://dev.plone.org/plone/ticket/8827
+  [pelle]
+
+- Internationalized "Also in this section" in atct_topic_subtopics.pt.
+  This closes http://dev.plone.org/plone/ticket/8383
+  [massimo]
+
+- Modified lib/constraintypes.py:getDefaultAddableTypes method to check
+  isConstructionAllowed only for allowed types, not for all content types
+  in portal_types. isConstructionAllowed was called twice for each types.
+  [vincentfretin]
+
+- Fix XHTML error in criterion_edit_form.cpt
+  [davisagli]
+
+1.3.2 2009-05-20
+----------------
+
+- Added proper multi-lingual handling to the reference criterion. It should
+  only show referenced content in the same or the neutral language if the
+  uid catalog is language aware.
+  [hannosch]
+
+1.3.1 2009-04-28
+----------------
+
+- Made it possible to set an empty value to a topic text field. This closes
+  http://dev.plone.org/plone/ticket/7324.
+  [dunlapm]
+
+1.3.0 - 2009-03-11
+------------------
+
+- Add support for generating iCal feeds for topics.
+  This refs http://plone.org/products/plone/roadmap/246.
+  [witsch]
+
+- Add view for rendering events as an iCal feed as proposed by PLIP 246,
+  http://plone.org/products/plone/roadmap/246.
+  [witsch]
+
+- Remove all code related to auto-sorting / auto-ordering folder as proposed
+  by PLIP 241, http://plone.org/products/plone/roadmap/241.
+  [witsch]
+
+- Made the relative path criterion less prone for funky Acquisition chains.
+  This refs http://dev.plone.org/plone/ticket/7686.
+  [hannosch, maurits]
+
+1.2.7 - 2009-01-30
+------------------
+
+- Don't assume regular (non-btree) folders for next/previous support.
+  [witsch]
+
+- Made Flash files display inline since Flash 10 requires this.  Fixes
+  http://dev.plone.org/plone/ticket/8624
+  [alecm]
+
+1.2.6 - 2008-10-06
+------------------
+
+- Fixed the tidy validation which errored out and rasied the wrong error.
+  This closes http://dev.plone.org/plone/ticket/8243.
+  [jlagarde, garbas, calvinhp]
+
+- Avoid acquiring getText from parent objects in atct_album_view. This refs
+  http://dev.plone.org/plone/ticket/8190.
+  [hannosch]
+
+- Already quoted characters in a "Link" url should not be quoted again
+  on edit. This closes http://dev.plone.org/plone/ticket/8336.
+  [witsch]
+
+- Removed parameters that has to be controlled through CSS from
+  atct_topic_view.pt. This closes http://dev.plone.org/plone/ticket/6803
+  [spliter]
+
+- Made it possible to set an empty value to a document text field.  This closes
+  http://dev.plone.org/plone/ticket/7324.
+  [davisagli]
+
+- Fixed invalid field condition that prevented you from being able to edit
+  the "Inherit Criteria" value on a collection once it had been created.
+  This closes http://dev.plone.org/plone/ticket/6527.
+  [hannosch]
+
+- Changed a msgid for the url field of events to have a distinct value.
+  This closes http://dev.plone.org/plone/ticket/8197.
+  [hannosch]
+
+- Changed "Contained Collections" text to "Also in this section".
+  This closes http://dev.plone.org/plone/ticket/8106.
+  [davisagli]
+
+- Changed default topic view to alway show body text (if available) even if the
+  collection does not have any results. This closes
+  http://dev.plone.org/plone/ticket/8270.
+  [dunlapm]
+
+1.2.5 - 2008-04-22
+------------------
+
+- Remove leading whitespace in hrefs.
+  [wichert]
+
+- Corrected i18n markup in schemata.py for the nextprevious field. This closes
+  http://dev.plone.org/plone/ticket/7517.
+  [hannosch]
+
+1.2.4 - 2008-01-03
+------------------
+
+- The edit tab in ZMI should not be displayed for ATImage/ATFIle objects.
+  http://dev.plone.org/archetypes/ticket/763
+  [deo]
+
+- Fixed #7467 http://dev.plone.org/plone/ticket/7467: Modify
+  "Item Type" criterion to store the untranslated Type instead
+  of portal_type, but to show the translated Type to the user.
+  Added a browser test for #6981
+  http://dev.plone.org/plone/ticket/6981 which is currently
+  disabled because the test browser does not translate pages
+  [sirgarr]
+
+1.2.3 - 2007-12-02
+------------------
+
+- Fixed http://dev.plone.org/plone/ticket/7102: uploading xhtml
+  files was not working correctly.  Thanks to lucie for the patch.
+  [alecm]
+
+- Fixed bug in portaltype criterion - it used portal type Title as both
+  key and value in multiselection widget, but Id and Title should be used.
+  Title (as DisplayList key) was incorrectly translated and caused #6981
+  http://dev.plone.org/plone/ticket/6981
+  [naro, jensens]
+
+- Fix Unicode encode error in formatCatalogMetadata.py when atct_topic_view.py
+  uses it to display in a table a text field (like 'location') whose contents
+  can't be encoded to ascii.
+  http://dev.plone.org/plone/ticket/7237
+  [stevem]
+
+- Reorder ATDateCriteria schema fields => more intuitive for users.
+  [zegor]
+
+- Fixed a mysterious error that happened when the ATContentTypeSchema
+  was directly used: the validation layer for the 'id' field wasn't
+  being initialized. This fixes http://dev.plone.org/plone/ticket/7221
+  [deo]
+
+1.2.2 - 2007-10-05
+------------------
+
+- Fix ATLink XSS issue.
+  [alecm, reinout]
+
+- Update catalogue indexes and metadata list in collection control panel when
+  'All fields' requested.
+  [ldr]
+
+- Files and Images don't need to enforce the Title field, since it is pulled
+  from the uploaded file name if missing. This fixes
+  http://dev.plone.org/plone/ticket/6051, which is a common source of user
+  frustration when uploading files/images.
+
+1.2.1 - 2007-09-12
+------------------
+
+- Make subject field read-only and invisible for events.  This fixes
+  http://dev.plone.org/plone/ticket/6967
+  [alecm]
+
+- Use widget views for standard view templates to simpify inline editing.
+  [limi]
+
+1.2.0-final - 2007-08-16
+------------------------
+
+- No longer enforce vocabularies on constraintypes fields, it's essentially
+  pointless, and not enforcing them helps workaround a strange bug:
+  http://dev.plone.org/plone/ticket/6734
+  [alecm]
+
+- Fixed i18n markup for event date validation error messages.
+  [hannosch]
+
+- Only show related items once instead of twice.
+  [wichert]
+
+1.2.0-rc2 - 2007-06-11
+----------------------
+
+- Add link validation to event field.
+  [alecm]
+
+1.2.0-rc1 - 2007-06-08
+----------------------
+
+- Fix concatenation issues between related items and query results in Topics.
+  [alecm]
+
+- Fixed migration bug in the atct tool migration. This closes
+  http://dev.plone.org/plone/ticket/6549 and
+  http://dev.plone.org/plone/ticket/6550.
+  [hannosch]
+
+- Show the text field and related items in the Topic view.
+  [wichert]
+
+- Properly i18n-ize imagetransforms TRANSPOSE_MAP by using ATCTMessageFactory.
+  [hannosch]
+
+- Removed all usage of PloneMessageFactory and replaced it by using ATCT's own
+  message factory. The extraction tools aren't able to deal with two different
+  message factories used for a single package.
+  [hannosch]
+
+- Fixed some i18n markup to use new ids for the collections related messages,
+  so these do not conflict with the old ones using smart folder.
+  [hannosch]
+
+- Hide the fields properly. The user may not have permission to edit them!
+  Also fix related typo-induced security hole.
+  [optilude]
+
+- Corrected cmf_edit_kws on the new ATDocumentBase class, which is used as a
+  base for ATNewsItem. It's absence caused a test failure in CMFPlone for the
+  text_format which needs special handling.
+  [hannosch]
+
+1.2.0-beta2 - 2007-04-29
+------------------------
+
+- Changed some status messages to type 'error'.
+  [hannosch]
+
+- Add support for updating existing topic indexes and metadata from
+  GenericSetup profiles
+  [wichert]
+
+- Removed tests/runalltests.py and tests/framework.py.
+  To run tests use Zope's testrunner:
+  ./bin/zopectl test --nowarn -s Products.ATContentTypes
+  [stefan]
+
+1.2.0-beta1 - 2007-03-04
+------------------------
+
+- Adjusted tests to deal with the new default vocabulary for boolean fields.
+  [wichert]
+
+- Adjusted tests to deal with the removal of the old CMF types from the
+  GenericSetup profiles. This refs http://dev.plone.org/plone/ticket/6156.
+  [hannosch]
+
+- Set ATFile's file field to be 'searchable'.  This means that it'll
+  be indexed correctly including transforms.  If you don't want this,
+  set your own 'index_method', or set 'searchable' to False in your
+  code.
+  [nouri]
+
+- Extinguished last occurrences of old portal_status_message in URL support.
+  [hannosch]
+
+- Merged plip174-reusable-i18n branch. Normalization of uploaded file names
+  is now based on plone.i18n.normalizer.
+  [hannosch]
+
+1.2.0-alpha2 - 2007-02-08
+-------------------------
+
+- Removed various obsolete class attributes from content type classes. These
+  are managed by GenericSetup profiles now.
+  [hannosch]
+
+- Updated installation tests, as ATCT is no longer 'quickinstalled' anymore.
+  [hannosch]
+
+- removed schemata='default' for allowDiscussion field in finalizeATCTSchema.
+  It makes no sense and prevents customization by patching.
+  [ender]
+
+- Moved fields of content types into several schemas.
+  [fschulze]
+
+- Removed properties tab, as we now use the all-schemas-on-one-page feature
+  of Archetypes.
+  [fschulze]
+
+- Some general test cleanup in order to make the test output readable.
+  [hannosch]
+
+- Removed the view alias of index.html for all standard content types. This
+  makes it possible to create and upload files called index.html to the
+  site, which is quite common when batch importing old sites into the site.
+  As someone might rely on the former behaviour, we do not migrate
+  any existing type information. This closes
+  http://dev.plone.org/plone/ticket/4837.
+  [hannosch]
+
+- Got rid of last remnants of zLOG. Grep is our friend!
+  [stefan]
+
+1.2.0-alpha1 - 2006-10-02
+-------------------------
+
+- Fixed some minor i18n issues.
+  [hannosch]
+
+- Reworked i18n of Python scripts to use the new MessageFactory and based
+  portal status messages on the statusmessages product.
+  [hannosch]
+
+- Changed criteria definitions to use Zope3 Messages for localizing
+  descriptions and labels instead of the old Archetypes approach using special
+  attributes. Added a ATCTMessageFactory for the Messages in the
+  'atcontenttypes' i18n domain.
+  [hannosch]
+
+- Fixed some imports of transaction_note from CMFPlone to CMFPlone.utils.
+  [hannosch]
+
+- Fixed deprecation warnings for TALValidator.
+  [hannosch]
+
+- Changed type definitions to use Zope3 Messages for localizing descriptions
+  and labels instead of the old Archetypes approach using special attributes.
+  [hannosch]
+
+- Removed ZConfig based configuration of the topic tool as it is now handled
+  by the GenericSetup profile. Removed magical recreation of indexes and
+  metadata on get* calls.
+  [hannosch]
+
+- Added an exportimport handler for the ATCT tool which is used by the Plone
+  base profile.
+  [hannosch]
+
+- Adjusted some deprecated getActionById to getActionInfo calls.
+  [hannosch]
+
+- Removed five:traversable statements as they are no longer needed in Zope2.10.
+  [hannosch]
+
+- Simplified test setup and adjusted some tests accordingly.
+  [hannosch]
+
+- Adjusted import locations of Archetypes.public to Archetypes.atapi for AT1.5.
+  [hannosch]
+
+1.1.4-final - 2006-12-18
+------------------------
+
+- Reenabled editing the names and descriptions of the smart folder indices
+  and metadata.
+  [alecm]
+
+- Setting a sort criterion should not prevent search criteria for the same
+  field from being set.  Fixes http://dev.plone.org/plone/ticket/5435
+  [alecm]
+
+- ATEvent.setSubject needs to set multiple EventTypes to avoid pruning
+  the subject list. Applied patch from rossp. Fixes
+  http://dev.plone.org/plone/ticket/5770
+  [alecm]
+
+- Add alt attributes to Topic table view type icons.  This closes
+  http://dev.plone.org/plone/ticket/5562
+  [alecm]
+
+- Fixed validation of filenames uploaded from IE.  This closes
+  http://dev.plone.org/plone/ticket/5889.
+  [alecm]
+
+- Reenabled translation of AJAX-ified smart folder info. This closes
+  http://dev.plone.org/plone/ticket/5806.
+  [hannosch]
+
+- Got rid of last remnants of zLOG. Grep is our friend!
+  [stefan]
+
+- Added a relative path criterion for Smart Folders to allow search paths
+  like "../somefolder"
+  [ender, elvix]
+
+1.1.3-final - 2006-09-20
+------------------------
+
+- Disabled translation of AJAX-ified smart folder info to temporarily remedy
+  http://dev.plone.org/plone/ticket/5806
+  [jensens]
+
+1.1.2-final - 2006-09-11
+------------------------
+
+- Changed integration tests to test Unicode titles instead of plain ascii.
+  [hannosch]
+
+- Added review state coloring to atct_topic_view. This closes
+  http://dev.plone.org/plone/ticket/5481.
+  [hannosch]
+
+- Don't setup a 'ATCT Setup' control panel category anymore, it's not used.
+  [hannosch]
+
+1.1.1-final - 2006-06-08
+------------------------
+
+- Changed two logging.PROBLEM to logging.WARNING. PROBLEM level was zLOG only.
+  [hannosch]
+
+1.1.0-final - 2006-06-03
+------------------------
+
+- Added TextIndexNG3 to list of indexes.
+  [ajung]
+
+- Moved css rules for the photo album view inside Plone's public.css, instead
+  of having them inline in the template. This way they can be overridden.
+  This closes http://dev.plone.org/plone/ticket/4765.
+  [hannosch]
+
+- Made ATTopic queryCatalog properly support b_size, thanks to patch from
+  Bader. Fixes http://dev.plone.org/plone/ticket/5526
+  [alecm]
+
+- Removed the unused locales folder. Translation files are part of the
+  PloneTranslation product.
+  [hannosch]
+
+- Uploading HTML via WebDAV now supports reading <title> tag to use
+  as the title of the new content item.
+  http://dev.plone.org/plone/ticket/4877
+  [rocky]
+
+- Semi-intelligent sniffing adding for figuring out the charset
+  when using mx.Tidy. This closes http://dev.plone.org/plone/ticket/5006.
+  [rocky]
+
+- Internal links didn't work for event url field. This closes
+  http://dev.plone.org/plone/ticket/5004
+  [hannosch]
+
+- Various fixes for the iCal/vCal export (thx Steve for the patch):
+
+    - timezone problems
+    - folding lines longer than 75 octests (per RFC)
+    - escaping commas, colons and semi-colons (per RFC)
+    - adding URL and CONTACT fields
+
+  This closes http://dev.plone.org/plone/ticket/4512.
+  [hannosch]
+
+- the EventType field in an event lists all relevant event types for
+  an event, not just one. Modify the iCal output logic to properly
+  produce comma-seperated event types. Fixes
+  http://dev.plone.org/plone/ticket/4881
+  [wichert]
+
+- Applied patch from Plone issue #5384 to do proper UTC conversion for iCal
+  and vCal output. Added tests. Fixes #5384.
+  [alecm]
+
+- Made use Zope 3 interfaces for constrain types and browser default. Depends
+  on changes to CMFDynamicViewFTI trunk and Plone 2.5 branch.
+  [optildue]
+
+- Made HistoryAwareMixin a subclass of Archetypes ATHistoryAwareMixin, which
+  is a working historyaware implementation for archetypes.
+  [mj]
+
+- Added a z3 module and an alias for BBB (Ploneboard).
+  [alecm]
+
+- Updated thirdparty/icalendar to version iCalendar-0.11. Dropped the
+  svn:external to codespeak SVN. This has the side-effect of ridding us
+  of the annoying test failure with the Zope 2.9 testrunner which would
+  pick up the icalendar tests even though they are neither importable nor
+  pass in this setting.
+  [stefan]
+
+1.1.0-beta1
+-----------
+
+- Integrated ftests into normal tests. Removed dependency on Archetypes tests.
+  [hannosch]
+
+- Update transaction imports, remove subtransaction usage, use python logger
+  everywhere, other deprecation related cleanup, whitespace cleanup.
+  [alecm]
+
+- Use KeywordWidget for eventType.
+  [fschulze]
+
+- Body of news items and event types can be empty now.
+  [fschulze]
+
+1.1.0-alpha2 - 2006-02-22
+-------------------------
+
+- Reorganized z3 interfaces into the interface package, created a complete
+  set of z3 interfaces, as well as tests for those interfaces.
+  [jfroche, russf]
+
+- Added some adapters and views for exporting Folders and Documents (and
+  other types, given additional configuration) as zip files.
+  [jfroche, russf]
+
+1.1.0-alpha1 - 2006-01-26
+-------------------------
+
+- make trunk compatible with cmf > 1.5, by changing references to
+  cmfcore.permissions and removing use of format_stx
+  [k_vertigo, hannosch]
+
+1.0.6-final - unreleased
+------------------------
+
+- Disabled the possibility to change index and metadata names and descriptions
+  on the smart folder configuration screens. Saving these with a browser locale
+  set to non-english would destroy the internationalization of all these texts.
+  This closes http://dev.plone.org/plone/ticket/5612.
+  [hannosch]
+
+- Sanitized some more index and metadata friendly names and descriptions.
+  [hannosch]
+
+- Changed index friendly name of index id to the same as the getId index.
+  [hannosch]
+
+- We don't translate the catalog and metadata id's anymore. Removed i18n markup
+  from the configuration screens.
+  [hannosch]
+
+1.0.5-final - 2006-06-03
+------------------------
+
+- Made ATTopic queryCatalog properly support b_size, thanks to patch from
+  Bader.  Fixes http://dev.plone.org/plone/ticket/5526
+  [alecm]
+
+- Added TextIndexNG3 to list of indexes.
+  [ajung]
+
+1.0.4-final - 2006-05-17
+------------------------
+
+- Folded ftests into unit tests. The distinction was arbitrary anyway.
+  [stefan]
+
+- Removed the unused locales folder. Translation files are part of the
+  PloneTranslation product.
+  [hannosch]
+
+- Uploading HTML via WebDAV now supports reading <title> tag to use
+  as the title of the new content item.
+  http://dev.plone.org/plone/ticket/4877
+  [rocky]
+
+- Semi-intelligent sniffing adding for figuring out the charset
+  when using mx.Tidy.  This closes
+  http://dev.plone.org/plone/ticket/5006
+  [rocky]
+
+- Internal links didn't work for event url field. This closes
+  http://dev.plone.org/plone/ticket/5004
+  [hannosch]
+
+- the EventType field in an event lists all relevant event types for
+  an event, not just one. Modify the iCal output logic to properly
+  produce comma-seperated event types. Fixes
+  http://dev.plone.org/plone/ticket/4881
+  [wichert]
+
+- Updated thirdparty/icalendar to version iCalendar-0.11. Dropped the
+  svn:external to codespeak SVN. This has the side-effect of ridding us
+  of the annoying test failure with the Zope 2.9 testrunner which would
+  pick up the icalendar tests even though they are neither importable nor
+  pass in this setting.
+  [stefan]
+
+- Made manage_afterPUT and manage_afterMKCOL use PATH_INFO to get at
+  the original id for usage in the Title, so that in a WebDAV
+  name-mangling environment the Title gets set to the original
+  filename.
+  [sidnei]
+
+- Added test for ATFolder and ATBTreeFolder MKCOL.
+  [sidnei]
+
+- Modify getLocallyAllowedTypes and getImmediatelyAddableTypes to take
+  a context in which type creation is to be tested. This is used to determine
+  if a user can create a type in the current context instead of in a parent
+  folder.
+  http://dev.plone.org/plone/ticket/5255
+  [wichert]
+
+1.0.3-final - 2006-01-20
+------------------------
+
+- Fixed non-clickable thumbnails in thumbnail view for IE.
+  http://dev.plone.org/plone/ticket/5119
+  [hannosch]
+
+1.0.2-final - 2006-01-03
+------------------------
+
+- Fixed #5028: constraintypes.py doesn't work properly with PortalFactory when
+  acquiring types.
+  http://dev.plone.org/plone/ticket/5028
+  [panjunyong]
+
+- fixed styles for thumbnailview.
+  [spliter]
+
+- content/events.py: made event type look-up respect dynamic types.
+  [raphael]
+
+- Don't return "n/a" in get_size(). This fixes Plone's #5030.
+  [nouri]
+
+- Fixed #5026: Setting a ZCatalog sort limit was interfering with result
+  batching. Only use the sort_limit optimization when batching is disabled.
+  http://dev.plone.org/plone/ticket/5026
+  [alecm]
+
+- Fixed #4567: Added portal_atct method to fix portal_type on CMF objects that
+  have empty portal_type because they were incorrectly instantiated. Such
+  situations caused migration to fail. This method is available in the type
+  migration form, and also runs automatically on install.
+  http://dev.plone.org/plone/ticket/4567
+  [alecm]
+
+- Fixed #4937: Removed list criteria from text indices, because it makes no
+  sense, AND and OR must be used explicitly.
+  http://dev.plone.org/plone/ticket/4937
+  [alecm]
+
+- Added migration for #4865 to fix the grammar on existing instances.
+  [alecm]
+
+- Made the criteria to index type mapping a little more sane.
+  [alecm]
+
+- Fixed #4915: Smart Folders with path criteria where throwing errors on
+  unindex due to partial reference support.
+  http://dev.plone.org/plone/ticket/4915
+  [alecm]
+
+- Added And/Or operator to selection criterion.
+  [alecm]
+
+- Fixed #4590: Subfolders inherit the selected layout of their parent folders
+  if they are of the same type.
+  http://dev.plone.org/plone/ticket/4590
+  [alecm]
+
+- Fixed #4512 - vCal export was not working with outlook.
+  http://dev.plone.org/plone/ticket/4512.
+  [hannosch]
+
+- Use the ControlledMarshaller from the Marshall product if
+  available. Fallbacks to existing marshaller.
+  [sidnei]
+
+- Enable __dav_marshall__ by default on ATTopic, ATFolder and
+  ATBTreeFolder.
+  [sidnei]
+
+- Fixed #4572 and #4909 - Unicode problems with using kupu together
+  with mxTidy
+  [hannosch]
+
+- Fixed #4865 - Spelling error on location criteria.
+  [hannosch]
+
+- On invalid mimetypes the getIcon method of ATFile doesn't throw an exception
+  anymore but generates a log entry. This should minimize some migration
+  problems or at least tell the exact object with an invalid mimetype.
+  This should fix http://plone.org/collector/4979.
+  [hannosch]
+
+- Correct some wrong security settings.
+  [hannosch]
+
+- Code cleanup removing lots of unused import statements.
+  [hannosch]
+
+- Fixed two issues with PathCriterion.  It was using depth 0 to get subfolders,
+  the proper parameter is depth -1.  Also, in order to properly handle the
+  references it holds, it must itself be cataloged in the UID catalog, and
+  have its references cataloged.
+  [alecm]
+
+- Fixed issue causing archetypes schema update to fail due to topic not
+  checking syndication state in initializeArchetype.
+  [alecm]
+
+- Added missing alternate views for folderish types.
+  [alecm]
+
+1.0.1-final - 2005-10-13
+------------------------
+
+- Fixes for http://plone.org/collector/4709 __bobo_traverse__ doesn't
+  need or want a RESPONSE argument.
+  [alecm]
+
+- Fixed http://plone.org/collector/4734 It is generally a bad idea
+  to check permissions in bobo_traverse methods, especially permissions
+  that don't exist, especially if you then try to raise an exception that
+  you haven't actually imported.
+  [alecm]
+
+- Fix two small i18n default text inconsistencies
+  [hannosch]
+
+1.0.0-final - 2005-09-05
+------------------------
+
+- Packaged 1.0.0 final with a tip of the hat to Christian Heimes who has
+  disappeared from our radar. We miss you, dude.
+  [stefan]
+
+- Made migration more tolerant of conflicting ids due to auto-created content
+  from manage_afterAdd or similar.  Fixes http://plone.org/collector/4468
+  [alecm]
+
+- Moved the exclude from navigation checkbox back to the properties tab, on
+  folderish objects, per request from limi.
+  [alecm]
+
+- Fixed two Smart folder issues: http://plone.org/collector/4594 we now fail
+  gracefully on bad limit settings, and http://plone.org/collector/4601 added
+  show/hide all link to the medatata control panel.
+  [alecm]
+
+- Changed Subject index/metadata title to Keywords, and added appropriate
+  description.
+  [alecm]
+
+1.0.0-rc5 - 2005-08-18
+----------------------
+
+- Fixed http://plone.org/collector/4429 by updating the modifySelectList.js
+  to deal with IE deficiencies.
+  [alecm]
+
+- Display files inline if they are of mimetype text/- thanks to LaurenceRowe
+  for the patch.
+  [alecm]
+
+- Fixed http://plone.org/collector/4448 index titles in smart folder's
+  criteria edit form were not translated
+  [hannosch]
+
+1.0.0-rc4 - 2005-08-09
+----------------------
+
+- Implemented the custom PUT_factory in both ATCTOrderedFolder and
+  ATCTBTreeFolder, as inheriting it from ATCTFolderMixin breaks when
+  LinguaPlone comes into play.
+  [stefan]
+
+- Enable syndication on topics by default.
+  [alecm]
+
+- Made inherit criteria field only appear when the parent of a Smart Folder
+  is also a Smart folder.
+  [alecm]
+
+- Added permissions checks to listSubTopics.
+  [alecm]
+
+- Remove Smart Folder syndication action as the action category has changed
+  in CMF.
+  [alecm]
+
+- Fixed bug in subtopic listing.
+  [alecm]
+
+1.0.0-rc3 - 2005-08-01
+----------------------
+
+- Change manage_copyObjects' permission to Copy or move, just copy from
+  Plone's PortalFolder.
+  [panjunyong]
+
+- Added method to fix the portal type name of CMF based objects
+  that were imported or copied from an unmigrated site to a migrated
+  site. The fix method is available in the type migration tab.
+  [tiran]
+
+- Added code to remove deprecated external methods.
+  [tiran]
+
+- Fixed an error in the module alias code for the exif library. Fixes
+  http://plone.org/collector/4352 - Uploading certain images causes ATCT
+  pickling errors
+  [tiran]
+
+- Expose some advanced migration options to the user by using new propertites
+  in the portal_atct tool.
+  [tiran]
+
+- Enhanced and updated documentation, mostly the feature documentations in
+  the portal_atct tool.
+  [tiran]
+
+- Moved migration related code from tool/atct.py to tool/migration.py. The
+  tool class was getting too long.
+  [tiran]
+
+1.0.0-rc2 - 2005-07-28
+----------------------
+
+- Updated requirements to CMFDynamicViewFTI 1.0.0 and ATRefBrowserWidget
+  1.1.
+  [tiran]
+
+- Fixed error in config loader code. The loader must stop after the first
+  conf file is loaded or the conf file is overwritten by the default file.
+  [panjunyong]
+
+- Add optional arguments to ATTopic.queryCatalog to make it compatible with
+  getFolderContents (optional batching, return full objects instead of
+  brains).  Make the album_view compatible with Smart Folders.
+  [alecm]
+
+- Added fix for exif issue when rescaling the original image.  The exif
+  information is now stored before the image is set.
+  [tiran]
+
+- Added a main macro to a few templates so they display nicely when used in
+  discussion_reply_form.
+  [alecm]
+
+- Added workaround for broken WebDAV/FTP clients like Mac OS X Finder.
+  PUT_factory is patched to use the default_PUT_factory which creates
+  standard Zope objects instead of CMF/AT content objects.
+  Thx to Nate and ATAudio for the idea.
+  [tiran]
+
+- Fixed http://members.plone.org/collector/4321 which was caused by three
+  distinct bugs. 1) The initial rename of the CMF object didn't preserve
+  order, but rather moved the object to the end of the list.  2) When
+  migrating folders the check for orderability on self.new always failed
+  because self.new is None at this point, so ordering wasn't attempted.
+  3) When going through the subobjects of a folder the position was noted,
+  and then the object deleted, the next object was now in the same position
+  as the prior one and the order was lost.  Now there is a seperate loop to
+  delete the objects after the loop which marks the order and preserves the
+  object.
+  [alecm]
+
+- Fixed some minor issues with the relative url and CMF uid handling in
+  ATFavorite.
+  [tiran]
+
+- Added AT and CMF uid migration to the migration system.
+  [tiran]
+
+- Fixed the unit test fixture and ATFavorite unit tests. Now tests aren't
+  running as Manager only when really needed.
+  [tiran]
+
+1.0.0-rc1 - 2005-07-23
+----------------------
+
+- Fixed error in version parsing which somehow made portal_types disappear.
+  [alecm]
+
+- Enabled swallowResizeExceptions by default and added warning that original
+  image resizing destroies the exif information before the data is saved.
+  [tiran]
+
+- Fixed spelling error in a security declaration of ATTopic.
+  [tiran]
+
+- Fixed critical migration issue. Locally added roles and locally changed
+  permissions are now migrated. Also added unit tests to verify the
+  migration.
+  [tiran]
+
+- Cleanup up unit tests and logging to reduce the noise
+  [tiran]
+
+- Removed 'MakerNote JPEGThumbnail' from the exif tags. Some cameras might
+  store the thumbnail in this tag.
+  [tiran]
+
+- Removed unused customization policy including unit test. Plone 2.1 always
+  installing ATCT.
+  [tiran]
+
+- Fixed 4330 Inter-version ATCT migration fails to migrate types
+  to CMFDynamicViewFTI. Migration to the new FTI is part of the version
+  migration again.
+  [tiran]
+
+- Added migration step + unit test for '(selected layout)' change.
+  [tiran]
+
+- Optimized getRawRelatedItems index addition. There is no need to reindex
+  the *whole* catalog when adding a *single* index.
+  [tiran]
+
+- Made the 'view' method aliases point to '(selected layout)' instead of
+  '(default view)'. This assures consistency with previous behaviour,
+  so that /view at the end of a URL always gets the item itself, ignoring
+  any default-page that may be set. Note that the 'view' *action* still
+  points to 'string:${object_url}', so that the 'view' tab, as well as
+  the '(Default)' target, still get '(dynamic view)' (and thus default
+  pages) for types other than File and Image.
+  [optilude]
+
+- Added migration/othermigrator.py for other migrators like CMFPhoto and
+  CMFPhotoAlbum. These migrators are written but not yet available to end
+  users. Some glue code needs to be written.
+  [tiran]
+
+- Moved exif library to a new directory thirdparty/. This directory should
+  contain all third party extensions that are required to run ATCT. Well
+  lib/ was added for this purpose the first time. thirdparty/ is added to
+  sys.path at position three which is right after Zope's instance home
+  and zope home in most cases.
+  [tiran]
+
+- Removed lot's of unused imports.
+  [tiran]
+
+- Fixed http://plone.org/collector/4083 for atct_album_view.pt
+  [ender]
+
+- Fixed
+  http://sf.net/tracker/?func=detail&atid=645337&aid=1215755&group_id=55262
+  by making the template sane.
+  [alecm]
+
+- Fixed get_size for ATImage. It should return only the file size of the
+  original image.
+  [tiran]
+
+- HEAD fixes for folder based content types.
+  [tiran]
+
+- Fixed permission issue in formatCatalogMetadata.py.
+  [alecm]
+
+- ConstrainTypes should default to disabled unless the parent object is of
+  the same portal type.
+  [alecm]
+
+- General get_size fixes. The get_size() method returns either the size
+  of the primary field or 1 for folders.
+  [tiran]
+
+- Moved not yet implemented URL upload feature out of the main code.
+  [tiran]
+
+- Fixed constraintypes's allowedContentTypes and invokeFactory to make
+  ENABLED mode work when the portal_type is different with parent's.
+  [panjunyong]
+
+- Added http access functionl http tests.
+  [tiran]
+
+- Added HEAD() method to Topic. If the topic has at least one criterion or
+  it can acquire a query 200 OK is return else 404 NotFound
+  [tiran]
+
+- Fixed [Plone] 4295/ 1 Request "ATCT and related items fields".
+  [tiran]
+
+- Added workaround for [ 1229206 ] 2.0.5 > 2.1 migration fails. Failing
+  reorder is mostly harmless.
+  [tiran]
+
+- Added workarounds for EXIF MakerNote errors. Some cameras are *really*
+  broken. Better no make notes than no exif infos at all.
+  [tiran]
+
+- Fixed and improved recent changes to cleanupFilename(). You can't remove
+  features w/o keeping backward compatibility and new features must be
+  bullet proof!
+  [tiran]
+
+- Clean up multiple Topic folder_contents tabs.
+  [alecm]
+
+- Readded a seperate _cleanupFilename method for ATCTFileContent to make it
+  better for patch.
+  [panjunyong]
+
+- Fixed http://plone.org/collector/4218 ATCT now uses normalizeString from
+  PloneTool.
+  [hannosch]
+
+- Fixed http://plone.org/collector/4170 Link checking is crazy and [ 1197068 ]
+  [hannosch]
+
+- made constraintypes default ACQUIRE mode works with portal_factory
+  [panjunyong]
+
+- Added Five/Zope3 interface bridges
+  [tiran]
+
+- Disabled text/x-python and text/plain-pre by default. Customize the
+  atcontenttypes.conf if you need them.
+  [tiran]
+
+- Removed relatedItems field from folderish objects.
+  [tiran]
+
+- Made download tab for File and Image invisible.
+  [tiran]
+
+- Fixed __bobo_traverse__ in ATImage, security check was unnecessary and
+  required anonymous to have 'View' in order for anyone to use it.
+  [alecm]
+
+- Yet another migration optimization: Added catalogpatch to the migration
+  system. The patch is altering portal_catalog.catalog_object and
+  uncatalog_object. Read migration/catalogpatch.py for more informations.
+  The catalog patch can be enabled by passing use_catalog_patch=True to
+  the migration functions.
+  [tiran]
+
+- Fixed last bit of http://plone.org/collector/3060  Don't let missing CMF
+  types crash portal_atct.disableCMFTypes().
+  [alecm]
+
+- Enhanced migration code:
+   - CatalogWalkerWithLevel is now based on ExtendedPathIndex
+     and behaves like CatalogWalker.
+   - Added walker arguments for transaction size, full transactions.
+     and savepoints. The migration system can use ZODB savepoints to
+     roll back to a sane point.
+   - Migrators are also registered by (src,dst) meta_type.
+   - The new function migratePortalType() can be used to migrate a single
+     content type by just passing the src and dst portal type to the
+     function. Both portal types must be registerd in portal_types and a
+     migration from src to dst meta_type must exist.
+
+  [tiran]
+
+- Don't catalog all types in _catalogTypesByMetatype it the passed list is
+  empty.
+  [jenner, alecm]
+
+- Modified templates to use the new pretty_title_or_id feature from plone.
+  [alecm]
+
+- Made atct_album_view use the catalog like other listings, and reuse the
+  nice macro from folder_listing.
+  [alecm]
+
+- Zope2.7 compatibility again: replaced import transaction with from
+  Products.CMFPlone import transaction.
+  [hannosch]
+
+- Some minor i18n tweaks.
+  [hannosch]
+
+- Updated INSTALL.txt for CMF 1.5. Zope 2.8 and more
+  [tiran]
+
+- CMF 1.5 / Zope2.8 compatibility:
+   - replaced CMFCorePermissions with permissions
+   - replaced get_transaction() with transaction
+   - removed product argument from TooolInit()
+   - logging.getLogger() and LOG.debug() etc.
+
+  [tiran]
+
+- Greatly enhanced logging during migration.
+  [tiran]
+
+- Chunked migration in smaller pieces. To be continued!
+  [tiran]
+
+- Fixed finalize migration so that it doesn't reinitialize the workflow
+  state.  Added unit tests for workflow, local_role, and owner migration.
+  [alecm]
+
+- Using migration code from DynamicViewFTI instead of own FTI migration code
+  [tiran]
+
+- Moved ATCTImageTransform class to lib
+  [tiran]
+
+- Added configuration options for PIL quality and resize algo.
+  [tiran]
+
+- Couple of bug fixes in the FTI->FTI w/ dynamic views migration
+  [rafrombrc]
+
+- Renamed max_size config option to max_file_size. Added max_image_dimension
+  config option to set the maximum border for the original size of an image.
+  [tiran]
+
+- Added some additional i18n markup.
+  [hannosch]
+
+Snapshot 2005-07-05
+-------------------
+
+- Don't run version migration when installing the first time. People should run it
+  after type migration.
+  [tiran]
+
+- Disabled full catalog updated after type migration. If people need it they could
+  do it after migration.
+  [tiran]
+
+- Added migration to DynamicFTIs.
+  [fschulze]
+
+- Changed index_html method on ATCTOrderedFolder to gracefully handle
+  situation where acquisition of index_html attribute returns None.
+  [rafrombrc]
+
+- Added syndication support to Smart Folders.
+  [alecm]
+
+- Fixing up aliases and actions for CMF 1.5-style browser-default code, using
+  CMFDynamicViewFTI.
+  [optilude]
+
+- Some code related to browser default is moved to CMFDynamicViewFTI. All
+  new versions of ATCT depend on this product now.
+  [tiran]
+
+- Fixed some tests on Windows. Image files must be opened with 'rb'.
+  [hannosch]
+
+- Moved around some fields. excludeFromNav is on the property sheet expect for
+  folderish items and discussion is on the main sheet expecpt for folderish and
+  Favorite.
+  [tiran]
+
+- Added finalizeATCTSchema function to move the fields in the right position
+  [tiran]
+
+- Fixed http://plone.org/collector/4127 permission incorrect on
+  listSubtopics.
+  [alecm]
+
+- Added migration to change the name of the Topic configlet.
+  [alecm]
+
+- Fixed http://members.plone.org/collector/4076, adding exclude_from_nav to
+  all content schemas.
+  [optilude]
+
+- Fixes for migration of cataloged non-contentish objects.  Now checking
+  meta_type and portal_type before migration steps.
+  [alecm]
+
+- Fixed http://members.plone.org/collector/3804 added validation of filename
+  when appropriate using check_id if available.
+  [alecm]
+
+- Added index for relatedItems, and migration to install it into already
+  installed instances.
+  [alecm]
+
+- Made the tool check if a config entry is available whenever it finds a new
+  index, so that it is automatically enabled if desirable, and to minimize
+  the need for migrations.
+  [alecm]
+
+- Disabled all indexes in criteria form by default, only those with
+  default values are automatically enabled.  This prevents things like ZWiki
+  from messing up our nice edit form.  They can be enabled and prettified in
+  the tool.
+  [alecm]
+
+- Spring i18n cleanup:
+  - changed i18n:domain from plone to atcontenttypes
+  - added missing i18n markup
+  - fixed page templates XHTML errors
+  - reindented and cleaned up whitespaces
+  [deo]
+
+- Made portal_type, selection, and reference criteria return reasonably
+  sorted lists.
+  [alecm]
+
+- Updated folderlisting actions to work properly with optiludes new
+  browserdefault behavior.
+  [alecm]
+
+- Localized date in Topic custom view.
+  [alecm]
+
+1.0-alpha2
+----------
+
+- Disabled history tab.
+  [tiran]
+
+- Fixed a small bug in the exif support. The signatur of the process_file
+  method has changed.
+  [tiran]
+
+- Catch KeyErrors on third party index types in the catalog.  Fix bad import
+  of list criteria.  Fix some unit tests that I broke, and added some more
+  (CriterionRegistry) in penance.
+  [alecm]
+
+- Updated exif lib.
+  [russf]
+
+- Added default values for the index/metadata friendly names, descriptions,
+  and criteria restrictions for Smart Folders using ZConfig.  Added the
+  ability to have an index with no criteria (useful for sort only criteria).
+  Made the descriptions for the criteria types more sensible (I hope this
+  doesn't screw up existing translations, but the current names are terrible).
+  Also, added some missing criteria related strings to manual.pot.
+  [alecm]
+
+- Added a getCriteriaUniqueWidgetAttr method to topics to compile things like
+  'helper_js' in one place for the edit form.
+  [alecm]
+
+- Fixed [ 1196809 ] Use getMutator(self) instead of mutator(self) in base.py.
+  [stefan]
+
+- Added new path criterion for use with ExtendedPathIndex that allows users
+  to select paths to search in using a sitemap.  This now uses the
+  lovely ATReferenceBrowserWidget.
+  [alecm]
+
+- Add Topic to the list of allowed sub-objects for Topic during Migration.
+  It was missing before because the class allowed_content_types property
+  was being overwritten by the one from CMFTopics.
+  [alecm]
+
+- BrowserDefaultMixin.getAvailableLayouts() now returns a list of tuples
+  instead of a DisplayList. Required by interface change in Plone.
+  [optilude]
+
+- Added cool icons for vCal/iCal export and image rotation/flipping made by
+  the legendary Vidar Anderson.
+  [blacktar, tiran]
+
+- Replaced AttributeStorage with AnnotationStorage for Document:text,
+  File:file, Image:image, Event:text and NewsItem:text,image. This requires
+  Archetypes 1.3.5.
+  [tiran]
+
+- Added new Current Author criterion which, when used with the Creator index,
+  gets all objects authored by the currently logged in user.  Also fixed some
+  permissions that were preventing normal users from viewing published topics.
+  Fixes issue [ 1176355 ].
+  [alecm]
+
+- Changed processForm to check for id conflicts using check_ids if available,
+  otherwise just `id in parent`. Also commit sub-transaction to make rename
+  work after portal_factory.
+  [alecm]
+
+- Added version migration system mostly copied from plone. Works automatically
+  during Plone 2.1 migration to bring plone 2.0 sites that started with ATCT
+  >= 0.2 up to date including changing and uncatalogging ATTopic criteria and
+  migrating CMF Topics.
+  [alecm]
+
+- Fixed a small bug in Topic migration introduced during the merge.
+  [alecm]
+
+- Made topic.addCriterion() return the newly added criterion object. That
+  it didn't before made things hard for python product developers.
+  [alecm]
+
+- Fixed bug #3773 (http://plone.org/collector/3773) validation check for
+  empty/non-existant files/images.
+  [alecm]
+
+- Changed the behavior of the date criteria to make the meaning of
+  each field clearer.  Now queries like 'More than 2 weeks ago' can be used,
+  and will behave as expected.  This causes some inconsistency in importing
+  CMFTopics.  Queries that were of the form 'min' 'x days' 'ago' are now
+  'less than x days ago' which is a min:max query with an upper limit of now.
+  The same goes for 'max' 'x days' 'ahead', all other queries should be close
+  to identical (modulo an earliestTime() where it makes sense).  The
+  inconsistency shouldn't be too important as the CMF date criteria was
+  entirely inscrutable.  Also changed some strings for criteria descriptions
+  for consistency. Fixes bug [ 1181418 ]. Thanks to Dean Jackson for filing
+  this bug and devising a reasonably usable UI.
+  [alecm]
+
+- Made the portal_types criteria work properly with either Types or
+  portal_types indexes.  Disabled types restrictions in TopicTool, now uses the
+  new Plone 2.1 search blacklist for types (site_properties.unfriendly_types).
+  This creates a plone 2.1 dependency. Also a change was made to the
+  atct_subtopic_form so that it now uses a macro from plone 2.1, this fixes
+  issue [ 1164541 ].
+  [alecm]
+
+- Reworked linked select lists for criteria to use custom XMLHTTPRequest code,
+  contained in modifySelectList.js.  I will eventually turn this into an AT
+  MasterSelectWidget for the master select of two linked select lists.
+  [alecm]
+
+- Added and enabled configlet for Topics, and unit tests for the criteria.
+  Fixed a persistency bug in TopicsTool, and a sort bug the in criteria
+  listing.  Added Missing.MV as a possible false value for Boolean Criterion.
+  [alecm]
+
+- Removed some configuration vars from config.py and the ZConfig schema.
+  [tiran]
+
+- Moved external types from ATCT to the new ATCTAddons product.
+  [tiran]
+
+- Remove path of filename from ATFile's title when upload a file using MS IE.
+  [panjunyong]
+
+- Merged uiteam-plip73-sanitize-short-names from the old plone
+  svn repos: diff http://svn.plone.org/svn/plone/ATContentTypes/branches/1.0@6168
+  http://svn.plone.org/svn/plone/ATContentTypes/branches/uiteam-plip73-sanitize-short-names
+  [tiran]
+
+- Added flag to determine whether an content object has undergone a successful
+  initial edit.  Use this flag along with detection of default naming to
+  rename object on inital edit.
+  [alecm]
+
+- Merged the topic tool branch into 1.0 XXX: insert history here.
+  [tiran]
+
+- Refactored ConstrainTypesMixin to support PLIP 78:
+
+   - DISABLED means use standard allowed types from portal_types
+   - ENABLED means use restrictions set
+   - ACQUIRE means use types from parent if parent is of same portal type,
+     else same as ENABLED (doesn't make sense to inherit from any content type)
+   - immediatelyAddableTypes field - for subset of allowed types to show in
+     the "add" menu
+   - turned off and removed disable constrain-types flag
+
+  [tiran]
+
+- Turn on TemplateMixin for everything - now directly supported in Plone
+  via "display" menu.
+  [tiran]
+
+- Merged plip #3 branch: auto ordering / sorting into the 1.0 branch.
+  Features / Changes:
+
+   - Added getObjPositioninParent and getObjSize as helper methods for
+     the catalog based folder listing to all types
+   - Added AutoSortSuppot and AutoOrderSupport to ATCT. AutoSortSupport is
+     used for the catalog based folder listing and AutoOrderSupport also
+     adds some auto ordering based on OrderedFolder
+   - Subclass ATFolder from AutoOrderSupport+AutoSortSupport, ATBTreeFolder
+     only from AutoSortSupport
+
+  [tiran]
+
+- ATEvent: Removed end date and start date from searchable text.
+  [tiran]
+
+- Implemented PLIP #2 of ATCT: using ZConfig to configure the types and
+  features of ATContentTypes.
+  [tiran]
+
+- Changed default output of Document, Event and News Item to text/x-safe-html.
+  X-safe-html is using CMFDefault.utils.scrubHTML to remove harmful tags
+  like script.
+  [tiran]
+
+- Merged tiran-notypesdir-branch. It's renaming and moving lot's of modules
+  around. All content types are in the content/ package, criteria were moved
+  to criteria/, tools to tool/ and modules like history aware to lib/. Also
+  all modules and packages were renamed to be lower case.
+  [tiran]
+
+- Added history support ATEvent's text field just like Document and News Item.
+  [tiran]
+
+- Updated README.txt and INSTALL.txt: new versions, update from ATCT 0.2 and
+  some other informations.
+  [tiran]
+
+- Changed permission of ATNewsItem.EditableBody() to ModifyPortalContent.
+  [tiran]
+
+- Added some tabs to the ZMI view of the portal_atct tool: Overview, rescale
+  migrate and recatalog. The usage of the external methods is deprecated in
+  favor of the tool.
+  [tiran]
+
+- Restored Plone 2.0.x compatibility.
+  [deo]
+
+- Don't show PloneSite, TempFolder and criteria in constrain types list.
+  [tiran]
+
+- Disabled validator for ATEvent's phone field. Some people have reported that
+  they have issues because numbers and especially extensions are handle
+  differently in every country. Also see [ 974102 ] Can't enter phone extension
+  in phone number field.
+  [tiran]
+
+- Added XXX report tool to ATCT. It's mostly a copy from the Zope3 XXX tools.
+  Note: XXX is a marker to show "here is something" wrong. It's not porn. :)
+  The tool also reports TODO and BBB (for backward compatibility).
+  [tiran]
+
+- Fixed [ 1049018 ] url field on Link doesn't allow mailto. Also added an
+  isMailto validator to validation and enhanced the isUrl validator to support
+  more protocols.
+  [tiran]
+
+- Fixed [ 1114696 ] use correct mimetype for reStructuredText and [ 1122135 ]
+  ATCT edit not preserving text type selection, not ATCT bug be renaming
+  text/restructured to text/x-rst.
+  [tiran]
+
+- Fixed [ 1158950 ] ATTopic default view wrong. This fix needs also a svn up
+  of CMFPlone 2.1.
+  [tiran]
+
+- Moved external storage based variants for ATFile and ATImage to a seperate
+  module. They won't make it in the official trunk unless the storage is
+  working well and the types are tested.
+  [tiran]
+
+- Added 'atct_album_view' and 'atct_album_image' templates based on the
+  templates of CMFPhotoAlbum.
+  [tiran]
+
+- Replaced the config vars for permissions with new permissions:
+
+   - ModifyConstrainTypes for constrain types mixin
+   - ModifyViewTemplate for template mixin
+   - ViewHistory for history mixin
+   - UploadViaURL for the new upload via url feature
+
+  By default the permissions are restricted to manager only.
+  [tiran]
+
+- Added new upload via url feature to upload a file or image using an url. The
+  file is downloaded from the remote server using urllib2. Since this feature
+  isn't finished it's not available by default.
+  [tiran]
+
+- Implemented some very useful functions based on CMFPhoto code for ATImage.
+  The new features are:
+
+   - getting the exif informations from images using Gene Cash's exif lib
+   - getting the image orientation from exif data (rotation and mirror)
+   - Rotating and flipping images using the PIL library incl. a new tab
+
+  [tiran]
+
+  The CMFPhoto exif and transform code was written by several ppl including
+  Oliver Baltzer and me. I'm unable to determine the other coders. Please
+  write me an email if you want credits for your great work!
+  [tiran]
+
+1.0-alpha1
+----------
+
+- Refactored huge parts of the migration suite. More later.
+  [tiran]
+
+- Fixed [ 1026616 ] Actions aren't migrated. Actions are migrated from
+  the cmf fti if an action with the id doesn't exist on the atct fti.
+  [tiran]
+
+- Migrating filter content types, allowed content types and allow
+  discussion from cmf fti to atct fti.
+  [tiran]
+
+- Updated requirements to CMFQuickinstaller 1.5/cvs,
+  [tiran]
+
+- Starting to remove the switch* and migrate* external methods.
+  [tiran]
+
+- Fixed default view of ATFolder. Pointing to view again makes a loop and
+  raises a hard to debug exception because TemplateMixin is trying to use
+  itself as default view which doesn't work.
+  [tiran]
+
+- FTests: install kupu and epoz when available. Moved function test suite to
+  ftests/
+  [tiran]
+
+- Fixed [ 1157812 ] ival/vcal action icons not available
+  [tiran]
+
+- Fixed ATTopic to use atct_edit like all other ATCT types.
+  [tiran]
+
+- Added ERRATA.txt which covers known issues.
+  [tiran]
+
+- Added integration tests for discussions.
+  [tiran]
+
+- Ported topic migration and criteria enhancements + additional criteria
+  from ender topic branch. Thx to Alec Mitchell for his great work! The new
+  criteria are: ATSelectionCriterion, ATDateRangeCriterion,
+  ATReferenceCriterion and ATBooleanCriterion.
+  [allecm, tiran]
+
+- Changed archetype names of criteria and removed the AT prefix.
+  [tiran]
+
+- Added unit tests for criteria and ATTopic.
+  [allecm, tiran]
+
+- Added translate tab when LinguaPlone is available at installation or
+  reinstallation time.
+  [tiran]
+
+- Added mini scale with 200x200.
+  [tiran]
+
+- Added integration tests for view and edit templates.
+  [tiran]
+
+- I made major changes to the unit test suite. Also I've added more field
+  tests, some important interface tests and cleaner and better base classes
+  for tests.
+  [tiran]
+
+- prepare ATFolder for use with TemplateMixin, use generic /view instead of
+  /folder_listing as default and immediate view.
+  [yenzenz]
+
+- Changed the way ConstrainTypes gets mixed in: Now ATCT is always subclassing
+  folders from the ConstrainTypes class and the schema is always in the folder
+  schema. Before this change ppl couldn't rely on the api. When the feature
+  is disabled the fields are not shown in the schema and the overwritten
+  methods are using a "shortcut" to the default methods.
+  [tiran]
+
+- Renamed some methods in the constrain mixin to start with _ct_ for a clean
+  name space.
+  [tiran]
+
+- Added a tag methods to NewsItem for its image. Also changed the caption from
+  TextField to StringField since it should contain only a small sentence or
+  similar. The caption is applied as title to the news item image.
+  [tiran]
+
+- When running unit tests all features like constrain mixin and template
+  mixin are forced to be enabled in order to keep the tests sane and to test
+  all features under all circumstances.
+  [tiran]
+
+- Dismembered the big beast schemata.py in types/ and types/criteria. The
+  schemata are in the same modules as the types.
+  [tiran]
+
+- Added content module which contains all important classes.
+  [tiran]
+
+- Replaced all `from foo import *` by explicit imports.
+  [tiran]
+
+- Used some code from Ben's great Bricolite product to have an add permission
+  per type. It allows fine granulated permission settings.
+  [tiran]
+
+- Fixed bug [ 1154073 ] criterion_edit_form.cpt(.metadata) has no default
+  action. The default action for the criterion edit form is save.
+  [tiran]
+
+- Added portal_atct tool. The new tool will be used for the new topic features
+  and for the plone control panel.
+  [tiran]
+
+- Interface geddon: Merged all interfaces into a single file.
+  [tiran]
+
+- Merged limi's ui branch which adds a text field to ATEvent and an image plus
+  image caption to ATNewsItem.
+  [limi, tiran]
+
+- Added related items reference field to all types using Danny's reference
+  browser widget. The ATReferenceBrowserWidget has to be available.
+  http://svn.plone.org/archetypes/MoreFieldsAndWidgets/ATReferenceBrowserWidget.
+  [tiran]
+
+- Removed old debian/ directory. I don't maintain it any more so there is no
+  reason of having it in the CVS.
+  [tiran]
+
+- Removed QuotaSupport.py. It should never be in the official tree of ATCT.
+  [tiran]
+
+- Introduced great chances in the migration system: The portal type names of
+  the ATCT types are the same as the CMF types. CMF types will be renamed at
+  install time.
+  [tiran]
+
+- Introduced ZConfig based configuration. It will replace the customconfig.py
+  file.
+  [tiran]
+
+0.2.0-rc5 - 2005-02-26
+----------------------
+
+- Updated requirements to Zope 2.7.4+, Python 2.3.4+ and AT 1.3.2-rc1+.
+  [tiran]
+
+- Cleaned up the migration suite a little bit and enhanced the doc strings.
+  [tiran]
+
+- Replaces the globalAllow hack by createTypeByName which doesn't make
+  security checks like "is the type implicitly or explicitly addable in the
+  folder". It shares the same codebase as the function from PloneUtilities
+  I once wrote to unfuck the create member area method.
+  [tiran]
+
+- Better traceback support inside the migration suite.
+  [tiran]
+
+- Added knob to toggle the installation of LinguaPlone in ATCT install.
+  [tiran]
+
+- Added explicit portal type name to all ATCT types.
+  [tiran]
+
+- Renamed newTypeFor to _actc_newTypeFor. The former name was confusing
+  people.
+  [tiran]
+
+- Added feature to access the name of the last editor through IHistoryAware.
+  [ctheune]
+
+- Fixed a bug in the migration walker. Empty folders aren't skipped any
+  more.
+  [panjunyong]
+
+- Increase debugging in Migration suite to find issues with missing types
+  in globalAllow.
+  [tiran]
+
+- Ported atct_topic_view icon fix from HEAD.
+  [tiran]
+
+- Don't create ATDocuments when uploading .pdf and .doc files.
+  [batlogg]
+
+- Resurrected warning message when we hit a broken object in the folder
+  migration.
+  [tiran]
+
+- Local roles and Creator are kept when migration.
+  [panjunyong]
+
+- Update requirements to the soon to release AT 1.3.2 version and SVN.
+  [tiran]
+
+- Added update_data and manage_edit compat. methods to ATFile and ATImage.
+  [tiran]
+
+- Added temporary fix for [ 1095242 ] EditableBody in ATNewsItem requires
+  Modify portal content. It will stay in ATNewsItem until Plone is fixed.
+  [tiran]
+
+- Fixed [ 1075193 ] infinite recursion in ATEvent. The __cmp__ hook was fixed
+  a while ago but I forgot to mention it here.
+  [tiran]
+
+- Fixed [ 1098347 ] validate_add_criterion.vpy has errors. The file was
+  DOS encoded.
+  [tiran]
+
+- Applied patch from [ 1104069 ] ATCT migration -- more ordering issues
+  which fixes some more ordering issues.
+  [hahnfeld]
+
+- atct_topic_view now doesn't call getObject() anymore and is a small
+  bit more performant. This also takes some burden from waking up objects.
+  (Bug 1079030)
+  [ctheune]
+
+- Made HTML the default content type for documents (and news items).
+  [ctheune]
+
+- Fixed [ 1080729 ] Wrong permissions for ATDocument.EditableText /
+  setFormat.
+  [tiran]
+
+- Use StdoutStringIO in migration to be more verbose.
+  [tiran]
+
+- Fixed atct_topcic_view: Make sure there is an object before referencing
+  attributes. This can typically happen if there are problems with the
+  AccessContentsInfo permission.
+  [tesdal]
+
+- Removed support of Python 2.1 and 2.2 from INSTALL.txt. Some code like
+  migration requires new features of Python 2.3 like generators.
+  [tiran]
+
+- Added note to INSTALL.txt that ATCT will soon drop support for Zope < 2.7.2.
+  [tiran]
+
+0.2.0-rc4 - 2004-11-30
+----------------------
+
+- ATTopic: Adding the criterion type to the generated id, so you can sort
+  and filter on the same field.
+  [ctheune]
+
+- Fixed unit tests to work without (and hopefully with too) runner again.
+  [ctheune]
+
+- Added feature that doesn't show users non-sortable criterions in the form.
+  [ctheune]
+
+- Added feature that removes double or stupid criterions (allowedRolesAndUsers,
+  id/getId).
+  [ctheune]
+
+- Sorting criterion lists (by their translations).
+  [ctheune]
+
+- Added german translation.
+  [ctheune]
+
+- More i18n support in the templates.
+  [ctheune]
+
+- Fixed _very_ annoying problem with bad ids. this should be bullet proof.
+  [ctheune]
+
+- Extended german translations.
+  [ctheune]
+
+- Fixed ATDocument to not kill uploaded files on the submission of an empty
+  text area.
+  [ctheune]
+
+- Fixed small bug in id protection.
+  [ctheune]
+
+- Fixed the case where the portal doesn't has a 'Members' folder or
+  when it has another name.
+  [deo]
+
+- Fixed [ 1055347 ] id problems when member preferences are set to not
+  display and [ 1055348 ] ATCTFile id problems with portal_factory in
+  ATCTFileContent._setATCTFileContent().
+  [tiran]
+
+- Disabled external storages based types because neither I nor MrTopf have
+  time to support it right now.
+  [tiran]
+
+- Added long description field and image tag to ATImage. Fixed [ 1056050 ]
+  Add longdesc to ATImage.
+  [tiran]
+
+- Fixed [ 1057691 ] Make ATContentTypes tests works with testrunner.py.
+  Thanks to dan_t.
+  [dan_t, tiran]
+
+- Added fix for [ 1063549 ] ATCT migration doesn't migrate order to
+  migrator.py.
+  [tiran]
+
+- Fixed [ 1067719 ] Install.py bug: property modified but not assigned by
+  removing unnecessary code from Install.py. AT itself is already handling
+  use_folder_tabs.
+  [tiran]
+
+0.2.0-rc3 - 2004-10-17
+----------------------
+
+- Added ATContentTypes Site customization policy.
+  [tiran]
+
+- Fixed [ 1041830 ] TypeError: cmf_edit() takes at least 3 non-keyword
+  arguments by changing the edit() implementation. A class var named
+  cmf_edit_kws was introduced to fix the issue.
+  [tiran]
+
+- ATLink: Use urlparse library to sanify the url to strip of additional
+  slashes. This is fixing http://plone.org/collector/3296 for ATCT.
+  [tiran]
+
+- Added support for the clear format feature of CMF Document.
+  [tiran]
+
+0.2.0-rc2 - 2004-10-06
+----------------------
+
+- Fixed problem with isIDAutoGenerated if the object was not wrapped in
+  a site.
+  [tiran]
+
+- Fixed download tab
+  [tiran]
+
+- Made image/file viewable when invoked directly by adding an index_html.
+  [tiran]
+
+- Replaced tag method of ATImage.
+  [tiran]
+
+- Fixed migration: Migration failed when there was a broken object in a
+  folder.
+  [tiran]
+
+- Fixed property migration: continue if the object already has this
+  attribute.
+  [tiran]
+
+- Added talkback discussion migration.
+  [tiran]
+
+- Set description as primary field for ATEvent. Also use an easier syntax
+  for setting description to isMetadata = False.
+  [tiran]
+
+- Renamed tab from history to last changes. Added big warning that the
+  history is based on zodb revisions.
+  [tiran]
+
+- Added ExtendingType howto (more to follow).
+  [tiran]
+
+- Recoded migration walkers to use a generator instead returning a list to
+  make them much more memory efficient.
+  [tiran]
+
+- Rewritten folder migration to use the depth inside the folder structur
+  instead of recursing into the full side.
+  [tiran]
+
+- Added a findStaledObjects external method to ATCT to find staled objects.
+  It is very useful to clean up a site before running the migration.
+  [tiran]
+
+- Fixed an ugly bug in ATDocument which was screwing up references on copy.
+  [tiran]
+
+- Merged ConstrainTypesMixin from the branch into the HEAD. Thanks to
+  Leonardo Rochael Almeida and Jens Werner Klein for their work.
+  [yenzens, rochael]
+
+- Fixed [ 1013853 ] File upload image shows mime-type in widget.
+  [tiran]
+
+- Removed call to markCreationFlag().
+  [tiran]
+
+- Fixed problem with ATFavorite: Migration to ATFavorite failed when the
+  object was gone or the user wasn't allowed to access it.
+  [tiran]
+
+- Fixed [ 1027070 ] Download permission. Now the download tab is shown for
+  all logged in users with View permission.
+  [tiran]
+
+- Fixed [ 1027093 ] Edit permission topics. The edit action of ATTopic now
+  requires ChangeTopic permission.
+  [tiran]
+
+- Fixed [ 1027094 ] folderlisting action for ATTopic. Removed folderlisting
+  action using a module level modify_fti function in ATTopic.py.
+  [tiran]
+
+- Fixed [ 1026379 ] ATDocument: skipField in setContentType throws error by
+  removing the custom setContentType method. It's not required any more.
+  [tiran]
+
+- Use a copy of the ATContentTypeSchema for every schema to make customizations
+  easier. Fixed [ 1027283 ] Schema editing very hard.
+  [tiran]
+
+- Fixed [ 1035380 ] Problems with createMemberArea and ATCT by adding a
+  setFormat() method to ATDocument which is using the translate method to
+  map between stupid CMF content types and real mime types.
+  [tiran]
+
+- Changed mx.Tidy test to work around [ 1033396 ] Error on refresh.
+  [tiran]
+
+- Fixed [ 1036267 ] Some typos in customconfig.py.
+  [tiran]
+
+- Fixed [ 1036255 ] switchCMF2ATCT: Favorite can't be added anymore. The type
+  was disabled inside the switch script.
+  [tiran]
+
+- Fixed [ 1027108 ] Inherit criteria not working.
+  [tiran]
+
+- Fixed [ 1030660 ] ConstrainMixin: All types are addable in an ATFolder by
+  using a default_method to initialize the list of addable types. The method
+  _globalAddableTypeIds was added to generate the list.
+  [tiran]
+
+- Fixed a possible problem in allowedContentTypes: Now the method is using
+  fti.isConstructionAllowed(context) to verify that the type is constructable.
+  [tiran]
+
+- Added an option called enableConstrainMixin which is a boolean value
+  (checkbox). When set to false the constrain mixin is disabled and the
+  default list of addable types is generated by using the default values
+  from portal_types.
+  [tiran]
+
+- Fixed [ 1030662 ] ConstrainMixin: Can't add an ATTopic to portal root by
+  not subclassing ConstrainTypesMixin for ATCTFolder. ATCTFolder must ONLY
+  to used as a base class for folderish but non folder types.
+  [tiran]
+
+- Added max_depth workaround and logging for [ 1039846 ] Ghosts in catalog
+  while migration and endless loop.
+  [tiran]
+
+0.2.0-rc1 - 2004-07-28
+----------------------
+
+- Removed 'contents' tab and 'add new item' menu from ATTopic.
+  [gotcha]
+
+- Changed criteria tab to table UI.
+  [gotcha]
+
+- Added message when clicking remove on criteria without selecting first.
+  [gotcha]
+
+- Depend on new AT 1.3.0-beta3 release.
+  [tiran]
+
+- Changed ZMI add name of topic related types to 'ATContentTypes Topic'.
+  [tiran]
+
+0.2-beta8 - 2004-07-21
+
+- Fixed validation problem with mx tidy validator and file uploads.
+  [tiran]
+
+- Changed time range ints in FriendlyDateCriterion to strings.
+  [tiran]
+
+- Reenable implicitly addable for ATFavorite.
+  [tiran]
+
+- Added validation for setup of sort order on topics.
+  [gotcha]
+
+- Added getSize, getHeight, getWidth methods and width/height attributes to
+  ATImage.
+  [tiran]
+
+0.2-beta7 - 2004-06-27
+
+- Moved around some code from ATFolder to ATContentType.
+  [tiran]
+
+- Fixed problem with index_html in ATBTreeFolder.
+  [tiran]
+
+- Fixed wrong portal type in Members ATBTreeFolder after migration.
+  [tiran]
+
+- Added initializeArchetype() to ATContentType base class and changed it to
+  use edit() instead of update() to make invokeFactory compatible with the old
+  cmf types syntax.
+  [tiran]
+
+- Fixed problem with _getPortalTypeName in initializeArchetype() phase of
+  object creation. Before the fix the portal type name was the original type
+  name (e.g. ATDocument) because it was changed after the initializeArchetype
+  call by the portal types tool. This issue has caused some wired problems with
+  LinguaPlone and workflows.
+  [tiran]
+
+- ATFile file field and ATImage image field are now language independend.
+  Later I will add a I18NImage and I18NFile if needed. Having a seperate type
+  for language dependend content for file and image is in my opinion easier to
+  understand for people. Besides it's like Zope3.
+  [tiran]
+
+- Removed TemplateMixin specific code from ATContentType base class. It was
+  moved to TemplateMixin some time ago.
+  [tiran]
+
+- Better error reporting for migration errors.
+  [tiran]
+
+- Fixed migration problem when LinguaPlone was installed.
+  [tiran]
+
+- Added - as valid char for ids.
+  [tiran]
+
+- Reindex only Type, portal_type and meta_type in switching script.
+  [tiran]
+
+- Wrapped field tests in a portal to fix a problem with missing tools.
+  [tiran]
+
+- Fixed migration problem of modified date and created date and also fixed
+  a problem with the unit test that was testing the right date. I was
+  trying to compare the mod date after editing the objects. %-)
+  [tiran]
+
+- Default type of ATDocument and ATNewsItem is configurable in
+  customconfig.py.
+  [tiran]
+
+- Fixed issues with content type registry and registered templates after
+  switching from or to ATCT mode.
+  [tiran]
+
+- Added validation to ATEvent: end date must be after start date.
+  [tiran]
+
+- First release with all unit tests of Archetypes, ATCT and CMFPlone
+  tiran-atct-integration branch passing!
+  [tiran]
+
+0.2-beta6 - 2004-06-20
+----------------------
+
+- Added max upload size validator to ATFile and ATImage.
+  [tiran]
+
+- Changed permission for download tab an ATFile. Dont confuse the average
+  user with the green edit frame.
+  [jensens]
+
+- Added a new class ATCTFileContent which contains some code for ATFile
+  and ATImage.
+  [tiran]
+
+- Set title from the filename of an uploaded file (ATImage, ATFile).
+  [tiran]
+
+- Added limit for ATTopic.
+  [gotcha]
+
+- Added EditableBody method to ATDocument.
+  [tiran]
+
+- Added validation of Criterion support for a specific index.
+  [gotcha]
+
+- Added edit() methods for backward compatibility to CMF.
+  [tiran]
+
+- Added restrained folder support.
+  [jensens]
+
+- Disabled restrained folder support until it's fixed.
+  [tiran]
+
+0.2-beta5
+---------
+
+- Fixed multiple small bugs and added features requested in the bug
+  tracker on sf.net.
+  [tiran]
+
+- Auto set id from filename for ATImage and ATFile.
+  [tiran]
+
+- Fixed python 2.1 compatibility problem with CMFCore/WorkflowTool.
+  Thanks to Tiziano Lattisi.
+  [tiran]
+
+- Moved to validation chains.
+  [tiran]
+
+- Fixed security of HistoryAwareMixin.
+  [tiran]
+
+- Added iCal/vCal export to AT Event.
+  [tiran]
+
+- Added LinguaPlone support.
+  [gotcha]
+
+0.2-beta4
+---------
+
+- Added AT Dyn Document. It's a CMFDynamicDocument like type that supports
+  rendering of TAL inside the body text.
+  [tiran]
+
+- Moved AT Dyn Document to a new product.
+  [tiran]
+
+- Fixed the migration.
+  [tiran]
+
+- Fixed and improved the switch from/to "ATCT as default types" methods.
+  [tiran]
+
+- Updated docs.
+  [tiran]
+
+- Moved helper methods to utils.
+  [tiran]
+
+- Switch objects in content_type_registry, too.
+  [lelit]
+
+- Added isSwitchedToATCT method.
+  [tiran]
+
+- Fixed misc UI problems like doubled folderContents.
+  [tiran]
+
+0.2-beta3 - 2004-04-20
+----------------------
+
+- Updated INSTALL.txt [tiran]
+
+- Fixed default view of ATBTreeFolder and ATFolder (stage 2). Both types
+  are using ATContentTypeSchema with TemplateMixinSchema.
+  [tiran]
+
+- Added a recreateATImageScales method as external method.
+  [tiran]
+
+- Added missing sharing tab to all ATCTContent based types.
+  [tiran]
+
+- Fixed AT Favorite.
+  [jensens]
+
+- Fixed atct_edit macro.
+  [tiran]
+
+0.2-beta2 - 2004-04-11
+----------------------
+
+- Update validators to reflect the last changes and fixes of the archetypes
+  and validation packages.
+  [tiran]
+
+- Added uml diagram of ATCT classes.
+  [tiran]
+
+- misc small fixes and improvements.
+  [tiran]
+
+0.2-beta1 - 2004-04-09
+----------------------
+
+- First official beta release for testing.
+  [tiran]
diff --git a/CHANGES.txt b/CHANGES.txt
deleted file mode 100644
index eb78323..0000000
--- a/CHANGES.txt
+++ /dev/null
@@ -1,2975 +0,0 @@
-Changelog
-=========
-
-2.2.8 (unreleased)
-------------------
-
-- White space only pep8 cleanup.  Not in the skins.
-  [maurits]
-
-- Removed use_folder_tabs from Topic.
-  [maurits]
-
-
-2.2.7 (2015-09-20)
-------------------
-
-- Pull value for link_redirect, types_view_action_in_listings
-  settings from the configuration registry.
-  [esteele]
-
-2.2.6 (2015-07-18)
-------------------
-
-- createObject moved to Archetpyes.
-  [tomgross]
-
-- Add CSRF authenticator in createObject script
-  [ebrehault]
-
-
-2.2.5 (2015-05-04)
-------------------
-
-- Move tests from PloneTestCase to plone.app.testing.
-  [tomgross,timo]
-
-- Set language settings in setupPortalContent on the new registry.
-  [timo]
-
-
-2.2.4 (2015-03-26)
-------------------
-
-- Merge PLIP 13091, plone.app.multilingual
-  [bloodbare]
-
-2.2.3 (2015-03-08)
-------------------
-
-- Define ``default_page_types`` in the ``propertiestool.xml`` profile.
-  [thet]
-
-- Add profile 'base' to allow addons to depend on ATContentTypes in Plone 5
-  without uninstalling the dexterity default-types.
-  [pbauer]
-
-
-2.2.2 (2014-10-23)
-------------------
-
-- Update template markup to match Barcelonetta
-  [albertcasado, sneridagh]
-
-- Remove deprecated imports.
-  [tomgross]
-
-
-2.2.1 (2014-04-13)
-------------------
-
-- Remove DL's from portalMessage templates.
-  https://github.com/plone/Products.CMFPlone/issues/153
-  [khink]
-
-
-2.2.0 (2014-03-01)
-------------------
-
-- Don't use spamProtect script in event_view; it doesn't do much.
-  [davisagli]
-
-- Use the new member search form as the layout for the Members folder.
-  [davisagli]
-
-- Moved Products.CMFFormController dependency
-  from Products.CMFPlone to Products.ATContentTypes (PLIP #13770)
-  [ale-rt]
-
-- Moved portal_factory and portal_metadata from Products.CMFPlone
-  to Products.ATContentTypes. (PLIP #13770)
-  [ale-rt]
-
-- Remove test_discussion test which tests the old discussion (pre Plone 4.1)
-  tool.
-  [timo]
-
-- Add 'content' profile which adds demo/test content.
-  This used to be in CMFPlone and is still used by PloneTestCase
-  in Plone 5.
-  [davisagli]
-
-- Update ICONMAP (.gif to .png).
-  [mathias.leimgruber]
-
-- Move content type profile definitions from Products.CMFPlone into here.
-  (Merge of PLIP 12344)
-  [davisagli et al.]
-
-- Remove the presentation mode setting from documents.
-  If the feature is still desired, use the plone.app.s5slideshow
-  addon.
-  [davisagli]
-
-- Removed backwards compatibility stub Products.ATReferenceBrowserWidget
-  [tomgross]
-
-- Don't throw a traceback if atct_topic_view is called on a non topic.
-  Redirect to the default view of context instead
-  [tomgross]
-
-- Move ATContent types views in there instead of CMFPlone
-  [encolpe]
-
-2.1.12 (2013-03-05)
--------------------
-
-- Fix missing references on copy of (old-style) Collection path
-  criterion and relatedItems on stock content using the schema
-  flag keepReferencesOnCopy.  Refs: https://dev.plone.org/ticket/9919
-  [seanupton]
-
-
-2.1.11 (2013-01-13)
--------------------
-
-- Fix deprecated import from Archetypes: use atapi instead of public
-  [toutpt]
-
-2.1.10 (2012-12-09)
--------------------
-
-- change string ownership to creators as it makes more sense
-  refs http://dev.plone.org/ticket/8725
-  [maartenkling]
-
-- Make sure ATTopic.queryCatalog cannot be published. This fixes
-  http://plone.org/products/plone/security/advisories/20121106/14
-  [davisagli]
-
-2.1.9 (2012-10-11)
-------------------
-
-- Silence false security warning during startup complaining about
-  `ATTopic.setText`.
-  [hannosch]
-
-- Notify modified when an image is transformed
-  through transform image tab.
-  This updates modification date and refresh Etag.
-  Refs http://dev.plone.org/ticket/13169.
-  [thomasdesvenain]
-
-- add @@download view for IFileContent
-  [vangheem]
-
-- Implement ISyndicatable for folder and topic in 4.3
-  [vangheem]
-
-
-2.1.8 (2012-08-18)
-------------------
-
-- Fixes album view - when scales generation failed,
-  file name appeared twice.
-  Refs http://dev.plone.org/ticket/13082.
-  [thomasdesvenain]
-
-- PEP 8 (ignoring W602, E301, E501 and E701).
-  [hvelarde]
-
-- Deprecated aliases were replaced on tests.
-  [hvelarde]
-
-- iCal export: Don't escape COLON character in TEXT property.
-  Fixes http://dev.plone.org/ticket/11540.
-  [patch by jenskl, applied by kleist]
-
-- Changed deprecated getSiteEncoding to hardcoded `utf-8`
-  [tom_gross]
-
-2.1.7 (2012-04-09)
-------------------
-
-- Restored icon display in topic tabular view
-  [tom_gross]
-
-
-2.1.6 (2012-01-26)
-------------------
-
-- Fix the change/modify permission used for changing or managing
-  Topic/Collection criteria.
-  [rossp]
-
-- Calculate the localized datetime string based on UTC time. Refs
-  https://dev.plone.org/ticket/12197.
-  [malthe, ajung]
-
-- Replace getParentNode() with __parent__ / aq_parent as appropriate.
-  [elro]
-
-2.1.5 (2011-10-06)
-------------------
-
-- Enable sorting by the getObjPositionInParent index.
-  [davisagli]
-
-
-2.1.4 (2011-08-31)
-------------------
-
-- Avoid critical error if for any reason,
-  constrain type mode is set to ACQUIRE on a folder at the root level.
-  Refs http://dev.plone.org/plone/ticket/11950#comment:3
-  [yulka, thomasdesvenain]
-
-- Fixed a bug in listSubtopics that caused unauthorized exceptions when
-  subtopics were private
-  [afd]
-
-- Make relatedItems sortable. Fixes http://dev.plone.org/plone/ticket/12098
-  [fRiSi]
-
-2.1.3 (2011-07-12)
-------------------
-
-- PortalType-criteria should use archetype_name as value when querying for the
-  Type-index. Fixes http://dev.plone.org/plone/ticket/11913
-  [WouterVH]
-
-- NonRefCatalogContent-objects, e.g. criteria, should not obtain a UUID.
-  Fixes http://dev.plone.org/plone/ticket/11904
-  [WouterVH]
-
-- When a folder is not of the same type than its parent,
-  if this folder acquires constraint,
-  the allowed types are the intersection of globally allowed types in folder
-  and locally allowed types of its parent.
-  This fixes http://dev.plone.org/plone/ticket/11950.
-  [thomasdesvenain]
-
-- For collections displayed in table view, show localized date-format.
-  Fixes http://dev.plone.org/plone/ticket/11155
-  [WouterVH]
-
-- Fixed: adding a disallowed subobject raises ValueError instead of Unauthorized
-  if disallow is related to content types restriction.
-  [thomasdesvenain]
-
-- Activate manual sorting on relatedItems field.
-  [toutpt]
-
-2.1.2 (2011-05-12)
-------------------
-
-- Use DateTime's built-in support to do `datetime.datetime` conversions.
-  [hannosch]
-
-- Fixed `atdocument` tests to be compatible with Archetypes 1.7.5.
-  [hannosch]
-
-- Optimize images and icon file sizes.
-  [hannosch]
-
-- The implementations of HEAD for folderish objects were severely outdated
-  and never made much sense to begin with. Replace with basic
-  WebdavResource.HEAD.
-  [stefan]
-
-2.1.1 (2011-02-04)
-------------------
-
-- Added support for the new BooleanIndex and UUIDIndex for collections.
-  [hannosch]
-
-- Remove superfluous and/or operator for "Item type" criterion.
-  This fixes http://dev.plone.org/plone/ticket/10882
-  [msmith64]
-
-2.1.0 (2011-01-03)
-------------------
-
-- Depend on ``Products.CMFPlone`` instead of ``Plone``.
-  [elro]
-
-- Added CSS id to subtopics-header in atct_topic_view.pt to allow styling.
-  [tom_gross]
-
-- Make sure topic criteria get a valid UUID using plone.uuid.
-  [toutpt, davisagli]
-
-2.0.7 (2011-01-03)
-------------------
-
-- Pass on batching arguments into the catalog query call inside the collections
-  `queryCatalog` method.
-  [hannosch]
-
-- Add Site Administrator role to various permissions, for forward compatibility
-  with Plone 4.1.
-  [davisagli]
-
-- Avoid some deprecation warnings under Zope 2.13.
-  [hannosch]
-
-- Add missing content-core macro definition to atct_topic_view template.
-  [davisagli]
-
-2.0.6 (2010-09-28)
-------------------
-
-- Fixed: album view of a collection of Image items
-  displayed images on three sections (images, folders, others)
-  due to atctListAlbum script bad use of topic API.
-  [thomasdesvenain]
-
-2.0.5 (2010-09-08)
-------------------
-
-- Changed order of input fields in ``atct_manageTopicIndex.cpt`` and
-  ``atct_manageTopicMetadata.cpt``. Checkbox field *must not* be the first one
-  because http request ``:records`` gets messed up otherwise. This fixes
-  http://dev.plone.org/plone/ticket/10896.
-  [petschki]
-
-- Added browser tests for collection management templates.
-  [petschki]
-
-2.0.4 (2010-08-08)
-------------------
-
-- Adjusted tests to reflect new sub-collections default policy.
-  [hannosch]
-
-2.0.3 (2010-08-04)
-------------------
-
-- Fixed a test failure.
-  [davisagli]
-
-2.0.2 (2010-07-29)
-------------------
-
-- Fixed missing manage_beforeDelete declaration on the LinguaPlone folder class
-  variation. This closes http://plone.org/products/linguaplone/issues/241.
-  [hannosch]
-
-- Corrected timezone name generation in the DateTime -> datetime conversion
-  code.
-  [mj]
-
-2.0.1 (2010-07-18)
-------------------
-
-- Provide some minimal backwards compatibility for the ancient favorite type.
-  This closes http://dev.plone.org/plone/ticket/10677.
-  [hannosch]
-
-- Remove duplicate batching navigation in atct_topic_view.
-  Refs http://dev.plone.org/plone/ticket/10754.
-  [esteele]
-
-- Removed try/except in atctListAlbum.py that had no effect because
-  calling aq_base in a skin script always throws an Unauthorized
-  error.  Refs http://dev.plone.org/plone/ticket/9796.
-  [maurits]
-
-- Make sure the atct_album_view calls getText with a full acquisition
-  chain to avoid an AttributeError: kupu_captioned_image, but avoid
-  getting the text field from an acquisition parent.
-  See http://dev.plone.org/plone/ticket/8463
-  and http://dev.plone.org/plone/ticket/8190.
-  [maurits]
-
-- Removed REQUEST parameter from searchResults call in queryCatalog() of
-  the Topic class. searchResults should not be called with regular
-  parameters AND REQUEST.
-  [do3cc]
-
-2.0 (2010-07-01)
-----------------
-
-- Removed some ancient hardcoded HTML in the Collection Settings control panel.
-  [limi]
-
-- Deleting objects referred by path criterions resulted in the collection
-  being neither view- nor editable. This fixes
-  http://dev.plone.org/plone/ticket/10708.
-  [fRiSi]
-
-2.0b11 (2010-06-13)
--------------------
-
-- Avoid deprecation warnings under Zope 2.13.
-  [hannosch]
-
-- Avoid testing dependency on zope.app.testing.
-  [hannosch]
-
-2.0b10 (2010-06-03)
--------------------
-
-- Ensure text is shown for the various Collection views.
-  Related to http://dev.plone.org/plone/changeset/36850
-  Which fixed http://dev.plone.org/plone/ticket/10226
-
-- Products.ATContentTypes.content.folder.ATBTreeFolder is now deprecated.
-  Normal ATFolders (as implemented in plone.app.folder) are now suitable for
-  storing large numbers of items in most cases.  If you need a folder that
-  doesn't track order at all, use a normal ATFolder (from plone.app.folder)
-  with the ordering attribute set to u'unordered'.
-  [davisagli]
-
-- Merge fix of test_queryCatalogOverrideCriteria from 1.3.6 branch
-  [toutpt]
-
-2.0b9 (2010-05-01)
-------------------
-
-- Values in dropdown "criterion_type" in criterion_edit_form template are now
-  properly translated. This closes http://dev.plone.org/plone/ticket/9715
-  [vincentfretin]
-
-
-2.1.4 - Unreleased
-------------------
-
-- Nothing changed yet.
-
-
-2.0b8 - 2010-05-01
-------------------
-
-- Check the ISO of the stored date, not the ISO8601 (with timezone) that is
-  now returned by the accessors
-  [davisagli]
-
-
-2.0b7 - 2010-04-12
-------------------
-
-- List subcollections, not all subobjects, in the subcollections view.
-  [elvix]
-
-- Fixed Collection control panel to show the prefs portlet again.
-  [davisagli]
-
-- Fixed displaying the links and icons when 'display as table' is checked.
-  Links are shown using 'typesUseViewActionInListings', icons are shown using
-  plone_view.getIcon.
-  [kcleong]
-
-
-2.0b6 - 2010-03-08
-------------------
-
-- Adjust the tests now that `DateTime` objects are stored with a time zone.
-  Refs http://dev.plone.org/plone/ticket/10141
-  [witsch]
-
-
-2.0b5 - 2010-03-07
-------------------
-
-- Adjust the tests regarding content id generation to expect the re-instated,
-  previous behavior.  Refs http://dev.plone.org/plone/ticket/8591
-  [witsch]
-
-
-2.0b4 - 2010-03-05
-------------------
-
-- Fix issues with sliding modification/publishing dates by using `DateTime`'s
-  `ISO8601` method instead of `ISO`, which doesn't include time zones.
-  Refs http://dev.plone.org/plone/ticket/10140, 10141 & 10171.
-  [davisagli, witsch]
-
-- Polished markup for "tabs simulation" on collection management screens to
-  play nice in Sunburst.
-  [spliter]
-
-- Fixed validation for atct_manageTopicMetadata.cpt and
-  atct_manageTopicIndex.cpt
-  [spliter]
-
-- Updating atct_manageTopicMetadata.cpt and atct_manageTopicIndex.cpt to
-  recent markup conventions. References
-  http://dev.plone.org/plone/ticket/9981.
-  [spliter]
-
-
-2.0b3 - 2010-02-17
-------------------
-
-- Removing redundant .documentContent markup.
-  This refs http://dev.plone.org/plone/ticket/10231.
-  [limi]
-
-- Updated templates to follow recent markup conventions.
-  References http://dev.plone.org/plone/ticket/9981
-  [spliter]
-
-- Fixed the portal type criterion to use the really user friendly types
-  vocabulary, which makes it independent of the types selection allowed for
-  searching. We also provide the proper translated title of all types and sort
-  by it now. This closes http://dev.plone.org/plone/ticket/9802.
-  [hannosch]
-
-2.0b2 - 2010-01-25
-------------------
-
-- Removed a displayContentsTab related hack from topic.py. Whatever this was
-  supposed to do, has long changed.
-  [hannosch]
-
-- Ported fix for http://dev.plone.org/plone/ticket/7324 - it was not possible
-  to empty Collection's 'text' field. Again fixes #7324
-  [naro]
-
-2.0b1 - 2010-01-02
-------------------
-
-- Don't specify PIL as a direct dependencies. It is not installed as an egg on
-  all platforms.
-  [hannosch]
-
-2.0a6 - 2009-12-27
-------------------
-
-- Respect "show content type icons" setting for collection table view.
-  This fixes http://dev.plone.org/plone/ticket/9630.
-  [dukebody]
-
-- Removed cmf_klass leftovers from tests.
-  [hannosch]
-
-- Removed useless manual tests of the icon names of all types.
-  [hannosch]
-
-- Removed overly creative code using access rules in webdav tests.
-  [hannosch]
-
-- Added manage_options restriction for new folderish types.
-  [hannosch]
-
-- Removed no longer required ATCTContent.manage_options restriction.
-  [hannosch]
-
-- Corrected package dependencies.
-  [hannosch]
-
-2.0a5 - 2009-12-16
-------------------
-
-- Apply patch from mr_savage. Fixes a broken call to normalizeString in
-  atct_topic_view. http://dev.plone.org/plone/ticket/9897
-  [esteele]
-
-2.0a4 - 2009-12-03
-------------------
-
-- Use "Modify portal content" and "Add portal content" for topic and event
-  instead of the type-specific permissions previously used.
-  [esteele]
-
-2.0a3 - 2009-12-03
-------------------
-
-- Replace the custom __bobo_traverse__ for handling image scales on ATNewsItem
-  and ATImage, because it's still needed for path traversal to scales to work.
-  This fixes http://dev.plone.org/plone/ticket/9706.
-  [davisagli]
-
-2.0a2 - 2009-12-02
-------------------
-
-- Attempt to Acquisition unwrap the context but allow the (potentially)
-  wrapped object through if unwrapping fails. This closes
-  http://dev.plone.org/old/plone/ticket/9796.
-  [matthewwilkes]
-
-- Adjust the reindex tests for the change I just made in Archetypes.
-  [davisagli]
-
-- Remove the eventType field and merge it into the subject field.
-  Closes http://dev.plone.org/old/plone/ticket/5058.
-  [rossp]
-
-2.0a1 - 2009-11-18
-------------------
-
-- Pass an _initializing_ flag when updating fields on object initialization,
-  to avoid indexing twice (since CMF indexes on the item's ObjectAddedEvent,
-  which now takes place after the call to initializeArchetype).
-  [davisagli]
-
-- Replaced date criterion "ago/from now" by "in the past/in the future".
-  [vincentfretin]
-
-- help_criteria_field_name msgid was used twice but with different default
-  messages. Fixed that.
-  [vincentfretin]
-
-- Made ATImage compute its ID from its title if provided. Closes
-  http://dev.plone.org/old/plone/ticket/9186.
-  [erikrose]
-
-- Changed the canonical location of interfaces to be in a subpackage called
-  interfaces in its standard plural form. Leave BBB imports behind in
-  interface.py.
-  [hannosch, davisagli, witsch]
-
-- Updated the ATCT tool upgrade to register the new tool with the portal
-  site manager.
-  [davisagli]
-
-- Subtopics shouldn't always acquire the 'start' query. Fixes
-  http://dev.plone.org/plone/ticket/8827
-  [pelle]
-
-- Use correct location for IObjectEvent.
-  [hannosch]
-
-- Removed test only PluggableAuthService dependency.
-  [hannosch]
-
-- Moved content type specific GenericSetup related functionality from CMFPlone
-  into this package.
-  [hannosch]
-
-- Drop the dependency on simplejson. It's integrated into Python 2.6 as json.
-  [hannosch]
-
-- Avoid acquiring `portal_properties` and call it via a proper API.
-  [hannosch]
-
-- Changed objectIds and objectValues calls to use the IContainer API.
-  [hannosch]
-
-- Don't assume regular (non-btree) folders for next/previous support.
-  [witsch]
-
-- Removed various dependencies on CMFPlone.
-  [hannosch]
-
-- Cleaned up tests some more. No longer rely on the testfixture extension
-  profile but adapt the tests to default Plone instead.
-  [hannosch]
-
-- Declare package dependencies and fixed deprecation warnings for use
-  of Globals.
-  [hannosch]
-
-- Changed parameter name at script getXMLSelectVocab.py from 'method' to
-  'vocab_method' to avoid getting overridden from ZPublisher.HTTPRequest.
-  This closes http://dev.plone.org/plone/ticket/6960.
-  [igbun]
-
-- Changed description label to summary for page and news item. This closes
-  http://dev.plone.org/plone/ticket/8700.
-  [hannosch]
-
-- Adjusted functional tests to not rely on login portlet.
-  [hannosch]
-
-- Moved a manage_renameObject method from the autosort code into the ordered
-  base class. It wasn't quite obvious, but the code was actually used.
-  [hannosch]
-
-- Removed icalendar package from the thirdparty folder. We don't use it
-  ourselves and it's easy installable nowadays for anyone who wants it.
-  [hannosch]
-
-- Removed never fully implemented autosort and urlupload modules.
-  [hannosch]
-
-- Removed the weird Zope2 Interface to zope.interface bridging code.
-  [hannosch]
-
-- Removed annoying license statements from the source files. We have a central
-  license.txt for that.
-  [hannosch]
-
-- Removed module aliases for content created before ATCT 1.0.
-  [hannosch]
-
-- Adjusted code to current Plone trunk after some deprecated code got removed.
-  Moved old_folder_contents code into atct_topic_subtopics.
-  [hannosch]
-
-- Fixed some test failures concerning criterion editing.
-  [hannosch]
-
-- Adjusted reindex sanity tests to changed order of the indexing calls.
-  [hannosch]
-
-- Increase the version number to 2.0, to make it possible to release minor
-  feature releases for the Plone 3.x line.
-  [hannosch]
-
-- Adjusted events test to new reality including zope.app.container and
-  DCWorkflow events.
-  [hannosch]
-
-- Removed half-implemented and unmaintained archive and adapters code.
-  [hannosch]
-
-- Removed unmaintained and unused Favorite content type.
-  [hannosch]
-
-- Removed references to external editor in comments.
-  [hannosch]
-
-- Removed empty test_getobjpositioninparent test from the base test case.
-  [hannosch]
-
-- Adjusted tests to reflect using png instead of gifs for content types.
-  [hannosch]
-
-- Use human understandable language for describing the relative date range
-  criteria. This closes http://dev.plone.org/plone/ticket/6841.
-  [hannosch]
-
-- Fixed duplicate link icon in the custom topic view. This closes
-  http://dev.plone.org/plone/ticket/6049.
-  [hannosch]
-
-- Removed confusing behavior of ATEvent mixing eventType and Subject.
-  This closes http://dev.plone.org/plone/ticket/5058.
-  [hannosch]
-
-- Added application/x-shockwave-flash to the inline mimetypes, so they can
-  be shown in a page without causing a download prompt. This closes
-  http://dev.plone.org/plone/ticket/5778.
-  [hannosch]
-
-- Removed a shortcut in the relative path criterion, which wouldn't work in
-  all cases. This closes http://dev.plone.org/plone/ticket/7785.
-  [hannosch]
-
-- The photo album view never showed the number of images in subfolders.
-  This closes http://dev.plone.org/plone/ticket/7759.
-  [hannosch]
-
-- Removed txng_get method from file content type. The hook is deprecated and
-  TextIndexNG 3 doesn't use it anymore. This closes
-  http://dev.plone.org/plone/ticket/4297.
-  [hannosch]
-
-- Fixed problem in parsing GPS information in exif metadata. This closes
-  http://dev.plone.org/plone/ticket/7057.
-  [hannosch]
-
-- Increased the maxlength for the url field of links from 255 to 511. This
-  closes http://dev.plone.org/plone/ticket/6422.
-  [hannosch]
-
-- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
-  Consider branching before this revision if release required before Plone 4.
-  [elro]
-
-- Remove __bobo_traverse__ from ATNewsItem and ATImage. Instead rely on the
-  generic ImageTraverse publish traverser from Archetypes and removed the
-  accompanying tests for it.
-  [wichert, hannosch]
-
-- Added tests for utils.dt2DT and utils.DT2dt that expose a bug as found
-  in Vice regarding converted dates becoming naive of timezones. Fixed.
-  [matthewwilkes]
-
-- Moved interface declarations from ZCML to the classes themselves.
-  [hannosch]
-
-- Ported editing.txt, events.txt, reindex_sanity.txt and traversal.txt tests
-  from Archetypes and adjusted them for the ATContentTypes specific behavior.
-  [hannosch]
-
-- Adjusted tests to changed test base classes of Archetypes.
-  [hannosch]
-
-- Removed the unmaintained utilities folder including the report scripts.
-  [hannosch]
-
-- Moved old_folder_contents over from CMFPlone as it is still used in
-  atct_topic_subtopics.pt.
-  [hannosch]
-
-- Fixed editing.txt browser test by opening 'http://nohost/plone' instead
-  of 'http://nohost/plone/login_form', because the latter incorrectly
-  redirected to 'http://nohost/plone/localhost'
-  [sirgarr]
-
-
-1.3.4 - unreleased
-------------------
-
-- Fix my previous Chameleon fix in criterion_edit_form.cpt, which broke
-  creation of new criteria. This closes http://dev.plone.org/ticket/9522
-  [davisagli]
-
-1.3.3 - 2009-09-06
-------------------
-
-- Subtopics shouldn't always acquire the 'start' query. Fixes
-  http://dev.plone.org/plone/ticket/8827
-  [pelle]
-
-- Internationalized "Also in this section" in atct_topic_subtopics.pt.
-  This closes http://dev.plone.org/plone/ticket/8383
-  [massimo]
-
-- Modified lib/constraintypes.py:getDefaultAddableTypes method to check
-  isConstructionAllowed only for allowed types, not for all content types
-  in portal_types. isConstructionAllowed was called twice for each types.
-  [vincentfretin]
-
-- Fix XHTML error in criterion_edit_form.cpt
-  [davisagli]
-
-1.3.2 2009-05-20
-----------------
-
-- Added proper multi-lingual handling to the reference criterion. It should
-  only show referenced content in the same or the neutral language if the
-  uid catalog is language aware.
-  [hannosch]
-
-1.3.1 2009-04-28
-----------------
-
-- Made it possible to set an empty value to a topic text field. This closes
-  http://dev.plone.org/plone/ticket/7324.
-  [dunlapm]
-
-1.3.0 - 2009-03-11
-------------------
-
-- Add support for generating iCal feeds for topics.
-  This refs http://plone.org/products/plone/roadmap/246.
-  [witsch]
-
-- Add view for rendering events as an iCal feed as proposed by PLIP 246,
-  http://plone.org/products/plone/roadmap/246.
-  [witsch]
-
-- Remove all code related to auto-sorting / auto-ordering folder as proposed
-  by PLIP 241, http://plone.org/products/plone/roadmap/241.
-  [witsch]
-
-- Made the relative path criterion less prone for funky Acquisition chains.
-  This refs http://dev.plone.org/plone/ticket/7686.
-  [hannosch, maurits]
-
-1.2.7 - 2009-01-30
-------------------
-
-- Don't assume regular (non-btree) folders for next/previous support.
-  [witsch]
-
-- Made Flash files display inline since Flash 10 requires this.  Fixes
-  http://dev.plone.org/plone/ticket/8624
-  [alecm]
-
-1.2.6 - 2008-10-06
-------------------
-
-- Fixed the tidy validation which errored out and rasied the wrong error.
-  This closes http://dev.plone.org/plone/ticket/8243.
-  [jlagarde, garbas, calvinhp]
-
-- Avoid acquiring getText from parent objects in atct_album_view. This refs
-  http://dev.plone.org/plone/ticket/8190.
-  [hannosch]
-
-- Already quoted characters in a "Link" url should not be quoted again
-  on edit. This closes http://dev.plone.org/plone/ticket/8336.
-  [witsch]
-
-- Removed parameters that has to be controlled through CSS from
-  atct_topic_view.pt. This closes http://dev.plone.org/plone/ticket/6803
-  [spliter]
-
-- Made it possible to set an empty value to a document text field.  This closes
-  http://dev.plone.org/plone/ticket/7324.
-  [davisagli]
-
-- Fixed invalid field condition that prevented you from being able to edit
-  the "Inherit Criteria" value on a collection once it had been created.
-  This closes http://dev.plone.org/plone/ticket/6527.
-  [hannosch]
-
-- Changed a msgid for the url field of events to have a distinct value.
-  This closes http://dev.plone.org/plone/ticket/8197.
-  [hannosch]
-
-- Changed "Contained Collections" text to "Also in this section".
-  This closes http://dev.plone.org/plone/ticket/8106.
-  [davisagli]
-
-- Changed default topic view to alway show body text (if available) even if the
-  collection does not have any results. This closes
-  http://dev.plone.org/plone/ticket/8270.
-  [dunlapm]
-
-1.2.5 - 2008-04-22
-------------------
-
-- Remove leading whitespace in hrefs.
-  [wichert]
-
-- Corrected i18n markup in schemata.py for the nextprevious field. This closes
-  http://dev.plone.org/plone/ticket/7517.
-  [hannosch]
-
-1.2.4 - 2008-01-03
-------------------
-
-- The edit tab in ZMI should not be displayed for ATImage/ATFIle objects.
-  http://dev.plone.org/archetypes/ticket/763
-  [deo]
-
-- Fixed #7467 http://dev.plone.org/plone/ticket/7467: Modify
-  "Item Type" criterion to store the untranslated Type instead
-  of portal_type, but to show the translated Type to the user.
-  Added a browser test for #6981
-  http://dev.plone.org/plone/ticket/6981 which is currently
-  disabled because the test browser does not translate pages
-  [sirgarr]
-
-1.2.3 - 2007-12-02
-------------------
-
-- Fixed http://dev.plone.org/plone/ticket/7102: uploading xhtml
-  files was not working correctly.  Thanks to lucie for the patch.
-  [alecm]
-
-- Fixed bug in portaltype criterion - it used portal type Title as both
-  key and value in multiselection widget, but Id and Title should be used.
-  Title (as DisplayList key) was incorrectly translated and caused #6981
-  http://dev.plone.org/plone/ticket/6981
-  [naro, jensens]
-
-- Fix Unicode encode error in formatCatalogMetadata.py when atct_topic_view.py
-  uses it to display in a table a text field (like 'location') whose contents
-  can't be encoded to ascii.
-  http://dev.plone.org/plone/ticket/7237
-  [stevem]
-
-- Reorder ATDateCriteria schema fields => more intuitive for users.
-  [zegor]
-
-- Fixed a mysterious error that happened when the ATContentTypeSchema
-  was directly used: the validation layer for the 'id' field wasn't
-  being initialized. This fixes http://dev.plone.org/plone/ticket/7221
-  [deo]
-
-1.2.2 - 2007-10-05
-------------------
-
-- Fix ATLink XSS issue.
-  [alecm, reinout]
-
-- Update catalogue indexes and metadata list in collection control panel when
-  'All fields' requested.
-  [ldr]
-
-- Files and Images don't need to enforce the Title field, since it is pulled
-  from the uploaded file name if missing. This fixes
-  http://dev.plone.org/plone/ticket/6051, which is a common source of user
-  frustration when uploading files/images.
-
-1.2.1 - 2007-09-12
-------------------
-
-- Make subject field read-only and invisible for events.  This fixes
-  http://dev.plone.org/plone/ticket/6967
-  [alecm]
-
-- Use widget views for standard view templates to simpify inline editing.
-  [limi]
-
-1.2.0-final - 2007-08-16
-------------------------
-
-- No longer enforce vocabularies on constraintypes fields, it's essentially
-  pointless, and not enforcing them helps workaround a strange bug:
-  http://dev.plone.org/plone/ticket/6734
-  [alecm]
-
-- Fixed i18n markup for event date validation error messages.
-  [hannosch]
-
-- Only show related items once instead of twice.
-  [wichert]
-
-1.2.0-rc2 - 2007-06-11
-----------------------
-
-- Add link validation to event field.
-  [alecm]
-
-1.2.0-rc1 - 2007-06-08
-----------------------
-
-- Fix concatenation issues between related items and query results in Topics.
-  [alecm]
-
-- Fixed migration bug in the atct tool migration. This closes
-  http://dev.plone.org/plone/ticket/6549 and
-  http://dev.plone.org/plone/ticket/6550.
-  [hannosch]
-
-- Show the text field and related items in the Topic view.
-  [wichert]
-
-- Properly i18n-ize imagetransforms TRANSPOSE_MAP by using ATCTMessageFactory.
-  [hannosch]
-
-- Removed all usage of PloneMessageFactory and replaced it by using ATCT's own
-  message factory. The extraction tools aren't able to deal with two different
-  message factories used for a single package.
-  [hannosch]
-
-- Fixed some i18n markup to use new ids for the collections related messages,
-  so these do not conflict with the old ones using smart folder.
-  [hannosch]
-
-- Hide the fields properly. The user may not have permission to edit them!
-  Also fix related typo-induced security hole.
-  [optilude]
-
-- Corrected cmf_edit_kws on the new ATDocumentBase class, which is used as a
-  base for ATNewsItem. It's absence caused a test failure in CMFPlone for the
-  text_format which needs special handling.
-  [hannosch]
-
-1.2.0-beta2 - 2007-04-29
-------------------------
-
-- Changed some status messages to type 'error'.
-  [hannosch]
-
-- Add support for updating existing topic indexes and metadata from
-  GenericSetup profiles
-  [wichert]
-
-- Removed tests/runalltests.py and tests/framework.py.
-  To run tests use Zope's testrunner:
-  ./bin/zopectl test --nowarn -s Products.ATContentTypes
-  [stefan]
-
-1.2.0-beta1 - 2007-03-04
-------------------------
-
-- Adjusted tests to deal with the new default vocabulary for boolean fields.
-  [wichert]
-
-- Adjusted tests to deal with the removal of the old CMF types from the
-  GenericSetup profiles. This refs http://dev.plone.org/plone/ticket/6156.
-  [hannosch]
-
-- Set ATFile's file field to be 'searchable'.  This means that it'll
-  be indexed correctly including transforms.  If you don't want this,
-  set your own 'index_method', or set 'searchable' to False in your
-  code.
-  [nouri]
-
-- Extinguished last occurrences of old portal_status_message in URL support.
-  [hannosch]
-
-- Merged plip174-reusable-i18n branch. Normalization of uploaded file names
-  is now based on plone.i18n.normalizer.
-  [hannosch]
-
-1.2.0-alpha2 - 2007-02-08
--------------------------
-
-- Removed various obsolete class attributes from content type classes. These
-  are managed by GenericSetup profiles now.
-  [hannosch]
-
-- Updated installation tests, as ATCT is no longer 'quickinstalled' anymore.
-  [hannosch]
-
-- removed schemata='default' for allowDiscussion field in finalizeATCTSchema.
-  It makes no sense and prevents customization by patching.
-  [ender]
-
-- Moved fields of content types into several schemas.
-  [fschulze]
-
-- Removed properties tab, as we now use the all-schemas-on-one-page feature
-  of Archetypes.
-  [fschulze]
-
-- Some general test cleanup in order to make the test output readable.
-  [hannosch]
-
-- Removed the view alias of index.html for all standard content types. This
-  makes it possible to create and upload files called index.html to the
-  site, which is quite common when batch importing old sites into the site.
-  As someone might rely on the former behaviour, we do not migrate
-  any existing type information. This closes
-  http://dev.plone.org/plone/ticket/4837.
-  [hannosch]
-
-- Got rid of last remnants of zLOG. Grep is our friend!
-  [stefan]
-
-1.2.0-alpha1 - 2006-10-02
--------------------------
-
-- Fixed some minor i18n issues.
-  [hannosch]
-
-- Reworked i18n of Python scripts to use the new MessageFactory and based
-  portal status messages on the statusmessages product.
-  [hannosch]
-
-- Changed criteria definitions to use Zope3 Messages for localizing
-  descriptions and labels instead of the old Archetypes approach using special
-  attributes. Added a ATCTMessageFactory for the Messages in the
-  'atcontenttypes' i18n domain.
-  [hannosch]
-
-- Fixed some imports of transaction_note from CMFPlone to CMFPlone.utils.
-  [hannosch]
-
-- Fixed deprecation warnings for TALValidator.
-  [hannosch]
-
-- Changed type definitions to use Zope3 Messages for localizing descriptions
-  and labels instead of the old Archetypes approach using special attributes.
-  [hannosch]
-
-- Removed ZConfig based configuration of the topic tool as it is now handled
-  by the GenericSetup profile. Removed magical recreation of indexes and
-  metadata on get* calls.
-  [hannosch]
-
-- Added an exportimport handler for the ATCT tool which is used by the Plone
-  base profile.
-  [hannosch]
-
-- Adjusted some deprecated getActionById to getActionInfo calls.
-  [hannosch]
-
-- Removed five:traversable statements as they are no longer needed in Zope2.10.
-  [hannosch]
-
-- Simplified test setup and adjusted some tests accordingly.
-  [hannosch]
-
-- Adjusted import locations of Archetypes.public to Archetypes.atapi for AT1.5.
-  [hannosch]
-
-1.1.4-final - 2006-12-18
-------------------------
-
-- Reenabled editing the names and descriptions of the smart folder indices
-  and metadata.
-  [alecm]
-
-- Setting a sort criterion should not prevent search criteria for the same
-  field from being set.  Fixes http://dev.plone.org/plone/ticket/5435
-  [alecm]
-
-- ATEvent.setSubject needs to set multiple EventTypes to avoid pruning
-  the subject list. Applied patch from rossp. Fixes
-  http://dev.plone.org/plone/ticket/5770
-  [alecm]
-
-- Add alt attributes to Topic table view type icons.  This closes
-  http://dev.plone.org/plone/ticket/5562
-  [alecm]
-
-- Fixed validation of filenames uploaded from IE.  This closes
-  http://dev.plone.org/plone/ticket/5889.
-  [alecm]
-
-- Reenabled translation of AJAX-ified smart folder info. This closes
-  http://dev.plone.org/plone/ticket/5806.
-  [hannosch]
-
-- Got rid of last remnants of zLOG. Grep is our friend!
-  [stefan]
-
-- Added a relative path criterion for Smart Folders to allow search paths
-  like "../somefolder"
-  [ender, elvix]
-
-1.1.3-final - 2006-09-20
-------------------------
-
-- Disabled translation of AJAX-ified smart folder info to temporarily remedy
-  http://dev.plone.org/plone/ticket/5806
-  [jensens]
-
-1.1.2-final - 2006-09-11
-------------------------
-
-- Changed integration tests to test Unicode titles instead of plain ascii.
-  [hannosch]
-
-- Added review state coloring to atct_topic_view. This closes
-  http://dev.plone.org/plone/ticket/5481.
-  [hannosch]
-
-- Don't setup a 'ATCT Setup' control panel category anymore, it's not used.
-  [hannosch]
-
-1.1.1-final - 2006-06-08
-------------------------
-
-- Changed two logging.PROBLEM to logging.WARNING. PROBLEM level was zLOG only.
-  [hannosch]
-
-1.1.0-final - 2006-06-03
-------------------------
-
-- Added TextIndexNG3 to list of indexes.
-  [ajung]
-
-- Moved css rules for the photo album view inside Plone's public.css, instead
-  of having them inline in the template. This way they can be overridden.
-  This closes http://dev.plone.org/plone/ticket/4765.
-  [hannosch]
-
-- Made ATTopic queryCatalog properly support b_size, thanks to patch from
-  Bader. Fixes http://dev.plone.org/plone/ticket/5526
-  [alecm]
-
-- Removed the unused locales folder. Translation files are part of the
-  PloneTranslation product.
-  [hannosch]
-
-- Uploading HTML via WebDAV now supports reading <title> tag to use
-  as the title of the new content item.
-  http://dev.plone.org/plone/ticket/4877
-  [rocky]
-
-- Semi-intelligent sniffing adding for figuring out the charset
-  when using mx.Tidy. This closes http://dev.plone.org/plone/ticket/5006.
-  [rocky]
-
-- Internal links didn't work for event url field. This closes
-  http://dev.plone.org/plone/ticket/5004
-  [hannosch]
-
-- Various fixes for the iCal/vCal export (thx Steve for the patch):
-
-    - timezone problems
-    - folding lines longer than 75 octests (per RFC)
-    - escaping commas, colons and semi-colons (per RFC)
-    - adding URL and CONTACT fields
-
-  This closes http://dev.plone.org/plone/ticket/4512.
-  [hannosch]
-
-- the EventType field in an event lists all relevant event types for
-  an event, not just one. Modify the iCal output logic to properly
-  produce comma-seperated event types. Fixes
-  http://dev.plone.org/plone/ticket/4881
-  [wichert]
-
-- Applied patch from Plone issue #5384 to do proper UTC conversion for iCal
-  and vCal output. Added tests. Fixes #5384.
-  [alecm]
-
-- Made use Zope 3 interfaces for constrain types and browser default. Depends
-  on changes to CMFDynamicViewFTI trunk and Plone 2.5 branch.
-  [optildue]
-
-- Made HistoryAwareMixin a subclass of Archetypes ATHistoryAwareMixin, which
-  is a working historyaware implementation for archetypes.
-  [mj]
-
-- Added a z3 module and an alias for BBB (Ploneboard).
-  [alecm]
-
-- Updated thirdparty/icalendar to version iCalendar-0.11. Dropped the
-  svn:external to codespeak SVN. This has the side-effect of ridding us
-  of the annoying test failure with the Zope 2.9 testrunner which would
-  pick up the icalendar tests even though they are neither importable nor
-  pass in this setting.
-  [stefan]
-
-1.1.0-beta1
------------
-
-- Integrated ftests into normal tests. Removed dependency on Archetypes tests.
-  [hannosch]
-
-- Update transaction imports, remove subtransaction usage, use python logger
-  everywhere, other deprecation related cleanup, whitespace cleanup.
-  [alecm]
-
-- Use KeywordWidget for eventType.
-  [fschulze]
-
-- Body of news items and event types can be empty now.
-  [fschulze]
-
-1.1.0-alpha2 - 2006-02-22
--------------------------
-
-- Reorganized z3 interfaces into the interface package, created a complete
-  set of z3 interfaces, as well as tests for those interfaces.
-  [jfroche, russf]
-
-- Added some adapters and views for exporting Folders and Documents (and
-  other types, given additional configuration) as zip files.
-  [jfroche, russf]
-
-1.1.0-alpha1 - 2006-01-26
--------------------------
-
-- make trunk compatible with cmf > 1.5, by changing references to
-  cmfcore.permissions and removing use of format_stx
-  [k_vertigo, hannosch]
-
-1.0.6-final - unreleased
-------------------------
-
-- Disabled the possibility to change index and metadata names and descriptions
-  on the smart folder configuration screens. Saving these with a browser locale
-  set to non-english would destroy the internationalization of all these texts.
-  This closes http://dev.plone.org/plone/ticket/5612.
-  [hannosch]
-
-- Sanitized some more index and metadata friendly names and descriptions.
-  [hannosch]
-
-- Changed index friendly name of index id to the same as the getId index.
-  [hannosch]
-
-- We don't translate the catalog and metadata id's anymore. Removed i18n markup
-  from the configuration screens.
-  [hannosch]
-
-1.0.5-final - 2006-06-03
-------------------------
-
-- Made ATTopic queryCatalog properly support b_size, thanks to patch from
-  Bader.  Fixes http://dev.plone.org/plone/ticket/5526
-  [alecm]
-
-- Added TextIndexNG3 to list of indexes.
-  [ajung]
-
-1.0.4-final - 2006-05-17
-------------------------
-
-- Folded ftests into unit tests. The distinction was arbitrary anyway.
-  [stefan]
-
-- Removed the unused locales folder. Translation files are part of the
-  PloneTranslation product.
-  [hannosch]
-
-- Uploading HTML via WebDAV now supports reading <title> tag to use
-  as the title of the new content item.
-  http://dev.plone.org/plone/ticket/4877
-  [rocky]
-
-- Semi-intelligent sniffing adding for figuring out the charset
-  when using mx.Tidy.  This closes
-  http://dev.plone.org/plone/ticket/5006
-  [rocky]
-
-- Internal links didn't work for event url field. This closes
-  http://dev.plone.org/plone/ticket/5004
-  [hannosch]
-
-- the EventType field in an event lists all relevant event types for
-  an event, not just one. Modify the iCal output logic to properly
-  produce comma-seperated event types. Fixes
-  http://dev.plone.org/plone/ticket/4881
-  [wichert]
-
-- Updated thirdparty/icalendar to version iCalendar-0.11. Dropped the
-  svn:external to codespeak SVN. This has the side-effect of ridding us
-  of the annoying test failure with the Zope 2.9 testrunner which would
-  pick up the icalendar tests even though they are neither importable nor
-  pass in this setting.
-  [stefan]
-
-- Made manage_afterPUT and manage_afterMKCOL use PATH_INFO to get at
-  the original id for usage in the Title, so that in a WebDAV
-  name-mangling environment the Title gets set to the original
-  filename.
-  [sidnei]
-
-- Added test for ATFolder and ATBTreeFolder MKCOL.
-  [sidnei]
-
-- Modify getLocallyAllowedTypes and getImmediatelyAddableTypes to take
-  a context in which type creation is to be tested. This is used to determine
-  if a user can create a type in the current context instead of in a parent
-  folder.
-  http://dev.plone.org/plone/ticket/5255
-  [wichert]
-
-1.0.3-final - 2006-01-20
-------------------------
-
-- Fixed non-clickable thumbnails in thumbnail view for IE.
-  http://dev.plone.org/plone/ticket/5119
-  [hannosch]
-
-1.0.2-final - 2006-01-03
-------------------------
-
-- Fixed #5028: constraintypes.py doesn't work properly with PortalFactory when
-  acquiring types.
-  http://dev.plone.org/plone/ticket/5028
-  [panjunyong]
-
-- fixed styles for thumbnailview.
-  [spliter]
-
-- content/events.py: made event type look-up respect dynamic types.
-  [raphael]
-
-- Don't return "n/a" in get_size(). This fixes Plone's #5030.
-  [nouri]
-
-- Fixed #5026: Setting a ZCatalog sort limit was interfering with result
-  batching. Only use the sort_limit optimization when batching is disabled.
-  http://dev.plone.org/plone/ticket/5026
-  [alecm]
-
-- Fixed #4567: Added portal_atct method to fix portal_type on CMF objects that
-  have empty portal_type because they were incorrectly instantiated. Such
-  situations caused migration to fail. This method is available in the type
-  migration form, and also runs automatically on install.
-  http://dev.plone.org/plone/ticket/4567
-  [alecm]
-
-- Fixed #4937: Removed list criteria from text indices, because it makes no
-  sense, AND and OR must be used explicitly.
-  http://dev.plone.org/plone/ticket/4937
-  [alecm]
-
-- Added migration for #4865 to fix the grammar on existing instances.
-  [alecm]
-
-- Made the criteria to index type mapping a little more sane.
-  [alecm]
-
-- Fixed #4915: Smart Folders with path criteria where throwing errors on
-  unindex due to partial reference support.
-  http://dev.plone.org/plone/ticket/4915
-  [alecm]
-
-- Added And/Or operator to selection criterion.
-  [alecm]
-
-- Fixed #4590: Subfolders inherit the selected layout of their parent folders
-  if they are of the same type.
-  http://dev.plone.org/plone/ticket/4590
-  [alecm]
-
-- Fixed #4512 - vCal export was not working with outlook.
-  http://dev.plone.org/plone/ticket/4512.
-  [hannosch]
-
-- Use the ControlledMarshaller from the Marshall product if
-  available. Fallbacks to existing marshaller.
-  [sidnei]
-
-- Enable __dav_marshall__ by default on ATTopic, ATFolder and
-  ATBTreeFolder.
-  [sidnei]
-
-- Fixed #4572 and #4909 - Unicode problems with using kupu together
-  with mxTidy
-  [hannosch]
-
-- Fixed #4865 - Spelling error on location criteria.
-  [hannosch]
-
-- On invalid mimetypes the getIcon method of ATFile doesn't throw an exception
-  anymore but generates a log entry. This should minimize some migration
-  problems or at least tell the exact object with an invalid mimetype.
-  This should fix http://plone.org/collector/4979.
-  [hannosch]
-
-- Correct some wrong security settings.
-  [hannosch]
-
-- Code cleanup removing lots of unused import statements.
-  [hannosch]
-
-- Fixed two issues with PathCriterion.  It was using depth 0 to get subfolders,
-  the proper parameter is depth -1.  Also, in order to properly handle the
-  references it holds, it must itself be cataloged in the UID catalog, and
-  have its references cataloged.
-  [alecm]
-
-- Fixed issue causing archetypes schema update to fail due to topic not
-  checking syndication state in initializeArchetype.
-  [alecm]
-
-- Added missing alternate views for folderish types.
-  [alecm]
-
-1.0.1-final - 2005-10-13
-------------------------
-
-- Fixes for http://plone.org/collector/4709 __bobo_traverse__ doesn't
-  need or want a RESPONSE argument.
-  [alecm]
-
-- Fixed http://plone.org/collector/4734 It is generally a bad idea
-  to check permissions in bobo_traverse methods, especially permissions
-  that don't exist, especially if you then try to raise an exception that
-  you haven't actually imported.
-  [alecm]
-
-- Fix two small i18n default text inconsistencies
-  [hannosch]
-
-1.0.0-final - 2005-09-05
-------------------------
-
-- Packaged 1.0.0 final with a tip of the hat to Christian Heimes who has
-  disappeared from our radar. We miss you, dude.
-  [stefan]
-
-- Made migration more tolerant of conflicting ids due to auto-created content
-  from manage_afterAdd or similar.  Fixes http://plone.org/collector/4468
-  [alecm]
-
-- Moved the exclude from navigation checkbox back to the properties tab, on
-  folderish objects, per request from limi.
-  [alecm]
-
-- Fixed two Smart folder issues: http://plone.org/collector/4594 we now fail
-  gracefully on bad limit settings, and http://plone.org/collector/4601 added
-  show/hide all link to the medatata control panel.
-  [alecm]
-
-- Changed Subject index/metadata title to Keywords, and added appropriate
-  description.
-  [alecm]
-
-1.0.0-rc5 - 2005-08-18
-----------------------
-
-- Fixed http://plone.org/collector/4429 by updating the modifySelectList.js
-  to deal with IE deficiencies.
-  [alecm]
-
-- Display files inline if they are of mimetype text/- thanks to LaurenceRowe
-  for the patch.
-  [alecm]
-
-- Fixed http://plone.org/collector/4448 index titles in smart folder's
-  criteria edit form were not translated
-  [hannosch]
-
-1.0.0-rc4 - 2005-08-09
-----------------------
-
-- Implemented the custom PUT_factory in both ATCTOrderedFolder and
-  ATCTBTreeFolder, as inheriting it from ATCTFolderMixin breaks when
-  LinguaPlone comes into play.
-  [stefan]
-
-- Enable syndication on topics by default.
-  [alecm]
-
-- Made inherit criteria field only appear when the parent of a Smart Folder
-  is also a Smart folder.
-  [alecm]
-
-- Added permissions checks to listSubTopics.
-  [alecm]
-
-- Remove Smart Folder syndication action as the action category has changed
-  in CMF.
-  [alecm]
-
-- Fixed bug in subtopic listing.
-  [alecm]
-
-1.0.0-rc3 - 2005-08-01
-----------------------
-
-- Change manage_copyObjects' permission to Copy or move, just copy from
-  Plone's PortalFolder.
-  [panjunyong]
-
-- Added method to fix the portal type name of CMF based objects
-  that were imported or copied from an unmigrated site to a migrated
-  site. The fix method is available in the type migration tab.
-  [tiran]
-
-- Added code to remove deprecated external methods.
-  [tiran]
-
-- Fixed an error in the module alias code for the exif library. Fixes
-  http://plone.org/collector/4352 - Uploading certain images causes ATCT
-  pickling errors
-  [tiran]
-
-- Expose some advanced migration options to the user by using new propertites
-  in the portal_atct tool.
-  [tiran]
-
-- Enhanced and updated documentation, mostly the feature documentations in
-  the portal_atct tool.
-  [tiran]
-
-- Moved migration related code from tool/atct.py to tool/migration.py. The
-  tool class was getting too long.
-  [tiran]
-
-1.0.0-rc2 - 2005-07-28
-----------------------
-
-- Updated requirements to CMFDynamicViewFTI 1.0.0 and ATRefBrowserWidget
-  1.1.
-  [tiran]
-
-- Fixed error in config loader code. The loader must stop after the first
-  conf file is loaded or the conf file is overwritten by the default file.
-  [panjunyong]
-
-- Add optional arguments to ATTopic.queryCatalog to make it compatible with
-  getFolderContents (optional batching, return full objects instead of
-  brains).  Make the album_view compatible with Smart Folders.
-  [alecm]
-
-- Added fix for exif issue when rescaling the original image.  The exif
-  information is now stored before the image is set.
-  [tiran]
-
-- Added a main macro to a few templates so they display nicely when used in
-  discussion_reply_form.
-  [alecm]
-
-- Added workaround for broken WebDAV/FTP clients like Mac OS X Finder.
-  PUT_factory is patched to use the default_PUT_factory which creates
-  standard Zope objects instead of CMF/AT content objects.
-  Thx to Nate and ATAudio for the idea.
-  [tiran]
-
-- Fixed http://members.plone.org/collector/4321 which was caused by three
-  distinct bugs. 1) The initial rename of the CMF object didn't preserve
-  order, but rather moved the object to the end of the list.  2) When
-  migrating folders the check for orderability on self.new always failed
-  because self.new is None at this point, so ordering wasn't attempted.
-  3) When going through the subobjects of a folder the position was noted,
-  and then the object deleted, the next object was now in the same position
-  as the prior one and the order was lost.  Now there is a seperate loop to
-  delete the objects after the loop which marks the order and preserves the
-  object.
-  [alecm]
-
-- Fixed some minor issues with the relative url and CMF uid handling in
-  ATFavorite.
-  [tiran]
-
-- Added AT and CMF uid migration to the migration system.
-  [tiran]
-
-- Fixed the unit test fixture and ATFavorite unit tests. Now tests aren't
-  running as Manager only when really needed.
-  [tiran]
-
-1.0.0-rc1 - 2005-07-23
-----------------------
-
-- Fixed error in version parsing which somehow made portal_types disappear.
-  [alecm]
-
-- Enabled swallowResizeExceptions by default and added warning that original
-  image resizing destroies the exif information before the data is saved.
-  [tiran]
-
-- Fixed spelling error in a security declaration of ATTopic.
-  [tiran]
-
-- Fixed critical migration issue. Locally added roles and locally changed
-  permissions are now migrated. Also added unit tests to verify the
-  migration.
-  [tiran]
-
-- Cleanup up unit tests and logging to reduce the noise
-  [tiran]
-
-- Removed 'MakerNote JPEGThumbnail' from the exif tags. Some cameras might
-  store the thumbnail in this tag.
-  [tiran]
-
-- Removed unused customization policy including unit test. Plone 2.1 always
-  installing ATCT.
-  [tiran]
-
-- Fixed 4330 Inter-version ATCT migration fails to migrate types
-  to CMFDynamicViewFTI. Migration to the new FTI is part of the version
-  migration again.
-  [tiran]
-
-- Added migration step + unit test for '(selected layout)' change.
-  [tiran]
-
-- Optimized getRawRelatedItems index addition. There is no need to reindex
-  the *whole* catalog when adding a *single* index.
-  [tiran]
-
-- Made the 'view' method aliases point to '(selected layout)' instead of
-  '(default view)'. This assures consistency with previous behaviour,
-  so that /view at the end of a URL always gets the item itself, ignoring
-  any default-page that may be set. Note that the 'view' *action* still
-  points to 'string:${object_url}', so that the 'view' tab, as well as
-  the '(Default)' target, still get '(dynamic view)' (and thus default
-  pages) for types other than File and Image.
-  [optilude]
-
-- Added migration/othermigrator.py for other migrators like CMFPhoto and
-  CMFPhotoAlbum. These migrators are written but not yet available to end
-  users. Some glue code needs to be written.
-  [tiran]
-
-- Moved exif library to a new directory thirdparty/. This directory should
-  contain all third party extensions that are required to run ATCT. Well
-  lib/ was added for this purpose the first time. thirdparty/ is added to
-  sys.path at position three which is right after Zope's instance home
-  and zope home in most cases.
-  [tiran]
-
-- Removed lot's of unused imports.
-  [tiran]
-
-- Fixed http://plone.org/collector/4083 for atct_album_view.pt
-  [ender]
-
-- Fixed
-  http://sf.net/tracker/?func=detail&atid=645337&aid=1215755&group_id=55262
-  by making the template sane.
-  [alecm]
-
-- Fixed get_size for ATImage. It should return only the file size of the
-  original image.
-  [tiran]
-
-- HEAD fixes for folder based content types.
-  [tiran]
-
-- Fixed permission issue in formatCatalogMetadata.py.
-  [alecm]
-
-- ConstrainTypes should default to disabled unless the parent object is of
-  the same portal type.
-  [alecm]
-
-- General get_size fixes. The get_size() method returns either the size
-  of the primary field or 1 for folders.
-  [tiran]
-
-- Moved not yet implemented URL upload feature out of the main code.
-  [tiran]
-
-- Fixed constraintypes's allowedContentTypes and invokeFactory to make
-  ENABLED mode work when the portal_type is different with parent's.
-  [panjunyong]
-
-- Added http access functionl http tests.
-  [tiran]
-
-- Added HEAD() method to Topic. If the topic has at least one criterion or
-  it can acquire a query 200 OK is return else 404 NotFound
-  [tiran]
-
-- Fixed [Plone] 4295/ 1 Request "ATCT and related items fields".
-  [tiran]
-
-- Added workaround for [ 1229206 ] 2.0.5 > 2.1 migration fails. Failing
-  reorder is mostly harmless.
-  [tiran]
-
-- Added workarounds for EXIF MakerNote errors. Some cameras are *really*
-  broken. Better no make notes than no exif infos at all.
-  [tiran]
-
-- Fixed and improved recent changes to cleanupFilename(). You can't remove
-  features w/o keeping backward compatibility and new features must be
-  bullet proof!
-  [tiran]
-
-- Clean up multiple Topic folder_contents tabs.
-  [alecm]
-
-- Readded a seperate _cleanupFilename method for ATCTFileContent to make it
-  better for patch.
-  [panjunyong]
-
-- Fixed http://plone.org/collector/4218 ATCT now uses normalizeString from
-  PloneTool.
-  [hannosch]
-
-- Fixed http://plone.org/collector/4170 Link checking is crazy and [ 1197068 ]
-  [hannosch]
-
-- made constraintypes default ACQUIRE mode works with portal_factory
-  [panjunyong]
-
-- Added Five/Zope3 interface bridges
-  [tiran]
-
-- Disabled text/x-python and text/plain-pre by default. Customize the
-  atcontenttypes.conf if you need them.
-  [tiran]
-
-- Removed relatedItems field from folderish objects.
-  [tiran]
-
-- Made download tab for File and Image invisible.
-  [tiran]
-
-- Fixed __bobo_traverse__ in ATImage, security check was unnecessary and
-  required anonymous to have 'View' in order for anyone to use it.
-  [alecm]
-
-- Yet another migration optimization: Added catalogpatch to the migration
-  system. The patch is altering portal_catalog.catalog_object and
-  uncatalog_object. Read migration/catalogpatch.py for more informations.
-  The catalog patch can be enabled by passing use_catalog_patch=True to
-  the migration functions.
-  [tiran]
-
-- Fixed last bit of http://plone.org/collector/3060  Don't let missing CMF
-  types crash portal_atct.disableCMFTypes().
-  [alecm]
-
-- Enhanced migration code:
-   - CatalogWalkerWithLevel is now based on ExtendedPathIndex
-     and behaves like CatalogWalker.
-   - Added walker arguments for transaction size, full transactions.
-     and savepoints. The migration system can use ZODB savepoints to
-     roll back to a sane point.
-   - Migrators are also registered by (src,dst) meta_type.
-   - The new function migratePortalType() can be used to migrate a single
-     content type by just passing the src and dst portal type to the
-     function. Both portal types must be registerd in portal_types and a
-     migration from src to dst meta_type must exist.
-
-  [tiran]
-
-- Don't catalog all types in _catalogTypesByMetatype it the passed list is
-  empty.
-  [jenner, alecm]
-
-- Modified templates to use the new pretty_title_or_id feature from plone.
-  [alecm]
-
-- Made atct_album_view use the catalog like other listings, and reuse the
-  nice macro from folder_listing.
-  [alecm]
-
-- Zope2.7 compatibility again: replaced import transaction with from
-  Products.CMFPlone import transaction.
-  [hannosch]
-
-- Some minor i18n tweaks.
-  [hannosch]
-
-- Updated INSTALL.txt for CMF 1.5. Zope 2.8 and more
-  [tiran]
-
-- CMF 1.5 / Zope2.8 compatibility:
-   - replaced CMFCorePermissions with permissions
-   - replaced get_transaction() with transaction
-   - removed product argument from TooolInit()
-   - logging.getLogger() and LOG.debug() etc.
-
-  [tiran]
-
-- Greatly enhanced logging during migration.
-  [tiran]
-
-- Chunked migration in smaller pieces. To be continued!
-  [tiran]
-
-- Fixed finalize migration so that it doesn't reinitialize the workflow
-  state.  Added unit tests for workflow, local_role, and owner migration.
-  [alecm]
-
-- Using migration code from DynamicViewFTI instead of own FTI migration code
-  [tiran]
-
-- Moved ATCTImageTransform class to lib
-  [tiran]
-
-- Added configuration options for PIL quality and resize algo.
-  [tiran]
-
-- Couple of bug fixes in the FTI->FTI w/ dynamic views migration
-  [rafrombrc]
-
-- Renamed max_size config option to max_file_size. Added max_image_dimension
-  config option to set the maximum border for the original size of an image.
-  [tiran]
-
-- Added some additional i18n markup.
-  [hannosch]
-
-Snapshot 2005-07-05
--------------------
-
-- Don't run version migration when installing the first time. People should run it
-  after type migration.
-  [tiran]
-
-- Disabled full catalog updated after type migration. If people need it they could
-  do it after migration.
-  [tiran]
-
-- Added migration to DynamicFTIs.
-  [fschulze]
-
-- Changed index_html method on ATCTOrderedFolder to gracefully handle
-  situation where acquisition of index_html attribute returns None.
-  [rafrombrc]
-
-- Added syndication support to Smart Folders.
-  [alecm]
-
-- Fixing up aliases and actions for CMF 1.5-style browser-default code, using
-  CMFDynamicViewFTI.
-  [optilude]
-
-- Some code related to browser default is moved to CMFDynamicViewFTI. All
-  new versions of ATCT depend on this product now.
-  [tiran]
-
-- Fixed some tests on Windows. Image files must be opened with 'rb'.
-  [hannosch]
-
-- Moved around some fields. excludeFromNav is on the property sheet expect for
-  folderish items and discussion is on the main sheet expecpt for folderish and
-  Favorite.
-  [tiran]
-
-- Added finalizeATCTSchema function to move the fields in the right position
-  [tiran]
-
-- Fixed http://plone.org/collector/4127 permission incorrect on
-  listSubtopics.
-  [alecm]
-
-- Added migration to change the name of the Topic configlet.
-  [alecm]
-
-- Fixed http://members.plone.org/collector/4076, adding exclude_from_nav to
-  all content schemas.
-  [optilude]
-
-- Fixes for migration of cataloged non-contentish objects.  Now checking
-  meta_type and portal_type before migration steps.
-  [alecm]
-
-- Fixed http://members.plone.org/collector/3804 added validation of filename
-  when appropriate using check_id if available.
-  [alecm]
-
-- Added index for relatedItems, and migration to install it into already
-  installed instances.
-  [alecm]
-
-- Made the tool check if a config entry is available whenever it finds a new
-  index, so that it is automatically enabled if desirable, and to minimize
-  the need for migrations.
-  [alecm]
-
-- Disabled all indexes in criteria form by default, only those with
-  default values are automatically enabled.  This prevents things like ZWiki
-  from messing up our nice edit form.  They can be enabled and prettified in
-  the tool.
-  [alecm]
-
-- Spring i18n cleanup:
-  - changed i18n:domain from plone to atcontenttypes
-  - added missing i18n markup
-  - fixed page templates XHTML errors
-  - reindented and cleaned up whitespaces
-  [deo]
-
-- Made portal_type, selection, and reference criteria return reasonably
-  sorted lists.
-  [alecm]
-
-- Updated folderlisting actions to work properly with optiludes new
-  browserdefault behavior.
-  [alecm]
-
-- Localized date in Topic custom view.
-  [alecm]
-
-1.0-alpha2
-----------
-
-- Disabled history tab.
-  [tiran]
-
-- Fixed a small bug in the exif support. The signatur of the process_file
-  method has changed.
-  [tiran]
-
-- Catch KeyErrors on third party index types in the catalog.  Fix bad import
-  of list criteria.  Fix some unit tests that I broke, and added some more
-  (CriterionRegistry) in penance.
-  [alecm]
-
-- Updated exif lib.
-  [russf]
-
-- Added default values for the index/metadata friendly names, descriptions,
-  and criteria restrictions for Smart Folders using ZConfig.  Added the
-  ability to have an index with no criteria (useful for sort only criteria).
-  Made the descriptions for the criteria types more sensible (I hope this
-  doesn't screw up existing translations, but the current names are terrible).
-  Also, added some missing criteria related strings to manual.pot.
-  [alecm]
-
-- Added a getCriteriaUniqueWidgetAttr method to topics to compile things like
-  'helper_js' in one place for the edit form.
-  [alecm]
-
-- Fixed [ 1196809 ] Use getMutator(self) instead of mutator(self) in base.py.
-  [stefan]
-
-- Added new path criterion for use with ExtendedPathIndex that allows users
-  to select paths to search in using a sitemap.  This now uses the
-  lovely ATReferenceBrowserWidget.
-  [alecm]
-
-- Add Topic to the list of allowed sub-objects for Topic during Migration.
-  It was missing before because the class allowed_content_types property
-  was being overwritten by the one from CMFTopics.
-  [alecm]
-
-- BrowserDefaultMixin.getAvailableLayouts() now returns a list of tuples
-  instead of a DisplayList. Required by interface change in Plone.
-  [optilude]
-
-- Added cool icons for vCal/iCal export and image rotation/flipping made by
-  the legendary Vidar Anderson.
-  [blacktar, tiran]
-
-- Replaced AttributeStorage with AnnotationStorage for Document:text,
-  File:file, Image:image, Event:text and NewsItem:text,image. This requires
-  Archetypes 1.3.5.
-  [tiran]
-
-- Added new Current Author criterion which, when used with the Creator index,
-  gets all objects authored by the currently logged in user.  Also fixed some
-  permissions that were preventing normal users from viewing published topics.
-  Fixes issue [ 1176355 ].
-  [alecm]
-
-- Changed processForm to check for id conflicts using check_ids if available,
-  otherwise just `id in parent`. Also commit sub-transaction to make rename
-  work after portal_factory.
-  [alecm]
-
-- Added version migration system mostly copied from plone. Works automatically
-  during Plone 2.1 migration to bring plone 2.0 sites that started with ATCT
-  >= 0.2 up to date including changing and uncatalogging ATTopic criteria and
-  migrating CMF Topics.
-  [alecm]
-
-- Fixed a small bug in Topic migration introduced during the merge.
-  [alecm]
-
-- Made topic.addCriterion() return the newly added criterion object. That
-  it didn't before made things hard for python product developers.
-  [alecm]
-
-- Fixed bug #3773 (http://plone.org/collector/3773) validation check for
-  empty/non-existant files/images.
-  [alecm]
-
-- Changed the behavior of the date criteria to make the meaning of
-  each field clearer.  Now queries like 'More than 2 weeks ago' can be used,
-  and will behave as expected.  This causes some inconsistency in importing
-  CMFTopics.  Queries that were of the form 'min' 'x days' 'ago' are now
-  'less than x days ago' which is a min:max query with an upper limit of now.
-  The same goes for 'max' 'x days' 'ahead', all other queries should be close
-  to identical (modulo an earliestTime() where it makes sense).  The
-  inconsistency shouldn't be too important as the CMF date criteria was
-  entirely inscrutable.  Also changed some strings for criteria descriptions
-  for consistency. Fixes bug [ 1181418 ]. Thanks to Dean Jackson for filing
-  this bug and devising a reasonably usable UI.
-  [alecm]
-
-- Made the portal_types criteria work properly with either Types or
-  portal_types indexes.  Disabled types restrictions in TopicTool, now uses the
-  new Plone 2.1 search blacklist for types (site_properties.unfriendly_types).
-  This creates a plone 2.1 dependency. Also a change was made to the
-  atct_subtopic_form so that it now uses a macro from plone 2.1, this fixes
-  issue [ 1164541 ].
-  [alecm]
-
-- Reworked linked select lists for criteria to use custom XMLHTTPRequest code,
-  contained in modifySelectList.js.  I will eventually turn this into an AT
-  MasterSelectWidget for the master select of two linked select lists.
-  [alecm]
-
-- Added and enabled configlet for Topics, and unit tests for the criteria.
-  Fixed a persistency bug in TopicsTool, and a sort bug the in criteria
-  listing.  Added Missing.MV as a possible false value for Boolean Criterion.
-  [alecm]
-
-- Removed some configuration vars from config.py and the ZConfig schema.
-  [tiran]
-
-- Moved external types from ATCT to the new ATCTAddons product.
-  [tiran]
-
-- Remove path of filename from ATFile's title when upload a file using MS IE.
-  [panjunyong]
-
-- Merged uiteam-plip73-sanitize-short-names from the old plone
-  svn repos: diff http://svn.plone.org/svn/plone/ATContentTypes/branches/1.0@6168
-  http://svn.plone.org/svn/plone/ATContentTypes/branches/uiteam-plip73-sanitize-short-names
-  [tiran]
-
-- Added flag to determine whether an content object has undergone a successful
-  initial edit.  Use this flag along with detection of default naming to
-  rename object on inital edit.
-  [alecm]
-
-- Merged the topic tool branch into 1.0 XXX: insert history here.
-  [tiran]
-
-- Refactored ConstrainTypesMixin to support PLIP 78:
-
-   - DISABLED means use standard allowed types from portal_types
-   - ENABLED means use restrictions set
-   - ACQUIRE means use types from parent if parent is of same portal type,
-     else same as ENABLED (doesn't make sense to inherit from any content type)
-   - immediatelyAddableTypes field - for subset of allowed types to show in
-     the "add" menu
-   - turned off and removed disable constrain-types flag
-
-  [tiran]
-
-- Turn on TemplateMixin for everything - now directly supported in Plone
-  via "display" menu.
-  [tiran]
-
-- Merged plip #3 branch: auto ordering / sorting into the 1.0 branch.
-  Features / Changes:
-
-   - Added getObjPositioninParent and getObjSize as helper methods for
-     the catalog based folder listing to all types
-   - Added AutoSortSuppot and AutoOrderSupport to ATCT. AutoSortSupport is
-     used for the catalog based folder listing and AutoOrderSupport also
-     adds some auto ordering based on OrderedFolder
-   - Subclass ATFolder from AutoOrderSupport+AutoSortSupport, ATBTreeFolder
-     only from AutoSortSupport
-
-  [tiran]
-
-- ATEvent: Removed end date and start date from searchable text.
-  [tiran]
-
-- Implemented PLIP #2 of ATCT: using ZConfig to configure the types and
-  features of ATContentTypes.
-  [tiran]
-
-- Changed default output of Document, Event and News Item to text/x-safe-html.
-  X-safe-html is using CMFDefault.utils.scrubHTML to remove harmful tags
-  like script.
-  [tiran]
-
-- Merged tiran-notypesdir-branch. It's renaming and moving lot's of modules
-  around. All content types are in the content/ package, criteria were moved
-  to criteria/, tools to tool/ and modules like history aware to lib/. Also
-  all modules and packages were renamed to be lower case.
-  [tiran]
-
-- Added history support ATEvent's text field just like Document and News Item.
-  [tiran]
-
-- Updated README.txt and INSTALL.txt: new versions, update from ATCT 0.2 and
-  some other informations.
-  [tiran]
-
-- Changed permission of ATNewsItem.EditableBody() to ModifyPortalContent.
-  [tiran]
-
-- Added some tabs to the ZMI view of the portal_atct tool: Overview, rescale
-  migrate and recatalog. The usage of the external methods is deprecated in
-  favor of the tool.
-  [tiran]
-
-- Restored Plone 2.0.x compatibility.
-  [deo]
-
-- Don't show PloneSite, TempFolder and criteria in constrain types list.
-  [tiran]
-
-- Disabled validator for ATEvent's phone field. Some people have reported that
-  they have issues because numbers and especially extensions are handle
-  differently in every country. Also see [ 974102 ] Can't enter phone extension
-  in phone number field.
-  [tiran]
-
-- Added XXX report tool to ATCT. It's mostly a copy from the Zope3 XXX tools.
-  Note: XXX is a marker to show "here is something" wrong. It's not porn. :)
-  The tool also reports TODO and BBB (for backward compatibility).
-  [tiran]
-
-- Fixed [ 1049018 ] url field on Link doesn't allow mailto. Also added an
-  isMailto validator to validation and enhanced the isUrl validator to support
-  more protocols.
-  [tiran]
-
-- Fixed [ 1114696 ] use correct mimetype for reStructuredText and [ 1122135 ]
-  ATCT edit not preserving text type selection, not ATCT bug be renaming
-  text/restructured to text/x-rst.
-  [tiran]
-
-- Fixed [ 1158950 ] ATTopic default view wrong. This fix needs also a svn up
-  of CMFPlone 2.1.
-  [tiran]
-
-- Moved external storage based variants for ATFile and ATImage to a seperate
-  module. They won't make it in the official trunk unless the storage is
-  working well and the types are tested.
-  [tiran]
-
-- Added 'atct_album_view' and 'atct_album_image' templates based on the
-  templates of CMFPhotoAlbum.
-  [tiran]
-
-- Replaced the config vars for permissions with new permissions:
-
-   - ModifyConstrainTypes for constrain types mixin
-   - ModifyViewTemplate for template mixin
-   - ViewHistory for history mixin
-   - UploadViaURL for the new upload via url feature
-
-  By default the permissions are restricted to manager only.
-  [tiran]
-
-- Added new upload via url feature to upload a file or image using an url. The
-  file is downloaded from the remote server using urllib2. Since this feature
-  isn't finished it's not available by default.
-  [tiran]
-
-- Implemented some very useful functions based on CMFPhoto code for ATImage.
-  The new features are:
-
-   - getting the exif informations from images using Gene Cash's exif lib
-   - getting the image orientation from exif data (rotation and mirror)
-   - Rotating and flipping images using the PIL library incl. a new tab
-
-  [tiran]
-
-  The CMFPhoto exif and transform code was written by several ppl including
-  Oliver Baltzer and me. I'm unable to determine the other coders. Please
-  write me an email if you want credits for your great work!
-  [tiran]
-
-1.0-alpha1
-----------
-
-- Refactored huge parts of the migration suite. More later.
-  [tiran]
-
-- Fixed [ 1026616 ] Actions aren't migrated. Actions are migrated from
-  the cmf fti if an action with the id doesn't exist on the atct fti.
-  [tiran]
-
-- Migrating filter content types, allowed content types and allow
-  discussion from cmf fti to atct fti.
-  [tiran]
-
-- Updated requirements to CMFQuickinstaller 1.5/cvs,
-  [tiran]
-
-- Starting to remove the switch* and migrate* external methods.
-  [tiran]
-
-- Fixed default view of ATFolder. Pointing to view again makes a loop and
-  raises a hard to debug exception because TemplateMixin is trying to use
-  itself as default view which doesn't work.
-  [tiran]
-
-- FTests: install kupu and epoz when available. Moved function test suite to
-  ftests/
-  [tiran]
-
-- Fixed [ 1157812 ] ival/vcal action icons not available
-  [tiran]
-
-- Fixed ATTopic to use atct_edit like all other ATCT types.
-  [tiran]
-
-- Added ERRATA.txt which covers known issues.
-  [tiran]
-
-- Added integration tests for discussions.
-  [tiran]
-
-- Ported topic migration and criteria enhancements + additional criteria
-  from ender topic branch. Thx to Alec Mitchell for his great work! The new
-  criteria are: ATSelectionCriterion, ATDateRangeCriterion,
-  ATReferenceCriterion and ATBooleanCriterion.
-  [allecm, tiran]
-
-- Changed archetype names of criteria and removed the AT prefix.
-  [tiran]
-
-- Added unit tests for criteria and ATTopic.
-  [allecm, tiran]
-
-- Added translate tab when LinguaPlone is available at installation or
-  reinstallation time.
-  [tiran]
-
-- Added mini scale with 200x200.
-  [tiran]
-
-- Added integration tests for view and edit templates.
-  [tiran]
-
-- I made major changes to the unit test suite. Also I've added more field
-  tests, some important interface tests and cleaner and better base classes
-  for tests.
-  [tiran]
-
-- prepare ATFolder for use with TemplateMixin, use generic /view instead of
-  /folder_listing as default and immediate view.
-  [yenzenz]
-
-- Changed the way ConstrainTypes gets mixed in: Now ATCT is always subclassing
-  folders from the ConstrainTypes class and the schema is always in the folder
-  schema. Before this change ppl couldn't rely on the api. When the feature
-  is disabled the fields are not shown in the schema and the overwritten
-  methods are using a "shortcut" to the default methods.
-  [tiran]
-
-- Renamed some methods in the constrain mixin to start with _ct_ for a clean
-  name space.
-  [tiran]
-
-- Added a tag methods to NewsItem for its image. Also changed the caption from
-  TextField to StringField since it should contain only a small sentence or
-  similar. The caption is applied as title to the news item image.
-  [tiran]
-
-- When running unit tests all features like constrain mixin and template
-  mixin are forced to be enabled in order to keep the tests sane and to test
-  all features under all circumstances.
-  [tiran]
-
-- Dismembered the big beast schemata.py in types/ and types/criteria. The
-  schemata are in the same modules as the types.
-  [tiran]
-
-- Added content module which contains all important classes.
-  [tiran]
-
-- Replaced all `from foo import *` by explicit imports.
-  [tiran]
-
-- Used some code from Ben's great Bricolite product to have an add permission
-  per type. It allows fine granulated permission settings.
-  [tiran]
-
-- Fixed bug [ 1154073 ] criterion_edit_form.cpt(.metadata) has no default
-  action. The default action for the criterion edit form is save.
-  [tiran]
-
-- Added portal_atct tool. The new tool will be used for the new topic features
-  and for the plone control panel.
-  [tiran]
-
-- Interface geddon: Merged all interfaces into a single file.
-  [tiran]
-
-- Merged limi's ui branch which adds a text field to ATEvent and an image plus
-  image caption to ATNewsItem.
-  [limi, tiran]
-
-- Added related items reference field to all types using Danny's reference
-  browser widget. The ATReferenceBrowserWidget has to be available.
-  http://svn.plone.org/archetypes/MoreFieldsAndWidgets/ATReferenceBrowserWidget.
-  [tiran]
-
-- Removed old debian/ directory. I don't maintain it any more so there is no
-  reason of having it in the CVS.
-  [tiran]
-
-- Removed QuotaSupport.py. It should never be in the official tree of ATCT.
-  [tiran]
-
-- Introduced great chances in the migration system: The portal type names of
-  the ATCT types are the same as the CMF types. CMF types will be renamed at
-  install time.
-  [tiran]
-
-- Introduced ZConfig based configuration. It will replace the customconfig.py
-  file.
-  [tiran]
-
-0.2.0-rc5 - 2005-02-26
-----------------------
-
-- Updated requirements to Zope 2.7.4+, Python 2.3.4+ and AT 1.3.2-rc1+.
-  [tiran]
-
-- Cleaned up the migration suite a little bit and enhanced the doc strings.
-  [tiran]
-
-- Replaces the globalAllow hack by createTypeByName which doesn't make
-  security checks like "is the type implicitly or explicitly addable in the
-  folder". It shares the same codebase as the function from PloneUtilities
-  I once wrote to unfuck the create member area method.
-  [tiran]
-
-- Better traceback support inside the migration suite.
-  [tiran]
-
-- Added knob to toggle the installation of LinguaPlone in ATCT install.
-  [tiran]
-
-- Added explicit portal type name to all ATCT types.
-  [tiran]
-
-- Renamed newTypeFor to _actc_newTypeFor. The former name was confusing
-  people.
-  [tiran]
-
-- Added feature to access the name of the last editor through IHistoryAware.
-  [ctheune]
-
-- Fixed a bug in the migration walker. Empty folders aren't skipped any
-  more.
-  [panjunyong]
-
-- Increase debugging in Migration suite to find issues with missing types
-  in globalAllow.
-  [tiran]
-
-- Ported atct_topic_view icon fix from HEAD.
-  [tiran]
-
-- Don't create ATDocuments when uploading .pdf and .doc files.
-  [batlogg]
-
-- Resurrected warning message when we hit a broken object in the folder
-  migration.
-  [tiran]
-
-- Local roles and Creator are kept when migration.
-  [panjunyong]
-
-- Update requirements to the soon to release AT 1.3.2 version and SVN.
-  [tiran]
-
-- Added update_data and manage_edit compat. methods to ATFile and ATImage.
-  [tiran]
-
-- Added temporary fix for [ 1095242 ] EditableBody in ATNewsItem requires
-  Modify portal content. It will stay in ATNewsItem until Plone is fixed.
-  [tiran]
-
-- Fixed [ 1075193 ] infinite recursion in ATEvent. The __cmp__ hook was fixed
-  a while ago but I forgot to mention it here.
-  [tiran]
-
-- Fixed [ 1098347 ] validate_add_criterion.vpy has errors. The file was
-  DOS encoded.
-  [tiran]
-
-- Applied patch from [ 1104069 ] ATCT migration -- more ordering issues
-  which fixes some more ordering issues.
-  [hahnfeld]
-
-- atct_topic_view now doesn't call getObject() anymore and is a small
-  bit more performant. This also takes some burden from waking up objects.
-  (Bug 1079030)
-  [ctheune]
-
-- Made HTML the default content type for documents (and news items).
-  [ctheune]
-
-- Fixed [ 1080729 ] Wrong permissions for ATDocument.EditableText /
-  setFormat.
-  [tiran]
-
-- Use StdoutStringIO in migration to be more verbose.
-  [tiran]
-
-- Fixed atct_topcic_view: Make sure there is an object before referencing
-  attributes. This can typically happen if there are problems with the
-  AccessContentsInfo permission.
-  [tesdal]
-
-- Removed support of Python 2.1 and 2.2 from INSTALL.txt. Some code like
-  migration requires new features of Python 2.3 like generators.
-  [tiran]
-
-- Added note to INSTALL.txt that ATCT will soon drop support for Zope < 2.7.2.
-  [tiran]
-
-0.2.0-rc4 - 2004-11-30
-----------------------
-
-- ATTopic: Adding the criterion type to the generated id, so you can sort
-  and filter on the same field.
-  [ctheune]
-
-- Fixed unit tests to work without (and hopefully with too) runner again.
-  [ctheune]
-
-- Added feature that doesn't show users non-sortable criterions in the form.
-  [ctheune]
-
-- Added feature that removes double or stupid criterions (allowedRolesAndUsers,
-  id/getId).
-  [ctheune]
-
-- Sorting criterion lists (by their translations).
-  [ctheune]
-
-- Added german translation.
-  [ctheune]
-
-- More i18n support in the templates.
-  [ctheune]
-
-- Fixed _very_ annoying problem with bad ids. this should be bullet proof.
-  [ctheune]
-
-- Extended german translations.
-  [ctheune]
-
-- Fixed ATDocument to not kill uploaded files on the submission of an empty
-  text area.
-  [ctheune]
-
-- Fixed small bug in id protection.
-  [ctheune]
-
-- Fixed the case where the portal doesn't has a 'Members' folder or
-  when it has another name.
-  [deo]
-
-- Fixed [ 1055347 ] id problems when member preferences are set to not
-  display and [ 1055348 ] ATCTFile id problems with portal_factory in
-  ATCTFileContent._setATCTFileContent().
-  [tiran]
-
-- Disabled external storages based types because neither I nor MrTopf have
-  time to support it right now.
-  [tiran]
-
-- Added long description field and image tag to ATImage. Fixed [ 1056050 ]
-  Add longdesc to ATImage.
-  [tiran]
-
-- Fixed [ 1057691 ] Make ATContentTypes tests works with testrunner.py.
-  Thanks to dan_t.
-  [dan_t, tiran]
-
-- Added fix for [ 1063549 ] ATCT migration doesn't migrate order to
-  migrator.py.
-  [tiran]
-
-- Fixed [ 1067719 ] Install.py bug: property modified but not assigned by
-  removing unnecessary code from Install.py. AT itself is already handling
-  use_folder_tabs.
-  [tiran]
-
-0.2.0-rc3 - 2004-10-17
-----------------------
-
-- Added ATContentTypes Site customization policy.
-  [tiran]
-
-- Fixed [ 1041830 ] TypeError: cmf_edit() takes at least 3 non-keyword
-  arguments by changing the edit() implementation. A class var named
-  cmf_edit_kws was introduced to fix the issue.
-  [tiran]
-
-- ATLink: Use urlparse library to sanify the url to strip of additional
-  slashes. This is fixing http://plone.org/collector/3296 for ATCT.
-  [tiran]
-
-- Added support for the clear format feature of CMF Document.
-  [tiran]
-
-0.2.0-rc2 - 2004-10-06
-----------------------
-
-- Fixed problem with isIDAutoGenerated if the object was not wrapped in
-  a site.
-  [tiran]
-
-- Fixed download tab
-  [tiran]
-
-- Made image/file viewable when invoked directly by adding an index_html.
-  [tiran]
-
-- Replaced tag method of ATImage.
-  [tiran]
-
-- Fixed migration: Migration failed when there was a broken object in a
-  folder.
-  [tiran]
-
-- Fixed property migration: continue if the object already has this
-  attribute.
-  [tiran]
-
-- Added talkback discussion migration.
-  [tiran]
-
-- Set description as primary field for ATEvent. Also use an easier syntax
-  for setting description to isMetadata = False.
-  [tiran]
-
-- Renamed tab from history to last changes. Added big warning that the
-  history is based on zodb revisions.
-  [tiran]
-
-- Added ExtendingType howto (more to follow).
-  [tiran]
-
-- Recoded migration walkers to use a generator instead returning a list to
-  make them much more memory efficient.
-  [tiran]
-
-- Rewritten folder migration to use the depth inside the folder structur
-  instead of recursing into the full side.
-  [tiran]
-
-- Added a findStaledObjects external method to ATCT to find staled objects.
-  It is very useful to clean up a site before running the migration.
-  [tiran]
-
-- Fixed an ugly bug in ATDocument which was screwing up references on copy.
-  [tiran]
-
-- Merged ConstrainTypesMixin from the branch into the HEAD. Thanks to
-  Leonardo Rochael Almeida and Jens Werner Klein for their work.
-  [yenzens, rochael]
-
-- Fixed [ 1013853 ] File upload image shows mime-type in widget.
-  [tiran]
-
-- Removed call to markCreationFlag().
-  [tiran]
-
-- Fixed problem with ATFavorite: Migration to ATFavorite failed when the
-  object was gone or the user wasn't allowed to access it.
-  [tiran]
-
-- Fixed [ 1027070 ] Download permission. Now the download tab is shown for
-  all logged in users with View permission.
-  [tiran]
-
-- Fixed [ 1027093 ] Edit permission topics. The edit action of ATTopic now
-  requires ChangeTopic permission.
-  [tiran]
-
-- Fixed [ 1027094 ] folderlisting action for ATTopic. Removed folderlisting
-  action using a module level modify_fti function in ATTopic.py.
-  [tiran]
-
-- Fixed [ 1026379 ] ATDocument: skipField in setContentType throws error by
-  removing the custom setContentType method. It's not required any more.
-  [tiran]
-
-- Use a copy of the ATContentTypeSchema for every schema to make customizations
-  easier. Fixed [ 1027283 ] Schema editing very hard.
-  [tiran]
-
-- Fixed [ 1035380 ] Problems with createMemberArea and ATCT by adding a
-  setFormat() method to ATDocument which is using the translate method to
-  map between stupid CMF content types and real mime types.
-  [tiran]
-
-- Changed mx.Tidy test to work around [ 1033396 ] Error on refresh.
-  [tiran]
-
-- Fixed [ 1036267 ] Some typos in customconfig.py.
-  [tiran]
-
-- Fixed [ 1036255 ] switchCMF2ATCT: Favorite can't be added anymore. The type
-  was disabled inside the switch script.
-  [tiran]
-
-- Fixed [ 1027108 ] Inherit criteria not working.
-  [tiran]
-
-- Fixed [ 1030660 ] ConstrainMixin: All types are addable in an ATFolder by
-  using a default_method to initialize the list of addable types. The method
-  _globalAddableTypeIds was added to generate the list.
-  [tiran]
-
-- Fixed a possible problem in allowedContentTypes: Now the method is using
-  fti.isConstructionAllowed(context) to verify that the type is constructable.
-  [tiran]
-
-- Added an option called enableConstrainMixin which is a boolean value
-  (checkbox). When set to false the constrain mixin is disabled and the
-  default list of addable types is generated by using the default values
-  from portal_types.
-  [tiran]
-
-- Fixed [ 1030662 ] ConstrainMixin: Can't add an ATTopic to portal root by
-  not subclassing ConstrainTypesMixin for ATCTFolder. ATCTFolder must ONLY
-  to used as a base class for folderish but non folder types.
-  [tiran]
-
-- Added max_depth workaround and logging for [ 1039846 ] Ghosts in catalog
-  while migration and endless loop.
-  [tiran]
-
-0.2.0-rc1 - 2004-07-28
-----------------------
-
-- Removed 'contents' tab and 'add new item' menu from ATTopic.
-  [gotcha]
-
-- Changed criteria tab to table UI.
-  [gotcha]
-
-- Added message when clicking remove on criteria without selecting first.
-  [gotcha]
-
-- Depend on new AT 1.3.0-beta3 release.
-  [tiran]
-
-- Changed ZMI add name of topic related types to 'ATContentTypes Topic'.
-  [tiran]
-
-0.2-beta8 - 2004-07-21
-
-- Fixed validation problem with mx tidy validator and file uploads.
-  [tiran]
-
-- Changed time range ints in FriendlyDateCriterion to strings.
-  [tiran]
-
-- Reenable implicitly addable for ATFavorite.
-  [tiran]
-
-- Added validation for setup of sort order on topics.
-  [gotcha]
-
-- Added getSize, getHeight, getWidth methods and width/height attributes to
-  ATImage.
-  [tiran]
-
-0.2-beta7 - 2004-06-27
-
-- Moved around some code from ATFolder to ATContentType.
-  [tiran]
-
-- Fixed problem with index_html in ATBTreeFolder.
-  [tiran]
-
-- Fixed wrong portal type in Members ATBTreeFolder after migration.
-  [tiran]
-
-- Added initializeArchetype() to ATContentType base class and changed it to
-  use edit() instead of update() to make invokeFactory compatible with the old
-  cmf types syntax.
-  [tiran]
-
-- Fixed problem with _getPortalTypeName in initializeArchetype() phase of
-  object creation. Before the fix the portal type name was the original type
-  name (e.g. ATDocument) because it was changed after the initializeArchetype
-  call by the portal types tool. This issue has caused some wired problems with
-  LinguaPlone and workflows.
-  [tiran]
-
-- ATFile file field and ATImage image field are now language independend.
-  Later I will add a I18NImage and I18NFile if needed. Having a seperate type
-  for language dependend content for file and image is in my opinion easier to
-  understand for people. Besides it's like Zope3.
-  [tiran]
-
-- Removed TemplateMixin specific code from ATContentType base class. It was
-  moved to TemplateMixin some time ago.
-  [tiran]
-
-- Better error reporting for migration errors.
-  [tiran]
-
-- Fixed migration problem when LinguaPlone was installed.
-  [tiran]
-
-- Added - as valid char for ids.
-  [tiran]
-
-- Reindex only Type, portal_type and meta_type in switching script.
-  [tiran]
-
-- Wrapped field tests in a portal to fix a problem with missing tools.
-  [tiran]
-
-- Fixed migration problem of modified date and created date and also fixed
-  a problem with the unit test that was testing the right date. I was
-  trying to compare the mod date after editing the objects. %-)
-  [tiran]
-
-- Default type of ATDocument and ATNewsItem is configurable in
-  customconfig.py.
-  [tiran]
-
-- Fixed issues with content type registry and registered templates after
-  switching from or to ATCT mode.
-  [tiran]
-
-- Added validation to ATEvent: end date must be after start date.
-  [tiran]
-
-- First release with all unit tests of Archetypes, ATCT and CMFPlone
-  tiran-atct-integration branch passing!
-  [tiran]
-
-0.2-beta6 - 2004-06-20
-----------------------
-
-- Added max upload size validator to ATFile and ATImage.
-  [tiran]
-
-- Changed permission for download tab an ATFile. Dont confuse the average
-  user with the green edit frame.
-  [jensens]
-
-- Added a new class ATCTFileContent which contains some code for ATFile
-  and ATImage.
-  [tiran]
-
-- Set title from the filename of an uploaded file (ATImage, ATFile).
-  [tiran]
-
-- Added limit for ATTopic.
-  [gotcha]
-
-- Added EditableBody method to ATDocument.
-  [tiran]
-
-- Added validation of Criterion support for a specific index.
-  [gotcha]
-
-- Added edit() methods for backward compatibility to CMF.
-  [tiran]
-
-- Added restrained folder support.
-  [jensens]
-
-- Disabled restrained folder support until it's fixed.
-  [tiran]
-
-0.2-beta5
----------
-
-- Fixed multiple small bugs and added features requested in the bug
-  tracker on sf.net.
-  [tiran]
-
-- Auto set id from filename for ATImage and ATFile.
-  [tiran]
-
-- Fixed python 2.1 compatibility problem with CMFCore/WorkflowTool.
-  Thanks to Tiziano Lattisi.
-  [tiran]
-
-- Moved to validation chains.
-  [tiran]
-
-- Fixed security of HistoryAwareMixin.
-  [tiran]
-
-- Added iCal/vCal export to AT Event.
-  [tiran]
-
-- Added LinguaPlone support.
-  [gotcha]
-
-0.2-beta4
----------
-
-- Added AT Dyn Document. It's a CMFDynamicDocument like type that supports
-  rendering of TAL inside the body text.
-  [tiran]
-
-- Moved AT Dyn Document to a new product.
-  [tiran]
-
-- Fixed the migration.
-  [tiran]
-
-- Fixed and improved the switch from/to "ATCT as default types" methods.
-  [tiran]
-
-- Updated docs.
-  [tiran]
-
-- Moved helper methods to utils.
-  [tiran]
-
-- Switch objects in content_type_registry, too.
-  [lelit]
-
-- Added isSwitchedToATCT method.
-  [tiran]
-
-- Fixed misc UI problems like doubled folderContents.
-  [tiran]
-
-0.2-beta3 - 2004-04-20
-----------------------
-
-- Updated INSTALL.txt [tiran]
-
-- Fixed default view of ATBTreeFolder and ATFolder (stage 2). Both types
-  are using ATContentTypeSchema with TemplateMixinSchema.
-  [tiran]
-
-- Added a recreateATImageScales method as external method.
-  [tiran]
-
-- Added missing sharing tab to all ATCTContent based types.
-  [tiran]
-
-- Fixed AT Favorite.
-  [jensens]
-
-- Fixed atct_edit macro.
-  [tiran]
-
-0.2-beta2 - 2004-04-11
-----------------------
-
-- Update validators to reflect the last changes and fixes of the archetypes
-  and validation packages.
-  [tiran]
-
-- Added uml diagram of ATCT classes.
-  [tiran]
-
-- misc small fixes and improvements.
-  [tiran]
-
-0.2-beta1 - 2004-04-09
-----------------------
-
-- First official beta release for testing.
-  [tiran]
diff --git a/MANIFEST.in b/MANIFEST.in
index 5477c06..3ab8566 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,4 +1,4 @@
-recursive-include Products *
-recursive-include docs *
-include *
+graft Products
+graft docs
+include *.rst
 global-exclude *.pyc
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..69b9309
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,58 @@
+AT Content Types
+================
+
+Installation
+------------
+
+Please read INSTALL.txt for a list of requirements before installing this
+product. ATContentTypes requires new versions of Python, Zope, Plone and
+Archetypes. Make sure you've updated all products.
+
+Reporting bugs / feature requests
+---------------------------------
+
+Please use the Plone bug tracker at http://dev.plone.org/plone and use the
+Content Types component!
+
+Comparing CMF types with ATContentTypes
+---------------------------------------
+
+This is a very rough and short list of differences between the old CMF types
+and the new ATContentTypes types.
+
+* Archetypes: All types are written with Archetypes and have all features
+  default Archetypes based types have like:
+
+   - autogenerated edit forms based on the schema
+
+   - referenceable
+
+   - Easily enhanceable by subclassing or adding fields to the schema
+
+   - Transformations like restructured text, python source code highlighting,
+     pdf to html, office to html and many more.
+
+   - plugable validation of fields
+
+* Clean and documented API.
+
+* Translateable using LinguaPlone.
+  
+* Dynamic Views: All types are using the new dynamic view FTI that allows you
+  to choose the view template per instance. You can configure the templates in
+  the portal_types tool. This features is used to turn an ordinary folder into
+  a photo album by simple switching to a different view.
+  
+* Permissions per type and feature: Every type has its own add permission and
+  all features like template mixin have their own modify permission, too.
+
+* Numerous small adjustments and enhancements to all types for example:
+
+  - Images can be rotated through the web and have exif informations
+
+  - News Items have an image plus caption
+
+  - Events have a body text
+
+  - Documents have a history tab to show the last changes as an unified diff
+    view using the ZODB history.
diff --git a/README.txt b/README.txt
deleted file mode 100644
index 69b9309..0000000
--- a/README.txt
+++ /dev/null
@@ -1,58 +0,0 @@
-AT Content Types
-================
-
-Installation
-------------
-
-Please read INSTALL.txt for a list of requirements before installing this
-product. ATContentTypes requires new versions of Python, Zope, Plone and
-Archetypes. Make sure you've updated all products.
-
-Reporting bugs / feature requests
----------------------------------
-
-Please use the Plone bug tracker at http://dev.plone.org/plone and use the
-Content Types component!
-
-Comparing CMF types with ATContentTypes
----------------------------------------
-
-This is a very rough and short list of differences between the old CMF types
-and the new ATContentTypes types.
-
-* Archetypes: All types are written with Archetypes and have all features
-  default Archetypes based types have like:
-
-   - autogenerated edit forms based on the schema
-
-   - referenceable
-
-   - Easily enhanceable by subclassing or adding fields to the schema
-
-   - Transformations like restructured text, python source code highlighting,
-     pdf to html, office to html and many more.
-
-   - plugable validation of fields
-
-* Clean and documented API.
-
-* Translateable using LinguaPlone.
-  
-* Dynamic Views: All types are using the new dynamic view FTI that allows you
-  to choose the view template per instance. You can configure the templates in
-  the portal_types tool. This features is used to turn an ordinary folder into
-  a photo album by simple switching to a different view.
-  
-* Permissions per type and feature: Every type has its own add permission and
-  all features like template mixin have their own modify permission, too.
-
-* Numerous small adjustments and enhancements to all types for example:
-
-  - Images can be rotated through the web and have exif informations
-
-  - News Items have an image plus caption
-
-  - Events have a body text
-
-  - Documents have a history tab to show the last changes as an unified diff
-    view using the ZODB history.
diff --git a/setup.py b/setup.py
index b94668b..4f240fe 100644
--- a/setup.py
+++ b/setup.py
@@ -5,8 +5,8 @@
 setup(name='Products.ATContentTypes',
       version=version,
       description="Default Content Types for Plone",
-      long_description=open("README.txt").read() + "\n" +
-      open("CHANGES.txt").read(),
+      long_description=(open("README.rst").read() + "\n" +
+                        open("CHANGES.rst").read()),
       classifiers=[
           "Programming Language :: Python",
           "Programming Language :: Python :: 2.7",


