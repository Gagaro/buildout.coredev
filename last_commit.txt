Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-18T21:51:33+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/25a6252fe4102143076a0814ae198d9e7d254d33

Add support for overriding transient data manager with persistent by adding X-Tile-Persistent -header

Files changed:
M plone/tiles/configure.zcml
M plone/tiles/data.py

diff --git a/plone/tiles/configure.zcml b/plone/tiles/configure.zcml
index 3adb5f7..da7faf0 100644
--- a/plone/tiles/configure.zcml
+++ b/plone/tiles/configure.zcml
@@ -4,7 +4,7 @@
     i18n_domain="plone.tiles">
 
     <!-- Data manager -->
-    <adapter factory=".data.TransientTileDataManager" />
+    <adapter factory=".data.transientTileDataManagerFactory" />
     <adapter factory=".data.PersistentTileDataManager" />
     <adapter factory=".data.defaultTileDataContext" />
 
diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index f6b9292..f9be5eb 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -32,6 +32,23 @@
 LOGGER = logging.getLogger('plone.tiles')
 
 
+@adapter(ITile)
+@implementer(ITileDataManager)
+def transientTileDataManagerFactory(tile):
+    if tile.request.get('X-Tile-Persistent'):
+        return PersistentTileDataManager(tile)
+
+    key = "%s.%s" % (ANNOTATIONS_KEY_PREFIX, tile.id,)
+    context = getMultiAdapter((tile.context, tile.request, tile),
+                              ITileDataContext)
+    annotations = IAnnotations(context)
+
+    if key in annotations:
+        return PersistentTileDataManager(tile)
+    else:
+        return TransientTileDataManager(tile)
+
+
 class TransientTileDataManager(object):
     """A data manager for transient tile data, which reads data from the
     request query string.


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-21T00:12:21-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.tiles/commit/9f6c8b5db164a326efbdef4f4473ec3d2bad5dbe

be able to provide default form data

Files changed:
M plone/tiles/data.py

diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index f9be5eb..2acbc22 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -35,15 +35,7 @@
 @adapter(ITile)
 @implementer(ITileDataManager)
 def transientTileDataManagerFactory(tile):
-    if tile.request.get('X-Tile-Persistent'):
-        return PersistentTileDataManager(tile)
-
-    key = "%s.%s" % (ANNOTATIONS_KEY_PREFIX, tile.id,)
-    context = getMultiAdapter((tile.context, tile.request, tile),
-                              ITileDataContext)
-    annotations = IAnnotations(context)
-
-    if key in annotations:
+    if tile.request.get('X-Tile-Persistent') or tile.request.environ.get('X-Tile-Persistent'):
         return PersistentTileDataManager(tile)
     else:
         return TransientTileDataManager(tile)
@@ -120,8 +112,23 @@ def __init__(self, tile):
 
         self.key = "%s.%s" % (ANNOTATIONS_KEY_PREFIX, tile.id,)
 
+    def _get_default_request_data(self):
+        # If we don't have a schema, just take the request
+        if self.tileType is None or self.tileType.schema is None:
+            data = self.tile.request.form.copy()
+        else:
+            # Try to decode the form data properly if we can
+            try:
+                data = decode(self.tile.request.form,
+                              self.tileType.schema, missing=True)
+            except (ValueError, UnicodeDecodeError,):
+                LOGGER.exception(u"Could not convert form data to schema")
+                return self.data.copy()
+        return data
+
     def get(self):
-        data = dict(self.annotations.get(self.key, {}))
+        data = self._get_default_request_data()
+        data.update(dict(self.annotations.get(self.key, {})))
         if self.tileType is not None and self.tileType.schema is not None:
             for name, field in getFields(self.tileType.schema).items():
                 if name not in data:


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-21T21:08:21+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/e6861ecd1d3f37e817afa4a7cfd6569760615ca7

Remove .installed.cfg

Files changed:
D .installed.cfg

diff --git a/.installed.cfg b/.installed.cfg
deleted file mode 100644
index 57d4595..0000000
--- a/.installed.cfg
+++ /dev/null
@@ -1,136 +0,0 @@
-[buildout]
-installed_develop_eggs = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs/plone.tiles.egg-link
-parts = instance test code-analysis extra
-
-[instance]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/instance
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/instance
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/instance/bin/interpreter
-__buildout_signature__ = plone.recipe.zope2instance-4.2.16-py2.7.egg ZODB3-3.10.5-py2.7-macosx-10.10-intel.egg Zope2-2.13.22-py2.7.egg zc.recipe.egg-1.3.2-py2.7.egg mailinglogger-3.7.0-py2.7.egg setuptools-5.8-py2.7.egg zc.buildout-2.2.5-py2.7.egg zope.interface-3.6.7-py2.7-macosx-10.10-intel.egg zope.event-3.5.2-py2.7.egg zdaemon-2.0.7-py2.7.egg ZConfig-2.9.1-py2.7.egg zc.lockfile-1.0.2-py2.7.egg transaction-1.1.1-py2.7.egg Products.StandardCacheManagers-2.13.1-py2.7.egg Products.PythonScripts-2.13.2-py2.7.egg Products.MIMETools-2.13.0-py2.7.egg Products.MailHost-2.13.1-py2.7.egg Products.ExternalMethod-2.13.0-py2.7.egg Products.BTreeFolder2-2.13.3-py2.7.egg zope.viewlet-3.7.2-py2.7.egg zope.traversing-3.13.2-py2.7.egg zope.testing-3.9.7-py2.7.egg zope.testbrowser-3.11.1-py2.7.egg zope.tales-3.5.3-py2.7.egg zope.tal-3.5.2-py2.7.egg zope.structuredtext-3.5.1-py2.7.egg zope.size-3.4.1-py2.7.egg zope.site-3.9.2-py2.7.egg zope.sequencesort-3.4.0-py2.7.egg zope.sendmail-3.7.5-py2.7.egg zope.security-3.7.4-py2.7-macosx-10.10-intel.egg zope.schema-4.2.2-py2.7.egg zope.publisher-3.12.6-py2.7.egg zope.ptresource-3.9.0-py2.7.egg zope.proxy-3.6.1-py2.7-macosx-10.10-intel.egg zope.processlifetime-1.0-py2.7.egg zope.pagetemplate-3.6.3-py2.7.egg zope.location-3.9.1-py2.7.egg zope.lifecycleevent-3.6.2-py2.7.egg zope.i18nmessageid-3.5.3-py2.7-macosx-10.10-intel.egg zope.i18n-3.7.4-py2.7.egg zope.exceptions-3.6.2-py2.7.egg zope.deferredimport-3.5.3-py2.7.egg zope.contenttype-3.5.5-py2.7.egg zope.contentprovider-3.7.2-py2.7.egg zope.container-3.11.2-py2.7-macosx-10.10-intel.egg zope.configuration-3.7.4-py2.7.egg zope.component-3.9.5-py2.7.egg zope.browserresource-3.10.3-py2.7.egg zope.browserpage-3.12.2-py2.7.egg zope.browsermenu-3.9.1-py2.7.egg zope.browser-1.3-py2.7.egg zLOG-2.11.1-py2.7.egg zExceptions-2.13.0-py2.7.egg tempstorage-2.12.2-py2.7.egg pytz-2013b-py2.7.egg initgroups-2.13.0-py2.7-macosx-10.10-intel.egg docutils-0.9.1-py2.7.egg ZopeUndo-2.12.0-py2.7.egg RestrictedPython-3.6.0-py2.7.egg Record-2.13.0-py2.7-macosx-10.10-intel.egg Products.ZCTextIndex-2.13.5-py2.7-macosx-10.10-intel.egg Products.ZCatalog-3.0.2-py2.7.egg Products.OFSP-2.13.2-py2.7.egg Persistence-2.13.2-py2.7-macosx-10.10-intel.egg MultiMapping-2.13.0-py2.7-macosx-10.10-intel.egg Missing-2.13.1-py2.7-macosx-10.10-intel.egg ExtensionClass-2.13.2-py2.7-macosx-10.10-intel.egg DocumentTemplate-2.13.2-py2.7-macosx-10.10-intel.egg DateTime-3.0.3-py2.7.egg Acquisition-2.13.8-py2.7-macosx-10.10-intel.egg AccessControl-3.0.11-py2.7-macosx-10.10-intel.egg mechanize-0.2.5-py2.7.egg zope.annotation-3.5.0-py2.7.egg zope.broken-3.6.0-py2.7.egg zope.filerepresentation-3.6.1-py2.7.egg zope.dottedname-3.4.6-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-eggs = Plone
-	plone.app.upgrade
-	plone.tiles%(__buildout_space_n__)s
-eggs-directory = /Users/datakurre/.buildout/eggs
-environment-vars = zope_i18n_compile_mo_files true
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-http-address = 8080
-initialization = 
-location = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/instance
-python = buildout
-recipe = plone.recipe.zope2instance
-user = admin:admin
-zcml = plone.tiles
-
-[test]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/test
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/test
-__buildout_signature__ = zc.recipe.testrunner-1.2.1-py2.7.egg zc.recipe.egg-1.3.2-py2.7.egg setuptools-5.8-py2.7.egg zope.testing-3.9.7-py2.7.egg zc.buildout-2.2.5-py2.7.egg zope.interface-3.6.7-py2.7-macosx-10.10-intel.egg zope.exceptions-3.6.2-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-defaults = ['-s', 'plone.tiles', '--auto-color', '--auto-progress']
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-eggs = Plone
-	plone.app.upgrade
-	plone.tiles [test]%(__buildout_space_n__)s
-eggs-directory = /Users/datakurre/.buildout/eggs
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-location = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/test
-python = buildout
-recipe = zc.recipe.testrunner
-script = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/test
-
-[code-analysis]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/code-analysis
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/code-analysis
-__buildout_signature__ = plone.recipe.codeanalysis-1.1.1-py2.7.egg zc.recipe.egg-1.3.2-py2.7.egg zc.buildout-2.2.5-py2.7.egg setuptools-5.8-py2.7.egg flake8-2.4.1-py2.7.egg mccabe-0.3-py2.7.egg pep8-1.5.7-py2.7.egg pyflakes-0.8.1-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-clean-lines = False
-clean-lines-exclude = 
-csslint = False
-csslint-bin = csslint
-debug-statements = False
-deprecated-alias = False
-deprecated-aliases = False
-deprecated-methods = False
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/plone/tiles
-eggs-directory = /Users/datakurre/.buildout/eggs
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-find-untranslated = False
-flake8 = True
-flake8-exclude = bootstrap.py,boostrap-buildout.py,docs,*.egg
-flake8-filesystem = False
-flake8-ignore = E501,C901
-flake8-max-complexity = 10
-flake8-max-line-length = 79
-hasattr = False
-i18ndude-bin = 
-imports = False
-jenkins = False
-jscs = False
-jscs-bin = jscs
-jscs-exclude = 
-jshint = False
-jshint-bin = jshint
-jshint-exclude = 
-location = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/code-analysis
-pep3101 = False
-pre-commit-hook = False
-prefer-single-quotes = False
-python = buildout
-recipe = plone.recipe.codeanalysis
-return-status-codes = True
-string-formatting = False
-utf8-header = False
-zptlint = False
-zptlint-bin = 
-
-[extra]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/createcoverage
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/coverage
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/coveralls
-__buildout_signature__ = zc.recipe.egg-1.3.2-py2.7.egg setuptools-5.8-py2.7.egg zc.buildout-2.2.5-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-eggs = createcoverage
-	coveralls
-eggs-directory = /Users/datakurre/.buildout/eggs
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-python = buildout
-recipe = zc.recipe.egg
-
-[buildout]
-installed_develop_eggs = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs/plone.tiles.egg-link
-
-[buildout]
-parts = test code-analysis extra instance
-
-[buildout]
-parts = code-analysis extra instance test
-
-[buildout]
-parts = extra instance test code-analysis
-
-[buildout]
-parts = instance test code-analysis


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-21T21:08:21+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/4bb4fd71b7a35f6439bebe5a383027295feef693

Update changelog

Files changed:
M CHANGELOG.rst

diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index b0ef192..0673cc1 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -4,8 +4,9 @@ Changelog
 1.4.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
-
+- Add support for overriding transient data manager with persistent by adding
+  X-Tile-Persistent -header
+  [datakurre]
 
 1.4.0 (2015-05-25)
 ------------------


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-22T13:50:09+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/0edcad6b08994bfb21978a2cee5791d786f0cbdf

Change persistent tile override flag to be either marker interface or header; Add tests

Files changed:
M plone/tiles/data.py
M plone/tiles/interfaces.py
M plone/tiles/tests.py
M plone/tiles/tiles.rst

diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index 2acbc22..302eb15 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -1,30 +1,31 @@
 # -*- coding: utf-8 -*-
-
 import logging
 import urllib
-
-from zope.interface import implements, implementer, Interface
-from zope.component import adapts, adapter, queryUtility, getMultiAdapter
+from zope.interface import implements
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.component import adapts
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.component import getMultiAdapter
 from zope.component.interfaces import ComponentLookupError
-
-from zope.schema import getFieldsInOrder, getFields
+from zope.schema import getFieldsInOrder
+from zope.schema import getFields
 from zope.schema.interfaces import ISequence
-
 from zope.annotation.interfaces import IAnnotations
-
 from plone.tiles.interfaces import ITileType
 from plone.tiles.interfaces import ITile
 from plone.tiles.interfaces import IPersistentTile
+from plone.tiles.interfaces import IPersistentTileOverrides
 from plone.tiles.interfaces import ITileDataManager
 from plone.tiles.interfaces import ITileDataContext
 from plone.tiles.interfaces import IFieldTypeConverter
-
 from persistent.dict import PersistentDict
 
 try:
     import json
     assert json  # silence pyflakes
-except:
+except ImportError:
     import simplejson as json
 
 
@@ -35,7 +36,9 @@
 @adapter(ITile)
 @implementer(ITileDataManager)
 def transientTileDataManagerFactory(tile):
-    if tile.request.get('X-Tile-Persistent') or tile.request.environ.get('X-Tile-Persistent'):
+    if IPersistentTileOverrides.providedBy(tile.request):
+        return PersistentTileDataManager(tile)
+    elif tile.request.getHeader('X-Tile-Persistent'):
         return PersistentTileDataManager(tile)
     else:
         return TransientTileDataManager(tile)
diff --git a/plone/tiles/interfaces.py b/plone/tiles/interfaces.py
index 67ceb1b..66a8fbf 100644
--- a/plone/tiles/interfaces.py
+++ b/plone/tiles/interfaces.py
@@ -100,6 +100,18 @@ class IPersistentTile(ITile):
     """
 
 
+class IPersistentTileOverrides(Interface):
+    """Marker interface for request to prefer existing persistent
+    data (stored in annotations) over transient data on GET requests
+    and store submitted data as persistent on POST request.
+
+    This is the server side alternative for setting request header:
+
+        X-Tile-Persistent
+
+    """
+
+
 class IESIRendered(Interface):
     """Marker interface for tiles which are to be rendered via ESI.
 
diff --git a/plone/tiles/tests.py b/plone/tiles/tests.py
index b507735..7e9bc08 100644
--- a/plone/tiles/tests.py
+++ b/plone/tiles/tests.py
@@ -57,7 +57,8 @@ def tearDown(self):
 def test_suite():
     return unittest.TestSuite((
         layered(doctest.DocFileSuite('tiles.rst', 'directives.rst',
-                                     'data.rst', 'esi.rst'),
+                                     'data.rst', 'esi.rst',
+                                     optionflags=doctest.ELLIPSIS),
                 layer=PLONE_TILES_INTEGRATION_TESTING
                 ),
     ))
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 95918ad..0c47487 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -437,6 +437,87 @@ We can also remove the annotation using the data manager:
     >>> sorted(dict(context.__annotations__).items()) # doctest: +ELLIPSIS
     []
 
+
+Overriding transient data with persistent
+-----------------------------------------
+
+To be able to re-use the same centrally managed tile based layouts for
+multiple context objects, but still allow optional customization for
+tiles, it's possible to override otherwise transient tile configuration
+with context specific persistent configuration.
+
+This is done by either by setting a client side request header
+``X-Tile-Persistent`` or tagging request server side (e.g. in a view returning
+the selected layout) with a special marker interface
+``IPersistentTileOverrides``:
+
+    >>> from plone.tiles.interfaces import IPersistentTileOverrides
+    >>> from zope.interface import alsoProvides
+    >>> request = TestRequest(form={
+    ...     'title': u'My title', 'count': 5, 'cssClass': u'foo',
+    ... })
+    >>> alsoProvides(request, IPersistentTileOverrides)
+
+Yet, just adding the flag, doesn't create new persistent annotations
+on GET requests:
+
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.PersistentTileDataManager object at ...>
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> from zope.annotation.interfaces import IAnnotations
+    >>> list(IAnnotations(context).keys())
+    []
+
+That's because the data is persistent only once it's set:
+
+    >>> data = ITileDataManager(tile).get()
+    >>> data.update({'count': 6})
+    >>> ITileDataManager(tile).set(data)
+    >>> list(IAnnotations(context).keys())
+    [u'plone.tiles.data...']
+
+    >>> sorted(IAnnotations(context).values()[0].items(), key=lambda x: x[0])
+    [('count', 6), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 6), ('cssClass', 'foo'), ('title', u'My title')]
+
+Without the persistent flag, fixed transient data would be returned:
+
+    >>> from zope.interface import noLongerProvides
+    >>> noLongerProvides(request, IPersistentTileOverrides)
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.TransientTileDataManager object at ...>
+
+    >>> data = ITileDataManager(tile).get()
+    >>> sorted(data.items(), key=lambda x: x[0])
+    [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
+
+Finally, the persistent override could also be deleted:
+
+    >>> alsoProvides(request, IPersistentTileOverrides)
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.PersistentTileDataManager object at ...>
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 6), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> ITileDataManager(tile).delete()
+    >>> list(IAnnotations(context).keys())
+    []
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> noLongerProvides(request, IPersistentTileOverrides)
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.TransientTileDataManager object at ...>
+
+
 Tile URLs
 ---------
 


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-22T14:22:14+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/d4a4923d5d97c789c8abd30fbfad61171f5d5939

Restore support for X-Persistent-Tile as query paremeter

Files changed:
M plone/tiles/data.py
M plone/tiles/tiles.rst

diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index 302eb15..46bdccc 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -38,6 +38,8 @@
 def transientTileDataManagerFactory(tile):
     if IPersistentTileOverrides.providedBy(tile.request):
         return PersistentTileDataManager(tile)
+    elif tile.request.get('X-Tile-Persistent'):
+        return PersistentTileDataManager(tile)
     elif tile.request.getHeader('X-Tile-Persistent'):
         return PersistentTileDataManager(tile)
     else:
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 0c47487..6561ced 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -446,8 +446,8 @@ multiple context objects, but still allow optional customization for
 tiles, it's possible to override otherwise transient tile configuration
 with context specific persistent configuration.
 
-This is done by either by setting a client side request header
-``X-Tile-Persistent`` or tagging request server side (e.g. in a view returning
+This is done by either by setting a client side request header or query param
+``X-Tile-Persistent``, or tagging request server side (e.g. in a view returning
 the selected layout) with a special marker interface
 ``IPersistentTileOverrides``:
 


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-22T16:54:23+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/d8ae3e698fe25c721874783580a06e1454a891a1

Remove IPersistentTileOverrides marker, because ESI can only work with query string param

Files changed:
M plone/tiles/data.py
M plone/tiles/interfaces.py
M plone/tiles/tiles.rst

diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index 46bdccc..8829ccc 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -16,7 +16,6 @@
 from plone.tiles.interfaces import ITileType
 from plone.tiles.interfaces import ITile
 from plone.tiles.interfaces import IPersistentTile
-from plone.tiles.interfaces import IPersistentTileOverrides
 from plone.tiles.interfaces import ITileDataManager
 from plone.tiles.interfaces import ITileDataContext
 from plone.tiles.interfaces import IFieldTypeConverter
@@ -36,9 +35,7 @@
 @adapter(ITile)
 @implementer(ITileDataManager)
 def transientTileDataManagerFactory(tile):
-    if IPersistentTileOverrides.providedBy(tile.request):
-        return PersistentTileDataManager(tile)
-    elif tile.request.get('X-Tile-Persistent'):
+    if tile.request.get('X-Tile-Persistent'):
         return PersistentTileDataManager(tile)
     elif tile.request.getHeader('X-Tile-Persistent'):
         return PersistentTileDataManager(tile)
diff --git a/plone/tiles/interfaces.py b/plone/tiles/interfaces.py
index 66a8fbf..67ceb1b 100644
--- a/plone/tiles/interfaces.py
+++ b/plone/tiles/interfaces.py
@@ -100,18 +100,6 @@ class IPersistentTile(ITile):
     """
 
 
-class IPersistentTileOverrides(Interface):
-    """Marker interface for request to prefer existing persistent
-    data (stored in annotations) over transient data on GET requests
-    and store submitted data as persistent on POST request.
-
-    This is the server side alternative for setting request header:
-
-        X-Tile-Persistent
-
-    """
-
-
 class IESIRendered(Interface):
     """Marker interface for tiles which are to be rendered via ESI.
 
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 6561ced..53c0adc 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -447,16 +447,12 @@ tiles, it's possible to override otherwise transient tile configuration
 with context specific persistent configuration.
 
 This is done by either by setting a client side request header or query param
-``X-Tile-Persistent``, or tagging request server side (e.g. in a view returning
-the selected layout) with a special marker interface
-``IPersistentTileOverrides``:
+``X-Tile-Persistent``:
 
-    >>> from plone.tiles.interfaces import IPersistentTileOverrides
-    >>> from zope.interface import alsoProvides
-    >>> request = TestRequest(form={
-    ...     'title': u'My title', 'count': 5, 'cssClass': u'foo',
-    ... })
-    >>> alsoProvides(request, IPersistentTileOverrides)
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
+    ...     environ={'X_TILE_PERSISTENT': True}
+    ... )
 
 Yet, just adding the flag, doesn't create new persistent annotations
 on GET requests:
@@ -488,8 +484,10 @@ That's because the data is persistent only once it's set:
 
 Without the persistent flag, fixed transient data would be returned:
 
-    >>> from zope.interface import noLongerProvides
-    >>> noLongerProvides(request, IPersistentTileOverrides)
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
+    ... )
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
     >>> ITileDataManager(tile)
     <plone.tiles.data.TransientTileDataManager object at ...>
 
@@ -499,7 +497,11 @@ Without the persistent flag, fixed transient data would be returned:
 
 Finally, the persistent override could also be deleted:
 
-    >>> alsoProvides(request, IPersistentTileOverrides)
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
+    ...     environ={'X_TILE_PERSISTENT': True}
+    ... )
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
     >>> ITileDataManager(tile)
     <plone.tiles.data.PersistentTileDataManager object at ...>
 
@@ -513,7 +515,10 @@ Finally, the persistent override could also be deleted:
     >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
     [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
 
-    >>> noLongerProvides(request, IPersistentTileOverrides)
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
+    ... )
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
     >>> ITileDataManager(tile)
     <plone.tiles.data.TransientTileDataManager object at ...>
 


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-08-22T19:29:44+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/ed70dd38e2360f6449a6f8c3105a3586c72176c2

Fix to only support 'X-Tile-Persistent' query parameter, that's only ESI supported option

Files changed:
M plone/tiles/data.py
M plone/tiles/tiles.rst

diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index 8829ccc..83d2586 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -37,8 +37,6 @@
 def transientTileDataManagerFactory(tile):
     if tile.request.get('X-Tile-Persistent'):
         return PersistentTileDataManager(tile)
-    elif tile.request.getHeader('X-Tile-Persistent'):
-        return PersistentTileDataManager(tile)
     else:
         return TransientTileDataManager(tile)
 
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 53c0adc..8179f36 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -450,8 +450,8 @@ This is done by either by setting a client side request header or query param
 ``X-Tile-Persistent``:
 
     >>> request = TestRequest(
-    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
-    ...     environ={'X_TILE_PERSISTENT': True}
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo',
+    ...           'X-Tile-Persistent': 'yes'}
     ... )
 
 Yet, just adding the flag, doesn't create new persistent annotations
@@ -498,8 +498,8 @@ Without the persistent flag, fixed transient data would be returned:
 Finally, the persistent override could also be deleted:
 
     >>> request = TestRequest(
-    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
-    ...     environ={'X_TILE_PERSISTENT': True}
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo',
+    ...           'X-Tile-Persistent': 'yes'}
     ... )
     >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
     >>> ITileDataManager(tile)


Repository: plone.tiles


Branch: refs/heads/master
Date: 2015-09-02T22:58:35+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.tiles/commit/04bd325a80c6e02df2c5648954cf3c4c92d3c064

Merge pull request #4 from plone/datakurre-transient-to-persistent

Add opt-in persistent overriding for transient tile data

Files changed:
M CHANGELOG.rst
M plone/tiles/configure.zcml
M plone/tiles/data.py
M plone/tiles/tests.py
M plone/tiles/tiles.rst
D .installed.cfg

diff --git a/.installed.cfg b/.installed.cfg
deleted file mode 100644
index 57d4595..0000000
--- a/.installed.cfg
+++ /dev/null
@@ -1,136 +0,0 @@
-[buildout]
-installed_develop_eggs = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs/plone.tiles.egg-link
-parts = instance test code-analysis extra
-
-[instance]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/instance
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/instance
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/instance/bin/interpreter
-__buildout_signature__ = plone.recipe.zope2instance-4.2.16-py2.7.egg ZODB3-3.10.5-py2.7-macosx-10.10-intel.egg Zope2-2.13.22-py2.7.egg zc.recipe.egg-1.3.2-py2.7.egg mailinglogger-3.7.0-py2.7.egg setuptools-5.8-py2.7.egg zc.buildout-2.2.5-py2.7.egg zope.interface-3.6.7-py2.7-macosx-10.10-intel.egg zope.event-3.5.2-py2.7.egg zdaemon-2.0.7-py2.7.egg ZConfig-2.9.1-py2.7.egg zc.lockfile-1.0.2-py2.7.egg transaction-1.1.1-py2.7.egg Products.StandardCacheManagers-2.13.1-py2.7.egg Products.PythonScripts-2.13.2-py2.7.egg Products.MIMETools-2.13.0-py2.7.egg Products.MailHost-2.13.1-py2.7.egg Products.ExternalMethod-2.13.0-py2.7.egg Products.BTreeFolder2-2.13.3-py2.7.egg zope.viewlet-3.7.2-py2.7.egg zope.traversing-3.13.2-py2.7.egg zope.testing-3.9.7-py2.7.egg zope.testbrowser-3.11.1-py2.7.egg zope.tales-3.5.3-py2.7.egg zope.tal-3.5.2-py2.7.egg zope.structuredtext-3.5.1-py2.7.egg zope.size-3.4.1-py2.7.egg zope.site-3.9.2-py2.7.egg zope.sequencesort-3.4.0-py2.7.egg zope.sendmail-3.7.5-py2.7.egg zope.security-3.7.4-py2.7-macosx-10.10-intel.egg zope.schema-4.2.2-py2.7.egg zope.publisher-3.12.6-py2.7.egg zope.ptresource-3.9.0-py2.7.egg zope.proxy-3.6.1-py2.7-macosx-10.10-intel.egg zope.processlifetime-1.0-py2.7.egg zope.pagetemplate-3.6.3-py2.7.egg zope.location-3.9.1-py2.7.egg zope.lifecycleevent-3.6.2-py2.7.egg zope.i18nmessageid-3.5.3-py2.7-macosx-10.10-intel.egg zope.i18n-3.7.4-py2.7.egg zope.exceptions-3.6.2-py2.7.egg zope.deferredimport-3.5.3-py2.7.egg zope.contenttype-3.5.5-py2.7.egg zope.contentprovider-3.7.2-py2.7.egg zope.container-3.11.2-py2.7-macosx-10.10-intel.egg zope.configuration-3.7.4-py2.7.egg zope.component-3.9.5-py2.7.egg zope.browserresource-3.10.3-py2.7.egg zope.browserpage-3.12.2-py2.7.egg zope.browsermenu-3.9.1-py2.7.egg zope.browser-1.3-py2.7.egg zLOG-2.11.1-py2.7.egg zExceptions-2.13.0-py2.7.egg tempstorage-2.12.2-py2.7.egg pytz-2013b-py2.7.egg initgroups-2.13.0-py2.7-macosx-10.10-intel.egg docutils-0.9.1-py2.7.egg ZopeUndo-2.12.0-py2.7.egg RestrictedPython-3.6.0-py2.7.egg Record-2.13.0-py2.7-macosx-10.10-intel.egg Products.ZCTextIndex-2.13.5-py2.7-macosx-10.10-intel.egg Products.ZCatalog-3.0.2-py2.7.egg Products.OFSP-2.13.2-py2.7.egg Persistence-2.13.2-py2.7-macosx-10.10-intel.egg MultiMapping-2.13.0-py2.7-macosx-10.10-intel.egg Missing-2.13.1-py2.7-macosx-10.10-intel.egg ExtensionClass-2.13.2-py2.7-macosx-10.10-intel.egg DocumentTemplate-2.13.2-py2.7-macosx-10.10-intel.egg DateTime-3.0.3-py2.7.egg Acquisition-2.13.8-py2.7-macosx-10.10-intel.egg AccessControl-3.0.11-py2.7-macosx-10.10-intel.egg mechanize-0.2.5-py2.7.egg zope.annotation-3.5.0-py2.7.egg zope.broken-3.6.0-py2.7.egg zope.filerepresentation-3.6.1-py2.7.egg zope.dottedname-3.4.6-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-eggs = Plone
-	plone.app.upgrade
-	plone.tiles%(__buildout_space_n__)s
-eggs-directory = /Users/datakurre/.buildout/eggs
-environment-vars = zope_i18n_compile_mo_files true
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-http-address = 8080
-initialization = 
-location = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/instance
-python = buildout
-recipe = plone.recipe.zope2instance
-user = admin:admin
-zcml = plone.tiles
-
-[test]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/test
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/test
-__buildout_signature__ = zc.recipe.testrunner-1.2.1-py2.7.egg zc.recipe.egg-1.3.2-py2.7.egg setuptools-5.8-py2.7.egg zope.testing-3.9.7-py2.7.egg zc.buildout-2.2.5-py2.7.egg zope.interface-3.6.7-py2.7-macosx-10.10-intel.egg zope.exceptions-3.6.2-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-defaults = ['-s', 'plone.tiles', '--auto-color', '--auto-progress']
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-eggs = Plone
-	plone.app.upgrade
-	plone.tiles [test]%(__buildout_space_n__)s
-eggs-directory = /Users/datakurre/.buildout/eggs
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-location = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/test
-python = buildout
-recipe = zc.recipe.testrunner
-script = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/test
-
-[code-analysis]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/code-analysis
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/code-analysis
-__buildout_signature__ = plone.recipe.codeanalysis-1.1.1-py2.7.egg zc.recipe.egg-1.3.2-py2.7.egg zc.buildout-2.2.5-py2.7.egg setuptools-5.8-py2.7.egg flake8-2.4.1-py2.7.egg mccabe-0.3-py2.7.egg pep8-1.5.7-py2.7.egg pyflakes-0.8.1-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-clean-lines = False
-clean-lines-exclude = 
-csslint = False
-csslint-bin = csslint
-debug-statements = False
-deprecated-alias = False
-deprecated-aliases = False
-deprecated-methods = False
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/plone/tiles
-eggs-directory = /Users/datakurre/.buildout/eggs
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-find-untranslated = False
-flake8 = True
-flake8-exclude = bootstrap.py,boostrap-buildout.py,docs,*.egg
-flake8-filesystem = False
-flake8-ignore = E501,C901
-flake8-max-complexity = 10
-flake8-max-line-length = 79
-hasattr = False
-i18ndude-bin = 
-imports = False
-jenkins = False
-jscs = False
-jscs-bin = jscs
-jscs-exclude = 
-jshint = False
-jshint-bin = jshint
-jshint-exclude = 
-location = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/parts/code-analysis
-pep3101 = False
-pre-commit-hook = False
-prefer-single-quotes = False
-python = buildout
-recipe = plone.recipe.codeanalysis
-return-status-codes = True
-string-formatting = False
-utf8-header = False
-zptlint = False
-zptlint-bin = 
-
-[extra]
-__buildout_installed__ = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/createcoverage
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/coverage
-	/Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin/coveralls
-__buildout_signature__ = zc.recipe.egg-1.3.2-py2.7.egg setuptools-5.8-py2.7.egg zc.buildout-2.2.5-py2.7.egg
-_b = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-_d = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-_e = /Users/datakurre/.buildout/eggs
-bin-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/bin
-develop-eggs-directory = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs
-eggs = createcoverage
-	coveralls
-eggs-directory = /Users/datakurre/.buildout/eggs
-executable = /Users/datakurre/.virtualenvs/python27/bin/python
-find-links = http://dist.plone.org/release/5.0b1/
-	http://dist.plone.org/thirdparty/
-python = buildout
-recipe = zc.recipe.egg
-
-[buildout]
-installed_develop_eggs = /Users/datakurre/Code/plone.app.mosaic/extras/plone.tiles/develop-eggs/plone.tiles.egg-link
-
-[buildout]
-parts = test code-analysis extra instance
-
-[buildout]
-parts = code-analysis extra instance test
-
-[buildout]
-parts = extra instance test code-analysis
-
-[buildout]
-parts = instance test code-analysis
diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index b0ef192..0673cc1 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -4,8 +4,9 @@ Changelog
 1.4.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
-
+- Add support for overriding transient data manager with persistent by adding
+  X-Tile-Persistent -header
+  [datakurre]
 
 1.4.0 (2015-05-25)
 ------------------
diff --git a/plone/tiles/configure.zcml b/plone/tiles/configure.zcml
index 3adb5f7..da7faf0 100644
--- a/plone/tiles/configure.zcml
+++ b/plone/tiles/configure.zcml
@@ -4,7 +4,7 @@
     i18n_domain="plone.tiles">
 
     <!-- Data manager -->
-    <adapter factory=".data.TransientTileDataManager" />
+    <adapter factory=".data.transientTileDataManagerFactory" />
     <adapter factory=".data.PersistentTileDataManager" />
     <adapter factory=".data.defaultTileDataContext" />
 
diff --git a/plone/tiles/data.py b/plone/tiles/data.py
index f6b9292..83d2586 100644
--- a/plone/tiles/data.py
+++ b/plone/tiles/data.py
@@ -1,30 +1,30 @@
 # -*- coding: utf-8 -*-
-
 import logging
 import urllib
-
-from zope.interface import implements, implementer, Interface
-from zope.component import adapts, adapter, queryUtility, getMultiAdapter
+from zope.interface import implements
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.component import adapts
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.component import getMultiAdapter
 from zope.component.interfaces import ComponentLookupError
-
-from zope.schema import getFieldsInOrder, getFields
+from zope.schema import getFieldsInOrder
+from zope.schema import getFields
 from zope.schema.interfaces import ISequence
-
 from zope.annotation.interfaces import IAnnotations
-
 from plone.tiles.interfaces import ITileType
 from plone.tiles.interfaces import ITile
 from plone.tiles.interfaces import IPersistentTile
 from plone.tiles.interfaces import ITileDataManager
 from plone.tiles.interfaces import ITileDataContext
 from plone.tiles.interfaces import IFieldTypeConverter
-
 from persistent.dict import PersistentDict
 
 try:
     import json
     assert json  # silence pyflakes
-except:
+except ImportError:
     import simplejson as json
 
 
@@ -32,6 +32,15 @@
 LOGGER = logging.getLogger('plone.tiles')
 
 
+@adapter(ITile)
+@implementer(ITileDataManager)
+def transientTileDataManagerFactory(tile):
+    if tile.request.get('X-Tile-Persistent'):
+        return PersistentTileDataManager(tile)
+    else:
+        return TransientTileDataManager(tile)
+
+
 class TransientTileDataManager(object):
     """A data manager for transient tile data, which reads data from the
     request query string.
@@ -103,8 +112,23 @@ def __init__(self, tile):
 
         self.key = "%s.%s" % (ANNOTATIONS_KEY_PREFIX, tile.id,)
 
+    def _get_default_request_data(self):
+        # If we don't have a schema, just take the request
+        if self.tileType is None or self.tileType.schema is None:
+            data = self.tile.request.form.copy()
+        else:
+            # Try to decode the form data properly if we can
+            try:
+                data = decode(self.tile.request.form,
+                              self.tileType.schema, missing=True)
+            except (ValueError, UnicodeDecodeError,):
+                LOGGER.exception(u"Could not convert form data to schema")
+                return self.data.copy()
+        return data
+
     def get(self):
-        data = dict(self.annotations.get(self.key, {}))
+        data = self._get_default_request_data()
+        data.update(dict(self.annotations.get(self.key, {})))
         if self.tileType is not None and self.tileType.schema is not None:
             for name, field in getFields(self.tileType.schema).items():
                 if name not in data:
diff --git a/plone/tiles/tests.py b/plone/tiles/tests.py
index b507735..7e9bc08 100644
--- a/plone/tiles/tests.py
+++ b/plone/tiles/tests.py
@@ -57,7 +57,8 @@ def tearDown(self):
 def test_suite():
     return unittest.TestSuite((
         layered(doctest.DocFileSuite('tiles.rst', 'directives.rst',
-                                     'data.rst', 'esi.rst'),
+                                     'data.rst', 'esi.rst',
+                                     optionflags=doctest.ELLIPSIS),
                 layer=PLONE_TILES_INTEGRATION_TESTING
                 ),
     ))
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 95918ad..8179f36 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -437,6 +437,92 @@ We can also remove the annotation using the data manager:
     >>> sorted(dict(context.__annotations__).items()) # doctest: +ELLIPSIS
     []
 
+
+Overriding transient data with persistent
+-----------------------------------------
+
+To be able to re-use the same centrally managed tile based layouts for
+multiple context objects, but still allow optional customization for
+tiles, it's possible to override otherwise transient tile configuration
+with context specific persistent configuration.
+
+This is done by either by setting a client side request header or query param
+``X-Tile-Persistent``:
+
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo',
+    ...           'X-Tile-Persistent': 'yes'}
+    ... )
+
+Yet, just adding the flag, doesn't create new persistent annotations
+on GET requests:
+
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.PersistentTileDataManager object at ...>
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> from zope.annotation.interfaces import IAnnotations
+    >>> list(IAnnotations(context).keys())
+    []
+
+That's because the data is persistent only once it's set:
+
+    >>> data = ITileDataManager(tile).get()
+    >>> data.update({'count': 6})
+    >>> ITileDataManager(tile).set(data)
+    >>> list(IAnnotations(context).keys())
+    [u'plone.tiles.data...']
+
+    >>> sorted(IAnnotations(context).values()[0].items(), key=lambda x: x[0])
+    [('count', 6), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 6), ('cssClass', 'foo'), ('title', u'My title')]
+
+Without the persistent flag, fixed transient data would be returned:
+
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
+    ... )
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.TransientTileDataManager object at ...>
+
+    >>> data = ITileDataManager(tile).get()
+    >>> sorted(data.items(), key=lambda x: x[0])
+    [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
+
+Finally, the persistent override could also be deleted:
+
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo',
+    ...           'X-Tile-Persistent': 'yes'}
+    ... )
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.PersistentTileDataManager object at ...>
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 6), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> ITileDataManager(tile).delete()
+    >>> list(IAnnotations(context).keys())
+    []
+
+    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])
+    [('count', 5), ('cssClass', 'foo'), ('title', u'My title')]
+
+    >>> request = TestRequest(
+    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},
+    ... )
+    >>> tile = getMultiAdapter((context, request), name=u"sample.tile")
+    >>> ITileDataManager(tile)
+    <plone.tiles.data.TransientTileDataManager object at ...>
+
+
 Tile URLs
 ---------
 


