Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-12T22:16:23+02:00
Author: Lukas Graf (lukasgraf) <lukas.graf@4teamwork.ch>
Commit: https://github.com/plone/plone.protect/commit/20aede9e34b9cfb402692e63d7ecf550039de1b2

README: Document addTokenToUrl() and reorder ways to

allow writes on read in order of ascending insecurity:
- Adding CSRF token
- Whitelisting a single object for writes
- Whitelisting entire request

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index e47dd3b..38353ad 100644
--- a/README.rst
+++ b/README.rst
@@ -154,25 +154,46 @@ it'll check for the existence of a correct auth token.
 Allowing write on read programatically
 --------------------------------------
 
-Just add an interface to the current request object::
+When you need to allow a known write on read, you've got several options.
 
-    from plone.protect.interfaces import IDisableCSRFProtection
-    from zope.interface import alsoProvides
-    alsoProvides(request, IDisableCSRFProtection)
+Adding a CSRF token to your links
+**********************************
 
-Warning! When you do this, the current request is susceptible to CSRF
-exploits so do any required CSRF protection manually.
+If you've got a GET request that causes a known write on read, your first
+option should be to simply add a CSRF token to the URLs that result in that
+request. ``plone.protect`` provides the ``addTokenToUrl`` function for this
+purpose::
+
+    from plone.protect.utils import addTokenToUrl
+
+    url = addTokenToUrl(url)
 
 
 If you just want to allow an object to be writable on a request...
 ******************************************************************
 
-You can use the ``safeWrite`` helper function.
+You can use the ``safeWrite`` helper function::
 
     from plone.protect.auto import safeWrite
+
     safeWrite(myobj, request)
 
 
+Marking the entire request as safe
+**********************************
+
+Just add the ``IDisableCSRFProtection`` interface to the current request
+object::
+
+    from plone.protect.interfaces import IDisableCSRFProtection
+    from zope.interface import alsoProvides
+
+    alsoProvides(request, IDisableCSRFProtection)
+
+Warning! When you do this, the current request is susceptible to CSRF
+exploits so do any required CSRF protection manually.
+
+
 Clickjacking Protection
 =======================
 


Repository: plone.protect


Branch: refs/heads/master
Date: 2015-10-12T15:44:13-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.protect/commit/adcd12316962adf97270e18c010d882ad341f574

Merge pull request #26 from plone/lg-document-addTokenToUrl

README: Document addTokenToUrl()

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index e47dd3b..38353ad 100644
--- a/README.rst
+++ b/README.rst
@@ -154,25 +154,46 @@ it'll check for the existence of a correct auth token.
 Allowing write on read programatically
 --------------------------------------
 
-Just add an interface to the current request object::
+When you need to allow a known write on read, you've got several options.
 
-    from plone.protect.interfaces import IDisableCSRFProtection
-    from zope.interface import alsoProvides
-    alsoProvides(request, IDisableCSRFProtection)
+Adding a CSRF token to your links
+**********************************
 
-Warning! When you do this, the current request is susceptible to CSRF
-exploits so do any required CSRF protection manually.
+If you've got a GET request that causes a known write on read, your first
+option should be to simply add a CSRF token to the URLs that result in that
+request. ``plone.protect`` provides the ``addTokenToUrl`` function for this
+purpose::
+
+    from plone.protect.utils import addTokenToUrl
+
+    url = addTokenToUrl(url)
 
 
 If you just want to allow an object to be writable on a request...
 ******************************************************************
 
-You can use the ``safeWrite`` helper function.
+You can use the ``safeWrite`` helper function::
 
     from plone.protect.auto import safeWrite
+
     safeWrite(myobj, request)
 
 
+Marking the entire request as safe
+**********************************
+
+Just add the ``IDisableCSRFProtection`` interface to the current request
+object::
+
+    from plone.protect.interfaces import IDisableCSRFProtection
+    from zope.interface import alsoProvides
+
+    alsoProvides(request, IDisableCSRFProtection)
+
+Warning! When you do this, the current request is susceptible to CSRF
+exploits so do any required CSRF protection manually.
+
+
 Clickjacking Protection
 =======================
 


