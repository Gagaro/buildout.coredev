Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-10-17T13:17:20+03:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/bd22cdd3442ec641ffbf343ea814db6260c07f82

reformat docs. semantic linebreaks.

Files changed:
M README.rst
M docs/LICENSE-copyright.rst
M docs/architectural-overview.rst
M docs/designchoices.rst
M docs/development.rst
M docs/index.rst
M docs/installation.rst
M docs/tests.rst

diff --git a/README.rst b/README.rst
index ab5b6fe..9a7fa23 100644
--- a/README.rst
+++ b/README.rst
@@ -1,11 +1,8 @@
 plone.app.event
 ===============
 
-Plone.app.event is the calendaring framework for Plone. It provides Dexterity
-behaviors and an Archetypes type, Timezone support, RFC5545 icalendar export,
-Recurrence support, event views and a lot more.
+Plone.app.event is the calendaring framework for Plone. It provides Dexterity behaviors and an Archetypes type, Timezone support, RFC5545 icalendar export, Recurrence support, event views and a lot more.
 
-For a Dexterity event type using plone.app.event, use plone.app.contenttypes
-1.1 or newer.
+For a Dexterity event type using plone.app.event, use plone.app.contenttypes 1.1 or newer.
 
 The complete documentation can be found on: https://ploneappevent.readthedocs.org
diff --git a/docs/LICENSE-copyright.rst b/docs/LICENSE-copyright.rst
index 6e45e01..042a98b 100644
--- a/docs/LICENSE-copyright.rst
+++ b/docs/LICENSE-copyright.rst
@@ -3,17 +3,8 @@ Copyright notice
 
 plone.app.event is copyright Plone Foundation
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2 of the License, or
-(at your option) any later version.
+This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-GNU General Public License for more details.
+This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 
-You should have received a copy of the GNU General Public License
-along with this program; if not, write to the Free Software
-Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
-MA 02111-1307 USA.
+You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
diff --git a/docs/architectural-overview.rst b/docs/architectural-overview.rst
index 052ad03..0ca5b82 100644
--- a/docs/architectural-overview.rst
+++ b/docs/architectural-overview.rst
@@ -4,22 +4,13 @@ Architectural Overview
 Design goals
 ------------
 
-The development of plone.app.event was done with following design goals in
-mind:
+The development of plone.app.event was done with following design goals in mind:
 
-  [a] Encapsulation and independence: All event related code should reside in a
-  seperate package (splitted into other packages, where appropriate). Plone
-  should be least dependend on plone.app.event. Best would be that one can
-  deinstall this feature completly.
+  [a] Encapsulation and independence: All event related code should reside in a seperate package (splitted into other packages, where appropriate). Plone should be least dependend on plone.app.event. Best would be that one can deinstall this feature completly.
 
-  [b] Dexterity support: plone.app.event should provide Dexterity behaviors,
-  which can be used in Dexterity type.
+  [b] Dexterity support: plone.app.event should provide Dexterity behaviors, which can be used in Dexterity type.
 
-  [c] Standards compliancy: the iCalendar / `RFC5545
-  <http://tools.ietf.org/html/rfc5545>`_ standard is wonderful flexible, so
-  plone.app.event should provide support for it by allowing ical exports. This
-  is also available for the current ATContentType based implementation, but
-  plone.app.event aims to improve it. A future goal is to support CalDAV also.
+  [c] Standards compliancy: the iCalendar / `RFC5545 <http://tools.ietf.org/html/rfc5545>`_ standard is wonderful flexible, so plone.app.event should provide support for it by allowing ical exports. This is also available for the current ATContentType based implementation, but plone.app.event aims to improve it. A future goal is to support CalDAV also.
 
   [d] Recurring events support based on the RFC5545 standard.
 
@@ -29,27 +20,7 @@ mind:
 
   [g] Timezone support.
 
-Encapsulation and independence: plone.app.event provides the Dexterity behaviors.
-The calendar and event portlets were moved from
-plone.app.portlets into plone.app.event, where they belong semantically - thus
-improving encapsulation and independence and reducing interwoven dependencies.
-The calendar portlet was completly refactored. The functionality of the
-CalendarTool (portal_calendar) was reimplenented. Important settings from the
-calendar-controlpanel are now available in the event configlet. Since the
-calendar portlet was the only consumer of the CalendarTool, the CalendarTool,
-the calendar controlpanel and the dependency to Products.CMFCalendar can be
-dropped. The new plone.app.widgets package implements z3cform
-based widgets, so the old datetime widget can be dropped. Python-dateutil
-provides recurrence calculations based on the RFC5545 standard -
-plone.formwidget.recurrence provides a awidget for recurrence and
-Products.DateRecurringIndex an appropriate index as a drop-in replacement for
-Zope's DateIndex. The iCalendar package was improved and is now used for
-plone.app.event to provide icalendar serialization. The timezone support is
-based on the pytz package. Plone now haves a portal timezone, User timezones
-and every event can define another timezone, if wished. User timezones are
-planned. Whole day events get their starttime set to
-0:00 and endtime set to 23:59:59 - thats should be feasable in most cases
-  (excluding any scientific events...).
+Encapsulation and independence: plone.app.event provides the Dexterity behaviors.  The calendar and event portlets were moved from plone.app.portlets into plone.app.event, where they belong semantically - thus improving encapsulation and independence and reducing interwoven dependencies.  The calendar portlet was completly refactored. The functionality of the CalendarTool (portal_calendar) was reimplenented. Important settings from the calendar-controlpanel are now available in the event configlet. Since the calendar portlet was the only consumer of the CalendarTool, the CalendarTool, the calendar controlpanel and the dependency to Products.CMFCalendar can be dropped. The new plone.app.widgets package implements z3cform based widgets, so the old datetime widget can be dropped. Python-dateutil provides recurrence calculations based on the RFC5545 standard - plone.formwidget.recurrence provides a awidget for recurrence and Products.DateRecurringIndex an appropriate index as a drop-in replacement for Zope's DateIndex. The iCalendar package was improved and is now used for plone.app.event to provide icalendar serialization. The timezone support is based on the pytz package. Plone now haves a portal timezone, User timezones and every event can define another timezone, if wished. User timezones are planned. Whole day events get their starttime set to 0:00 and endtime set to 23:59:59 - thats should be feasable in most cases (excluding any scientific events...).
 
 
 Packages
@@ -61,32 +32,21 @@ plone.app.event
 
 Github: https://github.com/plone/plone.app.event
 
-The "dx" submodule provides Dexterity behaviors (some granular ones). Like in
-the "at" submodule, ical, recurrence and generic event accessor adapters as
-well as some event subscribers are provided.
+The "dx" submodule provides Dexterity behaviors (some granular ones). Like in the "at" submodule, ical, recurrence and generic event accessor adapters as well as some event subscribers are provided.
 
 Both subpackages are only loaded, if the neccassary features are installed.
 
-plone.app.event does not depend on CMFCalendar and the portal_calendar tool
-any more. Plone core's only consumer of this package was the calendar portlet
-anyways, which was completly rewritten.
+plone.app.event does not depend on CMFCalendar and the portal_calendar tool any more. Plone core's only consumer of this package was the calendar portlet anyways, which was completly rewritten.
 
-base.py provides some basic event related functionality. Many of them need a
-context in order to get the correct timezone.
+base.py provides some basic event related functionality. Many of them need a context in order to get the correct timezone.
 
-The "browser" submodule provides the new "event" controlpanel (the "calendar"
-controlpanel can be dropped, since we do not need CMFCalendar any more). The
-settings are stored in plone.registry.
-The event view is generic to ATEvent and DX based event types.
+The "browser" submodule provides the new "event" controlpanel (the "calendar" controlpanel can be dropped, since we do not need CMFCalendar any more). The settings are stored in plone.registry.  The event view is generic to ATEvent and DX based event types.
 
-The ical submodule provides adapters and views for export and import to and
-from icalendar resources.
+The ical submodule provides adapters and views for export and import to and from icalendar resources.
 
 The locales directory which holds locale files.
 
-In the portlets subpackage there are portlet_calendar (a complete rewrite) and
-portlet_events, both from plone.app.portlets, where only BBB imports exist, so
-that existing installations do not break.
+In the portlets subpackage there are portlet_calendar (a complete rewrite) and portlet_events, both from plone.app.portlets, where only BBB imports exist, so that existing installations do not break.
 
 The tests are all ported to plone.app.testing.
 
@@ -104,12 +64,7 @@ plone.formwidget.recurrence
 
 Github: https://github.com/plone/plone.formwidget.recurrence
 
-Recurrence widget based on jquery.recurrenceinput.js. Supports complex
-recurrence rules with exclusion and inclusion dates, automatically updated
-occurrences display within the widget and a nicely formatted string which
-explains the recurrence rule.
-The recurrence rule is stored as a RFC5545/icalendar compatible recurrence
-string.
+Recurrence widget based on jquery.recurrenceinput.js. Supports complex recurrence rules with exclusion and inclusion dates, automatically updated occurrences display within the widget and a nicely formatted string which explains the recurrence rule.  The recurrence rule is stored as a RFC5545/icalendar compatible recurrence string.
 
 
 Products.DateRecurringIndex
@@ -117,8 +72,7 @@ Products.DateRecurringIndex
 
 Github: https://github.com/collective/Products.DateRecurringIndex
 
-A drop-in replacement for Zope's DateIndex with support for recurring events.
-Each recurrence get's an index entry.
+A drop-in replacement for Zope's DateIndex with support for recurring events.  Each recurrence get's an index entry.
 
 
 icalendar
@@ -137,9 +91,7 @@ plone.app.eventindex
 
 Github: https://github.com/regebro/plone.app.eventindex
 
-A possible alternative to Products.DateRecurringindex, which supports late
-indexing and which does not have problems with unlimited occurrences. This
-eventindex is currently not used by plone.app.event.
+A possible alternative to Products.DateRecurringindex, which supports late indexing and which does not have problems with unlimited occurrences. This eventindex is currently not used by plone.app.event.
 
 
 Python-dateutil
@@ -148,8 +100,7 @@ Python-dateutil
 Documentation: http://labix.org/python-dateutil
 Repository: https://launchpad.net/dateutil
 
-Useful extensions to the standard Python datetime features. plone.app.event
-uses it mainly for recurrence calculations.
+Useful extensions to the standard Python datetime features. plone.app.event uses it mainly for recurrence calculations.
 
 
 Pytz
diff --git a/docs/designchoices.rst b/docs/designchoices.rst
index 5788815..f1aede8 100644
--- a/docs/designchoices.rst
+++ b/docs/designchoices.rst
@@ -3,61 +3,22 @@ Development design choices
 
 - Timezone support. Every event has a timezone.
 
-- Usage of pytz. The timezone library used it pytz. Other timezone identifiers
-  than defined in pytz (Olson database) are not supported.
+- Usage of pytz. The timezone library used it pytz. Other timezone identifiers than defined in pytz (Olson database) are not supported.
 
-- Dropped support for ambiguous timezones. Three letter timezones like CET,
-  MET, PST, etc. are not supported.
+- Dropped support for ambiguous timezones. Three letter timezones like CET, MET, PST, etc. are not supported.
 
-- Start/end datetime inputs are treated as localized values. If a timezone on
-  an event is changed afterwards, the datetime values are not converted to the
-  target timezone.
+- Start/end datetime inputs are treated as localized values. If a timezone on an event is changed afterwards, the datetime values are not converted to the target timezone.
 
 - Whole day events last from ``0:00`` until ``23:59:59`` on the same day.
 
 - Open end events end on the same day at ``23:59:59``.
 
-- For recurring events, we do not support unlimited occurrences. The number of
-  possible recurrences of an event is limited to 1000 occurrences. This way,
-  indexing and other operations doesn't take too long.  The maximum number of
-  occurrences is set via the ``MAXCOUNT`` constant in
-  ``plone.event.recurrence``.
-
-- We save the timezone of the event now (since 2.0) on ``start`` and ``end`` in
-  datetime as tzinfo expecting implicitly a valid ``pytz``. That way we ensure to
-  not loose the original timezone. It does not matter if its stored in UTC or
-  not, because a timezone is just that: a timezone. UTC is also just a timezone.
-  Not converting here to UTC makes thing less complex and gives maximum
-  flexibility. Calculation can be done easily from one timezone to an other
-  timezone if needed at display time. Also we now may have different timezones
-  on start and end. Even if this a rare use-case now we can support movement
-  between timezone, i.e a flight or train ride. Not supported are naive
-  datetimes, since we can not calculate anything with them nor does
-  ``DateRecurringIndex`` or ``dateutil.rrule`` supports them. Thus the use-case
-  of a world plone day happens on a date all over the world the whole day in
-  every timezone is not supported. This is not a limitation of not supporting
-  naive datetimes, moreover we need a special timezone i.e ``wholeworld`` and
-  an index and calculation methods that can deal with it. This makes things way
-  more complex and so we decided to skip that feature for now.
-
-- We identified two major use-cases: 1) The event happens at a physical location,
-  i.e. a project meeting happens in Madrid with participant traveling to Madrid
-  weekly on monday at 9:00am.
-  2) A phone conference of an international organisation with participants from
-  all over the world happens every work day at 10:00 am.
-
-  In both cases we create the event with the date with a given timezone. So for
-  use-case (1) the editor sits in Taipeh but edits a conference in Madrid, so
-  she has to set the timezone of the event in the form. At display time usally
-  the viewer is interested to see the local time of the conference in the
-  output, so display should be in Europe/Madrid timezone.
-
-  In use-case (2) the editor usally refers to his own local timezone. He will
-  keep the preset in the form. At display time the viewer is interested to see
-  the date and time in his local timezone. On change of daylight-saving time in
-  the original timezone the datetime was entered stays on 10:00am.
-  But if the participant in a other timezone has not this change it means he has
-  the call scheduled one hour earlier or later in summer or winter time. So DST
-  makes things again difficult, but heres no way to get rid of it as long as
-  theres the concept of daylightsaving time is handled differently all over the
-  world.
\ No newline at end of file
+- For recurring events, we do not support unlimited occurrences. The number of possible recurrences of an event is limited to 1000 occurrences. This way, indexing and other operations doesn't take too long.  The maximum number of occurrences is set via the ``MAXCOUNT`` constant in ``plone.event.recurrence``.
+
+- We save the timezone of the event now (since 2.0) on ``start`` and ``end`` in datetime as tzinfo expecting implicitly a valid ``pytz``. That way we ensure to not loose the original timezone. It does not matter if its stored in UTC or not, because a timezone is just that: a timezone. UTC is also just a timezone.  Not converting here to UTC makes thing less complex and gives maximum flexibility. Calculation can be done easily from one timezone to an other timezone if needed at display time. Also we now may have different timezones on start and end. Even if this a rare use-case now we can support movement between timezone, i.e a flight or train ride. Not supported are naive datetimes, since we can not calculate anything with them nor does ``DateRecurringIndex`` or ``dateutil.rrule`` supports them. Thus the use-case of a world plone day happens on a date all over the world the whole day in every timezone is not supported. This is not a limitation of not supporting naive datetimes, moreover we need a special timezone i.e ``wholeworld`` and an index and calculation methods that can deal with it. This makes things way more complex and so we decided to skip that feature for now.
+
+- We identified two major use-cases: 1) The event happens at a physical location, i.e. a project meeting happens in Madrid with participant traveling to Madrid weekly on monday at 9:00am.  2) A phone conference of an international organisation with participants from all over the world happens every work day at 10:00 am.
+
+  In both cases we create the event with the date with a given timezone. So for use-case (1) the editor sits in Taipeh but edits a conference in Madrid, so she has to set the timezone of the event in the form. At display time usally the viewer is interested to see the local time of the conference in the output, so display should be in Europe/Madrid timezone.
+
+  In use-case (2) the editor usally refers to his own local timezone. He will keep the preset in the form. At display time the viewer is interested to see the date and time in his local timezone. On change of daylight-saving time in the original timezone the datetime was entered stays on 10:00am.  But if the participant in a other timezone has not this change it means he has the call scheduled one hour earlier or later in summer or winter time. So DST makes things again difficult, but heres no way to get rid of it as long as theres the concept of daylightsaving time is handled differently all over the world.
diff --git a/docs/development.rst b/docs/development.rst
index 03d1f94..64b9645 100644
--- a/docs/development.rst
+++ b/docs/development.rst
@@ -4,10 +4,7 @@ Developer documentation
 The IEvent interface
 --------------------
 
-All event types should implement the ``IEvent`` interface from
-``plone.event.interfaces``, in order that some functionality of
-plone.app.event can be used. For example, catalog searches for event objects
-ask for the ``IEvent`` interface in the ``object_provides`` index::
+All event types should implement the ``IEvent`` interface from ``plone.event.interfaces``, in order that some functionality of plone.app.event can be used. For example, catalog searches for event objects ask for the ``IEvent`` interface in the ``object_provides`` index::
 
     from plone.event.interfaces import IEvent
     assert(IEvent.providedBy(obj)==True)
@@ -19,15 +16,9 @@ Custom event content types
 Using Dexterity behaviors to build new content types with IEvent support
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-For Dexterity use the ``plone.app.event.dx.behaviors.IEventBasic`` and
-optionally any other event related behavior from there.
+For Dexterity use the ``plone.app.event.dx.behaviors.IEventBasic`` and optionally any other event related behavior from there.
 
-You can just enable the behaviors you want to use for your custom content type
-in the FTI via GenericSetup or through the web. This ``types/Event.xml``
-GenericSetup FTI configuration snippet from `plone.app.contenttypes
-<https://github.com/plone/plone.app.contenttypes/blob/paevent/plone/app/contenttypes/profiles/default/types/Event.xml>`_
-shows an example. The only behavior, which is definitely needed is the
-IEventBasic behavior. All other are optional::
+You can just enable the behaviors you want to use for your custom content type in the FTI via GenericSetup or through the web. This ``types/Event.xml`` GenericSetup FTI configuration snippet from `plone.app.contenttypes <https://github.com/plone/plone.app.contenttypes/blob/paevent/plone/app/contenttypes/profiles/default/types/Event.xml>`_ shows an example. The only behavior, which is definitely needed is the IEventBasic behavior. All other are optional::
 
     <property name="behaviors">
         <element value="plone.app.event.dx.behaviors.IEventBasic"/>
@@ -45,8 +36,7 @@ IEventBasic behavior. All other are optional::
     </property>
 
 
-Of course, it's also possible to create a new behavior which derives from
-plone.app.event's one, like so::
+Of course, it's also possible to create a new behavior which derives from plone.app.event's one, like so::
 
     from plone.app.event.dx.behaviors import IEventBasic
     from plone.app.event.dx.behaviors import IEventLocation
@@ -72,22 +62,11 @@ plone.app.event's one, like so::
 
 .. note::
 
-  If you don't register the behavior with a factory and a marker interface like
-  it's done in plone.app.event, the behavior is the marker interface itself
-  (see plone.app.dexterity's `documentation on behavior marker interfaces
-  <https://developer.plone.org/reference_manuals/external/plone.app.dexterity/behaviors/providing-marker-interfaces.html>`_).
-  In this case, the behavior should also derive from the marker interfaces
-  defined in ``plone.app.event.dx.interfaces`` in order to let it use all of
-  plone.app.event's functionality (indexers, adapters and the like).
+  If you don't register the behavior with a factory and a marker interface like it's done in plone.app.event, the behavior is the marker interface itself (see plone.app.dexterity's `documentation on behavior marker interfaces <https://developer.plone.org/reference_manuals/external/plone.app.dexterity/behaviors/providing-marker-interfaces.html>`_).  In this case, the behavior should also derive from the marker interfaces defined in ``plone.app.event.dx.interfaces`` in order to let it use all of plone.app.event's functionality (indexers, adapters and the like).
 
 .. note::
 
-  You have to reconfigure the start, end and recurrence fields' widgets again.
-  The widgets for the ``start`` and ``end`` fields have to be configured with
-  the ``first_day`` parameter while the ``recurrence`` field widget has to be
-  configured with the ``first_day`` and ``start_field`` parameters. Even if the
-  ``start`` field is derived from another behavior, in this case the
-  dotted-path includes the new behavior: ``IEvent.start``.
+  You have to reconfigure the start, end and recurrence fields' widgets again.  The widgets for the ``start`` and ``end`` fields have to be configured with the ``first_day`` parameter while the ``recurrence`` field widget has to be configured with the ``first_day`` and ``start_field`` parameters. Even if the ``start`` field is derived from another behavior, in this case the dotted-path includes the new behavior: ``IEvent.start``.
 
 
 Then register the behavior in ZCML::
@@ -105,11 +84,9 @@ And register it in your FTI via GenericSetup as usual.
 None of the above
 ~~~~~~~~~~~~~~~~~
 
-If you cannot use the above two methods, you can still implement the
-``plone.event.interfaces.IEvent`` interface.
+If you cannot use the above two methods, you can still implement the ``plone.event.interfaces.IEvent`` interface.
 
-In any case you might need to provide an ``IEventAccessor`` adapter. For more
-information, see below.
+In any case you might need to provide an ``IEventAccessor`` adapter. For more information, see below.
 
 
 Getting and setting properties
@@ -118,8 +95,7 @@ Getting and setting properties
 Setting properties directly on the context
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Since plone.app.event version 2.0, you can set properties directly on the
-context. There is no need to use behavior adaption any more.
+Since plone.app.event version 2.0, you can set properties directly on the context. There is no need to use behavior adaption any more.
 
 Though, you have to take care to set properties wisely, read on.
 
@@ -130,17 +106,10 @@ Though, you have to take care to set properties wisely, read on.
     event.start = tz.localize(datetime(2010, 10, 10, 12, 12))
     event.end = tz.localize(datetime(2010, 10, 10, 13, 13))
 
-Always use pytz's `tz.localize(datetime(2010, 10, 10, 12, 12))`. If you set the
-tzinfo object directly on the datetime object like `datetime(2010, 10, 10, 12,
-12, tzinfo=tz)`, the datetime object might not localized to the DST changes of
-your timezone!
+Always use pytz's `tz.localize(datetime(2010, 10, 10, 12, 12))`. If you set the tzinfo object directly on the datetime object like `datetime(2010, 10, 10, 12, 12, tzinfo=tz)`, the datetime object might not localized to the DST changes of your timezone!
 
 
-2) Since plone.app.event 2.0b1, there is no need to call the
-``data_postprocessing`` function to manipulate the object accordingly to the
-value of the ``whole_day`` or ``end_date`` attributes. The start and end dates
-are only converted to the beginning respectively to the end of the day for
-indexing and when accessing the dates via the IEventAccessor.
+2) Since plone.app.event 2.0b1, there is no need to call the ``data_postprocessing`` function to manipulate the object accordingly to the value of the ``whole_day`` or ``end_date`` attributes. The start and end dates are only converted to the beginning respectively to the end of the day for indexing and when accessing the dates via the IEventAccessor.
 
 
 Accessing event objects via an unified accessor object
@@ -148,28 +117,22 @@ Accessing event objects via an unified accessor object
 
 TODO: only DX
 
-To make it easier to support Archetypes and Dexterity based objects, an
-adapter for content objects is provided, which allows unified interaction with
-event objects.
+To make it easier to support Archetypes and Dexterity based objects, an adapter for content objects is provided, which allows unified interaction with event objects.
 
 The interface definition can be found in plone.event.interfaces.IEventAccessor.
+
 Default accessors:
 
-- For IEvent (``plone.event.interfaces.IEvent``) implementing objects:
-  ``plone.event.adapters.EventAccessor``.
+- For IEvent (``plone.event.interfaces.IEvent``) implementing objects: ``plone.event.adapters.EventAccessor``.
 
-- For IATEvent (``plone.app.event.at.interfaces.IATEvent``):
-  ``plone.app.event.at.content.EventAccessor``.
+- For IATEvent (``plone.app.event.at.interfaces.IATEvent``): ``plone.app.event.at.content.EventAccessor``.
 
-- For IDXEvent (``plone.app.event.dx.interfaces.IDXEvent``):
-  ``plone.app.event.dx.behaviors.EventAccessor``.
+- For IDXEvent (``plone.app.event.dx.interfaces.IDXEvent``): ``plone.app.event.dx.behaviors.EventAccessor``.
 
-- For IOccurrence (``plone.event.interfaces.IOccurrence``):
-  ``plone.app.event.recurrence.EventAccessor``.
+- For IOccurrence (``plone.event.interfaces.IOccurrence``): ``plone.app.event.recurrence.EventAccessor``.
 
 
-Event objects implement the ``IEvent`` interface from
-``plone.event.interfaces``.
+Event objects implement the ``IEvent`` interface from ``plone.event.interfaces``.
 
 The objects can be accessed like so::
 
@@ -179,9 +142,7 @@ The objects can be accessed like so::
     assert(isinstance(acc.timezone, string)==True)
     assert(isinstance(acc.recurrence, string)==True)
 
-Set properties of the object via the accessor. Don't forget to throw
-ObjectModifiedEvent after setting properties to call an event subscriber which
-does some timezone related post calculations::
+Set properties of the object via the accessor. Don't forget to throw ObjectModifiedEvent after setting properties to call an event subscriber which does some timezone related post calculations::
 
     from zope.event import notify
     from zope.lifecycleevent import ObjectModifiedEvent
@@ -190,14 +151,11 @@ does some timezone related post calculations::
     acc.timezone = 'Europe/London'
     notify(ObjectModifiedEvent(obj))
 
-You can also use the accessor edit method, which also throws the
-ObjectModifiedEvent event for you::
+You can also use the accessor edit method, which also throws the ObjectModifiedEvent event for you::
 
     acc.edit(end=datetime(2012, 12, 12, 20, 0, tzinfo=tz))
 
-For creating events, you can use the accessor's create method, which again
-returns an accessor. E.g. if you want to create the Dexterity based event
-type::
+For creating events, you can use the accessor's create method, which again returns an accessor. E.g. if you want to create the Dexterity based event type::
 
     from plone.app.event.dx.behaviors import EventAccessor
     acc = EventAccessor.create(
@@ -221,11 +179,9 @@ Access the content object from an accessor like so::
 Getting occurrences from IEventRecurrence implementing objects
 --------------------------------------------------------------
 
-Events with recurrence support should implement the IEventRecurrence
-(``plone.event.interfaces.IEventRecurrence``) interface.
+Events with recurrence support should implement the IEventRecurrence (``plone.event.interfaces.IEventRecurrence``) interface.
 
-An IRecurrenceSupport implementing adapter allows the calculation of all
-occurrences::
+An IRecurrenceSupport implementing adapter allows the calculation of all occurrences::
 
     from plone.event.interfaces import IRecurrenceSupport
     rec_support = IRecurrenceSupport(obj)
@@ -239,8 +195,7 @@ occurrences::
     rec_support.occurrences(range_start=start, range_end=end)
 
 
-If you want to get all occurrences from any event within a timeframe, use the
-get_events function like so::
+If you want to get all occurrences from any event within a timeframe, use the get_events function like so::
 
     from plone.app.event.base import get_events, localized_now
     occ = get_events(context, start=localized_now(), ret_mode=2, expand=True)
@@ -249,10 +204,7 @@ get_events function like so::
 Reusing the @@event_summary view to list basic event information
 ----------------------------------------------------------------
 
-The @@event_summary listing lists basic event information including microdata
-on the right hand side of the default event view. You can reuse this listing in
-custom views by calling the event_summary view on an IEvent providing context
-in page templates like so::
+The @@event_summary listing lists basic event information including microdata on the right hand side of the default event view. You can reuse this listing in custom views by calling the event_summary view on an IEvent providing context in page templates like so::
 
     <tal:eventsummary replace="structure context/@@event_summary"/>
 
@@ -260,9 +212,7 @@ or in Python code like so::
 
     context.restrictedTraverse('@@event_ticket_summary')()
 
-
-There are cases where you might exclude some of this information. You can do
-that by overriding the `excludes` list of the view. Possible values are::
+There are cases where you might exclude some of this information. You can do that by overriding the `excludes` list of the view. Possible values are::
 
     title
     subjects
diff --git a/docs/index.rst b/docs/index.rst
index 82066cc..84b3c89 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -1,6 +1,6 @@
-************************************************
+================================================
 plone.app.event - a calendar framework for Plone
-************************************************
+================================================
 
 .. topic:: Overview
 
@@ -21,25 +21,17 @@ plone.app.event - a calendar framework for Plone
 
     It was developed with these goals in mind:
 
-    - Encapsulation and independence: All event related code should reside in a
-      single package. Relevant, re-usable functionality is split to seperate
-      packages.  Plone's dependencies on calendar related code should be
-      reduced to a minimum. plone.app.event should be able to be deinstalled
-      from Plone.
+    - Encapsulation and independence: All event related code should reside in a single package. Relevant, re-usable functionality is split to seperate packages.  Plone's dependencies on calendar related code should be reduced to a minimum. plone.app.event should be able to be deinstalled from Plone.
 
-    - Dexterity and Archetypes support: plone.app.event should provide
-      Dexterity behaviors, which can be used in Dexterity types and an ATEvent
-      content type (factored out from ATContentTypes). For a Dexterity event
-      type, use plone.app.contenttypes 1.1 or newer.
+    - Dexterity and Archetypes support: plone.app.event should provide Dexterity behaviors, which can be used in Dexterity types and an ATEvent content type (factored out from ATContentTypes). For a Dexterity event type, use plone.app.contenttypes 1.1 or newer.
 
-    - Standards compliancy: We support the icalendar standard (`RFC5545
-      <http://tools.ietf.org/html/rfc5545>`_) including recurrence.
+    - Standards compliancy: We support the icalendar standard (`RFC5545 <http://tools.ietf.org/html/rfc5545>`_) including recurrence.
 
     - Recurring events based on the RFC5545 standard.
 
 
 Documentation
-+++++++++++++
+=============
 
 .. toctree::
     :maxdepth: 2
@@ -53,7 +45,7 @@ Documentation
 
 
 API documentation
-+++++++++++++++++
+=================
 
 .. toctree::
 
@@ -61,7 +53,7 @@ API documentation
 
 
 Legal
-+++++
+=====
 
 .. toctree::
 
diff --git a/docs/installation.rst b/docs/installation.rst
index d968ebd..672aa9c 100644
--- a/docs/installation.rst
+++ b/docs/installation.rst
@@ -4,8 +4,7 @@ Installation
 Compatibility
 -------------
 
-plone.app.event 2.0 is a rewrite of plone.app.event 1.x and fixes some issues.
-See Changelog.rst.
+plone.app.event 2.0 is a rewrite of plone.app.event 1.x and fixes some issues.  See Changelog.rst.
 
 The following is a compatibility map of all current plone.app.event versions:
 
@@ -41,9 +40,7 @@ Buildout files
 Installation
 ------------
 
-``plone.app.event`` only provides Dexterity behaviors to build own types based
-on them.  If you want to install a Dexterity based Event type, you can simply
-use ``plone.app.contenttypes`` 1.2a3 or up.
+``plone.app.event`` only provides Dexterity behaviors to build own types based on them.  If you want to install a Dexterity based Event type, you can simply use ``plone.app.contenttypes`` 1.2a3 or up.
 
 Depend on one (or both) of these setuptools dependencies::
 
@@ -52,8 +49,7 @@ Depend on one (or both) of these setuptools dependencies::
 
 The zcml dependency is be loaded automatically by z3c.autoinclude.
 
-Then install plone.app.event via the controlpanel or by depending on the
-following GenericSetup profile in metadata.xml::
+Then install plone.app.event via the controlpanel or by depending on the following GenericSetup profile in metadata.xml::
 
     plone.app.event:default
 
@@ -63,23 +59,16 @@ Upgrading from plone.app.event 1.x
 
 TODO: ...
 
-There are upgrade steps in plone.app.contenttypes for 1.x to 2.0. That has to
-be revisited and refactored.
+There are upgrade steps in plone.app.contenttypes for 1.x to 2.0. That has to be revisited and refactored.
 
 
 Upgrading from plone.app.event 1.0
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 TODO: ...
 
-The "ploneintegration" setuptools extra, subpackage and GenericSetup profile
-have been gone. You just need to remove these dependencies from your setup and
-use the "plone.app.event.at:default" profile instead, if you plan to use the
-Archetypes based ATEvent type.
+The "ploneintegration" setuptools extra, subpackage and GenericSetup profile have been gone. You just need to remove these dependencies from your setup and use the "plone.app.event.at:default" profile instead, if you plan to use the Archetypes based ATEvent type.
 
-Use the provided upgrade steps to upgrade Dexterity behaviors: Attribute
-storage (Migrate fields from annotation storage to attribute storage) and New
-IRichText behavior (Enable the new IRichText instead of the IEventSummary
-behavior).
+Use the provided upgrade steps to upgrade Dexterity behaviors: Attribute storage (Migrate fields from annotation storage to attribute storage) and New IRichText behavior (Enable the new IRichText instead of the IEventSummary behavior).
 
 
 Upgrading from Products.ATContentType to plone.app.event
@@ -89,26 +78,15 @@ Upgrading from Products.ATContentType to plone.app.event
 
   Please backup before upgrading and check the upgraded contents for validity!
 
-If you want to upgrade Products.ATContentTypes based ATEvents to
-plone.app.event ones, there is an upgrade step for that: "Upgrades old AT
-events to plone.app.events" (Metadata version 1 to 2). In order to use it, go
-to Plone Control Center -> ZMI -> portal_setup -> Upgrades. Select
-"plone.app.event.at:default" profile and click "Show old upgrades". Select the
-upgrade step and run it.
+If you want to upgrade Products.ATContentTypes based ATEvents to plone.app.event ones, there is an upgrade step for that: "Upgrades old AT events to plone.app.events" (Metadata version 1 to 2). In order to use it, go to Plone Control Center -> ZMI -> portal_setup -> Upgrades. Select "plone.app.event.at:default" profile and click "Show old upgrades". Select the upgrade step and run it.
 
-You might also need to "clear and rebuild" the catalog after upgrading. You can
-do so at Plone Control Center -> ZMI -> portal_catalog -> Advanced (this
-may take a while)
+You might also need to "clear and rebuild" the catalog after upgrading. You can do so at Plone Control Center -> ZMI -> portal_catalog -> Advanced (this may take a while)
 
 
 Upgrading to Dexterity
 ~~~~~~~~~~~~~~~~~~~~~~
 
-Upgrade steps to migrate Products.ATContentTypes based ATEvents,
-plone.app.event based ATEvents or plone.app.event Dexterity example types
-(plone.app.event.dx.event) to plone.app.contenttypes Dexterity Events can be
-found within plone.app.contenttypes. This package utilizes plone.app.event's
-Dexterity behaviors for it's Event type.
+Upgrade steps to migrate Products.ATContentTypes based ATEvents, plone.app.event based ATEvents or plone.app.event Dexterity example types (plone.app.event.dx.event) to plone.app.contenttypes Dexterity Events can be found within plone.app.contenttypes. This package utilizes plone.app.event's Dexterity behaviors for it's Event type.
 
 
 Configuration
@@ -118,7 +96,4 @@ Configuration
 
   Don't forget to set the portal timezone!
 
-After installation, please set your timezone in the @@event-settings
-controlpanel. Otherwise time calculations are based on UTC and likely wrong for
-your timezone. Also set the first weekday setting for correct display of the
-first weekday in calendar views.
+After installation, please set your timezone in the @@event-settings controlpanel. Otherwise time calculations are based on UTC and likely wrong for your timezone. Also set the first weekday setting for correct display of the first weekday in calendar views.
diff --git a/docs/tests.rst b/docs/tests.rst
index dfd5028..c6df2c2 100644
--- a/docs/tests.rst
+++ b/docs/tests.rst
@@ -1,27 +1,22 @@
 Running tests
 =============
 
-After running buildout with the dev.cfg or tests.cfg config files, you can run
-all tests (including robot tests with ``--all`` switch) like so::
+After running buildout with the dev.cfg or tests.cfg config files, you can run all tests (including robot tests with ``--all`` switch) like so::
 
     ./bin/test -s plone.app.event --all
 
-The `-t` switch allows you to run a specific test file or method. The
-`--list-tests` lists all available tests.
+The `-t` switch allows you to run a specific test file or method. The `--list-tests` lists all available tests.
 
 To run the robot tests do::
 
     ./bin/test --all -s plone.app.event -t robot
 
 
-For development, it might be more convenient to start a test server and run
-robot tests individually, like so::
+For development, it might be more convenient to start a test server and run robot tests individually, like so::
 
     ./bin/robot-server plone.app.event.testing.PAEventDX_ROBOT_TESTING
     ./bin/robot plone/app/event/tests/robot/test_event_roundtrip.robot
 
-In the robot test you can place the `debug` statement to access a robot shell
-to try things out.
+In the robot test you can place the `debug` statement to access a robot shell to try things out.
 
-For more information on this topic visit:
-http://docs.plone.org/external/plone.app.robotframework/docs/source/index.html
+For more information on this topic visit: http://docs.plone.org/external/plone.app.robotframework/docs/source/index.html


