Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-06-24T06:38:06+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/5bd9d2d81c9647f47c1dac24412925268940cece

fix failing test on 4.3

Files changed:
M plone/app/event/tests/test_portlet_events.py

diff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py
index c9458dc..62d499e 100644
--- a/plone/app/event/tests/test_portlet_events.py
+++ b/plone/app/event/tests/test_portlet_events.py
@@ -127,7 +127,7 @@ def test_disable_dasboard_breaks_event_portlet(self):
         addview = mapping.restrictedTraverse('+/' + portlet.addview)
 
         try:
-            addview()
+            addview.createAndAdd(data={})
         except Unauthorized:
             self.fail()
 


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-06-24T06:39:03+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/4ea71d3a48e7c7e4817785238ce6baa5cc68d6e4

use request.get, restructure init

Files changed:
M plone/app/event/browser/event_listing.py

diff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py
index 861cd93..59730a7 100644
--- a/plone/app/event/browser/event_listing.py
+++ b/plone/app/event/browser/event_listing.py
@@ -35,20 +35,28 @@ def __init__(self, context, request):
 
         self.now = now = localized_now(context)
 
+        # Try to get the default page
+        default = getDefaultPage(context)
+        self.default_context = context[default] if default else context
+
+        self.is_collection = False
+        if ICollection:
+            self.is_collection = ICollection.providedBy(self.default_context)
+
         # Request parameter
         req = self.request.form
-        self.b_start = int(req['b_start']) if 'b_start' in req else 0
-        self.b_size  = int(req['b_size'])  if 'b_size'  in req else 10
-        self.orphan  = int(req['orphan'])  if 'orphan'  in req else 1
-        self.mode    = req['mode'] if 'mode' in req else None
-        self._date   = req['date'] if 'date' in req else None
-        self.tags    = req['tags'] if 'tags' in req else None
-        self.searchable_text = req['SearchableText'] if 'SearchableText' in req else None  # noqa
-        self.path    = req['path'] if 'path' in req else None
-
-        day   = int(req['day'])   if 'day'   in req else None
-        month = int(req['month']) if 'month' in req else None
-        year  = int(req['year'])  if 'year'  in req else None
+        self.b_start = int(req.get('b_start', 0))
+        self.b_size  = int(req.get('b_size', 10))
+        self.orphan  = int(req.get('orphan', 1))
+        self.mode    = req.get('mode', None)
+        self._date   = req.get('date', None)
+        self.tags    = req.get('tags', None)
+        self.searchable_text = req.get('SearchableText', None)
+        self.path    = req.get('path', None)
+
+        day   = int(req.get('day', 0)) or None
+        month = int(req.get('month', 0)) or None
+        year  = int(req.get('year', 0)) or None
 
         if not self._date and day or month or year:
             self._date = date(year or now.year,
@@ -61,20 +69,6 @@ def __init__(self, context, request):
         self.uid = None  # Used to get all occurrences from a single event. Overrides all other settings  # noqa
 
     @property
-    def default_context(self):
-        # Try to get the default page
-        context = self.context
-        default = getDefaultPage(context)
-        if default:
-            context = context[default]
-        return context
-
-    @property
-    def is_collection(self):
-        ctx = self.default_context
-        return ICollection.providedBy(ctx) if ICollection else False
-
-    @property
     def show_filter(self):
         ret = True
         if self.is_collection:


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-06-24T11:09:43+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/c3e8d285aaefaca7da544fdc480c51f789c9baaf

In the event listing, use the collection's item_count attribute to limit the batch size.

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_listing.py
M plone/app/event/tests/test_event_listing.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4e21d44..5c9cefe 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 2.0a13 (unreleased)
 -------------------
 
+- In the event listing, use the collection's ``item_count`` attribute to limit
+  the batch size.
+  [thet]
+
 - For the event portlet, don't cache the list of events on memoize instance,
   which creates a write transaction. Remove the caching until a solid cache key
   is found, which also works for multiple portlet instances.
diff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py
index 59730a7..b5b53bd 100644
--- a/plone/app/event/browser/event_listing.py
+++ b/plone/app/event/browser/event_listing.py
@@ -45,8 +45,13 @@ def __init__(self, context, request):
 
         # Request parameter
         req = self.request.form
+
+        b_size  = int(req.get('b_size', 0))
+        if not b_size and self.is_collection:
+            collection_behavior = ICollection(self.default_context)
+            b_size = getattr(collection_behavior, 'item_count', 0)
+        self.b_size = b_size or 10
         self.b_start = int(req.get('b_start', 0))
-        self.b_size  = int(req.get('b_size', 10))
         self.orphan  = int(req.get('orphan', 1))
         self.mode    = req.get('mode', None)
         self._date   = req.get('date', None)
diff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py
index 54b4aac..7a4f515 100644
--- a/plone/app/event/tests/test_event_listing.py
+++ b/plone/app/event/tests/test_event_listing.py
@@ -60,6 +60,32 @@ class TestEventsListingCollection(TestEventsListingPortal):
     def _listing_view(self, name='@@event_listing'):
         return self.portal.collection.restrictedTraverse(name)
 
+    def test_collection_batching(self):
+        """Test if the batch size can be set via request parameter or the
+        collection's item_count.
+        """
+        # plone.app.contenttypes ICollection type
+        self.portal.invokeFactory('Collection', 'col_test', title=u'Col')
+        collection = self.portal.col_test
+        collection.query = [
+            {'i': 'portal_type',
+             'o': 'plone.app.querystring.operation.selection.is',
+             'v': ['Event', 'plone.app.event.dx.event']
+             },
+        ]
+        self.request.form.update({'mode': 'all'})
+
+        view = collection.restrictedTraverse('@@event_listing')
+        self.assertEqual(len(view.events(batch=True)), 8)
+
+        collection.item_count = 4
+        view = collection.restrictedTraverse('@@event_listing')
+        self.assertEqual(len(view.events(batch=True)), 4)
+
+        self.request.form.update({'b_size': 2})
+        view = collection.restrictedTraverse('@@event_listing')
+        self.assertEqual(len(view.events(batch=True)), 2)
+
     def test_date_filtering(self):
         """Test if date filters are available on Collections without start or
         end search criterias.


