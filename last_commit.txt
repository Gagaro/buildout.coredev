Repository: plone.api


Branch: refs/heads/master
Date: 2015-09-22T19:46:44+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/d9e45ad519309b7c0aa37dc617fe3d3b320fae70

Added section on autopep8 to conventions.

Files changed:
M docs/contribute/conventions.rst

diff --git a/docs/contribute/conventions.rst b/docs/contribute/conventions.rst
index 685f9db..c399cb3 100644
--- a/docs/contribute/conventions.rst
+++ b/docs/contribute/conventions.rst
@@ -88,6 +88,61 @@ This package follows all rules above, `check out the source
 <https://github.com/plone/plone.api/tree/master/src/plone/api>`_ to see them
 in action.
 
+autopep8
+--------
+
+Making old code pep8 compliant can be a lot of work.  There is a tool
+that can automatically do some of this work for you: `autopep8
+<https://pypi.python.org/pypi/autopep8>`_.  This fixes various issues,
+for example fixing indentation to be a multiple of four.  Just install
+it with pip and call it like this::
+
+    pip install autopep8
+    autopep8 -i filename.py
+    autopep8 -i -r directory
+
+It is best to first run autopep8 in the default non aggressive mode,
+which means it only does whitespace changes.  To run this recursively
+on the current directory, changing files in place::
+
+    autopep8 -i -r .
+
+Quickly check the changes and then commit them.
+
+WARNING: be *very* careful when running this in a skins directory, if
+you run it there at all.  It will make changes to the top of the file
+like this, which completely breaks the skin script::
+
+    -##parameters=policy_in=''
+    +# parameters=policy_in=''
+
+With those safe changes out of the way, you can move on to a second,
+more aggresive round::
+
+    autopep8 -i --aggressive -r .
+
+Check these changes more thoroughly.  At the very least check if Plone
+can still start in the foreground and that there are no failures or
+errors in the tests.
+
+Not all changes are always safe.  You can ignore some checks::
+
+    autopep8 -i --ignore W690,E711,E721 --aggressive -r .
+
+This skips the following changes:
+
+- W690: Fix various deprecated code (via lib2to3). (Can be bad for
+  Python 2.4.)
+
+- E721: Use `isinstance()` instead of comparing types directly. (There
+  are uses of this in for example GenericSetup and plone.api that must
+  not be fixed.)
+
+- E711: Fix comparison with None.  (This can break SQLAlchemy code.)
+
+You can check what would be changed by one specific code::
+
+    autopep8 --diff --select E309 -r .
 
 Indentation
 ===========


Repository: plone.api


Branch: refs/heads/master
Date: 2015-09-22T19:47:18+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/65a213a41e0bb2054b3efe528e0048eea4e583a9

Run autopep with only white space changes on our own code.

Files changed:
M src/plone/api/tests/test_content.py

diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 271bbe3..2be495f 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -786,14 +786,14 @@ def test_find_dict(self):
         query = {
             'portal_type': 'Document',
             'path': {'query': path, 'depth': 2}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 2)
 
         query = {
             'portal_type': 'Document',
             'path': {'query': path, 'depth': 0}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 0)
 
@@ -802,7 +802,7 @@ def test_find_dict(self):
             'depth': 2,
             'portal_type': 'Document',
             'path': {'query': path}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 2)
 
@@ -811,7 +811,7 @@ def test_find_dict(self):
             'depth': 2,
             'portal_type': 'Document',
             'path': {'query': path}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 0)
 


Repository: plone.api


Branch: refs/heads/master
Date: 2015-09-30T09:36:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.api/commit/ec7264e0833b7f3323327e388ad00236787f5769

Merge pull request #279 from plone/maurits-docs-autopep8

Add autopep8 to the convention docs

Files changed:
M docs/contribute/conventions.rst
M src/plone/api/tests/test_content.py

diff --git a/docs/contribute/conventions.rst b/docs/contribute/conventions.rst
index 685f9db..c399cb3 100644
--- a/docs/contribute/conventions.rst
+++ b/docs/contribute/conventions.rst
@@ -88,6 +88,61 @@ This package follows all rules above, `check out the source
 <https://github.com/plone/plone.api/tree/master/src/plone/api>`_ to see them
 in action.
 
+autopep8
+--------
+
+Making old code pep8 compliant can be a lot of work.  There is a tool
+that can automatically do some of this work for you: `autopep8
+<https://pypi.python.org/pypi/autopep8>`_.  This fixes various issues,
+for example fixing indentation to be a multiple of four.  Just install
+it with pip and call it like this::
+
+    pip install autopep8
+    autopep8 -i filename.py
+    autopep8 -i -r directory
+
+It is best to first run autopep8 in the default non aggressive mode,
+which means it only does whitespace changes.  To run this recursively
+on the current directory, changing files in place::
+
+    autopep8 -i -r .
+
+Quickly check the changes and then commit them.
+
+WARNING: be *very* careful when running this in a skins directory, if
+you run it there at all.  It will make changes to the top of the file
+like this, which completely breaks the skin script::
+
+    -##parameters=policy_in=''
+    +# parameters=policy_in=''
+
+With those safe changes out of the way, you can move on to a second,
+more aggresive round::
+
+    autopep8 -i --aggressive -r .
+
+Check these changes more thoroughly.  At the very least check if Plone
+can still start in the foreground and that there are no failures or
+errors in the tests.
+
+Not all changes are always safe.  You can ignore some checks::
+
+    autopep8 -i --ignore W690,E711,E721 --aggressive -r .
+
+This skips the following changes:
+
+- W690: Fix various deprecated code (via lib2to3). (Can be bad for
+  Python 2.4.)
+
+- E721: Use `isinstance()` instead of comparing types directly. (There
+  are uses of this in for example GenericSetup and plone.api that must
+  not be fixed.)
+
+- E711: Fix comparison with None.  (This can break SQLAlchemy code.)
+
+You can check what would be changed by one specific code::
+
+    autopep8 --diff --select E309 -r .
 
 Indentation
 ===========
diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 271bbe3..2be495f 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -786,14 +786,14 @@ def test_find_dict(self):
         query = {
             'portal_type': 'Document',
             'path': {'query': path, 'depth': 2}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 2)
 
         query = {
             'portal_type': 'Document',
             'path': {'query': path, 'depth': 0}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 0)
 
@@ -802,7 +802,7 @@ def test_find_dict(self):
             'depth': 2,
             'portal_type': 'Document',
             'path': {'query': path}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 2)
 
@@ -811,7 +811,7 @@ def test_find_dict(self):
             'depth': 2,
             'portal_type': 'Document',
             'path': {'query': path}
-            }
+        }
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 0)
 


