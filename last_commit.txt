Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2014-06-28T09:27:40+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.outputfilters/commit/352fe668ddcff5e5332f370d05e09fb5bb0317bb

Move all tests to plone.app.testing except test_resolveuid_and_caption.py.

Files changed:
A plone/outputfilters/testing.py
M plone/outputfilters/README.txt
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_transforms.py
M setup.py
D plone/outputfilters/tests/base.py

diff --git a/plone/outputfilters/README.txt b/plone/outputfilters/README.txt
index f4ec238..5ce7a28 100644
--- a/plone/outputfilters/README.txt
+++ b/plone/outputfilters/README.txt
@@ -37,26 +37,31 @@ indicating whether the filter should be applied.
 Filters are registered in ZCML as a named multi-adapter of the context and
 request to IFilter.
 
- >>> from Products.Five.zcml import load_string
- >>> load_string("""
+ >>> from Zope2.App import zcml
+ >>> import Products.Five
+ >>> configure = """
  ... <configure
  ...     xmlns="http://namespaces.zope.org/zope">
- ... 
+ ...
  ...   <adapter
  ...     name="em_dash_adder"
  ...     provides="plone.outputfilters.interfaces.IFilter"
  ...     for="* *"
  ...     factory="plone.outputfilters.filters.example.EmDashAdder"
  ...     />
- ... 
+ ...
  ... </configure>
- ... """)
+ ... """
+ >>> zcml.load_config("configure.zcml", Products.Five)
+ >>> zcml.load_string(configure)
 
 Now when text is transformed from text/html to text/x-html-safe, the filter will
 be applied.
 
- >>> str(self.portal.portal_transforms.convertTo('text/x-html-safe',
- ...     'test--test', mimetype='text/html', context=self.portal))
+ >>> app = layer['app']
+ >>> portal = layer['portal']
+ >>> str(portal.portal_transforms.convertTo('text/x-html-safe',
+ ...     'test--test', mimetype='text/html', context=portal))
  'test\xe2\x80\x94test'
 
 
@@ -64,7 +69,7 @@ How it works
 ============
 
 ``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:
- 
+
 1. a new mimetype ("text/x-plone-outputfilters-html")
 2. a transform from text/html to text/x-plone-outputfilters-html
 3. a null transform from text/x-plone-outputfilters-html back to text/html
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
new file mode 100644
index 0000000..b4a69e6
--- /dev/null
+++ b/plone/outputfilters/testing.py
@@ -0,0 +1,37 @@
+from plone.app.testing import IntegrationTesting
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing import applyProfile
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from zope.configuration import xmlconfig
+from Products.Five import fiveconfigure
+from plone.testing import z2
+
+
+class PloneOutputfilters(PloneSandboxLayer):
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        import plone.outputfilters
+        xmlconfig.file(
+            'configure.zcml',
+            plone.outputfilters,
+            context=configurationContext
+        )
+        # Install product and call its initialize() function
+        fiveconfigure.debug_mode = True
+        z2.installProduct(app, 'plone.outputfilters')
+        fiveconfigure.debug_mode = False
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'plone.outputfilters:default')
+
+
+PLONE_OUTPUTFILTERS_FIXTURE = PloneOutputfilters()
+PLONE_OUTPUTFILTERS_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),
+    name="PloneOutputfilters:Integration")
+PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),
+    name="PloneOutputfilters:Functional")
diff --git a/plone/outputfilters/tests/base.py b/plone/outputfilters/tests/base.py
deleted file mode 100644
index 1a74ee1..0000000
--- a/plone/outputfilters/tests/base.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from Testing import ZopeTestCase as ztc
-
-from Products.Five import fiveconfigure
-from Products.PloneTestCase import PloneTestCase as ptc
-from Products.PloneTestCase.layer import PloneSite
-
-ptc.setupPloneSite(extension_profiles=['plone.outputfilters:default'])
-
-
-class OutputFiltersTestCase(ptc.FunctionalTestCase):
-
-    class layer(PloneSite):
-
-        @classmethod
-        def setUp(cls):
-            fiveconfigure.debug_mode = True
-            import plone.outputfilters
-            ztc.installPackage(plone.outputfilters)
-            fiveconfigure.debug_mode = False
-
-        @classmethod
-        def tearDown(cls):
-            pass
-
-
-class OutputFiltersDocTestCase(OutputFiltersTestCase):
-    # workaround for bug where the default test loader finds a bogus
-    # test case in a test case class if it was previously used by
-    # a Zope doctest suite
-    pass
diff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py
index 5aae6af..5a9eecf 100644
--- a/plone/outputfilters/tests/test_docs.py
+++ b/plone/outputfilters/tests/test_docs.py
@@ -1,13 +1,32 @@
-import unittest
-from Testing import ZopeTestCase as ztc
-from plone.outputfilters.tests.base import OutputFiltersDocTestCase
+# -*- coding: utf-8 -*-
+import doctest
 
+import unittest2 as unittest
+import pprint
+
+from plone.testing import layered
+
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
 
-def test_suite():
-    return unittest.TestSuite([
 
-        ztc.ZopeDocFileSuite(
-           'README.txt', package='plone.outputfilters',
-           test_class=OutputFiltersDocTestCase),
+optionflags = (
+    doctest.ELLIPSIS |
+    doctest.NORMALIZE_WHITESPACE |
+    doctest.REPORT_ONLY_FIRST_FAILURE
+)
+normal_testfiles = [
+    '../README.txt'
+]
 
-        ])
+
+def test_suite():
+    suite = unittest.TestSuite()
+    suite.addTests([
+        layered(doctest.DocFileSuite(test,
+                                     optionflags=optionflags,
+                                     globs={'pprint': pprint.pprint,
+                                            }
+                                     ),
+                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING)
+        for test in normal_testfiles])
+    return suite
diff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py
index 4d75661..d3601ec 100644
--- a/plone/outputfilters/tests/test_transforms.py
+++ b/plone/outputfilters/tests/test_transforms.py
@@ -1,10 +1,17 @@
 import unittest
-from plone.outputfilters.tests.base import OutputFiltersTestCase
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 
 
-class TransformsTestCase(OutputFiltersTestCase):
+class TransformsTestCase(unittest.TestCase):
 
-    def afterSetUp(self):
+    layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
         from zope.component import getUtility
         from Products.PortalTransforms.interfaces import IPortalTransformsTool
         self.transforms = getUtility(IPortalTransformsTool)
@@ -23,8 +30,10 @@ def test_instantiate_plone_outputfilters_html_to_html_transform(self):
 
     def test_transform_policy_installed(self):
         policies = self.transforms.listPolicies()
-        policies = [mimetype for (mimetype, required) in policies
-                             if mimetype == "text/x-html-safe"]
+        policies = [
+            mimetype for (mimetype, required) in policies
+            if mimetype == "text/x-html-safe"
+        ]
         self.assertEqual(1, len(policies))
 
     def test_uninstallation(self):
@@ -33,8 +42,10 @@ def test_uninstallation(self):
         uninstall_mimetype_and_transforms(self.portal)
 
         policies = self.transforms.listPolicies()
-        policies = [mimetype for (mimetype, required) in policies
-                             if mimetype == "text/x-html-safe"]
+        policies = [
+            mimetype for (mimetype, required) in policies
+            if mimetype == "text/x-html-safe"
+        ]
         self.assertEqual(0, len(policies))
 
         # make sure it doesn't break if trying to uninstall again
diff --git a/setup.py b/setup.py
index bdfcb86..ea20310 100644
--- a/setup.py
+++ b/setup.py
@@ -13,9 +13,9 @@
       # Get more strings from
       # http://pypi.python.org/pypi?%3Aaction=list_classifiers
       classifiers=[
-        "Framework :: Plone",
-        "Programming Language :: Python",
-        ],
+          "Framework :: Plone",
+          "Programming Language :: Python",
+      ],
       keywords='plone transform filter uid caption',
       author='David Glick, Plone Foundation',
       author_email='davidglick@groundwire.org',
@@ -33,7 +33,10 @@
           'Products.PortalTransforms',
       ],
       extras_require={
-          'test': ['Products.PloneTestCase'],
+          'test': [
+              'plone.app.contenttypes',
+              'plone.app.testing',
+          ],
       },
       entry_points="""
       # -*- Entry points: -*-


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2014-06-28T09:39:00+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.outputfilters/commit/008e082e0ee879371b7aa872a2a4172ac727ce3b

Move test_resolveuid_and_caption.py test to plone.app.testing. We still have 5 errors and 13 test failures in this test file.

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 7f7ae41..f625670 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -1,9 +1,13 @@
 import unittest
 from doctest import REPORT_NDIFF, OutputChecker, _ellipsis_match
-from plone.outputfilters.tests.base import OutputFiltersTestCase
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
 from Products.PortalTransforms.tests.utils import normalize_html
 from plone.outputfilters.filters.resolveuid_and_caption import \
     ResolveUIDAndCaptionFilter
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import logout
+
 import pkg_resources
 
 # plone.namedfile is not part of coredev (yet) as such
@@ -21,7 +25,9 @@
 PREFIX = abspath(dirname(__file__))
 
 
-class ResolveUIDAndCaptionFilterIntegrationTestCase(OutputFiltersTestCase):
+class ResolveUIDAndCaptionFilterIntegrationTestCase(unittest.TestCase):
+
+    layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
 
     def _makeParser(self, **kw):
         parser = ResolveUIDAndCaptionFilter(context=self.portal)
@@ -45,7 +51,7 @@ def UID(self):
         if HAS_NAMEDFILE:
             class DummyContent2(NFDummyContent):
                 id = __name__ = title = 'foo2'
-    
+
                 def UID(self):
                     return 'foo2'
 
@@ -75,9 +81,11 @@ class wrapper(object):
             raise AssertionError(self.outputchecker.output_difference(
                     wrapper, out, REPORT_NDIFF))
 
-    def afterSetUp(self):
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
         # create an image and record its UID
-        self.setRoles(['Manager'])
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
 
         data = open(join(PREFIX, 'image.jpg'), 'rb').read()
         self.portal.invokeFactory('Image', id='image.jpg', title='Image',
@@ -222,7 +230,7 @@ def test_uuidToURL_permission(self):
         from plone.outputfilters.browser.resolveuid import uuidToObject
         self.portal.invokeFactory('Document', id='page', title='Page')
         page = self.portal['page']
-        self.logout()
+        logout()
         self.assertEqual('http://nohost/plone/page',
                          uuidToURL(page.UID()))
         self.assertTrue(page.aq_base
@@ -285,7 +293,7 @@ def test_image_captioning_relative_path_private_folder(self):
         image = getattr(self.portal.private, 'image.jpg')
         image.setDescription('My private image caption')
         image.reindexObject()
-        self.logout()
+        logout()
 
         text_in = """<img class="captioned" src="private/image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2014-12-18T16:53:11+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/e1cfadab7996ecefafb67d930813a919353b5f14

fixed some tests

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index f625670..a9605f1 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -1,4 +1,3 @@
-import unittest
 from doctest import REPORT_NDIFF, OutputChecker, _ellipsis_match
 from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
 from Products.PortalTransforms.tests.utils import normalize_html
@@ -6,7 +5,7 @@
     ResolveUIDAndCaptionFilter
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
-from plone.app.testing import logout
+from plone.app.testing.bbb import PloneTestCase
 
 import pkg_resources
 
@@ -25,10 +24,12 @@
 PREFIX = abspath(dirname(__file__))
 
 
-class ResolveUIDAndCaptionFilterIntegrationTestCase(unittest.TestCase):
+class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):
 
     layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
 
+    image_id = 'image.jpg'
+
     def _makeParser(self, **kw):
         parser = ResolveUIDAndCaptionFilter(context=self.portal)
         for k, v in kw.items():
@@ -61,7 +62,7 @@ def UID(self):
 
         if HAS_NAMEDFILE:
             dummy2 = DummyContent2('foo2')
-            data = open(join(PREFIX, 'image.jpg'), 'rb').read()
+            data = open(join(PREFIX, self.image_id), 'rb').read()
             dummy2.image = NamedImage(data, 'image/jpeg', u'image.jpeg')
             self.portal._setObject('foo2', dummy2)
             self.portal.portal_catalog.catalog_object(self.portal.foo2)
@@ -81,16 +82,15 @@ class wrapper(object):
             raise AssertionError(self.outputchecker.output_difference(
                     wrapper, out, REPORT_NDIFF))
 
-    def setUp(self):
-        self.portal = self.layer['portal']
-        self.request = self.layer['request']
+    def afterSetUp(self):
         # create an image and record its UID
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
 
-        data = open(join(PREFIX, 'image.jpg'), 'rb').read()
-        self.portal.invokeFactory('Image', id='image.jpg', title='Image',
-                                  file=data)
-        image = getattr(self.portal, 'image.jpg')
+        data = open(join(PREFIX, self.image_id), 'rb').read()
+        if not self.image_id in self.portal:
+            self.portal.invokeFactory(
+                'Image', id=self.image_id, title='Image', file=data)
+        image = self.portal[self.image_id]
         image.setDescription('My caption')
         image.reindexObject()
         self.UID = image.UID()
@@ -100,6 +100,11 @@ def setUp(self):
 
         self.outputchecker = OutputChecker()
 
+    def beforeTearDown(self):
+        self.login()
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        del self.portal[self.image_id]
+
     def test_parsing_minimal(self):
         text = '<div>Some simple text.</div>'
         res = self.parser(text)
@@ -230,7 +235,7 @@ def test_uuidToURL_permission(self):
         from plone.outputfilters.browser.resolveuid import uuidToObject
         self.portal.invokeFactory('Document', id='page', title='Page')
         page = self.portal['page']
-        logout()
+        self.logout()
         self.assertEqual('http://nohost/plone/page',
                          uuidToURL(page.UID()))
         self.assertTrue(page.aq_base
@@ -293,7 +298,7 @@ def test_image_captioning_relative_path_private_folder(self):
         image = getattr(self.portal.private, 'image.jpg')
         image.setDescription('My private image caption')
         image.reindexObject()
-        logout()
+        self.logout()
 
         text_in = """<img class="captioned" src="private/image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
@@ -361,14 +366,14 @@ def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):
     def test_image_captioning_bad_uid(self):
         text_in = """<img src="resolveuid/notauid" width="120" height="144" start="fileopen" alt="Duncan's picture" class="image-left captioned" loop="1" />"""
         self._assertTransformsTo(text_in, text_in)
-        
+
     def test_image_captioning_unknown_scale(self):
         text_in = """<img src="resolveuid/%s/madeup" />""" % self.UID
-        self._assertTransformsTo(text_in, text_in)        
+        self._assertTransformsTo(text_in, text_in)
 
     def test_image_captioning_unknown_scale_images_view(self):
         text_in = """<img src="resolveuid/%s/@@images/image/madeup" />""" % self.UID
-        self._assertTransformsTo(text_in, text_in)        
+        self._assertTransformsTo(text_in, text_in)
 
     def test_image_captioning_external_url(self):
         text_in = """<img src="http://example.com/foo" class="captioned" />"""
@@ -427,6 +432,3 @@ def test_resolve_uids_with_bigU(self):
 
     def test_singleton_elements(self):
         self._assertTransformsTo('<hr/>\r\n<p>foo</p><br/>', '<hr />\r\n<p>foo</p><br />')
-
-def test_suite():
-    return unittest.defaultTestLoader.loadTestsFromName(__name__)


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-08T21:43:38+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/b2ee36aed10df55c3d93466c361a62c60ecb4509

updated egg classifiers

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index ea20310..1fec2f2 100644
--- a/setup.py
+++ b/setup.py
@@ -14,7 +14,9 @@
       # http://pypi.python.org/pypi?%3Aaction=list_classifiers
       classifiers=[
           "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
           "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
       ],
       keywords='plone transform filter uid caption',
       author='David Glick, Plone Foundation',


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-08T22:00:32+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/a82dd2ebdde7050ef42ac7e4b2c9c32a19fb6368

use correct data field and fixed some tests

Files changed:
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
index b4a69e6..1d3d23a 100644
--- a/plone/outputfilters/testing.py
+++ b/plone/outputfilters/testing.py
@@ -14,15 +14,9 @@ class PloneOutputfilters(PloneSandboxLayer):
 
     def setUpZope(self, app, configurationContext):
         import plone.outputfilters
-        xmlconfig.file(
-            'configure.zcml',
-            plone.outputfilters,
-            context=configurationContext
-        )
+        self.loadZCML(package=plone.outputfilters)
         # Install product and call its initialize() function
-        fiveconfigure.debug_mode = True
         z2.installProduct(app, 'plone.outputfilters')
-        fiveconfigure.debug_mode = False
 
     def setUpPloneSite(self, portal):
         applyProfile(portal, 'plone.outputfilters:default')
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index a9605f1..350333c 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -20,9 +20,16 @@
     from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent
     HAS_NAMEDFILE = True
 
+
+
 from os.path import join, abspath, dirname
 PREFIX = abspath(dirname(__file__))
 
+def dummy_image():
+    from plone.namedfile.file import NamedBlobImage
+    filename = join(PREFIX, u'image.jpg')
+    data = open(filename, 'rb').read()
+    return NamedBlobImage(data=data, filename=filename)
 
 class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):
 
@@ -89,9 +96,10 @@ def afterSetUp(self):
         data = open(join(PREFIX, self.image_id), 'rb').read()
         if not self.image_id in self.portal:
             self.portal.invokeFactory(
-                'Image', id=self.image_id, title='Image', file=data)
+                'Image', id=self.image_id, title='Image')
         image = self.portal[self.image_id]
         image.setDescription('My caption')
+        image.image = dummy_image()
         image.reindexObject()
         self.UID = image.UID()
         self.parser = self._makeParser(captioned_images=True,
@@ -245,7 +253,8 @@ def test_image_captioning_in_news_item(self):
         # Create a news item with a relative unscaled image
         self.portal.invokeFactory('News Item', id='a-news-item', title='Title')
         news_item = getattr(self.portal, 'a-news-item')
-        news_item.setText('<p><img class="captioned" src="image.jpg"/></p>')
+        from plone.app.textfield.value import RichTextValue
+        news_item.text = RichTextValue('<p><img class="captioned" src="image.jpg"/></p>', 'text/plain', 'text/html')
         news_item.setDescription("Description.")
 
         # Enable image captioning
@@ -259,7 +268,7 @@ class ResolveCaptioningEnabler(object):
         provideUtility(ResolveCaptioningEnabler(), IImageCaptioningEnabler)
 
         # Test captioning
-        output = news_item.getText()
+        output = news_item.text.output
         self.assertEqual(output, """<p><dl style="width:500px;" class="captioned">
 <dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
@@ -273,7 +282,7 @@ def test_image_captioning_absolutizes_uncaptioned_image(self):
     def test_image_captioning_absolute_path(self):
         text_in = """<img class="captioned" src="/image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -281,7 +290,7 @@ def test_image_captioning_absolute_path(self):
     def test_image_captioning_relative_path(self):
         text_in = """<img class="captioned" src="image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -292,11 +301,11 @@ def test_image_captioning_relative_path_private_folder(self):
         self.loginAsPortalOwner()
         self.portal.invokeFactory('Folder', id='private',
             title='Private Folder')
-        data = open(join(PREFIX, 'image.jpg'), 'rb').read()
         self.portal.private.invokeFactory('Image', id='image.jpg',
-            title='Image', file=data)
+            title='Image')
         image = getattr(self.portal.private, 'image.jpg')
         image.setDescription('My private image caption')
+        image.image = dummy_image()
         image.reindexObject()
         self.logout()
 
@@ -318,7 +327,7 @@ def test_image_captioning_relative_path_scale(self):
     def test_image_captioning_resolveuid(self):
         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -350,7 +359,7 @@ def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):
     def test_image_captioning_resolveuid_no_scale(self):
         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
 <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -409,7 +418,7 @@ def test_image_captioning_handles_non_ascii(self):
         self.portal['image.jpg'].setDescription(u'Kupu Test Image \xe5\xe4\xf6')
         text_in = """<img class="captioned" src="image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" title="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" title="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-14T12:20:59Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/1e77efd463ba80817f2fd6f4fcd3122ed86d1745

remove backwards compatibility import (this works since a really long time)

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 3503499..996c0a5 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -4,10 +4,7 @@
 from zope.publisher.interfaces import NotFound as ztkNotFound
 from DocumentTemplate.DT_Util import html_quote
 from DocumentTemplate.DT_Var import newline_to_br
-try:
-    from zope.component.hooks import getSite
-except ImportError:
-    from zope.app.component.hooks import getSite
+from zope.component.hooks import getSite
 from Products.CMFCore.interfaces import IContentish
 from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import getAllUtilitiesRegisteredFor


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-14T12:21:50Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/27f0fdc3578cc4f904d1b081f8ceddf067a0484b

we don't support Python 2.4 anymore I guess

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 996c0a5..7880ac7 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -28,15 +28,7 @@
 appendix_re = re.compile('^(.*)([\?#].*)$')
 resolveuid_re = re.compile('^[./]*resolve[Uu]id/([^/]*)/?(.*)$')
 
-# The SGMLParser works differently on Python 2.4 and later
-# The attributes are passed escaped in the unknown_...-methods
-# in 2.4 and raw in Python 2.6
-# No need to escape in python 2.4
-import sys
-if sys.version_info[0] == 2 and sys.version_info[1] == 4:
-    escape = lambda s: s
-else:
-    from cgi import escape
+from cgi import escape
 
 
 class IImageCaptioningEnabler(Interface):


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-16T11:14:26Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/0137ab5c1dd3efa479a12e030d2d483712811dc4

add  DummyImageCaptioningEnabler for testing

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 7880ac7..f5216b2 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -262,6 +262,10 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
         klass = attributes['class']
         del attributes['class']
         del attributes['src']
+        if 'width' in attributes:
+            attributes['width'] = int(attributes['width'])
+        if 'height' in attributes:
+            attributes['height'] = int(attributes['height'])
         view = fullimage.restrictedTraverse('@@images', None)
         if view is not None:
             original_width, original_height = view.getImageSize()
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
index 1d3d23a..fd89779 100644
--- a/plone/outputfilters/testing.py
+++ b/plone/outputfilters/testing.py
@@ -7,6 +7,15 @@
 from Products.Five import fiveconfigure
 from plone.testing import z2
 
+from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler
+from zope.interface import implements
+import zope.component
+
+class DummyImageCaptioningEnabler(object):
+    implements(IImageCaptioningEnabler)
+
+    available = True
+
 
 class PloneOutputfilters(PloneSandboxLayer):
 
@@ -17,6 +26,13 @@ def setUpZope(self, app, configurationContext):
         self.loadZCML(package=plone.outputfilters)
         # Install product and call its initialize() function
         z2.installProduct(app, 'plone.outputfilters')
+        gsm = zope.component.getGlobalSiteManager()
+        gsm.registerUtility(DummyImageCaptioningEnabler(), IImageCaptioningEnabler, 'outputfiltertest', event=False)
+
+
+    def tearDownZope(self, app):
+        gsm = zope.component.getGlobalSiteManager()
+        gsm.unregisterUtility(provided=IImageCaptioningEnabler, name='outputfiltertest')
 
     def setUpPloneSite(self, portal):
         applyProfile(portal, 'plone.outputfilters:default')
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 350333c..920e4d7 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -399,7 +399,7 @@ def test_image_captioning_preserves_custom_attributes(self):
     def test_image_captioning_handles_unquoted_attributes(self):
         text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID
         text_out = """<dl style="width:120px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="picture alt text" title="Image" height="144" width="120" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="picture alt text" title="Image" height="144" width="120" /></dt>
  <dd class="image-caption" style="width:120px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-16T14:12:22Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/87d2d8c7392d0dd07bf2351ef73c720e0d257a78

fixed another test

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 920e4d7..8264333 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -391,7 +391,7 @@ def test_image_captioning_external_url(self):
     def test_image_captioning_preserves_custom_attributes(self):
         text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""
         text_out = """<dl style="width:42px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="42" width="42" foo="bar" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="42" width="42" foo="bar" /></dt>
  <dd class="image-caption" style="width:42px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-21T14:19:01Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/5251fcc5be4b58654b4e571d62ea725535cf3bc5

change (un)restricted call to images view to make test pass. Is this ok?

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index f5216b2..3cba5ab 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -266,7 +266,7 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
             attributes['width'] = int(attributes['width'])
         if 'height' in attributes:
             attributes['height'] = int(attributes['height'])
-        view = fullimage.restrictedTraverse('@@images', None)
+        view = fullimage.unrestrictedTraverse('@@images', None)
         if view is not None:
             original_width, original_height = view.getImageSize()
         else:


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-21T14:19:40Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/305dd1b081e3a8c034719cd9b2bfd7b9c7adc83c

fix image URLs to make tests pass for p.a.contenttypes

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 8264333..56640eb 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -311,15 +311,15 @@ def test_image_captioning_relative_path_private_folder(self):
 
         text_in = """<img class="captioned" src="private/image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/private/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/private/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My private image caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_relative_path_scale(self):
-        text_in = """<img class="captioned" src="image.jpg/image_thumb"/>"""
+        text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""
         text_out = """<dl style="width:128px;" class="captioned">
-<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/image_thumb" alt="Image" title="Image" height="84" width="128" /></a></dt>
+<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="84" width="128" /></a></dt>
  <dd class="image-caption" style="width:128px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -333,9 +333,9 @@ def test_image_captioning_resolveuid(self):
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_resolveuid_scale(self):
-        text_in = """<img class="captioned" src="resolveuid/%s/image_thumb"/>""" % self.UID
+        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID
         text_out = """<dl style="width:128px;" class="captioned">
-<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/image_thumb" alt="Image" title="Image" height="84" width="128" /></a></dt>
+<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="84" width="128" /></a></dt>
  <dd class="image-caption" style="width:128px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -405,9 +405,9 @@ def test_image_captioning_handles_unquoted_attributes(self):
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_preserves_existing_links(self):
-        text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/image_thumb"/></a>"""
+        text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""
         text_out = """<a href="/xyzzy" class="link"><dl style="width:128px;" class="image-left captioned">
-<dt><img src="http://nohost/plone/image.jpg/image_thumb" alt="Image" title="Image" height="84" width="128" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="84" width="128" /></dt>
  <dd class="image-caption" style="width:128px;">My caption</dd>
 </dl>
 </a>"""


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-01-21T14:41:51Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/2248ae6f56fda7242f45ec688b38d60846d5e6b6

fix news-item test case

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 56640eb..3d3a9b1 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -7,6 +7,7 @@
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing.bbb import PloneTestCase
 
+import re
 import pkg_resources
 
 # plone.namedfile is not part of coredev (yet) as such
@@ -252,25 +253,17 @@ def test_uuidToURL_permission(self):
     def test_image_captioning_in_news_item(self):
         # Create a news item with a relative unscaled image
         self.portal.invokeFactory('News Item', id='a-news-item', title='Title')
-        news_item = getattr(self.portal, 'a-news-item')
+        news_item = self.portal['a-news-item']
         from plone.app.textfield.value import RichTextValue
-        news_item.text = RichTextValue('<p><img class="captioned" src="image.jpg"/></p>', 'text/plain', 'text/html')
+        news_item.text = RichTextValue(
+            '<p><img class="captioned" src="image.jpg"/></p>',
+            'text/html', 'text/x-html-safe')
         news_item.setDescription("Description.")
 
-        # Enable image captioning
-        from zope.interface import implements
-        from zope.component import provideUtility
-        from plone.outputfilters.filters.resolveuid_and_caption import\
-            IImageCaptioningEnabler
-        class ResolveCaptioningEnabler(object):
-            implements(IImageCaptioningEnabler)
-            available = True
-        provideUtility(ResolveCaptioningEnabler(), IImageCaptioningEnabler)
-
         # Test captioning
         output = news_item.text.output
-        self.assertEqual(output, """<p><dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+        self.assertRegexpMatches(output, r"""<p><dl style="width:500px;" class="captioned">
+<dt><img src="http://nohost/plone/image.jpg/@@images/(.*?)\.jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl></p>""")
 


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-03-05T17:40:48-08:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.outputfilters/commit/d56c3124a4358410b8a5d850f7fd6d071cb49c95

For full-size (non-scaled) plone.app.contenttypes images, preserve height/width specified in img tag attributes.

Files changed:
M CHANGES.txt
M plone/outputfilters/filters/resolveuid_and_caption.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 6c7db6f..d6efd02 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,9 @@ Changelog
 1.15 (unreleased)
 -----------------
 
-- Nothing changed yet.
+- For full-size (non-scaled) plone.app.contenttypes images,
+  preserve height/width specified in img tag attributes.
+  [davisagli]
 
 
 1.14 (2014-04-22)
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 3cba5ab..112e6bc 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -279,7 +279,7 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
             if hasattr(aq_base(image), 'tag'):
                 tag = image.tag
             else:
-                tag = view.tag
+                tag = view.scale().tag
             width = original_width
         options = {
             'class': klass,


Repository: plone.outputfilters
Branch: refs/heads/master
Date: 2015-03-05T18:23:40-08:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/plone.outputfilters/commit/3507cc2de980a101f68840257ee4d274e64b4a46

Merge pull request #10 from plone/plone-app-testing

Ported to plone.app.testing

Files changed:
A plone/outputfilters/testing.py
M CHANGES.txt
M plone/outputfilters/README.txt
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M setup.py
D plone/outputfilters/tests/base.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 6c7db6f..d6efd02 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,9 @@ Changelog
 1.15 (unreleased)
 -----------------
 
-- Nothing changed yet.
+- For full-size (non-scaled) plone.app.contenttypes images,
+  preserve height/width specified in img tag attributes.
+  [davisagli]
 
 
 1.14 (2014-04-22)
diff --git a/plone/outputfilters/README.txt b/plone/outputfilters/README.txt
index f4ec238..5ce7a28 100644
--- a/plone/outputfilters/README.txt
+++ b/plone/outputfilters/README.txt
@@ -37,26 +37,31 @@ indicating whether the filter should be applied.
 Filters are registered in ZCML as a named multi-adapter of the context and
 request to IFilter.
 
- >>> from Products.Five.zcml import load_string
- >>> load_string("""
+ >>> from Zope2.App import zcml
+ >>> import Products.Five
+ >>> configure = """
  ... <configure
  ...     xmlns="http://namespaces.zope.org/zope">
- ... 
+ ...
  ...   <adapter
  ...     name="em_dash_adder"
  ...     provides="plone.outputfilters.interfaces.IFilter"
  ...     for="* *"
  ...     factory="plone.outputfilters.filters.example.EmDashAdder"
  ...     />
- ... 
+ ...
  ... </configure>
- ... """)
+ ... """
+ >>> zcml.load_config("configure.zcml", Products.Five)
+ >>> zcml.load_string(configure)
 
 Now when text is transformed from text/html to text/x-html-safe, the filter will
 be applied.
 
- >>> str(self.portal.portal_transforms.convertTo('text/x-html-safe',
- ...     'test--test', mimetype='text/html', context=self.portal))
+ >>> app = layer['app']
+ >>> portal = layer['portal']
+ >>> str(portal.portal_transforms.convertTo('text/x-html-safe',
+ ...     'test--test', mimetype='text/html', context=portal))
  'test\xe2\x80\x94test'
 
 
@@ -64,7 +69,7 @@ How it works
 ============
 
 ``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:
- 
+
 1. a new mimetype ("text/x-plone-outputfilters-html")
 2. a transform from text/html to text/x-plone-outputfilters-html
 3. a null transform from text/x-plone-outputfilters-html back to text/html
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 3503499..112e6bc 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -4,10 +4,7 @@
 from zope.publisher.interfaces import NotFound as ztkNotFound
 from DocumentTemplate.DT_Util import html_quote
 from DocumentTemplate.DT_Var import newline_to_br
-try:
-    from zope.component.hooks import getSite
-except ImportError:
-    from zope.app.component.hooks import getSite
+from zope.component.hooks import getSite
 from Products.CMFCore.interfaces import IContentish
 from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import getAllUtilitiesRegisteredFor
@@ -31,15 +28,7 @@
 appendix_re = re.compile('^(.*)([\?#].*)$')
 resolveuid_re = re.compile('^[./]*resolve[Uu]id/([^/]*)/?(.*)$')
 
-# The SGMLParser works differently on Python 2.4 and later
-# The attributes are passed escaped in the unknown_...-methods
-# in 2.4 and raw in Python 2.6
-# No need to escape in python 2.4
-import sys
-if sys.version_info[0] == 2 and sys.version_info[1] == 4:
-    escape = lambda s: s
-else:
-    from cgi import escape
+from cgi import escape
 
 
 class IImageCaptioningEnabler(Interface):
@@ -273,7 +262,11 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
         klass = attributes['class']
         del attributes['class']
         del attributes['src']
-        view = fullimage.restrictedTraverse('@@images', None)
+        if 'width' in attributes:
+            attributes['width'] = int(attributes['width'])
+        if 'height' in attributes:
+            attributes['height'] = int(attributes['height'])
+        view = fullimage.unrestrictedTraverse('@@images', None)
         if view is not None:
             original_width, original_height = view.getImageSize()
         else:
@@ -286,7 +279,7 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
             if hasattr(aq_base(image), 'tag'):
                 tag = image.tag
             else:
-                tag = view.tag
+                tag = view.scale().tag
             width = original_width
         options = {
             'class': klass,
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
new file mode 100644
index 0000000..fd89779
--- /dev/null
+++ b/plone/outputfilters/testing.py
@@ -0,0 +1,47 @@
+from plone.app.testing import IntegrationTesting
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing import applyProfile
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from zope.configuration import xmlconfig
+from Products.Five import fiveconfigure
+from plone.testing import z2
+
+from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler
+from zope.interface import implements
+import zope.component
+
+class DummyImageCaptioningEnabler(object):
+    implements(IImageCaptioningEnabler)
+
+    available = True
+
+
+class PloneOutputfilters(PloneSandboxLayer):
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        import plone.outputfilters
+        self.loadZCML(package=plone.outputfilters)
+        # Install product and call its initialize() function
+        z2.installProduct(app, 'plone.outputfilters')
+        gsm = zope.component.getGlobalSiteManager()
+        gsm.registerUtility(DummyImageCaptioningEnabler(), IImageCaptioningEnabler, 'outputfiltertest', event=False)
+
+
+    def tearDownZope(self, app):
+        gsm = zope.component.getGlobalSiteManager()
+        gsm.unregisterUtility(provided=IImageCaptioningEnabler, name='outputfiltertest')
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'plone.outputfilters:default')
+
+
+PLONE_OUTPUTFILTERS_FIXTURE = PloneOutputfilters()
+PLONE_OUTPUTFILTERS_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),
+    name="PloneOutputfilters:Integration")
+PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),
+    name="PloneOutputfilters:Functional")
diff --git a/plone/outputfilters/tests/base.py b/plone/outputfilters/tests/base.py
deleted file mode 100644
index 1a74ee1..0000000
--- a/plone/outputfilters/tests/base.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from Testing import ZopeTestCase as ztc
-
-from Products.Five import fiveconfigure
-from Products.PloneTestCase import PloneTestCase as ptc
-from Products.PloneTestCase.layer import PloneSite
-
-ptc.setupPloneSite(extension_profiles=['plone.outputfilters:default'])
-
-
-class OutputFiltersTestCase(ptc.FunctionalTestCase):
-
-    class layer(PloneSite):
-
-        @classmethod
-        def setUp(cls):
-            fiveconfigure.debug_mode = True
-            import plone.outputfilters
-            ztc.installPackage(plone.outputfilters)
-            fiveconfigure.debug_mode = False
-
-        @classmethod
-        def tearDown(cls):
-            pass
-
-
-class OutputFiltersDocTestCase(OutputFiltersTestCase):
-    # workaround for bug where the default test loader finds a bogus
-    # test case in a test case class if it was previously used by
-    # a Zope doctest suite
-    pass
diff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py
index 5aae6af..5a9eecf 100644
--- a/plone/outputfilters/tests/test_docs.py
+++ b/plone/outputfilters/tests/test_docs.py
@@ -1,13 +1,32 @@
-import unittest
-from Testing import ZopeTestCase as ztc
-from plone.outputfilters.tests.base import OutputFiltersDocTestCase
+# -*- coding: utf-8 -*-
+import doctest
 
+import unittest2 as unittest
+import pprint
+
+from plone.testing import layered
+
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
 
-def test_suite():
-    return unittest.TestSuite([
 
-        ztc.ZopeDocFileSuite(
-           'README.txt', package='plone.outputfilters',
-           test_class=OutputFiltersDocTestCase),
+optionflags = (
+    doctest.ELLIPSIS |
+    doctest.NORMALIZE_WHITESPACE |
+    doctest.REPORT_ONLY_FIRST_FAILURE
+)
+normal_testfiles = [
+    '../README.txt'
+]
 
-        ])
+
+def test_suite():
+    suite = unittest.TestSuite()
+    suite.addTests([
+        layered(doctest.DocFileSuite(test,
+                                     optionflags=optionflags,
+                                     globs={'pprint': pprint.pprint,
+                                            }
+                                     ),
+                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING)
+        for test in normal_testfiles])
+    return suite
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 7f7ae41..3d3a9b1 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -1,9 +1,13 @@
-import unittest
 from doctest import REPORT_NDIFF, OutputChecker, _ellipsis_match
-from plone.outputfilters.tests.base import OutputFiltersTestCase
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
 from Products.PortalTransforms.tests.utils import normalize_html
 from plone.outputfilters.filters.resolveuid_and_caption import \
     ResolveUIDAndCaptionFilter
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing.bbb import PloneTestCase
+
+import re
 import pkg_resources
 
 # plone.namedfile is not part of coredev (yet) as such
@@ -17,11 +21,22 @@
     from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent
     HAS_NAMEDFILE = True
 
+
+
 from os.path import join, abspath, dirname
 PREFIX = abspath(dirname(__file__))
 
+def dummy_image():
+    from plone.namedfile.file import NamedBlobImage
+    filename = join(PREFIX, u'image.jpg')
+    data = open(filename, 'rb').read()
+    return NamedBlobImage(data=data, filename=filename)
+
+class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):
 
-class ResolveUIDAndCaptionFilterIntegrationTestCase(OutputFiltersTestCase):
+    layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+
+    image_id = 'image.jpg'
 
     def _makeParser(self, **kw):
         parser = ResolveUIDAndCaptionFilter(context=self.portal)
@@ -45,7 +60,7 @@ def UID(self):
         if HAS_NAMEDFILE:
             class DummyContent2(NFDummyContent):
                 id = __name__ = title = 'foo2'
-    
+
                 def UID(self):
                     return 'foo2'
 
@@ -55,7 +70,7 @@ def UID(self):
 
         if HAS_NAMEDFILE:
             dummy2 = DummyContent2('foo2')
-            data = open(join(PREFIX, 'image.jpg'), 'rb').read()
+            data = open(join(PREFIX, self.image_id), 'rb').read()
             dummy2.image = NamedImage(data, 'image/jpeg', u'image.jpeg')
             self.portal._setObject('foo2', dummy2)
             self.portal.portal_catalog.catalog_object(self.portal.foo2)
@@ -77,13 +92,15 @@ class wrapper(object):
 
     def afterSetUp(self):
         # create an image and record its UID
-        self.setRoles(['Manager'])
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
 
-        data = open(join(PREFIX, 'image.jpg'), 'rb').read()
-        self.portal.invokeFactory('Image', id='image.jpg', title='Image',
-                                  file=data)
-        image = getattr(self.portal, 'image.jpg')
+        data = open(join(PREFIX, self.image_id), 'rb').read()
+        if not self.image_id in self.portal:
+            self.portal.invokeFactory(
+                'Image', id=self.image_id, title='Image')
+        image = self.portal[self.image_id]
         image.setDescription('My caption')
+        image.image = dummy_image()
         image.reindexObject()
         self.UID = image.UID()
         self.parser = self._makeParser(captioned_images=True,
@@ -92,6 +109,11 @@ def afterSetUp(self):
 
         self.outputchecker = OutputChecker()
 
+    def beforeTearDown(self):
+        self.login()
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        del self.portal[self.image_id]
+
     def test_parsing_minimal(self):
         text = '<div>Some simple text.</div>'
         res = self.parser(text)
@@ -231,24 +253,17 @@ def test_uuidToURL_permission(self):
     def test_image_captioning_in_news_item(self):
         # Create a news item with a relative unscaled image
         self.portal.invokeFactory('News Item', id='a-news-item', title='Title')
-        news_item = getattr(self.portal, 'a-news-item')
-        news_item.setText('<p><img class="captioned" src="image.jpg"/></p>')
+        news_item = self.portal['a-news-item']
+        from plone.app.textfield.value import RichTextValue
+        news_item.text = RichTextValue(
+            '<p><img class="captioned" src="image.jpg"/></p>',
+            'text/html', 'text/x-html-safe')
         news_item.setDescription("Description.")
 
-        # Enable image captioning
-        from zope.interface import implements
-        from zope.component import provideUtility
-        from plone.outputfilters.filters.resolveuid_and_caption import\
-            IImageCaptioningEnabler
-        class ResolveCaptioningEnabler(object):
-            implements(IImageCaptioningEnabler)
-            available = True
-        provideUtility(ResolveCaptioningEnabler(), IImageCaptioningEnabler)
-
         # Test captioning
-        output = news_item.getText()
-        self.assertEqual(output, """<p><dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+        output = news_item.text.output
+        self.assertRegexpMatches(output, r"""<p><dl style="width:500px;" class="captioned">
+<dt><img src="http://nohost/plone/image.jpg/@@images/(.*?)\.jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl></p>""")
 
@@ -260,7 +275,7 @@ def test_image_captioning_absolutizes_uncaptioned_image(self):
     def test_image_captioning_absolute_path(self):
         text_in = """<img class="captioned" src="/image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -268,7 +283,7 @@ def test_image_captioning_absolute_path(self):
     def test_image_captioning_relative_path(self):
         text_in = """<img class="captioned" src="image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -279,25 +294,25 @@ def test_image_captioning_relative_path_private_folder(self):
         self.loginAsPortalOwner()
         self.portal.invokeFactory('Folder', id='private',
             title='Private Folder')
-        data = open(join(PREFIX, 'image.jpg'), 'rb').read()
         self.portal.private.invokeFactory('Image', id='image.jpg',
-            title='Image', file=data)
+            title='Image')
         image = getattr(self.portal.private, 'image.jpg')
         image.setDescription('My private image caption')
+        image.image = dummy_image()
         image.reindexObject()
         self.logout()
 
         text_in = """<img class="captioned" src="private/image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/private/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/private/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My private image caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_relative_path_scale(self):
-        text_in = """<img class="captioned" src="image.jpg/image_thumb"/>"""
+        text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""
         text_out = """<dl style="width:128px;" class="captioned">
-<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/image_thumb" alt="Image" title="Image" height="84" width="128" /></a></dt>
+<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="84" width="128" /></a></dt>
  <dd class="image-caption" style="width:128px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -305,15 +320,15 @@ def test_image_captioning_relative_path_scale(self):
     def test_image_captioning_resolveuid(self):
         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_resolveuid_scale(self):
-        text_in = """<img class="captioned" src="resolveuid/%s/image_thumb"/>""" % self.UID
+        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID
         text_out = """<dl style="width:128px;" class="captioned">
-<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/image_thumb" alt="Image" title="Image" height="84" width="128" /></a></dt>
+<dt><a rel="lightbox" href="/plone/image.jpg"><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="84" width="128" /></a></dt>
  <dd class="image-caption" style="width:128px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -337,7 +352,7 @@ def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):
     def test_image_captioning_resolveuid_no_scale(self):
         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="331" width="500" /></dt>
 <dd class="image-caption" style="width:500px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -353,14 +368,14 @@ def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):
     def test_image_captioning_bad_uid(self):
         text_in = """<img src="resolveuid/notauid" width="120" height="144" start="fileopen" alt="Duncan's picture" class="image-left captioned" loop="1" />"""
         self._assertTransformsTo(text_in, text_in)
-        
+
     def test_image_captioning_unknown_scale(self):
         text_in = """<img src="resolveuid/%s/madeup" />""" % self.UID
-        self._assertTransformsTo(text_in, text_in)        
+        self._assertTransformsTo(text_in, text_in)
 
     def test_image_captioning_unknown_scale_images_view(self):
         text_in = """<img src="resolveuid/%s/@@images/image/madeup" />""" % self.UID
-        self._assertTransformsTo(text_in, text_in)        
+        self._assertTransformsTo(text_in, text_in)
 
     def test_image_captioning_external_url(self):
         text_in = """<img src="http://example.com/foo" class="captioned" />"""
@@ -369,7 +384,7 @@ def test_image_captioning_external_url(self):
     def test_image_captioning_preserves_custom_attributes(self):
         text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""
         text_out = """<dl style="width:42px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Image" title="Image" height="42" width="42" foo="bar" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="42" width="42" foo="bar" /></dt>
  <dd class="image-caption" style="width:42px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -377,15 +392,15 @@ def test_image_captioning_preserves_custom_attributes(self):
     def test_image_captioning_handles_unquoted_attributes(self):
         text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID
         text_out = """<dl style="width:120px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="picture alt text" title="Image" height="144" width="120" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="picture alt text" title="Image" height="144" width="120" /></dt>
  <dd class="image-caption" style="width:120px;">My caption</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_preserves_existing_links(self):
-        text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/image_thumb"/></a>"""
+        text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""
         text_out = """<a href="/xyzzy" class="link"><dl style="width:128px;" class="image-left captioned">
-<dt><img src="http://nohost/plone/image.jpg/image_thumb" alt="Image" title="Image" height="84" width="128" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/....jpeg" alt="Image" title="Image" height="84" width="128" /></dt>
  <dd class="image-caption" style="width:128px;">My caption</dd>
 </dl>
 </a>"""
@@ -396,7 +411,7 @@ def test_image_captioning_handles_non_ascii(self):
         self.portal['image.jpg'].setDescription(u'Kupu Test Image \xe5\xe4\xf6')
         text_in = """<img class="captioned" src="image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
-<dt><img src="http://nohost/plone/image.jpg/image" alt="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" title="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" height="331" width="500" /></dt>
+<dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" title="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" height="331" width="500" /></dt>
  <dd class="image-caption" style="width:500px;">Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6</dd>
 </dl>"""
         self._assertTransformsTo(text_in, text_out)
@@ -419,6 +434,3 @@ def test_resolve_uids_with_bigU(self):
 
     def test_singleton_elements(self):
         self._assertTransformsTo('<hr/>\r\n<p>foo</p><br/>', '<hr />\r\n<p>foo</p><br />')
-
-def test_suite():
-    return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py
index 4d75661..d3601ec 100644
--- a/plone/outputfilters/tests/test_transforms.py
+++ b/plone/outputfilters/tests/test_transforms.py
@@ -1,10 +1,17 @@
 import unittest
-from plone.outputfilters.tests.base import OutputFiltersTestCase
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 
 
-class TransformsTestCase(OutputFiltersTestCase):
+class TransformsTestCase(unittest.TestCase):
 
-    def afterSetUp(self):
+    layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
         from zope.component import getUtility
         from Products.PortalTransforms.interfaces import IPortalTransformsTool
         self.transforms = getUtility(IPortalTransformsTool)
@@ -23,8 +30,10 @@ def test_instantiate_plone_outputfilters_html_to_html_transform(self):
 
     def test_transform_policy_installed(self):
         policies = self.transforms.listPolicies()
-        policies = [mimetype for (mimetype, required) in policies
-                             if mimetype == "text/x-html-safe"]
+        policies = [
+            mimetype for (mimetype, required) in policies
+            if mimetype == "text/x-html-safe"
+        ]
         self.assertEqual(1, len(policies))
 
     def test_uninstallation(self):
@@ -33,8 +42,10 @@ def test_uninstallation(self):
         uninstall_mimetype_and_transforms(self.portal)
 
         policies = self.transforms.listPolicies()
-        policies = [mimetype for (mimetype, required) in policies
-                             if mimetype == "text/x-html-safe"]
+        policies = [
+            mimetype for (mimetype, required) in policies
+            if mimetype == "text/x-html-safe"
+        ]
         self.assertEqual(0, len(policies))
 
         # make sure it doesn't break if trying to uninstall again
diff --git a/setup.py b/setup.py
index bdfcb86..1fec2f2 100644
--- a/setup.py
+++ b/setup.py
@@ -13,9 +13,11 @@
       # Get more strings from
       # http://pypi.python.org/pypi?%3Aaction=list_classifiers
       classifiers=[
-        "Framework :: Plone",
-        "Programming Language :: Python",
-        ],
+          "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
+          "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
+      ],
       keywords='plone transform filter uid caption',
       author='David Glick, Plone Foundation',
       author_email='davidglick@groundwire.org',
@@ -33,7 +35,10 @@
           'Products.PortalTransforms',
       ],
       extras_require={
-          'test': ['Products.PloneTestCase'],
+          'test': [
+              'plone.app.contenttypes',
+              'plone.app.testing',
+          ],
       },
       entry_points="""
       # -*- Entry points: -*-


