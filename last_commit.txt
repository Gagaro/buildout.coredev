Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-13T13:12:32+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/09223984d2ed2a886c94bcbe657f2a52ae5ecaad

RST: get rid of duplicate Introduction heading.

You get a warning when releasing to PyPI.

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index 36e424d..1a20166 100644
--- a/README.rst
+++ b/README.rst
@@ -1,7 +1,3 @@
-============
-Introduction
-============
-
 This package offers a simple way to develop and deploy Plone themes using
 the Diazo theming engine. If you are not familiar with Diazo, check out the
 `Diazo documentation <http://diazo.org>`_.


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-13T13:12:36+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/9f5be1253de86651dad52a7634197c7679555224

RST: fix header underlines.

Files changed:
M src/plone/app/theming/browser/resources/userguide.rst

diff --git a/src/plone/app/theming/browser/resources/userguide.rst b/src/plone/app/theming/browser/resources/userguide.rst
index dff0a3f..d36ac36 100644
--- a/src/plone/app/theming/browser/resources/userguide.rst
+++ b/src/plone/app/theming/browser/resources/userguide.rst
@@ -1,5 +1,5 @@
 plone.app.theming manual
-==========================
+========================
 
 This guide provides an overview of Diazo theming in Plone versions 4.3 and higher.
 
@@ -7,7 +7,7 @@ This guide provides an overview of Diazo theming in Plone versions 4.3 and highe
     :local:
 
 Introduction
----------------
+------------
 
 In `Plone <http://plone.org>`_ versions 4.3 and higher you
 can edit your website theme through web browser in Plone's site setup control panel.


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-13T13:31:54+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/537d58e9cf905ae0cfd5587865c46dce1358b956

RST: reindent list in deploying and testing themes.

This was:

1. title

text

2. title 2

text 2

That resulted in warnings when uploading to PyPI:

warning: check: Enumerated list start value not ordinal-1: 2 (ordinal 2)

warning: check: Enumerated list start value not ordinal-1: 3 (ordinal 3)

warning: check: Enumerated list start value not ordinal-1: 4 (ordinal 4)

Now it is:

1. title

   text

2. title 2

   text 2

Files changed:
M src/plone/app/theming/browser/resources/userguide.rst

diff --git a/src/plone/app/theming/browser/resources/userguide.rst b/src/plone/app/theming/browser/resources/userguide.rst
index d36ac36..832f0bb 100644
--- a/src/plone/app/theming/browser/resources/userguide.rst
+++ b/src/plone/app/theming/browser/resources/userguide.rst
@@ -332,99 +332,107 @@ There are several ways to get the theme into Plone:
 
 1. On the filesystem
 
-If you used an installer or a standard "buildout" to set up your Plone site,
-you should have a directory called ``resources`` in the root of your Plone
-installation (this is created using the ``resources`` option to the buildout
-recipe ``plone.recipe.zope2instance``. See
-http://pypi.python.org/pypi/plone.recipe.zope2instance for more details.)
-
-You can find (or create) a ``theme`` directory inside this directory, which is
-used to contain themes. Each theme needs its own directory with a unique name.
-Create one (e.g. ``resources/theme/mytheme``) and put your HTML files and any
-references resources inside this directory. You can use subdirectories if you
-wish, but you are recommended to keep the basic theme HTML files at the top
-of the theme directory.
-
-You will also need a rules file called ``rules.xml`` inside this directory. If
-you haven't got one yet, start with an empty one::
-
-    <?xml version="1.0" encoding="UTF-8"?>
-    <rules
-        xmlns="http://namespaces.plone.org/diazo"
-        xmlns:css="http://namespaces.plone.org/diazo/css"
-        xmlns:xsl="http://www.w3.org/1999/XSL/Transform">`
-
-        <theme href="theme.html" />
-        <replace css:content-children="#content" css:theme-children="#main" />
-
-    </rules>
-
-Provided you are running Zope in debug mode (e.g. you start it up with
-``bin/instance fg``), changes to the theme and rules should take effect
-immediately. You can preview or enable the theme through the *Themes* control
-panel, and then iteratively modify the ``rules.xml`` file or the theme mockup
-as you wish.
+   If you used an installer or a standard "buildout" to set up your
+   Plone site, you should have a directory called ``resources`` in the
+   root of your Plone installation (this is created using the
+   ``resources`` option to the buildout recipe
+   ``plone.recipe.zope2instance``. See
+   http://pypi.python.org/pypi/plone.recipe.zope2instance for more
+   details.)
+
+   You can find (or create) a ``theme`` directory inside this
+   directory, which is used to contain themes. Each theme needs its
+   own directory with a unique name.  Create one
+   (e.g. ``resources/theme/mytheme``) and put your HTML files and any
+   references resources inside this directory. You can use
+   subdirectories if you wish, but you are recommended to keep the
+   basic theme HTML files at the top of the theme directory.
+
+   You will also need a rules file called ``rules.xml`` inside this
+   directory. If you haven't got one yet, start with an empty one::
+
+       <?xml version="1.0" encoding="UTF-8"?>
+       <rules
+           xmlns="http://namespaces.plone.org/diazo"
+           xmlns:css="http://namespaces.plone.org/diazo/css"
+           xmlns:xsl="http://www.w3.org/1999/XSL/Transform">`
+
+           <theme href="theme.html" />
+           <replace css:content-children="#content" css:theme-children="#main" />
+
+       </rules>
+
+   Provided you are running Zope in debug mode (e.g. you start it up
+   with ``bin/instance fg``), changes to the theme and rules should
+   take effect immediately. You can preview or enable the theme
+   through the *Themes* control panel, and then iteratively modify the
+   ``rules.xml`` file or the theme mockup as you wish.
 
 2. Through the web
 
-If you prefer (or do not have filesystem access), you can create themes entirely
-through the Plone control panel, either by duplicating an existing theme, or
-starting from scratch with a near-empty theme.
+   If you prefer (or do not have filesystem access), you can create
+   themes entirely through the Plone control panel, either by
+   duplicating an existing theme, or starting from scratch with a
+   near-empty theme.
 
-See the instructions on using the control panel above for more details.
+   See the instructions on using the control panel above for more
+   details.
 
-Once a theme has been created, you can modify it through the *Theming*
-control panel. See above for more details.
+   Once a theme has been created, you can modify it through the
+   *Theming* control panel. See above for more details.
 
 3. As a zip file
 
-Themes can be downloaded from Plone as Zip files, which can then be uploaded
-into other sites.
+   Themes can be downloaded from Plone as Zip files, which can then be
+   uploaded into other sites.
 
-See the instructions on using the control panel above for more details.
+   See the instructions on using the control panel above for more
+   details.
 
-In fact, you can create valid theme zip archives by compressing a theme
-directory on the filesystem using a standard compression tool such as *7-Zip* or
-*Winzip* (for Windows) or the built-in *Compress* action in the Mac OS X Finder.
-Just make sure you compress exactly one folder that contains all the theme files
-and the ``rules.xml`` file. (Do not compress the contents of the folder
-directly: when unpacked, the zip file should produce exactly one folder which
-in turn contains all the relevant files).
+   In fact, you can create valid theme zip archives by compressing a
+   theme directory on the filesystem using a standard compression tool
+   such as *7-Zip* or *Winzip* (for Windows) or the built-in
+   *Compress* action in the Mac OS X Finder.  Just make sure you
+   compress exactly one folder that contains all the theme files and
+   the ``rules.xml`` file. (Do not compress the contents of the folder
+   directly: when unpacked, the zip file should produce exactly one
+   folder which in turn contains all the relevant files).
 
 4. In a Python package (programmers only)
 
-If you are creating a Python package containing Plone customisations that you
-intend to install into your site, you can let it register a theme for
-installation into the site.
+   If you are creating a Python package containing Plone
+   customisations that you intend to install into your site, you can
+   let it register a theme for installation into the site.
 
-To do this, place a directory called e.g. ``theme`` at the top of the package,
-next to the Zope ``configure.zcml`` file, and add a ``<plone:static />``
-declaration to the ``configure.zcml`` file::
+   To do this, place a directory called e.g. ``theme`` at the top of
+   the package, next to the Zope ``configure.zcml`` file, and add a
+   ``<plone:static />`` declaration to the ``configure.zcml`` file::
 
-    <configure
-        xmlns:plone="http://namespaces.plone.org/plone"
-        xmlns="http://namespaces.zope.org/zope">
+       <configure
+           xmlns:plone="http://namespaces.plone.org/plone"
+           xmlns="http://namespaces.zope.org/zope">
 
-        ...
+           ...
 
-        <plone:static name="mytheme" directory="theme" type="theme" />
+           <plone:static name="mytheme" directory="theme" type="theme" />
 
-        ...
+           ...
 
-    </configure>
+       </configure>
 
-Notice the declaration of the ``plone`` namespace at the root ``<configure />``
-element. Place the theme files and the ``rules.xml`` file into the ``theme``
-directory.
+   Notice the declaration of the ``plone`` namespace at the root
+   ``<configure />`` element. Place the theme files and the
+   ``rules.xml`` file into the ``theme`` directory.
 
-If your package has a GenericSetup profile, you can automatically enable the
-theme upon installation of this profile by adding a ``theme.xml`` file in the
-``profiles/default`` directory, containing e.g.::
+   If your package has a GenericSetup profile, you can automatically
+   enable the theme upon installation of this profile by adding a
+   ``theme.xml`` file in the ``profiles/default`` directory,
+   containing e.g.::
 
-    <theme>
-        <name>mytheme</name>
-        <enabled>true</enabled>
-    </theme>
+       <theme>
+           <name>mytheme</name>
+           <enabled>true</enabled>
+       </theme>
 
 The manifest file
 ~~~~~~~~~~~~~~~~~


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-13T13:34:42+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/996678e884e25435396e919f9802864ac7a5c068

changelog entry

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index f298759..dfff853 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 1.2.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Minor ReStructuredText fixes for documentation.
+  [maurits]
 
 
 1.2.5 (2015-05-13)


