Repository: plone.folder


Branch: refs/heads/master
Date: 2015-07-27T14:40:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/87ad14bdec74f501b2281d1e69cdddc51d292d32

pep8 cleanup, less id builtin usage, depend on Products.CMFCore and remove fake cmf

Files changed:
M CHANGES.rst
M setup.py
M src/plone/__init__.py
M src/plone/folder/__init__.py
M src/plone/folder/default.py
M src/plone/folder/interfaces.py
M src/plone/folder/ordered.py
M src/plone/folder/tests/__init__.py
M src/plone/folder/tests/benchmarks.py
M src/plone/folder/tests/layer.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_ordersupport.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py
M src/plone/folder/tests/utils.py
M src/plone/folder/unordered.py
D src/plone/folder/cmf.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 13e0370..b56acff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,12 @@ Changelog
 1.0.7 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Depend on ``Products.CMFCore`` and remove fake-cmf, because this confuses
+  more than it helps to reduce complexcity.
+  [jensens]
+
+- Cleanup: PEP8 and do not use ``id`` built-int as identifier.
+  [jensens]
 
 
 1.0.6 (2015-05-11)
diff --git a/setup.py b/setup.py
index c0feb61..e1a6f71 100644
--- a/setup.py
+++ b/setup.py
@@ -2,43 +2,49 @@
 
 version = '1.0.7.dev0'
 
-setup(name='plone.folder',
-      version=version,
-      description='BTree-based folder implementation with order support',
-      long_description=(open("README.rst").read() + "\n" +
-                        open("CHANGES.rst").read()),
-      classifiers=[
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "Intended Audience :: Developers",
-          "Intended Audience :: System Administrators",
-          "Intended Audience :: Other Audience",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-          ],
-      keywords='folder btree order',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.folder',
-      license='GPL version 2',
-      packages=find_packages('src'),
-      package_dir={'': 'src'},
-      namespace_packages=['plone'],
-      include_package_data=True,
-      platforms='Any',
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'plone.memoize',
-          'zope.interface',
-          'zope.component',
-          'zope.annotation',
-          'zope.container',
-      ],
-      extras_require={'test': [
-          'profilehooks',
-          'Products.CMFCore',
-      ]},
-      )
+setup(
+    name='plone.folder',
+    version=version,
+    description='BTree-based folder implementation with order support',
+    long_description=(open("README.rst").read() + "\n" +
+                      open("CHANGES.rst").read()),
+    classifiers=[
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "Intended Audience :: Developers",
+        "Intended Audience :: System Administrators",
+        "Intended Audience :: Other Audience",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+        ],
+    keywords='folder btree order',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.folder',
+    license='GPL version 2',
+    packages=find_packages('src'),
+    package_dir={'': 'src'},
+    namespace_packages=['plone'],
+    include_package_data=True,
+    platforms='Any',
+    zip_safe=False,
+    install_requires=[
+        'plone.memoize',
+        'Products.BTreeFolder2',
+        'Products.CMFCore',
+        'Products.ZCatalog',
+        'setuptools',
+        'zope.annotation',
+        'zope.component',
+        'zope.container',
+        'zope.interface',
+        'Zope2',
+    ],
+    extras_require={
+        'test': [
+            'profilehooks',
+        ]
+    },
+)
diff --git a/src/plone/__init__.py b/src/plone/__init__.py
index 94ecf10..68c04af 100644
--- a/src/plone/__init__.py
+++ b/src/plone/__init__.py
@@ -1,7 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = locals()['__path__'] # make pyflakes happy...
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/src/plone/folder/__init__.py b/src/plone/folder/__init__.py
index 187664d..40a96af 100644
--- a/src/plone/folder/__init__.py
+++ b/src/plone/folder/__init__.py
@@ -1 +1 @@
-# the existance of __init__.py make this a module...
+# -*- coding: utf-8 -*-
diff --git a/src/plone/folder/cmf.py b/src/plone/folder/cmf.py
deleted file mode 100644
index c467246..0000000
--- a/src/plone/folder/cmf.py
+++ /dev/null
@@ -1,10 +0,0 @@
-try:
-    from Products.CMFCore.permissions import ModifyPortalContent
-    from Products.CMFCore.PortalFolder import PortalFolderBase
-    ModifyPortalContent, PortalFolderBase   # pyflakes is useful, but stupid!
-except ImportError:
-    # fake the required stuff if `CMFCore` isn't available...
-    ModifyPortalContent = 'Modify portal content'
-    class PortalFolderBase:
-        def __init__(self, id, title='', description=''):
-            pass
diff --git a/src/plone/folder/default.py b/src/plone/folder/default.py
index 15978c7..fe585d2 100644
--- a/src/plone/folder/default.py
+++ b/src/plone/folder/default.py
@@ -1,48 +1,51 @@
-from persistent.list import PersistentList
+# -*- coding: utf-8 -*-
 from BTrees.OIBTree import OIBTree
-
-from zope.interface import implements
-from zope.component import adapts
+from persistent.list import PersistentList
+from plone.folder.interfaces import IExplicitOrdering
+from plone.folder.interfaces import IOrderableFolder
 from zope.annotation.interfaces import IAnnotations
+from zope.component import adapter
 from zope.container.contained import notifyContainerModified
-
-from plone.folder.interfaces import IOrderableFolder
-from plone.folder.interfaces import IExplicitOrdering
+from zope.interface import implementer
 
 
+@implementer(IExplicitOrdering)
+@adapter(IOrderableFolder)
 class DefaultOrdering(object):
     """ This implementation uses annotations to store the order on the
         object, and supports explicit ordering. """
 
-    implements(IExplicitOrdering)
-    adapts(IOrderableFolder)
-
     ORDER_KEY = "plone.folder.ordered.order"
     POS_KEY = "plone.folder.ordered.pos"
 
     def __init__(self, context):
         self.context = context
 
-    def notifyAdded(self, id):
+    def notifyAdded(self, obj_id):
         """ see interfaces.py """
         order = self._order(True)
         pos = self._pos(True)
-        order.append(id)
-        pos[id] = len(order) - 1
+        order.append(obj_id)
+        pos[obj_id] = len(order) - 1
 
-    def notifyRemoved(self, id):
+    def notifyRemoved(self, obj_id):
         """ see interfaces.py """
         order = self._order()
         pos = self._pos()
-        idx = pos[id]
+        idx = pos[obj_id]
         del order[idx]
         # we now need to rebuild pos since the ids have shifted
         pos.clear()
-        for n, id in enumerate(order):
-            pos[id] = n
-
-    def moveObjectsByDelta(self, ids, delta, subset_ids=None,
-            suppress_events=False):
+        for count, obj_id in enumerate(order):
+            pos[obj_id] = count
+
+    def moveObjectsByDelta(
+        self,
+        ids,
+        delta,
+        subset_ids=None,
+        suppress_events=False
+    ):
         """ see interfaces.py """
         order = self._order()
         pos = self._pos()
@@ -57,31 +60,34 @@ def moveObjectsByDelta(self, ids, delta, subset_ids=None,
             ids = reversed(ids)
             subset_ids.reverse()
         counter = 0
-        for id in ids:
+        for obj_id in ids:
             try:
-                old_position = subset_ids.index(id)
+                old_position = subset_ids.index(obj_id)
             except ValueError:
                 continue
             new_position = max(old_position - abs(delta), min_position)
             if new_position == min_position:
                 min_position += 1
             if not old_position == new_position:
-                subset_ids.remove(id)
-                subset_ids.insert(new_position, id)
+                subset_ids.remove(obj_id)
+                subset_ids.insert(new_position, obj_id)
                 counter += 1
         if counter > 0:
             if delta > 0:
                 subset_ids.reverse()
             idx = 0
             for i in range(len(order)):
-                if order[i] in subset_ids:
-                    id = subset_ids[idx]
-                    try:
-                        order[i] = id
-                        pos[id] = i
-                        idx += 1
-                    except KeyError:
-                        raise ValueError('No object with id "%s" exists.' % id)
+                if order[i] not in subset_ids:
+                    continue
+                obj_id = subset_ids[idx]
+                try:
+                    order[i] = obj_id
+                    pos[obj_id] = i
+                    idx += 1
+                except KeyError:
+                    raise ValueError(
+                        'No object with id "{0:s}" exists.'.format(obj_id)
+                    )
         if not suppress_events:
             notifyContainerModified(self.context)
         return counter
@@ -102,12 +108,15 @@ def moveObjectsToBottom(self, ids, subset_ids=None):
         """ see interfaces.py """
         return self.moveObjectsByDelta(ids, len(self._order()), subset_ids)
 
-    def moveObjectToPosition(self, id, position, suppress_events=False):
+    def moveObjectToPosition(self, obj_id, position, suppress_events=False):
         """ see interfaces.py """
-        delta = position - self.getObjectPosition(id)
+        delta = position - self.getObjectPosition(obj_id)
         if delta:
-            return self.moveObjectsByDelta(id, delta,
-                suppress_events=suppress_events)
+            return self.moveObjectsByDelta(
+                obj_id,
+                delta,
+                suppress_events=suppress_events
+            )
 
     def orderObjects(self, key=None, reverse=None):
         """ see interfaces.py """
@@ -120,24 +129,23 @@ def orderObjects(self, key=None, reverse=None):
             # Simply reverse the current ordering.
             order.reverse()
         else:
-            def keyfn(id):
-                attr = getattr(self.context._getOb(id), key)
+            def keyfn(obj_id):
+                attr = getattr(self.context._getOb(obj_id), key)
                 if callable(attr):
                     return attr()
                 return attr
             order.sort(None, keyfn, bool(reverse))
 
-        for n, id in enumerate(order):
-            pos[id] = n
+        for n, obj_id in enumerate(order):
+            pos[obj_id] = n
         return -1
 
-    def getObjectPosition(self, id):
+    def getObjectPosition(self, obj_id):
         """ see interfaces.py """
         pos = self._pos()
-        if id in pos:
-            return pos[id]
-        else:
-            raise ValueError('No object with id "%s" exists.' % id)
+        if obj_id in pos:
+            return pos[obj_id]
+        raise ValueError('No object with id "{0:s}" exists.'.format(obj_id))
 
     def idsInOrder(self):
         """ see interfaces.py """
@@ -152,12 +160,10 @@ def _order(self, create=False):
         annotations = IAnnotations(self.context)
         if create:
             return annotations.setdefault(self.ORDER_KEY, PersistentList())
-        else:
-            return annotations.get(self.ORDER_KEY, [])
+        return annotations.get(self.ORDER_KEY, [])
 
     def _pos(self, create=False):
         annotations = IAnnotations(self.context)
         if create:
             return annotations.setdefault(self.POS_KEY, OIBTree())
-        else:
-            return annotations.get(self.POS_KEY, {})
+        return annotations.get(self.POS_KEY, {})
diff --git a/src/plone/folder/interfaces.py b/src/plone/folder/interfaces.py
index 7f9aa18..4f5fef4 100644
--- a/src/plone/folder/interfaces.py
+++ b/src/plone/folder/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
@@ -31,14 +32,14 @@ class IOrdering(Interface):
         optionally provide IExplicitOrdering, defined below. This is
         used to support explicit ordering, e.g. through a UI. """
 
-    def notifyAdded(id):
+    def notifyAdded(obj_id):
         """ Inform the ordering implementation that an item was added """
 
-    def notifyRemoved(id):
+    def notifyRemoved(obj_id):
         """ Inform the ordering implementation that an item was removed """
 
-    def getObjectPosition(id):
-        """ Get the position of the given id """
+    def getObjectPosition(obj_id):
+        """ Get the position of the given object id """
 
     def idsInOrder():
         """ Return all object ids, in the correct order """
@@ -67,7 +68,7 @@ def moveObjectsToTop(ids, subset_ids=None):
     def moveObjectsToBottom(ids, subset_ids=None):
         """ Move specified sub-objects to bottom of container. """
 
-    def moveObjectToPosition(id, position, suppress_events=False):
+    def moveObjectToPosition(obj_id, position, suppress_events=False):
         """ Move specified object to absolute position. """
 
     def orderObjects(key, reverse=None):
diff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py
index 6a26528..50b2351 100644
--- a/src/plone/folder/ordered.py
+++ b/src/plone/folder/ordered.py
@@ -1,29 +1,28 @@
-from zope.component import getAdapter, queryAdapter
-from zope.interface import implements
-from zope.annotation.interfaces import IAttributeAnnotatable
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl.Permissions import access_contents_information
 from AccessControl.Permissions import manage_properties
 from OFS.interfaces import IOrderedContainer
-from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base, _marker
-from Products.ZCatalog.Lazy import LazyMap
-
-from plone.folder.cmf import PortalFolderBase
-from plone.folder.cmf import ModifyPortalContent
-
+from plone.folder.interfaces import IExplicitOrdering
 from plone.folder.interfaces import IOrderableFolder
 from plone.folder.interfaces import IOrdering
-from plone.folder.interfaces import IExplicitOrdering
-
+from Products.BTreeFolder2.BTreeFolder2 import _marker
+from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.PortalFolder import PortalFolderBase
+from Products.ZCatalog.Lazy import LazyMap
 from webdav.NullResource import NullResource
+from zope.annotation.interfaces import IAttributeAnnotatable
+from zope.component import getAdapter
+from zope.component import queryAdapter
+from zope.interface import implementer
 
 
+@implementer(IOrderedContainer, IOrderableFolder, IAttributeAnnotatable)
 class OrderedBTreeFolderBase(BTreeFolder2Base):
     """ BTree folder base class with ordering support. The ordering
         is done by a named adapter (to IOrdering), which makes the policy
         changeable. """
-    implements(IOrderedContainer, IOrderableFolder, IAttributeAnnotatable)
 
     _ordering = u''         # name of adapter defining ordering policy
 
@@ -33,7 +32,7 @@ def __nonzero__(self):
         """ a folder is something, even if it's empty """
         return True
 
-    security.declareProtected(access_contents_information, 'getOrdering')
+    @security.protected(access_contents_information)
     def getOrdering(self):
         """ return the currently active ordering adapter for this folder """
         adapter = queryAdapter(self, IOrdering, name=self._ordering)
@@ -41,7 +40,7 @@ def getOrdering(self):
             adapter = getAdapter(self, IOrdering)
         return adapter
 
-    security.declareProtected(manage_properties, 'setOrdering')
+    @security.protected(manage_properties)
     def setOrdering(self, ordering=u''):
         """ (re)set ordering adapter to be used for this folder """
         if ordering:
@@ -96,12 +95,12 @@ def objectItems(self, spec=None):
 
     # IOrderSupport - mostly deprecated, use the adapter directly instead
 
-    security.declareProtected(access_contents_information, 'getObjectPosition')
+    @security.protected(access_contents_information)
     def getObjectPosition(self, id):
         """ Get the position of an object by its id. """
         return self.getOrdering().getObjectPosition(id)
 
-    security.declareProtected(manage_properties, 'moveObjectsUp')
+    @security.protected(manage_properties)
     def moveObjectsUp(self, ids, delta=1, subset_ids=None):
         """ Move specified sub-objects up by delta in container. """
         ordering = self.getOrdering()
@@ -110,7 +109,7 @@ def moveObjectsUp(self, ids, delta=1, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsDown')
+    @security.protected(manage_properties)
     def moveObjectsDown(self, ids, delta=1, subset_ids=None):
         """ Move specified sub-objects down by delta in container. """
         ordering = self.getOrdering()
@@ -119,7 +118,7 @@ def moveObjectsDown(self, ids, delta=1, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsToTop')
+    @security.protected(manage_properties)
     def moveObjectsToTop(self, ids, subset_ids=None):
         """ Move specified sub-objects to top of container. """
         ordering = self.getOrdering()
@@ -128,7 +127,7 @@ def moveObjectsToTop(self, ids, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsToBottom')
+    @security.protected(manage_properties)
     def moveObjectsToBottom(self, ids, subset_ids=None):
         """ Move specified sub-objects to bottom of container. """
         ordering = self.getOrdering()
@@ -137,7 +136,7 @@ def moveObjectsToBottom(self, ids, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(ModifyPortalContent, 'moveObject')
+    @security.protected(ModifyPortalContent)
     def moveObject(self, id, position):
         """ Move specified object to absolute position. """
         ordering = self.getOrdering()
@@ -146,7 +145,7 @@ def moveObject(self, id, position):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectToPosition')
+    @security.protected(manage_properties)
     def moveObjectToPosition(self, id, position, suppress_events=False):
         """ Move specified object to absolute position. """
         ordering = self.getOrdering()
@@ -155,18 +154,23 @@ def moveObjectToPosition(self, id, position, suppress_events=False):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsByDelta')
-    def moveObjectsByDelta(self, ids, delta, subset_ids=None,
-            suppress_events=False):
+    @security.protected(manage_properties)
+    def moveObjectsByDelta(
+        self, ids, delta, subset_ids=None, suppress_events=False
+    ):
         """ Move specified sub-objects by delta. """
         ordering = self.getOrdering()
         if IExplicitOrdering.providedBy(ordering):
-            return ordering.moveObjectsByDelta(ids, delta, subset_ids,
-                suppress_events)
+            return ordering.moveObjectsByDelta(
+                ids,
+                delta,
+                subset_ids,
+                suppress_events
+            )
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'orderObjects')
+    @security.protected(manage_properties)
     def orderObjects(self, key=None, reverse=None):
         """ Order sub-objects by key and direction. """
         ordering = self.getOrdering()
@@ -183,8 +187,11 @@ def iterkeys(self):
     def manage_renameObject(self, id, new_id, REQUEST=None):
         """ Rename a particular sub-object without changing its position. """
         old_position = self.getObjectPosition(id)
-        result = super(OrderedBTreeFolderBase, self).manage_renameObject(id,
-            new_id, REQUEST)
+        result = super(OrderedBTreeFolderBase, self).manage_renameObject(
+            id,
+            new_id,
+            REQUEST
+        )
         if old_position is None:
             return result
         self.moveObjectToPosition(new_id, old_position, suppress_events=True)
@@ -214,10 +221,8 @@ def __getitem__(self, key):
             request = self.REQUEST
             method = request.get('REQUEST_METHOD', 'GET')
             if (getattr(request, 'maybe_webdav_client', False) and
-                not method in ('GET', 'POST')):
-
+               method not in ('GET', 'POST')):
                 return NullResource(self, key, request).__of__(self)
-
         raise KeyError(key)
 
     __iter__ = iterkeys
diff --git a/src/plone/folder/tests/__init__.py b/src/plone/folder/tests/__init__.py
index 187664d..40a96af 100644
--- a/src/plone/folder/tests/__init__.py
+++ b/src/plone/folder/tests/__init__.py
@@ -1 +1 @@
-# the existance of __init__.py make this a module...
+# -*- coding: utf-8 -*-
diff --git a/src/plone/folder/tests/benchmarks.py b/src/plone/folder/tests/benchmarks.py
index 4e98a5e..1f0cbfd 100644
--- a/src/plone/folder/tests/benchmarks.py
+++ b/src/plone/folder/tests/benchmarks.py
@@ -1,14 +1,15 @@
+# -*- coding: utf-8 -*-
 # simple benchmarking tests related to plip191
 # to run individual tests using:
 # $ bin/instance test -s plone.folder --tests-pattern=benchmarks -t <testName>
 # where <testName> is something like "testDeleteSpeed"
 
-from unittest import TestCase, defaultTestLoader
-from profilehooks import timecall
-
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
+from profilehooks import timecall
+from unittest import defaultTestLoader
+from unittest import TestCase
 
 
 class BenchmarkTests(TestCase):
@@ -21,6 +22,7 @@ def testDeleteSpeed(self):
             id = 'foo-%s' % idx
             folder[id] = DummyObject(id, 'bar')
         last = reversed(folder.keys()[-100:])
+
         @timecall
         def delete():
             for id in last:
diff --git a/src/plone/folder/tests/layer.py b/src/plone/folder/tests/layer.py
index 0c4d5bc..564d348 100644
--- a/src/plone/folder/tests/layer.py
+++ b/src/plone/folder/tests/layer.py
@@ -2,7 +2,7 @@
 from Products.Five.zcml import load_config
 
 
-class PloneFolderLayer:
+class PloneFolderLayer(object):
 
     @classmethod
     def setUp(cls):
diff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py
index ced99b2..b487ab8 100644
--- a/src/plone/folder/tests/test_dict_interface.py
+++ b/src/plone/folder/tests/test_dict_interface.py
@@ -1,9 +1,10 @@
-from unittest import TestCase, defaultTestLoader
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
+from unittest import defaultTestLoader
+from unittest import TestCase
 
 
 class DictInterfaceTests(TestCase):
@@ -53,8 +54,8 @@ def test_len_one_child(self):
     def test_to_verify_ticket_9120(self):
         folder = OrderedBTreeFolderBase("f1")
         folder['ob1'] = ob1 = DummyObject('ob1')
-        folder['ob2'] = ob2 = DummyObject('ob2')
-        folder['ob3'] = ob3 = DummyObject('ob3')
+        folder['ob2'] = DummyObject('ob2')
+        folder['ob3'] = DummyObject('ob3')
         folder['ob4'] = ob4 = DummyObject('ob4')
         del folder['ob2']
         del folder['ob3']
diff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py
index 75f9518..af2a5af 100644
--- a/src/plone/folder/tests/test_integration.py
+++ b/src/plone/folder/tests/test_integration.py
@@ -1,11 +1,12 @@
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
 from Acquisition import Implicit
-from transaction import savepoint
-from Testing.ZopeTestCase import ZopeTestCase
-from zope.interface import implements
 from plone.folder.interfaces import IOrderable
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
+from StringIO import StringIO
+from Testing.ZopeTestCase import ZopeTestCase
+from transaction import savepoint
+from zope.interface import implements
 
 
 class DummyFolder(OrderedBTreeFolderBase, Implicit):
diff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py
index 5817406..d421598 100644
--- a/src/plone/folder/tests/test_ordering_adapters.py
+++ b/src/plone/folder/tests/test_ordering_adapters.py
@@ -1,9 +1,11 @@
-from unittest import TestCase, defaultTestLoader
-from zope.component import ComponentLookupError
-from plone.folder.ordered import OrderedBTreeFolderBase
+# -*- coding: utf-8 -*-
 from plone.folder.default import DefaultOrdering
-from plone.folder.unordered import UnorderedOrdering
+from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
+from plone.folder.unordered import UnorderedOrdering
+from unittest import defaultTestLoader
+from unittest import TestCase
+from zope.component import ComponentLookupError
 
 
 class OrderingAdapterTests(TestCase):
diff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py
index 1c764a9..9a57daf 100644
--- a/src/plone/folder/tests/test_ordersupport.py
+++ b/src/plone/folder/tests/test_ordersupport.py
@@ -1,9 +1,10 @@
-from unittest import TestCase, defaultTestLoader
-
+# -*- coding: utf-8 -*-
 from plone.folder.interfaces import IOrdering
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
+from unittest import defaultTestLoader
+from unittest import TestCase
 
 
 class OFSOrderSupportTests(TestCase):
@@ -29,21 +30,39 @@ def test_objectIdsOrdered(self):
 
     def test_objectValuesOrdered(self):
         folder = self.create()
-        self.assertEquals(["o1", "o2", "o3", "o4"], [x.id for x in folder.objectValues()])
+        self.assertEquals(
+            ["o1", "o2", "o3", "o4"],
+            [x.id for x in folder.objectValues()]
+        )
         folder.moveObjectsUp(("o2",), 1)
-        self.assertEquals(["o2", "o1", "o3", "o4"], [x.id for x in folder.objectValues()])
+        self.assertEquals(
+            ["o2", "o1", "o3", "o4"],
+            [x.id for x in folder.objectValues()]
+        )
 
     def test_objectItemsOrdered(self):
         folder = self.create()
-        self.assertEquals(["o1", "o2", "o3", "o4"], [x for x, y in folder.objectItems()])
+        self.assertEquals(
+            ["o1", "o2", "o3", "o4"],
+            [x for x, y in folder.objectItems()]
+        )
         folder.moveObjectsUp(("o2",), 1)
-        self.assertEquals(["o2", "o1", "o3", "o4"], [x for x, y in folder.objectItems()])
+        self.assertEquals(
+            ["o2", "o1", "o3", "o4"],
+            [x for x, y in folder.objectItems()]
+        )
 
     def test_iterkeys(self):
         folder = self.create()
-        self.assertEquals(["o1", "o2", "o3", "o4"], [x for x in folder.iterkeys()])
+        self.assertEquals(
+            ["o1", "o2", "o3", "o4"],
+            [x for x in folder.iterkeys()]
+        )
         folder.moveObjectsUp(("o2",), 1)
-        self.assertEquals(["o2", "o1", "o3", "o4"], [x for x in folder.iterkeys()])
+        self.assertEquals(
+            ["o2", "o1", "o3", "o4"],
+            [x for x in folder.iterkeys()]
+        )
 
     def test_iter(self):
         folder = self.create()
@@ -297,13 +316,13 @@ def testSubsetIds(self):
     def testSkipObjectsNotInSubsetIds(self):
         self.folder.moveObjectsByDelta(['baz'], -1, ['foo', 'baz'])
         self.assertEqual(self.folder.getObjectPosition('baz'), 0)
-        self.assertEqual(self.folder.getObjectPosition('bar'), 1) # Did not move
+        self.assertEqual(self.folder.getObjectPosition('bar'), 1)  # no move
         self.assertEqual(self.folder.getObjectPosition('foo'), 2)
 
     def testIgnoreNonObjects(self):
         # Fix for (http://dev.plone.org/plone/ticket/3959) non
         # contentish objects cause errors, we should just ignore them
-        self.folder.moveObjectsByDelta(['bar','blah'], -1)
+        self.folder.moveObjectsByDelta(['bar', 'blah'], -1)
         self.assertEqual(self.folder.getObjectPosition('bar'), 0)
         self.assertEqual(self.folder.getObjectPosition('foo'), 1)
         self.assertEqual(self.folder.getObjectPosition('baz'), 2)
diff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py
index 6a2d037..7e334bf 100644
--- a/src/plone/folder/tests/test_partialordering.py
+++ b/src/plone/folder/tests/test_partialordering.py
@@ -35,28 +35,44 @@ def testAdapter(self):
 
     def testNotifyAdded(self):
         container, ordering = self.create()
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o3', 'o4'] + self.unordered)
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o3', 'o4'] + self.unordered
+        )
         container['o5'] = Orderable('o5')
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o3', 'o4', 'o5'] + self.unordered)
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4', 'o5', 'c1', 'c2', 'c3']))
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o3', 'o4', 'o5'] + self.unordered
+        )
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4', 'o5', 'c1', 'c2', 'c3'])
+        )
 
     def testNotifyRemoved(self):
         container, ordering = self.create()
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o3', 'o4'] + self.unordered)
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o3', 'o4'] + self.unordered
+        )
         container._delOb('o3')
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o4'] + self.unordered)
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o4', 'c1', 'c2', 'c3']))
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o4'] + self.unordered
+        )
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o4', 'c1', 'c2', 'c3'])
+        )
         container._delOb('o1')
-        self.assertEqual(ordering.idsInOrder(),
-            ['o2', 'o4'] + self.unordered)
-        self.assertEqual(set(container.objectIds()),
-            set(['o2', 'o4', 'c1', 'c2', 'c3']))
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o2', 'o4'] + self.unordered
+        )
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o2', 'o4', 'c1', 'c2', 'c3'])
+        )
 
     def runTableTests(self, action, tests):
         for args, order, rval in tests:
@@ -146,7 +162,7 @@ def testMoveObjectToPosition(self):
         self.runTableTests('moveObjectToPosition', (
             (('o2', 2), ['o1', 'o3', 'o2', 'o4'], 1),
             (('o4', 2), ['o1', 'o2', 'o4', 'o3'], 1),
-            (('c1', 2), ['o1', 'o2', 'o3', 'o4'], None),    # existent, but non-orderable
+            (('c1', 2), ['o1', 'o2', 'o3', 'o4'], None),  # existent, but non-orderable
             (('n2', 2), ['o1', 'o2', 'o3', 'o4'], ValueError),
         ))
 
@@ -168,7 +184,7 @@ def testGetObjectPosition(self):
             (('o2',), ['o1', 'o2', 'o3', 'o4'], 1),
             (('o4',), ['o1', 'o2', 'o3', 'o4'], 3),
             (('n2',), ['o1', 'o2', 'o3', 'o4'], ValueError),
-            (('c2',), ['o1', 'o2', 'o3', 'o4'], None),      # existent, but non-orderable
+            (('c2',), ['o1', 'o2', 'o3', 'o4'], None),  # existent, but non-orderable
         ))
 
 
diff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py
index 7ccea46..555ea71 100644
--- a/src/plone/folder/tests/test_unorderedordering.py
+++ b/src/plone/folder/tests/test_unorderedordering.py
@@ -26,19 +26,27 @@ def testAdapter(self):
 
     def testNotifyAdded(self):
         container = self.create()
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4'])
+        )
         container._setOb('o5', DummyObject('o5', 'mt1'))
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4', 'o5']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4', 'o5'])
+        )
 
     def testNotifyRemoved(self):
         container = self.create()
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4'])
+        )
         container._delOb('o3')
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o4']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o4'])
+        )
 
     def testGetObjectPosition(self):
         container = self.create()
diff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py
index ce828e7..c3135fc 100644
--- a/src/plone/folder/tests/test_webdav.py
+++ b/src/plone/folder/tests/test_webdav.py
@@ -1,17 +1,19 @@
-from unittest import TestCase, defaultTestLoader
-from webdav.NullResource import NullResource
-
+# -*- coding: utf-8 -*-
+from Acquisition import Explicit
 from plone.folder.ordered import CMFOrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
-
-from Acquisition import Explicit
+from unittest import defaultTestLoader
+from unittest import TestCase
+from webdav.NullResource import NullResource
 from zope.publisher.browser import TestRequest
 
+
 class TestRequestContainer(Explicit):
 
     REQUEST = TestRequest()
 
+
 class WebDAVTests(TestCase):
     """ tests regarding support for WebDAV NullResources """
 
@@ -47,5 +49,6 @@ def test_getitem_dav_request(self):
         self.assertEquals(folder['foo'], foo)
         self.failUnless(isinstance(folder['bar'], NullResource))
 
+
 def test_suite():
     return defaultTestLoader.loadTestsFromName(__name__)
diff --git a/src/plone/folder/tests/utils.py b/src/plone/folder/tests/utils.py
index 1249d8a..5c2015b 100644
--- a/src/plone/folder/tests/utils.py
+++ b/src/plone/folder/tests/utils.py
@@ -1,5 +1,6 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from plone.folder.interfaces import IOrderable
+from zope.interface import implementer
 
 
 class DummyObject(object):
@@ -18,9 +19,9 @@ def dummy_method(self):
         return self.id
 
 
+@implementer(IOrderable)
 class Orderable(DummyObject):
     """ orderable mock object """
-    implements(IOrderable)
 
 
 class Chaoticle(DummyObject):
diff --git a/src/plone/folder/unordered.py b/src/plone/folder/unordered.py
index c825e11..14d9ae8 100644
--- a/src/plone/folder/unordered.py
+++ b/src/plone/folder/unordered.py
@@ -1,25 +1,27 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-from zope.interface import implements
-from zope.component import adapts
-from plone.folder.interfaces import IOrdering, IOrderableFolder
+from plone.folder.interfaces import IOrderableFolder
+from plone.folder.interfaces import IOrdering
+from zope.component import adapter
+from zope.interface import implementer
 
 
+@implementer(IOrdering)
+@adapter(IOrderableFolder)
 class UnorderedOrdering(object):
     """ This implementation provides no ordering. """
-    implements(IOrdering)
-    adapts(IOrderableFolder)
 
     def __init__(self, context):
         self.context = context
 
-    def notifyAdded(self, id):
+    def notifyAdded(self, obj_id):
         pass
 
-    def notifyRemoved(self, id):
+    def notifyRemoved(self, obj_id):
         pass
 
     def idsInOrder(self):
         return aq_base(self.context).objectIds(ordered=False)
 
-    def getObjectPosition(self, id):
+    def getObjectPosition(self, obj_id):
         return None


Repository: plone.folder


Branch: refs/heads/master
Date: 2015-07-27T17:11:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/2c7d4b482664bde705481c3f073d48bad07adda6

doc style for README, add note about sources

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index a70c017..c2a3ccc 100644
--- a/README.rst
+++ b/README.rst
@@ -4,13 +4,12 @@ plone.folder
 Overview
 --------
 
-This package provides a base class for folderish content types based
-on `B-trees`_, a.k.a. "large folders" in Plone_.  Storing content in
-such folders provides significant `performance benefits`_ over regular
-folders.  However, "large folders" do not support explicit ordering of
-their contents out-of-the box.  That is, you cannot manually specify the
-order of items within the folder, you can only sort things according to
-a given criteria after fetching items from the folder.
+This package provides a base class for folderish content types based on `B-trees`_,
+a.k.a. "large folders" in Plone_.
+Storing content in such folders provides significant `performance benefits`_ over regular folders.
+However, "large folders" do not support explicit ordering of their contents out-of-the box.
+That is, you cannot manually specify the order of items within the folder,
+you can only sort things according to a given criteria after fetching items from the folder.
 
   .. _`B-tree`: http://en.wikipedia.org/wiki/B-tree
   .. _`B-trees`: http://en.wikipedia.org/wiki/B-tree
@@ -18,32 +17,33 @@ a given criteria after fetching items from the folder.
   .. _`performance benefits`: http://plone.org/products/plone/roadmap/191
   .. |---| unicode:: U+2014  .. em dash
 
-Many times, though, it is desirable to be able to explicitly order
-a folder's content, for example for items that are related to site
-navigation.  Sorting alphabetically often doesn't make sense here.
-
-To compensate ``plone.folder`` provides ordering support for `B-tree`_
-folders via the above mentioned base class, which can make use of an
-adapter to store the actual order information.  It also comes with two
-sample adapter implementations:
-
-  * A default adapter handling order information for all objects
-    contained in a folder.  This adapter can be used to build fully
-    backwards-compatible drop-in replacements for folderish content.
-    In other words, when using this adapter `B-tree`_-based folders should
-    behave just like the "regular" folder implementation, but provide some
-    of the performance benefits at the same time.
-
-  * An alternative adapter implementation that is targeted towards
-    sites with only a relatively small percentage of content for which
-    (explicit) order matters.  It'll only manage order information for
-    certain content types (via a marker interface).
-
-The latter allows to not having to separate such content from
-"non-orderable" content.  Up to now many large sites ended up storing
-"orderable" items |---| for example everything related to navigation
-and typically only a few |---| in regular folders and the bulk of the
-content in "large" folders, most of the time solely for performance
-reasons.  This adapter will hopefully help avoid having to make this
-distinction in the future and still provide the better performance
-characteristics of `B-tree`_ folders.
+Many times, though, it is desirable to be able to explicitly order a folder's content,
+for example for items that are related to site navigation.
+Sorting alphabetically often doesn't make sense here.
+
+To compensate ``plone.folder`` provides ordering support for `B-tree`_ folders via the above mentioned base class,
+which can make use of an adapter to store the actual order information.
+It also comes with two sample adapter implementations:
+
+* A default adapter handling order information for all objects contained in a folder.
+  This adapter can be used to build fully backwards-compatible drop-in replacements for folderish content.
+  In other words, when using this adapter `B-tree`_-based folders should behave just like the "regular" folder implementation,
+  but provide some of the performance benefits at the same time.
+
+* An alternative adapter implementation that is targeted towards sites with only a relatively small percentage of content for which (explicit) order matters.
+  It'll only manage order information for certain content types (via a marker interface).
+
+The latter allows to not having to separate such content from "non-orderable" content.
+Up to now many large sites ended up storing "orderable" items |---|
+for example everything related to navigation and typically only a few |---|
+in regular folders and the bulk of the content in "large" folders,
+most of the time solely for performance reasons.
+This adapter will hopefully help avoid having to make this distinction in the future
+and still provide the better performance characteristics of `B-tree`_ folders.
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.folder>`_.


Repository: plone.folder


Branch: refs/heads/master
Date: 2015-07-27T17:20:28+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/08cd5df71db55f64b3d2a6437bd530ec122f36b0

typo

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index b56acff..311dfa0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -9,7 +9,7 @@ Changelog
   more than it helps to reduce complexcity.
   [jensens]
 
-- Cleanup: PEP8 and do not use ``id`` built-int as identifier.
+- Cleanup: PEP8 and do not use ``id`` built-in as identifier.
   [jensens]
 
 


Repository: plone.folder


Branch: refs/heads/master
Date: 2015-07-27T19:04:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/b6a7aad6d84174d029c2cf9a586f67e7d30e30e7

Merge pull request #2 from plone/jensens-pep8-cleanup

pep8 cleanup, less id builtin usage, depend on Products.CMFCore

Files changed:
M CHANGES.rst
M README.rst
M setup.py
M src/plone/__init__.py
M src/plone/folder/__init__.py
M src/plone/folder/default.py
M src/plone/folder/interfaces.py
M src/plone/folder/ordered.py
M src/plone/folder/tests/__init__.py
M src/plone/folder/tests/benchmarks.py
M src/plone/folder/tests/layer.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_ordersupport.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py
M src/plone/folder/tests/utils.py
M src/plone/folder/unordered.py
D src/plone/folder/cmf.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 13e0370..311dfa0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,12 @@ Changelog
 1.0.7 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Depend on ``Products.CMFCore`` and remove fake-cmf, because this confuses
+  more than it helps to reduce complexcity.
+  [jensens]
+
+- Cleanup: PEP8 and do not use ``id`` built-in as identifier.
+  [jensens]
 
 
 1.0.6 (2015-05-11)
diff --git a/README.rst b/README.rst
index a70c017..c2a3ccc 100644
--- a/README.rst
+++ b/README.rst
@@ -4,13 +4,12 @@ plone.folder
 Overview
 --------
 
-This package provides a base class for folderish content types based
-on `B-trees`_, a.k.a. "large folders" in Plone_.  Storing content in
-such folders provides significant `performance benefits`_ over regular
-folders.  However, "large folders" do not support explicit ordering of
-their contents out-of-the box.  That is, you cannot manually specify the
-order of items within the folder, you can only sort things according to
-a given criteria after fetching items from the folder.
+This package provides a base class for folderish content types based on `B-trees`_,
+a.k.a. "large folders" in Plone_.
+Storing content in such folders provides significant `performance benefits`_ over regular folders.
+However, "large folders" do not support explicit ordering of their contents out-of-the box.
+That is, you cannot manually specify the order of items within the folder,
+you can only sort things according to a given criteria after fetching items from the folder.
 
   .. _`B-tree`: http://en.wikipedia.org/wiki/B-tree
   .. _`B-trees`: http://en.wikipedia.org/wiki/B-tree
@@ -18,32 +17,33 @@ a given criteria after fetching items from the folder.
   .. _`performance benefits`: http://plone.org/products/plone/roadmap/191
   .. |---| unicode:: U+2014  .. em dash
 
-Many times, though, it is desirable to be able to explicitly order
-a folder's content, for example for items that are related to site
-navigation.  Sorting alphabetically often doesn't make sense here.
-
-To compensate ``plone.folder`` provides ordering support for `B-tree`_
-folders via the above mentioned base class, which can make use of an
-adapter to store the actual order information.  It also comes with two
-sample adapter implementations:
-
-  * A default adapter handling order information for all objects
-    contained in a folder.  This adapter can be used to build fully
-    backwards-compatible drop-in replacements for folderish content.
-    In other words, when using this adapter `B-tree`_-based folders should
-    behave just like the "regular" folder implementation, but provide some
-    of the performance benefits at the same time.
-
-  * An alternative adapter implementation that is targeted towards
-    sites with only a relatively small percentage of content for which
-    (explicit) order matters.  It'll only manage order information for
-    certain content types (via a marker interface).
-
-The latter allows to not having to separate such content from
-"non-orderable" content.  Up to now many large sites ended up storing
-"orderable" items |---| for example everything related to navigation
-and typically only a few |---| in regular folders and the bulk of the
-content in "large" folders, most of the time solely for performance
-reasons.  This adapter will hopefully help avoid having to make this
-distinction in the future and still provide the better performance
-characteristics of `B-tree`_ folders.
+Many times, though, it is desirable to be able to explicitly order a folder's content,
+for example for items that are related to site navigation.
+Sorting alphabetically often doesn't make sense here.
+
+To compensate ``plone.folder`` provides ordering support for `B-tree`_ folders via the above mentioned base class,
+which can make use of an adapter to store the actual order information.
+It also comes with two sample adapter implementations:
+
+* A default adapter handling order information for all objects contained in a folder.
+  This adapter can be used to build fully backwards-compatible drop-in replacements for folderish content.
+  In other words, when using this adapter `B-tree`_-based folders should behave just like the "regular" folder implementation,
+  but provide some of the performance benefits at the same time.
+
+* An alternative adapter implementation that is targeted towards sites with only a relatively small percentage of content for which (explicit) order matters.
+  It'll only manage order information for certain content types (via a marker interface).
+
+The latter allows to not having to separate such content from "non-orderable" content.
+Up to now many large sites ended up storing "orderable" items |---|
+for example everything related to navigation and typically only a few |---|
+in regular folders and the bulk of the content in "large" folders,
+most of the time solely for performance reasons.
+This adapter will hopefully help avoid having to make this distinction in the future
+and still provide the better performance characteristics of `B-tree`_ folders.
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.folder>`_.
diff --git a/setup.py b/setup.py
index c0feb61..e1a6f71 100644
--- a/setup.py
+++ b/setup.py
@@ -2,43 +2,49 @@
 
 version = '1.0.7.dev0'
 
-setup(name='plone.folder',
-      version=version,
-      description='BTree-based folder implementation with order support',
-      long_description=(open("README.rst").read() + "\n" +
-                        open("CHANGES.rst").read()),
-      classifiers=[
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "Intended Audience :: Developers",
-          "Intended Audience :: System Administrators",
-          "Intended Audience :: Other Audience",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-          ],
-      keywords='folder btree order',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.folder',
-      license='GPL version 2',
-      packages=find_packages('src'),
-      package_dir={'': 'src'},
-      namespace_packages=['plone'],
-      include_package_data=True,
-      platforms='Any',
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'plone.memoize',
-          'zope.interface',
-          'zope.component',
-          'zope.annotation',
-          'zope.container',
-      ],
-      extras_require={'test': [
-          'profilehooks',
-          'Products.CMFCore',
-      ]},
-      )
+setup(
+    name='plone.folder',
+    version=version,
+    description='BTree-based folder implementation with order support',
+    long_description=(open("README.rst").read() + "\n" +
+                      open("CHANGES.rst").read()),
+    classifiers=[
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "Intended Audience :: Developers",
+        "Intended Audience :: System Administrators",
+        "Intended Audience :: Other Audience",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+        ],
+    keywords='folder btree order',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.folder',
+    license='GPL version 2',
+    packages=find_packages('src'),
+    package_dir={'': 'src'},
+    namespace_packages=['plone'],
+    include_package_data=True,
+    platforms='Any',
+    zip_safe=False,
+    install_requires=[
+        'plone.memoize',
+        'Products.BTreeFolder2',
+        'Products.CMFCore',
+        'Products.ZCatalog',
+        'setuptools',
+        'zope.annotation',
+        'zope.component',
+        'zope.container',
+        'zope.interface',
+        'Zope2',
+    ],
+    extras_require={
+        'test': [
+            'profilehooks',
+        ]
+    },
+)
diff --git a/src/plone/__init__.py b/src/plone/__init__.py
index 94ecf10..68c04af 100644
--- a/src/plone/__init__.py
+++ b/src/plone/__init__.py
@@ -1,7 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = locals()['__path__'] # make pyflakes happy...
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/src/plone/folder/__init__.py b/src/plone/folder/__init__.py
index 187664d..40a96af 100644
--- a/src/plone/folder/__init__.py
+++ b/src/plone/folder/__init__.py
@@ -1 +1 @@
-# the existance of __init__.py make this a module...
+# -*- coding: utf-8 -*-
diff --git a/src/plone/folder/cmf.py b/src/plone/folder/cmf.py
deleted file mode 100644
index c467246..0000000
--- a/src/plone/folder/cmf.py
+++ /dev/null
@@ -1,10 +0,0 @@
-try:
-    from Products.CMFCore.permissions import ModifyPortalContent
-    from Products.CMFCore.PortalFolder import PortalFolderBase
-    ModifyPortalContent, PortalFolderBase   # pyflakes is useful, but stupid!
-except ImportError:
-    # fake the required stuff if `CMFCore` isn't available...
-    ModifyPortalContent = 'Modify portal content'
-    class PortalFolderBase:
-        def __init__(self, id, title='', description=''):
-            pass
diff --git a/src/plone/folder/default.py b/src/plone/folder/default.py
index 15978c7..fe585d2 100644
--- a/src/plone/folder/default.py
+++ b/src/plone/folder/default.py
@@ -1,48 +1,51 @@
-from persistent.list import PersistentList
+# -*- coding: utf-8 -*-
 from BTrees.OIBTree import OIBTree
-
-from zope.interface import implements
-from zope.component import adapts
+from persistent.list import PersistentList
+from plone.folder.interfaces import IExplicitOrdering
+from plone.folder.interfaces import IOrderableFolder
 from zope.annotation.interfaces import IAnnotations
+from zope.component import adapter
 from zope.container.contained import notifyContainerModified
-
-from plone.folder.interfaces import IOrderableFolder
-from plone.folder.interfaces import IExplicitOrdering
+from zope.interface import implementer
 
 
+@implementer(IExplicitOrdering)
+@adapter(IOrderableFolder)
 class DefaultOrdering(object):
     """ This implementation uses annotations to store the order on the
         object, and supports explicit ordering. """
 
-    implements(IExplicitOrdering)
-    adapts(IOrderableFolder)
-
     ORDER_KEY = "plone.folder.ordered.order"
     POS_KEY = "plone.folder.ordered.pos"
 
     def __init__(self, context):
         self.context = context
 
-    def notifyAdded(self, id):
+    def notifyAdded(self, obj_id):
         """ see interfaces.py """
         order = self._order(True)
         pos = self._pos(True)
-        order.append(id)
-        pos[id] = len(order) - 1
+        order.append(obj_id)
+        pos[obj_id] = len(order) - 1
 
-    def notifyRemoved(self, id):
+    def notifyRemoved(self, obj_id):
         """ see interfaces.py """
         order = self._order()
         pos = self._pos()
-        idx = pos[id]
+        idx = pos[obj_id]
         del order[idx]
         # we now need to rebuild pos since the ids have shifted
         pos.clear()
-        for n, id in enumerate(order):
-            pos[id] = n
-
-    def moveObjectsByDelta(self, ids, delta, subset_ids=None,
-            suppress_events=False):
+        for count, obj_id in enumerate(order):
+            pos[obj_id] = count
+
+    def moveObjectsByDelta(
+        self,
+        ids,
+        delta,
+        subset_ids=None,
+        suppress_events=False
+    ):
         """ see interfaces.py """
         order = self._order()
         pos = self._pos()
@@ -57,31 +60,34 @@ def moveObjectsByDelta(self, ids, delta, subset_ids=None,
             ids = reversed(ids)
             subset_ids.reverse()
         counter = 0
-        for id in ids:
+        for obj_id in ids:
             try:
-                old_position = subset_ids.index(id)
+                old_position = subset_ids.index(obj_id)
             except ValueError:
                 continue
             new_position = max(old_position - abs(delta), min_position)
             if new_position == min_position:
                 min_position += 1
             if not old_position == new_position:
-                subset_ids.remove(id)
-                subset_ids.insert(new_position, id)
+                subset_ids.remove(obj_id)
+                subset_ids.insert(new_position, obj_id)
                 counter += 1
         if counter > 0:
             if delta > 0:
                 subset_ids.reverse()
             idx = 0
             for i in range(len(order)):
-                if order[i] in subset_ids:
-                    id = subset_ids[idx]
-                    try:
-                        order[i] = id
-                        pos[id] = i
-                        idx += 1
-                    except KeyError:
-                        raise ValueError('No object with id "%s" exists.' % id)
+                if order[i] not in subset_ids:
+                    continue
+                obj_id = subset_ids[idx]
+                try:
+                    order[i] = obj_id
+                    pos[obj_id] = i
+                    idx += 1
+                except KeyError:
+                    raise ValueError(
+                        'No object with id "{0:s}" exists.'.format(obj_id)
+                    )
         if not suppress_events:
             notifyContainerModified(self.context)
         return counter
@@ -102,12 +108,15 @@ def moveObjectsToBottom(self, ids, subset_ids=None):
         """ see interfaces.py """
         return self.moveObjectsByDelta(ids, len(self._order()), subset_ids)
 
-    def moveObjectToPosition(self, id, position, suppress_events=False):
+    def moveObjectToPosition(self, obj_id, position, suppress_events=False):
         """ see interfaces.py """
-        delta = position - self.getObjectPosition(id)
+        delta = position - self.getObjectPosition(obj_id)
         if delta:
-            return self.moveObjectsByDelta(id, delta,
-                suppress_events=suppress_events)
+            return self.moveObjectsByDelta(
+                obj_id,
+                delta,
+                suppress_events=suppress_events
+            )
 
     def orderObjects(self, key=None, reverse=None):
         """ see interfaces.py """
@@ -120,24 +129,23 @@ def orderObjects(self, key=None, reverse=None):
             # Simply reverse the current ordering.
             order.reverse()
         else:
-            def keyfn(id):
-                attr = getattr(self.context._getOb(id), key)
+            def keyfn(obj_id):
+                attr = getattr(self.context._getOb(obj_id), key)
                 if callable(attr):
                     return attr()
                 return attr
             order.sort(None, keyfn, bool(reverse))
 
-        for n, id in enumerate(order):
-            pos[id] = n
+        for n, obj_id in enumerate(order):
+            pos[obj_id] = n
         return -1
 
-    def getObjectPosition(self, id):
+    def getObjectPosition(self, obj_id):
         """ see interfaces.py """
         pos = self._pos()
-        if id in pos:
-            return pos[id]
-        else:
-            raise ValueError('No object with id "%s" exists.' % id)
+        if obj_id in pos:
+            return pos[obj_id]
+        raise ValueError('No object with id "{0:s}" exists.'.format(obj_id))
 
     def idsInOrder(self):
         """ see interfaces.py """
@@ -152,12 +160,10 @@ def _order(self, create=False):
         annotations = IAnnotations(self.context)
         if create:
             return annotations.setdefault(self.ORDER_KEY, PersistentList())
-        else:
-            return annotations.get(self.ORDER_KEY, [])
+        return annotations.get(self.ORDER_KEY, [])
 
     def _pos(self, create=False):
         annotations = IAnnotations(self.context)
         if create:
             return annotations.setdefault(self.POS_KEY, OIBTree())
-        else:
-            return annotations.get(self.POS_KEY, {})
+        return annotations.get(self.POS_KEY, {})
diff --git a/src/plone/folder/interfaces.py b/src/plone/folder/interfaces.py
index 7f9aa18..4f5fef4 100644
--- a/src/plone/folder/interfaces.py
+++ b/src/plone/folder/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
@@ -31,14 +32,14 @@ class IOrdering(Interface):
         optionally provide IExplicitOrdering, defined below. This is
         used to support explicit ordering, e.g. through a UI. """
 
-    def notifyAdded(id):
+    def notifyAdded(obj_id):
         """ Inform the ordering implementation that an item was added """
 
-    def notifyRemoved(id):
+    def notifyRemoved(obj_id):
         """ Inform the ordering implementation that an item was removed """
 
-    def getObjectPosition(id):
-        """ Get the position of the given id """
+    def getObjectPosition(obj_id):
+        """ Get the position of the given object id """
 
     def idsInOrder():
         """ Return all object ids, in the correct order """
@@ -67,7 +68,7 @@ def moveObjectsToTop(ids, subset_ids=None):
     def moveObjectsToBottom(ids, subset_ids=None):
         """ Move specified sub-objects to bottom of container. """
 
-    def moveObjectToPosition(id, position, suppress_events=False):
+    def moveObjectToPosition(obj_id, position, suppress_events=False):
         """ Move specified object to absolute position. """
 
     def orderObjects(key, reverse=None):
diff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py
index 6a26528..50b2351 100644
--- a/src/plone/folder/ordered.py
+++ b/src/plone/folder/ordered.py
@@ -1,29 +1,28 @@
-from zope.component import getAdapter, queryAdapter
-from zope.interface import implements
-from zope.annotation.interfaces import IAttributeAnnotatable
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl.Permissions import access_contents_information
 from AccessControl.Permissions import manage_properties
 from OFS.interfaces import IOrderedContainer
-from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base, _marker
-from Products.ZCatalog.Lazy import LazyMap
-
-from plone.folder.cmf import PortalFolderBase
-from plone.folder.cmf import ModifyPortalContent
-
+from plone.folder.interfaces import IExplicitOrdering
 from plone.folder.interfaces import IOrderableFolder
 from plone.folder.interfaces import IOrdering
-from plone.folder.interfaces import IExplicitOrdering
-
+from Products.BTreeFolder2.BTreeFolder2 import _marker
+from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.PortalFolder import PortalFolderBase
+from Products.ZCatalog.Lazy import LazyMap
 from webdav.NullResource import NullResource
+from zope.annotation.interfaces import IAttributeAnnotatable
+from zope.component import getAdapter
+from zope.component import queryAdapter
+from zope.interface import implementer
 
 
+@implementer(IOrderedContainer, IOrderableFolder, IAttributeAnnotatable)
 class OrderedBTreeFolderBase(BTreeFolder2Base):
     """ BTree folder base class with ordering support. The ordering
         is done by a named adapter (to IOrdering), which makes the policy
         changeable. """
-    implements(IOrderedContainer, IOrderableFolder, IAttributeAnnotatable)
 
     _ordering = u''         # name of adapter defining ordering policy
 
@@ -33,7 +32,7 @@ def __nonzero__(self):
         """ a folder is something, even if it's empty """
         return True
 
-    security.declareProtected(access_contents_information, 'getOrdering')
+    @security.protected(access_contents_information)
     def getOrdering(self):
         """ return the currently active ordering adapter for this folder """
         adapter = queryAdapter(self, IOrdering, name=self._ordering)
@@ -41,7 +40,7 @@ def getOrdering(self):
             adapter = getAdapter(self, IOrdering)
         return adapter
 
-    security.declareProtected(manage_properties, 'setOrdering')
+    @security.protected(manage_properties)
     def setOrdering(self, ordering=u''):
         """ (re)set ordering adapter to be used for this folder """
         if ordering:
@@ -96,12 +95,12 @@ def objectItems(self, spec=None):
 
     # IOrderSupport - mostly deprecated, use the adapter directly instead
 
-    security.declareProtected(access_contents_information, 'getObjectPosition')
+    @security.protected(access_contents_information)
     def getObjectPosition(self, id):
         """ Get the position of an object by its id. """
         return self.getOrdering().getObjectPosition(id)
 
-    security.declareProtected(manage_properties, 'moveObjectsUp')
+    @security.protected(manage_properties)
     def moveObjectsUp(self, ids, delta=1, subset_ids=None):
         """ Move specified sub-objects up by delta in container. """
         ordering = self.getOrdering()
@@ -110,7 +109,7 @@ def moveObjectsUp(self, ids, delta=1, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsDown')
+    @security.protected(manage_properties)
     def moveObjectsDown(self, ids, delta=1, subset_ids=None):
         """ Move specified sub-objects down by delta in container. """
         ordering = self.getOrdering()
@@ -119,7 +118,7 @@ def moveObjectsDown(self, ids, delta=1, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsToTop')
+    @security.protected(manage_properties)
     def moveObjectsToTop(self, ids, subset_ids=None):
         """ Move specified sub-objects to top of container. """
         ordering = self.getOrdering()
@@ -128,7 +127,7 @@ def moveObjectsToTop(self, ids, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsToBottom')
+    @security.protected(manage_properties)
     def moveObjectsToBottom(self, ids, subset_ids=None):
         """ Move specified sub-objects to bottom of container. """
         ordering = self.getOrdering()
@@ -137,7 +136,7 @@ def moveObjectsToBottom(self, ids, subset_ids=None):
         else:
             return 0
 
-    security.declareProtected(ModifyPortalContent, 'moveObject')
+    @security.protected(ModifyPortalContent)
     def moveObject(self, id, position):
         """ Move specified object to absolute position. """
         ordering = self.getOrdering()
@@ -146,7 +145,7 @@ def moveObject(self, id, position):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectToPosition')
+    @security.protected(manage_properties)
     def moveObjectToPosition(self, id, position, suppress_events=False):
         """ Move specified object to absolute position. """
         ordering = self.getOrdering()
@@ -155,18 +154,23 @@ def moveObjectToPosition(self, id, position, suppress_events=False):
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'moveObjectsByDelta')
-    def moveObjectsByDelta(self, ids, delta, subset_ids=None,
-            suppress_events=False):
+    @security.protected(manage_properties)
+    def moveObjectsByDelta(
+        self, ids, delta, subset_ids=None, suppress_events=False
+    ):
         """ Move specified sub-objects by delta. """
         ordering = self.getOrdering()
         if IExplicitOrdering.providedBy(ordering):
-            return ordering.moveObjectsByDelta(ids, delta, subset_ids,
-                suppress_events)
+            return ordering.moveObjectsByDelta(
+                ids,
+                delta,
+                subset_ids,
+                suppress_events
+            )
         else:
             return 0
 
-    security.declareProtected(manage_properties, 'orderObjects')
+    @security.protected(manage_properties)
     def orderObjects(self, key=None, reverse=None):
         """ Order sub-objects by key and direction. """
         ordering = self.getOrdering()
@@ -183,8 +187,11 @@ def iterkeys(self):
     def manage_renameObject(self, id, new_id, REQUEST=None):
         """ Rename a particular sub-object without changing its position. """
         old_position = self.getObjectPosition(id)
-        result = super(OrderedBTreeFolderBase, self).manage_renameObject(id,
-            new_id, REQUEST)
+        result = super(OrderedBTreeFolderBase, self).manage_renameObject(
+            id,
+            new_id,
+            REQUEST
+        )
         if old_position is None:
             return result
         self.moveObjectToPosition(new_id, old_position, suppress_events=True)
@@ -214,10 +221,8 @@ def __getitem__(self, key):
             request = self.REQUEST
             method = request.get('REQUEST_METHOD', 'GET')
             if (getattr(request, 'maybe_webdav_client', False) and
-                not method in ('GET', 'POST')):
-
+               method not in ('GET', 'POST')):
                 return NullResource(self, key, request).__of__(self)
-
         raise KeyError(key)
 
     __iter__ = iterkeys
diff --git a/src/plone/folder/tests/__init__.py b/src/plone/folder/tests/__init__.py
index 187664d..40a96af 100644
--- a/src/plone/folder/tests/__init__.py
+++ b/src/plone/folder/tests/__init__.py
@@ -1 +1 @@
-# the existance of __init__.py make this a module...
+# -*- coding: utf-8 -*-
diff --git a/src/plone/folder/tests/benchmarks.py b/src/plone/folder/tests/benchmarks.py
index 4e98a5e..1f0cbfd 100644
--- a/src/plone/folder/tests/benchmarks.py
+++ b/src/plone/folder/tests/benchmarks.py
@@ -1,14 +1,15 @@
+# -*- coding: utf-8 -*-
 # simple benchmarking tests related to plip191
 # to run individual tests using:
 # $ bin/instance test -s plone.folder --tests-pattern=benchmarks -t <testName>
 # where <testName> is something like "testDeleteSpeed"
 
-from unittest import TestCase, defaultTestLoader
-from profilehooks import timecall
-
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
+from profilehooks import timecall
+from unittest import defaultTestLoader
+from unittest import TestCase
 
 
 class BenchmarkTests(TestCase):
@@ -21,6 +22,7 @@ def testDeleteSpeed(self):
             id = 'foo-%s' % idx
             folder[id] = DummyObject(id, 'bar')
         last = reversed(folder.keys()[-100:])
+
         @timecall
         def delete():
             for id in last:
diff --git a/src/plone/folder/tests/layer.py b/src/plone/folder/tests/layer.py
index 0c4d5bc..564d348 100644
--- a/src/plone/folder/tests/layer.py
+++ b/src/plone/folder/tests/layer.py
@@ -2,7 +2,7 @@
 from Products.Five.zcml import load_config
 
 
-class PloneFolderLayer:
+class PloneFolderLayer(object):
 
     @classmethod
     def setUp(cls):
diff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py
index ced99b2..b487ab8 100644
--- a/src/plone/folder/tests/test_dict_interface.py
+++ b/src/plone/folder/tests/test_dict_interface.py
@@ -1,9 +1,10 @@
-from unittest import TestCase, defaultTestLoader
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
+from unittest import defaultTestLoader
+from unittest import TestCase
 
 
 class DictInterfaceTests(TestCase):
@@ -53,8 +54,8 @@ def test_len_one_child(self):
     def test_to_verify_ticket_9120(self):
         folder = OrderedBTreeFolderBase("f1")
         folder['ob1'] = ob1 = DummyObject('ob1')
-        folder['ob2'] = ob2 = DummyObject('ob2')
-        folder['ob3'] = ob3 = DummyObject('ob3')
+        folder['ob2'] = DummyObject('ob2')
+        folder['ob3'] = DummyObject('ob3')
         folder['ob4'] = ob4 = DummyObject('ob4')
         del folder['ob2']
         del folder['ob3']
diff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py
index 75f9518..af2a5af 100644
--- a/src/plone/folder/tests/test_integration.py
+++ b/src/plone/folder/tests/test_integration.py
@@ -1,11 +1,12 @@
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
 from Acquisition import Implicit
-from transaction import savepoint
-from Testing.ZopeTestCase import ZopeTestCase
-from zope.interface import implements
 from plone.folder.interfaces import IOrderable
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
+from StringIO import StringIO
+from Testing.ZopeTestCase import ZopeTestCase
+from transaction import savepoint
+from zope.interface import implements
 
 
 class DummyFolder(OrderedBTreeFolderBase, Implicit):
diff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py
index 5817406..d421598 100644
--- a/src/plone/folder/tests/test_ordering_adapters.py
+++ b/src/plone/folder/tests/test_ordering_adapters.py
@@ -1,9 +1,11 @@
-from unittest import TestCase, defaultTestLoader
-from zope.component import ComponentLookupError
-from plone.folder.ordered import OrderedBTreeFolderBase
+# -*- coding: utf-8 -*-
 from plone.folder.default import DefaultOrdering
-from plone.folder.unordered import UnorderedOrdering
+from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
+from plone.folder.unordered import UnorderedOrdering
+from unittest import defaultTestLoader
+from unittest import TestCase
+from zope.component import ComponentLookupError
 
 
 class OrderingAdapterTests(TestCase):
diff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py
index 1c764a9..9a57daf 100644
--- a/src/plone/folder/tests/test_ordersupport.py
+++ b/src/plone/folder/tests/test_ordersupport.py
@@ -1,9 +1,10 @@
-from unittest import TestCase, defaultTestLoader
-
+# -*- coding: utf-8 -*-
 from plone.folder.interfaces import IOrdering
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
+from unittest import defaultTestLoader
+from unittest import TestCase
 
 
 class OFSOrderSupportTests(TestCase):
@@ -29,21 +30,39 @@ def test_objectIdsOrdered(self):
 
     def test_objectValuesOrdered(self):
         folder = self.create()
-        self.assertEquals(["o1", "o2", "o3", "o4"], [x.id for x in folder.objectValues()])
+        self.assertEquals(
+            ["o1", "o2", "o3", "o4"],
+            [x.id for x in folder.objectValues()]
+        )
         folder.moveObjectsUp(("o2",), 1)
-        self.assertEquals(["o2", "o1", "o3", "o4"], [x.id for x in folder.objectValues()])
+        self.assertEquals(
+            ["o2", "o1", "o3", "o4"],
+            [x.id for x in folder.objectValues()]
+        )
 
     def test_objectItemsOrdered(self):
         folder = self.create()
-        self.assertEquals(["o1", "o2", "o3", "o4"], [x for x, y in folder.objectItems()])
+        self.assertEquals(
+            ["o1", "o2", "o3", "o4"],
+            [x for x, y in folder.objectItems()]
+        )
         folder.moveObjectsUp(("o2",), 1)
-        self.assertEquals(["o2", "o1", "o3", "o4"], [x for x, y in folder.objectItems()])
+        self.assertEquals(
+            ["o2", "o1", "o3", "o4"],
+            [x for x, y in folder.objectItems()]
+        )
 
     def test_iterkeys(self):
         folder = self.create()
-        self.assertEquals(["o1", "o2", "o3", "o4"], [x for x in folder.iterkeys()])
+        self.assertEquals(
+            ["o1", "o2", "o3", "o4"],
+            [x for x in folder.iterkeys()]
+        )
         folder.moveObjectsUp(("o2",), 1)
-        self.assertEquals(["o2", "o1", "o3", "o4"], [x for x in folder.iterkeys()])
+        self.assertEquals(
+            ["o2", "o1", "o3", "o4"],
+            [x for x in folder.iterkeys()]
+        )
 
     def test_iter(self):
         folder = self.create()
@@ -297,13 +316,13 @@ def testSubsetIds(self):
     def testSkipObjectsNotInSubsetIds(self):
         self.folder.moveObjectsByDelta(['baz'], -1, ['foo', 'baz'])
         self.assertEqual(self.folder.getObjectPosition('baz'), 0)
-        self.assertEqual(self.folder.getObjectPosition('bar'), 1) # Did not move
+        self.assertEqual(self.folder.getObjectPosition('bar'), 1)  # no move
         self.assertEqual(self.folder.getObjectPosition('foo'), 2)
 
     def testIgnoreNonObjects(self):
         # Fix for (http://dev.plone.org/plone/ticket/3959) non
         # contentish objects cause errors, we should just ignore them
-        self.folder.moveObjectsByDelta(['bar','blah'], -1)
+        self.folder.moveObjectsByDelta(['bar', 'blah'], -1)
         self.assertEqual(self.folder.getObjectPosition('bar'), 0)
         self.assertEqual(self.folder.getObjectPosition('foo'), 1)
         self.assertEqual(self.folder.getObjectPosition('baz'), 2)
diff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py
index 6a2d037..7e334bf 100644
--- a/src/plone/folder/tests/test_partialordering.py
+++ b/src/plone/folder/tests/test_partialordering.py
@@ -35,28 +35,44 @@ def testAdapter(self):
 
     def testNotifyAdded(self):
         container, ordering = self.create()
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o3', 'o4'] + self.unordered)
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o3', 'o4'] + self.unordered
+        )
         container['o5'] = Orderable('o5')
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o3', 'o4', 'o5'] + self.unordered)
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4', 'o5', 'c1', 'c2', 'c3']))
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o3', 'o4', 'o5'] + self.unordered
+        )
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4', 'o5', 'c1', 'c2', 'c3'])
+        )
 
     def testNotifyRemoved(self):
         container, ordering = self.create()
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o3', 'o4'] + self.unordered)
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o3', 'o4'] + self.unordered
+        )
         container._delOb('o3')
-        self.assertEqual(ordering.idsInOrder(),
-            ['o1', 'o2', 'o4'] + self.unordered)
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o4', 'c1', 'c2', 'c3']))
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o1', 'o2', 'o4'] + self.unordered
+        )
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o4', 'c1', 'c2', 'c3'])
+        )
         container._delOb('o1')
-        self.assertEqual(ordering.idsInOrder(),
-            ['o2', 'o4'] + self.unordered)
-        self.assertEqual(set(container.objectIds()),
-            set(['o2', 'o4', 'c1', 'c2', 'c3']))
+        self.assertEqual(
+            ordering.idsInOrder(),
+            ['o2', 'o4'] + self.unordered
+        )
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o2', 'o4', 'c1', 'c2', 'c3'])
+        )
 
     def runTableTests(self, action, tests):
         for args, order, rval in tests:
@@ -146,7 +162,7 @@ def testMoveObjectToPosition(self):
         self.runTableTests('moveObjectToPosition', (
             (('o2', 2), ['o1', 'o3', 'o2', 'o4'], 1),
             (('o4', 2), ['o1', 'o2', 'o4', 'o3'], 1),
-            (('c1', 2), ['o1', 'o2', 'o3', 'o4'], None),    # existent, but non-orderable
+            (('c1', 2), ['o1', 'o2', 'o3', 'o4'], None),  # existent, but non-orderable
             (('n2', 2), ['o1', 'o2', 'o3', 'o4'], ValueError),
         ))
 
@@ -168,7 +184,7 @@ def testGetObjectPosition(self):
             (('o2',), ['o1', 'o2', 'o3', 'o4'], 1),
             (('o4',), ['o1', 'o2', 'o3', 'o4'], 3),
             (('n2',), ['o1', 'o2', 'o3', 'o4'], ValueError),
-            (('c2',), ['o1', 'o2', 'o3', 'o4'], None),      # existent, but non-orderable
+            (('c2',), ['o1', 'o2', 'o3', 'o4'], None),  # existent, but non-orderable
         ))
 
 
diff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py
index 7ccea46..555ea71 100644
--- a/src/plone/folder/tests/test_unorderedordering.py
+++ b/src/plone/folder/tests/test_unorderedordering.py
@@ -26,19 +26,27 @@ def testAdapter(self):
 
     def testNotifyAdded(self):
         container = self.create()
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4'])
+        )
         container._setOb('o5', DummyObject('o5', 'mt1'))
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4', 'o5']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4', 'o5'])
+        )
 
     def testNotifyRemoved(self):
         container = self.create()
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o3', 'o4']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o3', 'o4'])
+        )
         container._delOb('o3')
-        self.assertEqual(set(container.objectIds()),
-            set(['o1', 'o2', 'o4']))
+        self.assertEqual(
+            set(container.objectIds()),
+            set(['o1', 'o2', 'o4'])
+        )
 
     def testGetObjectPosition(self):
         container = self.create()
diff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py
index ce828e7..c3135fc 100644
--- a/src/plone/folder/tests/test_webdav.py
+++ b/src/plone/folder/tests/test_webdav.py
@@ -1,17 +1,19 @@
-from unittest import TestCase, defaultTestLoader
-from webdav.NullResource import NullResource
-
+# -*- coding: utf-8 -*-
+from Acquisition import Explicit
 from plone.folder.ordered import CMFOrderedBTreeFolderBase
 from plone.folder.tests.layer import PloneFolderLayer
 from plone.folder.tests.utils import DummyObject
-
-from Acquisition import Explicit
+from unittest import defaultTestLoader
+from unittest import TestCase
+from webdav.NullResource import NullResource
 from zope.publisher.browser import TestRequest
 
+
 class TestRequestContainer(Explicit):
 
     REQUEST = TestRequest()
 
+
 class WebDAVTests(TestCase):
     """ tests regarding support for WebDAV NullResources """
 
@@ -47,5 +49,6 @@ def test_getitem_dav_request(self):
         self.assertEquals(folder['foo'], foo)
         self.failUnless(isinstance(folder['bar'], NullResource))
 
+
 def test_suite():
     return defaultTestLoader.loadTestsFromName(__name__)
diff --git a/src/plone/folder/tests/utils.py b/src/plone/folder/tests/utils.py
index 1249d8a..5c2015b 100644
--- a/src/plone/folder/tests/utils.py
+++ b/src/plone/folder/tests/utils.py
@@ -1,5 +1,6 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from plone.folder.interfaces import IOrderable
+from zope.interface import implementer
 
 
 class DummyObject(object):
@@ -18,9 +19,9 @@ def dummy_method(self):
         return self.id
 
 
+@implementer(IOrderable)
 class Orderable(DummyObject):
     """ orderable mock object """
-    implements(IOrderable)
 
 
 class Chaoticle(DummyObject):
diff --git a/src/plone/folder/unordered.py b/src/plone/folder/unordered.py
index c825e11..14d9ae8 100644
--- a/src/plone/folder/unordered.py
+++ b/src/plone/folder/unordered.py
@@ -1,25 +1,27 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-from zope.interface import implements
-from zope.component import adapts
-from plone.folder.interfaces import IOrdering, IOrderableFolder
+from plone.folder.interfaces import IOrderableFolder
+from plone.folder.interfaces import IOrdering
+from zope.component import adapter
+from zope.interface import implementer
 
 
+@implementer(IOrdering)
+@adapter(IOrderableFolder)
 class UnorderedOrdering(object):
     """ This implementation provides no ordering. """
-    implements(IOrdering)
-    adapts(IOrderableFolder)
 
     def __init__(self, context):
         self.context = context
 
-    def notifyAdded(self, id):
+    def notifyAdded(self, obj_id):
         pass
 
-    def notifyRemoved(self, id):
+    def notifyRemoved(self, obj_id):
         pass
 
     def idsInOrder(self):
         return aq_base(self.context).objectIds(ordered=False)
 
-    def getObjectPosition(self, id):
+    def getObjectPosition(self, obj_id):
         return None


