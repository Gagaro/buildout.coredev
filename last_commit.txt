Repository: plone.app.layout
Branch: refs/heads/master
Date: 2015-01-25T13:32:53+01:00
Author: Jure Cerjak (jcerjak) <jcerjak@termitnjak.si>
Commit: https://github.com/plone/plone.app.layout/commit/ec8d8bb49ec6f7a912cd1cbbe702ec466df5f536

Read "allow_anon_views_about" from registry instead of properties

Files changed:
M CHANGES.rst
M plone/app/layout/links/viewlets.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/tests/test_content.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ee37d4c..2e0a425 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 2.5.4 (unreleased)
 ------------------
 
+- Read ``allow_anon_views_about`` settings from the registry instead of portal
+  properties (see https://github.com/plone/Products.CMFPlone/issues/216).
+  [jcerjak]
+
 - Added support for site logos stored in the portal registry via the site
   control panel for the logo viewlet with a fallback to the ``OFS.Image``
   based ``logo.png`` file. Removed support of long-gone
diff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py
index 555616a..3ec1283 100644
--- a/plone/app/layout/links/viewlets.py
+++ b/plone/app/layout/links/viewlets.py
@@ -13,6 +13,7 @@
 from zope.schema.interfaces import IVocabularyFactory
 from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.interfaces.syndication import IFeedSettings
 from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings
 
@@ -62,12 +63,13 @@ def update(self):
                                      name='plone_tools')
 
     def show(self):
-        properties = self.tools.properties()
-        site_properties = getattr(properties, 'site_properties')
         anonymous = self.portal_state.anonymous()
-        allowAnonymousViewAbout = site_properties.getProperty(
-            'allowAnonymousViewAbout', True)
-        return not anonymous or allowAnonymousViewAbout
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ISecuritySchema,
+            prefix='plone',
+        )
+        return not anonymous or settings.allow_anon_views_about
 
     def render(self):
         if self.show():
diff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py
index 15adcbd..7ac2abf 100644
--- a/plone/app/layout/viewlets/content.py
+++ b/plone/app/layout/viewlets/content.py
@@ -6,14 +6,17 @@
 from AccessControl import getSecurityManager
 from Acquisition import aq_inner
 from DateTime import DateTime
+from plone.registry.interfaces import IRegistry
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.CMFCore.utils import _checkPermission
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.WorkflowCore import WorkflowException
 from Products.CMFEditions.Permissions import AccessPreviousVersions
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.utils import base_hasattr
 from Products.CMFPlone.utils import log
+from zope.component import getUtility
 
 from plone.app.layout.globals.interfaces import IViewView
 from plone.app.layout.viewlets import ViewletBase
@@ -64,11 +67,12 @@ def update(self):
         self.has_pam = HAS_PAM
 
     def show(self):
-        properties = getToolByName(self.context, 'portal_properties')
-        site_properties = getattr(properties, 'site_properties')
-        allowAnonymousViewAbout = site_properties.getProperty(
-            'allowAnonymousViewAbout', True)
-        return not self.anonymous or allowAnonymousViewAbout
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ISecuritySchema,
+            prefix='plone',
+        )
+        return not self.anonymous or settings.allow_anon_views_about
 
     def show_history(self):
         has_access_preview_versions_permission = _checkPermission(
diff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py
index 2e32def..d474d08 100644
--- a/plone/app/layout/viewlets/tests/test_content.py
+++ b/plone/app/layout/viewlets/tests/test_content.py
@@ -8,6 +8,8 @@
 from plone.app.layout.viewlets.content import ContentRelatedItems
 from plone.locking.tests import addMember
 from plone.locking.interfaces import ILockable
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ISecuritySchema
 
 from DateTime import DateTime
 from Products.CMFCore.utils import getToolByName
@@ -35,6 +37,44 @@ def afterSetUp(self):
         portal = getSite()
         addMember(portal, 'Alan', roles=('Member', 'Manager'))
         addMember(portal, 'Ano', roles=())
+        self.folder.invokeFactory('Document', 'doc1', title='Document 1')
+
+        registry = getUtility(IRegistry)
+        self.security_settings = registry.forInterface(
+            ISecuritySchema,
+            prefix='plone',
+        )
+
+    def _get_viewlet(self):
+        context = self.folder['doc1']
+        request = self.app.REQUEST
+        viewlet = DocumentBylineViewlet(context, request, None, None)
+        viewlet.update()
+        return viewlet
+
+    def test_show_anonymous_not_allowed(self):
+        self.security_settings.allow_anon_views_about = False
+        self.logout()
+        viewlet = self._get_viewlet()
+        self.assertFalse(viewlet.show())
+
+    def test_show_anonymous_allowed(self):
+        self.security_settings.allow_anon_views_about = True
+        self.logout()
+        viewlet = self._get_viewlet()
+        self.assertTrue(viewlet.show())
+
+    def test_show_logged_in_anonymous_not_allowed(self):
+        self.security_settings.allow_anon_views_about = False
+        self.login('Alan')
+        viewlet = self._get_viewlet()
+        self.assertTrue(viewlet.show())
+
+    def test_show_logged_in_anonymous_allowed(self):
+        self.security_settings.allow_anon_views_about = True
+        self.login('Alan')
+        viewlet = self._get_viewlet()
+        self.assertTrue(viewlet.show())
 
     def test_anonymous_locked_icon(self):
         request = self.app.REQUEST


Repository: plone.app.layout
Branch: refs/heads/master
Date: 2015-01-25T13:52:55+01:00
Author: Jure Cerjak (jcerjak) <jcerjak@termitnjak.si>
Commit: https://github.com/plone/plone.app.layout/commit/49137b120ea0e127f587ba8fdc62571a95b6bd90

restructure DocumentBylineViewlet tests

Files changed:
M plone/app/layout/viewlets/tests/test_content.py

diff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py
index d474d08..c459ded 100644
--- a/plone/app/layout/viewlets/tests/test_content.py
+++ b/plone/app/layout/viewlets/tests/test_content.py
@@ -34,10 +34,8 @@ class TestDocumentBylineViewletView(ViewletsTestCase):
     Test the document by line viewlet
     """
     def afterSetUp(self):
-        portal = getSite()
-        addMember(portal, 'Alan', roles=('Member', 'Manager'))
-        addMember(portal, 'Ano', roles=())
         self.folder.invokeFactory('Document', 'doc1', title='Document 1')
+        self.context = self.folder['doc1']
 
         registry = getUtility(IRegistry)
         self.security_settings = registry.forInterface(
@@ -46,9 +44,8 @@ def afterSetUp(self):
         )
 
     def _get_viewlet(self):
-        context = self.folder['doc1']
         request = self.app.REQUEST
-        viewlet = DocumentBylineViewlet(context, request, None, None)
+        viewlet = DocumentBylineViewlet(self.context, request, None, None)
         viewlet.update()
         return viewlet
 
@@ -66,57 +63,45 @@ def test_show_anonymous_allowed(self):
 
     def test_show_logged_in_anonymous_not_allowed(self):
         self.security_settings.allow_anon_views_about = False
-        self.login('Alan')
         viewlet = self._get_viewlet()
         self.assertTrue(viewlet.show())
 
     def test_show_logged_in_anonymous_allowed(self):
         self.security_settings.allow_anon_views_about = True
-        self.login('Alan')
         viewlet = self._get_viewlet()
         self.assertTrue(viewlet.show())
 
-    def test_anonymous_locked_icon(self):
-        request = self.app.REQUEST
-        self.setRoles(['Manager', 'Member'])
-        self.portal.invokeFactory('Document', 'd1')
-        context = getattr(self.portal, 'd1')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
-        ILockable(context).lock()
-        self.login('Ano')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
+    def test_anonymous_locked_icon_not_locked(self):
+        self.logout()
+        viewlet = self._get_viewlet()
         self.assertEqual(viewlet.locked_icon(), "")
 
-    def test_locked_icon(self):
-        request = self.app.REQUEST
-        self.setRoles(['Manager', 'Member'])
-        self.portal.invokeFactory('Document', 'd1')
-        context = getattr(self.portal, 'd1')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
+    def test_anonymous_locked_icon_is_locked(self):
+        self.logout()
+        ILockable(self.context).lock()
+        viewlet = self._get_viewlet()
         self.assertEqual(viewlet.locked_icon(), "")
-        ILockable(context).lock()
+
+    def test_logged_in_locked_icon_not_locked(self):
+        viewlet = self._get_viewlet()
+        self.assertEqual(viewlet.locked_icon(), "")
+
+    def test_logged_in_locked_icon_is_locked(self):
+        viewlet = self._get_viewlet()
+        ILockable(self.context).lock()
         lockIconUrl = '<img src="http://nohost/plone/lock_icon.png" alt="" \
 title="Locked" height="16" width="16" />'
         self.assertEqual(viewlet.locked_icon(), lockIconUrl)
 
     def test_pub_date(self):
-        request = self.app.REQUEST
-        self.login('Alan')
-        self.portal.invokeFactory('Document', 'd1')
-        context = getattr(self.portal, 'd1')
-
         # configure our portal to enable publication date on pages globally on
         # the site
-        properties = getToolByName(context, 'portal_properties')
+        properties = getToolByName(self.portal, 'portal_properties')
         site_properties = getattr(properties, 'site_properties')
         site_properties.displayPublicationDateInByline = True
 
-        self.login('Ano')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
+        self.logout()
+        viewlet = self._get_viewlet()
 
         # publication date should be None as there is not Effective date set
         # for our document yet
@@ -124,7 +109,7 @@ def test_pub_date(self):
 
         # now set effective date for our document
         effective = DateTime()
-        context.setEffectiveDate(effective)
+        self.context.setEffectiveDate(effective)
         self.assertEqual(viewlet.pub_date(), DateTime(effective.ISO8601()))
 
         # now switch off publication date globally on the site and see if


Repository: plone.app.layout
Branch: refs/heads/master
Date: 2015-01-25T16:56:29+01:00
Author: Jure Cerjak (jcerjak) <jcerjak@termitnjak.si>
Commit: https://github.com/plone/plone.app.layout/commit/24d7cb66d2ce259e2510b54777935964e1f669ae

remove unused imports, reorganize imports in test_content

Files changed:
M plone/app/layout/viewlets/tests/test_content.py

diff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py
index c459ded..d7f4476 100644
--- a/plone/app/layout/viewlets/tests/test_content.py
+++ b/plone/app/layout/viewlets/tests/test_content.py
@@ -1,18 +1,15 @@
-from z3c.relationfield import RelationValue
-from zope.component import getUtility
-from zope.component.hooks import getSite
-from zope.interface import Interface
-from zope.intid.interfaces import IIntIds
+from DateTime import DateTime
 from plone.app.layout.viewlets.tests.base import ViewletsTestCase
 from plone.app.layout.viewlets.content import DocumentBylineViewlet
 from plone.app.layout.viewlets.content import ContentRelatedItems
-from plone.locking.tests import addMember
 from plone.locking.interfaces import ILockable
 from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import ISecuritySchema
-
-from DateTime import DateTime
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ISecuritySchema
+from z3c.relationfield import RelationValue
+from zope.component import getUtility
+from zope.interface import Interface
+from zope.intid.interfaces import IIntIds
 
 try:
     import pkg_resources


Repository: plone.app.layout
Branch: refs/heads/master
Date: 2015-02-27T07:49:09+01:00
Author: Timo Stollenwerk () <contact@timostollenwerk.net>
Commit: https://github.com/plone/plone.app.layout/commit/8d8c3cc5d53b8943ce16ef96d9b6d0d98a14eae5

Merge branch 'master' into plip10359-security-controlpanel

Conflicts:
	CHANGES.rst

Files changed:
A plone/app/layout/globals/tests/test_pattern_settings.py
M CHANGES.rst
M plone/app/layout/globals/patterns_settings.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/searchbox.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 2e0a425..9c87a70 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,12 @@ Changelog
   properties (see https://github.com/plone/Products.CMFPlone/issues/216).
   [jcerjak]
 
+- use livesearch pattern
+  [vangheem]
+
+- use configuration registry pattern options
+  [vangheem]
+
 - Added support for site logos stored in the portal registry via the site
   control panel for the logo viewlet with a fallback to the ``OFS.Image``
   based ``logo.png`` file. Removed support of long-gone
diff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py
index f72115d..669bbd1 100644
--- a/plone/app/layout/globals/patterns_settings.py
+++ b/plone/app/layout/globals/patterns_settings.py
@@ -2,12 +2,12 @@
 
 from zope.interface import implements
 from zope.component import getAdapters
-from zope.component.hooks import getSite
 from zope.publisher.browser import BrowserView
 from .interfaces import IPatternsSettingsRenderer
 from Products.CMFPlone.interfaces import IPatternsSettings
-
-import json
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import getMultiAdapter
 
 
 class PatternsSettings(BrowserView):
@@ -17,20 +17,28 @@ class PatternsSettings(BrowserView):
     implements(IPatternsSettingsRenderer)
 
     def __call__(self):
-        modal_options = {
-            'actionOptions': {
-                'displayInModal': False,
-            }
-        }
-        base_url = getSite().absolute_url()
+        portal_state = getMultiAdapter(
+            (self.context, self.request), name=u'plone_portal_state')
+        # do not use getSite because it's possible it could be different
+        # than the actual portal url
+        base_url = portal_state.portal_url()
         result = {
-            'data-pat-modal': json.dumps(modal_options),
             'data-base-url': self.context.absolute_url(),
             'data-portal-url': base_url,
             'data-i18ncatalogurl': base_url + '/plonejsi18n'
         }
+
+        # first, check for any adapters that need pattern data defined
         adapters = getAdapters((self.context, self.request, None), IPatternsSettings)
         [result.update(x[1]()) for x in adapters]
-        return result
 
+        # Resources Registered UI patterns can override adapters
+        registry = getUtility(IRegistry)
+        try:
+            pattern_options = registry['plone.patternoptions']
+        except (AttributeError, KeyError):
+            pattern_options = {}
+        for key, value in pattern_options.items():
+            result['data-pat-' + key] = value
 
+        return result
diff --git a/plone/app/layout/globals/tests/test_pattern_settings.py b/plone/app/layout/globals/tests/test_pattern_settings.py
new file mode 100644
index 0000000..a17cc1a
--- /dev/null
+++ b/plone/app/layout/globals/tests/test_pattern_settings.py
@@ -0,0 +1,33 @@
+from plone.app.layout.globals.tests.base import GlobalsTestCase
+from plone.app.layout.globals.patterns_settings import PatternsSettings
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+
+
+class TestPatternSettings(GlobalsTestCase):
+    """Ensure that the basic redirector setup is successful.
+    """
+
+    def testShouldReturnCorrectType(self):
+        settings = PatternsSettings(self.folder, self.app.REQUEST)
+        result = settings()
+        self.assertEquals(type(result), dict)
+        for key, value in result.items():
+            self.assertTrue(isinstance(key, basestring))
+            self.assertTrue(isinstance(value, basestring))
+
+    def testUrls(self):
+        settings = PatternsSettings(self.folder, self.app.REQUEST)
+        result = settings()
+        self.assertEquals(result['data-base-url'], self.folder.absolute_url())
+        self.assertEquals(result['data-portal-url'], self.portal.absolute_url())
+
+    def testPatternOptions(self):
+        registry = getUtility(IRegistry)
+        registry['plone.patternoptions'] = {
+            'foo': u'{"foo": "bar"}'
+        }
+
+        settings = PatternsSettings(self.folder, self.app.REQUEST)
+        result = settings()
+        self.assertEquals(result['data-pat-foo'], u'{"foo": "bar"}')
\ No newline at end of file
diff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py
index 3ec1283..48d1534 100644
--- a/plone/app/layout/links/viewlets.py
+++ b/plone/app/layout/links/viewlets.py
@@ -112,12 +112,13 @@ def update(self):
                     settings = registry.forInterface(ISiteSyndicationSettings)
                 except KeyError:
                     return
-                for uid in settings.site_rss_items:
-                    obj = uuidToObject(uid)
-                    if obj is not None:
-                        self.rsslinks.extend(self.getRssLinks(obj))
-                self.rsslinks.extend(self.getRssLinks(
-                    self.portal_state.portal()))
+                if settings.site_rss_items:
+                    for uid in settings.site_rss_items:
+                        obj = uuidToObject(uid)
+                        if obj is not None:
+                            self.rsslinks.extend(self.getRssLinks(obj))
+                    self.rsslinks.extend(self.getRssLinks(
+                        self.portal_state.portal()))
         else:
             if util.context_enabled():
                 self.rsslinks.extend(self.getRssLinks(self.context))
diff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py
index 0f65305..4a05b72 100644
--- a/plone/app/layout/viewlets/common.py
+++ b/plone/app/layout/viewlets/common.py
@@ -17,6 +17,7 @@
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import ISiteSchema
+from Products.CMFPlone.interfaces import ISearchSchema
 from Products.CMFPlone.utils import safe_unicode
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five.browser import BrowserView
@@ -175,13 +176,9 @@ def update(self):
         context_state = getMultiAdapter((self.context, self.request),
                                         name=u'plone_context_state')
 
-        props = getToolByName(self.context, 'portal_properties')
-        livesearch = props.site_properties.getProperty(
-            'enable_livesearch', False)
-        if livesearch:
-            self.search_input_id = "searchGadget"
-        else:
-            self.search_input_id = "nolivesearchGadget"  # don't use "" here!
+        registry = getUtility(IRegistry)
+        search_settings = registry.forInterface(ISearchSchema, prefix='plone')
+        self.livesearch = search_settings.enable_livesearch
 
         folder = context_state.folder()
         self.folder_path = '/'.join(folder.getPhysicalPath())
diff --git a/plone/app/layout/viewlets/searchbox.pt b/plone/app/layout/viewlets/searchbox.pt
index 879a6d7..bde537c 100644
--- a/plone/app/layout/viewlets/searchbox.pt
+++ b/plone/app/layout/viewlets/searchbox.pt
@@ -1,30 +1,30 @@
 <div id="portal-searchbox"
      i18n:domain="plone"
-     tal:define="navigation_root_url view/navigation_root_url;
-                 search_input_id view/search_input_id;">
+     tal:define="navigation_root_url view/navigation_root_url;">
 
     <form id="searchGadget_form"
           action="@@search"
           role="search"
           tal:attributes="action string:${navigation_root_url}/@@search;
-                          id string:${search_input_id}_form;">
+                          data-pat-livesearch string:ajaxUrl:${navigation_root_url}/@@ajax-search;
+                          class python: view.livesearch and 'pat-livesearch' or ''">
 
         <div class="LSBox">
         <label class="hiddenStructure"
-               tal:attributes="for search_input_id"
+               for="searchGadget"
                i18n:translate="text_search">Search Site</label>
 
         <input name="SearchableText"
                type="text"
                size="18"
                value=""
+               id="searchGadget"
                title="Search Site"
                placeholder="Search Site"
                accesskey="4"
                i18n:attributes="title title_search_site;
                                 placeholder title_search_site"
-               tal:attributes="value request/form/SearchableText|nothing;
-                               id search_input_id"
+               tal:attributes="value request/form/SearchableText|nothing;"
                class="searchField" />
 
         <input class="searchButton"
@@ -46,8 +46,6 @@
                 only in current section
             </label>
         </div>
-
-        <div class="LSResult" id="LSResult"><div class="LSShadow" id="LSShadow"></div></div>
         </div>
     </form>
 


Repository: plone.app.layout
Branch: refs/heads/master
Date: 2015-02-27T10:10:33+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.layout/commit/1cdded080d5ee37e532cfdfc621a7943d4fc5584

Merge pull request #39 from plone/plip10359-security-controlpanel

Plip10359 security controlpanel

Files changed:
M CHANGES.rst
M plone/app/layout/links/viewlets.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/tests/test_content.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7051605..9c87a70 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 2.5.4 (unreleased)
 ------------------
 
+- Read ``allow_anon_views_about`` settings from the registry instead of portal
+  properties (see https://github.com/plone/Products.CMFPlone/issues/216).
+  [jcerjak]
+
 - use livesearch pattern
   [vangheem]
 
diff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py
index 238c61d..48d1534 100644
--- a/plone/app/layout/links/viewlets.py
+++ b/plone/app/layout/links/viewlets.py
@@ -13,6 +13,7 @@
 from zope.schema.interfaces import IVocabularyFactory
 from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.interfaces.syndication import IFeedSettings
 from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings
 
@@ -62,12 +63,13 @@ def update(self):
                                      name='plone_tools')
 
     def show(self):
-        properties = self.tools.properties()
-        site_properties = getattr(properties, 'site_properties')
         anonymous = self.portal_state.anonymous()
-        allowAnonymousViewAbout = site_properties.getProperty(
-            'allowAnonymousViewAbout', True)
-        return not anonymous or allowAnonymousViewAbout
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ISecuritySchema,
+            prefix='plone',
+        )
+        return not anonymous or settings.allow_anon_views_about
 
     def render(self):
         if self.show():
diff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py
index 15adcbd..7ac2abf 100644
--- a/plone/app/layout/viewlets/content.py
+++ b/plone/app/layout/viewlets/content.py
@@ -6,14 +6,17 @@
 from AccessControl import getSecurityManager
 from Acquisition import aq_inner
 from DateTime import DateTime
+from plone.registry.interfaces import IRegistry
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.CMFCore.utils import _checkPermission
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.WorkflowCore import WorkflowException
 from Products.CMFEditions.Permissions import AccessPreviousVersions
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.utils import base_hasattr
 from Products.CMFPlone.utils import log
+from zope.component import getUtility
 
 from plone.app.layout.globals.interfaces import IViewView
 from plone.app.layout.viewlets import ViewletBase
@@ -64,11 +67,12 @@ def update(self):
         self.has_pam = HAS_PAM
 
     def show(self):
-        properties = getToolByName(self.context, 'portal_properties')
-        site_properties = getattr(properties, 'site_properties')
-        allowAnonymousViewAbout = site_properties.getProperty(
-            'allowAnonymousViewAbout', True)
-        return not self.anonymous or allowAnonymousViewAbout
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ISecuritySchema,
+            prefix='plone',
+        )
+        return not self.anonymous or settings.allow_anon_views_about
 
     def show_history(self):
         has_access_preview_versions_permission = _checkPermission(
diff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py
index 2e32def..d7f4476 100644
--- a/plone/app/layout/viewlets/tests/test_content.py
+++ b/plone/app/layout/viewlets/tests/test_content.py
@@ -1,16 +1,15 @@
-from z3c.relationfield import RelationValue
-from zope.component import getUtility
-from zope.component.hooks import getSite
-from zope.interface import Interface
-from zope.intid.interfaces import IIntIds
+from DateTime import DateTime
 from plone.app.layout.viewlets.tests.base import ViewletsTestCase
 from plone.app.layout.viewlets.content import DocumentBylineViewlet
 from plone.app.layout.viewlets.content import ContentRelatedItems
-from plone.locking.tests import addMember
 from plone.locking.interfaces import ILockable
-
-from DateTime import DateTime
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ISecuritySchema
+from z3c.relationfield import RelationValue
+from zope.component import getUtility
+from zope.interface import Interface
+from zope.intid.interfaces import IIntIds
 
 try:
     import pkg_resources
@@ -32,51 +31,74 @@ class TestDocumentBylineViewletView(ViewletsTestCase):
     Test the document by line viewlet
     """
     def afterSetUp(self):
-        portal = getSite()
-        addMember(portal, 'Alan', roles=('Member', 'Manager'))
-        addMember(portal, 'Ano', roles=())
+        self.folder.invokeFactory('Document', 'doc1', title='Document 1')
+        self.context = self.folder['doc1']
+
+        registry = getUtility(IRegistry)
+        self.security_settings = registry.forInterface(
+            ISecuritySchema,
+            prefix='plone',
+        )
 
-    def test_anonymous_locked_icon(self):
+    def _get_viewlet(self):
         request = self.app.REQUEST
-        self.setRoles(['Manager', 'Member'])
-        self.portal.invokeFactory('Document', 'd1')
-        context = getattr(self.portal, 'd1')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
-        ILockable(context).lock()
-        self.login('Ano')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
+        viewlet = DocumentBylineViewlet(self.context, request, None, None)
         viewlet.update()
+        return viewlet
+
+    def test_show_anonymous_not_allowed(self):
+        self.security_settings.allow_anon_views_about = False
+        self.logout()
+        viewlet = self._get_viewlet()
+        self.assertFalse(viewlet.show())
+
+    def test_show_anonymous_allowed(self):
+        self.security_settings.allow_anon_views_about = True
+        self.logout()
+        viewlet = self._get_viewlet()
+        self.assertTrue(viewlet.show())
+
+    def test_show_logged_in_anonymous_not_allowed(self):
+        self.security_settings.allow_anon_views_about = False
+        viewlet = self._get_viewlet()
+        self.assertTrue(viewlet.show())
+
+    def test_show_logged_in_anonymous_allowed(self):
+        self.security_settings.allow_anon_views_about = True
+        viewlet = self._get_viewlet()
+        self.assertTrue(viewlet.show())
+
+    def test_anonymous_locked_icon_not_locked(self):
+        self.logout()
+        viewlet = self._get_viewlet()
         self.assertEqual(viewlet.locked_icon(), "")
 
-    def test_locked_icon(self):
-        request = self.app.REQUEST
-        self.setRoles(['Manager', 'Member'])
-        self.portal.invokeFactory('Document', 'd1')
-        context = getattr(self.portal, 'd1')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
+    def test_anonymous_locked_icon_is_locked(self):
+        self.logout()
+        ILockable(self.context).lock()
+        viewlet = self._get_viewlet()
         self.assertEqual(viewlet.locked_icon(), "")
-        ILockable(context).lock()
+
+    def test_logged_in_locked_icon_not_locked(self):
+        viewlet = self._get_viewlet()
+        self.assertEqual(viewlet.locked_icon(), "")
+
+    def test_logged_in_locked_icon_is_locked(self):
+        viewlet = self._get_viewlet()
+        ILockable(self.context).lock()
         lockIconUrl = '<img src="http://nohost/plone/lock_icon.png" alt="" \
 title="Locked" height="16" width="16" />'
         self.assertEqual(viewlet.locked_icon(), lockIconUrl)
 
     def test_pub_date(self):
-        request = self.app.REQUEST
-        self.login('Alan')
-        self.portal.invokeFactory('Document', 'd1')
-        context = getattr(self.portal, 'd1')
-
         # configure our portal to enable publication date on pages globally on
         # the site
-        properties = getToolByName(context, 'portal_properties')
+        properties = getToolByName(self.portal, 'portal_properties')
         site_properties = getattr(properties, 'site_properties')
         site_properties.displayPublicationDateInByline = True
 
-        self.login('Ano')
-        viewlet = DocumentBylineViewlet(context, request, None, None)
-        viewlet.update()
+        self.logout()
+        viewlet = self._get_viewlet()
 
         # publication date should be None as there is not Effective date set
         # for our document yet
@@ -84,7 +106,7 @@ def test_pub_date(self):
 
         # now set effective date for our document
         effective = DateTime()
-        context.setEffectiveDate(effective)
+        self.context.setEffectiveDate(effective)
         self.assertEqual(viewlet.pub_date(), DateTime(effective.ISO8601()))
 
         # now switch off publication date globally on the site and see if


