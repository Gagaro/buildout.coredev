Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2014-08-01T15:03:18+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/9ac30e9b1b52cc5184800a5a05b79c0e58d30497

add buildout to run tests

Files changed:
A bootstrap.py
A buildout.cfg
M .gitignore

diff --git a/.gitignore b/.gitignore
index c2ea8a9..cf72c30 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,8 @@
 *.pyo
 build
 dist
+lib
+include
+bin
+develop-eggs
+parts
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 0000000..ed57894
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,178 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+tmpeggs = tempfile.mkdtemp()
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep 
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("-v", "--version", help="use a specific zc.buildout version")
+
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+
+
+options, args = parser.parse_args()
+
+######################################################################
+# load/install setuptools
+
+try:
+    if options.allow_site_packages:
+        import setuptools
+        import pkg_resources
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions 
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'. 
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+cmd = [sys.executable, '-c',
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+requirement = 'zc.buildout'
+version = options.version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        for part in parsed_version:
+            if (part[:1] == '*') and (part not in _final_parts):
+                return False
+        return True
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..d79e02a
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,8 @@
+[buildout]
+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-4.x.cfg
+
+package-name = Products.CMFDynamicViewFTI
+package-extras = [test]
+
+[versions]
+Products.CMFDynamicViewFTI = 


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2014-08-01T15:36:56+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/d259e6463b65bcd26d2bb7e06d576a37f6691d4b

add omelette

Files changed:
M buildout.cfg

diff --git a/buildout.cfg b/buildout.cfg
index d79e02a..cc8941f 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -4,5 +4,11 @@ extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master
 package-name = Products.CMFDynamicViewFTI
 package-extras = [test]
 
+parts += omelette
+
 [versions]
 Products.CMFDynamicViewFTI = 
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs = ${test:eggs}


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2014-08-01T15:41:49+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/242ec6a8657f259c017f86a05672ddfa8b15629c

tests when rename, delete, cut a default page

Files changed:
M Products/CMFDynamicViewFTI/tests/test_fti.py

diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index c5cf02a..c540afb 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -197,9 +197,47 @@ def test_DocumentEmptyLayoutBug(self):
         self.assertEqual(response.getStatus(), 200)
 
 
+class TestModifyDefaultPage(CMFDVFTITestCase.FunctionalTestCase):
+    # Finally, here is why we did all this...
+
+    def afterSetUp(self):
+        # Make a DynFolder
+        self.folder.invokeFactory('DynFolder', id='dynfolder')
+        dynfolder = self.dynfolder = self.folder.dynfolder
+        dynfolder = self.dynfolder
+        dynfolder.invokeFactory('DynDocument', id='default_document')
+        dynfolder.default_page = 'default_document'
+
+    def test_rename_default_page(self):
+        import transaction
+        transaction.commit()
+        dynfolder = self.dynfolder
+        dynfolder.manage_renameObject('default_document', 'renamed_default')
+        self.assertFalse('default_document' in dynfolder.objectIds())
+        self.assertTrue('renamed_default' in dynfolder.objectIds())
+        self.assertEqual(dynfolder.default_page, 'renamed_default')
+
+    def test_delete_default_page(self):
+        dynfolder = self.dynfolder
+        dynfolder.manage_delObjects(['default_document'])
+        self.assertFalse('default_document' in dynfolder.objectIds())
+        self.assertEqual(dynfolder.default_page, '')
+
+    def test_cut_default_page(self):
+        import transaction
+        transaction.commit()
+        dynfolder = self.dynfolder
+        clipboard = dynfolder.manage_cutObjects(['default_document'])
+        self.folder.manage_pasteObjects(clipboard)
+        self.assertFalse('default_document' in dynfolder.objectIds())
+        self.assertTrue('default_document' in self.folder.objectIds())
+        self.assertEqual(dynfolder.default_page, '')
+
+
 def test_suite():
     from unittest import TestSuite, makeSuite
     suite = TestSuite()
     suite.addTest(makeSuite(TestFTI))
     suite.addTest(makeSuite(TestEmptyLayoutBug))
+    suite.addTest(makeSuite(TestModifyDefaultPage))
     return suite


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2014-08-01T18:13:58+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/2a1ea714290d2a4b40b5f1e6eeebff858efb8fe6

make tests pass

Files changed:
A Products/CMFDynamicViewFTI/content_for_tests.py
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/configure.zcml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
M Products/CMFDynamicViewFTI/tests/test_fti.py

diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index 7141eea..f2627b8 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -3,9 +3,33 @@
 # $Id$
 
 from Products.CMFCore import utils as cmf_utils
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import AddPortalFolders
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
+from Products.CMFDynamicViewFTI import content_for_tests
+
 
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
-    cmf_utils.registerIcon(DynamicViewTypeInformation, 'images/typeinfo.gif', globals())
+    cmf_utils.registerIcon(
+        DynamicViewTypeInformation, 'images/typeinfo.gif', globals()
+    )
+
+    context.registerClass(
+        content_for_tests.DynFolder,
+        permission=AddPortalFolders,
+        constructors=(('addDynFolder',
+                       content_for_tests.addDynFolder),
+                      ),
+        icon='images/typeinfo.gif'
+        )
+
+    context.registerClass(
+        content_for_tests.DynDocument,
+        permission=AddPortalContent,
+        constructors=(('addDynDocument',
+                       content_for_tests.addDynDocument),
+                      ),
+        icon='images/typeinfo.gif'
+        )
     return
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index 09356e9..a8f1b1b 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -229,3 +229,19 @@ def getAvailableLayouts(self):
         return result
 
 InitializeClass(BrowserDefaultMixin)
+
+
+def check_default_page(obj, event):
+    container = obj
+    default_page_id = container.getDefaultPage()
+    if default_page_id and not (default_page_id in container.objectIds()):
+        ISelectableBrowserDefault(container).setDefaultPage(None)
+
+def rename_default_page(obj, event):
+    newParent = event.newParent
+    if newParent != event.oldParent:
+        return
+    elif ISelectableBrowserDefault.providedBy(newParent):
+        default_page_id = newParent.getProperty('default_page', '')
+        if default_page_id == event.oldName:
+            ISelectableBrowserDefault(newParent).setDefaultPage(event.newName)
diff --git a/Products/CMFDynamicViewFTI/configure.zcml b/Products/CMFDynamicViewFTI/configure.zcml
index e84a469..6d82a59 100644
--- a/Products/CMFDynamicViewFTI/configure.zcml
+++ b/Products/CMFDynamicViewFTI/configure.zcml
@@ -25,4 +25,14 @@
     title="Modify view template"
     />
 
+  <subscriber 
+    for=".interfaces.ISelectableBrowserDefault
+         zope.container.interfaces.IContainerModifiedEvent"
+    handler=".browserdefault.check_default_page" />
+
+  <subscriber 
+    for="*
+         zope.lifecycleevent.interfaces.IObjectMovedEvent"
+    handler=".browserdefault.rename_default_page" />
+
 </configure>
diff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py
new file mode 100644
index 0000000..ba77e9b
--- /dev/null
+++ b/Products/CMFDynamicViewFTI/content_for_tests.py
@@ -0,0 +1,30 @@
+from AccessControl.SecurityInfo import ClassSecurityInfo
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import AddPortalFolders
+from Products.CMFCore.PortalFolder import PortalFolder
+from Products.CMFDefault.Document import Document
+from App.class_init import InitializeClass
+
+from browserdefault import BrowserDefaultMixin
+
+
+class DynFolder(PortalFolder, BrowserDefaultMixin):
+    pass
+
+
+class DynDocument(Document, BrowserDefaultMixin):
+    pass
+
+
+def addDynFolder(self, id, title='', REQUEST=None):
+    """Add a new DynFolder object with id *id*.
+    """
+    ob = DynFolder(id, title)
+    self._setObject(id, ob, suppress_events=True)
+
+
+def addDynDocument(self, id, title='', REQUEST=None):
+    """Add a new DynDocument object with id *id*.
+    """
+    ob = DynDocument(id, title)
+    self._setObject(id, ob, suppress_events=True)
diff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
index 4bc0530..c4e15c2 100644
--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
@@ -7,8 +7,8 @@
     name="description">A page in the site. Can contain rich text.</property>
  <property name="content_icon">document_icon.gif</property>
  <property name="content_meta_type">DynDocument</property>
- <property name="product">CMFDefault</property>
- <property name="factory">addDocument</property>
+ <property name="product">CMFDynamicViewFTI</property>
+ <property name="factory">addDynDocument</property>
  <property name="immediate_view">metadata_edit_form</property>
  <property name="global_allow">True</property>
  <property name="filter_content_types">True</property>
diff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
index 3aa703d..5d7d6c6 100644
--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
@@ -5,8 +5,8 @@
  <property name="title">DynFolder</property>
  <property name="content_icon">folder_icon.gif</property>
  <property name="content_meta_type">DynFolder</property>
- <property name="product">CMFCore</property>
- <property name="factory">manage_addPortalFolder</property>
+ <property name="product">CMFDynamicViewFTI</property>
+ <property name="factory">addDynFolder</property>
  <property name="immediate_view">folder_edit_form</property>
  <property name="global_allow">True</property>
  <property name="filter_content_types">False</property>
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index c540afb..d51e5e8 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -206,32 +206,35 @@ def afterSetUp(self):
         dynfolder = self.dynfolder = self.folder.dynfolder
         dynfolder = self.dynfolder
         dynfolder.invokeFactory('DynDocument', id='default_document')
-        dynfolder.default_page = 'default_document'
+        dynfolder.setDefaultPage('default_document')
 
     def test_rename_default_page(self):
+        dynfolder = self.dynfolder
+        self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
         import transaction
         transaction.commit()
-        dynfolder = self.dynfolder
         dynfolder.manage_renameObject('default_document', 'renamed_default')
         self.assertFalse('default_document' in dynfolder.objectIds())
         self.assertTrue('renamed_default' in dynfolder.objectIds())
-        self.assertEqual(dynfolder.default_page, 'renamed_default')
+        self.assertEqual(dynfolder.getDefaultPage(), 'renamed_default')
 
     def test_delete_default_page(self):
         dynfolder = self.dynfolder
+        self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
         dynfolder.manage_delObjects(['default_document'])
         self.assertFalse('default_document' in dynfolder.objectIds())
-        self.assertEqual(dynfolder.default_page, '')
+        self.assertEqual(dynfolder.getDefaultPage(), None)
 
     def test_cut_default_page(self):
+        dynfolder = self.dynfolder
+        self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
         import transaction
         transaction.commit()
-        dynfolder = self.dynfolder
         clipboard = dynfolder.manage_cutObjects(['default_document'])
         self.folder.manage_pasteObjects(clipboard)
         self.assertFalse('default_document' in dynfolder.objectIds())
         self.assertTrue('default_document' in self.folder.objectIds())
-        self.assertEqual(dynfolder.default_page, '')
+        self.assertEqual(dynfolder.getDefaultPage(), None)
 
 
 def test_suite():


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2014-08-01T18:25:09+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/6428274a6d8d27e7a728116138e243a7f5ba7fb6

be explicit about dependency

Files changed:
M Products/CMFDynamicViewFTI/configure.zcml

diff --git a/Products/CMFDynamicViewFTI/configure.zcml b/Products/CMFDynamicViewFTI/configure.zcml
index 6d82a59..0689a8d 100644
--- a/Products/CMFDynamicViewFTI/configure.zcml
+++ b/Products/CMFDynamicViewFTI/configure.zcml
@@ -4,6 +4,8 @@
    xmlns:five="http://namespaces.zope.org/five"
    i18n_domain="cmf_default">
 
+  <include package="Products.CMFCore" />
+
   <browser:page
      for="zope.browser.interfaces.IAdding"
      name="addDVFactoryTypeInformation.html"


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-03-17T09:25:16+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/28330dd88dc06510e5a135311bfaef3a875011cd

Merge branch 'master' into paste_delete_rename

Conflicts:
	Products/CMFDynamicViewFTI/tests/test_fti.py

Files changed:
A README.rst
M CHANGES.txt
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browser/typeinfo.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interface.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/browserdefault.zcml
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M setup.py
D README.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index d2f3def..78e4019 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,12 +1,25 @@
 Changelog
 =========
 
-4.0.6 (unreleased)
+4.0.7 (unreleased)
 ------------------
 
 - Nothing changed yet.
 
 
+4.0.6 (2015-03-13)
+------------------
+
+- Ported tests to plone.app.testing
+  [tomgross]
+
+- Removed BBB interface.py module
+  [tomgross]
+
+- pep8ify
+  [tomgross]
+
+
 4.0.5 (2013-05-23)
 ------------------
 
diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index f2627b8..46dcb53 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -9,6 +9,7 @@
 from Products.CMFDynamicViewFTI import content_for_tests
 
 
+
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
     cmf_utils.registerIcon(
diff --git a/Products/CMFDynamicViewFTI/browser/typeinfo.py b/Products/CMFDynamicViewFTI/browser/typeinfo.py
index 80d341d..62f9140 100644
--- a/Products/CMFDynamicViewFTI/browser/typeinfo.py
+++ b/Products/CMFDynamicViewFTI/browser/typeinfo.py
@@ -7,10 +7,10 @@
 from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView
 from Products.CMFDynamicViewFTI import DynamicViewTypeInformation
 
+
 class DVFactoryTypeInformationAddView(FactoryTypeInformationAddView):
     """See FactoryTypeInformationAddView that does all the job"""
 
     klass = DynamicViewTypeInformation
 
     description = u'A dynamic view type information object defines a portal type.'
-
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index a8f1b1b..d6300a4 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -14,7 +14,6 @@
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Acquisition import aq_base
-from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.permissions import View
 
@@ -26,6 +25,7 @@
 _marker = object()
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
+
 class BrowserDefaultMixin(Base):
     """Mixin class for content types using the dynamic view FTI
 
@@ -39,13 +39,13 @@ class BrowserDefaultMixin(Base):
 
     _at_fti_meta_type = fti_meta_type
     aliases = {
-        '(Default)'  : '(dynamic view)',
-        'view'       : '(selected layout)',
-        'edit'       : 'base_edit',
-        'properties' : 'base_metadata',
-        'sharing'    : 'folder_localrole_form',
-        'gethtml'    : '',
-        'mkdir'      : '',
+        '(Default)': '(dynamic view)',
+        'view': '(selected layout)',
+        'edit': 'base_edit',
+        'properties': 'base_metadata',
+        'sharing': 'folder_localrole_form',
+        'gethtml': '',
+        'mkdir': '',
         }
 
     default_view = "base_view"
@@ -54,6 +54,7 @@ class BrowserDefaultMixin(Base):
     security = ClassSecurityInfo()
 
     security.declareProtected(View, 'defaultView')
+
     def defaultView(self, request=None):
         """
         Get the actual view to use. If a default page is set, its id will
@@ -66,6 +67,7 @@ def defaultView(self, request=None):
             return fti.defaultView(self)
 
     security.declareProtected(View, '__call__')
+
     def __call__(self):
         """
         Resolve and return the selected view template applied to the object.
@@ -75,6 +77,7 @@ def __call__(self):
         return template()
 
     security.declareProtected(View, 'getDefaultPage')
+
     def getDefaultPage(self):
         """Return the id of the default page, or None if none is set.
 
@@ -91,6 +94,7 @@ def getDefaultPage(self):
                 return fti.getDefaultPage(self, check_exists=True)
 
     security.declareProtected(View, 'getLayout')
+
     def getLayout(self, **kw):
         """Get the selected view method.
 
@@ -103,6 +107,7 @@ def getLayout(self, **kw):
             return fti.getViewMethod(self)
 
     security.declarePublic('canSetDefaultPage')
+
     def canSetDefaultPage(self):
         """Check if the user has permission to select a default page on this
         (folderish) item, and the item is folderish.
@@ -114,6 +119,7 @@ def canSetDefaultPage(self):
         return member.has_permission(ModifyViewTemplate, self)
 
     security.declareProtected(ModifyViewTemplate, 'setDefaultPage')
+
     def setDefaultPage(self, objectId):
         """Set the default page to display in this (folderish) object.
 
@@ -127,18 +133,19 @@ def setDefaultPage(self, objectId):
         if objectId is not None:
             new_page = getattr(self, objectId, None)
         if self.hasProperty('default_page'):
-            pages = self.getProperty('default_page','')
+            pages = self.getProperty('default_page', '')
             if isinstance(pages, (list, tuple)):
                 for page in pages:
                     old_page = getattr(self, page, None)
-                    if page is not None: break
+                    if page is not None:
+                        break
             elif isinstance(pages, str):
                 old_page = getattr(self, pages, None)
 
             if objectId is None:
                 self.manage_delProperties(['default_page'])
             else:
-                self.manage_changeProperties(default_page = objectId)
+                self.manage_changeProperties(default_page=objectId)
         else:
             if objectId is not None:
                 self.manage_addProperty('default_page', objectId, 'string')
@@ -149,6 +156,7 @@ def setDefaultPage(self, objectId):
                 old_page.reindexObject(['is_default_page'])
 
     security.declareProtected(ModifyViewTemplate, 'setLayout')
+
     def setLayout(self, layout):
         """Set the layout as the current view.
 
@@ -157,7 +165,7 @@ def setLayout(self, layout):
         turned off by calling setDefaultPage(None).
         """
         if not (layout and isinstance(layout, basestring)):
-            raise ValueError, ("layout must be a non empty string, got %s(%s)" %
+            raise ValueError("layout must be a non empty string, got %s(%s)" %
                                (layout, type(layout)))
 
         defaultPage = self.getDefaultPage()
@@ -165,13 +173,13 @@ def setLayout(self, layout):
             return
 
         if self.hasProperty('layout'):
-            self.manage_changeProperties(layout = layout)
+            self.manage_changeProperties(layout=layout)
         else:
             if getattr(aq_base(self), 'layout', _marker) is not _marker:
                 # Archetypes remains? clean up
                 old = self.layout
                 if old and not isinstance(old, basestring):
-                    raise RuntimeError, ("layout attribute exists on %s and is"
+                    raise RuntimeError("layout attribute exists on %s and is"
                                          "no string: %s" % (self, type(old)))
                 delattr(self, 'layout')
 
@@ -180,16 +188,18 @@ def setLayout(self, layout):
         self.setDefaultPage(None)
 
     security.declareProtected(View, 'getDefaultLayout')
+
     def getDefaultLayout(self):
         """Get the default layout method.
         """
         fti = self.getTypeInfo()
         if fti is None:
-            return "base_view" # XXX
+            return "base_view"  # XXX
         else:
             return fti.getDefaultViewMethod(self)
 
     security.declarePublic('canSetLayout')
+
     def canSetLayout(self):
         """Check if the current authenticated user is permitted to select a layout.
         """
@@ -198,6 +208,7 @@ def canSetLayout(self):
         return member.has_permission(ModifyViewTemplate, self)
 
     security.declareProtected(View, 'getAvailableLayouts')
+
     def getAvailableLayouts(self):
         """Get the layouts registered for this object from its FTI.
         """
diff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py
index 631fb2a..59ddadf 100644
--- a/Products/CMFDynamicViewFTI/fti.py
+++ b/Products/CMFDynamicViewFTI/fti.py
@@ -56,6 +56,7 @@ def om_has_key(context, key):
 
 fti_meta_type = 'Factory-based Type Information with dynamic views'
 
+
 class DynamicViewTypeInformation(FactoryTypeInformation):
     """FTI with dynamic views
 
@@ -68,13 +69,13 @@ class DynamicViewTypeInformation(FactoryTypeInformation):
     security = ClassSecurityInfo()
 
     _properties = FactoryTypeInformation._properties + (
-        { 'id': 'default_view', 'type': 'string', 'mode': 'w',
+        {'id': 'default_view', 'type': 'string', 'mode': 'w',
           'label': 'Default view method'
         },
-        { 'id': 'view_methods', 'type': 'lines', 'mode': 'w',
+        {'id': 'view_methods', 'type': 'lines', 'mode': 'w',
           'label': 'Available view methods'
         },
-        { 'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
+        {'id': 'default_view_fallback', 'type': 'boolean', 'mode': 'w',
           'label': 'Fall back to default view?'
         },
     )
@@ -94,26 +95,29 @@ def manage_changeProperties(self, **kw):
             # TODO: use view action
             self.default_view = default_view = self.immediate_view
         if not view_methods:
-            self.view_methods = view_methods = (default_view,)
+            self.view_methods = view_methods = (default_view, )
         if default_view and default_view not in view_methods:
             raise ValueError, "%s not in %s" % (default_view, view_methods)
 
     security.declareProtected(View, 'getDefaultViewMethod')
+
     def getDefaultViewMethod(self, context):
         """Get the default view method from the FTI
         """
         return str(self.default_view)
 
     security.declareProtected(View, 'getAvailableViewMethods')
+
     def getAvailableViewMethods(self, context):
         """Get a list of registered view methods
         """
         methods = self.view_methods
         if isinstance(methods, basestring):
-            methods = (methods,)
+            methods = (methods, )
         return tuple(methods)
 
     security.declareProtected(View, 'getViewMethod')
+
     def getViewMethod(self, context, enforce_available=False, check_exists=False):
         """Get view method (aka layout) name from context
 
@@ -140,6 +144,7 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):
         return layout
 
     security.declareProtected(View, 'getDefaultPage')
+
     def getDefaultPage(self, context, check_exists=False):
         """Get the default page from a folderish object
 
@@ -151,7 +156,7 @@ def getDefaultPage(self, context, check_exists=False):
         Return -- None for no default page or a string
         """
         if not getattr(aq_base(context), 'isPrincipiaFolderish', False):
-            return None # non folderish objects don't have a default page per se
+            return None  # non folderish objects don't have a default page per se
 
         default_page = getattr(aq_base(context), 'default_page', None)
 
@@ -171,6 +176,7 @@ def getDefaultPage(self, context, check_exists=False):
         return default_page
 
     security.declareProtected(View, 'defaultView')
+
     def defaultView(self, context):
         """Get the current view to use for an object. If a default page is  set,
         use that, else use the currently selected view method/layout.
@@ -189,6 +195,7 @@ def defaultView(self, context):
             return self.getViewMethod(context, check_exists=fallback)
 
     security.declarePublic('queryMethodID')
+
     def queryMethodID(self, alias, default=None, context=None):
         """ Query method ID by alias.
 
diff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py
index fdefee2..5d75c2e 100644
--- a/Products/CMFDynamicViewFTI/interface.py
+++ b/Products/CMFDynamicViewFTI/interface.py
@@ -1,3 +1,4 @@
-# BBB module will be removed at some point
+# BBB module will be removed at some point. We will still need it as long as
+# we plan to support Plone 4.3.x
 from Products.CMFDynamicViewFTI.interfaces import *
 
diff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py
index c4f39b2..9d0f94a 100644
--- a/Products/CMFDynamicViewFTI/interfaces.py
+++ b/Products/CMFDynamicViewFTI/interfaces.py
@@ -2,6 +2,7 @@
 
 from Products.CMFCore.interfaces import ITypeInformation
 
+
 class IDynamicViewTypeInformation(ITypeInformation):
     """Interface for FTI with dynamic views
 
@@ -12,7 +13,7 @@ def getAvailableViewMethods(context):
         """Get a list of registered view methods
         """
 
-    def getViewMethod(context, enforce_available = True):
+    def getViewMethod(context, enforce_available=True):
         """Get view method name from context
 
         Return -- view method from context or default view name
@@ -44,6 +45,7 @@ def defaultView(context):
         Return -- a string containing the name of the layout
         """
 
+
 class IBrowserDefault(Interface):
     """Content supporting different views on a per-instance basis.
     
diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
index d709adc..373c6ac 100644
--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
@@ -1,34 +1,43 @@
 #
 # CMFDVFTITestCase
 #
-
-from Products.CMFTestCase.ctc import *
-from Products.CMFTestCase.layer import onsetup
+from plone.app.testing import bbb
+from plone.app import testing
 
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.GenericSetup import EXTENSION, profile_registry
 
-installProduct('CMFDynamicViewFTI')
 
-@onsetup
-def setupSampleTypeProfile():
-    profile_registry.registerProfile('CMFDVFTI_sampletypes',
-        'CMFDynamicViewFTI Sample Content Types',
-        'Extension profile including CMFDVFTI sample content types',
-        'profiles/sample_types',
-        'CMFDynamicViewFTI',
-        EXTENSION,
-        for_=ISiteRoot)
+class PloneTestCaseFixture(bbb.PloneTestCaseFixture):
 
-setupSampleTypeProfile()
-setupCMFSite(extension_profiles=['CMFDynamicViewFTI:CMFDVFTI_sampletypes'])
+    defaultBases = (bbb.PTC_FIXTURE, )
 
-class CMFDVFTITestCase(CMFTestCase):
-    """This is a stub now, but in case you want to try
-       something fancy on Your Branch (tm), put it here.
-    """
+    def setUpZope(self, app, configurationContext):
+        profile_registry.registerProfile('CMFDVFTI_sampletypes',
+            'CMFDynamicViewFTI Sample Content Types',
+            'Extension profile including CMFDVFTI sample content types',
+            'profiles/sample_types',
+            'CMFDynamicViewFTI',
+            EXTENSION,
+            for_=ISiteRoot)
+        import Products.CMFDynamicViewFTI.tests
+        self.loadZCML(name='browserdefault.zcml',
+                      package=Products.CMFDynamicViewFTI.tests)
+
+    def setUpPloneSite(self, portal):
+        self.applyProfile(portal, 'CMFDynamicViewFTI:CMFDVFTI_sampletypes')
 
-class FunctionalTestCase(Functional, CMFTestCase):
+    def tearDownZope(self, app):
+        pass
+
+CDV_FIXTURE = PloneTestCaseFixture()
+CDV_FUNCTIONAL_TESTING = testing.FunctionalTesting(
+    bases=(CDV_FIXTURE, ), name='CMFDynamicViewFTI Testing:Functional')
+
+
+class CMFDVFTITestCase(bbb.PloneTestCase):
     """This is a stub now, but in case you want to try
        something fancy on Your Branch (tm), put it here.
     """
+
+    layer = CDV_FUNCTIONAL_TESTING
diff --git a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
index a6ac4b3..1624eb1 100644
--- a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
+++ b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml
@@ -1,5 +1,4 @@
 <configure
-    xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser"
     i18n_domain="plonetest">
 
diff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
index 796d1e7..05623cf 100644
--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py
@@ -12,14 +12,17 @@
 
 from zope.interface.verify import verifyClass
 
+
 class DummyFolder(BrowserDefaultMixin):
 
     def getTypeInfo(self):
         return self.fti
 
+
 class IDummy(Interface):
     """ marker interface for a zope 3 view """
 
+
 class TestBrowserDefault(CMFDVFTITestCase.CMFDVFTITestCase):
 
     def test_doesImplementISelectableBrowserDefault(self):
@@ -30,6 +33,7 @@ def test_doesImplementISelectableBrowserDefault(self):
     def test_extendsInterface(self):
         self.failUnless(ISelectableBrowserDefault.extends(IBrowserDefault))
 
+
 class TestAvailableLayouts(CMFDVFTITestCase.CMFDVFTITestCase):
 
     def afterSetUp(self):
@@ -38,30 +42,20 @@ def afterSetUp(self):
         self.dfolder = DummyFolder()
         self.dfolder.fti = self.types['DynFolder']
 
-        try:
-            from Zope2.App import zcml
-        except ImportError:
-            from Products.Five import zcml
-        import plone.app.contentmenu
-        import Products.CMFDynamicViewFTI.tests
-        zcml.load_config('configure.zcml', plone.app.contentmenu)
-        zcml.load_config('browserdefault.zcml', 
-                         Products.CMFDynamicViewFTI.tests)
-        
     def test_Zope3View(self):
         dfolder = self.dfolder
         dfolder.layout = 'zope3_view'
         dfolder.REQUEST = TestRequest()
         view_methods = dfolder.getAvailableLayouts()
-        view_ids = [ view_id for view_id, foo in view_methods ]
+        view_ids = [view_id for view_id, foo in view_methods]
         self.failIf(dfolder.layout in view_ids)
-        
+
         # Mark the object with interface connected to the zope 3 view
         directlyProvides(dfolder, IDummy)
         view_methods = dfolder.getAvailableLayouts()
-        view_ids = [ view_id for view_id, foo in view_methods ]
+        view_ids = [view_id for view_id, foo in view_methods]
         self.failIf(dfolder.layout not in view_ids)
-        
+
     def test_Zope3ViewTitle(self):
         dfolder = self.dfolder
         dfolder.layout = 'zope3_view'
@@ -72,10 +66,3 @@ def test_Zope3ViewTitle(self):
         for id, title in view_methods:
             if id == dfolder.layout:
                 self.assertEqual(title, 'Zope3 Test View')
-        
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestBrowserDefault))
-    suite.addTest(makeSuite(TestAvailableLayouts))    
-    return suite
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index d51e5e8..ed116cb 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -8,6 +8,9 @@
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
 
+from Products.Archetypes.atapi import StringField
+from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+
 fti_meta_type = DynamicViewTypeInformation.meta_type
 
 
@@ -169,31 +172,33 @@ def test_NonFolderishObjectReturnsNone(self):
         self.assertEqual(info.getDefaultPage(dynfolder), None)
 
 
-class TestEmptyLayoutBug(CMFDVFTITestCase.FunctionalTestCase):
+class TestEmptyLayoutBug(CMFDVFTITestCase.CMFDVFTITestCase):
     # Finally, here is why we did all this...
 
     def afterSetUp(self):
         # Make a DynFolder
         self.folder.invokeFactory('DynFolder', id='dynfolder')
         self.dynfolder = self.folder.dynfolder
-        self.dynfolder.layout = '' # Empty layout triggers bug
+        self.dynfolder.layout = ''  # Empty layout triggers bug
         self.dynfolder_path = self.dynfolder.absolute_url(1)
 
         # Make a DynDocument
         self.folder.invokeFactory('DynDocument', id='dyndocument')
         self.dyndocument = self.folder.dyndocument
-        self.dyndocument.layout = '' # Empty layout triggers bug
+        self.dyndocument.layout = ''  # Empty layout triggers bug
         self.dyndocument_path = self.dyndocument.absolute_url(1)
 
-        self.basic = '%s:%s' % (CMFDVFTITestCase.default_user,
-                                CMFDVFTITestCase.default_password)
+        self.basic = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
 
     def test_FolderEmptyLayoutBug(self):
-        response = self.publish(self.dynfolder_path+'/view', basic=self.basic)
+        response = self.publish(self.dynfolder_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
 
     def test_DocumentEmptyLayoutBug(self):
-        response = self.publish(self.dyndocument_path+'/view', basic=self.basic)
+        # add a text field to dyndocument which is not present
+        # but needed for the standard view
+        self.dyndocument.Schema().addField(StringField('text'))
+        response = self.publish(self.dyndocument_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
 
 
@@ -235,12 +240,3 @@ def test_cut_default_page(self):
         self.assertFalse('default_document' in dynfolder.objectIds())
         self.assertTrue('default_document' in self.folder.objectIds())
         self.assertEqual(dynfolder.getDefaultPage(), None)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestFTI))
-    suite.addTest(makeSuite(TestEmptyLayoutBug))
-    suite.addTest(makeSuite(TestModifyDefaultPage))
-    return suite
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..4d80970
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,13 @@
+Overview
+========
+
+CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
+an additional base class for types and a new factory type information (FTI).
+
+The FTI contains two new properties for the default view method and
+supplementary view methods. The queryMethodID functionality used for
+alias lookups is enhanced to support a new keyword (dynamic view).
+
+The BrowserDefaultMixin class adds some methods to classes. It is not required
+to make use of the basic features but it is recommend to subclass your types
+from the class to gain more functionality.
diff --git a/README.txt b/README.txt
deleted file mode 100644
index 4d80970..0000000
--- a/README.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Overview
-========
-
-CMFDynamicViewFTI is a product for dynamic views in CMF. The product contains
-an additional base class for types and a new factory type information (FTI).
-
-The FTI contains two new properties for the default view method and
-supplementary view methods. The queryMethodID functionality used for
-alias lookups is enhanced to support a new keyword (dynamic view).
-
-The BrowserDefaultMixin class adds some methods to classes. It is not required
-to make use of the basic features but it is recommend to subclass your types
-from the class to gain more functionality.
diff --git a/setup.py b/setup.py
index d6aa586..5ed32b9 100644
--- a/setup.py
+++ b/setup.py
@@ -1,16 +1,18 @@
 from setuptools import setup, find_packages
 
-version = '4.0.6.dev0'
+version = '4.0.7.dev0'
 
 setup(name='Products.CMFDynamicViewFTI',
       version=version,
       description="CMFDynamicViewFTI is a product for dynamic views in CMF.",
-      long_description=open("README.txt").read() + "\n" +
+      long_description=open("README.rst").read() + "\n" +
                        open("CHANGES.txt").read(),
       classifiers=[
         "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
         "Framework :: Zope2",
         "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
       ],
       keywords='Zope CMF Plone dynamic view',
       author='Plone Foundation',
@@ -25,7 +27,8 @@
         test=[
             'plone.app.contentmenu',
             'zope.publisher',
-            'Products.CMFTestCase',
+            'plone.app.testing',
+            'Products.Archetypes',
         ]
       ),
       install_requires=[


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-03-17T09:32:38+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/d9231b9ec9dad0dbc8a6189822f821884412aa83

update changelog

Files changed:
M CHANGES.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index 78e4019..b884f68 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,8 +4,15 @@ Changelog
 4.0.7 (unreleased)
 ------------------
 
-- Nothing changed yet.
-
+- When a default object is used as layout for a container,
+  if the default object is deleted or moved with cut and paste,
+  reset the default_page property of the container.
+  [gotcha]
+
+- When a default object is used as layout for a container,
+  if the default object is renamed (iow id is changed),
+  fix the default_page property of the container.
+  [gotcha]
 
 4.0.6 (2015-03-13)
 ------------------


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-03-17T09:33:49+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/f2d0a90ed074701ab3237c6050d5d3d4d70d09d5

cosmetics

Files changed:
M Products/CMFDynamicViewFTI/tests/test_fti.py

diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index ed116cb..be6b9a1 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -1,3 +1,5 @@
+import transaction
+
 from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
 
 from zope.interface.verify import verifyObject
@@ -203,7 +205,6 @@ def test_DocumentEmptyLayoutBug(self):
 
 
 class TestModifyDefaultPage(CMFDVFTITestCase.FunctionalTestCase):
-    # Finally, here is why we did all this...
 
     def afterSetUp(self):
         # Make a DynFolder
@@ -216,7 +217,6 @@ def afterSetUp(self):
     def test_rename_default_page(self):
         dynfolder = self.dynfolder
         self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
-        import transaction
         transaction.commit()
         dynfolder.manage_renameObject('default_document', 'renamed_default')
         self.assertFalse('default_document' in dynfolder.objectIds())
@@ -233,7 +233,6 @@ def test_delete_default_page(self):
     def test_cut_default_page(self):
         dynfolder = self.dynfolder
         self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
-        import transaction
         transaction.commit()
         clipboard = dynfolder.manage_cutObjects(['default_document'])
         self.folder.manage_pasteObjects(clipboard)


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-03-17T10:20:46+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/f6ed56b7d5b683319fb136215c8c423f721ddb37

fix tests

Files changed:
M Products/CMFDynamicViewFTI/tests/test_fti.py
M buildout.cfg
M setup.py

diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index be6b9a1..a972cf7 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -204,18 +204,18 @@ def test_DocumentEmptyLayoutBug(self):
         self.assertEqual(response.getStatus(), 200)
 
 
-class TestModifyDefaultPage(CMFDVFTITestCase.FunctionalTestCase):
+class TestModifyDefaultPage(CMFDVFTITestCase.CMFDVFTITestCase):
 
-    def afterSetUp(self):
-        # Make a DynFolder
+    def _makeOne(self):
+        # Create and return a DynFolder
         self.folder.invokeFactory('DynFolder', id='dynfolder')
-        dynfolder = self.dynfolder = self.folder.dynfolder
-        dynfolder = self.dynfolder
+        dynfolder = self.folder.dynfolder
         dynfolder.invokeFactory('DynDocument', id='default_document')
         dynfolder.setDefaultPage('default_document')
+        return dynfolder
 
     def test_rename_default_page(self):
-        dynfolder = self.dynfolder
+        dynfolder = self._makeOne()
         self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
         transaction.commit()
         dynfolder.manage_renameObject('default_document', 'renamed_default')
@@ -224,14 +224,14 @@ def test_rename_default_page(self):
         self.assertEqual(dynfolder.getDefaultPage(), 'renamed_default')
 
     def test_delete_default_page(self):
-        dynfolder = self.dynfolder
+        dynfolder = self._makeOne()
         self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
         dynfolder.manage_delObjects(['default_document'])
         self.assertFalse('default_document' in dynfolder.objectIds())
         self.assertEqual(dynfolder.getDefaultPage(), None)
 
     def test_cut_default_page(self):
-        dynfolder = self.dynfolder
+        dynfolder = self._makeOne()
         self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
         transaction.commit()
         clipboard = dynfolder.manage_cutObjects(['default_document'])
diff --git a/buildout.cfg b/buildout.cfg
index cc8941f..26954ab 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -8,6 +8,7 @@ parts += omelette
 
 [versions]
 Products.CMFDynamicViewFTI = 
+plone.app.testing = 4.2.5
 
 [omelette]
 recipe = collective.recipe.omelette
diff --git a/setup.py b/setup.py
index 5ed32b9..913e391 100644
--- a/setup.py
+++ b/setup.py
@@ -27,7 +27,7 @@
         test=[
             'plone.app.contentmenu',
             'zope.publisher',
-            'plone.app.testing',
+            'plone.app.testing >= 4.2.5',
             'Products.Archetypes',
         ]
       ),


Repository: Products.CMFDynamicViewFTI
Branch: refs/heads/master
Date: 2015-03-17T10:22:55+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/341af866aeea975b63c2f7c562cd15371bc176a2

Merge pull request #4 from plone/paste_delete_rename

Paste delete rename default page

Files changed:
A Products/CMFDynamicViewFTI/content_for_tests.py
A bootstrap.py
A buildout.cfg
M .gitignore
M CHANGES.txt
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/configure.zcml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
M Products/CMFDynamicViewFTI/tests/test_fti.py
M setup.py

diff --git a/.gitignore b/.gitignore
index c2ea8a9..cf72c30 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,8 @@
 *.pyo
 build
 dist
+lib
+include
+bin
+develop-eggs
+parts
diff --git a/CHANGES.txt b/CHANGES.txt
index 78e4019..b884f68 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,8 +4,15 @@ Changelog
 4.0.7 (unreleased)
 ------------------
 
-- Nothing changed yet.
-
+- When a default object is used as layout for a container,
+  if the default object is deleted or moved with cut and paste,
+  reset the default_page property of the container.
+  [gotcha]
+
+- When a default object is used as layout for a container,
+  if the default object is renamed (iow id is changed),
+  fix the default_page property of the container.
+  [gotcha]
 
 4.0.6 (2015-03-13)
 ------------------
diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py
index 55ae3e2..46dcb53 100644
--- a/Products/CMFDynamicViewFTI/__init__.py
+++ b/Products/CMFDynamicViewFTI/__init__.py
@@ -3,10 +3,34 @@
 # $Id$
 
 from Products.CMFCore import utils as cmf_utils
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import AddPortalFolders
 from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation
+from Products.CMFDynamicViewFTI import content_for_tests
+
 
 
 def initialize(context):
     # (DynamicViewTypeInformation factory is created from ZCML)
-    cmf_utils.registerIcon(DynamicViewTypeInformation, 'images/typeinfo.gif', globals())
+    cmf_utils.registerIcon(
+        DynamicViewTypeInformation, 'images/typeinfo.gif', globals()
+    )
+
+    context.registerClass(
+        content_for_tests.DynFolder,
+        permission=AddPortalFolders,
+        constructors=(('addDynFolder',
+                       content_for_tests.addDynFolder),
+                      ),
+        icon='images/typeinfo.gif'
+        )
+
+    context.registerClass(
+        content_for_tests.DynDocument,
+        permission=AddPortalContent,
+        constructors=(('addDynDocument',
+                       content_for_tests.addDynDocument),
+                      ),
+        icon='images/typeinfo.gif'
+        )
     return
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index c6bd201..d6300a4 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -240,3 +240,19 @@ def getAvailableLayouts(self):
         return result
 
 InitializeClass(BrowserDefaultMixin)
+
+
+def check_default_page(obj, event):
+    container = obj
+    default_page_id = container.getDefaultPage()
+    if default_page_id and not (default_page_id in container.objectIds()):
+        ISelectableBrowserDefault(container).setDefaultPage(None)
+
+def rename_default_page(obj, event):
+    newParent = event.newParent
+    if newParent != event.oldParent:
+        return
+    elif ISelectableBrowserDefault.providedBy(newParent):
+        default_page_id = newParent.getProperty('default_page', '')
+        if default_page_id == event.oldName:
+            ISelectableBrowserDefault(newParent).setDefaultPage(event.newName)
diff --git a/Products/CMFDynamicViewFTI/configure.zcml b/Products/CMFDynamicViewFTI/configure.zcml
index e84a469..0689a8d 100644
--- a/Products/CMFDynamicViewFTI/configure.zcml
+++ b/Products/CMFDynamicViewFTI/configure.zcml
@@ -4,6 +4,8 @@
    xmlns:five="http://namespaces.zope.org/five"
    i18n_domain="cmf_default">
 
+  <include package="Products.CMFCore" />
+
   <browser:page
      for="zope.browser.interfaces.IAdding"
      name="addDVFactoryTypeInformation.html"
@@ -25,4 +27,14 @@
     title="Modify view template"
     />
 
+  <subscriber 
+    for=".interfaces.ISelectableBrowserDefault
+         zope.container.interfaces.IContainerModifiedEvent"
+    handler=".browserdefault.check_default_page" />
+
+  <subscriber 
+    for="*
+         zope.lifecycleevent.interfaces.IObjectMovedEvent"
+    handler=".browserdefault.rename_default_page" />
+
 </configure>
diff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py
new file mode 100644
index 0000000..ba77e9b
--- /dev/null
+++ b/Products/CMFDynamicViewFTI/content_for_tests.py
@@ -0,0 +1,30 @@
+from AccessControl.SecurityInfo import ClassSecurityInfo
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import AddPortalFolders
+from Products.CMFCore.PortalFolder import PortalFolder
+from Products.CMFDefault.Document import Document
+from App.class_init import InitializeClass
+
+from browserdefault import BrowserDefaultMixin
+
+
+class DynFolder(PortalFolder, BrowserDefaultMixin):
+    pass
+
+
+class DynDocument(Document, BrowserDefaultMixin):
+    pass
+
+
+def addDynFolder(self, id, title='', REQUEST=None):
+    """Add a new DynFolder object with id *id*.
+    """
+    ob = DynFolder(id, title)
+    self._setObject(id, ob, suppress_events=True)
+
+
+def addDynDocument(self, id, title='', REQUEST=None):
+    """Add a new DynDocument object with id *id*.
+    """
+    ob = DynDocument(id, title)
+    self._setObject(id, ob, suppress_events=True)
diff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
index 4bc0530..c4e15c2 100644
--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
@@ -7,8 +7,8 @@
     name="description">A page in the site. Can contain rich text.</property>
  <property name="content_icon">document_icon.gif</property>
  <property name="content_meta_type">DynDocument</property>
- <property name="product">CMFDefault</property>
- <property name="factory">addDocument</property>
+ <property name="product">CMFDynamicViewFTI</property>
+ <property name="factory">addDynDocument</property>
  <property name="immediate_view">metadata_edit_form</property>
  <property name="global_allow">True</property>
  <property name="filter_content_types">True</property>
diff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
index 3aa703d..5d7d6c6 100644
--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
@@ -5,8 +5,8 @@
  <property name="title">DynFolder</property>
  <property name="content_icon">folder_icon.gif</property>
  <property name="content_meta_type">DynFolder</property>
- <property name="product">CMFCore</property>
- <property name="factory">manage_addPortalFolder</property>
+ <property name="product">CMFDynamicViewFTI</property>
+ <property name="factory">addDynFolder</property>
  <property name="immediate_view">folder_edit_form</property>
  <property name="global_allow">True</property>
  <property name="filter_content_types">False</property>
diff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py
index 68ea2f1..a972cf7 100644
--- a/Products/CMFDynamicViewFTI/tests/test_fti.py
+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py
@@ -1,3 +1,5 @@
+import transaction
+
 from Products.CMFDynamicViewFTI.tests import CMFDVFTITestCase
 
 from zope.interface.verify import verifyObject
@@ -200,3 +202,40 @@ def test_DocumentEmptyLayoutBug(self):
         self.dyndocument.Schema().addField(StringField('text'))
         response = self.publish(self.dyndocument_path + '/view', basic=self.basic)
         self.assertEqual(response.getStatus(), 200)
+
+
+class TestModifyDefaultPage(CMFDVFTITestCase.CMFDVFTITestCase):
+
+    def _makeOne(self):
+        # Create and return a DynFolder
+        self.folder.invokeFactory('DynFolder', id='dynfolder')
+        dynfolder = self.folder.dynfolder
+        dynfolder.invokeFactory('DynDocument', id='default_document')
+        dynfolder.setDefaultPage('default_document')
+        return dynfolder
+
+    def test_rename_default_page(self):
+        dynfolder = self._makeOne()
+        self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
+        transaction.commit()
+        dynfolder.manage_renameObject('default_document', 'renamed_default')
+        self.assertFalse('default_document' in dynfolder.objectIds())
+        self.assertTrue('renamed_default' in dynfolder.objectIds())
+        self.assertEqual(dynfolder.getDefaultPage(), 'renamed_default')
+
+    def test_delete_default_page(self):
+        dynfolder = self._makeOne()
+        self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
+        dynfolder.manage_delObjects(['default_document'])
+        self.assertFalse('default_document' in dynfolder.objectIds())
+        self.assertEqual(dynfolder.getDefaultPage(), None)
+
+    def test_cut_default_page(self):
+        dynfolder = self._makeOne()
+        self.assertEqual(dynfolder.getDefaultPage(), 'default_document')
+        transaction.commit()
+        clipboard = dynfolder.manage_cutObjects(['default_document'])
+        self.folder.manage_pasteObjects(clipboard)
+        self.assertFalse('default_document' in dynfolder.objectIds())
+        self.assertTrue('default_document' in self.folder.objectIds())
+        self.assertEqual(dynfolder.getDefaultPage(), None)
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 0000000..ed57894
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,178 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+tmpeggs = tempfile.mkdtemp()
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep 
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("-v", "--version", help="use a specific zc.buildout version")
+
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+
+
+options, args = parser.parse_args()
+
+######################################################################
+# load/install setuptools
+
+try:
+    if options.allow_site_packages:
+        import setuptools
+        import pkg_resources
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions 
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'. 
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+cmd = [sys.executable, '-c',
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+requirement = 'zc.buildout'
+version = options.version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        for part in parsed_version:
+            if (part[:1] == '*') and (part not in _final_parts):
+                return False
+        return True
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..26954ab
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,15 @@
+[buildout]
+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-4.x.cfg
+
+package-name = Products.CMFDynamicViewFTI
+package-extras = [test]
+
+parts += omelette
+
+[versions]
+Products.CMFDynamicViewFTI = 
+plone.app.testing = 4.2.5
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs = ${test:eggs}
diff --git a/setup.py b/setup.py
index 5ed32b9..913e391 100644
--- a/setup.py
+++ b/setup.py
@@ -27,7 +27,7 @@
         test=[
             'plone.app.contentmenu',
             'zope.publisher',
-            'plone.app.testing',
+            'plone.app.testing >= 4.2.5',
             'Products.Archetypes',
         ]
       ),


