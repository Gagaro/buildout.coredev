Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-11-06T11:45:37+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/7d191171d0035489508c99cee416ab2cc702222d

first cut to move to p.a.testing

Files changed:
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M setup.py

diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 9bd8388..5c06657 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -4,17 +4,15 @@
 from Products.ATContentTypes.tests import atcttestcase
 
 from Products.CMFCore.utils import getToolByName
-from Products.PloneTestCase.setup import default_user
-from Products.PloneTestCase.setup import default_password
-from Products.PloneTestCase.setup import portal_owner
+from plone.app.testing import TEST_USER_ID as default_user
+from plone.app.testing import TEST_USER_PASSWORD as default_password
+from plone.app.testing import PLONE_SITE_ID as portal_name
+from plone.app.testing import SITE_OWNER_NAME as portal_owner
 
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 
 import hmac
-try:
-    from hashlib import sha1 as sha
-except ImportError:
-    import sha
+from hashlib import sha1 as sha
 
 
 class IntegrationTestCase(atcttestcase.ATCTFunctionalSiteTestCase):
@@ -37,10 +35,7 @@ def afterSetUp(self):
         self.setupTestObject()
 
     def setupTestObject(self):
-        self.obj_id = 'test_object'
-        self.obj = None
-        self.obj_url = self.obj.absolute_url()
-        self.obj_path = '/%s' % self.obj.absolute_url(1)
+        raise NotImplementedError
 
     def getAuthToken(self, user=default_user):
         manager = getUtility(IKeyManager)
@@ -59,11 +54,15 @@ class ATCTIntegrationTestCase(IntegrationTestCase):
 
     portal_type = None
 
+    def beforeTearDown(self):
+        del self.folder[self.obj_id]
+
     def setupTestObject(self):
         # create test object
         self.obj_id = 'test_object'
         self.title = u'test \xf6bject'
-        self.folder.invokeFactory(self.portal_type, self.obj_id, title=self.title)
+        if not self.obj_id in self.folder:
+            self.folder.invokeFactory(self.portal_type, self.obj_id, title=self.title)
         self.obj = getattr(self.folder.aq_explicit, self.obj_id)
         self.obj_url = self.obj.absolute_url()
         self.obj_path = '/%s' % self.obj.absolute_url(1)
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index d59c04f..38703b5 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -1,12 +1,9 @@
 from Testing import ZopeTestCase
-from Products.PloneTestCase import PloneTestCase
-from Products.PloneTestCase.layer import PloneSiteLayer
-from Products.PloneTestCase.setup import default_user
-from Products.PloneTestCase.setup import default_password
-from Products.PloneTestCase.setup import portal_name
-from Products.PloneTestCase.setup import portal_owner
-ZopeTestCase.installProduct('SiteAccess')
-PloneTestCase.setupPloneSite()
+from plone.app.testing.bbb import PloneTestCase
+from plone.app.testing import TEST_USER_ID as default_user
+from plone.app.testing import TEST_USER_PASSWORD as default_password
+from plone.app.testing import PLONE_SITE_ID as portal_name
+from plone.app.testing import SITE_OWNER_NAME as portal_owner
 
 import os
 
@@ -42,7 +39,7 @@
 test_home = os.path.dirname(__file__)
 
 
-class ATCTSiteTestCase(PloneTestCase.PloneTestCase):
+class ATCTSiteTestCase(PloneTestCase):
 
     def afterSetUp(self):
         # BBB - make sure we can regression test the deprecated types:
@@ -55,7 +52,8 @@ def afterSetUp(self):
         cb_copy_data = ttool.manage_copyObjects(['Folder'])
         paste_data = ttool.manage_pasteObjects(cb_copy_data)
         temp_id = paste_data[0]['new_id']
-        ttool.manage_renameObject(temp_id, 'Large Plone Folder')
+        if 'Large Plone Folder' not in ttool:
+            ttool.manage_renameObject(temp_id, 'Large Plone Folder')
         lpf = ttool['Large Plone Folder']
         lpf.title = 'Large Folder'
         lpf.product = 'ATContentTypes'
@@ -65,8 +63,7 @@ def afterSetUp(self):
         self.setRoles(orig_roles)
 
 
-class ATCTFunctionalSiteTestCase(PloneTestCase.FunctionalTestCase, ATCTSiteTestCase):
-    pass
+ATCTFunctionalSiteTestCase = ATCTSiteTestCase
 
 
 class ATCTTypeTestCase(ATCTSiteTestCase):
@@ -205,8 +202,6 @@ def beforeTearDown(self):
 class ATCTFieldTestCase(ATCTSiteTestCase, BaseSchemaTest):
     """ ATContentTypes test including AT schema tests """
 
-    layer = PloneSiteLayer
-
     def afterSetUp(self):
         # initalize the portal but not the base schema test
         # because we want to overwrite the dummy and don't need it
diff --git a/setup.py b/setup.py
index a647cf3..2a2add0 100644
--- a/setup.py
+++ b/setup.py
@@ -9,6 +9,7 @@
                        open("CHANGES.txt").read(),
       classifiers=[
         "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
         ],
       keywords='Plone Content Types',
       author='AT Content Types development team',


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-11-08T20:36:46+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/196f161571887dc234e31f91e6dd4535298b665d

started doctest fixture

Files changed:
M Products/ATContentTypes/tests/browser_collection_views.txt
M Products/ATContentTypes/tests/editing.txt
M Products/ATContentTypes/tests/events.txt
M Products/ATContentTypes/tests/http_access.txt
M Products/ATContentTypes/tests/portaltype_criterion.txt
M Products/ATContentTypes/tests/test_functional.py
M Products/ATContentTypes/tests/traversal.txt
M Products/ATContentTypes/tests/webdav.txt

diff --git a/Products/ATContentTypes/tests/browser_collection_views.txt b/Products/ATContentTypes/tests/browser_collection_views.txt
index 6fca799..4aac739 100644
--- a/Products/ATContentTypes/tests/browser_collection_views.txt
+++ b/Products/ATContentTypes/tests/browser_collection_views.txt
@@ -10,9 +10,10 @@ atct_topic_view (Collection, the default view)
 
 First create a folder and a demo collection:
 
+    >>> portal = layer['portal']
     >>> self.setRoles(['Manager'])
-    >>> _ = self.portal.invokeFactory('Folder', 'folder')
-    >>> folder = self.portal.folder
+    >>> _ = portal.invokeFactory('Folder', 'folder')
+    >>> folder = portal.folder
     >>> folder.setTitle('Folder title')
     >>> folder.setDescription('Folder description')    
     >>> _ = folder.invokeFactory('Topic', 'collection')
@@ -27,13 +28,9 @@ First create a folder and a demo collection:
 
 Now let's login and visit the collection in the test browser:
 
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
+    >>> from plone.testing.z2 import Browser
 
-    >>> browser = Browser()
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login_form')
     >>> browser.getControl('Login Name').value = 'test_user_1_'
     >>> browser.getControl('Password').value = 'secret'
diff --git a/Products/ATContentTypes/tests/editing.txt b/Products/ATContentTypes/tests/editing.txt
index c604966..d611743 100644
--- a/Products/ATContentTypes/tests/editing.txt
+++ b/Products/ATContentTypes/tests/editing.txt
@@ -5,15 +5,11 @@ Here we want to test the standard edit view for Archetypes objects.
 
 Let's set up a test browser:
 
-  # BBB Zope 2.12
-  >>> try:
-  ...     from Testing.testbrowser import Browser
-  ... except ImportError:
-  ...     from Products.Five.testbrowser import Browser
-
-  >>> browser = Browser()
+  >>> from plone.testing.z2 import Browser
+  >>> portal = layer['portal']
+  >>> browser = Browser(layer['app'])
   >>> browser.handleErrors = False
-  >>> browser.open('http://nohost/plone/login')
+  >>> browser.open('%s/login' % portal.absolute_url())
 
 First, we need to log in.
 
diff --git a/Products/ATContentTypes/tests/events.txt b/Products/ATContentTypes/tests/events.txt
index 3f4fbd9..13e2ee4 100644
--- a/Products/ATContentTypes/tests/events.txt
+++ b/Products/ATContentTypes/tests/events.txt
@@ -29,7 +29,7 @@ handler that listens for object events for `IBaseObject`:
 
 Creating an AT object will a couple of events:
 
-  >>> d = makeContent(self.folder, portal_type='Document', id='a')
+  >>> d = makeContent(folder, portal_type='Document', id='a')
   >>> handler.print_and_flush() #doctest: +ELLIPSIS
   5 events:
   [(<ATDocument at /.../Members/test_user_1_/a>,
diff --git a/Products/ATContentTypes/tests/http_access.txt b/Products/ATContentTypes/tests/http_access.txt
index 8bd3778..d08dba4 100644
--- a/Products/ATContentTypes/tests/http_access.txt
+++ b/Products/ATContentTypes/tests/http_access.txt
@@ -10,26 +10,22 @@ is acquired or not acquired at the right times. The code is based on
 Sidneys tests for Archetypes.
 
   >>> import os
-  >>> from Products.Archetypes.tests.attestcase import user_name
-  >>> from Products.Archetypes.tests.attestcase import user_password
-  >>> from Products.Archetypes.tests.atsitetestcase import portal_name
+  >>> from plone.app.testing import TEST_USER_NAME as user_name
+  >>> from plone.app.testing import user_password as user_password
+  >>> from plone.app.testing import TEST_USER_ID
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
+  >>> portal = layer['portal']
+  >>> portal_name = portal.getId()
 
   Input directory with test files
   >>> input_dir = os.path.join(test_home, 'input')
 
-  CMF and Plone sites may have different default titles so we set one
-  >>> self.setRoles(['Manager'])
-  >>> self.portal.setTitle('Portal Title')
-  >>> self.setRoles(['Member'])
-
   Use the member's home folder as play ground for the tests
-  >>> folder = self.folder
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> folder.setTitle('test folder')
   >>> fpath = '/'.join(folder.getPhysicalPath())
 
   We need the portal, too
-  >>> portal = self.portal
   >>> ppath = '/'.join(portal.getPhysicalPath())
 
   Dates use for If-* requests
@@ -44,6 +40,9 @@ Sidneys tests for Archetypes.
   >>> input = open(os.path.join(input_dir, 'test.gif'), 'rb')
   >>> input.seek(0)
 
+  >>> from Testing.ZopeTestCase.zopedoctest.functional import http
+  >>> from Testing.ZopeTestCase.sandbox import AppZapper
+  >>> AppZapper().set(layer['app'])
   >>> print http(r"""
   ... PUT /%s/test-image HTTP/1.1
   ... Authorization: Basic %s:%s
@@ -132,7 +131,7 @@ folder.
   HEAD returns OK even if the view method does not exist. To show this
   behavior the layout is set to a non existing template.
 
-  >>> pt_tool = self.portal.portal_types
+  >>> pt_tool = portal.portal_types
   >>> ti = pt_tool[folder.portal_type]
   >>> ti.view_methods += ('non_existing_layout',)
 
@@ -156,10 +155,11 @@ folder.
 Collections
 -------------
 
-  >>> self.setRoles(['Manager'])
+  >>> from plone.app.testing import setRoles
+  >>> setRoles(portal, user_name, ['Manager'])
   >>> folder.invokeFactory('Topic', id='topic')
   'topic'
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, user_name, ['Member'])
   >>> topic = folder.topic
   >>> topic.portal_type
   'Topic'
@@ -179,10 +179,10 @@ Collections
   Add a criterion with a value. Without a value criterion.getCriteriaItems()
   returns a false value and the query is empty.
 
-  >>> self.setRoles(['Manager'])
+  >>> setRoles(portal, user_name, ['Manager'])
   >>> criterion = topic.addCriterion('getId', 'ATSimpleStringCriterion')
   >>> criterion.setValue('foo')
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, user_name, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -202,9 +202,9 @@ Test HEAD for the portal root object
   folder.
 
   >>> if 'index_html' in portal:
-  ...     self.setRoles(['Manager'])
+  ...     setRoles(portal, user_name, ['Manager'])
   ...     portal.manage_delObjects(('index_html',))
-  ...     self.setRoles(['Member'])
+  ...     setRoles(portal, user_name, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -213,12 +213,12 @@ Test HEAD for the portal root object
   HTTP/1.1 200 OK
   ...
 
-  >>> self.setRoles(['Manager'])
+  >>> setRoles(portal, user_name, ['Manager'])
   >>> portal.invokeFactory('Document', id='index_html')
   'index_html'
   >>> portal.index_html.portal_type
   'Document'
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, user_name, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -352,3 +352,5 @@ HTTP If modified since
   ...
   <BLANKLINE>
   GIF87...
+
+  >>> AppZapper().clear()
diff --git a/Products/ATContentTypes/tests/portaltype_criterion.txt b/Products/ATContentTypes/tests/portaltype_criterion.txt
index 1f86447..7bb2ecb 100644
--- a/Products/ATContentTypes/tests/portaltype_criterion.txt
+++ b/Products/ATContentTypes/tests/portaltype_criterion.txt
@@ -1,14 +1,10 @@
 Adding an ATTopic criterion for Type
 ====================================
 
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
-
-    >>> browser = Browser()
-    >>> browser.open('http://nohost/plone/login')
+    >>> from plone.testing.z2 import Browser
+    >>> portal = layer['portal']
+    >>> browser = Browser(layer['app'])
+    >>> browser.open('%s/login' % portal.absolute_url())
 
 First, we need to log in.
 
@@ -92,11 +88,11 @@ exclude the document from navigation, to make it easier to inspect the browser c
 detect whether it shows up in searches.
 
     >>> self.loginAsPortalOwner()
-    >>> self.portal.invokeFactory('Document', 'doc1')
+    >>> portal.invokeFactory('Document', 'doc1')
     'doc1'
-    >>> self.portal.doc1.setTitle('Test Document')
-    >>> self.portal.doc1.setExcludeFromNav(True)
-    >>> self.portal.doc1.content_status_modify(workflow_action='publish')
+    >>> portal.doc1.setTitle('Test Document')
+    >>> portal.doc1.setExcludeFromNav(True)
+    >>> portal.doc1.content_status_modify(workflow_action='publish')
     'http://nohost/plone/doc1'
 
 We now view the collection.
diff --git a/Products/ATContentTypes/tests/test_functional.py b/Products/ATContentTypes/tests/test_functional.py
index 6332a75..6e1e221 100644
--- a/Products/ATContentTypes/tests/test_functional.py
+++ b/Products/ATContentTypes/tests/test_functional.py
@@ -13,17 +13,20 @@
 import doctest
 OPTIONFLAGS = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |
-               doctest.REPORT_NDIFF)
+               doctest.REPORT_NDIFF |
+               doctest.REPORT_ONLY_FIRST_FAILURE)
 
+from plone.testing import layered
+from plone.app.testing.bbb import PTC_FIXTURE
 
 def test_suite():
     import unittest
     suite = unittest.TestSuite()
-    from Testing.ZopeTestCase import FunctionalDocFileSuite as FileSuite
     for testfile in FILES:
-        suite.addTest(FileSuite(testfile,
+        suite.addTest(layered(doctest.FileSuite(testfile,
                                 optionflags=OPTIONFLAGS,
                                 package="Products.ATContentTypes.tests",
-                                test_class=ATCTFunctionalSiteTestCase)
+                                test_class=ATCTFunctionalSiteTestCase),
+                      layer=PTC_FIXTURE)
                      )
     return suite
diff --git a/Products/ATContentTypes/tests/traversal.txt b/Products/ATContentTypes/tests/traversal.txt
index 24509ed..81cd8ef 100644
--- a/Products/ATContentTypes/tests/traversal.txt
+++ b/Products/ATContentTypes/tests/traversal.txt
@@ -12,25 +12,25 @@ correctly across the many use cases that must co-exist.
 First, we are going to setup an environment so we can test that stuff
 is acquired or not acquired at the right times.
 
-  >>> from Products.ATContentTypes.tests.atcttestcase import default_user
-  >>> from Products.ATContentTypes.tests.atcttestcase import default_password
-  >>> from Products.ATContentTypes.tests.atcttestcase import portal_name
+  >>> from plone.app.testing import TEST_USER_NAME as default_user
+  >>> from plone.app.testing import TEST_USER_PASSWORD as default_password
+  >>> from Products.ATContentTypes.tests.atcttestcase import test_home
+  >>> portal = layer['portal']
+  >>> portal_name = portal.getId()
+
   >>> from Products.CMFCore.utils import getToolByName
-  >>> self.setRoles(['Manager'])
 
-  >>> self.portal.setTitle('Portal Title')
-  
-  >>> self.portal.invokeFactory('Document', 'test_document',
+  >>> portal.invokeFactory('Document', 'test_document',
   ...             title='Root Document')
   'test_document'
 
-  >>> self.portal.invokeFactory('Document', 'index_html', title='Root Index')
+  >>> portal.invokeFactory('Document', 'index_html', title='Root Index')
   'index_html'
 
-  >>> self.portal.invokeFactory('Folder', 'simple_folder')
+  >>> portal.invokeFactory('Folder', 'simple_folder')
   'simple_folder'
 
-  >>> self.portal.invokeFactory('Large Plone Folder', 'simple_btree_folder')
+  >>> portal.invokeFactory('Large Plone Folder', 'simple_btree_folder')
   'simple_btree_folder'
 
 
@@ -40,6 +40,10 @@ XML-RPC
 XML-RPC is basically a ``POST`` with content-type text/xml. It should
 be allowed to acquire content from higher-level hierarchies:
 
+  >>> from Testing.ZopeTestCase.zopedoctest.functional import http
+  >>> from Testing.ZopeTestCase.sandbox import AppZapper
+  >>> AppZapper().set(layer['app'])
+
   >>> print http(r"""
   ... POST /%s HTTP/1.0
   ... Authorization: Basic %s:%s
@@ -54,12 +58,12 @@ be allowed to acquire content from higher-level hierarchies:
   ... </methodCall>
   ... """ % (portal_name, default_user, default_password))
   HTTP/1.0 200 OK
-  ...Portal Title...
+  ...Plone site...
 
-  >>> print self.portal.test_document.getPortalTypeName()
+  >>> print portal.test_document.getPortalTypeName()
   Document
 
-  >>> print self.portal.test_document.title_or_id()
+  >>> print portal.test_document.title_or_id()
   Root Document
 
   >>> print http(r"""
@@ -78,7 +82,7 @@ be allowed to acquire content from higher-level hierarchies:
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_folder
+  >>> 'test_document' in portal.simple_folder
   False
 
   >>> print http(r"""
@@ -97,7 +101,7 @@ be allowed to acquire content from higher-level hierarchies:
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_btree_folder
+  >>> 'test_document' in portal.simple_btree_folder
   False
 
   >>> print http(r"""
@@ -122,20 +126,20 @@ Browser
 For testing Browser access, we are going to just try using the ``GET``
 method instead.
 
-  >>> print self.portal.title_or_id()
-  Portal Title
+  >>> print portal.title_or_id()
+  Plone site
 
   >>> print http(r"""
   ... GET /%s/title_or_id HTTP/1.0
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, default_user, default_password))
   HTTP/1.0 200 OK
-  ...Portal Title...
+  ...Plone site...
 
-  >>> print self.portal.test_document.getPortalTypeName()
+  >>> print portal.test_document.getPortalTypeName()
   Document
 
-  >>> print self.portal.test_document.title_or_id()
+  >>> print portal.test_document.title_or_id()
   Root Document
 
   >>> print http(r"""
@@ -145,7 +149,7 @@ method instead.
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_folder
+  >>> 'test_document' in portal.simple_folder
   False
 
   >>> print http(r"""
@@ -155,7 +159,7 @@ method instead.
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_btree_folder
+  >>> 'test_document' in portal.simple_btree_folder
   False
 
   >>> print http(r"""
@@ -254,7 +258,7 @@ acquired.
 
 Create a CTR predicate to map any content to ``Document``:
 
-  >>> ctr = getToolByName(self.portal, 'content_type_registry')
+  >>> ctr = getToolByName(portal, 'content_type_registry')
   >>> p_id = 'at_dav_test'
   >>> p_type = 'name_regex'
   >>> ctr.addPredicate(p_id, p_type)
@@ -275,7 +279,7 @@ Create a CTR predicate to map any content to ``Document``:
   HTTP/1.1 201 Created
   ...
 
-  >>> folder = self.portal.simple_folder
+  >>> folder = portal.simple_folder
   >>> print folder.test_document.getPortalTypeName()
   Document
 
@@ -297,7 +301,7 @@ Create a CTR predicate to map any content to ``Document``:
   HTTP/1.1 201 Created
   ...
 
-  >>> folder = self.portal.simple_btree_folder
+  >>> folder = portal.simple_btree_folder
   >>> print folder.test_document.getPortalTypeName()
   Document
 
@@ -310,7 +314,7 @@ Create a CTR predicate to map any content to ``Document``:
 Make sure it's possible to create an item named ``index_html`` into a
 AT-based folder.
 
-  >>> folder = self.portal.simple_folder
+  >>> folder = portal.simple_folder
   >>> 'index_html' in folder
   False
 
@@ -349,6 +353,8 @@ should be of the same kind as the parent:
   HTTP/1.1 201 Created
   ...
 
-  >>> folder = self.portal.simple_folder.simple_folder
+  >>> folder = portal.simple_folder.simple_folder
   >>> print folder.getPortalTypeName()
   Folder
+
+  >>> AppZapper().clear()
diff --git a/Products/ATContentTypes/tests/webdav.txt b/Products/ATContentTypes/tests/webdav.txt
index 6d074f7..da4b2c4 100644
--- a/Products/ATContentTypes/tests/webdav.txt
+++ b/Products/ATContentTypes/tests/webdav.txt
@@ -11,21 +11,18 @@ First, we are going to setup an environment so we can test that stuff
 is acquired or not acquired at the right times.
 
   >>> import os
-  >>> from Products.Archetypes.tests.attestcase import user_name
-  >>> from Products.Archetypes.tests.attestcase import user_password
-  >>> from Products.Archetypes.tests.atsitetestcase import portal_name
+  >>> plone.app.testing import TEST_USER_ID
+  >>> plone.app.testing import TEST_USER_NAME
+  >>> plone.app.testing import TEST_USER_PASSWORD
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
+  >>> portal = layer['portal']
+  >>> portal_name = portal.getId()
 
   Input directory with test files
   >>> input_dir = os.path.join(test_home, 'input')
 
-  CMF and Plone sites may have different default titles so we set one
-  >>> self.setRoles(['Manager'])
-  >>> self.portal.setTitle('Portal Title')
-  >>> self.setRoles(['Member'])
-
   Use the member's home folder as play ground for the tests
-  >>> folder = self.folder
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> fpath = '/'.join(folder.getPhysicalPath())
 
   Plone's default error message template is too verbose and far too long
@@ -44,13 +41,17 @@ Document
 
   Create object by content type
 
+  >>> from Testing.ZopeTestCase.zopedoctest.functional import http
+  >>> from Testing.ZopeTestCase.sandbox import AppZapper
+  >>> AppZapper().set(layer['app'])
+
   >>> input.seek(0)
   >>> print http(r"""
   ... PUT /%s/test-document HTTP/1.1
   ... Authorization: Basic %s:%s
   ... Content-Type: text/html; charset="utf-8"
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -105,7 +106,7 @@ Document
   ... PUT /%s/test-document2.txt HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, "a test"))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, "a test"))
   HTTP/1.1 201 Created
   ...
 
@@ -136,7 +137,7 @@ Event
   ... PUT /%s/test-event.event HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -164,7 +165,7 @@ File
   ... Authorization: Basic %s:%s
   ... Content-Type: application/zip
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -198,7 +199,7 @@ File, by Extension
   ... PUT /%s/test-file.zip HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -226,7 +227,7 @@ OpenOffice 1.0 Text Document, no Content-Type, Extension
   ... PUT /%s/test-file1.sxw HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -264,7 +265,7 @@ OpenOffice 1.0 Text Document, no Content-Type, No Extension
   ... PUT /%s/test-file2 HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -305,7 +306,7 @@ OpenOffice 1.0 Text Document, w/ Content-Type, No Extension
   ... Content-Type: application/vnd.sun.xml.writer
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -346,7 +347,7 @@ Image
   ... Authorization: Basic %s:%s
   ... Content-Type: image/gif
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -380,7 +381,7 @@ Image, by Extension
   ... PUT /%s/test-image.gif HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -404,7 +405,7 @@ Image, by Extension
   ... PUT /%s/test%%20my%%20image.gif HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -435,7 +436,7 @@ Link
   ... PUT /%s/test-link.link HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -462,7 +463,7 @@ News Item
   ... PUT /%s/test-newsitem.news HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -490,7 +491,7 @@ HTML Page - verify that title is extracted
   ... Authorization: Basic %s:%s
   ... Depth: 0
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -511,7 +512,7 @@ XHTML Page - verify that title and body are extracted
   ... Authorization: Basic %s:%s
   ... Depth: 0
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
@@ -531,7 +532,9 @@ WebDAV MKCOL
 
 Need manager roles here:
 
-  >>> self.setRoles(['Manager'])
+  >>> from plone.app.testing import setRoles
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
 
 Folder
 ------
@@ -540,7 +543,7 @@ Folder
   ... MKCOL /%s/test-folder-name HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
@@ -558,7 +561,7 @@ Need to make a BTreeFolder manually, and then do a MKCOL inside it:
   ... MKCOL /%s/test-btree/test-btreefolder-name HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
@@ -570,13 +573,13 @@ PUT Mangling
 
 Now for the real thing, doing a PUT request, back to Member role:
 
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... PUT /%s/Foto%%20do%%20Parana.jpg HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
@@ -591,7 +594,7 @@ Now for the real thing, doing a PUT request, back to Member role:
   >>> print image.Title()
   Foto do Parana.jpg
 
-  >>> self.setRoles(['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
 
 MKCOL Mangling
 --------------
@@ -600,7 +603,7 @@ MKCOL Mangling
   ... MKCOL /%s/Fotos%%20de%%20Jurere HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
@@ -609,3 +612,5 @@ MKCOL Mangling
 
   >>> print self.folder['Fotos de Jurere'].Title()
   Fotos de Jurere
+
+  >>> AppZapper().clear()


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-11-09T13:00:00+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/eb8f109cd8bfe75c4ea98dd67237835115e67ad3

only use one doctest file

Files changed:
M Products/ATContentTypes/tests/test_doctests.py
D Products/ATContentTypes/tests/test_functional.py

diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 9201dd5..743740d 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -1,18 +1,30 @@
 # -*- coding: UTF-8 -*-
 
-from Testing import ZopeTestCase
+FILES = [
+    'events.txt', 'editing.txt',
+    'topictool.txt', 'portaltype_criterion.txt', 'webdav.txt', 'http_access.txt',
+    'reindex_sanity.txt', 'uploading.txt', 'browser_collection_views.txt',
+    # traversal.txt registers the browser page "document_view", and this registration
+    # stays active in different doctests, so we make sure to include it last.
+    'traversal.txt',
+]
 
-from Products.ATContentTypes.tests.atcttestcase import ATCTFunctionalSiteTestCase
-
-FILES = ['events.txt', 'editing.txt']
+import doctest
+OPTIONFLAGS = (doctest.ELLIPSIS |
+               doctest.NORMALIZE_WHITESPACE |
+               doctest.REPORT_NDIFF |
+               doctest.REPORT_ONLY_FIRST_FAILURE)
 
+from plone.testing import layered
+from plone.app.testing.bbb import PTC_FIXTURE
 
 def test_suite():
     import unittest
     suite = unittest.TestSuite()
-    from Testing.ZopeTestCase import FunctionalDocFileSuite as FileSuite
-    for file in FILES:
-        suite.addTest(FileSuite(file, package="Products.ATContentTypes.tests",
-                                test_class=ATCTFunctionalSiteTestCase)
+    for testfile in FILES:
+        suite.addTest(layered(doctest.DocFileSuite(testfile,
+                                optionflags=OPTIONFLAGS,
+                                package="Products.ATContentTypes.tests",),
+                      layer=PTC_FIXTURE)
                      )
     return suite
diff --git a/Products/ATContentTypes/tests/test_functional.py b/Products/ATContentTypes/tests/test_functional.py
deleted file mode 100644
index 6e1e221..0000000
--- a/Products/ATContentTypes/tests/test_functional.py
+++ /dev/null
@@ -1,32 +0,0 @@
-# -*- coding: UTF-8 -*-
-
-from Products.ATContentTypes.tests.atcttestcase import ATCTFunctionalSiteTestCase
-
-FILES = [
-    'topictool.txt', 'portaltype_criterion.txt', 'webdav.txt', 'http_access.txt',
-    'reindex_sanity.txt', 'uploading.txt', 'browser_collection_views.txt',
-    # traversal.txt registers the browser page "document_view", and this registration
-    # stays active in different doctests, so we make sure to include it last.
-    'traversal.txt',
-]
-
-import doctest
-OPTIONFLAGS = (doctest.ELLIPSIS |
-               doctest.NORMALIZE_WHITESPACE |
-               doctest.REPORT_NDIFF |
-               doctest.REPORT_ONLY_FIRST_FAILURE)
-
-from plone.testing import layered
-from plone.app.testing.bbb import PTC_FIXTURE
-
-def test_suite():
-    import unittest
-    suite = unittest.TestSuite()
-    for testfile in FILES:
-        suite.addTest(layered(doctest.FileSuite(testfile,
-                                optionflags=OPTIONFLAGS,
-                                package="Products.ATContentTypes.tests",
-                                test_class=ATCTFunctionalSiteTestCase),
-                      layer=PTC_FIXTURE)
-                     )
-    return suite


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-12-10T11:13:27+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/deab7e9445f0dd73010a1bfdd6ed65bdf41177b5

remove dependency on PloneTestCase

Files changed:
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_content_profile.py
M setup.py

diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 2d03905..c90f0a5 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -9,7 +9,7 @@
 from OFS.interfaces import IOrderedContainer as IOrderedContainer
 from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.interfaces import IATBTreeFolder
-from Products.PloneTestCase.setup import portal_owner
+from plone.app.testing import SITE_OWNER_NAME as portal_owner
 
 from zope.interface.verify import verifyObject
 from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index ecc8e29..c0d0831 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -14,15 +14,11 @@
 from Products.ATContentTypes.interfaces import IATImage
 from Products.ATContentTypes.tests import atcttestcase, atctftestcase
 from Products.ATContentTypes.tests.utils import dcEdit, PACKAGE_HOME
-from Products.PloneTestCase.PloneTestCase import FunctionalTestCase, setupPloneSite
-from Testing import ZopeTestCase  # side effect import. leave it here.
+from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
 from zope.interface.verify import verifyObject
 
-# BBB Zope 2.12
-try:
-    from Testing.testbrowser import Browser
-except ImportError:
-    from Products.Five.testbrowser import Browser
+
+from plone.testing.z2 import Browser
 
 # third party extension
 import exif
@@ -52,11 +48,6 @@ def editATCT(obj):
     obj.setImage(TEST_GIF, content_type="image/gif")
     dcEdit(obj)
 
-tests = []
-
-
-setupPloneSite()
-
 
 class TestIDFromTitle(FunctionalTestCase):
     """Browsertests to make sure ATImages derive their default IDs from their titles"""
@@ -104,8 +95,6 @@ def test_image_id_from_unicode_title(self):
         normalized = 'Picture%201.png'
         self.assertTrue(normalized in self.browser.url)
 
-tests.append(TestIDFromTitle)
-
 
 class TestSiteATImage(atcttestcase.ATCTTypeTestCase):
 
@@ -225,8 +214,6 @@ def test_exif_upload(self):
         self.assertTrue(len(atct.getEXIF()), atct.getEXIF())
         atct._image_exif = None
 
-tests.append(TestSiteATImage)
-
 
 class TestATImageFields(atcttestcase.ATCTFieldTestCase):
 
@@ -282,8 +269,6 @@ def test_imageField(self):
         self.assertTrue(tuple(vocab) == (), 'Value is %s' % str(tuple(vocab)))
         self.assertTrue(field.primary == 1, 'Value is %s' % field.primary)
 
-tests.append(TestATImageFields)
-
 
 class TestATImageFunctional(atctftestcase.ATCTIntegrationTestCase):
 
@@ -314,12 +299,3 @@ def test_bobo_hook_security(self):
         self.assertEqual(response3.getStatus(), 302)
         bobo_exception = response3.getHeader('bobo-exception-type')
         self.assertTrue('Unauthorized' in bobo_exception)
-
-tests.append(TestATImageFunctional)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/test_content_profile.py b/Products/ATContentTypes/tests/test_content_profile.py
index b772599..9d95304 100644
--- a/Products/ATContentTypes/tests/test_content_profile.py
+++ b/Products/ATContentTypes/tests/test_content_profile.py
@@ -1,5 +1,5 @@
 from Products.ATContentTypes import setuphandlers
-from Products.PloneTestCase.PloneTestCase import PloneTestCase
+from plone.app.testing.bbb import PloneTestCase
 
 
 class TestContentProfile(PloneTestCase):
diff --git a/setup.py b/setup.py
index 2a2add0..782b056 100644
--- a/setup.py
+++ b/setup.py
@@ -24,7 +24,7 @@
         test=[
             'zope.annotation',
             'zope.testing',
-            'Products.PloneTestCase',
+            'plone.app.testing',
         ]
       ),
       install_requires=[


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-12-11T13:27:02+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/734e6d494478d8b27421542e9dddce263dfd3ec9

small testing fixtures

Files changed:
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_doctests.py

diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index c0d0831..156de2e 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -17,7 +17,6 @@
 from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
 from zope.interface.verify import verifyObject
 
-
 from plone.testing.z2 import Browser
 
 # third party extension
@@ -57,7 +56,7 @@ def afterSetUp(self):
         self.userId = 'fred'
         self.password = 'secret'
         self.portal.acl_users.userFolderAddUser(self.userId, self.password, ['Manager'], [])
-        self.browser = Browser()
+        self.browser = Browser(self.layer['app'])
         self._log_in()
 
     def _log_in(self):
diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 743740d..3842f44 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -16,7 +16,7 @@
                doctest.REPORT_ONLY_FIRST_FAILURE)
 
 from plone.testing import layered
-from plone.app.testing.bbb import PTC_FIXTURE
+from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 
 def test_suite():
     import unittest
@@ -25,6 +25,6 @@ def test_suite():
         suite.addTest(layered(doctest.DocFileSuite(testfile,
                                 optionflags=OPTIONFLAGS,
                                 package="Products.ATContentTypes.tests",),
-                      layer=PTC_FIXTURE)
+                      layer=PTC_FUNCTIONAL_TESTING)
                      )
     return suite


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-12-11T14:53:39+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/f6a7645841486892720c8b026768b4dada417501

remove `self.` from doctests

Files changed:
M Products/ATContentTypes/tests/browser_collection_views.txt
M Products/ATContentTypes/tests/portaltype_criterion.txt
M Products/ATContentTypes/tests/reindex_sanity.txt
M Products/ATContentTypes/tests/webdav.txt

diff --git a/Products/ATContentTypes/tests/browser_collection_views.txt b/Products/ATContentTypes/tests/browser_collection_views.txt
index 4aac739..53a5942 100644
--- a/Products/ATContentTypes/tests/browser_collection_views.txt
+++ b/Products/ATContentTypes/tests/browser_collection_views.txt
@@ -11,13 +11,12 @@ atct_topic_view (Collection, the default view)
 First create a folder and a demo collection:
 
     >>> portal = layer['portal']
-    >>> self.setRoles(['Manager'])
-    >>> _ = portal.invokeFactory('Folder', 'folder')
-    >>> folder = portal.folder
+    >>> from plone.app.testing import TEST_USER_ID, setRoles
+    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+    >>> folder = portal[portal.invokeFactory('Folder', 'folder')]
     >>> folder.setTitle('Folder title')
     >>> folder.setDescription('Folder description')    
-    >>> _ = folder.invokeFactory('Topic', 'collection')
-    >>> collection = folder.collection
+    >>> collection = folder[folder.invokeFactory('Topic', 'collection')]
     >>> collection_title = 'Title. Lorem ipsum dolor sit amet'
     >>> collection.setTitle(collection_title)
     >>> collection_description = 'Description. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod.'
diff --git a/Products/ATContentTypes/tests/portaltype_criterion.txt b/Products/ATContentTypes/tests/portaltype_criterion.txt
index 7bb2ecb..bd18adf 100644
--- a/Products/ATContentTypes/tests/portaltype_criterion.txt
+++ b/Products/ATContentTypes/tests/portaltype_criterion.txt
@@ -87,12 +87,12 @@ because its portal_type ('Document') is different from its catalog Type ('Page')
 exclude the document from navigation, to make it easier to inspect the browser contents and
 detect whether it shows up in searches.
 
-    >>> self.loginAsPortalOwner()
-    >>> portal.invokeFactory('Document', 'doc1')
-    'doc1'
-    >>> portal.doc1.setTitle('Test Document')
-    >>> portal.doc1.setExcludeFromNav(True)
-    >>> portal.doc1.content_status_modify(workflow_action='publish')
+    >>> from plone.app.testing import TEST_USER_ID, setRoles
+    >>> setRoles(layer['portal'], TEST_USER_ID, ['Manager'])
+    >>> doc1 = portal[portal.invokeFactory('Document', 'doc1')]
+    >>> doc1.setTitle('Test Document')
+    >>> doc1.setExcludeFromNav(True)
+    >>> doc1.content_status_modify(workflow_action='publish')
     'http://nohost/plone/doc1'
 
 We now view the collection.
diff --git a/Products/ATContentTypes/tests/reindex_sanity.txt b/Products/ATContentTypes/tests/reindex_sanity.txt
index 17f0c10..716f4ad 100644
--- a/Products/ATContentTypes/tests/reindex_sanity.txt
+++ b/Products/ATContentTypes/tests/reindex_sanity.txt
@@ -14,8 +14,12 @@ Those tests make sure that the catalog is only called as necessary.
   >>> from Products.ATContentTypes.tests.atcttestcase import portal_owner
   >>> import transaction
 
-  >>> self.setRoles(['Manager'])
-  >>> _ = self.folder.invokeFactory(type_name='Folder', id='sub')
+  >>> from plone.app.testing import TEST_USER_ID, setRoles
+  >>> portal = layer['portal']
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
+
+  >>> _ = folder.invokeFactory(type_name='Folder', id='sub')
 
   >>> def callers(n=1):
   ...     stack = []
@@ -76,7 +80,7 @@ Wrap ZCatalog methods to let us know about why and when they were called:
 
 Disable Portal Factory:
 
-  >>> pf = getToolByName(self.portal, 'portal_factory', None)
+  >>> pf = getToolByName(portal, 'portal_factory', None)
   >>> if pf is not None:
   ...    pf.manage_setPortalFactoryTypes(listOfTypeIds=[])
 
@@ -86,7 +90,7 @@ Tests for ATDocument
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = self.folder.invokeFactory(type_name='Document',
+  >>> _ = folder.invokeFactory(type_name='Document',
   ...                               id='new_doc1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_doc1 []
@@ -101,15 +105,15 @@ setting:
   Indexing: /plone/Members/test_user_1_/new_doc1 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_doc1'].Title()
+  >>> folder['new_doc1'].Title()
   ''
 
-  >>> self.folder['new_doc1'].Description()
+  >>> folder['new_doc1'].Description()
   ''
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = self.folder.invokeFactory(type_name='Document',
+  >>> _ = folder.invokeFactory(type_name='Document',
   ...                               id='new_doc2',
   ...                               title='Title',
   ...                               description='Description')
@@ -126,10 +130,10 @@ More complex invokeFactory call, setting title and description:
   Indexing: /plone/Members/test_user_1_/new_doc2 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_doc2'].Title()
+  >>> folder['new_doc2'].Title()
   'Title'
 
-  >>> self.folder['new_doc2'].Description()
+  >>> folder['new_doc2'].Description()
   'Description'
 
 Now hold your breath. We are going to rename,
@@ -139,7 +143,7 @@ copy-and-paste and cut-and-paste.
 
 Rename:
 
-  >>> self.folder.manage_renameObjects(ids=['new_doc1'],
+  >>> folder.manage_renameObjects(ids=['new_doc1'],
   ...                                  new_ids=['new_doc11'])
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_doc1
@@ -159,8 +163,8 @@ Rename:
 
 Copy and paste:
 
-  >>> cp = self.folder.manage_copyObjects(ids=['new_doc2'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_copyObjects(ids=['new_doc2'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/sub/new_doc2 []
   ------------------------------------------------------------
@@ -176,8 +180,8 @@ Copy and paste:
 
 Cut and paste:
 
-  >>> cp = self.folder.manage_cutObjects(ids=['new_doc11'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_cutObjects(ids=['new_doc11'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_doc11
   ------------------------------------------------------------
@@ -197,7 +201,7 @@ Tests for ATFolder
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = self.folder.invokeFactory(type_name='Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_folder1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_folder1 []
@@ -212,15 +216,15 @@ setting:
   Indexing: /plone/Members/test_user_1_/new_folder1 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_folder1'].Title()
+  >>> folder['new_folder1'].Title()
   ''
 
-  >>> self.folder['new_folder1'].Description()
+  >>> folder['new_folder1'].Description()
   ''
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = self.folder.invokeFactory(type_name='Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_folder2',
   ...                               title='Title',
   ...                               description='Description')
@@ -237,10 +241,10 @@ More complex invokeFactory call, setting title and description:
   Indexing: /plone/Members/test_user_1_/new_folder2 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_folder2'].Title()
+  >>> folder['new_folder2'].Title()
   'Title'
 
-  >>> self.folder['new_folder2'].Description()
+  >>> folder['new_folder2'].Description()
   'Description'
 
 Now hold your breath. We are going to rename,
@@ -250,7 +254,7 @@ copy-and-paste and cut-and-paste.
 
 Rename:
 
-  >>> self.folder.manage_renameObjects(ids=['new_folder1'],
+  >>> folder.manage_renameObjects(ids=['new_folder1'],
   ...                                  new_ids=['new_folder11'])
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_folder1
@@ -270,8 +274,8 @@ Rename:
 
 Copy and paste:
 
-  >>> cp = self.folder.manage_copyObjects(ids=['new_folder2'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_copyObjects(ids=['new_folder2'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/sub/new_folder2 []
   ------------------------------------------------------------
@@ -287,8 +291,8 @@ Copy and paste:
 
 Cut and paste:
 
-  >>> cp = self.folder.manage_cutObjects(ids=['new_folder11'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_cutObjects(ids=['new_folder11'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_folder11
   ------------------------------------------------------------
@@ -308,7 +312,7 @@ Tests for ATBTreeFolder
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = self.folder.invokeFactory(type_name='Large Plone Folder',
+  >>> _ = folder.invokeFactory(type_name='Large Plone Folder',
   ...                               id='new_btree_folder1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_btree_folder1 []
@@ -323,15 +327,15 @@ setting:
   Indexing: /plone/Members/test_user_1_/new_btree_folder1 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_btree_folder1'].Title()
+  >>> folder['new_btree_folder1'].Title()
   ''
 
-  >>> self.folder['new_btree_folder1'].Description()
+  >>> folder['new_btree_folder1'].Description()
   ''
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = self.folder.invokeFactory(type_name='Large Plone Folder',
+  >>> _ = folder.invokeFactory(type_name='Large Plone Folder',
   ...                               id='new_btree_folder2',
   ...                               title='Title',
   ...                               description='Description')
@@ -348,10 +352,10 @@ More complex invokeFactory call, setting title and description:
   Indexing: /plone/Members/test_user_1_/new_btree_folder2 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_btree_folder2'].Title()
+  >>> folder['new_btree_folder2'].Title()
   'Title'
 
-  >>> self.folder['new_btree_folder2'].Description()
+  >>> folder['new_btree_folder2'].Description()
   'Description'
 
 Now hold your breath. We are going to rename,
@@ -361,7 +365,7 @@ copy-and-paste and cut-and-paste.
 
 Rename:
 
-  >>> self.folder.manage_renameObjects(ids=['new_btree_folder1'],
+  >>> folder.manage_renameObjects(ids=['new_btree_folder1'],
   ...                                  new_ids=['new_btree_folder11'])
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_btree_folder1
@@ -381,8 +385,8 @@ Rename:
 
 Copy and paste:
 
-  >>> cp = self.folder.manage_copyObjects(ids=['new_btree_folder2'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_copyObjects(ids=['new_btree_folder2'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/sub/new_btree_folder2 []
   ------------------------------------------------------------
@@ -399,8 +403,8 @@ Copy and paste:
 
 Cut and paste:
 
-  >>> cp = self.folder.manage_cutObjects(ids=['new_btree_folder11'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_cutObjects(ids=['new_btree_folder11'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_btree_folder11
   ------------------------------------------------------------
diff --git a/Products/ATContentTypes/tests/webdav.txt b/Products/ATContentTypes/tests/webdav.txt
index da4b2c4..536f246 100644
--- a/Products/ATContentTypes/tests/webdav.txt
+++ b/Products/ATContentTypes/tests/webdav.txt
@@ -55,7 +55,7 @@ Document
   HTTP/1.1 201 Created
   ...
 
-  >>> document = self.folder['test-document']
+  >>> document = folder['test-document']
   >>> input.seek(0)
 
   >>> print document.getPortalTypeName()
@@ -110,7 +110,7 @@ Document
   HTTP/1.1 201 Created
   ...
 
-  >>> document = self.folder['test-document2.txt']
+  >>> document = folder['test-document2.txt']
   >>> input.seek(0)
 
   >>> print document.getPortalTypeName()
@@ -143,7 +143,7 @@ Event
 
   XXX: .event should be removed?
 
-  >>> event = self.folder['test-event.event']
+  >>> event = folder['test-event.event']
 
   >>> print event.getPortalTypeName()
   Event
@@ -169,7 +169,7 @@ File
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file']
+  >>> file = folder['test-file']
 
   >>> print file.getPortalTypeName()
   File
@@ -203,7 +203,7 @@ File, by Extension
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file.zip']
+  >>> file = folder['test-file.zip']
 
   >>> print file.getPortalTypeName()
   File
@@ -231,7 +231,7 @@ OpenOffice 1.0 Text Document, no Content-Type, Extension
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file1.sxw']
+  >>> file = folder['test-file1.sxw']
 
   >>> print file.getPortalTypeName()
   File
@@ -269,7 +269,7 @@ OpenOffice 1.0 Text Document, no Content-Type, No Extension
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file2']
+  >>> file = folder['test-file2']
 
   >>> print file.getPortalTypeName()
   File
@@ -310,7 +310,7 @@ OpenOffice 1.0 Text Document, w/ Content-Type, No Extension
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file3']
+  >>> file = folder['test-file3']
 
   >>> print file.getPortalTypeName()
   File
@@ -351,7 +351,7 @@ Image
   HTTP/1.1 201 Created
   ...
 
-  >>> image = self.folder['test-image']
+  >>> image = folder['test-image']
 
   >>> print image.getPortalTypeName()
   Image
@@ -385,7 +385,7 @@ Image, by Extension
   HTTP/1.1 201 Created
   ...
 
-  >>> image = self.folder['test-image.gif']
+  >>> image = folder['test-image.gif']
 
   >>> print image.getPortalTypeName()
   Image
@@ -412,7 +412,7 @@ Image, by Extension
   XXX: Note that name mangeling for WebDAV PUTs are not supported at the
   moment!
 
-  >>> image = self.folder['test my image.gif']
+  >>> image = folder['test my image.gif']
 
   >>> print image.getPortalTypeName()
   Image
@@ -442,7 +442,7 @@ Link
 
   XXX: .link should be removed?
 
-  >>> link = self.folder['test-link.link']
+  >>> link = folder['test-link.link']
 
   >>> print link.getPortalTypeName()
   Link
@@ -469,7 +469,7 @@ News Item
 
   XXX: .news should be removed?
 
-  >>> news = self.folder['test-newsitem.news']
+  >>> news = folder['test-newsitem.news']
 
   >>> print news.getPortalTypeName()
   News Item
@@ -495,7 +495,7 @@ HTML Page - verify that title is extracted
   HTTP/1.1 201 Created
   ...
 
-  >>> htdoc = self.folder['test-html-title.html']
+  >>> htdoc = folder['test-html-title.html']
   >>> print htdoc.Title()
   HTML Title
   >>> print htdoc.Format()
@@ -516,7 +516,7 @@ XHTML Page - verify that title and body are extracted
   HTTP/1.1 201 Created
   ...
 
-  >>> htdoc = self.folder['test-xhtml-title.html']
+  >>> htdoc = folder['test-xhtml-title.html']
   >>> print htdoc.Title()
   HTML Title
   >>> print htdoc.Format()
@@ -547,7 +547,7 @@ Folder
   HTTP/1.1 201 Created
   ...
 
-  >>> self.folder['test-folder-name'].Title()
+  >>> folder['test-folder-name'].Title()
   'test-folder-name'
 
 BTreeFolder
@@ -555,7 +555,7 @@ BTreeFolder
 
 Need to make a BTreeFolder manually, and then do a MKCOL inside it:
 
-  >>> _ = self.folder.invokeFactory('Large Plone Folder', 'test-btree')
+  >>> _ = folder.invokeFactory('Large Plone Folder', 'test-btree')
 
   >>> print http(r"""
   ... MKCOL /%s/test-btree/test-btreefolder-name HTTP/1.1
@@ -565,7 +565,7 @@ Need to make a BTreeFolder manually, and then do a MKCOL inside it:
   HTTP/1.1 201 Created
   ...
 
-  >>> self.folder['test-btree']['test-btreefolder-name'].Title()
+  >>> folder['test-btree']['test-btreefolder-name'].Title()
   'test-btreefolder-name'
 
 PUT Mangling
@@ -583,10 +583,10 @@ Now for the real thing, doing a PUT request, back to Member role:
   HTTP/1.1 201 Created
   ...
 
-  >>> 'Foto do Parana.jpg' in self.folder
+  >>> 'Foto do Parana.jpg' in folder
   True
 
-  >>> image = self.folder['Foto do Parana.jpg']
+  >>> image = folder['Foto do Parana.jpg']
 
   >>> print image.getPortalTypeName()
   Image
@@ -607,10 +607,10 @@ MKCOL Mangling
   HTTP/1.1 201 Created
   ...
 
-  >>> 'Fotos de Jurere' in self.folder
+  >>> 'Fotos de Jurere' in folder
   True
 
-  >>> print self.folder['Fotos de Jurere'].Title()
+  >>> print folder['Fotos de Jurere'].Title()
   Fotos de Jurere
 
   >>> AppZapper().clear()


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-12-11T15:20:28+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/9ab68f956514b6331ef91a9b7be7d5d61f74fc27

import fixtures

Files changed:
M Products/ATContentTypes/tests/http_access.txt
M Products/ATContentTypes/tests/portaltype_criterion.txt
M Products/ATContentTypes/tests/webdav.txt

diff --git a/Products/ATContentTypes/tests/http_access.txt b/Products/ATContentTypes/tests/http_access.txt
index d08dba4..3b9d659 100644
--- a/Products/ATContentTypes/tests/http_access.txt
+++ b/Products/ATContentTypes/tests/http_access.txt
@@ -11,7 +11,7 @@ Sidneys tests for Archetypes.
 
   >>> import os
   >>> from plone.app.testing import TEST_USER_NAME as user_name
-  >>> from plone.app.testing import user_password as user_password
+  >>> from plone.app.testing import TEST_USER_PASSWORD as user_password
   >>> from plone.app.testing import TEST_USER_ID
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
   >>> portal = layer['portal']
diff --git a/Products/ATContentTypes/tests/portaltype_criterion.txt b/Products/ATContentTypes/tests/portaltype_criterion.txt
index bd18adf..674be13 100644
--- a/Products/ATContentTypes/tests/portaltype_criterion.txt
+++ b/Products/ATContentTypes/tests/portaltype_criterion.txt
@@ -8,9 +8,10 @@ Adding an ATTopic criterion for Type
 
 First, we need to log in.
 
-    >>> from Products.PloneTestCase.setup import portal_owner, default_password
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 
diff --git a/Products/ATContentTypes/tests/webdav.txt b/Products/ATContentTypes/tests/webdav.txt
index 536f246..d74208c 100644
--- a/Products/ATContentTypes/tests/webdav.txt
+++ b/Products/ATContentTypes/tests/webdav.txt
@@ -11,9 +11,9 @@ First, we are going to setup an environment so we can test that stuff
 is acquired or not acquired at the right times.
 
   >>> import os
-  >>> plone.app.testing import TEST_USER_ID
-  >>> plone.app.testing import TEST_USER_NAME
-  >>> plone.app.testing import TEST_USER_PASSWORD
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> from plone.app.testing import TEST_USER_NAME
+  >>> from plone.app.testing import TEST_USER_PASSWORD
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
   >>> portal = layer['portal']
   >>> portal_name = portal.getId()


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2014-12-11T21:17:32+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/f5dabf3d73bdf5754bec8903b0750047ec744ae9

use browser from plone.testing.z2

Files changed:
M Products/ATContentTypes/tests/topictool.txt
M Products/ATContentTypes/tests/traversal.txt
M Products/ATContentTypes/tests/uploading.txt

diff --git a/Products/ATContentTypes/tests/topictool.txt b/Products/ATContentTypes/tests/topictool.txt
index 06ce614..64c4bbe 100644
--- a/Products/ATContentTypes/tests/topictool.txt
+++ b/Products/ATContentTypes/tests/topictool.txt
@@ -3,15 +3,8 @@ Topic Tool Management
 
 Test setup.
 
-    >>> import cStringIO
-
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
-
-    >>> browser = Browser()
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login')
 
 Log in.
diff --git a/Products/ATContentTypes/tests/traversal.txt b/Products/ATContentTypes/tests/traversal.txt
index 81cd8ef..de224f1 100644
--- a/Products/ATContentTypes/tests/traversal.txt
+++ b/Products/ATContentTypes/tests/traversal.txt
@@ -24,9 +24,6 @@ is acquired or not acquired at the right times.
   ...             title='Root Document')
   'test_document'
 
-  >>> portal.invokeFactory('Document', 'index_html', title='Root Index')
-  'index_html'
-
   >>> portal.invokeFactory('Folder', 'simple_folder')
   'simple_folder'
 
diff --git a/Products/ATContentTypes/tests/uploading.txt b/Products/ATContentTypes/tests/uploading.txt
index e410db9..704b599 100644
--- a/Products/ATContentTypes/tests/uploading.txt
+++ b/Products/ATContentTypes/tests/uploading.txt
@@ -3,15 +3,9 @@ Uploading the contents of a document
 
 Test setup.
 
-    >>> import cStringIO
-
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
-
-    >>> browser = Browser()
+    >>> from cStringIO import StringIO
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login')
 
 Log in.
@@ -37,7 +31,7 @@ contents of the text field, if any.
 
     >>> browser.getControl(name='title').value = 'test document'
     >>> browser.getControl(name='text').value = 'This will be ignored.'
-    >>> browser.getControl(name='text_file').add_file(cStringIO.StringIO('file contents'), 'text/plain', 'test.txt')
+    >>> browser.getControl(name='text_file').add_file(StringIO('file contents'), 'text/plain', 'test.txt')
     >>> browser.getControl('Save').click()
     >>> browser.url
     'http://nohost/plone/test-document'
@@ -62,7 +56,7 @@ contents of the text field, if any.
 
     >>> browser.getControl(name='title').value = 'test collection'
     >>> browser.getControl(name='text').value = 'This will be ignored.'
-    >>> browser.getControl(name='text_file').add_file(cStringIO.StringIO('file contents'), 'text/plain', 'test.txt')
+    >>> browser.getControl(name='text_file').add_file(StringIO('file contents'), 'text/plain', 'test.txt')
     >>> browser.getControl('Save').click()
     >>> browser.url
     'http://nohost/plone/test-collection/'


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-01-27T08:56:55+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/cac0038f2d87f9481e71cafa9ec45df156f0ece2

Merge remote-tracking branch 'origin/master' into tomgross-ptc

Conflicts:
	Products/ATContentTypes/tests/http_access.txt
	Products/ATContentTypes/tests/traversal.txt
	Products/ATContentTypes/tests/uploading.txt
	Products/ATContentTypes/tests/webdav.txt

Files changed:
A Products/ATContentTypes/factories.py
A Products/ATContentTypes/interfaces/factories.py
A Products/ATContentTypes/profiles/base/componentregistry.xml
A Products/ATContentTypes/profiles/base/metadata.xml
A Products/ATContentTypes/profiles/base/rolemap.xml
A Products/ATContentTypes/profiles/base/skins.xml
A Products/ATContentTypes/profiles/base/toolset.xml
A Products/ATContentTypes/tests/test_base_profile.py
M CHANGES.txt
M Products/ATContentTypes/configure.zcml
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/schemata.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/interfaces/__init__.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/profiles/default/metadata.xml
M Products/ATContentTypes/profiles/default/types.xml
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atevent.py
M Products/ATContentTypes/tests/test_atnewsitem.py
M Products/ATContentTypes/tests/uploading.txt
D Products/ATContentTypes/profiles/default/componentregistry.xml
D Products/ATContentTypes/profiles/default/rolemap.xml
D Products/ATContentTypes/profiles/default/skins.xml
D Products/ATContentTypes/profiles/default/toolset.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index 39ff9c7..206fa13 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,9 @@ Changelog
 2.2.3 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Add profile 'base' to allow addons to depend on ATContentTypes in Plone 5
+  without uninstalling the dexterity default-types.
+  [pbauer]
 
 
 2.2.2 (2014-10-23)
diff --git a/Products/ATContentTypes/configure.zcml b/Products/ATContentTypes/configure.zcml
index db7a6dd..209eeac 100644
--- a/Products/ATContentTypes/configure.zcml
+++ b/Products/ATContentTypes/configure.zcml
@@ -60,10 +60,21 @@
       provides="Products.GenericSetup.interfaces.EXTENSION"
       />
 
+  <genericsetup:registerProfile
+      name="base"
+      title="Archetypes-tools without content-types"
+      directory="profiles/base"
+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      />
+
   <genericsetup:importStep
       name="atct_content"
       title="ATContentTypes default content"
       description=""
       handler=".setuphandlers.importContent" />
 
+
+  <adapter factory=".permission.ATFieldPermissionChecker" />
+
 </configure>
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 26b3842..2a2d6b8 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -15,7 +15,7 @@
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import TextField
 from Products.Archetypes.atapi import BooleanField
-from Products.Archetypes.atapi import RichWidget
+from Products.Archetypes.atapi import TinyMCEWidget
 from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import RFC822Marshaller
 from Products.Archetypes.atapi import AnnotationStorage
@@ -41,7 +41,7 @@
               validators=('isTidyHtmlWithCleanup',),
               #validators=('isTidyHtml',),
               default_output_type='text/x-html-safe',
-              widget=RichWidget(
+              widget=TinyMCEWidget(
                         description='',
                         label=_(u'label_body_text', default=u'Body Text'),
                         rows=25,
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index 354862d..1d6dc04 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -10,9 +10,9 @@
 from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import StringField
 from Products.Archetypes.atapi import TextField
-from Products.Archetypes.atapi import CalendarWidget
+from Products.Archetypes.atapi import DatetimeWidget
 from Products.Archetypes.atapi import LinesWidget
-from Products.Archetypes.atapi import RichWidget
+from Products.Archetypes.atapi import TinyMCEWidget
 from Products.Archetypes.atapi import StringWidget
 from Products.Archetypes.atapi import RFC822Marshaller
 from Products.Archetypes.atapi import AnnotationStorage
@@ -45,7 +45,7 @@
                   write_permission=ModifyPortalContent,
                   default_method=DateTime,
                   languageIndependent=True,
-                  widget=CalendarWidget(
+                  widget=DatetimeWidget(
                         description='',
                         label=_(u'label_event_start', default=u'Event Starts')
                         )),
@@ -57,7 +57,7 @@
                   write_permission=ModifyPortalContent,
                   default_method=DateTime,
                   languageIndependent=True,
-                  widget=CalendarWidget(
+                  widget=DatetimeWidget(
                         description='',
                         label=_(u'label_event_end', default=u'Event Ends')
                         )),
@@ -69,7 +69,7 @@
               storage=AnnotationStorage(migrate=True),
               validators=('isTidyHtmlWithCleanup',),
               default_output_type='text/x-html-safe',
-              widget=RichWidget(
+              widget=TinyMCEWidget(
                         description='',
                         label=_(u'label_event_announcement', default=u'Event body text'),
                         rows=25,
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index b72e9e3..3cf41b8 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -7,7 +7,7 @@
 from Products.Archetypes.atapi import StringField
 from Products.Archetypes.atapi import TextField
 from Products.Archetypes.atapi import ImageWidget
-from Products.Archetypes.atapi import RichWidget
+from Products.Archetypes.atapi import TinyMCEWidget
 from Products.Archetypes.atapi import StringWidget
 from Products.Archetypes.atapi import RFC822Marshaller
 from Products.Archetypes.atapi import AnnotationStorage
@@ -43,7 +43,7 @@
         validators=('isTidyHtmlWithCleanup',),
         #validators=('isTidyHtml',),
         default_output_type='text/x-html-safe',
-        widget=RichWidget(
+        widget=TinyMCEWidget(
             description='',
             label=_(u'label_body_text', u'Body Text'),
             rows=25,
diff --git a/Products/ATContentTypes/content/schemata.py b/Products/ATContentTypes/content/schemata.py
index 8c9a239..03b9ba1 100644
--- a/Products/ATContentTypes/content/schemata.py
+++ b/Products/ATContentTypes/content/schemata.py
@@ -5,8 +5,8 @@
 from Products.Archetypes.atapi import BooleanWidget
 from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.CMFCore.permissions import ModifyPortalContent
+from Products.Archetypes.Widget import RelatedItemsWidget
 
-from plone.app.widgets.at import RelatedItemsWidget
 
 # for ATContentTypes we want to have the description in the edit view
 # just like CMF
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index 60c0f35..829c67f 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -23,7 +23,7 @@
 from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import IntegerWidget
 from Products.Archetypes.atapi import InAndOutWidget
-from Products.Archetypes.atapi import RichWidget
+from Products.Archetypes.atapi import TinyMCEWidget
 from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import AnnotationStorage
 
@@ -62,7 +62,7 @@
               #validators=('isTidyHtml',),
               default_output_type='text/x-html-safe',
               write_permission=ChangeTopics,
-              widget=RichWidget(
+              widget=TinyMCEWidget(
                     description='',
                     label=_(u'label_body_text', default=u'Body Text'),
                     rows=25,
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index 4751134..c48a2f5 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -16,7 +16,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 
-from plone.app.widgets.at import RelatedItemsWidget
+from Products.Archetypes.Widget import RelatedItemsWidget
 
 from Products.ATContentTypes import ATCTMessageFactory as _
 
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
new file mode 100644
index 0000000..15e0795
--- /dev/null
+++ b/Products/ATContentTypes/factories.py
@@ -0,0 +1,64 @@
+import transaction
+from thread import allocate_lock
+
+from zope.component import getUtility
+from zope.component import adapts
+from zope.container.interfaces import INameChooser
+from zope.lifecycleevent import ObjectModifiedEvent
+from zope.event import notify
+from zope.interface import implements
+
+from Products.Archetypes.event import ObjectInitializedEvent
+from Products.Archetypes.interfaces import IATCTFileFactory
+from Products.CMFCore.utils import getToolByName
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFPlone import utils as ploneutils
+
+from plone.i18n.normalizer.interfaces import IFileNameNormalizer
+
+upload_lock = allocate_lock()
+
+
+class ATCTFileFactory(object):
+    """
+    ripped out of collective.uploadify
+    """
+    implements(IATCTFileFactory)
+    adapts(IFolderish)
+
+    def __init__(self, context):
+        self.context = context
+
+    def __call__(self, name, content_type, data):
+        ctr = getToolByName(self.context, 'content_type_registry')
+        type_ = ctr.findTypeName(name.lower(), '', '') or 'File'
+
+        # XXX: quick fix for german umlauts
+        name = name.decode("utf8")
+
+        normalizer = getUtility(IFileNameNormalizer)
+        chooser = INameChooser(self.context)
+
+        # otherwise I get ZPublisher.Conflict ConflictErrors
+        # when uploading multiple files
+        upload_lock.acquire()
+
+        # this should fix #8
+        newid = chooser.chooseName(normalizer.normalize(name),
+                                   self.context.aq_parent)
+        try:
+            transaction.begin()
+            obj = ploneutils._createObjectByType(type_,
+                                                 self.context, newid)
+            mutator = obj.getPrimaryField().getMutator(obj)
+            mutator(data, content_type=content_type)
+            obj.setTitle(name)
+            obj.reindexObject()
+
+            notify(ObjectInitializedEvent(obj))
+            notify(ObjectModifiedEvent(obj))
+
+            transaction.commit()
+        finally:
+            upload_lock.release()
+        return obj
\ No newline at end of file
diff --git a/Products/ATContentTypes/interfaces/__init__.py b/Products/ATContentTypes/interfaces/__init__.py
index 80b1622..16e9d3a 100644
--- a/Products/ATContentTypes/interfaces/__init__.py
+++ b/Products/ATContentTypes/interfaces/__init__.py
@@ -21,3 +21,4 @@
 from Products.ATContentTypes.interfaces.topic import IATTopicCriterion
 from Products.ATContentTypes.interfaces.topic import IATTopicSearchCriterion
 from Products.ATContentTypes.interfaces.topic import IATTopicSortCriterion
+from Products.ATContentTypes.interfaces.factories import IATCTFileFactory
\ No newline at end of file
diff --git a/Products/ATContentTypes/interfaces/factories.py b/Products/ATContentTypes/interfaces/factories.py
new file mode 100644
index 0000000..68173ac
--- /dev/null
+++ b/Products/ATContentTypes/interfaces/factories.py
@@ -0,0 +1,6 @@
+from plone.app.widgets.interfaces import IFileFactory
+
+
+class IATCTFileFactory(IFileFactory):
+    """ adapter factory for ATCT
+    """
\ No newline at end of file
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index dbffe00..3031f4c 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -3,6 +3,11 @@
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.interfaces import IATTopicCriterion
+from Products.Archetypes.interfaces import IBaseObject
+from plone.app.widgets.interfaces import IFieldPermissionChecker
+from zope.interface import implements
+from zope.component import adapts
+
 
 TYPE_ROLES = ('Manager', 'Site Administrator', 'Owner')
 TOPIC_ROLES = ('Manager', 'Site Administrator')
@@ -53,3 +58,23 @@ def wireAddPermissions():
 
         permissions[atct['portal_type']] = permission
     return permissions
+
+
+class ATFieldPermissionChecker(object):
+    implements(IFieldPermissionChecker)
+    adapts(IBaseObject)
+
+    def __init__(self, context):
+        self.context = context
+
+    def validate(self, field_name, vocabulary_name=None):
+        field = self.context.getField(field_name)
+        if field is not None:
+            # If a vocabulary name was specified and it doesn't match
+            # the value for the field or the widget, fail.
+            if vocabulary_name and (
+               vocabulary_name != getattr(field.widget, 'vocabulary', None) and
+               vocabulary_name != getattr(field, 'vocabulary_factory', None)):
+                return False
+            return field.checkPermission('w', self.context)
+        raise AttributeError('No such field: {}'.format(field_name))
diff --git a/Products/ATContentTypes/profiles/base/componentregistry.xml b/Products/ATContentTypes/profiles/base/componentregistry.xml
new file mode 100644
index 0000000..7a4d865
--- /dev/null
+++ b/Products/ATContentTypes/profiles/base/componentregistry.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<componentregistry>
+ <utilities>
+  <utility
+     interface="Products.ATContentTypes.interface.IATCTTool"
+     object="portal_atct"/>
+ </utilities>
+</componentregistry>
diff --git a/Products/ATContentTypes/profiles/base/metadata.xml b/Products/ATContentTypes/profiles/base/metadata.xml
new file mode 100644
index 0000000..964d111
--- /dev/null
+++ b/Products/ATContentTypes/profiles/base/metadata.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<metadata>
+  <version>1</version>
+  <dependencies>
+    <dependency>profile-Products.Archetypes:Archetypes</dependency>
+    <dependency>profile-Products.CMFFormController:CMFFormController</dependency>
+  </dependencies>
+</metadata>
diff --git a/Products/ATContentTypes/profiles/base/rolemap.xml b/Products/ATContentTypes/profiles/base/rolemap.xml
new file mode 100644
index 0000000..ff91619
--- /dev/null
+++ b/Products/ATContentTypes/profiles/base/rolemap.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0"?>
+<rolemap>
+  <permissions>
+    <permission name="ATContentTypes: Add Document" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+    <permission name="ATContentTypes: Add Event" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+    <permission name="ATContentTypes: Add File" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+    <permission name="ATContentTypes: Add Folder" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+    <permission name="ATContentTypes: Add Image" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+    <permission name="ATContentTypes: Add Link" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+    <permission name="ATContentTypes: Add News Item" acquire="True">
+      <role name="Manager"/>
+      <role name="Site Administrator"/>
+      <role name="Owner"/>
+      <role name="Contributor"/>
+    </permission>
+  </permissions>
+</rolemap>
diff --git a/Products/ATContentTypes/profiles/base/skins.xml b/Products/ATContentTypes/profiles/base/skins.xml
new file mode 100644
index 0000000..4e2ae22
--- /dev/null
+++ b/Products/ATContentTypes/profiles/base/skins.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<object name="portal_skins" meta_type="Plone Skins Tool">
+ <object name="ATContentTypes" meta_type="Filesystem Directory View"
+    directory="Products.ATContentTypes:skins/ATContentTypes"/>
+ <object name="archetypes" meta_type="Filesystem Directory View"
+    directory="Products.Archetypes:skins/archetypes"/>
+ <skin-path name="*">
+  <layer name="ATContentTypes" insert-after="custom"/>
+  <layer name="archetypes" insert-after="custom"/>
+ </skin-path>
+</object>
diff --git a/Products/ATContentTypes/profiles/base/toolset.xml b/Products/ATContentTypes/profiles/base/toolset.xml
new file mode 100644
index 0000000..6f6b568
--- /dev/null
+++ b/Products/ATContentTypes/profiles/base/toolset.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0"?>
+<tool-setup>
+ <required tool_id="portal_atct"
+           class="Products.ATContentTypes.tool.atct.ATCTTool"/>
+ <required tool_id="portal_factory"
+           class="Products.ATContentTypes.tool.factory.FactoryTool"/>
+ <required tool_id="portal_metadata"
+           class="Products.ATContentTypes.tool.metadata.MetadataTool"/>
+</tool-setup>
diff --git a/Products/ATContentTypes/profiles/default/componentregistry.xml b/Products/ATContentTypes/profiles/default/componentregistry.xml
deleted file mode 100644
index 7a4d865..0000000
--- a/Products/ATContentTypes/profiles/default/componentregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility
-     interface="Products.ATContentTypes.interface.IATCTTool"
-     object="portal_atct"/>
- </utilities>
-</componentregistry>
diff --git a/Products/ATContentTypes/profiles/default/metadata.xml b/Products/ATContentTypes/profiles/default/metadata.xml
index 4410f5f..4ff0d5f 100644
--- a/Products/ATContentTypes/profiles/default/metadata.xml
+++ b/Products/ATContentTypes/profiles/default/metadata.xml
@@ -2,8 +2,7 @@
 <metadata>
   <version>1</version>
   <dependencies>
-    <dependency>profile-Products.Archetypes:Archetypes</dependency>
-    <dependency>profile-Products.CMFFormController:CMFFormController</dependency>
+    <dependency>profile-Products.ATContentTypes:base</dependency>
     <dependency>profile-plone.app.collection:default</dependency>
     <dependency>profile-plone.app.imaging:default</dependency>
     <dependency>profile-plone.app.widgets:default</dependency>
diff --git a/Products/ATContentTypes/profiles/default/rolemap.xml b/Products/ATContentTypes/profiles/default/rolemap.xml
deleted file mode 100644
index ff91619..0000000
--- a/Products/ATContentTypes/profiles/default/rolemap.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="ATContentTypes: Add Document" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-    <permission name="ATContentTypes: Add Event" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-    <permission name="ATContentTypes: Add File" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-    <permission name="ATContentTypes: Add Folder" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-    <permission name="ATContentTypes: Add Image" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-    <permission name="ATContentTypes: Add Link" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-    <permission name="ATContentTypes: Add News Item" acquire="True">
-      <role name="Manager"/>
-      <role name="Site Administrator"/>
-      <role name="Owner"/>
-      <role name="Contributor"/>
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/Products/ATContentTypes/profiles/default/skins.xml b/Products/ATContentTypes/profiles/default/skins.xml
deleted file mode 100644
index 4e2ae22..0000000
--- a/Products/ATContentTypes/profiles/default/skins.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_skins" meta_type="Plone Skins Tool">
- <object name="ATContentTypes" meta_type="Filesystem Directory View"
-    directory="Products.ATContentTypes:skins/ATContentTypes"/>
- <object name="archetypes" meta_type="Filesystem Directory View"
-    directory="Products.Archetypes:skins/archetypes"/>
- <skin-path name="*">
-  <layer name="ATContentTypes" insert-after="custom"/>
-  <layer name="archetypes" insert-after="custom"/>
- </skin-path>
-</object>
diff --git a/Products/ATContentTypes/profiles/default/toolset.xml b/Products/ATContentTypes/profiles/default/toolset.xml
deleted file mode 100644
index 6f6b568..0000000
--- a/Products/ATContentTypes/profiles/default/toolset.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<tool-setup>
- <required tool_id="portal_atct"
-           class="Products.ATContentTypes.tool.atct.ATCTTool"/>
- <required tool_id="portal_factory"
-           class="Products.ATContentTypes.tool.factory.FactoryTool"/>
- <required tool_id="portal_metadata"
-           class="Products.ATContentTypes.tool.metadata.MetadataTool"/>
-</tool-setup>
diff --git a/Products/ATContentTypes/profiles/default/types.xml b/Products/ATContentTypes/profiles/default/types.xml
index 325a6d1..10a5c78 100644
--- a/Products/ATContentTypes/profiles/default/types.xml
+++ b/Products/ATContentTypes/profiles/default/types.xml
@@ -1,5 +1,15 @@
 <?xml version="1.0"?>
 <object name="portal_types" meta_type="Plone Types Tool">
+ <!-- We remove existing FTIs since they could be Dexterity-based and would
+ not be compatible in that case -->
+ <object name="Document" remove="True"/>
+ <object name="Event" remove="True"/>
+ <object name="File" remove="True"/>
+ <object name="Folder" remove="True"/>
+ <object name="Image" remove="True"/>
+ <object name="Link" remove="True"/>
+ <object name="News Item" remove="True"/>
+
  <property
     name="title">Controls the available content types in your portal</property>
  <object name="ATBooleanCriterion"
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 38703b5..65af665 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -26,7 +26,7 @@
 from Products.Archetypes.interfaces.referenceable import IReferenceable
 from Products.Archetypes.interfaces.templatemixin import ITemplateMixin
 from Products.Archetypes.tests.test_baseschema import BaseSchemaTest
-from plone.app.widgets.at import RelatedItemsWidget
+from Products.Archetypes.Widget import RelatedItemsWidget
 
 from plone.app.blob.markings import markAs
 
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index 8a220ae..a95a2b1 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -249,7 +249,7 @@ def test_textField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
-        self.assertTrue(isinstance(field.widget, atapi.RichWidget),
+        self.assertTrue(isinstance(field.widget, atapi.TinyMCEWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, atapi.DisplayList),
diff --git a/Products/ATContentTypes/tests/test_atevent.py b/Products/ATContentTypes/tests/test_atevent.py
index 3089413..4658882 100644
--- a/Products/ATContentTypes/tests/test_atevent.py
+++ b/Products/ATContentTypes/tests/test_atevent.py
@@ -214,7 +214,7 @@ def test_subjectField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % repr(field.validators))
-        self.assertTrue(isinstance(field.widget, atapi.KeywordWidget),
+        self.assertTrue(isinstance(field.widget, atapi.TagsWidget),
                         'Value is %s' % id(field.widget))
 
     def test_eventUrlField(self):
@@ -294,7 +294,7 @@ def test_startDateField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
-        self.assertTrue(isinstance(field.widget, atapi.CalendarWidget),
+        self.assertTrue(isinstance(field.widget, atapi.DatetimeWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, atapi.DisplayList),
@@ -337,7 +337,7 @@ def test_endDateField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
-        self.assertTrue(isinstance(field.widget, atapi.CalendarWidget),
+        self.assertTrue(isinstance(field.widget, atapi.DatetimeWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, atapi.DisplayList),
@@ -544,7 +544,7 @@ def test_textField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
-        self.assertTrue(isinstance(field.widget, atapi.RichWidget),
+        self.assertTrue(isinstance(field.widget, atapi.TinyMCEWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, atapi.DisplayList),
diff --git a/Products/ATContentTypes/tests/test_atnewsitem.py b/Products/ATContentTypes/tests/test_atnewsitem.py
index 344e445..351a129 100644
--- a/Products/ATContentTypes/tests/test_atnewsitem.py
+++ b/Products/ATContentTypes/tests/test_atnewsitem.py
@@ -101,7 +101,7 @@ def test_textField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
-        self.assertTrue(isinstance(field.widget, atapi.RichWidget),
+        self.assertTrue(isinstance(field.widget, atapi.TinyMCEWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, atapi.DisplayList),
diff --git a/Products/ATContentTypes/tests/test_base_profile.py b/Products/ATContentTypes/tests/test_base_profile.py
new file mode 100644
index 0000000..2c34d1e
--- /dev/null
+++ b/Products/ATContentTypes/tests/test_base_profile.py
@@ -0,0 +1,20 @@
+# -*- coding: UTF-8 -*-
+from Products.PloneTestCase.PloneTestCase import PloneTestCase
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
+
+
+class TestBaseProfile(PloneTestCase):
+
+    def afterSetUp(self):
+        self.loginAsPortalOwner()
+        qi = self.portal.portal_quickinstaller
+        qi.uninstallProducts(['ATContentTypes'])
+        portal_setup = self.portal.portal_setup
+        portal_setup.runAllImportStepsFromProfile('profile-Products.ATContentTypes:base')
+
+    def test_attypes_not_installed(self):
+        tt = getToolByName(self.portal, 'portal_types')
+        types = tt.listTypeInfo()
+        for t in types:
+            self.assertNotEqual(t.product, 'ATContentTypes')
diff --git a/Products/ATContentTypes/tests/uploading.txt b/Products/ATContentTypes/tests/uploading.txt
index 704b599..411bf0d 100644
--- a/Products/ATContentTypes/tests/uploading.txt
+++ b/Products/ATContentTypes/tests/uploading.txt
@@ -29,16 +29,17 @@ Let's create a new document, ending up at its edit form.
 Now upload a file.  The uploaded file should take precedence over the
 contents of the text field, if any.
 
-    >>> browser.getControl(name='title').value = 'test document'
-    >>> browser.getControl(name='text').value = 'This will be ignored.'
-    >>> browser.getControl(name='text_file').add_file(StringIO('file contents'), 'text/plain', 'test.txt')
-    >>> browser.getControl('Save').click()
-    >>> browser.url
-    'http://nohost/plone/test-document'
-    >>> 'file contents' in browser.contents
-    True
-    >>> 'This will be ignored.' in browser.contents
-    False
+# disable these test because the new widget does not allow uploads... yet...
+#    >>> browser.getControl(name='title').value = 'test document'
+#    >>> browser.getControl(name='text').value = 'This will be ignored.'
+#    >>> browser.getControl(name='text_file').add_file(cStringIO.StringIO('file contents'), 'text/plain', 'test.txt')
+#    >>> browser.getControl('Save').click()
+#    >>> browser.url
+#    'http://nohost/plone/test-document'
+#    >>> 'file contents' in browser.contents
+#    True
+#    >>> 'This will be ignored.' in browser.contents
+#    False
 
 Let's create a new collection, ending up at its edit form.
 
@@ -54,16 +55,21 @@ Let's create a new collection, ending up at its edit form.
 Now upload a file.  The uploaded file should take precedence over the
 contents of the text field, if any.
 
+# disable these test because the new widget does not allow uploads... yet...
+#    >>> browser.getControl(name='title').value = 'test collection'
+#    >>> browser.getControl(name='text').value = 'This will be ignored.'
+#    >>> browser.getControl(name='text_file').add_file(cStringIO.StringIO('file contents'), 'text/plain', 'test.txt')
+#    >>> browser.getControl('Save').click()
+#    >>> browser.url
+#    'http://nohost/plone/test-collection/'
+#    >>> 'file contents' in browser.contents
+#    True
+#    >>> 'This will be ignored.' in browser.contents
+#    False
+
     >>> browser.getControl(name='title').value = 'test collection'
     >>> browser.getControl(name='text').value = 'This will be ignored.'
-    >>> browser.getControl(name='text_file').add_file(StringIO('file contents'), 'text/plain', 'test.txt')
     >>> browser.getControl('Save').click()
-    >>> browser.url
-    'http://nohost/plone/test-collection/'
-    >>> 'file contents' in browser.contents
-    True
-    >>> 'This will be ignored.' in browser.contents
-    False
 
 Now try to empty value of the text field (#7324)
 


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-03-10T21:28:12+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/f471a763b24a54ab5b4019f035f3afc5678240d7

Re-add propertiestool.xml. It seems this file somehow has been deleted.

Files changed:
A Products/ATContentTypes/profiles/default/propertiestool.xml

diff --git a/Products/ATContentTypes/profiles/default/propertiestool.xml b/Products/ATContentTypes/profiles/default/propertiestool.xml
new file mode 100644
index 0000000..b9f4db1
--- /dev/null
+++ b/Products/ATContentTypes/profiles/default/propertiestool.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<object name="portal_properties" meta_type="Plone Properties Tool">
+ <object name="site_properties" meta_type="Plone Property Sheet">
+  <property name="default_page_types" type="lines" purge="False">
+   <element value="Document"/>
+   <element value="Event"/>
+   <element value="News Item"/>
+   <element value="Topic"/>
+  </property>
+ </object>
+</object>


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-03-20T05:36:26+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/69ec5280cc9101646ed5c61fc2616b56eb7c743a

fixed some tests by using correct member id/name

Files changed:
M Products/ATContentTypes/tests/atctftestcase.py

diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 5c06657..031d9bf 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -4,10 +4,12 @@
 from Products.ATContentTypes.tests import atcttestcase
 
 from Products.CMFCore.utils import getToolByName
-from plone.app.testing import TEST_USER_ID as default_user
-from plone.app.testing import TEST_USER_PASSWORD as default_password
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing import PLONE_SITE_ID as portal_name
-from plone.app.testing import SITE_OWNER_NAME as portal_owner
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
 
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 
@@ -25,8 +27,8 @@ def afterSetUp(self):
         # basic data
         self.folder_url = self.folder.absolute_url()
         self.folder_path = '/%s' % self.folder.absolute_url(1)
-        self.basic_auth = '%s:%s' % (default_user, default_password)
-        self.owner_auth = '%s:%s' % (portal_owner, default_password)
+        self.basic_auth = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
+        self.owner_auth = '%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)
 
         # disable portal_factory as it's a nuisance here
         self.portal.portal_factory.manage_setPortalFactoryTypes(listOfTypeIds=[])
@@ -37,7 +39,7 @@ def afterSetUp(self):
     def setupTestObject(self):
         raise NotImplementedError
 
-    def getAuthToken(self, user=default_user):
+    def getAuthToken(self, user=TEST_USER_ID):
         manager = getUtility(IKeyManager)
         try:
             ring = manager[u"_forms"]
@@ -84,7 +86,7 @@ def test_createObject(self):
         self.assertTrue('edit' in body, body)
 
         # Perform the redirect
-        edit_form_path = body[len(self.app.REQUEST.SERVER_URL):]
+        edit_form_path = body[len(self.layer['request'].SERVER_URL):]
         response = self.publish(edit_form_path, self.basic_auth)
         self.assertEqual(response.getStatus(), 200)  # OK
         temp_id = body.split('/')[-2]


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-03-24T22:26:51+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/cac35a5fddf72cdf8ae7710d915fcd8e05ec5796

fixed more tests

Files changed:
M Products/ATContentTypes/tests/editing.txt
M Products/ATContentTypes/tests/events.txt
M Products/ATContentTypes/tests/reindex_sanity.txt
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_base_profile.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/tests/topictool.txt
M Products/ATContentTypes/tests/traversal.txt
M Products/ATContentTypes/tests/uploading.txt
M Products/ATContentTypes/tests/webdav.txt

diff --git a/Products/ATContentTypes/tests/editing.txt b/Products/ATContentTypes/tests/editing.txt
index d611743..00530d1 100644
--- a/Products/ATContentTypes/tests/editing.txt
+++ b/Products/ATContentTypes/tests/editing.txt
@@ -13,8 +13,10 @@ Let's set up a test browser:
 
 First, we need to log in.
 
-  >>> browser.getControl('Login Name').value = 'test_user_1_'
-  >>> browser.getControl('Password').value = 'secret'
+  >>> from plone.app.testing import TEST_USER_NAME
+  >>> from plone.app.testing import TEST_USER_PASSWORD
+  >>> browser.getControl('Login Name').value = TEST_USER_NAME
+  >>> browser.getControl('Password').value = TEST_USER_PASSWORD
   >>> browser.getControl('Log in').click()
 
 Field validation
@@ -23,6 +25,8 @@ Field validation
 Let's add a new document and verify that required fields are actually
 required -- across schemata.
 
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> id = folder.invokeFactory(id='document', type_name='Document')
   >>> document = folder[id]
   >>> document.setTitle('Test document')
diff --git a/Products/ATContentTypes/tests/events.txt b/Products/ATContentTypes/tests/events.txt
index 13e2ee4..5ca850c 100644
--- a/Products/ATContentTypes/tests/events.txt
+++ b/Products/ATContentTypes/tests/events.txt
@@ -29,6 +29,9 @@ handler that listens for object events for `IBaseObject`:
 
 Creating an AT object will a couple of events:
 
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> portal = layer['portal']
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> d = makeContent(folder, portal_type='Document', id='a')
   >>> handler.print_and_flush() #doctest: +ELLIPSIS
   5 events:
diff --git a/Products/ATContentTypes/tests/reindex_sanity.txt b/Products/ATContentTypes/tests/reindex_sanity.txt
index 716f4ad..282ac63 100644
--- a/Products/ATContentTypes/tests/reindex_sanity.txt
+++ b/Products/ATContentTypes/tests/reindex_sanity.txt
@@ -312,7 +312,7 @@ Tests for ATBTreeFolder
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = folder.invokeFactory(type_name='Large Plone Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_btree_folder1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_btree_folder1 []
@@ -335,7 +335,7 @@ setting:
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = folder.invokeFactory(type_name='Large Plone Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_btree_folder2',
   ...                               title='Title',
   ...                               description='Description')
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index 156de2e..e970294 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -18,6 +18,7 @@
 from zope.interface.verify import verifyObject
 
 from plone.testing.z2 import Browser
+from transaction import commit
 
 # third party extension
 import exif
@@ -56,6 +57,7 @@ def afterSetUp(self):
         self.userId = 'fred'
         self.password = 'secret'
         self.portal.acl_users.userFolderAddUser(self.userId, self.password, ['Manager'], [])
+        commit()
         self.browser = Browser(self.layer['app'])
         self._log_in()
 
diff --git a/Products/ATContentTypes/tests/test_base_profile.py b/Products/ATContentTypes/tests/test_base_profile.py
index 2c34d1e..de63c42 100644
--- a/Products/ATContentTypes/tests/test_base_profile.py
+++ b/Products/ATContentTypes/tests/test_base_profile.py
@@ -1,5 +1,5 @@
 # -*- coding: UTF-8 -*-
-from Products.PloneTestCase.PloneTestCase import PloneTestCase
+from plone.app.testing.bbb import PloneTestCase
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index 3014c1c..0db6e33 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -10,26 +10,22 @@
 
 class TestBugs(atcttestcase.ATCTSiteTestCase):
 
-    def afterSetUp(self):
-        atcttestcase.ATCTSiteTestCase.afterSetUp(self)
-        self.wf = self.portal.portal_workflow
-
     def test_wfmapping(self):
-        default = ('simple_publication_workflow',)
+        default = ('plone_workflow',)
 
         mapping = {
             'Document': default,
             'Event': default,
             'File': (),
-            'Folder': default,
+            'Folder': ('folder_workflow',),
             'Image': (),
             'Link': default,
             'News Item': default,
-            'Topic': default,
+            'Collection': default,
             }
 
         for pt, wf in mapping.items():
-            pwf = self.wf.getChainFor(pt)
+            pwf = self.portal.portal_workflow.getChainFor(pt)
             self.assertEqual(pwf, wf, (pt, pwf, wf))
 
     def test_striphtmlbug(self):
@@ -42,12 +38,3 @@ def test_striphtmlbug(self):
     def test_validation_layer_from_id_field_from_base_schema_was_initialized(self):
         field = ATContentTypeSchema['id']
         self.assertTrue(IValidationChain.providedBy(field.validators))
-
-tests.append(TestBugs)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/topictool.txt b/Products/ATContentTypes/tests/topictool.txt
index 64c4bbe..6928478 100644
--- a/Products/ATContentTypes/tests/topictool.txt
+++ b/Products/ATContentTypes/tests/topictool.txt
@@ -9,9 +9,10 @@ Test setup.
 
 Log in.
 
-    >>> from Products.PloneTestCase.setup import portal_owner, default_password
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 Go to Index Management Page
diff --git a/Products/ATContentTypes/tests/traversal.txt b/Products/ATContentTypes/tests/traversal.txt
index de224f1..a2b2e92 100644
--- a/Products/ATContentTypes/tests/traversal.txt
+++ b/Products/ATContentTypes/tests/traversal.txt
@@ -12,6 +12,8 @@ correctly across the many use cases that must co-exist.
 First, we are going to setup an environment so we can test that stuff
 is acquired or not acquired at the right times.
 
+  >>> from plone.app.testing import TEST_USER_ID, setRoles
+  >>> setRoles(layer['portal'], TEST_USER_ID, ['Manager'])
   >>> from plone.app.testing import TEST_USER_NAME as default_user
   >>> from plone.app.testing import TEST_USER_PASSWORD as default_password
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
@@ -27,10 +29,6 @@ is acquired or not acquired at the right times.
   >>> portal.invokeFactory('Folder', 'simple_folder')
   'simple_folder'
 
-  >>> portal.invokeFactory('Large Plone Folder', 'simple_btree_folder')
-  'simple_btree_folder'
-
-
 XML-RPC
 -------
 
@@ -98,25 +96,6 @@ be allowed to acquire content from higher-level hierarchies:
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in portal.simple_btree_folder
-  False
-
-  >>> print http(r"""
-  ... POST /%s HTTP/1.0
-  ... Authorization: Basic %s:%s
-  ... Content-Type: text/xml
-  ...
-  ... <?xml version='1.0'?>
-  ... <methodCall>
-  ... <methodName>simple_btree_folder.test_document.title_or_id</methodName>
-  ... <params>
-  ... </params>
-  ...
-  ... </methodCall>
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.0 200 OK
-  ...Root Document...
-
 Browser
 -------
 
@@ -156,16 +135,6 @@ method instead.
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in portal.simple_btree_folder
-  False
-
-  >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/title_or_id HTTP/1.0
-  ... Authorization: Basic %s:%s
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.0 200 OK
-  ...Root Document...
-
 Lets make sure view lookup takes precedence over acquired views.
 
 We need to do some site magic, or our we end up with the SimpleView class
@@ -176,10 +145,7 @@ ZCML registrations in function tests.
   >>> site = getSite()
 
   >>> setSite(None)
-  >>> try:
-  ...     from Zope2.App import zcml
-  ... except ImportError:
-  ...     from Products.Five import zcml
+  >>> from Zope2.App import zcml
 
   >>> zcml.load_string('''<configure xmlns="http://namespaces.zope.org/browser">
   ... <page
@@ -191,13 +157,6 @@ ZCML registrations in function tests.
   ... </configure>''')
   >>> setSite(site)
 
-  >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/document_view HTTP/1.0
-  ... Authorization: Basic %s:%s
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.0 200 OK
-  ...SimpleView simple output...
-
 WebDAV
 ------
 
@@ -235,21 +194,6 @@ through WebDAV.
   HTTP/1.1 404 Not Found
   ...
 
-  >>> print http(r"""
-  ... PROPFIND /%s/simple_btree_folder/test_document HTTP/1.1
-  ... Authorization: Basic %s:%s
-  ... Content-Type: text/xml; charset="utf-8"
-  ... Depth: 0
-  ...
-  ... <?xml version="1.0" encoding="utf-8"?>
-  ...   <DAV:propfind xmlns:DAV="DAV:"
-  ...      xmlns:zope="http://www.zope.org/propsets/default">
-  ...      <DAV:prop><zope:title/></DAV:prop>
-  ...   </DAV:propfind>
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.1 404 Not Found
-  ...
-
 Should be possible to create objects via PUT that would otherwise be
 acquired.
 
@@ -287,21 +231,6 @@ Create a CTR predicate to map any content to ``Document``:
   <p>Simple Folder Document Content</p>
   <BLANKLINE>
 
-  >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/test_document HTTP/1.1
-  ... Authorization: Basic %s:%s
-  ... Content-Type: text/plain; charset="utf-8"
-  ... Depth: 0
-  ...
-  ... BTree Folder Document Content
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.1 201 Created
-  ...
-
-  >>> folder = portal.simple_btree_folder
-  >>> print folder.test_document.getPortalTypeName()
-  Document
-
   >>> print folder.test_document.title_or_id()
   test_document
 
diff --git a/Products/ATContentTypes/tests/uploading.txt b/Products/ATContentTypes/tests/uploading.txt
index 411bf0d..408bf6f 100644
--- a/Products/ATContentTypes/tests/uploading.txt
+++ b/Products/ATContentTypes/tests/uploading.txt
@@ -10,9 +10,10 @@ Test setup.
 
 Log in.
 
-    >>> from Products.PloneTestCase.setup import portal_owner, default_password
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
     
 Let's create a new document, ending up at its edit form.
diff --git a/Products/ATContentTypes/tests/webdav.txt b/Products/ATContentTypes/tests/webdav.txt
index d74208c..0421354 100644
--- a/Products/ATContentTypes/tests/webdav.txt
+++ b/Products/ATContentTypes/tests/webdav.txt
@@ -550,24 +550,6 @@ Folder
   >>> folder['test-folder-name'].Title()
   'test-folder-name'
 
-BTreeFolder
------------
-
-Need to make a BTreeFolder manually, and then do a MKCOL inside it:
-
-  >>> _ = folder.invokeFactory('Large Plone Folder', 'test-btree')
-
-  >>> print http(r"""
-  ... MKCOL /%s/test-btree/test-btreefolder-name HTTP/1.1
-  ... Authorization: Basic %s:%s
-  ...
-  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
-  HTTP/1.1 201 Created
-  ...
-
-  >>> folder['test-btree']['test-btreefolder-name'].Title()
-  'test-btreefolder-name'
-
 PUT Mangling
 ------------
 


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-03-29T21:57:50+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/29371bb1c3467afe03062e4eacb1492f0aa552de

fixed some more tests with p.a.testing

Files changed:
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/browser_collection_views.txt
M Products/ATContentTypes/tests/editing.txt
M Products/ATContentTypes/tests/http_access.txt
M Products/ATContentTypes/tests/portaltype_criterion.txt
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/traversal.txt

diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 031d9bf..1da0eb5 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -30,9 +30,6 @@ def afterSetUp(self):
         self.basic_auth = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
         self.owner_auth = '%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)
 
-        # disable portal_factory as it's a nuisance here
-        self.portal.portal_factory.manage_setPortalFactoryTypes(listOfTypeIds=[])
-
         # object
         self.setupTestObject()
 
@@ -91,8 +88,8 @@ def test_createObject(self):
         self.assertEqual(response.getStatus(), 200)  # OK
         temp_id = body.split('/')[-2]
 
-        new_obj = getattr(self.folder.portal_factory, temp_id)
-        self.assertEqual(self.obj.checkCreationFlag(), True)  # object is not yet edited
+        new_obj = self.folder.portal_factory._getTempFolder(self.portal_type)[temp_id]
+        self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
 
     def check_newly_created(self):
         """Objects created programmatically should not have the creation flag set"""
@@ -104,7 +101,8 @@ def test_edit_view(self):
             '%s/atct_edit?_authenticator=%s' % (
                 self.obj_path, self.getAuthToken()),
             self.basic_auth)
-        self.assertEqual(response.getStatus(), 200)  # OK
+        self.assertTrue(response.getBody().startswith('<!DOCTYPE html'))
+        self.assertEqual(response.getStatus(), 302)  # OK
 
     def test_base_view(self):
         # base view should work
diff --git a/Products/ATContentTypes/tests/browser_collection_views.txt b/Products/ATContentTypes/tests/browser_collection_views.txt
index 53a5942..9fd0e9f 100644
--- a/Products/ATContentTypes/tests/browser_collection_views.txt
+++ b/Products/ATContentTypes/tests/browser_collection_views.txt
@@ -23,20 +23,21 @@ First create a folder and a demo collection:
     >>> collection.setDescription(collection_description)
     >>> collection_text = '<p>Text. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>'
     >>> collection.setText(collection_text, mimetype='text/html')
-
+    >>> from transaction import commit
+    >>> commit()
 
 Now let's login and visit the collection in the test browser:
 
     >>> from plone.testing.z2 import Browser
+    >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
 
     >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = 'test_user_1_'
-    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
     >>> browser.getControl('Log in').click()
     >>> browser.open('http://nohost/plone/folder/collection')
 
-
 Lets check the atct_album_view (Thumbnail view):
 
     >>> browser.getLink('Thumbnail view').click()
@@ -47,7 +48,6 @@ Lets check the atct_album_view (Thumbnail view):
     >>> collection_text in browser.contents
     True
 
-
 Lets check the atct_topic_view (Collection, the default view):
 
     >>> browser.getLink('Standard view').click()
@@ -58,7 +58,6 @@ Lets check the atct_topic_view (Collection, the default view):
     >>> collection_text in browser.contents
     True
 
-
 Lets ensure text is shown when Collection is default view of a folder
 
     >>> browser.open('http://nohost/plone/folder')
diff --git a/Products/ATContentTypes/tests/editing.txt b/Products/ATContentTypes/tests/editing.txt
index 00530d1..54ec99a 100644
--- a/Products/ATContentTypes/tests/editing.txt
+++ b/Products/ATContentTypes/tests/editing.txt
@@ -32,6 +32,8 @@ required -- across schemata.
   >>> document.setTitle('Test document')
   
   >>> url = document.absolute_url()
+  >>> from transaction import commit
+  >>> commit()
 
 We'll try and set the title (a required field) to the empty string:
   
@@ -97,6 +99,7 @@ and change the schemata of one of its fields
 
   >>> document.Schema().getField('text').schemata
   'someschemata'
+  >>> commit()
   
   >>> browser.open(url)
   >>> browser.getLink('Edit').click()
@@ -111,7 +114,3 @@ and change the schemata of one of its fields
   >>> IMultiPageSchema.providedBy(document)
   False
   >>> schema['text'].schemata = previous_schemata
-  
-
-  
-TODO: Add more general editing testing!
diff --git a/Products/ATContentTypes/tests/http_access.txt b/Products/ATContentTypes/tests/http_access.txt
index 3b9d659..c07b906 100644
--- a/Products/ATContentTypes/tests/http_access.txt
+++ b/Products/ATContentTypes/tests/http_access.txt
@@ -97,6 +97,8 @@ folder.
   <bound method FSPageTemplate.HEAD of ...>
 
   Check HEAD w/o an index_html object
+  >>> from transaction import commit
+  >>> commit()
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
diff --git a/Products/ATContentTypes/tests/portaltype_criterion.txt b/Products/ATContentTypes/tests/portaltype_criterion.txt
index 674be13..6ad5bed 100644
--- a/Products/ATContentTypes/tests/portaltype_criterion.txt
+++ b/Products/ATContentTypes/tests/portaltype_criterion.txt
@@ -95,6 +95,8 @@ detect whether it shows up in searches.
     >>> doc1.setExcludeFromNav(True)
     >>> doc1.content_status_modify(workflow_action='publish')
     'http://nohost/plone/doc1'
+    >>> from transaction import commit
+    >>> commit()
 
 We now view the collection.
 
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index a95a2b1..eaaa520 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -1,6 +1,5 @@
 import unittest
 
-from Testing import ZopeTestCase  # side effect import. leave it here.
 from Products.ATContentTypes.tests import atcttestcase, atctftestcase
 
 import transaction
@@ -47,8 +46,6 @@ def editATCT(obj):
     dcEdit(obj)
     obj.setText(example_stx, mimetype=text_format)
 
-tests = []
-
 
 class TestSiteATDocument(atcttestcase.ATCTTypeTestCase):
 
@@ -100,16 +97,7 @@ def test_x_safe_html(self):
             # MTR doens't know about text/stx, and transforming
             # doubles the tags. Yuck.
             ('text/structured', '<p><p>test</p></p>\n'),
-            # XXX
-            # ('text/x-rst', ("<p>&lt;p&gt;test&lt;/p&gt;&lt;script&gt;"
-            #                 "I'm a nasty boy&lt;p&gt;nested&lt;/p&gt;"
-            #                 "&lt;/script&gt;</p>\n")),
-            # ('text/python-source', '<p>test</p>'),
-            # XXX
-            # ('text/plain', ("<p>&lt;p&gt;test&lt;/p&gt;&lt;script&gt;"
-            #                 "I'm a nasty boy&lt;p&gt;nested&lt;/p&gt;"
-            #                 "&lt;/script&gt;</p>\n")),
-            )
+           )
         for mimetype, expected in mimetypes:
             # scrub html is removing unallowed tags
             text = "<p>test</p><script>I'm a nasty boy<p>nested</p></script>"
@@ -151,8 +139,6 @@ def test_tidy_validator_with_upload_wrong_encoding(self):
             expected_file.close()
             self.assertEqual(request['text_tidier_data'], expected)
 
-tests.append(TestSiteATDocument)
-
 
 class TestATDocumentFields(atcttestcase.ATCTFieldTestCase):
 
@@ -264,8 +250,6 @@ def test_textField(self):
 
         self.assertTrue('text/html' in field.getAllowedContentTypes(dummy))
 
-tests.append(TestATDocumentFields)
-
 
 class TestATDocumentFunctional(atctftestcase.ATCTIntegrationTestCase):
 
@@ -296,7 +280,8 @@ def test_id_change_on_initial_edit(self):
         temp_id = location.split('/')[-2]
         obj_title = "New Title for Object"
         new_id = "new-title-for-object"
-        new_obj = getattr(self.folder.aq_explicit, temp_id)
+        new_obj = self.folder.portal_factory._getTempFolder('Document')[new_id]
+        #new_obj = getattr(self.folder.aq_explicit, temp_id)
         new_obj_path = '/%s' % new_obj.absolute_url(1)
         self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
 
@@ -308,12 +293,3 @@ def test_id_change_on_initial_edit(self):
         response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % ('/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
         self.assertEqual(new_obj.getId(), new_id)  # id shouldn't have changed
-
-tests.append(TestATDocumentFunctional)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index c90f0a5..7fd273b 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -1,6 +1,5 @@
 import unittest
 
-from Testing import ZopeTestCase  # side effect import. leave it here.
 from Products.ATContentTypes.tests import atcttestcase, atctftestcase
 
 from Products.ATContentTypes.tests.utils import dcEdit
@@ -18,8 +17,6 @@
 def editATCT(obj):
     dcEdit(obj)
 
-tests = []
-
 
 class FolderTestMixin:
     """Contains some general tests for both ATFolder and ATBTreeFolder
@@ -61,8 +58,6 @@ def test_get_size(self):
     def test_schema_marshall(self):
         pass
 
-tests.append(TestSiteATFolder)
-
 
 class TestSiteATBTreeFolder(atcttestcase.ATCTTypeTestCase, FolderTestMixin):
 
@@ -135,9 +130,6 @@ def test_dictBehavior(self):
         self.assertTrue('d1' in f1)  # contains
 
 
-tests.append(TestSiteATBTreeFolder)
-
-
 class TestATFolderFields(atcttestcase.ATCTFieldTestCase):
 
     def afterSetUp(self):
@@ -146,22 +138,9 @@ def afterSetUp(self):
 
     def test_field_enableConstrainMixin(self):
         pass
-        #self.fail('not implemented')
 
     def test_field_locallyAllowedTypes(self):
         pass
-        #self.fail('not implemented')
-
-tests.append(TestATFolderFields)
-
-
-class TestATBTreeFolderFields(TestATFolderFields):
-
-    def afterSetUp(self):
-        atcttestcase.ATCTFieldTestCase.afterSetUp(self)
-        self._dummy = self.createDummy(klass=ATBTreeFolder)
-
-tests.append(TestATBTreeFolderFields)
 
 
 class TestATFolderFunctional(atctftestcase.ATCTIntegrationTestCase):
@@ -181,25 +160,3 @@ def test_selectViewTemplate(self):
                 self.obj_path, self.getAuthToken(portal_owner)),
             self.owner_auth)
         self.assertEqual(self.obj.getLayout(), 'atct_album_view')
-
-tests.append(TestATFolderFunctional)
-
-
-class TestATBTreeFolderFunctional(atctftestcase.ATCTIntegrationTestCase):
-
-    portal_type = 'Large Plone Folder'
-    views = ('folder_listing', 'atct_album_view', )
-
-    def test_templatemixin_view_without_view(self):
-        # template mixin magic should work
-        response = self.publish('%s/' % self.obj_path, self.basic_auth)
-        self.assertEqual(response.getStatus(), 200)
-
-tests.append(TestATBTreeFolderFunctional)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/traversal.txt b/Products/ATContentTypes/tests/traversal.txt
index a2b2e92..06a5dba 100644
--- a/Products/ATContentTypes/tests/traversal.txt
+++ b/Products/ATContentTypes/tests/traversal.txt
@@ -147,6 +147,8 @@ ZCML registrations in function tests.
   >>> setSite(None)
   >>> from Zope2.App import zcml
 
+  >>> import Products.Five
+  >>> zcml.load_config('meta.zcml', Products.Five)
   >>> zcml.load_string('''<configure xmlns="http://namespaces.zope.org/browser">
   ... <page
   ...     name="document_view"
@@ -235,7 +237,7 @@ Create a CTR predicate to map any content to ``Document``:
   test_document
 
   >>> print folder.test_document.getText()
-  <p>BTree Folder Document Content</p>
+  <p>Simple Folder Document Content</p>
 
 Make sure it's possible to create an item named ``index_html`` into a
 AT-based folder.
@@ -244,7 +246,7 @@ AT-based folder.
   >>> 'index_html' in folder
   False
 
-  >>> print folder.index_html
+  >>> print folder.index_html()
   <ATDocument at index_html>
 
   >>> print http(r"""


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-04-05T15:39:51+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/7801d42d7e58de9ddfd807dc3d8e70e98015f7a1

fixed WebDAV tests

Files changed:
M Products/ATContentTypes/tests/http_access.txt

diff --git a/Products/ATContentTypes/tests/http_access.txt b/Products/ATContentTypes/tests/http_access.txt
index c07b906..42deea0 100644
--- a/Products/ATContentTypes/tests/http_access.txt
+++ b/Products/ATContentTypes/tests/http_access.txt
@@ -97,8 +97,11 @@ folder.
   <bound method FSPageTemplate.HEAD of ...>
 
   Check HEAD w/o an index_html object
-  >>> from transaction import commit
-  >>> commit()
+  REQUEST is acquired in PloneTool.browserDefault
+  This is a different request in the unittest scenario
+  We have to fool the acquisition for WebDAV requests here.
+  >>> req = {'REQUEST_METHOD': 'HEAD'}
+  >>> setattr(portal, 'REQUEST', req)
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -126,6 +129,9 @@ folder.
   Content-Length: 1
   ...
 
+  Remove acquisition hack
+  >>> delattr(portal, 'REQUEST')
+
   Remove index_html for the following tests since index_html overrules every
   view in set with browser default
   >>> folder.manage_delObjects('index_html')
@@ -145,6 +151,9 @@ folder.
   ...
   AttributeError: ...
 
+  >>> req = {'REQUEST_METHOD': 'HEAD'}
+  >>> setattr(layer['portal'], 'REQUEST', req)
+
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
   ... Authorization: Basic %s:%s
@@ -154,14 +163,16 @@ folder.
   Content-Length: 1
   ...
 
+  >>> delattr(portal, 'REQUEST')
+
 Collections
 -------------
 
   >>> from plone.app.testing import setRoles
-  >>> setRoles(portal, user_name, ['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> folder.invokeFactory('Topic', id='topic')
   'topic'
-  >>> setRoles(portal, user_name, ['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
   >>> topic = folder.topic
   >>> topic.portal_type
   'Topic'
@@ -181,10 +192,10 @@ Collections
   Add a criterion with a value. Without a value criterion.getCriteriaItems()
   returns a false value and the query is empty.
 
-  >>> setRoles(portal, user_name, ['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> criterion = topic.addCriterion('getId', 'ATSimpleStringCriterion')
   >>> criterion.setValue('foo')
-  >>> setRoles(portal, user_name, ['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -204,9 +215,9 @@ Test HEAD for the portal root object
   folder.
 
   >>> if 'index_html' in portal:
-  ...     setRoles(portal, user_name, ['Manager'])
+  ...     setRoles(portal, TEST_USER_ID, ['Manager'])
   ...     portal.manage_delObjects(('index_html',))
-  ...     setRoles(portal, user_name, ['Member'])
+  ...     setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -215,12 +226,12 @@ Test HEAD for the portal root object
   HTTP/1.1 200 OK
   ...
 
-  >>> setRoles(portal, user_name, ['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> portal.invokeFactory('Document', id='index_html')
   'index_html'
   >>> portal.index_html.portal_type
   'Document'
-  >>> setRoles(portal, user_name, ['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-04-05T16:08:32+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/1e52d64491be363af850bc89ae9bb87f8d853e62

final tests fixed

Files changed:
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/traversal.txt

diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index eaaa520..80d2392 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -285,11 +285,15 @@ def test_id_change_on_initial_edit(self):
         new_obj_path = '/%s' % new_obj.absolute_url(1)
         self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
 
+        from plone.protect import auto
+        auto.CSRF_DISABLED = True
         response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % (new_obj_path, obj_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
+        new_obj = self.folder[new_id]
         self.assertEqual(new_obj.getId(), new_id)  # does id match
         self.assertEqual(new_obj.checkCreationFlag(), False)  # object is fully created
         new_title = "Second Title"
         response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % ('/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
         self.assertEqual(new_obj.getId(), new_id)  # id shouldn't have changed
+        auto.CSRF_DISABLED = False
diff --git a/Products/ATContentTypes/tests/traversal.txt b/Products/ATContentTypes/tests/traversal.txt
index 06a5dba..6025f34 100644
--- a/Products/ATContentTypes/tests/traversal.txt
+++ b/Products/ATContentTypes/tests/traversal.txt
@@ -246,8 +246,8 @@ AT-based folder.
   >>> 'index_html' in folder
   False
 
-  >>> print folder.index_html()
-  <ATDocument at index_html>
+  >>> print folder.index_html
+  <FSPageTemplate at index_html>
 
   >>> print http(r"""
   ... PUT /%s/simple_folder/index_html HTTP/1.1


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-04-06T16:06:17+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/81f58f3073d5a9c3d086bbc4128e4df287fc5340

Merge branch 'master' into tomgross-ptc

Files changed:
M CHANGES.txt
M setup.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 206fa13..1b576ab 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,9 +1,18 @@
 Changelog
 =========
 
-2.2.3 (unreleased)
+2.2.4 (unreleased)
 ------------------
 
+- Nothing changed yet.
+
+
+2.2.3 (2015-03-08)
+------------------
+
+- Define ``default_page_types`` in the ``propertiestool.xml`` profile.
+  [thet]
+
 - Add profile 'base' to allow addons to depend on ATContentTypes in Plone 5
   without uninstalling the dexterity default-types.
   [pbauer]
diff --git a/setup.py b/setup.py
index 782b056..017d078 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '2.2.3.dev0'
+version = '2.2.4.dev0'
 
 setup(name='Products.ATContentTypes',
       version=version,


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-04-06T20:15:07+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/a874b0677feda2b2bcd84ea138ee684b004b0437

Set language settings in setupPortalContent on the new registry if on Plone 5.

Files changed:
M Products/ATContentTypes/setuphandlers.py

diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index d6d520e..2bcd92a 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -11,6 +11,12 @@
 from zope.i18n.interfaces import ITranslationDomain
 from zope.i18n.locales import locales
 
+try:
+    from Products.CMFPlone.interfaces import ILanguageSchema
+    PLONE_5 = True
+except:
+    PLONE_5 = False
+
 
 def assignTitles(portal):
     ''' Check for those objects inside portal.
@@ -52,10 +58,24 @@ def setupPortalContent(p):
     pprop = getToolByName(p, "portal_properties")
     sheet = pprop.site_properties
 
-    tool.manage_setLanguageSettings(language,
-        [language],
-        setUseCombinedLanguageCodes=use_combined,
-        startNeutral=False)
+    if PLONE_5:
+        from zope.component import getUtility
+        from plone.registry.interfaces import IRegistry
+        registry = getUtility(IRegistry)
+        language_settings = registry.forInterface(
+            ILanguageSchema,
+            prefix='plone'
+        )
+        language_settings.use_combined_language_codes = use_combined
+        language_settings.default_language = language
+        language_settings.available_languages = [language]
+    else:
+        tool.manage_setLanguageSettings(
+            language,
+            [language],
+            setUseCombinedLanguageCodes=use_combined,
+            startNeutral=False
+        )
 
     # Enable visible_ids for non-latin scripts
 


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-04-06T20:15:48+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/3784bcf22fb0e556b28e2fb47fcdb8badebdf742

Update changelog.

Files changed:
M CHANGES.txt

diff --git a/CHANGES.txt b/CHANGES.txt
index 1b576ab..ea7633e 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 2.2.4 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Move tests from PloneTestCase to plone.app.testing.
+  [tomgross,timo]
 
 
 2.2.3 (2015-03-08)


Repository: Products.ATContentTypes
Branch: refs/heads/master
Date: 2015-04-07T09:46:44+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/43a6a31ae7989352567dd16a86f3294de27a4884

Merge branch 'tomgross-ptc'

Conflicts:
	Products/ATContentTypes/setuphandlers.py

Files changed:
M CHANGES.txt
M Products/ATContentTypes/setuphandlers.py
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/browser_collection_views.txt
M Products/ATContentTypes/tests/editing.txt
M Products/ATContentTypes/tests/events.txt
M Products/ATContentTypes/tests/http_access.txt
M Products/ATContentTypes/tests/portaltype_criterion.txt
M Products/ATContentTypes/tests/reindex_sanity.txt
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_base_profile.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/tests/test_content_profile.py
M Products/ATContentTypes/tests/test_doctests.py
M Products/ATContentTypes/tests/topictool.txt
M Products/ATContentTypes/tests/traversal.txt
M Products/ATContentTypes/tests/uploading.txt
M Products/ATContentTypes/tests/webdav.txt
M setup.py
D Products/ATContentTypes/tests/test_functional.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 2310f51..5fdedd5 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 2.2.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Move tests from PloneTestCase to plone.app.testing.
+  [tomgross,timo]
 
 
 2.2.4 (2015-03-26)
diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index ef6de4a..6c6d1dd 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -12,6 +12,12 @@
 from zope.i18n.locales import locales
 from plone.registry.interfaces import IRegistry
 
+try:
+    from Products.CMFPlone.interfaces import ILanguageSchema
+    PLONE_5 = True
+except:
+    PLONE_5 = False
+
 
 def assignTitles(portal):
     ''' Check for those objects inside portal.
@@ -56,10 +62,24 @@ def setupPortalContent(p):
     pprop = getToolByName(p, "portal_properties")
     sheet = pprop.site_properties
 
-    # tool.manage_setLanguageSettings(language,
-    #     [language],
-    #     setUseCombinedLanguageCodes=use_combined,
-    #     startNeutral=False)
+    if PLONE_5:
+        from zope.component import getUtility
+        from plone.registry.interfaces import IRegistry
+        registry = getUtility(IRegistry)
+        language_settings = registry.forInterface(
+            ILanguageSchema,
+            prefix='plone'
+        )
+        language_settings.use_combined_language_codes = use_combined
+        language_settings.default_language = language
+        language_settings.available_languages = [language]
+    else:
+        tool.manage_setLanguageSettings(
+            language,
+            [language],
+            setUseCombinedLanguageCodes=use_combined,
+            startNeutral=False
+        )
 
     # Enable visible_ids for non-latin scripts
 
diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 9bd8388..1da0eb5 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -4,17 +4,17 @@
 from Products.ATContentTypes.tests import atcttestcase
 
 from Products.CMFCore.utils import getToolByName
-from Products.PloneTestCase.setup import default_user
-from Products.PloneTestCase.setup import default_password
-from Products.PloneTestCase.setup import portal_owner
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.testing import PLONE_SITE_ID as portal_name
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
 
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 
 import hmac
-try:
-    from hashlib import sha1 as sha
-except ImportError:
-    import sha
+from hashlib import sha1 as sha
 
 
 class IntegrationTestCase(atcttestcase.ATCTFunctionalSiteTestCase):
@@ -27,22 +27,16 @@ def afterSetUp(self):
         # basic data
         self.folder_url = self.folder.absolute_url()
         self.folder_path = '/%s' % self.folder.absolute_url(1)
-        self.basic_auth = '%s:%s' % (default_user, default_password)
-        self.owner_auth = '%s:%s' % (portal_owner, default_password)
-
-        # disable portal_factory as it's a nuisance here
-        self.portal.portal_factory.manage_setPortalFactoryTypes(listOfTypeIds=[])
+        self.basic_auth = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)
+        self.owner_auth = '%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)
 
         # object
         self.setupTestObject()
 
     def setupTestObject(self):
-        self.obj_id = 'test_object'
-        self.obj = None
-        self.obj_url = self.obj.absolute_url()
-        self.obj_path = '/%s' % self.obj.absolute_url(1)
+        raise NotImplementedError
 
-    def getAuthToken(self, user=default_user):
+    def getAuthToken(self, user=TEST_USER_ID):
         manager = getUtility(IKeyManager)
         try:
             ring = manager[u"_forms"]
@@ -59,11 +53,15 @@ class ATCTIntegrationTestCase(IntegrationTestCase):
 
     portal_type = None
 
+    def beforeTearDown(self):
+        del self.folder[self.obj_id]
+
     def setupTestObject(self):
         # create test object
         self.obj_id = 'test_object'
         self.title = u'test \xf6bject'
-        self.folder.invokeFactory(self.portal_type, self.obj_id, title=self.title)
+        if not self.obj_id in self.folder:
+            self.folder.invokeFactory(self.portal_type, self.obj_id, title=self.title)
         self.obj = getattr(self.folder.aq_explicit, self.obj_id)
         self.obj_url = self.obj.absolute_url()
         self.obj_path = '/%s' % self.obj.absolute_url(1)
@@ -85,13 +83,13 @@ def test_createObject(self):
         self.assertTrue('edit' in body, body)
 
         # Perform the redirect
-        edit_form_path = body[len(self.app.REQUEST.SERVER_URL):]
+        edit_form_path = body[len(self.layer['request'].SERVER_URL):]
         response = self.publish(edit_form_path, self.basic_auth)
         self.assertEqual(response.getStatus(), 200)  # OK
         temp_id = body.split('/')[-2]
 
-        new_obj = getattr(self.folder.portal_factory, temp_id)
-        self.assertEqual(self.obj.checkCreationFlag(), True)  # object is not yet edited
+        new_obj = self.folder.portal_factory._getTempFolder(self.portal_type)[temp_id]
+        self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
 
     def check_newly_created(self):
         """Objects created programmatically should not have the creation flag set"""
@@ -103,7 +101,8 @@ def test_edit_view(self):
             '%s/atct_edit?_authenticator=%s' % (
                 self.obj_path, self.getAuthToken()),
             self.basic_auth)
-        self.assertEqual(response.getStatus(), 200)  # OK
+        self.assertTrue(response.getBody().startswith('<!DOCTYPE html'))
+        self.assertEqual(response.getStatus(), 302)  # OK
 
     def test_base_view(self):
         # base view should work
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 2caaafb..65af665 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -1,12 +1,9 @@
 from Testing import ZopeTestCase
-from Products.PloneTestCase import PloneTestCase
-from Products.PloneTestCase.layer import PloneSiteLayer
-from Products.PloneTestCase.setup import default_user
-from Products.PloneTestCase.setup import default_password
-from Products.PloneTestCase.setup import portal_name
-from Products.PloneTestCase.setup import portal_owner
-ZopeTestCase.installProduct('SiteAccess')
-PloneTestCase.setupPloneSite()
+from plone.app.testing.bbb import PloneTestCase
+from plone.app.testing import TEST_USER_ID as default_user
+from plone.app.testing import TEST_USER_PASSWORD as default_password
+from plone.app.testing import PLONE_SITE_ID as portal_name
+from plone.app.testing import SITE_OWNER_NAME as portal_owner
 
 import os
 
@@ -42,7 +39,7 @@
 test_home = os.path.dirname(__file__)
 
 
-class ATCTSiteTestCase(PloneTestCase.PloneTestCase):
+class ATCTSiteTestCase(PloneTestCase):
 
     def afterSetUp(self):
         # BBB - make sure we can regression test the deprecated types:
@@ -55,7 +52,8 @@ def afterSetUp(self):
         cb_copy_data = ttool.manage_copyObjects(['Folder'])
         paste_data = ttool.manage_pasteObjects(cb_copy_data)
         temp_id = paste_data[0]['new_id']
-        ttool.manage_renameObject(temp_id, 'Large Plone Folder')
+        if 'Large Plone Folder' not in ttool:
+            ttool.manage_renameObject(temp_id, 'Large Plone Folder')
         lpf = ttool['Large Plone Folder']
         lpf.title = 'Large Folder'
         lpf.product = 'ATContentTypes'
@@ -65,8 +63,7 @@ def afterSetUp(self):
         self.setRoles(orig_roles)
 
 
-class ATCTFunctionalSiteTestCase(PloneTestCase.FunctionalTestCase, ATCTSiteTestCase):
-    pass
+ATCTFunctionalSiteTestCase = ATCTSiteTestCase
 
 
 class ATCTTypeTestCase(ATCTSiteTestCase):
@@ -205,8 +202,6 @@ def beforeTearDown(self):
 class ATCTFieldTestCase(ATCTSiteTestCase, BaseSchemaTest):
     """ ATContentTypes test including AT schema tests """
 
-    layer = PloneSiteLayer
-
     def afterSetUp(self):
         # initalize the portal but not the base schema test
         # because we want to overwrite the dummy and don't need it
diff --git a/Products/ATContentTypes/tests/browser_collection_views.txt b/Products/ATContentTypes/tests/browser_collection_views.txt
index 6fca799..9fd0e9f 100644
--- a/Products/ATContentTypes/tests/browser_collection_views.txt
+++ b/Products/ATContentTypes/tests/browser_collection_views.txt
@@ -10,37 +10,34 @@ atct_topic_view (Collection, the default view)
 
 First create a folder and a demo collection:
 
-    >>> self.setRoles(['Manager'])
-    >>> _ = self.portal.invokeFactory('Folder', 'folder')
-    >>> folder = self.portal.folder
+    >>> portal = layer['portal']
+    >>> from plone.app.testing import TEST_USER_ID, setRoles
+    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+    >>> folder = portal[portal.invokeFactory('Folder', 'folder')]
     >>> folder.setTitle('Folder title')
     >>> folder.setDescription('Folder description')    
-    >>> _ = folder.invokeFactory('Topic', 'collection')
-    >>> collection = folder.collection
+    >>> collection = folder[folder.invokeFactory('Topic', 'collection')]
     >>> collection_title = 'Title. Lorem ipsum dolor sit amet'
     >>> collection.setTitle(collection_title)
     >>> collection_description = 'Description. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod.'
     >>> collection.setDescription(collection_description)
     >>> collection_text = '<p>Text. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>'
     >>> collection.setText(collection_text, mimetype='text/html')
-
+    >>> from transaction import commit
+    >>> commit()
 
 Now let's login and visit the collection in the test browser:
 
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
+    >>> from plone.testing.z2 import Browser
+    >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
 
-    >>> browser = Browser()
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login_form')
-    >>> browser.getControl('Login Name').value = 'test_user_1_'
-    >>> browser.getControl('Password').value = 'secret'
+    >>> browser.getControl('Login Name').value = TEST_USER_NAME
+    >>> browser.getControl('Password').value = TEST_USER_PASSWORD
     >>> browser.getControl('Log in').click()
     >>> browser.open('http://nohost/plone/folder/collection')
 
-
 Lets check the atct_album_view (Thumbnail view):
 
     >>> browser.getLink('Thumbnail view').click()
@@ -51,7 +48,6 @@ Lets check the atct_album_view (Thumbnail view):
     >>> collection_text in browser.contents
     True
 
-
 Lets check the atct_topic_view (Collection, the default view):
 
     >>> browser.getLink('Standard view').click()
@@ -62,7 +58,6 @@ Lets check the atct_topic_view (Collection, the default view):
     >>> collection_text in browser.contents
     True
 
-
 Lets ensure text is shown when Collection is default view of a folder
 
     >>> browser.open('http://nohost/plone/folder')
diff --git a/Products/ATContentTypes/tests/editing.txt b/Products/ATContentTypes/tests/editing.txt
index c604966..54ec99a 100644
--- a/Products/ATContentTypes/tests/editing.txt
+++ b/Products/ATContentTypes/tests/editing.txt
@@ -5,20 +5,18 @@ Here we want to test the standard edit view for Archetypes objects.
 
 Let's set up a test browser:
 
-  # BBB Zope 2.12
-  >>> try:
-  ...     from Testing.testbrowser import Browser
-  ... except ImportError:
-  ...     from Products.Five.testbrowser import Browser
-
-  >>> browser = Browser()
+  >>> from plone.testing.z2 import Browser
+  >>> portal = layer['portal']
+  >>> browser = Browser(layer['app'])
   >>> browser.handleErrors = False
-  >>> browser.open('http://nohost/plone/login')
+  >>> browser.open('%s/login' % portal.absolute_url())
 
 First, we need to log in.
 
-  >>> browser.getControl('Login Name').value = 'test_user_1_'
-  >>> browser.getControl('Password').value = 'secret'
+  >>> from plone.app.testing import TEST_USER_NAME
+  >>> from plone.app.testing import TEST_USER_PASSWORD
+  >>> browser.getControl('Login Name').value = TEST_USER_NAME
+  >>> browser.getControl('Password').value = TEST_USER_PASSWORD
   >>> browser.getControl('Log in').click()
 
 Field validation
@@ -27,11 +25,15 @@ Field validation
 Let's add a new document and verify that required fields are actually
 required -- across schemata.
 
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> id = folder.invokeFactory(id='document', type_name='Document')
   >>> document = folder[id]
   >>> document.setTitle('Test document')
   
   >>> url = document.absolute_url()
+  >>> from transaction import commit
+  >>> commit()
 
 We'll try and set the title (a required field) to the empty string:
   
@@ -97,6 +99,7 @@ and change the schemata of one of its fields
 
   >>> document.Schema().getField('text').schemata
   'someschemata'
+  >>> commit()
   
   >>> browser.open(url)
   >>> browser.getLink('Edit').click()
@@ -111,7 +114,3 @@ and change the schemata of one of its fields
   >>> IMultiPageSchema.providedBy(document)
   False
   >>> schema['text'].schemata = previous_schemata
-  
-
-  
-TODO: Add more general editing testing!
diff --git a/Products/ATContentTypes/tests/events.txt b/Products/ATContentTypes/tests/events.txt
index 3f4fbd9..5ca850c 100644
--- a/Products/ATContentTypes/tests/events.txt
+++ b/Products/ATContentTypes/tests/events.txt
@@ -29,7 +29,10 @@ handler that listens for object events for `IBaseObject`:
 
 Creating an AT object will a couple of events:
 
-  >>> d = makeContent(self.folder, portal_type='Document', id='a')
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> portal = layer['portal']
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
+  >>> d = makeContent(folder, portal_type='Document', id='a')
   >>> handler.print_and_flush() #doctest: +ELLIPSIS
   5 events:
   [(<ATDocument at /.../Members/test_user_1_/a>,
diff --git a/Products/ATContentTypes/tests/http_access.txt b/Products/ATContentTypes/tests/http_access.txt
index 311abf3..42deea0 100644
--- a/Products/ATContentTypes/tests/http_access.txt
+++ b/Products/ATContentTypes/tests/http_access.txt
@@ -10,20 +10,22 @@ is acquired or not acquired at the right times. The code is based on
 Sidneys tests for Archetypes.
 
   >>> import os
-  >>> from plone.app.testing import TEST_USER_ID as user_name
+  >>> from plone.app.testing import TEST_USER_NAME as user_name
   >>> from plone.app.testing import TEST_USER_PASSWORD as user_password
+  >>> from plone.app.testing import TEST_USER_ID
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
+  >>> portal = layer['portal']
+  >>> portal_name = portal.getId()
 
   Input directory with test files
   >>> input_dir = os.path.join(test_home, 'input')
 
   Use the member's home folder as play ground for the tests
-  >>> folder = self.folder
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> folder.setTitle('test folder')
   >>> fpath = '/'.join(folder.getPhysicalPath())
 
   We need the portal, too
-  >>> portal = self.portal
   >>> ppath = '/'.join(portal.getPhysicalPath())
 
   Dates use for If-* requests
@@ -38,6 +40,9 @@ Sidneys tests for Archetypes.
   >>> input = open(os.path.join(input_dir, 'test.gif'), 'rb')
   >>> input.seek(0)
 
+  >>> from Testing.ZopeTestCase.zopedoctest.functional import http
+  >>> from Testing.ZopeTestCase.sandbox import AppZapper
+  >>> AppZapper().set(layer['app'])
   >>> print http(r"""
   ... PUT /%s/test-image HTTP/1.1
   ... Authorization: Basic %s:%s
@@ -92,6 +97,11 @@ folder.
   <bound method FSPageTemplate.HEAD of ...>
 
   Check HEAD w/o an index_html object
+  REQUEST is acquired in PloneTool.browserDefault
+  This is a different request in the unittest scenario
+  We have to fool the acquisition for WebDAV requests here.
+  >>> req = {'REQUEST_METHOD': 'HEAD'}
+  >>> setattr(portal, 'REQUEST', req)
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -119,6 +129,9 @@ folder.
   Content-Length: 1
   ...
 
+  Remove acquisition hack
+  >>> delattr(portal, 'REQUEST')
+
   Remove index_html for the following tests since index_html overrules every
   view in set with browser default
   >>> folder.manage_delObjects('index_html')
@@ -126,7 +139,7 @@ folder.
   HEAD returns OK even if the view method does not exist. To show this
   behavior the layout is set to a non existing template.
 
-  >>> pt_tool = self.portal.portal_types
+  >>> pt_tool = portal.portal_types
   >>> ti = pt_tool[folder.portal_type]
   >>> ti.view_methods += ('non_existing_layout',)
 
@@ -138,6 +151,9 @@ folder.
   ...
   AttributeError: ...
 
+  >>> req = {'REQUEST_METHOD': 'HEAD'}
+  >>> setattr(layer['portal'], 'REQUEST', req)
+
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
   ... Authorization: Basic %s:%s
@@ -147,13 +163,16 @@ folder.
   Content-Length: 1
   ...
 
+  >>> delattr(portal, 'REQUEST')
+
 Collections
 -------------
 
-  >>> self.setRoles(['Manager'])
+  >>> from plone.app.testing import setRoles
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> folder.invokeFactory('Topic', id='topic')
   'topic'
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
   >>> topic = folder.topic
   >>> topic.portal_type
   'Topic'
@@ -173,10 +192,10 @@ Collections
   Add a criterion with a value. Without a value criterion.getCriteriaItems()
   returns a false value and the query is empty.
 
-  >>> self.setRoles(['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> criterion = topic.addCriterion('getId', 'ATSimpleStringCriterion')
   >>> criterion.setValue('foo')
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -196,9 +215,9 @@ Test HEAD for the portal root object
   folder.
 
   >>> if 'index_html' in portal:
-  ...     self.setRoles(['Manager'])
+  ...     setRoles(portal, TEST_USER_ID, ['Manager'])
   ...     portal.manage_delObjects(('index_html',))
-  ...     self.setRoles(['Member'])
+  ...     setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -207,12 +226,12 @@ Test HEAD for the portal root object
   HTTP/1.1 200 OK
   ...
 
-  >>> self.setRoles(['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> portal.invokeFactory('Document', id='index_html')
   'index_html'
   >>> portal.index_html.portal_type
   'Document'
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... HEAD /%s HTTP/1.1
@@ -346,3 +365,5 @@ HTTP If modified since
   ...
   <BLANKLINE>
   GIF87...
+
+  >>> AppZapper().clear()
diff --git a/Products/ATContentTypes/tests/portaltype_criterion.txt b/Products/ATContentTypes/tests/portaltype_criterion.txt
index 1f86447..6ad5bed 100644
--- a/Products/ATContentTypes/tests/portaltype_criterion.txt
+++ b/Products/ATContentTypes/tests/portaltype_criterion.txt
@@ -1,20 +1,17 @@
 Adding an ATTopic criterion for Type
 ====================================
 
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
-
-    >>> browser = Browser()
-    >>> browser.open('http://nohost/plone/login')
+    >>> from plone.testing.z2 import Browser
+    >>> portal = layer['portal']
+    >>> browser = Browser(layer['app'])
+    >>> browser.open('%s/login' % portal.absolute_url())
 
 First, we need to log in.
 
-    >>> from Products.PloneTestCase.setup import portal_owner, default_password
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 
@@ -91,13 +88,15 @@ because its portal_type ('Document') is different from its catalog Type ('Page')
 exclude the document from navigation, to make it easier to inspect the browser contents and
 detect whether it shows up in searches.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.invokeFactory('Document', 'doc1')
-    'doc1'
-    >>> self.portal.doc1.setTitle('Test Document')
-    >>> self.portal.doc1.setExcludeFromNav(True)
-    >>> self.portal.doc1.content_status_modify(workflow_action='publish')
+    >>> from plone.app.testing import TEST_USER_ID, setRoles
+    >>> setRoles(layer['portal'], TEST_USER_ID, ['Manager'])
+    >>> doc1 = portal[portal.invokeFactory('Document', 'doc1')]
+    >>> doc1.setTitle('Test Document')
+    >>> doc1.setExcludeFromNav(True)
+    >>> doc1.content_status_modify(workflow_action='publish')
     'http://nohost/plone/doc1'
+    >>> from transaction import commit
+    >>> commit()
 
 We now view the collection.
 
diff --git a/Products/ATContentTypes/tests/reindex_sanity.txt b/Products/ATContentTypes/tests/reindex_sanity.txt
index 17f0c10..282ac63 100644
--- a/Products/ATContentTypes/tests/reindex_sanity.txt
+++ b/Products/ATContentTypes/tests/reindex_sanity.txt
@@ -14,8 +14,12 @@ Those tests make sure that the catalog is only called as necessary.
   >>> from Products.ATContentTypes.tests.atcttestcase import portal_owner
   >>> import transaction
 
-  >>> self.setRoles(['Manager'])
-  >>> _ = self.folder.invokeFactory(type_name='Folder', id='sub')
+  >>> from plone.app.testing import TEST_USER_ID, setRoles
+  >>> portal = layer['portal']
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
+
+  >>> _ = folder.invokeFactory(type_name='Folder', id='sub')
 
   >>> def callers(n=1):
   ...     stack = []
@@ -76,7 +80,7 @@ Wrap ZCatalog methods to let us know about why and when they were called:
 
 Disable Portal Factory:
 
-  >>> pf = getToolByName(self.portal, 'portal_factory', None)
+  >>> pf = getToolByName(portal, 'portal_factory', None)
   >>> if pf is not None:
   ...    pf.manage_setPortalFactoryTypes(listOfTypeIds=[])
 
@@ -86,7 +90,7 @@ Tests for ATDocument
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = self.folder.invokeFactory(type_name='Document',
+  >>> _ = folder.invokeFactory(type_name='Document',
   ...                               id='new_doc1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_doc1 []
@@ -101,15 +105,15 @@ setting:
   Indexing: /plone/Members/test_user_1_/new_doc1 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_doc1'].Title()
+  >>> folder['new_doc1'].Title()
   ''
 
-  >>> self.folder['new_doc1'].Description()
+  >>> folder['new_doc1'].Description()
   ''
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = self.folder.invokeFactory(type_name='Document',
+  >>> _ = folder.invokeFactory(type_name='Document',
   ...                               id='new_doc2',
   ...                               title='Title',
   ...                               description='Description')
@@ -126,10 +130,10 @@ More complex invokeFactory call, setting title and description:
   Indexing: /plone/Members/test_user_1_/new_doc2 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_doc2'].Title()
+  >>> folder['new_doc2'].Title()
   'Title'
 
-  >>> self.folder['new_doc2'].Description()
+  >>> folder['new_doc2'].Description()
   'Description'
 
 Now hold your breath. We are going to rename,
@@ -139,7 +143,7 @@ copy-and-paste and cut-and-paste.
 
 Rename:
 
-  >>> self.folder.manage_renameObjects(ids=['new_doc1'],
+  >>> folder.manage_renameObjects(ids=['new_doc1'],
   ...                                  new_ids=['new_doc11'])
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_doc1
@@ -159,8 +163,8 @@ Rename:
 
 Copy and paste:
 
-  >>> cp = self.folder.manage_copyObjects(ids=['new_doc2'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_copyObjects(ids=['new_doc2'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/sub/new_doc2 []
   ------------------------------------------------------------
@@ -176,8 +180,8 @@ Copy and paste:
 
 Cut and paste:
 
-  >>> cp = self.folder.manage_cutObjects(ids=['new_doc11'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_cutObjects(ids=['new_doc11'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_doc11
   ------------------------------------------------------------
@@ -197,7 +201,7 @@ Tests for ATFolder
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = self.folder.invokeFactory(type_name='Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_folder1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_folder1 []
@@ -212,15 +216,15 @@ setting:
   Indexing: /plone/Members/test_user_1_/new_folder1 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_folder1'].Title()
+  >>> folder['new_folder1'].Title()
   ''
 
-  >>> self.folder['new_folder1'].Description()
+  >>> folder['new_folder1'].Description()
   ''
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = self.folder.invokeFactory(type_name='Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_folder2',
   ...                               title='Title',
   ...                               description='Description')
@@ -237,10 +241,10 @@ More complex invokeFactory call, setting title and description:
   Indexing: /plone/Members/test_user_1_/new_folder2 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_folder2'].Title()
+  >>> folder['new_folder2'].Title()
   'Title'
 
-  >>> self.folder['new_folder2'].Description()
+  >>> folder['new_folder2'].Description()
   'Description'
 
 Now hold your breath. We are going to rename,
@@ -250,7 +254,7 @@ copy-and-paste and cut-and-paste.
 
 Rename:
 
-  >>> self.folder.manage_renameObjects(ids=['new_folder1'],
+  >>> folder.manage_renameObjects(ids=['new_folder1'],
   ...                                  new_ids=['new_folder11'])
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_folder1
@@ -270,8 +274,8 @@ Rename:
 
 Copy and paste:
 
-  >>> cp = self.folder.manage_copyObjects(ids=['new_folder2'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_copyObjects(ids=['new_folder2'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/sub/new_folder2 []
   ------------------------------------------------------------
@@ -287,8 +291,8 @@ Copy and paste:
 
 Cut and paste:
 
-  >>> cp = self.folder.manage_cutObjects(ids=['new_folder11'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_cutObjects(ids=['new_folder11'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_folder11
   ------------------------------------------------------------
@@ -308,7 +312,7 @@ Tests for ATBTreeFolder
 Simple invokeFactory call, without renaming or fancy extra field
 setting:
 
-  >>> _ = self.folder.invokeFactory(type_name='Large Plone Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_btree_folder1')
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/new_btree_folder1 []
@@ -323,15 +327,15 @@ setting:
   Indexing: /plone/Members/test_user_1_/new_btree_folder1 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_btree_folder1'].Title()
+  >>> folder['new_btree_folder1'].Title()
   ''
 
-  >>> self.folder['new_btree_folder1'].Description()
+  >>> folder['new_btree_folder1'].Description()
   ''
 
 More complex invokeFactory call, setting title and description:
 
-  >>> _ = self.folder.invokeFactory(type_name='Large Plone Folder',
+  >>> _ = folder.invokeFactory(type_name='Folder',
   ...                               id='new_btree_folder2',
   ...                               title='Title',
   ...                               description='Description')
@@ -348,10 +352,10 @@ More complex invokeFactory call, setting title and description:
   Indexing: /plone/Members/test_user_1_/new_btree_folder2 []
   ------------------------------------------------------------
 
-  >>> self.folder['new_btree_folder2'].Title()
+  >>> folder['new_btree_folder2'].Title()
   'Title'
 
-  >>> self.folder['new_btree_folder2'].Description()
+  >>> folder['new_btree_folder2'].Description()
   'Description'
 
 Now hold your breath. We are going to rename,
@@ -361,7 +365,7 @@ copy-and-paste and cut-and-paste.
 
 Rename:
 
-  >>> self.folder.manage_renameObjects(ids=['new_btree_folder1'],
+  >>> folder.manage_renameObjects(ids=['new_btree_folder1'],
   ...                                  new_ids=['new_btree_folder11'])
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_btree_folder1
@@ -381,8 +385,8 @@ Rename:
 
 Copy and paste:
 
-  >>> cp = self.folder.manage_copyObjects(ids=['new_btree_folder2'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_copyObjects(ids=['new_btree_folder2'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:  uid_catalog
   Indexing: Members/test_user_1_/sub/new_btree_folder2 []
   ------------------------------------------------------------
@@ -399,8 +403,8 @@ Copy and paste:
 
 Cut and paste:
 
-  >>> cp = self.folder.manage_cutObjects(ids=['new_btree_folder11'])
-  >>> _ = self.folder.sub.manage_pasteObjects(cp)
+  >>> cp = folder.manage_cutObjects(ids=['new_btree_folder11'])
+  >>> _ = folder.sub.manage_pasteObjects(cp)
   Catalog:    uid_catalog
   UnIndexing: Members/test_user_1_/new_btree_folder11
   ------------------------------------------------------------
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index a95a2b1..80d2392 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -1,6 +1,5 @@
 import unittest
 
-from Testing import ZopeTestCase  # side effect import. leave it here.
 from Products.ATContentTypes.tests import atcttestcase, atctftestcase
 
 import transaction
@@ -47,8 +46,6 @@ def editATCT(obj):
     dcEdit(obj)
     obj.setText(example_stx, mimetype=text_format)
 
-tests = []
-
 
 class TestSiteATDocument(atcttestcase.ATCTTypeTestCase):
 
@@ -100,16 +97,7 @@ def test_x_safe_html(self):
             # MTR doens't know about text/stx, and transforming
             # doubles the tags. Yuck.
             ('text/structured', '<p><p>test</p></p>\n'),
-            # XXX
-            # ('text/x-rst', ("<p>&lt;p&gt;test&lt;/p&gt;&lt;script&gt;"
-            #                 "I'm a nasty boy&lt;p&gt;nested&lt;/p&gt;"
-            #                 "&lt;/script&gt;</p>\n")),
-            # ('text/python-source', '<p>test</p>'),
-            # XXX
-            # ('text/plain', ("<p>&lt;p&gt;test&lt;/p&gt;&lt;script&gt;"
-            #                 "I'm a nasty boy&lt;p&gt;nested&lt;/p&gt;"
-            #                 "&lt;/script&gt;</p>\n")),
-            )
+           )
         for mimetype, expected in mimetypes:
             # scrub html is removing unallowed tags
             text = "<p>test</p><script>I'm a nasty boy<p>nested</p></script>"
@@ -151,8 +139,6 @@ def test_tidy_validator_with_upload_wrong_encoding(self):
             expected_file.close()
             self.assertEqual(request['text_tidier_data'], expected)
 
-tests.append(TestSiteATDocument)
-
 
 class TestATDocumentFields(atcttestcase.ATCTFieldTestCase):
 
@@ -264,8 +250,6 @@ def test_textField(self):
 
         self.assertTrue('text/html' in field.getAllowedContentTypes(dummy))
 
-tests.append(TestATDocumentFields)
-
 
 class TestATDocumentFunctional(atctftestcase.ATCTIntegrationTestCase):
 
@@ -296,24 +280,20 @@ def test_id_change_on_initial_edit(self):
         temp_id = location.split('/')[-2]
         obj_title = "New Title for Object"
         new_id = "new-title-for-object"
-        new_obj = getattr(self.folder.aq_explicit, temp_id)
+        new_obj = self.folder.portal_factory._getTempFolder('Document')[new_id]
+        #new_obj = getattr(self.folder.aq_explicit, temp_id)
         new_obj_path = '/%s' % new_obj.absolute_url(1)
         self.assertEqual(new_obj.checkCreationFlag(), True)  # object is not yet edited
 
+        from plone.protect import auto
+        auto.CSRF_DISABLED = True
         response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % (new_obj_path, obj_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
+        new_obj = self.folder[new_id]
         self.assertEqual(new_obj.getId(), new_id)  # does id match
         self.assertEqual(new_obj.checkCreationFlag(), False)  # object is fully created
         new_title = "Second Title"
         response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % ('/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
         self.assertEqual(response.getStatus(), 302)  # OK
         self.assertEqual(new_obj.getId(), new_id)  # id shouldn't have changed
-
-tests.append(TestATDocumentFunctional)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
+        auto.CSRF_DISABLED = False
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 2d03905..7fd273b 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -1,6 +1,5 @@
 import unittest
 
-from Testing import ZopeTestCase  # side effect import. leave it here.
 from Products.ATContentTypes.tests import atcttestcase, atctftestcase
 
 from Products.ATContentTypes.tests.utils import dcEdit
@@ -9,7 +8,7 @@
 from OFS.interfaces import IOrderedContainer as IOrderedContainer
 from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.interfaces import IATBTreeFolder
-from Products.PloneTestCase.setup import portal_owner
+from plone.app.testing import SITE_OWNER_NAME as portal_owner
 
 from zope.interface.verify import verifyObject
 from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
@@ -18,8 +17,6 @@
 def editATCT(obj):
     dcEdit(obj)
 
-tests = []
-
 
 class FolderTestMixin:
     """Contains some general tests for both ATFolder and ATBTreeFolder
@@ -61,8 +58,6 @@ def test_get_size(self):
     def test_schema_marshall(self):
         pass
 
-tests.append(TestSiteATFolder)
-
 
 class TestSiteATBTreeFolder(atcttestcase.ATCTTypeTestCase, FolderTestMixin):
 
@@ -135,9 +130,6 @@ def test_dictBehavior(self):
         self.assertTrue('d1' in f1)  # contains
 
 
-tests.append(TestSiteATBTreeFolder)
-
-
 class TestATFolderFields(atcttestcase.ATCTFieldTestCase):
 
     def afterSetUp(self):
@@ -146,22 +138,9 @@ def afterSetUp(self):
 
     def test_field_enableConstrainMixin(self):
         pass
-        #self.fail('not implemented')
 
     def test_field_locallyAllowedTypes(self):
         pass
-        #self.fail('not implemented')
-
-tests.append(TestATFolderFields)
-
-
-class TestATBTreeFolderFields(TestATFolderFields):
-
-    def afterSetUp(self):
-        atcttestcase.ATCTFieldTestCase.afterSetUp(self)
-        self._dummy = self.createDummy(klass=ATBTreeFolder)
-
-tests.append(TestATBTreeFolderFields)
 
 
 class TestATFolderFunctional(atctftestcase.ATCTIntegrationTestCase):
@@ -181,25 +160,3 @@ def test_selectViewTemplate(self):
                 self.obj_path, self.getAuthToken(portal_owner)),
             self.owner_auth)
         self.assertEqual(self.obj.getLayout(), 'atct_album_view')
-
-tests.append(TestATFolderFunctional)
-
-
-class TestATBTreeFolderFunctional(atctftestcase.ATCTIntegrationTestCase):
-
-    portal_type = 'Large Plone Folder'
-    views = ('folder_listing', 'atct_album_view', )
-
-    def test_templatemixin_view_without_view(self):
-        # template mixin magic should work
-        response = self.publish('%s/' % self.obj_path, self.basic_auth)
-        self.assertEqual(response.getStatus(), 200)
-
-tests.append(TestATBTreeFolderFunctional)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index ecc8e29..e970294 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -14,15 +14,11 @@
 from Products.ATContentTypes.interfaces import IATImage
 from Products.ATContentTypes.tests import atcttestcase, atctftestcase
 from Products.ATContentTypes.tests.utils import dcEdit, PACKAGE_HOME
-from Products.PloneTestCase.PloneTestCase import FunctionalTestCase, setupPloneSite
-from Testing import ZopeTestCase  # side effect import. leave it here.
+from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
 from zope.interface.verify import verifyObject
 
-# BBB Zope 2.12
-try:
-    from Testing.testbrowser import Browser
-except ImportError:
-    from Products.Five.testbrowser import Browser
+from plone.testing.z2 import Browser
+from transaction import commit
 
 # third party extension
 import exif
@@ -52,11 +48,6 @@ def editATCT(obj):
     obj.setImage(TEST_GIF, content_type="image/gif")
     dcEdit(obj)
 
-tests = []
-
-
-setupPloneSite()
-
 
 class TestIDFromTitle(FunctionalTestCase):
     """Browsertests to make sure ATImages derive their default IDs from their titles"""
@@ -66,7 +57,8 @@ def afterSetUp(self):
         self.userId = 'fred'
         self.password = 'secret'
         self.portal.acl_users.userFolderAddUser(self.userId, self.password, ['Manager'], [])
-        self.browser = Browser()
+        commit()
+        self.browser = Browser(self.layer['app'])
         self._log_in()
 
     def _log_in(self):
@@ -104,8 +96,6 @@ def test_image_id_from_unicode_title(self):
         normalized = 'Picture%201.png'
         self.assertTrue(normalized in self.browser.url)
 
-tests.append(TestIDFromTitle)
-
 
 class TestSiteATImage(atcttestcase.ATCTTypeTestCase):
 
@@ -225,8 +215,6 @@ def test_exif_upload(self):
         self.assertTrue(len(atct.getEXIF()), atct.getEXIF())
         atct._image_exif = None
 
-tests.append(TestSiteATImage)
-
 
 class TestATImageFields(atcttestcase.ATCTFieldTestCase):
 
@@ -282,8 +270,6 @@ def test_imageField(self):
         self.assertTrue(tuple(vocab) == (), 'Value is %s' % str(tuple(vocab)))
         self.assertTrue(field.primary == 1, 'Value is %s' % field.primary)
 
-tests.append(TestATImageFields)
-
 
 class TestATImageFunctional(atctftestcase.ATCTIntegrationTestCase):
 
@@ -314,12 +300,3 @@ def test_bobo_hook_security(self):
         self.assertEqual(response3.getStatus(), 302)
         bobo_exception = response3.getHeader('bobo-exception-type')
         self.assertTrue('Unauthorized' in bobo_exception)
-
-tests.append(TestATImageFunctional)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/test_base_profile.py b/Products/ATContentTypes/tests/test_base_profile.py
index 2c34d1e..de63c42 100644
--- a/Products/ATContentTypes/tests/test_base_profile.py
+++ b/Products/ATContentTypes/tests/test_base_profile.py
@@ -1,5 +1,5 @@
 # -*- coding: UTF-8 -*-
-from Products.PloneTestCase.PloneTestCase import PloneTestCase
+from plone.app.testing.bbb import PloneTestCase
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation
 
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index 3014c1c..0db6e33 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -10,26 +10,22 @@
 
 class TestBugs(atcttestcase.ATCTSiteTestCase):
 
-    def afterSetUp(self):
-        atcttestcase.ATCTSiteTestCase.afterSetUp(self)
-        self.wf = self.portal.portal_workflow
-
     def test_wfmapping(self):
-        default = ('simple_publication_workflow',)
+        default = ('plone_workflow',)
 
         mapping = {
             'Document': default,
             'Event': default,
             'File': (),
-            'Folder': default,
+            'Folder': ('folder_workflow',),
             'Image': (),
             'Link': default,
             'News Item': default,
-            'Topic': default,
+            'Collection': default,
             }
 
         for pt, wf in mapping.items():
-            pwf = self.wf.getChainFor(pt)
+            pwf = self.portal.portal_workflow.getChainFor(pt)
             self.assertEqual(pwf, wf, (pt, pwf, wf))
 
     def test_striphtmlbug(self):
@@ -42,12 +38,3 @@ def test_striphtmlbug(self):
     def test_validation_layer_from_id_field_from_base_schema_was_initialized(self):
         field = ATContentTypeSchema['id']
         self.assertTrue(IValidationChain.providedBy(field.validators))
-
-tests.append(TestBugs)
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    for test in tests:
-        suite.addTest(unittest.makeSuite(test))
-    return suite
diff --git a/Products/ATContentTypes/tests/test_content_profile.py b/Products/ATContentTypes/tests/test_content_profile.py
index 684dbcb..eed5ab6 100644
--- a/Products/ATContentTypes/tests/test_content_profile.py
+++ b/Products/ATContentTypes/tests/test_content_profile.py
@@ -1,5 +1,5 @@
 from Products.ATContentTypes import setuphandlers
-from Products.PloneTestCase.PloneTestCase import PloneTestCase
+from plone.app.testing.bbb import PloneTestCase
 
 
 # No sense to check this in Plone 5, frontpage is DX
diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 9201dd5..3842f44 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -1,18 +1,30 @@
 # -*- coding: UTF-8 -*-
 
-from Testing import ZopeTestCase
+FILES = [
+    'events.txt', 'editing.txt',
+    'topictool.txt', 'portaltype_criterion.txt', 'webdav.txt', 'http_access.txt',
+    'reindex_sanity.txt', 'uploading.txt', 'browser_collection_views.txt',
+    # traversal.txt registers the browser page "document_view", and this registration
+    # stays active in different doctests, so we make sure to include it last.
+    'traversal.txt',
+]
 
-from Products.ATContentTypes.tests.atcttestcase import ATCTFunctionalSiteTestCase
-
-FILES = ['events.txt', 'editing.txt']
+import doctest
+OPTIONFLAGS = (doctest.ELLIPSIS |
+               doctest.NORMALIZE_WHITESPACE |
+               doctest.REPORT_NDIFF |
+               doctest.REPORT_ONLY_FIRST_FAILURE)
 
+from plone.testing import layered
+from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 
 def test_suite():
     import unittest
     suite = unittest.TestSuite()
-    from Testing.ZopeTestCase import FunctionalDocFileSuite as FileSuite
-    for file in FILES:
-        suite.addTest(FileSuite(file, package="Products.ATContentTypes.tests",
-                                test_class=ATCTFunctionalSiteTestCase)
+    for testfile in FILES:
+        suite.addTest(layered(doctest.DocFileSuite(testfile,
+                                optionflags=OPTIONFLAGS,
+                                package="Products.ATContentTypes.tests",),
+                      layer=PTC_FUNCTIONAL_TESTING)
                      )
     return suite
diff --git a/Products/ATContentTypes/tests/test_functional.py b/Products/ATContentTypes/tests/test_functional.py
deleted file mode 100644
index 6332a75..0000000
--- a/Products/ATContentTypes/tests/test_functional.py
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- coding: UTF-8 -*-
-
-from Products.ATContentTypes.tests.atcttestcase import ATCTFunctionalSiteTestCase
-
-FILES = [
-    'topictool.txt', 'portaltype_criterion.txt', 'webdav.txt', 'http_access.txt',
-    'reindex_sanity.txt', 'uploading.txt', 'browser_collection_views.txt',
-    # traversal.txt registers the browser page "document_view", and this registration
-    # stays active in different doctests, so we make sure to include it last.
-    'traversal.txt',
-]
-
-import doctest
-OPTIONFLAGS = (doctest.ELLIPSIS |
-               doctest.NORMALIZE_WHITESPACE |
-               doctest.REPORT_NDIFF)
-
-
-def test_suite():
-    import unittest
-    suite = unittest.TestSuite()
-    from Testing.ZopeTestCase import FunctionalDocFileSuite as FileSuite
-    for testfile in FILES:
-        suite.addTest(FileSuite(testfile,
-                                optionflags=OPTIONFLAGS,
-                                package="Products.ATContentTypes.tests",
-                                test_class=ATCTFunctionalSiteTestCase)
-                     )
-    return suite
diff --git a/Products/ATContentTypes/tests/topictool.txt b/Products/ATContentTypes/tests/topictool.txt
index 06ce614..6928478 100644
--- a/Products/ATContentTypes/tests/topictool.txt
+++ b/Products/ATContentTypes/tests/topictool.txt
@@ -3,22 +3,16 @@ Topic Tool Management
 
 Test setup.
 
-    >>> import cStringIO
-
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
-
-    >>> browser = Browser()
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login')
 
 Log in.
 
-    >>> from Products.PloneTestCase.setup import portal_owner, default_password
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
 
 Go to Index Management Page
diff --git a/Products/ATContentTypes/tests/traversal.txt b/Products/ATContentTypes/tests/traversal.txt
index 0b772f7..6025f34 100644
--- a/Products/ATContentTypes/tests/traversal.txt
+++ b/Products/ATContentTypes/tests/traversal.txt
@@ -12,31 +12,33 @@ correctly across the many use cases that must co-exist.
 First, we are going to setup an environment so we can test that stuff
 is acquired or not acquired at the right times.
 
-  >>> from plone.app.testing import TEST_USER_ID as default_user
+  >>> from plone.app.testing import TEST_USER_ID, setRoles
+  >>> setRoles(layer['portal'], TEST_USER_ID, ['Manager'])
+  >>> from plone.app.testing import TEST_USER_NAME as default_user
   >>> from plone.app.testing import TEST_USER_PASSWORD as default_password
+  >>> from Products.ATContentTypes.tests.atcttestcase import test_home
+  >>> portal = layer['portal']
+  >>> portal_name = portal.getId()
+
   >>> from Products.CMFCore.utils import getToolByName
-  >>> self.setRoles(['Manager'])
 
-  >>> self.portal.invokeFactory('Document', 'test_document',
+  >>> portal.invokeFactory('Document', 'test_document',
   ...             title='Root Document')
   'test_document'
 
-  >>> self.portal.invokeFactory('Document', 'index_html', title='Root Index')
-  'index_html'
-
-  >>> self.portal.invokeFactory('Folder', 'simple_folder')
+  >>> portal.invokeFactory('Folder', 'simple_folder')
   'simple_folder'
 
-  >>> self.portal.invokeFactory('Large Plone Folder', 'simple_btree_folder')
-  'simple_btree_folder'
-
-
 XML-RPC
 -------
 
 XML-RPC is basically a ``POST`` with content-type text/xml. It should
 be allowed to acquire content from higher-level hierarchies:
 
+  >>> from Testing.ZopeTestCase.zopedoctest.functional import http
+  >>> from Testing.ZopeTestCase.sandbox import AppZapper
+  >>> AppZapper().set(layer['app'])
+
   >>> print http(r"""
   ... POST /%s HTTP/1.0
   ... Authorization: Basic %s:%s
@@ -53,10 +55,10 @@ be allowed to acquire content from higher-level hierarchies:
   HTTP/1.0 200 OK
   ...Plone site...
 
-  >>> print self.portal.test_document.getPortalTypeName()
+  >>> print portal.test_document.getPortalTypeName()
   Document
 
-  >>> print self.portal.test_document.title_or_id()
+  >>> print portal.test_document.title_or_id()
   Root Document
 
   >>> print http(r"""
@@ -75,7 +77,7 @@ be allowed to acquire content from higher-level hierarchies:
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_folder
+  >>> 'test_document' in portal.simple_folder
   False
 
   >>> print http(r"""
@@ -94,32 +96,13 @@ be allowed to acquire content from higher-level hierarchies:
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_btree_folder
-  False
-
-  >>> print http(r"""
-  ... POST /%s HTTP/1.0
-  ... Authorization: Basic %s:%s
-  ... Content-Type: text/xml
-  ...
-  ... <?xml version='1.0'?>
-  ... <methodCall>
-  ... <methodName>simple_btree_folder.test_document.title_or_id</methodName>
-  ... <params>
-  ... </params>
-  ...
-  ... </methodCall>
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.0 200 OK
-  ...Root Document...
-
 Browser
 -------
 
 For testing Browser access, we are going to just try using the ``GET``
 method instead.
 
-  >>> print self.portal.title_or_id()
+  >>> print portal.title_or_id()
   Plone site
 
   >>> print http(r"""
@@ -129,10 +112,10 @@ method instead.
   HTTP/1.0 200 OK
   ...Plone site...
 
-  >>> print self.portal.test_document.getPortalTypeName()
+  >>> print portal.test_document.getPortalTypeName()
   Document
 
-  >>> print self.portal.test_document.title_or_id()
+  >>> print portal.test_document.title_or_id()
   Root Document
 
   >>> print http(r"""
@@ -142,7 +125,7 @@ method instead.
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_folder
+  >>> 'test_document' in portal.simple_folder
   False
 
   >>> print http(r"""
@@ -152,16 +135,6 @@ method instead.
   HTTP/1.0 200 OK
   ...Root Document...
 
-  >>> 'test_document' in self.portal.simple_btree_folder
-  False
-
-  >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/title_or_id HTTP/1.0
-  ... Authorization: Basic %s:%s
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.0 200 OK
-  ...Root Document...
-
 Lets make sure view lookup takes precedence over acquired views.
 
 We need to do some site magic, or our we end up with the SimpleView class
@@ -172,11 +145,10 @@ ZCML registrations in function tests.
   >>> site = getSite()
 
   >>> setSite(None)
-  >>> try:
-  ...     from Zope2.App import zcml
-  ... except ImportError:
-  ...     from Products.Five import zcml
+  >>> from Zope2.App import zcml
 
+  >>> import Products.Five
+  >>> zcml.load_config('meta.zcml', Products.Five)
   >>> zcml.load_string('''<configure xmlns="http://namespaces.zope.org/browser">
   ... <page
   ...     name="document_view"
@@ -187,13 +159,6 @@ ZCML registrations in function tests.
   ... </configure>''')
   >>> setSite(site)
 
-  >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/document_view HTTP/1.0
-  ... Authorization: Basic %s:%s
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.0 200 OK
-  ...SimpleView simple output...
-
 WebDAV
 ------
 
@@ -231,27 +196,12 @@ through WebDAV.
   HTTP/1.1 404 Not Found
   ...
 
-  >>> print http(r"""
-  ... PROPFIND /%s/simple_btree_folder/test_document HTTP/1.1
-  ... Authorization: Basic %s:%s
-  ... Content-Type: text/xml; charset="utf-8"
-  ... Depth: 0
-  ...
-  ... <?xml version="1.0" encoding="utf-8"?>
-  ...   <DAV:propfind xmlns:DAV="DAV:"
-  ...      xmlns:zope="http://www.zope.org/propsets/default">
-  ...      <DAV:prop><zope:title/></DAV:prop>
-  ...   </DAV:propfind>
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.1 404 Not Found
-  ...
-
 Should be possible to create objects via PUT that would otherwise be
 acquired.
 
 Create a CTR predicate to map any content to ``Document``:
 
-  >>> ctr = getToolByName(self.portal, 'content_type_registry')
+  >>> ctr = getToolByName(portal, 'content_type_registry')
   >>> p_id = 'at_dav_test'
   >>> p_type = 'name_regex'
   >>> ctr.addPredicate(p_id, p_type)
@@ -272,7 +222,7 @@ Create a CTR predicate to map any content to ``Document``:
   HTTP/1.1 201 Created
   ...
 
-  >>> folder = self.portal.simple_folder
+  >>> folder = portal.simple_folder
   >>> print folder.test_document.getPortalTypeName()
   Document
 
@@ -283,36 +233,21 @@ Create a CTR predicate to map any content to ``Document``:
   <p>Simple Folder Document Content</p>
   <BLANKLINE>
 
-  >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/test_document HTTP/1.1
-  ... Authorization: Basic %s:%s
-  ... Content-Type: text/plain; charset="utf-8"
-  ... Depth: 0
-  ...
-  ... BTree Folder Document Content
-  ... """ % (portal_name, default_user, default_password))
-  HTTP/1.1 201 Created
-  ...
-
-  >>> folder = self.portal.simple_btree_folder
-  >>> print folder.test_document.getPortalTypeName()
-  Document
-
   >>> print folder.test_document.title_or_id()
   test_document
 
   >>> print folder.test_document.getText()
-  <p>BTree Folder Document Content</p>
+  <p>Simple Folder Document Content</p>
 
 Make sure it's possible to create an item named ``index_html`` into a
 AT-based folder.
 
-  >>> folder = self.portal.simple_folder
+  >>> folder = portal.simple_folder
   >>> 'index_html' in folder
   False
 
   >>> print folder.index_html
-  <ATDocument at index_html>
+  <FSPageTemplate at index_html>
 
   >>> print http(r"""
   ... PUT /%s/simple_folder/index_html HTTP/1.1
@@ -346,6 +281,8 @@ should be of the same kind as the parent:
   HTTP/1.1 201 Created
   ...
 
-  >>> folder = self.portal.simple_folder.simple_folder
+  >>> folder = portal.simple_folder.simple_folder
   >>> print folder.getPortalTypeName()
   Folder
+
+  >>> AppZapper().clear()
diff --git a/Products/ATContentTypes/tests/uploading.txt b/Products/ATContentTypes/tests/uploading.txt
index 7f74321..408bf6f 100644
--- a/Products/ATContentTypes/tests/uploading.txt
+++ b/Products/ATContentTypes/tests/uploading.txt
@@ -3,22 +3,17 @@ Uploading the contents of a document
 
 Test setup.
 
-    >>> import cStringIO
-
-    # BBB Zope 2.12
-    >>> try:
-    ...     from Testing.testbrowser import Browser
-    ... except ImportError:
-    ...     from Products.Five.testbrowser import Browser
-
-    >>> browser = Browser()
+    >>> from cStringIO import StringIO
+    >>> from plone.testing.z2 import Browser
+    >>> browser = Browser(layer['app'])
     >>> browser.open('http://nohost/plone/login')
 
 Log in.
 
-    >>> from Products.PloneTestCase.setup import portal_owner, default_password
-    >>> browser.getControl('Login Name').value = portal_owner
-    >>> browser.getControl('Password').value = default_password
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import SITE_OWNER_PASSWORD
+    >>> browser.getControl('Login Name').value = SITE_OWNER_NAME
+    >>> browser.getControl('Password').value = SITE_OWNER_PASSWORD
     >>> browser.getControl('Log in').click()
     
 Let's create a new document, ending up at its edit form.
diff --git a/Products/ATContentTypes/tests/webdav.txt b/Products/ATContentTypes/tests/webdav.txt
index dc71411..0421354 100644
--- a/Products/ATContentTypes/tests/webdav.txt
+++ b/Products/ATContentTypes/tests/webdav.txt
@@ -11,15 +11,18 @@ First, we are going to setup an environment so we can test that stuff
 is acquired or not acquired at the right times.
 
   >>> import os
-  >>> from plone.app.testing import TEST_USER_ID as user_name
-  >>> from plone.app.testing import TEST_USER_PASSWORD as user_password
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> from plone.app.testing import TEST_USER_NAME
+  >>> from plone.app.testing import TEST_USER_PASSWORD
   >>> from Products.ATContentTypes.tests.atcttestcase import test_home
+  >>> portal = layer['portal']
+  >>> portal_name = portal.getId()
 
   Input directory with test files
   >>> input_dir = os.path.join(test_home, 'input')
 
   Use the member's home folder as play ground for the tests
-  >>> folder = self.folder
+  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
   >>> fpath = '/'.join(folder.getPhysicalPath())
 
   Plone's default error message template is too verbose and far too long
@@ -38,17 +41,21 @@ Document
 
   Create object by content type
 
+  >>> from Testing.ZopeTestCase.zopedoctest.functional import http
+  >>> from Testing.ZopeTestCase.sandbox import AppZapper
+  >>> AppZapper().set(layer['app'])
+
   >>> input.seek(0)
   >>> print http(r"""
   ... PUT /%s/test-document HTTP/1.1
   ... Authorization: Basic %s:%s
   ... Content-Type: text/html; charset="utf-8"
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> document = self.folder['test-document']
+  >>> document = folder['test-document']
   >>> input.seek(0)
 
   >>> print document.getPortalTypeName()
@@ -99,11 +106,11 @@ Document
   ... PUT /%s/test-document2.txt HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, "a test"))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, "a test"))
   HTTP/1.1 201 Created
   ...
 
-  >>> document = self.folder['test-document2.txt']
+  >>> document = folder['test-document2.txt']
   >>> input.seek(0)
 
   >>> print document.getPortalTypeName()
@@ -130,13 +137,13 @@ Event
   ... PUT /%s/test-event.event HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
   XXX: .event should be removed?
 
-  >>> event = self.folder['test-event.event']
+  >>> event = folder['test-event.event']
 
   >>> print event.getPortalTypeName()
   Event
@@ -158,11 +165,11 @@ File
   ... Authorization: Basic %s:%s
   ... Content-Type: application/zip
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file']
+  >>> file = folder['test-file']
 
   >>> print file.getPortalTypeName()
   File
@@ -192,11 +199,11 @@ File, by Extension
   ... PUT /%s/test-file.zip HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file.zip']
+  >>> file = folder['test-file.zip']
 
   >>> print file.getPortalTypeName()
   File
@@ -220,11 +227,11 @@ OpenOffice 1.0 Text Document, no Content-Type, Extension
   ... PUT /%s/test-file1.sxw HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file1.sxw']
+  >>> file = folder['test-file1.sxw']
 
   >>> print file.getPortalTypeName()
   File
@@ -258,11 +265,11 @@ OpenOffice 1.0 Text Document, no Content-Type, No Extension
   ... PUT /%s/test-file2 HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file2']
+  >>> file = folder['test-file2']
 
   >>> print file.getPortalTypeName()
   File
@@ -299,11 +306,11 @@ OpenOffice 1.0 Text Document, w/ Content-Type, No Extension
   ... Content-Type: application/vnd.sun.xml.writer
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> file = self.folder['test-file3']
+  >>> file = folder['test-file3']
 
   >>> print file.getPortalTypeName()
   File
@@ -340,11 +347,11 @@ Image
   ... Authorization: Basic %s:%s
   ... Content-Type: image/gif
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> image = self.folder['test-image']
+  >>> image = folder['test-image']
 
   >>> print image.getPortalTypeName()
   Image
@@ -374,11 +381,11 @@ Image, by Extension
   ... PUT /%s/test-image.gif HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> image = self.folder['test-image.gif']
+  >>> image = folder['test-image.gif']
 
   >>> print image.getPortalTypeName()
   Image
@@ -398,14 +405,14 @@ Image, by Extension
   ... PUT /%s/test%%20my%%20image.gif HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
   XXX: Note that name mangeling for WebDAV PUTs are not supported at the
   moment!
 
-  >>> image = self.folder['test my image.gif']
+  >>> image = folder['test my image.gif']
 
   >>> print image.getPortalTypeName()
   Image
@@ -429,13 +436,13 @@ Link
   ... PUT /%s/test-link.link HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
   XXX: .link should be removed?
 
-  >>> link = self.folder['test-link.link']
+  >>> link = folder['test-link.link']
 
   >>> print link.getPortalTypeName()
   Link
@@ -456,13 +463,13 @@ News Item
   ... PUT /%s/test-newsitem.news HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
   XXX: .news should be removed?
 
-  >>> news = self.folder['test-newsitem.news']
+  >>> news = folder['test-newsitem.news']
 
   >>> print news.getPortalTypeName()
   News Item
@@ -484,11 +491,11 @@ HTML Page - verify that title is extracted
   ... Authorization: Basic %s:%s
   ... Depth: 0
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> htdoc = self.folder['test-html-title.html']
+  >>> htdoc = folder['test-html-title.html']
   >>> print htdoc.Title()
   HTML Title
   >>> print htdoc.Format()
@@ -505,11 +512,11 @@ XHTML Page - verify that title and body are extracted
   ... Authorization: Basic %s:%s
   ... Depth: 0
   ...
-  ... %s""" % (fpath, user_name, user_password, input.read()))
+  ... %s""" % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD, input.read()))
   HTTP/1.1 201 Created
   ...
 
-  >>> htdoc = self.folder['test-xhtml-title.html']
+  >>> htdoc = folder['test-xhtml-title.html']
   >>> print htdoc.Title()
   HTML Title
   >>> print htdoc.Format()
@@ -525,7 +532,9 @@ WebDAV MKCOL
 
 Need manager roles here:
 
-  >>> self.setRoles(['Manager'])
+  >>> from plone.app.testing import setRoles
+  >>> from plone.app.testing import TEST_USER_ID
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
 
 Folder
 ------
@@ -534,50 +543,32 @@ Folder
   ... MKCOL /%s/test-folder-name HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
-  >>> self.folder['test-folder-name'].Title()
+  >>> folder['test-folder-name'].Title()
   'test-folder-name'
 
-BTreeFolder
------------
-
-Need to make a BTreeFolder manually, and then do a MKCOL inside it:
-
-  >>> _ = self.folder.invokeFactory('Large Plone Folder', 'test-btree')
-
-  >>> print http(r"""
-  ... MKCOL /%s/test-btree/test-btreefolder-name HTTP/1.1
-  ... Authorization: Basic %s:%s
-  ...
-  ... """ % (fpath, user_name, user_password))
-  HTTP/1.1 201 Created
-  ...
-
-  >>> self.folder['test-btree']['test-btreefolder-name'].Title()
-  'test-btreefolder-name'
-
 PUT Mangling
 ------------
 
 Now for the real thing, doing a PUT request, back to Member role:
 
-  >>> self.setRoles(['Member'])
+  >>> setRoles(portal, TEST_USER_ID, ['Member'])
 
   >>> print http(r"""
   ... PUT /%s/Foto%%20do%%20Parana.jpg HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
-  >>> 'Foto do Parana.jpg' in self.folder
+  >>> 'Foto do Parana.jpg' in folder
   True
 
-  >>> image = self.folder['Foto do Parana.jpg']
+  >>> image = folder['Foto do Parana.jpg']
 
   >>> print image.getPortalTypeName()
   Image
@@ -585,7 +576,7 @@ Now for the real thing, doing a PUT request, back to Member role:
   >>> print image.Title()
   Foto do Parana.jpg
 
-  >>> self.setRoles(['Manager'])
+  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
 
 MKCOL Mangling
 --------------
@@ -594,12 +585,14 @@ MKCOL Mangling
   ... MKCOL /%s/Fotos%%20de%%20Jurere HTTP/1.1
   ... Authorization: Basic %s:%s
   ...
-  ... """ % (fpath, user_name, user_password))
+  ... """ % (fpath, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
-  >>> 'Fotos de Jurere' in self.folder
+  >>> 'Fotos de Jurere' in folder
   True
 
-  >>> print self.folder['Fotos de Jurere'].Title()
+  >>> print folder['Fotos de Jurere'].Title()
   Fotos de Jurere
+
+  >>> AppZapper().clear()
diff --git a/setup.py b/setup.py
index 89c3b10..173b315 100644
--- a/setup.py
+++ b/setup.py
@@ -9,6 +9,7 @@
                        open("CHANGES.txt").read(),
       classifiers=[
         "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
         ],
       keywords='Plone Content Types',
       author='AT Content Types development team',
@@ -23,7 +24,7 @@
         test=[
             'zope.annotation',
             'zope.testing',
-            'Products.PloneTestCase',
+            'plone.app.testing',
         ]
       ),
       install_requires=[


