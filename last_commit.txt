Repository: plone.app.vocabularies
Branch: refs/heads/master
Date: 2015-05-30T21:20:59-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/08930f86e40811b348b409ed069b3e2e2afa256b

change CatalogSource to be able to validate
  path strings in addition to UIDs

Files changed:
M CHANGES.rst
M plone/app/vocabularies/catalog.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c01e4c5..e183fff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,9 @@ Changelog
 2.1.18 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- change CatalogSource to be able to validate
+  path strings in addition to UIDs
+  [vangheem]
 
 
 2.1.17 (2015-05-13)
diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py
index 4a744ae..aea6934 100644
--- a/plone/app/vocabularies/catalog.py
+++ b/plone/app/vocabularies/catalog.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+import os
 import itertools
 from binascii import b2a_qp
 from zope.browser.interfaces import ITerms
@@ -320,7 +321,7 @@ def getTerm(self, value):
         if not value:
             return None
         if (not self.context.portal_path.endswith('/')) \
-               and (not value.startswith('/')):
+                and (not value.startswith('/')):
             value = '/' + value
         # get rid for path
         rid = self.context.catalog.getrid(self.context.portal_path + value)
@@ -333,7 +334,7 @@ def getTerm(self, value):
             # fetch the brain from the catalog
             brain = self.context.catalog._catalog[rid]
             title = brain.Title
-            #title = brain.Title
+            # title = brain.Title
             if brain.is_folderish:
                 browse_token = value
             parent_token = "/".join(value.split("/")[:-1])
@@ -585,8 +586,16 @@ def __contains__(self, value):
             uid = value
         else:
             uid = IUUID(value)
-        if self.search_catalog({'UID': uid}):
-            return True
+        if uid[0] == '/':
+            # it is a path query
+            site = getSite()
+            site_path = '/'.join(site.getPhysicalPath())
+            path = os.path.join(site_path, uid.lstrip('/'))
+            if self.search_catalog({'path': {'query': path, 'depth': 0}}):
+                return True
+        else:
+            if self.search_catalog({'UID': uid}):
+                return True
 
     def search_catalog(self, user_query):
         query = user_query.copy()


