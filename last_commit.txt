Repository: plone.schemaeditor
Branch: refs/heads/master
Date: 2015-06-02T14:09:49+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/127af2e1ad5c367b4a0ae3694b43f760f6964641

add a 'protected' attribute to field factory

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/schema/listing.py
M plone/schemaeditor/browser/schema/schema_listing.pt
M plone/schemaeditor/fields.py
M plone/schemaeditor/interfaces.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b9611a3..d678a51 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,11 @@ Changelog
   mockup jquery.event.(drag|drop).
   [vangheem]
 
+- Add a "protected" method to IFieldFactory that may be used to determine
+  if a particular field must be non editable and not movable using the editor
+  (just like a behavior field).
+  Override it for custom behavior in a subclass.
+  [ebrehault]
 
 2.0.4 (2015-05-13)
 ------------------
diff --git a/plone/schemaeditor/browser/schema/listing.py b/plone/schemaeditor/browser/schema/listing.py
index 1b2b349..b7995e2 100644
--- a/plone/schemaeditor/browser/schema/listing.py
+++ b/plone/schemaeditor/browser/schema/listing.py
@@ -67,6 +67,12 @@ def field_type(self, field):
         else:
             return field.__class__.__name__
 
+    def protected_field(self, field):
+        field_identifier = u'%s.%s' % (
+            field.__module__, field.__class__.__name__)
+        field_factory = queryUtility(IFieldFactory, name=field_identifier)
+        return field_factory.protected(field)
+
     def edit_url(self, field):
         field_factory = self._field_factory(field)
         if field_factory is not None and field_factory.editable(field):
diff --git a/plone/schemaeditor/browser/schema/schema_listing.pt b/plone/schemaeditor/browser/schema/schema_listing.pt
index ca134f3..4e62802 100644
--- a/plone/schemaeditor/browser/schema/schema_listing.pt
+++ b/plone/schemaeditor/browser/schema/schema_listing.pt
@@ -92,48 +92,53 @@
           </tal:block>
 
           <tal:widgets repeat="widget group/widgets/values">
-
-            <div tal:condition="widget/disabled|nothing" class="fieldPreview fieldFromBehavior">
-              <div class="fieldLabel">
-                  <tal:block i18n:translate="">From the
-                    <tal:block i18n:name="behavior_name" tal:replace="python:widget.__name__.split('.')[0]"/> behavior:</tal:block>
-                  <strong tal:content="widget/field/__name__" /> &ndash;
-                  <tal:block tal:content="python:view.field_type(widget.field)"/>
-              </div>
-              <tal:field tal:replace="structure widget/@@ploneform-render-widget" />
-              <div class="disabled-field-overlay"></div>
-            </div>
-
-            <div tal:condition="not:widget/disabled|nothing"
-                 class="fieldPreview orderable" tal:attributes="data-field_id widget/field/__name__">
-
-              <div class="fieldLabel">
-                  <strong tal:content="widget/field/__name__" /> &ndash;
-                  <tal:block tal:content="python:view.field_type(widget.field)"/>
+            <tal:block
+              tal:define="
+                disabled widget/disabled|nothing;
+                protected python:view.protected_field(widget.field);">
+
+              <div tal:condition="python:disabled or protected" class="fieldPreview fieldFromBehavior">
+                <div class="fieldLabel">
+                    <tal:block tal:condition="disabled" i18n:translate="">From the
+                      <tal:block i18n:name="behavior_name" tal:replace="python:widget.__name__.split('.')[0]"/> behavior:</tal:block>
+                    <strong tal:content="widget/field/__name__" /> &ndash;
+                    <tal:block tal:content="python:view.field_type(widget.field)"/>
+                </div>
+                <tal:field tal:replace="structure widget/@@ploneform-render-widget" />
+                <div class="disabled-field-overlay"></div>
               </div>
 
-              <div class="fieldControls"
-                   i18n:domain="plone.schemaeditor">
-                  <a class="fieldSettings pat-plone-modal"
-                     tal:define="edit_url python:view.edit_url(widget.field)"
-                     tal:condition="edit_url"
-                     i18n:translate=""
-                     tal:attributes="href edit_url">Settings&hellip;</a>
-                  <a class="schemaeditor-delete-field"
-                     i18n:attributes="title; data-confirm_msg"
-                     title="Delete field"
-                     data-confirm_msg="Are you sure you want to delete this field?"
-                     style="margin-left: 1em; font-size: 150%; border: none"
-                     tal:define="delete_url python:view.delete_url(widget.field)"
-                     tal:condition="delete_url"
-                     tal:attributes="href delete_url">&times;</a>
-              </div>
+              <div tal:condition="python:not(disabled or protected)"
+                   class="fieldPreview orderable" tal:attributes="data-field_id widget/field/__name__">
+
+                <div class="fieldLabel">
+                    <strong tal:content="widget/field/__name__" /> &ndash;
+                    <tal:block tal:content="python:view.field_type(widget.field)"/>
+                </div>
+
+                <div class="fieldControls"
+                     i18n:domain="plone.schemaeditor">
+                    <a class="fieldSettings pat-plone-modal"
+                       tal:define="edit_url python:view.edit_url(widget.field)"
+                       tal:condition="edit_url"
+                       i18n:translate=""
+                       tal:attributes="href edit_url">Settings&hellip;</a>
+                    <a class="schemaeditor-delete-field"
+                       i18n:attributes="title; data-confirm_msg"
+                       title="Delete field"
+                       data-confirm_msg="Are you sure you want to delete this field?"
+                       style="margin-left: 1em; font-size: 150%; border: none"
+                       tal:define="delete_url python:view.delete_url(widget.field)"
+                       tal:condition="delete_url"
+                       tal:attributes="href delete_url">&times;</a>
+                </div>
+
+                <div style="width: 80%">
+                  <tal:field tal:replace="structure widget/@@ploneform-render-widget" />
+                </div>
 
-              <div style="width: 80%">
-                <tal:field tal:replace="structure widget/@@ploneform-render-widget" />
               </div>
-
-            </div>
+            </tal:block>
 
           </tal:widgets>
 
diff --git a/plone/schemaeditor/fields.py b/plone/schemaeditor/fields.py
index 4ecd2df..cf1481b 100644
--- a/plone/schemaeditor/fields.py
+++ b/plone/schemaeditor/fields.py
@@ -52,6 +52,10 @@ def editable(self, field):
         """ test whether a given instance of a field is editable """
         return True
 
+    def protected(self, field):
+        """ test whether a given instance of a field is protected """
+        return False
+
 
 def FieldsVocabularyFactory(context):
     request = getRequest()
diff --git a/plone/schemaeditor/interfaces.py b/plone/schemaeditor/interfaces.py
index 3de2928..f1c9b79 100644
--- a/plone/schemaeditor/interfaces.py
+++ b/plone/schemaeditor/interfaces.py
@@ -79,6 +79,9 @@ def available(self):
     def editable(self, field):
         """ test whether a given instance of a field is editable """
 
+    def protected(self, field):
+        """ test whether a given instance of a field is protected """
+
 
 class IEditableSchema(Interface):
 


Repository: plone.schemaeditor
Branch: refs/heads/master
Date: 2015-06-02T14:10:37+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/67b8f70595f26eb6356cee5de1f7e511c888d612

merge

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/field/configure.zcml
M plone/schemaeditor/browser/field/edit.py
M plone/schemaeditor/tests/editing.txt
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d678a51..aefe990 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,16 +4,24 @@ Changelog
 2.0.5 (unreleased)
 ------------------
 
-- fix javascript to reorder fields. It was conflicting with
+- Add undeclared zope.cachedescriptors dependency.
+  [timo]
+
+- Fix javascript to reorder fields. It was conflicting with
   mockup jquery.event.(drag|drop).
   [vangheem]
 
+- Add support for non-destructive editing of attributes with i18n
+  Message values
+  [datakurre]
+
 - Add a "protected" method to IFieldFactory that may be used to determine
   if a particular field must be non editable and not movable using the editor
   (just like a behavior field).
   Override it for custom behavior in a subclass.
   [ebrehault]
 
+
 2.0.4 (2015-05-13)
 ------------------
 
diff --git a/plone/schemaeditor/browser/field/configure.zcml b/plone/schemaeditor/browser/field/configure.zcml
index f20e193..5af0eec 100644
--- a/plone/schemaeditor/browser/field/configure.zcml
+++ b/plone/schemaeditor/browser/field/configure.zcml
@@ -12,6 +12,8 @@
 
     <adapter
         factory=".edit.FieldTitleAdapter" />
+    <adapter
+        factory=".edit.FieldDataManager" />
 
     <browser:page
         name="order"
diff --git a/plone/schemaeditor/browser/field/edit.py b/plone/schemaeditor/browser/field/edit.py
index f6e411c..c51914e 100644
--- a/plone/schemaeditor/browser/field/edit.py
+++ b/plone/schemaeditor/browser/field/edit.py
@@ -1,14 +1,20 @@
 from Acquisition import aq_parent, aq_inner
 
 from zope.interface import implements, Interface
+from zope.interface.declarations import ObjectSpecificationDescriptor
+from zope.interface.declarations import getObjectSpecification
 from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import adapts, getAdapters
 from zope.event import notify
 from zope.schema.interfaces import IField
+from zope.security.interfaces import ForbiddenAttribute
 from zope import schema
+from zope.i18nmessageid import Message
 from zope.i18nmessageid import MessageFactory
 
 from z3c.form import form, field, button
+from z3c.form.interfaces import IDataManager
+from z3c.form.datamanager import AttributeField
 from plone.z3cform import layout
 from plone.autoform.form import AutoExtensibleForm
 
@@ -47,13 +53,59 @@ def _write_title(self, value):
     title = property(_read_title, _write_title)
 
 
+class IFieldProxy(Interface):
+    """Marker interface for field being edited by schemaeditor"""
+
+
+class FieldProxySpecification(ObjectSpecificationDescriptor):
+    def __get__(self, inst, cls=None):
+        if inst is None:
+            return getObjectSpecification(cls)
+        else:
+            return inst.__provides__
+
+
+class FieldProxy(object):
+    implements(IFieldProxy)
+
+    __providedBy__ = FieldProxySpecification()
+
+    def __init__(self, context):
+        self.__class__ = type(context.__class__.__name__,
+                              (self.__class__, context.__class__), {})
+        self.__dict__ = context.__dict__
+
+
+class FieldDataManager(AttributeField):
+    implements(IDataManager)
+    adapts(IFieldProxy, IField)
+
+    def get(self):
+        value = super(FieldDataManager, self).get()
+        if isinstance(value, Message) and value.default:
+            return value.default
+        return value
+
+    def set(self, value):
+        try:
+            old_value = super(FieldDataManager, self).get()
+        except (AttributeError, ForbiddenAttribute):
+            old_value = None
+        if isinstance(old_value, Message):
+            value = Message(unicode(old_value),
+                            domain=old_value.domain,
+                            default=value,
+                            mapping=old_value.mapping)
+        super(FieldDataManager, self).set(value)
+
+
 class FieldEditForm(AutoExtensibleForm, form.EditForm):
     implements(IFieldEditForm)
     id = 'edit-field-form'
 
     def __init__(self, context, request):
         super(form.EditForm, self).__init__(context, request)
-        self.field = context.field
+        self.field = FieldProxy(context.field)
 
     def getContent(self):
         return self.field
diff --git a/plone/schemaeditor/tests/editing.txt b/plone/schemaeditor/tests/editing.txt
index 1fad5a5..e5931c7 100644
--- a/plone/schemaeditor/tests/editing.txt
+++ b/plone/schemaeditor/tests/editing.txt
@@ -98,6 +98,48 @@ Let's confirm that the new default value was correctly saved to the actual schem
     >>> IDummySchema['favorite_color'].description
     u'Enter your favorite color.'
 
+If the schema is edited to have internationalized attributes::
+
+    >>> from zope.i18nmessageid import Message
+    >>> IDummySchema['favorite_color'].description = Message(
+    ...    'favorite_color', domain='plone.schemaeditor')
+
+Then editing the schema will preserve those values and only update their
+default values::
+
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> "Edit Field 'favorite_color'" in browser.contents
+    True
+    >>> browser.getControl('Description').value
+    'favorite_color'
+    >>> browser.getControl('Description').value = 'Enter your favorite color.'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on TextLine]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor'
+
+Let's confirm that the message value was preserved and only its default
+value was set::
+
+    >>> type(IDummySchema['favorite_color'].description)
+    <type 'zope.i18nmessageid.message.Message'>
+    >>> IDummySchema['favorite_color'].description
+    u'favorite_color'
+    >>> IDummySchema['favorite_color'].description.domain
+    'plone.schemaeditor'
+    >>> IDummySchema['favorite_color'].description.default
+    u'Enter your favorite color.'
+
+Let's also check that the support for editing i18n Message values does not
+persist its marker interface::
+
+    >>> from plone.schemaeditor.browser.field.edit import IFieldProxy
+    >>> IFieldProxy.providedBy(IDummySchema['favorite_color'])
+    False
+
 Let's go back and try to make an invalid change.  The form won't let us::
 
     >>> browser.getLink(url='favorite_color').click()
diff --git a/setup.py b/setup.py
index 5e76eaf..c8696f1 100644
--- a/setup.py
+++ b/setup.py
@@ -26,6 +26,7 @@
       install_requires=[
           'setuptools',
           'Zope2',
+          'zope.cachedescriptors',
           'zope.component',
           'zope.container',
           'zope.globalrequest',


