Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2015-09-14T16:11:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.discussion/commit/3d2e176479b181902907875f27d3cb6a681addcd

Removed Travis from repo.

This is a core package that should be maintained in buildout.coredev.
I have switched off the Travis hook.

Files changed:
M setup.cfg
D .travis.yml
D bootstrap-buildout.py
D buildout.cfg
D travis.cfg

diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 70f96b4..0000000
--- a/.travis.yml
+++ /dev/null
@@ -1,19 +0,0 @@
-language: python
-python: "2.7"
-sudo: false
-cache:
-  directories:
-  - eggs
-before_install:
-  - pip install http://effbot.org/downloads/Imaging-1.1.7.tar.gz
-install:
-  - mkdir -p buildout-cache/eggs
-  - mkdir -p buildout-cache/downloads
-  - python bootstrap-buildout.py --setuptools-version=8.3 -c travis.cfg
-  - bin/buildout -N -t 3 -c travis.cfg
-script:
-  - bin/code-analysis
-#  - bin/test-coverage
-#after_success:
-#  - pip install -q coveralls
-#  - coveralls
diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py
deleted file mode 100644
index a629566..0000000
--- a/bootstrap-buildout.py
+++ /dev/null
@@ -1,189 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os
-import shutil
-import sys
-import tempfile
-
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --find-links to point to local resources, you can keep
-this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", "--config-file",
-                  help=("Specify the path to the buildout configuration "
-                        "file to be used."))
-parser.add_option("-f", "--find-links",
-                  help=("Specify a URL to search for buildout releases"))
-parser.add_option("--allow-site-packages",
-                  action="store_true", default=False,
-                  help=("Let bootstrap.py use existing site packages"))
-parser.add_option("--setuptools-version",
-                  help="use a specific setuptools version")
-
-
-options, args = parser.parse_args()
-
-######################################################################
-# load/install setuptools
-
-try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
-    from urllib.request import urlopen
-except ImportError:
-    from urllib2 import urlopen
-
-ez = {}
-exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
-
-if not options.allow_site_packages:
-    # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions
-    # of setuptools are not in the path
-    import site
-    # inside a virtualenv, there is no 'getsitepackages'.
-    # We can't remove these reliably
-    if hasattr(site, 'getsitepackages'):
-        for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
-
-setup_args = dict(to_dir=tmpeggs, download_delay=0)
-
-if options.setuptools_version is not None:
-    setup_args['version'] = options.setuptools_version
-
-ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
-
-# This does not (always?) update the default working set.  We will
-# do it.
-for path in sys.path:
-    if path not in pkg_resources.working_set.entries:
-        pkg_resources.working_set.add_entry(path)
-
-######################################################################
-# Install buildout
-
-ws = pkg_resources.working_set
-
-cmd = [sys.executable, '-c',
-       'from setuptools.command.easy_install import main; main()',
-       '-mZqNxd', tmpeggs]
-
-find_links = os.environ.get(
-    'bootstrap-testing-find-links',
-    options.find_links or
-    ('http://downloads.buildout.org/'
-     if options.accept_buildout_test_releases else None)
-    )
-if find_links:
-    cmd.extend(['-f', find_links])
-
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        try:
-            return not parsed_version.is_prerelease
-        except AttributeError:
-            # Older setuptools
-            for part in parsed_version:
-                if (part[:1] == '*') and (part not in _final_parts):
-                    return False
-            return True
-
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setuptools_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-if version:
-    requirement = '=='.join((requirement, version))
-cmd.append(requirement)
-
-import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
-    raise Exception(
-        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
-
-######################################################################
-# Import and run buildout
-
-ws.add_entry(tmpeggs)
-ws.require(requirement)
-import zc.buildout.buildout
-
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
deleted file mode 100644
index b9a690e..0000000
--- a/buildout.cfg
+++ /dev/null
@@ -1,88 +0,0 @@
-[buildout]
-extends = http://dist.plone.org/release/4.3.4/versions.cfg
-parts =
-    instance
-    test
-    coverage
-    test-coverage
-    mkrelease
-    pocompile
-    code-analysis
-    i18ndude
-    update_translations
-develop = .
-
-[instance]
-recipe = plone.recipe.zope2instance
-http-address = 8080
-user = admin:admin
-eggs = Plone
-
-
-[test]
-recipe = zc.recipe.testrunner
-eggs = plone.app.discussion [test]
-defaults = ['-s', 'plone.app.discussion', '--auto-color', '--auto-progress']
-
-[coverage]
-recipe = zc.recipe.egg
-eggs = coverage
-
-[test-coverage]
-recipe = collective.recipe.template
-input = inline:
-    #!/bin/bash
-    ${buildout:directory}/bin/coverage run --source=${buildout:directory}/src/plone/app/discussion bin/test
-    ${buildout:directory}/bin/coverage html
-    ${buildout:directory}/bin/coverage report -m --fail-under=100
-    # Fail (exit status 1) if coverage returns exit status 2 (this happens
-    # when test coverage is below 100%.
-output = ${buildout:directory}/bin/test-coverage
-mode = 755
-
-[mkrelease]
-recipe = zc.recipe.egg
-eggs = jarn.mkrelease
-
-[pocompile]
-recipe = zc.recipe.egg
-eggs = zest.pocompile
-
-[code-analysis]
-recipe = plone.recipe.codeanalysis
-directory = ${buildout:directory}/plone/app/discussion
-flake8-max-complexity = 50
-
-[i18ndude]
-recipe = zc.recipe.egg
-eggs =
-    i18ndude
-
-[update_translations]
-recipe = collective.recipe.template
-output = ${buildout:bin-directory}/update_translations
-input = inline:
-    #!/usr/bin/env bash
-
-    DOMAIN="plone.app.discussion"
-    BASE_PATH=${buildout:directory}/plone/app/discussion
-    I18NDUDE=${buildout:bin-directory}/i18ndude
-
-    $I18NDUDE rebuild-pot --pot $BASE_PATH/locales/$DOMAIN.pot --create "$DOMAIN" $BASE_PATH*
-    $I18NDUDE rebuild-pot --pot $BASE_PATH/i18n/plone.pot --create "plone" $BASE_PATH/profiles/
-
-    for LANG in `find $BASE_PATH/locales -maxdepth 1 -mindepth 1 -type d \
-         | sed -e "s/.*locales\/\(.*\)$/\1/"`; do
-        $I18NDUDE sync --pot  $BASE_PATH/locales/$DOMAIN.pot $BASE_PATH/locales/de/LC_MESSAGES/$DOMAIN.po
-        msgfmt --no-hash -o $BASE_PATH/locales/$LANG/LC_MESSAGES/$DOMAIN.mo  $BASE_PATH/locales/$LANG/LC_MESSAGES/$DOMAIN.po
-
-        $I18NDUDE sync --pot $BASE_PATH/i18n/plone.pot $BASE_PATH/i18n/plone-$LANG.po
-        msgfmt --no-hash -o $BASE_PATH/i18n/plone-$LANG.mo $BASE_PATH/i18n/plone-$LANG.po
-    done
-mode = 755
-
-[versions]
-plone.app.discussion =
-zope.interface = 4.0.5
-zc.buildout = 2.3.1
-setuptools = 8.0.4
diff --git a/setup.cfg b/setup.cfg
index c674eda..deac03d 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -3,11 +3,5 @@ source-dir = docs/source
 build-dir  = docs
 all_files  = 1
 
-[check-manifest]
-ignore =
-    *.cfg
-    .travis.yml
-    bootstrap-buildout.py
-
 [upload_sphinx]
 upload-dir = docs/html
diff --git a/travis.cfg b/travis.cfg
deleted file mode 100644
index d77bda1..0000000
--- a/travis.cfg
+++ /dev/null
@@ -1,21 +0,0 @@
-[buildout]
-extends = buildout.cfg
-parts +=
-   download
-   install
-   code-analysis
-eggs-directory = buildout-cache/eggs
-download-cache = buildout-cache/downloads
-
-[download]
-recipe = hexagonit.recipe.download
-url = https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-UnifiedInstaller.tgz
-
-[install]
-recipe = collective.recipe.cmd
-on_install = true
-cmds = tar jxvf ${download:location}/Plone-4.3.4-UnifiedInstaller/packages/buildout-cache.tar.bz2 1>/dev/null
-
-[code-analysis]
-recipe = plone.recipe.codeanalysis
-return-status-codes = True


