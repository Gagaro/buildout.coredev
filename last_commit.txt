Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-01T00:15:51-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/dcf8be121d5ae330020f76162b4e63e1a39bb2f7

make control panel usable again. Fixed problem where skins
  control panel is no longer present.

Files changed:
M docs/CHANGES.rst
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 05a198a..24afd5d 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 1.2.3 (unreleased)
 ------------------
 
+- make control panel usable again. Fixed problem where skins
+  control panel is no longer present.
+  [vangheem]
+
 - unified different getTheme functions.
   [jensens]
 
diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt
index f572a4e..f9b8f12 100644
--- a/src/plone/app/theming/browser/controlpanel.pt
+++ b/src/plone/app/theming/browser/controlpanel.pt
@@ -535,7 +535,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('themeBase', view.skinsSettings.theme)">
+                        tal:define="selected python:request.get('themeBase', view.pskin.getDefaultSkin())">
 
                         <label for="themeBase" i18n:translate="label_theme_base">Theme base</label>
 
@@ -559,7 +559,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('markSpecialLinks', view.skinsSettings.mark_special_links)">
+                        tal:define="selected python:request.get('markSpecialLinks', view.mark_special_links)">
 
                         <input type="hidden" value="" name="markSpecialLinks:boolean:default" />
                         <input type="checkbox" value="1" name="markSpecialLinks:boolean" id="markSpecialLinks"
@@ -574,7 +574,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('extLinksOpenInNewWindow', view.skinsSettings.ext_links_open_new_window)">
+                        tal:define="selected python:request.get('extLinksOpenInNewWindow', view.ext_links_open_new_window)">
 
                         <input type="hidden" value="" name="extLinksOpenInNewWindow:boolean:default" />
                         <input type="checkbox" value="1" name="extLinksOpenInNewWindow:boolean" id="extLinksOpenInNewWindow"
@@ -587,53 +587,6 @@
 
                     </div>
 
-                    <div
-                        class="field"
-                        tal:define="selected_default view/skinsSettings/use_popups|python:False;
-                                    selected python:request.get('usePopups', selected_default)">
-
-                        <input type="hidden" value="" name="usePopups:boolean:default" />
-                        <input type="checkbox" value="1" name="usePopups:boolean" id="usePopups"
-                            tal:attributes="checked python:'usePopups' if selected else None"
-                            />
-                        <label for="usePopups" i18n:translate="label_use_popups">Use popup overlays for simple forms</label>
-                        <div class="formHelp" i18n:translate="help_use_popups">
-                            If enabled popup overlays will be used for simple forms like login, contact and delete confirmation.
-                        </div>
-
-                    </div>
-
-                    <div
-                        class="field radio"
-                        tal:define="selected python:request.get('iconVisibility', view.skinsSettings.icon_visibility)">
-
-                        <label i18n:translate="label_icon_visibility">Show content type icons </label>
-                        <div class="formHelp" i18n:translate="help_icon_visibility">
-                            If disabled the content icons in folder listings and portlets won't be visible.
-                        </div>
-
-                        <div>
-                            <input type="radio" name="iconVisibility" id="iconVisibility_enabled" value="enabled"
-                                tal:attributes="checked python:selected == 'enabled' and 'selected' or None" />
-                            <label class="radioLabel" for="iconVisibility_enabled" i18n:translate="">Always shown icons</label>
-                        </div>
-
-                        <div>
-                            <input type="radio" name="iconVisibility" id="iconVisibility_authenticated" value="authenticated"
-                                tal:attributes="checked python:selected == 'authenticated' and 'selected' or None" />
-                            <label class="radioLabel" for="iconVisibility_authenticated" i18n:translate="">Only for users who are logged in</label>
-                        </div>
-
-                        <div>
-                            <input type="radio" name="iconVisibility" id="iconVisibility_disabled" value="disabled"
-                                tal:attributes="checked python:selected == 'disabled' and 'selected' or None" />
-                            <label class="radioLabel" for="iconVisibility_disabled" i18n:translate="">Never show icons</label>
-                        </div>
-
-                    </div>
-
-
-
                 </fieldset>
             </div>
 
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 78f45d9..75796cf 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -3,7 +3,6 @@
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.decode import processInputs
 from Products.statusmessages.interfaces import IStatusMessage
-from plone.app.controlpanel.skins import ISkinsSchema
 from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.interfaces import RULE_FILENAME
@@ -40,6 +39,10 @@ def authorize(context, request):
 class ThemingControlpanel(BrowserView):
 
     def __call__(self):
+        ptool = getToolByName(self.context, 'portal_properties')
+        self.props = ptool.site_properties
+        self.pskin = getToolByName(self.context, 'portal_skins')
+
         if self.update():
             return self.index()
         return ''
@@ -57,7 +60,6 @@ def _setup(self):
         )
         self.overlay = ''
 
-        self.skinsSettings = ISkinsSchema(self.context)
         self.skinsVocabulary = getUtility(
             IVocabularyFactory,
             name='plone.app.vocabularies.Skins'
@@ -71,6 +73,41 @@ def _setup(self):
     def redirect(self, url):
         self.request.response.redirect(url)
 
+    def get_mark_special_links(self):
+        msl = getattr(self.props, 'mark_special_links', False)
+        if msl == 'true':
+            return True
+        return False
+
+    def set_mark_special_links(self, value):
+        if value:
+            mark_special_links = 'true'
+        else:
+            mark_special_links = 'false'
+        if self.props.hasProperty('mark_special_links'):
+            self.props.manage_changeProperties(mark_special_links=mark_special_links)
+        else:
+            self.props.manage_addProperty(
+                'mark_special_links', mark_special_links, 'string')
+
+    mark_special_links = property(get_mark_special_links,
+                                  set_mark_special_links)
+
+    def get_ext_links_open_new_window(self):
+        elonw = self.props.external_links_open_new_window
+        if elonw == 'true':
+            return True
+        return False
+
+    def set_ext_links_open_new_window(self, value):
+        if value:
+            self.props.manage_changeProperties(external_links_open_new_window='true')
+        else:
+            self.props.manage_changeProperties(external_links_open_new_window='false')
+
+    ext_links_open_new_window = property(get_ext_links_open_new_window,
+                                         set_ext_links_open_new_window)
+
     def update(self):
         # XXX: complexity too high: refactoring needed
         processInputs(self.request)
@@ -152,10 +189,8 @@ def update(self):
             themeBase = form.get('themeBase', None)
             markSpecialLinks = form.get('markSpecialLinks', None)
             extLinksOpenInNewWindow = form.get('extLinksOpenInNewWindow', None)
-            usePopups = form.get('usePopups', None)
-            iconVisibility = form.get('iconVisibility', None)
 
-            if self.errors:
+            if not self.errors:
                 # Trigger onDisabled() on plugins if theme was active
                 # previously and rules were changed
                 if self.settings.rules != rules:
@@ -170,17 +205,11 @@ def update(self):
 
                 # Theme base settings
                 if themeBase is not None:
-                    self.skinsSettings.theme = themeBase.encode('utf-8')
+                    self.pskin.default_skin = themeBase.encode('utf-8')
                 if markSpecialLinks is not None:
-                    self.skinsSettings.mark_special_links = markSpecialLinks
+                    self.mark_special_links = markSpecialLinks
                 if extLinksOpenInNewWindow is not None:
-                    self.skinsSettings.ext_links_open_new_window = \
-                        extLinksOpenInNewWindow
-                if usePopups is not None:
-                    self.skinsSettings.use_popups = usePopups
-                if iconVisibility is not None:
-                    self.skinsSettings.icon_visibility = \
-                        iconVisibility.encode('utf-8')
+                    self.ext_links_open_new_window = extLinksOpenInNewWindow
 
                 IStatusMessage(self.request).add(_(u"Changes saved"))
                 self._setup()


