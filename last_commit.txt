Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2013-07-20T08:37:55+01:00
Author: Jamie Lentin (lentinj) <jm@lentin.co.uk>
Commit: https://github.com/plone/plone.app.dexterity/commit/2b3b3568da77f23b335107d59f5743318015bab1

Default creators value should be unicode

A non-unicode string fails validation, so it's only fair that the default value
is unicode so it passes validation

Files changed:
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/tests/metadata.txt

diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index 2d5e120..53e350d 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -198,7 +198,7 @@ class IOwnership(model.Schema):
 # make sure the add form shows the default creator
 def creatorsDefault(data):
     user = getSecurityManager().getUser()
-    return user and (user.getId(),)
+    return user and (unicode(user.getId()),)
 CreatorsDefaultValue = ComputedWidgetAttribute(
     creatorsDefault,
     field=IOwnership['creators']
diff --git a/plone/app/dexterity/tests/metadata.txt b/plone/app/dexterity/tests/metadata.txt
index 9447087..4d071fb 100644
--- a/plone/app/dexterity/tests/metadata.txt
+++ b/plone/app/dexterity/tests/metadata.txt
@@ -53,3 +53,13 @@ The modified and creation dates are set correctly::
     >>> DateTime() > DateTime(md.CreationDate())
     True
 
+The creators field contains the current user as a unicode string, and you
+should be able to set same value without a validation error::
+
+    >>> from zope.schema import getFields
+    >>> from plone.dexterity.utils import getAdditionalSchemata
+    >>> schema = getAdditionalSchemata(context=md).next()
+    >>> field = getFields(schema)['creators']
+    >>> field.get(field.interface(md))
+    (u'test_user_1_',)
+    >>> field.set(field.interface(md), (u'test_user_1_',))


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-01T22:20:16Z
Author: Jamie Lentin (lentinj) <jm@lentin.co.uk>
Commit: https://github.com/plone/plone.app.dexterity/commit/0593aa53b1e9faf429097d0e1475248d9c82d25f

Allow userid to be UTF8-encoded bytes

Over in plone.dexterity.content.listCreators we assume that we should
be outputting UTF-8 encoded bytes, so it's only fair that that's what
comes in.

Files changed:
M plone/app/dexterity/behaviors/metadata.py

diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index 53e350d..94740db 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -13,6 +13,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from plone.autoform import directives as form
+from plone.dexterity.utils import safe_unicode
 from plone.supermodel import model
 from plone.dexterity.interfaces import IDexterityContent
 from plone.autoform.interfaces import IFormFieldProvider
@@ -198,7 +199,8 @@ class IOwnership(model.Schema):
 # make sure the add form shows the default creator
 def creatorsDefault(data):
     user = getSecurityManager().getUser()
-    return user and (unicode(user.getId()),)
+    # NB: CMF users are UTF-8 encoded bytes, decode them before inserting
+    return user and (safe_unicode(user.getId()),)
 CreatorsDefaultValue = ComputedWidgetAttribute(
     creatorsDefault,
     field=IOwnership['creators']


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-01T22:38:40Z
Author: Jamie Lentin (lentinj) <jm@lentin.co.uk>
Commit: https://github.com/plone/plone.app.dexterity/commit/bf1fef551f4b8be2d351d2feca3933644061c896

Merge remote-tracking branch 'origin/master' into unicode-default-value

Conflicts:
	plone/app/dexterity/behaviors/metadata.py

Files changed:
A .tx/config
A CHANGES.rst
A RELEASE_NOTES.rst
A docs/grok/advanced/behaviours.rst
A docs/grok/advanced/catalog-indexing-strategies.rst
A docs/grok/advanced/custom-add-and-edit-forms.rst
A docs/grok/advanced/custom-content-classes.rst
A docs/grok/advanced/defaults.rst
A docs/grok/advanced/event-handlers.rst
A docs/grok/advanced/files-and-images.rst
A docs/grok/advanced/index.rst
A docs/grok/advanced/permissions.rst
A docs/grok/advanced/references.rst
A docs/grok/advanced/rich-text-markup-transformations.rst
A docs/grok/advanced/static-resources.rst
A docs/grok/advanced/validators.rst
A docs/grok/advanced/vocabularies.rst
A docs/grok/advanced/webdav-and-other-file-representations.rst
A docs/grok/advanced/workflow.rst
A docs/grok/behaviors/behavior-basics.rst
A docs/grok/behaviors/creating-and-registering-behaviors.rst
A docs/grok/behaviors/index.rst
A docs/grok/behaviors/intro.rst
A docs/grok/behaviors/providing-marker-interfaces.rst
A docs/grok/behaviors/schema-only-behaviors.rst
A docs/grok/behaviors/testing-behaviors.rst
A docs/grok/custom-views.rst
A docs/grok/designing.rst
A docs/grok/index.rst
A docs/grok/install.rst
A docs/grok/intro.rst
A docs/grok/model-driven-types.rst
A docs/grok/prerequisite.rst
A docs/grok/reference/dexterity-xml.rst
A docs/grok/reference/fields.rst
A docs/grok/reference/form-schema-hints.rst
A docs/grok/reference/index.rst
A docs/grok/reference/manipulating-content-objects.rst
A docs/grok/reference/misc.rst
A docs/grok/reference/standard-behaviours.rst
A docs/grok/reference/value-and-validator-adaptors.rst
A docs/grok/reference/widgets.rst
A docs/grok/schema-driven-types.rst
A docs/grok/testing/index.rst
A docs/grok/testing/integration-tests.rst
A docs/grok/testing/mock-testing.rst
A docs/grok/testing/unit-tests.rst
A plone/app/dexterity/behaviors/id.py
A plone/app/dexterity/behaviors/tests/test_id.py
A plone/app/dexterity/browser/default_page_warning.pt
A plone/app/dexterity/browser/types_listing.js
A plone/app/dexterity/factories.py
A plone/app/dexterity/permissions.py
A plone/app/dexterity/profiles/testing/metadata.xml
A plone/app/dexterity/profiles/testing/types.xml
A plone/app/dexterity/profiles/testing/types/Document.xml
A plone/app/dexterity/profiles/testing/types/Folder.xml
A plone/app/dexterity/tests/robot/test_types.robot
A plone/app/dexterity/tests/test_permissions.py
A plone/app/dexterity/tests/test_robot.py
A plone/app/dexterity/upgrades/to2004.py
M .gitignore
M README.rst
M docs/LICENSE.txt
M docs/advanced/behaviours.rst
M docs/advanced/catalog-indexing-strategies.rst
M docs/advanced/custom-add-and-edit-forms.rst
M docs/advanced/defaults.rst
M docs/advanced/event-handlers.rst
M docs/advanced/files-and-images.rst
M docs/advanced/permissions.rst
M docs/advanced/references.rst
M docs/advanced/rich-text-markup-transformations.rst
M docs/advanced/static-resources.rst
M docs/advanced/validators.rst
M docs/advanced/vocabularies.rst
M docs/advanced/webdav-and-other-file-representations.rst
M docs/advanced/workflow.rst
M docs/behaviors/behavior-basics.rst
M docs/behaviors/creating-and-registering-behaviors.rst
M docs/behaviors/intro.rst
M docs/behaviors/providing-marker-interfaces.rst
M docs/behaviors/schema-only-behaviors.rst
M docs/behaviors/testing-behaviors.rst
M docs/custom-views.rst
M docs/designing.rst
M docs/index.rst
M docs/install.rst
M docs/model-driven-types.rst
M docs/prerequisite.rst
M docs/reference/dexterity-xml.rst
M docs/reference/fields.rst
M docs/reference/form-schema-hints.rst
M docs/reference/index.rst
M docs/reference/manipulating-content-objects.rst
M docs/reference/misc.rst
M docs/reference/standard-behaviours.rst
M docs/reference/widgets.rst
M docs/schema-driven-types.rst
M docs/testing/integration-tests.rst
M docs/testing/mock-testing.rst
M docs/testing/unit-tests.rst
M plone/app/dexterity/behaviors/configure.zcml
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/browser/behaviors.pt
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/container.pt
M plone/app/dexterity/browser/modeleditor.pt
M plone/app/dexterity/browser/overview.pt
M plone/app/dexterity/browser/tabbed_forms.pt
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/browser/types_listing.pt
M plone/app/dexterity/configure.zcml
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/locales/ca/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/cs/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/da/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/de/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/es/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/eu/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/fr/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/it/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/ja/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/nl/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/plone.app.dexterity.pot
M plone/app/dexterity/locales/pt/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/pt_BR/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/uk/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/zh_CN/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/locales/zh_TW/LC_MESSAGES/plone.app.dexterity.po
M plone/app/dexterity/meta.zcml
M plone/app/dexterity/profiles/default/metadata.xml
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/discussion.txt
M plone/app/dexterity/tests/editing.txt
M plone/app/dexterity/tests/filename.txt
M plone/app/dexterity/tests/metadata.txt
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_nextprevious.py
M plone/app/dexterity/upgrades/configure.zcml
M setup.py
D RELEASE_NOTES.txt
D docs/HISTORY.txt
D docs/reference/value-and-validator-adaptors.rst
D plone/app/dexterity/tests/base.py
D plone/app/dexterity/tests/layer.py

diff --git a/.gitignore b/.gitignore
index 206bfb5..223fd6c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,6 +11,7 @@
 .coverage
 /*.egg-info
 /.installed.cfg
+*~
 *.pyc
 /.Python
 /include
@@ -20,8 +21,25 @@
 /.mr.developer.cfg
 /src/plone*
 /src/collective*
+*.pyo
+*.tmp*
 *.mo
 docs/Makefile
 docs/make.bat
 docs/doctrees
 docs/html
+*.egg
+*.EGG
+*.EGG-INFO
+*.kpf
+*.swp
+*.wpr
+.*.cfg
+.hg/
+.bzr/
+.svn/
+
+
+
+# OSX
+.DS_Store
diff --git a/.tx/config b/.tx/config
new file mode 100644
index 0000000..e87b8d0
--- /dev/null
+++ b/.tx/config
@@ -0,0 +1,10 @@
+[main]
+host = https://www.transifex.com
+type = PO
+
+[plone.ploneappdexterity]
+file_filter = plone/app/dexterity/locales/<lang>/LC_MESSAGES/plone.app.dexterity.po
+source_file = plone/app/dexterity/locales/plone.app.dexterity.pot
+source_lang = en
+type = PO
+
diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..6254a47
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,578 @@
+Changelog
+=========
+
+2.1.3 (unreleased)
+------------------
+
+- Update markup and javascript for Plone 5.
+  [davisagli]
+
+- Fix the IDexterityContainer view to make use of plone.app.contenttype's new
+  listing view. Accessing it's macro needs the macro-caller's view variable set
+  to the new listing view.
+  [thet]
+
+
+2.1.2 (2014-10-23)
+------------------
+
+- Added transifex-client configuration for manage the translations
+  from Plone transifex organization [macagua].
+
+- Updated Spanish translation [flamelcanto, macagua].
+
+- Add validator to ensure expires date is after effective date.
+  [benniboy]
+  
+- Remove line feeds and carrige returns from meta description and
+  added upgrade step to do it for existing content
+  [bosim]
+
+- Fixed issue.
+  Multiple (two or more) acquisition from parent was failing when
+  user didn't have add permission on parent.
+  [keul, cekk]
+
+
+2.1.1 (2014-04-13)
+------------------
+
+- Add behavior to let an item's id be edited from its edit form
+  (plone.app.dexterity.behaviors.id.ShortName).
+  [davisagli]
+
+- Cloning of types containing white space did not work, this commit
+  fixes that bug.
+  [bosim]
+
+
+2.1.0 (2014-03-01)
+------------------
+
+- Don't throw an error if allowed_content_types is none or missing.
+  Fix https://github.com/plone/plone.app.contenttypes/issues/91
+  [pbauer]
+
+- PLIP #13705: Remove <base> tag.
+  [frapell]
+
+
+2.0.11 (2013-12-07)
+-------------------
+
+- Fix bug where the type editor's inline javascript was mangled by diazo.
+  [davisagli]
+
+- Fixed Add view URL of cloned content type.
+  Refs http://dev.plone.org/ticket/13776.
+  [thomasdesvenain]
+
+- Add robot testing environment and first robot test.
+  [cedricmessiant]
+
+- Better string normalization when setting type id from type title
+  (change accented or special characters with corresponding letters).
+  [cedricmessiant]
+
+- Show a warning when editing the default page of a folder.
+  [davisagli]
+
+
+
+2.0.10 (2013-09-16)
+-------------------
+
+- Fix determination of allowed types so it checks permission in
+  the context of the original folder when inheriting allowed
+  types.
+  [davisagli]
+
+
+2.0.9 (2013-08-13)
+------------------
+
+- Add documentation for defaultFactory tag in XML ref.
+  [smcmahon]
+
+- Removed line breaks within documentation URLs in modeleditor.py.
+  [smcmahon]
+
+- Fixed XML export so that GenericSetup's parser can successfully parse it
+  later on at install time.
+  [zupo]
+
+- Use @@ploneform-render-widget to render widgets in display mode.
+  [cedricmessiant]
+
+- Call the IBasic description field 'Summary' and give it
+  help text that is actually helpful.
+  [davisagli]
+
+- Don't show the 'Allow Discussion' field on an item's default view.
+  [davisagli]
+
+
+2.0.8 (2013-05-23)
+------------------
+
+- Add XML Model Editor based on plone.resourceditor. If plone.resourceditor
+  is available, this is exposed by an "Edit XML Field Model" button on
+  the fields tab of a content type -- if the content type is editable TTW.
+  [smcmahon]
+
+- Added catalan translations [sneridagh]
+
+
+2.0.7 (2013-04-09)
+------------------
+
+- Fix bug in determining whether to show the allowed contained type
+  fields.
+  [ericof]
+
+- Let the behavior INameFromFileName also set the title from the filename
+  if the type has such a field and it is left empty.
+  [pbauer]
+
+- Updated french translations.
+  [thomasdesvenain]
+
+
+2.0.6 (2013-04-06)
+------------------
+
+- Add missing translation strings.
+  [vincentfretin]
+
+
+2.0.5 (2013-04-06)
+------------------
+
+- Updated pt_BR translation [ericof]
+
+
+2.0.4 (2013-03-05)
+------------------
+
+- Add zh_TW translation [TsungWei Hu]
+
+- Add support for constraining container allowed content types using
+  the "Restrictions" form in the add menu.  Merged from Patrick
+  Gerken's (@do3cc) work in plone.app.contenttypes.
+  [rpatterson]
+
+- When a new type is added, redirect to the fields tab as the next view.
+  [davisagli]
+
+- Don't show the short name as a field on the type overview page.
+  [davisagli]
+
+- Remove the 'Container' checkbox when adding a new type, and default
+  to creating a container.
+  [davisagli]
+
+- Tweaks to type control panel based on user testing.
+  [davisagli]
+
+- Set default language for a new content item based on the language of
+  its container.
+  [frapell]
+
+- Fixed i18n of "Contents" in folder default view.
+  [vincentfretin]
+
+- Added Ukrainian translations
+  [kroman0]
+
+
+2.0.3 (2013-01-17)
+------------------
+
+- Nothing changed yet.
+
+
+2.0.2 (2013-01-01)
+------------------
+
+- Added French translations
+  [cedricmessiant]
+
+- The behavior controlpanel now correctly invalidates any modified FTIs.
+  [malthe]
+
+- I18n improved by adding many missing strings
+  [giacomos]
+
+- better graphical integration in the control panel
+  [giacomos]
+
+- Allow discussion behavior added.
+  [timo]
+
+
+2.0.1 (2012-08-31)
+------------------
+
+- Update MANIFEST.in to correct packaging error.
+  [esteele]
+
+
+2.0 (2012-08-30)
+----------------
+
+- DC metadata fields are now correctly encoded and decoded (from byte
+  strings to unicode and vice versa). Currently, UTF-8 is assumed.
+  [malthe]
+
+- Use lxml instead of elementtree.
+  [davisagli]
+
+- Use ViewPageTemplateFile from zope.browserpage.
+  [hannosch]
+
+- Add upgrade step to make sure that only uninstalling plone.app.intid will
+  remove the intids utility.
+  [davisagli]
+
+- Fix traversal over the types context so that skin items used by widgets
+  can be acquired.
+  [davisagli]
+
+- Provide an ``additionalSchemata`` property on the schema context so the
+  schema editor can include a preview of fields from behaviors.
+  [davisagli]
+
+- Give a more explicit warning before deleting content types that have existing
+  instances.
+  [davisagli]
+
+- Add validation to prevent giving a type the same name as an existing type.
+  [davisagli]
+
+- Make sure the title and description of new FTIs are stored encoded,
+  and with a default i18n domain of 'plone'.
+  [davisagli]
+
+- Add overview tab for each type in the control panel.
+  [davisagli]
+
+- Added Sphinx source for the Dexterity Developer manual.
+  [giacomos]
+
+- Added Italian translation.
+  [giacomos]
+
+- Internationalized content type settings pages,
+  I18N fixes,
+  messages extraction,
+  French translations.
+  [thomasdesvenain]
+
+- Added Spanish translation.
+  [hvelarde]
+
+- Install the profile from collective.z3cform.datetimewidget to enable the
+  Jquery Tools date picker for date/time fields.
+  [davisagli]
+
+- Bugfix: Make sure type short names are validated.
+  [davisagli]
+
+- Bugfix: Fix display of type descriptions in the types control panel.
+  [davisagli]
+
+- Bugfix: Make sure subject can still be retrieved as unicode for the
+  categorization behavior now that the Subject accessor returns a bytestring.
+  [davisagli]
+
+- Add intro message to Dexterity control panel.
+  [jonstahl, davisagli]
+
+- Grok support is now an optional "grok" extra. Use this if you want
+  ``five.grok``, ``plone.directives.form``, and ``plone.directives.dexterity``.
+  See the release notes for more information. The behaviors in this package
+  were updated to work without using grok.
+  [davisagli]
+
+- plone.formwidget.autocomplete and plone.formwidget.contenttree are no longer
+  included by default. See the release notes for more information.
+  [davisagli]
+
+- Moved the 'Related Items' behavior to plone.app.relationfield.
+  plone.app.relationfield is no longer installed as a dependency. See the
+  release notes for more information including how to update your package if it
+  depends on relation support or the 'Related Items' behavior.
+  IMPORTANT: You must install plone.app.relationfield on sites that are being
+  upgraded from Dexterity 1.0 to Dexterity 2.0, or the site will break.
+  [davisagli]
+
+- Converted tests to plone.app.testing-based setup. The old PloneTestCase-based
+  test case classes and layer are now deprecated.
+  [davisagli]
+
+- Remove ++resource++plone.app.dexterity.overlays.css from the CSS registry.
+  [davisagli]
+
+- Removed support for Plone 3 / CMF 2.1 / Zope 2.10.
+  [davisagli]
+
+- Update dependencies and imports as appropriate for Zope 2.12 & Zope 2.13
+  [davisagli]
+
+- Remove CDATA section from "browser\types_listing.pt" (in HTML5: allowed only in SVG/MathML namespaces).
+  [kleist]
+
+1.0 - 2011-05-20
+----------------
+
+- Fix publishing dates DateTime/datetime conversions so as not to drift by the
+  timezone delta every save.
+  [elro]
+
+- Make sure cloned types get a new factory.
+  [davisagli]
+
+- Don't override overlay CSS in Plone 4.
+  [davisagli]
+
+- Fixed cloning of types with a period (.) in their short name.
+  [davisagli]
+
+- Allow specifying a type's short name when adding a type.
+  [davisagli]
+
+- Make sure the Basic metadata adapter accesses the content's title attribute
+  directly so it doesn't get encoded. Also make sure encoded data can't be set
+  via this adapter.
+  [davisagli]
+
+1.0rc1 - 2011-04-30
+-------------------
+
+- Added upgrade step to install new javascript from
+  plone.formwidget.autocomplete
+  [davisagli]
+
+- Added basic support for making TTW changes to schemas defined in filesystem
+  models and code. (Note: This feature will not actually work until some further
+  changes are completed in plone.dexterity.)
+
+  In order to support this change, the event handling to serialize schema changes
+  was revised. We now register a single event handler for the SchemaModifiedEvent
+  raised for the schema context. This allows us to keep track of the FTI
+  that changes need to be serialized to on the schema context. The
+  serializeSchemaOnFieldEvent and serializeSchemaOnSchemaEvent handlers were
+  removed from the serialize module and replaced by serializeSchemaContext. The
+  serializeSchema helper remains but is deprecated.
+  [davisagli]
+
+- Add MANIFEST.in.
+  [WouterVH]
+
+- Add "export" button to types editor. Exports GS-style zip archive of type
+  info for selected types.
+  [stevem]
+
+- Fix old jquery alias in types_listing.pt. This closes
+  http://code.google.com/p/dexterity/issues/detail?id=159
+  [davisagli]
+
+- Make display templates fill content-core on Plone 4.
+  [elro]
+
+- Add ids to the group fieldsets on display forms.
+  [elro]
+
+- Exclude from navigation behavior should be restricted to IDexterityContent.
+  [elro]
+
+
+1.0b4 - 2011-03-15
+------------------
+
+- Add a "Name from file name" behavior.
+  [elro]
+
+- Remove the NameFromTitle behavior factory, it is not necessary.
+  [elro]
+
+- Add "Next previous navigation" and "Next previous navigation toggle"
+  behaviors.
+  [elro]
+
+- Add an "Exclude from navigation" behavior.
+  [lentinj]
+
+- Put the folder listing within a fieldset.
+  [lentinj]
+
+
+1.0b3 - 2011-02-11
+------------------
+
+- Add a navigation root behavior.
+  [elro]
+
+- Fix decoding error when an encoded description is stored in the FTI.
+  [davisagli]
+
+- Avoid empty <div class="field"> tag for title and description in
+  item.pt and container.pt.
+  [gaudenzius]
+
+- Add locales structure for translations with cs , de, es, eu, fr, ja, nl, pt_BR
+  [toutpt]
+
+- Update french translation
+  [toutpt]
+
+
+1.0b2 - 2010-08-05
+------------------
+
+- Fix several XML errors in templates. Needed for Chameleon compatibility.
+  [wichert]
+
+- cloning a type through the dexterity UI in the control panel did not work
+  if the type had a hyphen in it's name. This fixes
+  http://code.google.com/p/dexterity/issues/detail?id=126
+  [vangheem]
+
+
+1.0b1 - 2010-04-20
+------------------
+
+- Require plone.app.jquerytools for the schema editor UI, and make sure it is
+  installed when upgrading.
+  [davisagli]
+
+- Remove unused schemaeditor.css.
+  [davisagli]
+
+- Omit the metadata fields except on edit and add forms.
+  [davisagli]
+
+- Enable the "Name from title" behavior for new types, by default.
+  [davisagli]
+
+- Include plone.formwidget.namedfile so that File upload and Image fields are
+  available out of the box.  You must explicitly include z3c.blobfile in your
+  environment if you want blob-based files.
+  [davisagli]
+
+- Added a DexterityLayer that can be used in tests.
+  [davisagli]
+
+- Fix issue with the BehaviorsForm accidentally polluting the title of the
+  z3c.form EditForm 'Apply' button.
+  [davisagli]
+
+- Add upgrades folder and make sure plone.app.z3cform profile gets installed
+  on upgrades from previous versions of Dexterity.
+  [davisagli]
+
+- Depend on the plone.app.z3cform profile, to make sure the Plone browser layer
+  for z3c.form gets installed.
+  [davisagli]
+
+- Avoid relying on acquisition to get the portal_url for links in the type
+  listing table.
+  [davisagli]
+
+
+1.0a7 - 2010-01-08
+------------------
+
+- Make sure the Dublin Core fieldsets appear in the same order as they
+  do in AT content.
+  [davisagli]
+
+- Make sure the current user is loaded as the default creator for the
+  IOwnership schema in an add form.
+  [davisagli]
+
+- Include behavior descriptions on the behavior edit tab.
+  [davisagli]
+
+- IBasic behavior: set missing_value of description-field to u'' . The
+  description should never be None (live_search would not work any more).
+  [jbaumann]
+
+- Fix issue where traversing to a nonexistent type name in the types control
+  panel did not raise NotFound.
+  [davisagli]
+
+- Make it possible to view the fields of non-editable schemata.
+  [davisagli]
+
+- Tweaks to the tabbed_forms template used for the types control panel.
+  [davisagli]
+
+
+1.0a6 - 2009-10-12
+------------------
+
+- Add plone.app.textfield as a dependency. We don't use it directly in this
+  package, but users of Dexterity should have it installed and available.
+  [optilude]
+
+- Use some default icons for new types.
+  [davisagli]
+
+- Show type icons in type listing if available.
+  [davisagli]
+
+- Removed 'container' field from the types listing in the control panel
+  (it wasn't working).
+  [davisagli]
+
+- Add message factories to titles and descriptions of metadata schema fields.
+  Fixes http://code.google.com/p/dexterity/issues/detail?id=75.
+  [optilude]
+
+- Patch listActionInfos() instead of listActions() in order to get the
+  folder/add category into the actions list. This avoids a problem with
+  the 'actions.xml' export handler exporting the folder/add category
+  incorrectly. Fixes http://code.google.com/p/dexterity/issues/detail?id=78
+  [optilude]
+
+
+1.0a5 - 2009-07-26
+------------------
+
+- Explicitly include overrides.zcml from plone.app.z3cform.
+  [optilude]
+
+
+1.0a4 - 2009-07-12
+------------------
+
+- Changed API methods and arguments to mixedCase to be more consistent with
+  the rest of Zope. This is a non-backwards-compatible change. Our profuse
+  apologies, but it's now or never. :-/
+
+  If you find that you get import errors or unknown keyword arguments in your
+  code, please change names from foo_bar too fooBar, e.g. serialize_schema()
+  becomes serializeSchema().
+  [optilude]
+
+
+1.0a3 - 2009-06-07
+------------------
+
+- Updated use of <plone:behavior /> directive to match plone.behavior 1.0b4.
+  [optilude]
+
+
+1.0a2 - 2009-06-01
+------------------
+
+- Remove superfluous <includeOverrides /> in configure.zcml which would cause
+  a problem when the package is loaded via z3c.autoinclude.plugin
+  [optilude]
+
+
+1.0a1 - 2009-05-27
+--------------------
+
+- Initial release
diff --git a/README.rst b/README.rst
index 2ef998b..cf2c0b8 100644
--- a/README.rst
+++ b/README.rst
@@ -35,42 +35,42 @@ Reuse over reinvention
 
 Small over big
   Mega-frameworks be damned. Dexterity consists of a number of specialised
-  packages, each of which is independently tested and reusable. Furthermore, 
+  packages, each of which is independently tested and reusable. Furthermore,
   packages should have as few dependencies as possible, and should declare their
-  dependencies explicitly. This helps keep the design clean and the code 
+  dependencies explicitly. This helps keep the design clean and the code
   manageable.
 
 Natural interaction over excessive generality
-  The Dexterity design was driven by several use cases that express the way in 
-  which we want people to work with Dexterity. The end goal is to make it easy 
-  to get started, but also easy to progress from an initial prototype to a 
-  complex set of types and associated behaviours through step-wise learning and 
-  natural interaction patterns. Dexterity aims to consider its users - be they 
-  business analysts, light integrators or Python developers, and be they new or 
-  experienced - and cater to them explicitly with obvious, well-documented, 
+  The Dexterity design was driven by several use cases that express the way in
+  which we want people to work with Dexterity. The end goal is to make it easy
+  to get started, but also easy to progress from an initial prototype to a
+  complex set of types and associated behaviours through step-wise learning and
+  natural interaction patterns. Dexterity aims to consider its users - be they
+  business analysts, light integrators or Python developers, and be they new or
+  experienced - and cater to them explicitly with obvious, well-documented,
   natural interaction patterns.
 
 Real code over generated code
-  Generated code is difficult to understand and difficult to debug when it 
-  doesn't work as expected. There is rarely, if ever, any reason to scribble 
+  Generated code is difficult to understand and difficult to debug when it
+  doesn't work as expected. There is rarely, if ever, any reason to scribble
   methods or 'exec' strings of Python code.
 
 Zope 3 over Zope 2
-  Although Dexterity does not pretend to work with non-CMF systems, as many 
-  components as possible should work with plain Zope 3, and even where there are 
-  dependencies on Zope 2, CMF or Plone, they should - as far as is practical - 
-  follow Zope 3 techniques and best practices. Many operations (e.g. managing 
-  objects in a folder, creating new objects or manipulating objects through a 
+  Although Dexterity does not pretend to work with non-CMF systems, as many
+  components as possible should work with plain Zope 3, and even where there are
+  dependencies on Zope 2, CMF or Plone, they should - as far as is practical -
+  follow Zope 3 techniques and best practices. Many operations (e.g. managing
+  objects in a folder, creating new objects or manipulating objects through a
   defined schema) are better designed in Zope 3 than they were in Zope 2.
 
 Zope concepts over new paradigms
-  We want Dexterity to be "Zope-ish". Zope is a mature, well-designed (well, 
-  mostly) and battle tested platform. We do not want to invent brand new 
+  We want Dexterity to be "Zope-ish". Zope is a mature, well-designed (well,
+  mostly) and battle tested platform. We do not want to invent brand new
   paradigms and techniques if we can help it.
 
 Automated testing over wishful thinking
-  "Everything" should be covered by automated tests. Dexterity necessarily has a 
-  lot of moving parts. Untested moving parts tend to come loose and fall on 
+  "Everything" should be covered by automated tests. Dexterity necessarily has a
+  lot of moving parts. Untested moving parts tend to come loose and fall on
   people's heads. Nobody likes that.
 
 Getting started
@@ -78,7 +78,7 @@ Getting started
 
 Please read the `installation guide`_ to get Dexterity up and running.
 
-.. _`installation guide`: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/install.html
+.. _`installation guide`: http://docs.plone.org/external/plone.app.dexterity/docs/install.html
 
 Then log in to Plone, go to Site Setup, and go to the ``Dexterity Types``
 control panel to get started creating content types through the web.
@@ -108,8 +108,8 @@ Various documentation is available:
 * `Dexterity Developer Manual`_
 * `How to create reusable behaviors for Dexterity types`_
 
-.. _`Dexterity Developer Manual`: http://developer.plone.org/reference_manuals/external/plone.app.dexterity
-.. _`How to create reusable behaviors for Dexterity types`: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/behaviors
+.. _`Dexterity Developer Manual`: http://docs.plone.org/external/plone.app.dexterity/docs/index.html
+.. _`How to create reusable behaviors for Dexterity types`: http://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html
 
 The following documents are not Dexterity-specific, but will likely be useful
 to users of Dexterity:
@@ -117,8 +117,8 @@ to users of Dexterity:
 * `Schema-driven forms manual`_
 * `five.grok manual`_
 
-.. _`Schema-driven forms manual`: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/schema-driven-forms
-.. _`five.grok manual`: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/five-grok
+.. _`Schema-driven forms manual`: http://docs.plone.org/develop/addons/schema-driven-forms/index.html
+.. _`five.grok manual`: http://docs.plone.org/develop/addons/five-grok/index.html
 
 
 Mailing list
diff --git a/RELEASE_NOTES.rst b/RELEASE_NOTES.rst
new file mode 100644
index 0000000..bc13900
--- /dev/null
+++ b/RELEASE_NOTES.rst
@@ -0,0 +1,105 @@
+Release Notes
+=============
+
+Dexterity 2.0 is a major release of Dexterity. It has focused on getting
+Dexterity included in Plone core, by cleaning things up and making
+dependencies that are not ready for primetime optional.
+
+Grok-style configuration no longer included by default
+------------------------------------------------------
+
+Dexterity 1.0 included ``five.grok`` to allow configuring components via
+Python directives rather than in separate XML-based ZCML files.  It also
+included two packages, ``plone.directives.form`` and
+``plone.directives.dexterity``, to provide some grok-style directives for
+Dexterity-specific features.
+
+The Dexterity authors still like grok and believe it makes it easier to learn
+how to customize Plone.  However, it has been turned into an optional feature
+so that Dexterity has a chance to enter Plone core even if the Plone framework
+team doesn't want to add grok to the already complex stack.
+
+To include these three grok-related packages when you install Dexterity,
+enable the "grok" extra::
+
+  [instance]
+  eggs =
+      plone.app.dexterity [grok]
+
+By the way, a number of schema directives from ``plone.directives.form`` that
+used to require grok to work have been reimplemented so that they work without
+grok. In particular, the ``Schema`` class and the ``model``, ``fieldset``,
+and ``primary`` directives were moved to ``plone.supermodel.model``. The
+``omitted``, ``no_omit``, ``mode``, ``widget``, ``order_before``,
+``order_after``, ``read_permission``, and ``write_permission`` directives were
+moved to ``plone.autoform.directives``.  There are aliases in the old locations
+so you don't need to update existing code, but you can switch to the new
+locations if you're trying to avoid depending on grok.
+
+Relation support no longer included by default
+----------------------------------------------
+
+Dexterity 1.0 included support for object relations based on the zc.relation
+catalog and plone.app.relationfield, as well as a behavior
+(``plone.app.dexterity.behaviors.related.IRelatedItems``) providing a
+generic list of related items based on that implementation.
+
+Since this feature was added to Dexterity, we discovered that it will be hard
+to support this type of relation well in Zope 2 until Zope 2 is setting
+__parent__ pointers everywhere. In addition, we encountered some problems with
+using interfaces as keys in the zc.relation catalog. And Dexterity gained
+support for the Archetypes reference engine in
+``plone.app.referenceablebehavior``. As a result of these factors, the
+zc.relation approach to object relationships will not be included in Dexterity or Plone core for the time being.
+
+VERY IMPORTANT: If you are upgrading a site with Dexterity 1.0 to Dexterity
+2.0, it will break unless you install plone.app.relationfield, since your
+database contains persistent intid and relations utilities. The easiest way
+to include plone.app.relationfield is to install plone.app.dexterity with
+the "relations" extra::
+
+  [instance]
+  eggs =
+      plone.app.dexterity [relations]
+
+Using relations via plone.app.relationfield
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+If you were relying on the support for relations, you can re-enable support
+by installing the ``plone.app.relationfield`` package. You need to add it to
+your package's install_requires in setup.py::
+
+  install_requires=[
+      'plone.app.relationfield',
+      ]
+
+Make sure your package is including its ZCML in configure.zcml::
+
+  <include package="plone.app.relationfield" />
+
+And install its GenericSetup profile as a dependency in your package's metadata.xml::
+
+  <dependencies>
+    <dependency>profile-plone.app.relationfield:default</dependency>
+  </dependencies>
+
+If you have any content types using the IRelatedItems behavior, you should
+update them to import the behavior from the new location::
+
+  <property name="behaviors">
+      <element value="plone.app.relationfield.behavior.IRelatedItems" />
+  </property>
+
+Content tree and Autocomplete widgets no longer included by default
+-------------------------------------------------------------------
+
+In Dexterity 1.0, the widgets in ``plone.formwidget.autocomplete`` and
+``plone.formwidget.contenttree`` were installed as dependencies of
+``plone.app.dexterity``. In Dexterity 2.0 they are no longer installed
+by default, because they are not used by any of the included behaviors
+or made available via the through-the-web content type editor at this
+time.
+
+If you use these widgets, make sure your package lists them as
+dependencies in setup.py, loads their ZCML in configure.zcml, and
+activates their GenericSetup profiles as dependencies in metadata.xml.
diff --git a/RELEASE_NOTES.txt b/RELEASE_NOTES.txt
deleted file mode 100644
index bc13900..0000000
--- a/RELEASE_NOTES.txt
+++ /dev/null
@@ -1,105 +0,0 @@
-Release Notes
-=============
-
-Dexterity 2.0 is a major release of Dexterity. It has focused on getting
-Dexterity included in Plone core, by cleaning things up and making
-dependencies that are not ready for primetime optional.
-
-Grok-style configuration no longer included by default
-------------------------------------------------------
-
-Dexterity 1.0 included ``five.grok`` to allow configuring components via
-Python directives rather than in separate XML-based ZCML files.  It also
-included two packages, ``plone.directives.form`` and
-``plone.directives.dexterity``, to provide some grok-style directives for
-Dexterity-specific features.
-
-The Dexterity authors still like grok and believe it makes it easier to learn
-how to customize Plone.  However, it has been turned into an optional feature
-so that Dexterity has a chance to enter Plone core even if the Plone framework
-team doesn't want to add grok to the already complex stack.
-
-To include these three grok-related packages when you install Dexterity,
-enable the "grok" extra::
-
-  [instance]
-  eggs =
-      plone.app.dexterity [grok]
-
-By the way, a number of schema directives from ``plone.directives.form`` that
-used to require grok to work have been reimplemented so that they work without
-grok. In particular, the ``Schema`` class and the ``model``, ``fieldset``,
-and ``primary`` directives were moved to ``plone.supermodel.model``. The
-``omitted``, ``no_omit``, ``mode``, ``widget``, ``order_before``,
-``order_after``, ``read_permission``, and ``write_permission`` directives were
-moved to ``plone.autoform.directives``.  There are aliases in the old locations
-so you don't need to update existing code, but you can switch to the new
-locations if you're trying to avoid depending on grok.
-
-Relation support no longer included by default
-----------------------------------------------
-
-Dexterity 1.0 included support for object relations based on the zc.relation
-catalog and plone.app.relationfield, as well as a behavior
-(``plone.app.dexterity.behaviors.related.IRelatedItems``) providing a
-generic list of related items based on that implementation.
-
-Since this feature was added to Dexterity, we discovered that it will be hard
-to support this type of relation well in Zope 2 until Zope 2 is setting
-__parent__ pointers everywhere. In addition, we encountered some problems with
-using interfaces as keys in the zc.relation catalog. And Dexterity gained
-support for the Archetypes reference engine in
-``plone.app.referenceablebehavior``. As a result of these factors, the
-zc.relation approach to object relationships will not be included in Dexterity or Plone core for the time being.
-
-VERY IMPORTANT: If you are upgrading a site with Dexterity 1.0 to Dexterity
-2.0, it will break unless you install plone.app.relationfield, since your
-database contains persistent intid and relations utilities. The easiest way
-to include plone.app.relationfield is to install plone.app.dexterity with
-the "relations" extra::
-
-  [instance]
-  eggs =
-      plone.app.dexterity [relations]
-
-Using relations via plone.app.relationfield
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-If you were relying on the support for relations, you can re-enable support
-by installing the ``plone.app.relationfield`` package. You need to add it to
-your package's install_requires in setup.py::
-
-  install_requires=[
-      'plone.app.relationfield',
-      ]
-
-Make sure your package is including its ZCML in configure.zcml::
-
-  <include package="plone.app.relationfield" />
-
-And install its GenericSetup profile as a dependency in your package's metadata.xml::
-
-  <dependencies>
-    <dependency>profile-plone.app.relationfield:default</dependency>
-  </dependencies>
-
-If you have any content types using the IRelatedItems behavior, you should
-update them to import the behavior from the new location::
-
-  <property name="behaviors">
-      <element value="plone.app.relationfield.behavior.IRelatedItems" />
-  </property>
-
-Content tree and Autocomplete widgets no longer included by default
--------------------------------------------------------------------
-
-In Dexterity 1.0, the widgets in ``plone.formwidget.autocomplete`` and
-``plone.formwidget.contenttree`` were installed as dependencies of
-``plone.app.dexterity``. In Dexterity 2.0 they are no longer installed
-by default, because they are not used by any of the included behaviors
-or made available via the through-the-web content type editor at this
-time.
-
-If you use these widgets, make sure your package lists them as
-dependencies in setup.py, loads their ZCML in configure.zcml, and
-activates their GenericSetup profiles as dependencies in metadata.xml.
diff --git a/docs/HISTORY.txt b/docs/HISTORY.txt
deleted file mode 100644
index 4fb9761..0000000
--- a/docs/HISTORY.txt
+++ /dev/null
@@ -1,491 +0,0 @@
-Changelog for plone.app.dexterity
-=================================
-
-2.0.9 (unreleased)
-------------------
-
-- Add documentation for defaultFactory tag in XML ref.
-  [smcmahon]
-
-- Removed line breaks within documentation URLs in modeleditor.py.
-  [smcmahon]
-
-- Fixed XML export so that GenericSetup's parser can successfully parse it
-  later on at install time.
-  [zupo]
-
-- Use @@ploneform-render-widget to render widgets in display mode.
-  [cedricmessiant]
-
-- Call the IBasic description field 'Summary' and give it
-  help text that is actually helpful.
-  [davisagli]
-
-- Don't show the 'Allow Discussion' field on an item's default view.
-  [davisagli]
-
-
-2.0.8 (2013-05-23)
-------------------
-
-- Add XML Model Editor based on plone.resourceditor. If plone.resourceditor
-  is available, this is exposed by an "Edit XML Field Model" button on
-  the fields tab of a content type -- if the content type is editable TTW.
-  [smcmahon]
-
-- Added catalan translations [sneridagh]
-
-
-2.0.7 (2013-04-09)
-------------------
-
-- Fix bug in determining whether to show the allowed contained type
-  fields.
-  [ericof]
-
-- Let the behavior INameFromFileName also set the title from the filename
-  if the type has such a field and it is left empty.
-  [pbauer]
-
-- Updated french translations.
-  [thomasdesvenain]
-
-
-2.0.6 (2013-04-06)
-------------------
-
-- Add missing translation strings.
-  [vincentfretin]
-
-
-2.0.5 (2013-04-06)
-------------------
-
-- Updated pt_BR translation [ericof]
-
-
-2.0.4 (2013-03-05)
-------------------
-
-- Add zh_TW translation [TsungWei Hu]
-
-- Add support for constraining container allowed content types using
-  the "Restrictions" form in the add menu.  Merged from Patrick
-  Gerken's (@do3cc) work in plone.app.contenttypes.
-  [rpatterson]
-
-- When a new type is added, redirect to the fields tab as the next view.
-  [davisagli]
-
-- Don't show the short name as a field on the type overview page.
-  [davisagli]
-
-- Remove the 'Container' checkbox when adding a new type, and default
-  to creating a container.
-  [davisagli]
-
-- Tweaks to type control panel based on user testing.
-  [davisagli]
-
-- Set default language for a new content item based on the language of
-  its container.
-  [frapell]
-
-- Fixed i18n of "Contents" in folder default view.
-  [vincentfretin]
-
-- Added Ukrainian translations
-  [kroman0]
-
-
-2.0.3 (2013-01-17)
-------------------
-
-- Nothing changed yet.
-
-
-2.0.2 (2013-01-01)
-------------------
-
-- Added French translations
-  [cedricmessiant]
-
-- The behavior controlpanel now correctly invalidates any modified FTIs.
-  [malthe]
-
-- I18n improved by adding many missing strings
-  [giacomos]
-
-- better graphical integration in the control panel
-  [giacomos]
-
-- Allow discussion behavior added.
-  [timo]
-
-
-2.0.1 (2012-08-31)
-------------------
-
-- Update MANIFEST.in to correct packaging error.
-  [esteele]
-
-
-2.0 (2012-08-30)
-----------------
-
-- DC metadata fields are now correctly encoded and decoded (from byte
-  strings to unicode and vice versa). Currently, UTF-8 is assumed.
-  [malthe]
-
-- Use lxml instead of elementtree.
-  [davisagli]
-
-- Use ViewPageTemplateFile from zope.browserpage.
-  [hannosch]
-
-- Add upgrade step to make sure that only uninstalling plone.app.intid will
-  remove the intids utility.
-  [davisagli]
-
-- Fix traversal over the types context so that skin items used by widgets
-  can be acquired.
-  [davisagli]
-
-- Provide an ``additionalSchemata`` property on the schema context so the
-  schema editor can include a preview of fields from behaviors.
-  [davisagli]
-
-- Give a more explicit warning before deleting content types that have existing
-  instances.
-  [davisagli]
-
-- Add validation to prevent giving a type the same name as an existing type.
-  [davisagli]
-
-- Make sure the title and description of new FTIs are stored encoded,
-  and with a default i18n domain of 'plone'.
-  [davisagli]
-
-- Add overview tab for each type in the control panel.
-  [davisagli]
-
-- Added Sphinx source for the Dexterity Developer manual.
-  [giacomos]
-
-- Added Italian translation.
-  [giacomos]
-
-- Internationalized content type settings pages,
-  I18N fixes,
-  messages extraction,
-  French translations.
-  [thomasdesvenain]
-
-- Added Spanish translation.
-  [hvelarde]
-
-- Install the profile from collective.z3cform.datetimewidget to enable the
-  Jquery Tools date picker for date/time fields.
-  [davisagli]
-
-- Bugfix: Make sure type short names are validated.
-  [davisagli]
-
-- Bugfix: Fix display of type descriptions in the types control panel.
-  [davisagli]
-
-- Bugfix: Make sure subject can still be retrieved as unicode for the
-  categorization behavior now that the Subject accessor returns a bytestring.
-  [davisagli]
-
-- Add intro message to Dexterity control panel.
-  [jonstahl, davisagli]
-
-- Grok support is now an optional "grok" extra. Use this if you want
-  ``five.grok``, ``plone.directives.form``, and ``plone.directives.dexterity``.
-  See the release notes for more information. The behaviors in this package
-  were updated to work without using grok.
-  [davisagli]
-
-- plone.formwidget.autocomplete and plone.formwidget.contenttree are no longer
-  included by default. See the release notes for more information.
-  [davisagli]
-
-- Moved the 'Related Items' behavior to plone.app.relationfield.
-  plone.app.relationfield is no longer installed as a dependency. See the
-  release notes for more information including how to update your package if it
-  depends on relation support or the 'Related Items' behavior.
-  IMPORTANT: You must install plone.app.relationfield on sites that are being
-  upgraded from Dexterity 1.0 to Dexterity 2.0, or the site will break.
-  [davisagli]
-
-- Converted tests to plone.app.testing-based setup. The old PloneTestCase-based
-  test case classes and layer are now deprecated.
-  [davisagli]
-
-- Remove ++resource++plone.app.dexterity.overlays.css from the CSS registry.
-  [davisagli]
-
-- Removed support for Plone 3 / CMF 2.1 / Zope 2.10.
-  [davisagli]
-
-- Update dependencies and imports as appropriate for Zope 2.12 & Zope 2.13
-  [davisagli]
-
-- Remove CDATA section from "browser\types_listing.pt" (in HTML5: allowed only in SVG/MathML namespaces).
-  [kleist]
-
-1.0 - 2011-05-20
-----------------
-
-- Fix publishing dates DateTime/datetime conversions so as not to drift by the
-  timezone delta every save.
-  [elro]
-
-- Make sure cloned types get a new factory.
-  [davisagli]
-
-- Don't override overlay CSS in Plone 4.
-  [davisagli]
-
-- Fixed cloning of types with a period (.) in their short name.
-  [davisagli]
-
-- Allow specifying a type's short name when adding a type.
-  [davisagli]
-
-- Make sure the Basic metadata adapter accesses the content's title attribute
-  directly so it doesn't get encoded. Also make sure encoded data can't be set
-  via this adapter.
-  [davisagli]
-
-1.0rc1 - 2011-04-30
--------------------
-
-- Added upgrade step to install new javascript from
-  plone.formwidget.autocomplete
-  [davisagli]
-
-- Added basic support for making TTW changes to schemas defined in filesystem
-  models and code. (Note: This feature will not actually work until some further
-  changes are completed in plone.dexterity.)
-
-  In order to support this change, the event handling to serialize schema changes
-  was revised. We now register a single event handler for the SchemaModifiedEvent
-  raised for the schema context. This allows us to keep track of the FTI
-  that changes need to be serialized to on the schema context. The
-  serializeSchemaOnFieldEvent and serializeSchemaOnSchemaEvent handlers were
-  removed from the serialize module and replaced by serializeSchemaContext. The
-  serializeSchema helper remains but is deprecated.
-  [davisagli]
-
-- Add MANIFEST.in.
-  [WouterVH]
-
-- Add "export" button to types editor. Exports GS-style zip archive of type
-  info for selected types.
-  [stevem]
-
-- Fix old jquery alias in types_listing.pt. This closes
-  http://code.google.com/p/dexterity/issues/detail?id=159
-  [davisagli]
-
-- Make display templates fill content-core on Plone 4.
-  [elro]
-
-- Add ids to the group fieldsets on display forms.
-  [elro]
-
-- Exclude from navigation behavior should be restricted to IDexterityContent.
-  [elro]
-
-
-1.0b4 - 2011-03-15
-------------------
-
-- Add a "Name from file name" behavior.
-  [elro]
-
-- Remove the NameFromTitle behavior factory, it is not necessary.
-  [elro]
-
-- Add "Next previous navigation" and "Next previous navigation toggle"
-  behaviors.
-  [elro]
-
-- Add an "Exclude from navigation" behavior.
-  [lentinj]
-
-- Put the folder listing within a fieldset.
-  [lentinj]
-
-
-1.0b3 - 2011-02-11
-------------------
-
-- Add a navigation root behavior.
-  [elro]
-
-- Fix decoding error when an encoded description is stored in the FTI.
-  [davisagli]
-
-- Avoid empty <div class="field"> tag for title and description in
-  item.pt and container.pt.
-  [gaudenzius]
-
-- Add locales structure for translations with cs , de, es, eu, fr, ja, nl, pt_BR
-  [toutpt]
-
-- Update french translation
-  [toutpt]
-
-
-1.0b2 - 2010-08-05
-------------------
-
-- Fix several XML errors in templates. Needed for Chameleon compatibility.
-  [wichert]
-
-- cloning a type through the dexterity UI in the control panel did not work
-  if the type had a hyphen in it's name. This fixes
-  http://code.google.com/p/dexterity/issues/detail?id=126
-  [vangheem]
-
-
-1.0b1 - 2010-04-20
-------------------
-
-- Require plone.app.jquerytools for the schema editor UI, and make sure it is
-  installed when upgrading.
-  [davisagli]
-
-- Remove unused schemaeditor.css.
-  [davisagli]
-
-- Omit the metadata fields except on edit and add forms.
-  [davisagli]
-
-- Enable the "Name from title" behavior for new types, by default.
-  [davisagli]
-
-- Include plone.formwidget.namedfile so that File upload and Image fields are
-  available out of the box.  You must explicitly include z3c.blobfile in your
-  environment if you want blob-based files.
-  [davisagli]
-
-- Added a DexterityLayer that can be used in tests.
-  [davisagli]
-
-- Fix issue with the BehaviorsForm accidentally polluting the title of the
-  z3c.form EditForm 'Apply' button.
-  [davisagli]
-
-- Add upgrades folder and make sure plone.app.z3cform profile gets installed
-  on upgrades from previous versions of Dexterity.
-  [davisagli]
-
-- Depend on the plone.app.z3cform profile, to make sure the Plone browser layer
-  for z3c.form gets installed.
-  [davisagli]
-
-- Avoid relying on acquisition to get the portal_url for links in the type
-  listing table.
-  [davisagli]
-
-
-1.0a7 - 2010-01-08
-------------------
-
-- Make sure the Dublin Core fieldsets appear in the same order as they
-  do in AT content.
-  [davisagli]
-
-- Make sure the current user is loaded as the default creator for the
-  IOwnership schema in an add form.
-  [davisagli]
-
-- Include behavior descriptions on the behavior edit tab.
-  [davisagli]
-
-- IBasic behavior: set missing_value of description-field to u'' . The
-  description should never be None (live_search would not work any more).
-  [jbaumann]
-
-- Fix issue where traversing to a nonexistent type name in the types control
-  panel did not raise NotFound.
-  [davisagli]
-
-- Make it possible to view the fields of non-editable schemata.
-  [davisagli]
-
-- Tweaks to the tabbed_forms template used for the types control panel.
-  [davisagli]
-
-
-1.0a6 - 2009-10-12
-------------------
-
-- Add plone.app.textfield as a dependency. We don't use it directly in this
-  package, but users of Dexterity should have it installed and available.
-  [optilude]
-
-- Use some default icons for new types.
-  [davisagli]
-
-- Show type icons in type listing if available.
-  [davisagli]
-
-- Removed 'container' field from the types listing in the control panel
-  (it wasn't working).
-  [davisagli]
-
-- Add message factories to titles and descriptions of metadata schema fields.
-  Fixes http://code.google.com/p/dexterity/issues/detail?id=75.
-  [optilude]
-
-- Patch listActionInfos() instead of listActions() in order to get the
-  folder/add category into the actions list. This avoids a problem with
-  the 'actions.xml' export handler exporting the folder/add category
-  incorrectly. Fixes http://code.google.com/p/dexterity/issues/detail?id=78
-  [optilude]
-
-
-1.0a5 - 2009-07-26
-------------------
-
-- Explicitly include overrides.zcml from plone.app.z3cform.
-  [optilude]
-
-
-1.0a4 - 2009-07-12
-------------------
-
-- Changed API methods and arguments to mixedCase to be more consistent with
-  the rest of Zope. This is a non-backwards-compatible change. Our profuse
-  apologies, but it's now or never. :-/
-
-  If you find that you get import errors or unknown keyword arguments in your
-  code, please change names from foo_bar too fooBar, e.g. serialize_schema()
-  becomes serializeSchema().
-  [optilude]
-
-
-1.0a3 - 2009-06-07
-------------------
-
-- Updated use of <plone:behavior /> directive to match plone.behavior 1.0b4.
-  [optilude]
-
-
-1.0a2 - 2009-06-01
-------------------
-
-- Remove superfluous <includeOverrides /> in configure.zcml which would cause
-  a problem when the package is loaded via z3c.autoinclude.plugin
-  [optilude]
-
-
-1.0a1 - 2009-05-27
---------------------
-
-- Initial release
diff --git a/docs/LICENSE.txt b/docs/LICENSE.txt
index 8100c84..e3cd0ff 100644
--- a/docs/LICENSE.txt
+++ b/docs/LICENSE.txt
@@ -12,5 +12,5 @@
 
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
   MA 02111-1307 USA.
diff --git a/docs/advanced/behaviours.rst b/docs/advanced/behaviours.rst
index 48dc206..fbd4a1d 100644
--- a/docs/advanced/behaviours.rst
+++ b/docs/advanced/behaviours.rst
@@ -18,7 +18,7 @@ enabled.
 
 We will not cover writing new behaviors in this manual, but we will show
 how to enable behaviors on a type. Writing behaviors is covered in the
-`Behaviors manual <http://developer.plone.org/reference_manuals/external/plone.app.dexterity/behaviors/index.html>`_.
+`Behaviors manual <http://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html>`_.
 
 In fact, we’ve already seen one
 standard behavior applied to our example types, registered in the FTI
diff --git a/docs/advanced/catalog-indexing-strategies.rst b/docs/advanced/catalog-indexing-strategies.rst
index 74ef6b5..df1e499 100644
--- a/docs/advanced/catalog-indexing-strategies.rst
+++ b/docs/advanced/catalog-indexing-strategies.rst
@@ -1,62 +1,63 @@
-Catalog indexing strategies 
 ============================
+Catalog indexing strategies
+============================
+
+You may have two different interests in regard to indexing your custom content type objects:
+
+    * Making particular fields searchable via Plone's main search facility;
+
+    * Indexing particular fields for custom lookup.
+
+Making content searchable
+*************************
+
+Plone's main index is called *SearchableText*. This is the index which is searched when you use the main portal search. Fields in your custom content types are not necessarily added to SearchableText. Fields added via Dublin-core behaviors are automatically part of SearchableText; others are not.
+
+So, you may need to explicitly add fields to SearchableText if you wish their information to be findable via the main search. There are all sorts of highly customizable ways to do this, but the easiest is to use the `collective.dexteritytextindexer  <https://github.com/collective/collective.dexteritytextindexer>`_ add-on package.
+
+Add ``collective.dexteritytextindexer`` to your buildout and you will gain a new Dexterity behavior that will allow you to easily add fields to SearchableText. Once you turn on this behavior, you will then need to specify fields for addition to SearchableText.
+
+..Note::
+
+    Note that if you turn on the ``Dynamic SearchableText indexer behavior`` for a content type, then you must specify all fields that need SearchableText indexing. Dublin core fields like Title and Description are no longer automatically handled.
+
+Once you have turned on the indexer behavior, edit the XML field model to add ``indexer:searchable="true"`` to the ``field`` tag for each field you wish to add to the SearchableText index.
+
+See the `collective.dexteritytextindexer  <https://github.com/collective/collective.dexteritytextindexer>`_ package documentation for details and for information on how to use it via Python schema.
+
+
+Creating and using custom indexes
+*********************************
 
 **How to create custom catalog indexes**
 
-The ZODB is a hierarchical object store where objects of different
-schemata and sizes can live side by side.
-This is great for managing individual content items,
-but not optimal for searching across the content repository.
-A naive search would need to walk the entire object graph,
-loading each object into memory and comparing object metadata
-with search criteria.
+The ZODB is a hierarchical object store where objects of different schemata and sizes can live side by side.
+This is great for managing individual content items, but not optimal for searching across the content repository.
+A naive search would need to walk the entire object graph, loading each object into memory and comparing object metadata with search criteria.
 On a large site, this would quickly become prohibitive.
 
-Luckily, Zope comes with a technology called the *ZCatalog*,
-which is basically a table structure optimised for searching.
+Luckily, Zope comes with a technology called the *ZCatalog*, which is basically a table structure optimised for searching.
 In Plone, there’s a ZCatalog instance called ``portal_catalog``.
-Standard event handlers will index content in the catalog 
-when it is created or modified,
-and unindex when the content is removed.
-
-The catalog manages *indexes*, which can be searched,
-and *metadata* (also known as *columns*),
-which are object attributes for which the value is copied into the catalog.
-When we perform a search,
-the result is a lazily loaded list of objects known as *catalog brains*.
-Catalog brains contain the value of metadata columns (but not indexes) as
-attributes.
-The functions ``getURL()``, ``getPath()`` and ``getObject()`` can
-be used to get the URL and path of the indexed content item,
-and to load the full item into memory.
+Standard event handlers will index content in the catalog when it is created or modified, and unindex when the content is removed.
+
+The catalog manages *indexes*, which can be searched, and *metadata* (also known as *columns*), which are object attributes for which the value is copied into the catalog.
+When we perform a search, the result is a lazily loaded list of objects known as *catalog brains*.
+Catalog brains contain the value of metadata columns (but not indexes) as attributes.
+The functions ``getURL()``, ``getPath()`` and ``getObject()`` can be used to get the URL and path of the indexed content item, and to load the full item into memory.
 
 .. note::
 
     Dexterity objects are more lightweight than Archetypes objects.
-    This means that loading objects into memory is not quite as undesirable
-    as is sometimes assumed.
-    If you’re working with references, parent objects,
-    or a small number of child objects,
-    it is usually OK to load objects directly to work with them.
-    However, if you are working with a large or
-    unknown-but-potentially-large number of objects,
-    you should consider using catalog searches to find them and use catalog
-    metadata to store frequently used values.
-    There is an important trade-off to be made between limiting object
-    access and bloating the catalog with unneeded indexes and metadata,
-    though. 
-    In particular, large strings (such as the body text of a document) or
-    binary data (such as the contents of image or file fields)
-    should not be stored as catalog metadata.
+    This means that loading objects into memory is not quite as undesirable as is sometimes assumed.
+    If you’re working with references, parent objects, or a small number of child objects, it is usually OK to load objects directly to work with them.
+    However, if you are working with a large or unknown-but-potentially-large number of objects, you should consider using catalog searches to find them and use catalog metadata to store frequently used values.
+    There is an important trade-off to be made between limiting object access and bloating the catalog with unneeded indexes and metadata, though.
+    In particular, large strings (such as the body text of a document) or binary data (such as the contents of image or file fields) should not be stored as catalog metadata.
 
 Plone comes with a number of standard indexes and metadata columns.
-These correspond to much of the *Dublin Core* set of metadata as well as
-several Plone-specific attributes.
-You can view the indexes, columns and the contents of the catalog through
-the ZMI pages of the ``portal_catalog`` tool. 
-If you’ve never done this, it is probably instructive to have a look,
-both to understand how the indexes and columns may apply to your own content
-types, and to learn what searches are already possible.
+These correspond to much of the *Dublin Core* set of metadata as well as several Plone-specific attributes.
+You can view the indexes, columns and the contents of the catalog through the ZMI pages of the ``portal_catalog`` tool.
+If you’ve never done this, it is probably instructive to have a look, both to understand how the indexes and columns may apply to your own content types, and to learn what searches are already possible.
 
 Indexes come in various types. The most common ones are:
 
@@ -64,16 +65,12 @@ Indexes come in various types. The most common ones are:
     the most common type, used to index a single value.
 
 ``KeywordIndex``
-    used to index lists of values where you want to be able to search for a
-    subset of the values.
-    As the name implies, commonly used for keyword fields,
-    such as the ``Subject`` Dublin Core metadata field.
+    used to index lists of values where you want to be able to search for a subset of the values.
+    As the name implies, commonly used for keyword fields, such as the ``Subject`` Dublin Core metadata field.
 
 ``DateIndex``
     used to index Zope 2 ``DateTime`` objects.
-    Note that if your type uses a *Python* ``datetime`` object,
-    you’ll need to convert it to a Zope 2 ``DateTime`` using a custom
-    indexer!
+    Note that if your type uses a *Python* ``datetime`` object, you’ll need to convert it to a Zope 2 ``DateTime`` using a custom indexer!
 
 ``DateRangeIndex``
     used mainly for the effective date range.
@@ -87,29 +84,20 @@ Indexes come in various types. The most common ones are:
     This is used to search for content by path and optionally depth.
 
 Adding new indexes and metadata columns
----------------------------------------
+=======================================
 
-When an object is indexed, the catalog will by default attempt to find
-attributes and methods that match index and column names on the object.
-Methods will be called (with no arguments) in an attempt to get a value.
+When an object is indexed, the catalog will by default attempt to find attributes and methods that match index and column names on the object. Methods will be called (with no arguments) in an attempt to get a value.
 If a value is found, it is indexed.
 
 .. note::
 
-    Objects are normally acquisition-wrapped when they are indexed, which
-    means that an indexed value may be acquired from a parent.
-    This can be confusing, especially if you are building container types
-    and creating new indexes for them.
-    If child objects don’t have attributes/methods with names corresponding
-    to indexes,
-    the parent object’s value will be indexed for all children as well.
+    Objects are normally acquisition-wrapped when they are indexed, which means that an indexed value may be acquired from a parent.
+    This can be confusing, especially if you are building container types and creating new indexes for them.
+    If child objects don’t have attributes/methods with names corresponding to indexes, the parent object’s value will be indexed for all children as well.
 
-Catalog indexes and metadata can be installed with the ``catalog.xml``
-GenericSetup import step. It is useful to look at the one in Plone
-(``parts/omelette/Products/CMFPlone/profiles/default/catalog.xml``).
+Catalog indexes and metadata can be installed with the ``catalog.xml`` GenericSetup import step. It is useful to look at the one in Plone (``parts/omelette/Products/CMFPlone/profiles/default/catalog.xml``).
 
-As an example, let’s index the ``track`` property of a ``Session`` in the
-catalog, and add a metadata column for this property as well. In
+As an example, let’s index the ``track`` property of a ``Session`` in the catalog, and add a metadata column for this property as well. In
 ``profiles/default/catalog.xml``, we have:
 
 .. code-block:: xml
@@ -123,44 +111,30 @@ catalog, and add a metadata column for this property as well. In
     </object>
 
 Notice how we specify both the index name and the indexed attribute.
-It is possible to use an index name (the key you use when searching) that
-is different to the indexed attribute,
-although they are usually the same.
+It is possible to use an index name (the key you use when searching) that is different to the indexed attribute, although they are usually the same.
 The metadata column is just the name of an attribute.
 
 Creating custom indexers
-------------------------
+========================
 
 Indexing based on attributes can sometimes be limiting.
-First of all, the catalog is indiscriminate in that it attempts to index
-every attribute that’s listed against an index or metadata column for every
-object.
-Secondly, it is not always feasible to add a method or attribute to a class
-just to calculate an indexed value.
-
-Plone 3.3 and later ships with a package called `plone.indexer`_ to help
-make it easier to write custom indexers:
-components that are invoked to calculate the value which the catalog sees
-when it tries to index a given attribute.
-Indexers can be used to index a different value to the one stored on the
-object, or to allow indexing of a “virtual” attribute that does not actually
-exist on the object is question.
-Indexers are usually registered on a per-type basis,
-so you can have different implementations for different types of content.
+First of all, the catalog is indiscriminate in that it attempts to index every attribute that’s listed against an index or metadata column for every object.
+Secondly, it is not always feasible to add a method or attribute to a class just to calculate an indexed value.
+
+Plone 3.3 and later ships with a package called `plone.indexer`_ to help make it easier to write custom indexers:
+components that are invoked to calculate the value which the catalog sees when it tries to index a given attribute.
+Indexers can be used to index a different value to the one stored on the object, or to allow indexing of a “virtual” attribute that does not actually exist on the object is question.
+Indexers are usually registered on a per-type basis, so you can have different implementations for different types of content.
 
 To illustrate indexers, we will add three indexers to ``program.py``.
-Two will provide values for the ``start`` and ``end`` indexes,
-normally used by Plone’s ``Event`` type.
-We actually have attributes with the correct name for these already, but
-they use Python ``datetime`` objects whereas the ``DateIndex`` requires a
+Two will provide values for the ``start`` and ``end`` indexes, normally used by Plone’s ``Event`` type.
+We actually have attributes with the correct name for these already, but they use Python ``datetime`` objects whereas the ``DateIndex`` requires a
 Zope 2 ``DateTime.DateTime`` object.
-(Python didn’t have a ``datetime`` module when this part of Zope was
-created!) 
-The third indexer will be used to provide a value for the ``Subject`` index
-that takes its value from the ``tracks`` list. ::
+(Python didn’t have a ``datetime`` module when this part of Zope was created!)
+The third indexer will be used to provide a value for the ``Subject`` index that takes its value from the ``tracks`` list. ::
 
     from DateTime import DateTime
-    from plone.indexer import indexer 
+    from plone.indexer import indexer
     ...
 
     @indexer(IProgram)
@@ -168,43 +142,38 @@ that takes its value from the ``tracks`` list. ::
         if obj.start is None:
             return None
         return DateTime(obj.start.isoformat())
-    grok.global_adapter(startIndexer, name="start")
 
     @indexer(IProgram)
     def endIndexer(obj):
         if obj.end is None:
             return None
         return DateTime(obj.end.isoformat())
-    grok.global_adapter(endIndexer, name="end")
 
     @indexer(IProgram)
     def tracksIndexer(obj):
         return obj.tracks
-    grok.global_adapter(tracksIndexer, name="Subject")
+
+And we need to register the indexers in ZCML::
+
+    <adapter factory=".indexers.startIndexer" name="start" />
+    <adapter factory=".indexers.endIndexer" name="end" />
+    <adapter factory=".indexers.tracksIndexer" name="Subject" />
 
 Here, we use the ``@indexer`` decorator to create an indexer.
-This doesn’t register the indexer component, though, so we need to use
-``grok.global_adapter()`` to finalise the registration.
+This doesn’t register the indexer component, though, so we need to use ZCML to finalise the registration.
 Crucially, this is where the indexer’s ``name`` is defined.
-This is the name of the indexed attribute for which the indexer is providing
-a value.
+This is the name of the indexed attribute for which the indexer is providing a value.
 
 .. note::
 
-    Since all of these indexes are part of a standard Plone installation,
-    we won’t register them in ``catalog.xml``.
-    If you are creating custom indexers and need to add new catalog indexes
-    or columns for them, remember that the “indexed attribute” name (and the
-    column name) must match the name of the indexer as set in its adapter
-    registration.
+    Since all of these indexes are part of a standard Plone installation, we won’t register them in ``catalog.xml``.
+    If you are creating custom indexers and need to add new catalog indexes or columns for them, remember that the “indexed attribute” name (and the column name) must match the name of the indexer as set in its adapter registration.
 
 Searching using your indexes
-----------------------------
+============================
+
+Once we have registered our indexers and re-installed our product (to ensure that the ``catalog.xml`` import step is allowed to install new indexes in the catalog), we can use our new indexes just like we would any of the default indexes.
 
-Once we have registered our indexers and re-installed our product (to
-ensure that the ``catalog.xml`` import step is allowed to install new
-indexes in the catalog), we can use our new indexes just like we would
-any of the default indexes.
 The pattern is always the same::
 
     from Products.CMFCore.utils import getToolByName
@@ -218,12 +187,8 @@ The pattern is always the same::
         url = brain.getURL()
         obj = brain.getObject() # Performance hit!
 
-This shows a simple search using the ``portal_catalog`` tool,
-which we look up from some context object.
-We call the tool to perform a search,
-passing search criteria as keyword arguments,
-where the left hand side refers to an installed index and the right hand
-side is the search term.
+This shows a simple search using the ``portal_catalog`` tool, which we look up from some context object.
+We call the tool to perform a search, passing search criteria as keyword arguments, where the left hand side refers to an installed index and the right hand side is the search term.
 
 Some of the more commonly used indexes are:
 
@@ -236,11 +201,11 @@ Some of the more commonly used indexes are:
 ``path``
     the object’s path. The argument is a string like ``/foo/bar``.
     To get the path of an object (e.g. a parent folder), do
-    ``'/'.join(folder.getPhysicalPath())``. 
+    ``'/'.join(folder.getPhysicalPath())``.
     Searching for an object’s path will return the object and any children.
     To depth-limit the search, e.g. to get only those 1 level deep,
     use a compound query, e.g.
-    ``path={'query': '/'.join(folder.getPhysicalPath()), 'depth': 1}``. 
+    ``path={'query': '/'.join(folder.getPhysicalPath()), 'depth': 1}``.
     If a depth is specified, the object at the given path is not returned
     (but any children within the depth limit are).
 
@@ -278,17 +243,14 @@ In addition, the search results can be sorted based on any ``FieldIndex``,
 ``KeywordIndex`` or ``DateIndex`` using the following keyword arguments:
 
 - Use ``sort_on='<index name>'`` to sort on a particular index.
-  For example, ``sort_on='sortable_title'`` will produce a sensible
-  title-based sort.
-  ``sort_on='Date'`` will sort on the publication date, or the creation date
-  if this is not set.
+  For example, ``sort_on='sortable_title'`` will produce a sensible title-based sort.
+  ``sort_on='Date'`` will sort on the publication date, or the creation date if this is not set.
 - Add ``sort_order='reverse'`` to sort in reverse.
   The default is ``sort_order='ascending'``.
   ``'descending'`` can be used as an alias for ``'reverse'``.
 - Add ``sort_limit=10`` to limit to approximately 10 search results.
   Note that it is possible to get more results due to index optimisations.
-  Use a list slice on the catalog search results to be
-  absolutely sure that you have got the maximum number of results, e.g.
+  Use a list slice on the catalog search results to be absolutely sure that you have got the maximum number of results, e.g.
   ``results = catalog(…, sort_limit=10)[:10]``.
   Also note that the use of ``sort_limit`` requires a ``sort_on`` as well.
 
@@ -321,3 +283,20 @@ For more information about catalog indexes and searching, see the
 .. _ZCatalog chapter in the Zope 2 book: http://docs.zope.org/zope2/zope2book/SearchingZCatalog.html
 
 .. _plone.indexer: http://pypi.python.org/pypi/plone.indexer
+
+
+How to setup the index TTW:
+---------------------------
+
+Now that the fields are index-able, we need to create the index itself.
+
+- Go to the Zope Management Interface
+- Go on 'portal_catalog'
+- Click 'Indexes' tab
+- There's a drop down menu to the top right to let you choose what type of index to add - if you are using a plain text string field you would select 'FieldIndex'
+- As the 'id' put in the programmatical name of your Dexterity type field that you want to index
+- Hit OK, tick your new index and click 'Reindex'
+
+You should now see content being indexed.
+
+See the :doc:`documentation </develop/plone/searching_and_indexing/indexing>` for further information
diff --git a/docs/advanced/custom-add-and-edit-forms.rst b/docs/advanced/custom-add-and-edit-forms.rst
index b5223e2..751ff69 100644
--- a/docs/advanced/custom-add-and-edit-forms.rst
+++ b/docs/advanced/custom-add-and-edit-forms.rst
@@ -1,4 +1,4 @@
-Custom add and edit forms 
+Custom add and edit forms
 ============================
 
 **Using `z3c.form`_ to build custom forms**
@@ -13,12 +13,6 @@ forms.
 Dexterity uses the `z3c.form`_ library to build its forms, via the
 `plone.z3cform`_ integration package.
 
-.. note::
-    the `plone.z3cform`_ package requires that standard `z3c.form`_
-    forms are used via a form wrapper view.
-    In Dexterity, this wrapper is normally applied automatically by the form
-    grokkers in `plone.directives.form`_ and `plone.directives.dexterity`_.
-
 Dexterity also relies on `plone.autoform`_, in particular its
 ``AutoExtensibleForm`` base class, which is responsible for processing
 form hints and setting up `z3c.form`_ widgets and groups (fieldsets).
@@ -30,8 +24,6 @@ Dexterity type.
 .. note::
     If you want to build standalone forms not related to content objects,
     see the `z3c.form`_ documentation.
-    For convenience, you may want to use the base classes and schema support
-    in `plone.directives.form`_.
 
 Edit forms
 ----------
@@ -45,20 +37,25 @@ which is registered with that name for the more general
 Dexterity provides a standard edit form base class that provides
 sensible defaults for buttons, labels and so on.
 This should be registered for a type schema (not a class).
-To create an edit form that is identical to the default, we could do::
+To create an edit form that is identical to the default, we could do:
+
+.. code-block:: python
+    
+    from plone.dexterity.browser import edit
 
-    class EditForm(dexterity.EditForm):
-        grok.context(IFSPage)
+    class EditForm(edit.DefaultEditForm):
+        pass
 
-The ``dexterity`` module is `plone.directives.dexterity`_ and 
-the ``grok`` module is `five.grok`_.
+and register it in configure.zcml:
 
-The default name for the form is *edit*, but we could supply a different
-name using ``grok.name()``.
-The default permission is ``cmf.ModifyPortalContent``,
-but we could require a different permission with ``grok.require()``.
-We could also register the form for a particular browser layer, 
-using ``grok.layer()``.
+.. code-block:: xml
+
+    <browser:page
+        for=".fs_page.IFSPage"
+        name="edit"
+        class=".fs_page.EditForm"
+        permission="cmf.ModifyPortalContent"
+        />
 
 This form is of course not terribly interesting, since it is identical
 to the default. However, we can now start changing fields and values.
@@ -67,10 +64,10 @@ For example, we could:
 - Override the ``schema`` property to tell `plone.autoform`_ to use a
   different schema interface (with different form hints) than the
   content type schema.
-- Override the ``additional_schemata`` property to tell `plone.autoform`_
-  to use different supplemental schema interfaces. 
+- Override the ``additionalSchemata`` property to tell `plone.autoform`_
+  to use different supplemental schema interfaces.
   The default is to use all behavior interfaces that provide the
-  ``IFormFieldProvider`` marker from `plone.directives.form`_.
+  ``IFormFieldProvider`` marker from `plone.autoform`_.
 - Override the ``label`` and ``description`` properties to provide
   different a different title and description for the form.
 - Set the `z3c.form`_ ``fields`` and ``groups`` attributes directly.
@@ -78,16 +75,17 @@ For example, we could:
   or one of the other ``update``()`` methods,
   to perform additional processing on the fields.
   In most cases, these require us to call the ``super`` version at the
-  beginning. 
+  beginning.
   See the `plone.autoform`_ and `z3c.form`_ documentation
   to learn more about the sequence of calls that emanate from the form
   ``update()`` method in the ``z3c.form.form.BaseForm`` class.
+- Override the ``template`` attribute to specify a custom template.
 
 Content add sequence
 --------------------
 
 Add forms are similar to edit forms in that they are built from a type’s
-schema and the schemata of its behaviors. 
+schema and the schemata of its behaviors.
 However, for an add form to be able to construct a content object,
 it needs to know which ``portal_type`` to use.
 
@@ -102,32 +100,18 @@ You may have noticed this in the URLs to add forms already.
 What actually happens is this:
 
 - Plone renders the :guilabel:`add` menu.
-  - To do so, it looks, among other places, for actions in the
-    *folder/add* category. This category is provided by the
-    ``portal_types`` tool.
-  - The *folder/add* action category is constructed by looking up the
-    ``add\_view\_expr`` property on the FTIs of all addable types. 
-    This is a TALES expression telling the add menu which URL to use.
-  - The default ``add\_view\_expr`` in Dexterity (and CMF 2.2) is
-    ``string:${folder\_url}/++add++${fti/getId}``.
-    That is, it uses the ``++add++`` traversal namespace with an argument
-    containing the FTI name.
-- A user clicks on an entry in the menu and is taken to a URL like
-  ``/path/to/folder/++add++my.type``.
-    - The ``++add++`` namespace adapter looks up the FTI with the given name,
-      and gets its ``factory`` property.
-    - The ``factory`` property of an FTI gives the name of a particular
-      ``zope.component.interfaces.IFactory`` utility,
-      which is used later to construct an instance of the content object.
-      Dexterity automatically registers a factory instance for each type,
-      with a name that matches the type name,
-      although it is possible to use an existing factory name in a new type.
+  - To do so, it looks, among other places, for actions in the *folder/add* category. This category is provided by the ``portal_types`` tool.
+  - The *folder/add* action category is constructed by looking up the ``add\_view\_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use.
+  - The default ``add\_view\_expr`` in Dexterity (and CMF 2.2) is ``string:${folder\_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name.
+- A user clicks on an entry in the menu and is taken to a URL like ``/path/to/folder/++add++my.type``.
+    - The ``++add++`` namespace adapter looks up the FTI with the given name, and gets its ``factory`` property.
+    - The ``factory`` property of an FTI gives the name of a particular ``zope.component.interfaces.IFactory`` utility, which is used later to construct an instance of the content object.  Dexterity automatically registers a factory instance for each type, with a name that matches the type name, although it is possible to use an existing factory name in a new type.
       This allows administrators to create new “logical” types that are
       functionally identical to an existing type.
     - The ``++add++`` namespace adapter looks up the actual form to render as
       a multi-adapter from ``(context, request, fti``) to ``Interface`` with
       a name matching the ``factory`` property.
-      Recall that a standard view is a multi-adapter from 
+      Recall that a standard view is a multi-adapter from
       ``(context, request)`` to ``Interface`` with a name matching the URL
       segment for which the view is looked up.
       As such, add forms are not standard views, because they get the
@@ -140,13 +124,9 @@ What actually happens is this:
 - The form is rendered like any other ``z3c.form`` form instance,
   and is subject to validation,
   which may cause it to be loaded several times.
-- Eventually, the form is successfully submitted.
-  At this point:
-    - The standard ``AddForm`` base class will look up the factory from the
-      FTI reference it holds and call it to create an instance.
-    - The default Dexterity factory looks at the ``klass`` [*]_ attribute of
-      the FTI to determine the actual content class to use,
-      creates an object and initialises it.
+- Eventually, the form is successfully submitted. At this point:
+    - The standard ``AddForm`` base class will look up the factory from the FTI reference it holds and call it to create an instance.
+    - The default Dexterity factory looks at the ``klass`` [*]_ attribute of the FTI to determine the actual content class to use, creates an object and initialises it.
     - The ``portal_type`` attribute of the newly created instance is set to
       the name of the FTI.
       Thus, if the FTI is a “logical type” created through the web, but
@@ -162,9 +142,8 @@ What actually happens is this:
 
 This sequence is pretty long, but thankfully we rarely have to worry
 about it. In most cases, we can use the default add form, and when we
-can’t, creating a custom add form is no more difficult than creating a
-custom edit form. The add form grokker take care of registering the add
-view appropriately.
+can’t, creating a custom add form is only a bit more difficult than
+creating a custom edit form.
 
 Custom add forms
 ----------------
@@ -172,27 +151,48 @@ Custom add forms
 As with edit forms, Dexterity provides a sensible base class for add
 forms that knows how to deal with the Dexterity FTI and factory.
 
-A custom form replicating the default would look like this::
+A custom form replicating the default would look like this:
+
+.. code-block:: python
+
+    from plone.dexterity.browser import add
+
+    class AddForm(add.DefaultAddForm):
+        portal_type = 'example.fspage'
+
+and be registered in ZCML like this:
+
+.. code-block:: xml
 
-    class AddForm(dexterity.AddForm):
-        grok.name('example.fspage')
+    <adapter
+        for="Products.CMFCore.interfaces.IFolderish
+             zope.publisher.interfaces.browser.IDefaultBrowserLayer
+             ..interfaces.IDexterityFTI"
+        provides="zope.publisher.interfaces.browser.IBrowserPage"
+        factory=".fs_page.AddForm"
+        name="example.fspage"
+        />
+    <class class=".fs_page.AddForm">
+        <require
+            permission="cmf.AddPortalContent"
+            interface="zope.publisher.interfaces.browser.IBrowserPage"
+            />
+    </class>
 
 The name here should match the *factory* name.
 By default, Dexterity types have a factory called the same as the FTI name.
-If no such factory exists 
+If no such factory exists
 (i.e. you have not registered a custom ``IFactory`` utility),
 a local factory utility will be created and managed by Dexterity when the
 FTI is installed.
 
 Also note that we do not specify a context here.
 Add forms are always registered for any ``IFolderish`` context.
-We can specify a layer with ``grok.layer()`` and a permission other than the
-default ``cmf.AddPortalContent`` with ``grok.require()``.
 
 .. note::
     If the permission used for the add form is different to the
     ``add_permission`` set in the FTI, the user needs to have *both*
-    permissions to be able to see the form and add content. 
+    permissions to be able to see the form and add content.
     For this reason, most add forms will use the generic
     ``cmf.AddPortalContent`` permission.
     The :guilabel:`add` menu will not render links to types where the user
@@ -200,13 +200,10 @@ default ``cmf.AddPortalContent`` with ``grok.require()``.
     even if this is different to ``cmf.AddPortalContent``.
 
 As with edit forms, we can customise this form by overriding `z3c.form`_
-and `plone.autoform`_ properties and methods. 
+and `plone.autoform`_ properties and methods.
 See the `z3c.form`_ documentation on add forms for more details.
 
 
 .. _z3c.form: http://docs.zope.org/z3c.form
-.. _five.grok: http://docs.zope.org/five.grok
 .. _plone.z3cform: http://pypi.python.org/pypi/plone.z3cform
 .. _plone.autoform: http://pypi.python.org/pypi/plone.autoform
-.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
-.. _plone.directives.dexterity: http://pypi.python.org/pypi/plone.directives.dexterity
diff --git a/docs/advanced/defaults.rst b/docs/advanced/defaults.rst
index 4631c63..c0c5f96 100644
--- a/docs/advanced/defaults.rst
+++ b/docs/advanced/defaults.rst
@@ -13,54 +13,56 @@ in the future, respectively. We can do this by adding the following to
 
 .. code-block:: python
 
-    @form.default_value(field=IProgram['start'])
-    def startDefaultValue(data):
-        # To get hold of the folder, do: context = data.context
+    import datetime
+
+    def startDefaultValue():
         return datetime.datetime.today() + datetime.timedelta(7)
 
-    @form.default_value(field=IProgram['end'])
-    def endDefaultValue(data):
-        # To get hold of the folder, do: context = data.context
+    def endDefaultValue():
         return datetime.datetime.today() + datetime.timedelta(10)
 
-We also need to import ``datetime`` at the top of the file, of course.
+We also need to modify IProgram so the ``start`` and ``end`` fields
+use these functions as their ``defaultFactory``:
 
-Notice how the functions specify a particular schema field that they
-provide the default value for. The decorator will actually register
-these as “value adapters” for `z3c.form`_, but you probably don’t need to
-worry about that.
+.. code-block:: python
 
-The ``data`` argument is an object that contains an attribute for each
-field in the schema. On the add form, most of these are likely to be
-``None``, but on a different form, the values may be populated from the
-context. The ``data`` object also has a ``context`` attribute that you can
-use to get the form’s context. For add forms, that’s the containing
-folder; for other forms, it is normally a content object being edited or
-displayed. If you need to look up tools (``getToolByName``) or acquire a
-value from a parent object, use ``data.context`` as the starting point,
-e.g.:
+    class IProgram(model.Schema):
 
-.. code-block:: python
+        start = schema.Datetime(
+            title=_(u"Start date"),
+            required=False,
+            defaultFactory=startDefaultValue,
+        )
 
-    from Products.CMFCore.utils import getToolByName
-    ...
-    catalog = getToolByName(data.context, 'portal_catalog')
+        end = schema.Datetime(
+            title=_(u"End date"),
+            required=False,
+            defaultFactory=endDefaultValue,
+        )
+
+The ``defaultFactory`` is a function that will be called when the add form
+is loaded to determine the default value.
 
 The value returned by the method should be a value that’s allowable for
 the field. In the case of ``Datetime`` fields, that’s a Python ``datetime``
 object.
 
-It is possible to provide different default values depending on the type
-of context, a request layer, the type of form, or the type of widget
-used. See the `plone.directives.form`_ documentation for more details.
-
-For example, if you wanted to have a differently calculated default for
-a particular form, you could use a decorator like:
+It is also possible to write a context-aware default factory that will be
+passed the container for which the add form is being displayed:
 
 .. code-block:: python
 
-    @form.default_value(field=IProgram['start'], form=FormClass)
+    from zope.interface import provider
+    from zope.schema.interfaces import IContextAwareDefaultFactory
+
+    @provider(IContextAwareDefaultFactory)
+    def getContainerId(context):
+        return context.getId()
+
+It is possible to provide different default values depending on the type
+of context, a request layer, the type of form, or the type of widget
+used. See the `z3c.form`_ documentation for more details.
 
 We’ll cover creating custom forms later in this manual.
 
-.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
+.. _z3c.form: https://pypi.python.org/pypi/z3c.form#look-up-value-from-default-adapter
diff --git a/docs/advanced/event-handlers.rst b/docs/advanced/event-handlers.rst
index 6b8e650..295ca4a 100644
--- a/docs/advanced/event-handlers.rst
+++ b/docs/advanced/event-handlers.rst
@@ -1,4 +1,4 @@
-Event handlers 
+Event handlers
 ---------------
 
 **Adding custom event handlers for your type**
@@ -57,48 +57,51 @@ They are all object events.
     the action (transition) invoked.
 
 Event handlers can be registered using ZCML with the ``<subscriber />``
-directive, but when working with Dexterity types, we’ll more commonly
-use the ``grok.subscriber()`` in Python code.
+directive.
 
 As an example, let’s add an event handler to the ``Presenter`` type that
 tries to find users with matching names matching the presenter id, and
 send these users an email.
 
-First, we require a few additional imports at the top of ``presenter.py``::
+First, we require an additional import at the top of ``presenter.py``::
 
-    from zope.lifecycleevent.interfaces import IObjectAddedEvent
     from Products.CMFCore.utils import getToolByName
 
 Then, we’ll add the following event subscriber after the schema
 definition::
 
-    @grok.subscribe(IPresenter, IObjectAddedEvent)
     def notifyUser(presenter, event):
         acl_users = getToolByName(presenter, 'acl_users')
         mail_host = getToolByName(presenter, 'MailHost')
         portal_url = getToolByName(presenter, 'portal_url')
-        
+
         portal = portal_url.getPortalObject()
         sender = portal.getProperty('email_from_address')
-        
+
         if not sender:
             return
-        
+
         subject = "Is this you?"
         message = "A presenter called %s was added here %s" % (presenter.title, presenter.absolute_url(),)
-        
+
         matching_users = acl_users.searchUsers(fullname=presenter.title)
         for user_info in matching_users:
             email = user_info.get('email', None)
             if email is not None:
                 mail_host.secureSend(message, email, sender, subject)
 
+And register it in ZCML::
+
+    <subscriber
+        for=".presenter.IPresenter zope.lifecycleevent.interfaces.IObjectAddedEvent"
+        handler=".presenter.notifyUser"
+        />
+
 There are many ways to improve this rather simplistic event handler, but
 it illustrates how events can be used. The first argument to
-``grok.subscribe()`` is an interface describing the object type. For
-non-object events, this is omitted. The second argument is the event
-type. The arguments to the function reflects these two, so the first
-argument is the ``IPresenter`` instance and the second is an
+``for`` is an interface describing the object type. The second argument
+is the event type. The arguments to the function reflects these two,
+so the first argument is the ``IPresenter`` instance and the second is an
 ``IObjectAddedEvent`` instance.
 
 .. _zope.event: http://pypi.python.org/pypi/zope.event
diff --git a/docs/advanced/files-and-images.rst b/docs/advanced/files-and-images.rst
index a57611c..c406813 100644
--- a/docs/advanced/files-and-images.rst
+++ b/docs/advanced/files-and-images.rst
@@ -54,7 +54,7 @@ speaker to the ``Presenter`` type. In ``presenter.py``, we add::
 
     class IPresenter(model.Schema):
         ...
-        
+
         picture = NamedBlobImage(
             title=_(u"Please upload an image"),
             required=False,
@@ -83,6 +83,19 @@ URL ends in the correct extension, which can help ensure web browsers
 display the picture correctly. We also define the ``height`` and ``width``
 of the image based on the values set on the object.
 
+Access to image scales is similar::
+
+    <div tal:define="picture nocall:context/picture"
+         tal:condition="nocall:picture">
+        <img tal:replace="structure context/@@images/picture/scale" />
+    </div>
+
+where ``scales`` is large, preview, mini, thumb, tile, icon, or a custom scale.
+This code generates a full tag, including height and width attributes and alt and title based on the context title.
+To generate just a URL, use code like::
+
+    <img tal:attributes="src string: ${context/absolute_url}/@@images/picture/scale" />
+
 For file fields, you can construct a download URL in a similar way,
 using an ``<a />`` tag, e.g.::
 
diff --git a/docs/advanced/permissions.rst b/docs/advanced/permissions.rst
index a6cd5d3..47b9701 100644
--- a/docs/advanced/permissions.rst
+++ b/docs/advanced/permissions.rst
@@ -1,11 +1,11 @@
-Permissions 
+Permissions
 -------------
 
 **Setting up add permissions, view permissions and field view/edit permissions**
 
-Plone’s security system is based on the concept of 
-*permissions* protecting *operations* 
-(like accessing a view, 
+Plone’s security system is based on the concept of
+*permissions* protecting *operations*
+(like accessing a view,
 viewing a field,
 modifying a field,
 or adding a type of content)
@@ -22,131 +22,11 @@ permissions are typically used in three different ways:
   so that some users can view and edit fields that others can’t see.
 
 It is easy to create new permissions.
-However, be aware that it is considered good practice 
-to use the standard permissions wherever possible and 
-use *workflow* to control which roles are granted these permissions 
-on a per-instance basis.
-We’ll cover workflow later in this manual.
-
-Standard permissions
-~~~~~~~~~~~~~~~~~~~~~
-
-The standard permissions can be found in ``Product.Five``\’s ``permissions.zcml`` 
-(``parts/omelette/Products/Five/permissions.zcml``).
-Here, you will find a short ``id`` 
-(also known as the *Zope 3 permission id*)
-and a longer ``title`` 
-(also known as the *Zope 2 permission title*).
-For historical reasons, some areas in Plone use the id,
-whilst others use the title.
-As a rule of thumb:
-
-- Browser views defined in ZCML or protected via a ``grok.require()``
-  directive use the Zope 3 permission id.
-- Security checks using ``zope.security.checkPermission()`` use the Zope
-  3 permission id
-- Dexterity’s ``add_permission`` FTI variable uses the Zope 3 permission
-  id.
-- The ``rolemap.xml`` GenericSetup handler and workflows use the Zope 2
-  permission title.
-- Security checks using ``AccessControl``’s
-  ``getSecurityManager().checkPermission()``, including the methods on
-  the ``portal_membership`` tool, use the Zope 2 permission title.
-
-The most commonly used permission are shown below.
-The Zope 2 permission title is shown in parentheses.
-
-``zope2.View`` (:guilabel:`View`)
-    used to control access to the standard view of a content item;
-
-``zope2.DeleteObjects`` (:guilabel:`Delete objects`)
-    used to control the ability to delete child objects in a container;
-
-``cmf.ModifyPortalContent`` (:guilabel:`Modify portal content`)
-    used to control write access to content items;
-
-``cmf.ManagePortal`` (:guilabel:`Manage portal`)
-    used to control access to management screens;
-
-``cmf.AddPortalContent`` (:guilabel:`Add portal content`)
-    the standard add permission required to add content to a folder;
-
-``cmf.SetOwnProperties`` (:guilabel:`Set own properties`) 
-    used to allow users to set their own member properties'
-
-``cmf.RequestReview`` (:guilabel:`Request Review`)
-    typically used as a workflow transition guard 
-    to allow users to submit content for review;
-
-``cmf.ReviewPortalContent`` (:guilabel:`Review portal content`)
-    usually granted to the ``Reviewer`` role,
-    controlling the ability to publish or reject content.
-
-Standard roles
-~~~~~~~~~~~~~~~
-
-As with permissions, it is easy to create custom roles (use the
-``rolemap.xml`` GenericSetup import step – see ``CMFPlone``\’s version of
-this file for an example), although you should use the standard roles
-where possible.
-
-The standard roles in Plone are:
-
-:guilabel:`Anonymous`
-    a pseudo-role that represents non-logged in users.
+However, be aware that it is considered good practice to use the standard permissions wherever possible and use *workflow* to control which roles are granted these permissions on a per-instance basis.
 
-.. note::
+For more basic information on permissions and how to create custom permissions read the `Security Section`_ in the Plone documentation.
 
-    if a permission is granted to :guilabel:`Anonymous`,
-    it is effectively granted to everyone.
-    It is not possible to grant permissions to non-logged in users
-    without also granting them to logged in ones.
-
-:guilabel:`Authenticated`
-     a pseudo-role that represents logged-in users.
-
-:guilabel:`Owner`
-     automatically granted to the creator of an object.
-
-:guilabel:`Manager`
-     which represents super-users/administrators.
-     Almost all permissions that are not granted to ``Anonymous`` 
-     are granted to ``Manager``.
-
-:guilabel:`Reviewer`
-     which represents content reviewers separately from site administrators.
-     It is possible to grant the :guilabel:`Reviewer` role locally on the
-     :guilabel:`Sharing`` tab, where it is shown as :guilabel:`Can review`.
-
-:guilabel:`Member`
-     representing “standard” Plone users.
-
-In addition, there are three roles that are intended to be used as
-*local roles* only. These are granted to specific users or groups via
-the :guilabel:`Sharing` tab, where they appear under more user friendly
-pseudonyms.
-
-:guilabel:`Reader`, aka :guilabel:`Can view`,
-    confers the right to view content.
-    As a role of thumb,
-    the :guilabel:`Reader` role should have the 
-    :guilabel:`View` and :guilabel:`Access contents information` permissions 
-    if the :guilabel:`Owner` roles does.
-
-:guilabel:`Editor`, aka :guilabel:`Can edit`,
-    confers the right to edit content.
-    As a role of thumb, the :guilabel:`Editor` role should have the 
-    :guilabel:`Modify portal content` permission 
-    if the :guilabel:`Owner` roles does.
-
-:guilabel:`Contributor`, aka :guilabel:`Can add`,
-    confers the right to add new content.
-    As a role of thumb,
-    the:guilabel: `Contributor` role should have the 
-    `Add:guilabel: portal content` permission 
-    and any type-specific add permissions globally 
-    (i.e. granted in ``rolemap.xml``),
-    although these permissions are sometimes managed in workflow as well.
+.. _`Security Section`: http://docs.plone.org/develop/plone/security/index.html
 
 Performing permission checks in code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -156,9 +36,8 @@ example in a view. A permission check always checks a permission on a
 context object, since permissions can change with workflow.
 
 .. note::
-    Never make security dependent on users’ roles directly. Always check for
-    a permission, and assign the permission to the appropriate role or
-    roles.
+    Never make security dependent on users’ roles directly. 
+    Always check for a permission, and assign the permission to the appropriate role or roles.
 
 As an example,
 let’s display a message on the view of a ``Session`` type
@@ -167,10 +46,8 @@ In ``session.py``, we update the ``View`` class with the following::
 
     from zope.security import checkPermission
 
-    class View(dexterity.DisplayForm):
-        grok.context(ISession)
-        grok.require('zope2.View')
-        
+    class View(BrowserView):
+
         def canRequestReview(self):
             return checkPermission('cmf.RequestReview', self.context)
 
@@ -184,118 +61,13 @@ And in the ``session_templates/view.pt`` template, we add:
         Please submit this for review.
     </div>
 
-Creating custom permissions
-~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Although the standard permissions should be used to control basic operations
-(view, modify, delete, review),
-it is sometimes useful to create new permissions.
-Combined with custom workflows,
-custom permissions can be used 
-to create highly tailored content review cycles
-and data entry applications.
-They are also an important way to control who can add what content.
-
-The easiest way to create a custom permission is with the help of the
-`collective.autopermission`_ package,
-which allows permissions to be defined 
-using the ``<permission />`` ZCML statement.
-
-.. note::
-    `collective.autopermission`_ is obsolete in Zope 2.12, where its
-    functionality has been merged into Zope itself.
-
-As an example,
-let’s create some custom permissions 
-for use with the ``Session`` type.
-We’ll create a new add permission,
-so that we can let any member submit a session to a program,
-and a permission which we will later use 
-to let reviewers edit some specific fields on the ``Session`` type.
-
-First, we need to depend on `collective.autopermission`_. In ``setup.py``::
-
-    install_requires=[
-        ...
-        'collective.autopermission',
-    ],
-
-.. note::
-    Make sure `collective.autopermission`_\’s configuration is included 
-    before any custom permissions are defined.
-    In our case, 
-    the ``<includeDependencies />`` line takes care of this.
-
-Next, we’ll create a file called ``permissions.zcml`` to hold the
-permissions (we could also place them directly into ``configure.zcml``).
-We need to include this in ``configure.zcml``, just after the
-``<includeDependencies />`` line:
-
-.. code-block:: xml
-
-    <include file="permissions.zcml" />
-
-.. note::
-    All permissions need to be defined before the 
-    ``<grok:grok package=“.” />`` line in ``configure.zcml``.
-    Otherwise, you may get errors trying to use the permission 
-    with a ``grok.require()`` directive.
-
-The ``permissions.zcml`` file looks like this:
-
-.. code-block:: xml
-
-    <configure
-        xmlns="http://namespaces.zope.org/zope"
-        i18n_domain="example.conference">
-
-        <permission
-            id="example.conference.AddSession"
-            title="example.conference: Add session"
-            />
-
-        <permission
-            id="example.conference.ModifyTrack"
-            title="example.conference: Modify track"
-            />
-            
-    </configure>
-
-New permissions are granted to the :guilabel:`Manager` role only by default.
-To set a different default,
-we can use the ``rolemap.xml`` GenericSetup import step,
-which maps permissions to roles at the site root.
-
-In ``profiles/default/rolemap.xml``, we have the following:
-
-.. code-block:: xml
-
-    <?xml version="1.0"?>
-    <rolemap>
-      <permissions>
-        <permission name="example.conference: Add session" acquire="True">
-          <role name="Owner"/>
-          <role name="Manager"/>
-          <role name="Member"/>
-          <role name="Contributor"/>
-        </permission>
-        <permission name="example.conference: Modify track" acquire="True">
-          <role name="Manager"/>
-          <role name="Reviewer"/>
-        </permission>
-      </permissions>
-    </rolemap>
-
-.. note::
-    This file uses the Zope 2 permission title instead of the shorter Zope 3
-    permission id.
 
 Content type add permissions
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Dexterity content types’ add permissions are set in the FTI,
 using the ``add_permission`` property.
-This can be changed through the web 
+This can be changed through the web
 or in the GenericSetup import step for the content type.
 
 To make the ``Session`` type use our new permission, we modify the
@@ -311,44 +83,51 @@ Protecting views and forms
 
 Access to views and other browser resources (like viewlets or portlets)
 can be protected by permissions, either using the ``permission`` attribute
-on ZCML statements like ``<browser:page />`` or using the ``grok.require()``
-directive.
-
-We have already seen this directive on our views::
+on ZCML statements like::
 
-    class View(grok.View):
-        grok.context(IPresenter)
-        grok.require('zope2.View')
+    <browser:page
+        ...
+        permission="zope.Public"
+        ...
+        />
 
-We could use a custom permission name as the argument to
-``grok.require()``. We could also use the special ``zope.Public`` permission
-name to make the view accessible to anyone.
+We could also use the special ``zope.Public`` permission name to make the view accessible to anyone.
 
 Protecting form fields
 ~~~~~~~~~~~~~~~~~~~~~~~
 
 Individual fields in a schema may be associated with a *read* permission
 and a *write* permission.
-The read permission is used to control access to the field’s value 
-via protected code (e.g. scripts or templates created through the web)
+The read permission is used to control access to the field’s value via protected code
+(e.g. scripts or templates created through the web)
 and URL traversal,
-and can be used to control the appearance of fields 
-when using display forms 
-(if you use custom views that access the attribute directly,
-you’ll need to perform your own checks).
-Write permissions can be used to control 
-whether or not a given field appears on a type’s add and edit forms.
+and can be used to control the appearance of fields when using display forms
+(if you use custom views that access the attribute directly, you’ll need to perform your own checks).
+Write permissions can be used to control whether or not a given field appears on a type’s add and edit forms.
 
 In both cases,
-read and write permissions are annotated onto the schema using directives
-similar to those we’ve already seen for form widget hints.
-The ``read_permission()`` and ``write_permission()`` directives are
-found in the `plone.directives.dexterity`_ package.
+read and write permissions are annotated onto the schema using directives similar to those we’ve already seen for form widget hints.
+The ``read_permission()`` and ``write_permission()`` directives are found in the `plone.autoform`_ package.
+
+If XML-schemas are used for defintion see :ref:`Dexterity XML: security attributes <dexterity-xml-security>`.
 
-As an example, let’s add a field for *Session* reviewers to record the
-track for a session. We’ll store the vocabulary of available tracks on
-the parent ``Program`` object in a text field, so that the creator of the
-``Program`` can choose the available tracks.
+Simple example protecting a field to be readable for Site Administrators only::
+
+    from zope import schema
+    from plone.supermodel import model
+    from plone.autoform.directives import read_permission
+
+    class IExampleProtectedInformation(model):
+
+        read_permission(info='cmf.ManagePortal')
+        write_permission(info='cmf.ManagePortal')
+        info = schema.Text(
+            title=_(u"Information"),
+        )
+
+As a complex example, let’s add a field for *Session* reviewers to record the track for a session.
+We’ll store the vocabulary of available tracks on the parent ``Program`` object in a text field,
+so that the creator of the ``Program`` can choose the available tracks.
 
 First, we add this to the ``IProgram`` schema in ``program.py``::
 
@@ -368,25 +147,26 @@ text area. It is imported as::
 Next, we’ll add a vocabulary for this to ``session.py``::
 
     from Acquisition import aq_inner, aq_parent
+    from zope.component import provider
     from zope.schema.interfaces import IContextSourceBinder
     from zope.schema.vocabulary import SimpleVocabulary
     ...
 
-    @grok.provider(IContextSourceBinder)
+    @provider(IContextSourceBinder)
     def possibleTracks(context):
-        
+
         # we put the import here to avoid a circular import
         from example.conference.program import IProgram
         while context is not None and not IProgram.providedBy(context):
             context = aq_parent(aq_inner(context))
-        
+
         values = []
         if context is not None and context.tracks:
             values = context.tracks
-        
+
         return SimpleVocabulary.fromValues(values)
 
-This vocabulary finds the closest ``IProgram`` 
+This vocabulary finds the closest ``IProgram``
 (in the add form, the ``context`` will be the ``Program``,
 but on the edit form, it will be the ``Session``,
 so we need to check the parent)
@@ -395,23 +175,15 @@ and uses its ``tracks`` variable as the vocabulary.
 Next, we add a field to the ``ISession`` interface in the same file and
 protect it with the relevant write permission::
 
-    dexterity.write_permission(track='example.conference.ModifyTrack')
+    write_permission(track='example.conference.ModifyTrack')
     track = schema.Choice(
             title=_(u"Track"),
             source=possibleTracks,
             required=False,
         )
 
-The ``dexterity`` module is the root of the `plone.directives.dexterity`_
-package, imported as::
-
-    from plone.directives import dexterity
-
 With this in place, users with the ``example.conference: Modify track``
 permission should be able to edit tracks for a session. For everyone
 else, the field will be hidden in the edit form.
 
-.. _plone.directives.dexterity: http://pypi.python.org/pypi/plone.directives.dexterity
-.. _collective.autopermission: http://pypi.python.org/pypi/collective.autopermission
-.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
-
+.. _plone.autoform: http://pypi.python.org/pypi/plone.autoform
diff --git a/docs/advanced/references.rst b/docs/advanced/references.rst
index b44498e..e010f56 100644
--- a/docs/advanced/references.rst
+++ b/docs/advanced/references.rst
@@ -1,5 +1,6 @@
+==========
 References
------------
+==========
 
 **How to work with references between content objects**
 
@@ -46,6 +47,11 @@ we can use the field directly in ``session.py``::
             required=False,
         )
 
+.. Note::
+
+    Remeber that `plone.app.relationfield`_ needs to be installed to use any
+    RelationChoice or RelationList field.
+
 To allow multiple items to be selected, we could have used a
 ``RelationList`` like::
 
@@ -95,9 +101,12 @@ If you want to use a different widget, you can use the same source (or a
 custom source that has content objects as values) with something like
 the autocomplete widget. The following line added to the interface will
 make the presenter selection similar to the ``organizer`` selection widget
-we showed in the previous section::
+we showed in the previous section:
 
-    form.widget('presenter', AutocompleteFieldWidget)
+.. code-block:: python
+
+    from plone.autoform import directives
+    directives.widget('presenter', AutocompleteFieldWidget)
 
 Once the user has created some relationships, the value stored in the
 relation field is a ``RelationValue`` object. This provides various
@@ -112,8 +121,8 @@ The ``isBroken()`` method can be used to determine if the relationship is
 broken. This normally happens if the target object is deleted.
 
 To display the relationship on our form, we can either use a display
-widget on a ``DisplayForm``, or use this API to find the object and
-display it. We’ll do the latter in ``session_templates/view.pt``:
+widget on a *display view*, or use this API to find the object and
+display it. We’ll do the latter in ``templates/sessionview.pt``:
 
 .. code-block:: html
 
@@ -122,6 +131,44 @@ display it. We’ll do the latter in ``session_templates/view.pt``:
         <span tal:content="context/presenter/to_object/Title | nothing" />
     </div>
 
+
+Back references
+---------------
+
+To retrieve back-reference (all objects pointing to particular object using specified attribute) you can't simply use ``from_object`` or ``from_path``, because source object is stored in the relation without acquisition wrappers.
+You should use ``from_id`` and ``helper`` method, which search the object in the ``IntId`` catalog:
+
+.. code-block:: python
+
+    from Acquisition import aq_inner
+    from zope.component import getUtility
+    from zope.intid.interfaces import IIntIds
+    from zope.security import checkPermission
+    from zc.relation.interfaces import ICatalog
+
+    def back_references(source_object, attribute_name):
+        """
+        Return back references from source object on specified attribute_name
+        """
+        catalog = getUtility(ICatalog)
+        intids = getUtility(IIntIds)
+        result = []
+        for rel in catalog.findRelations(
+                    dict(to_id=intids.getId(aq_inner(source_object)),
+                    from_attribute=attribute_name)
+                ):
+            obj = intids.queryObject(rel.from_id)
+            if obj is not None and checkPermission('zope2.View', obj):
+            result.append(obj)
+        return result
+
+Please note, this method does not check effective and expiration date or content language.
+
+Original issue: `<http://code.google.com/p/dexterity/issues/detail?id=234>`_
+
+
+
+
 .. _five.intid: http://pypi.python.org/pypi/five.intid
 .. _zope.intid: http://pypi.python.org/pypi/zope.intid
 .. _zc.relationship: http://pypi.python.org/pypi/zc.relationship
diff --git a/docs/advanced/rich-text-markup-transformations.rst b/docs/advanced/rich-text-markup-transformations.rst
index 6a6bca3..ca55cea 100644
--- a/docs/advanced/rich-text-markup-transformations.rst
+++ b/docs/advanced/rich-text-markup-transformations.rst
@@ -1,4 +1,4 @@
-Rich text, markup and transformations 
+Rich text, markup and transformations
 --------------------------------------
 
 **How to store markup (such as HTML or reStructuredText) and render it with a transformation**
@@ -22,7 +22,7 @@ get a WYSIWYG widget, by using a schema such as this::
 
     class ITestSchema(model.Schema):
 
-        form.widget(body, WysiwygFieldWidget)
+        form.widget('body', WysiwygFieldWidget)
         body = schema.Text(title=u"Body text")
 
 .. _richtext-label:
diff --git a/docs/advanced/static-resources.rst b/docs/advanced/static-resources.rst
index 0f2645e..57e97fb 100644
--- a/docs/advanced/static-resources.rst
+++ b/docs/advanced/static-resources.rst
@@ -20,29 +20,22 @@ attributes: ``name`` is the name that appears after the
 ``++resource++`` namespace; ``directory`` is a relative path to the
 directory containing resources.
 
-It's conventional to use "static" or "resources" for the directory name and the dotted name of your package for the resource name.
-If you create a directory named "resources", you would use this zcml to register it::
+It's conventional to use "static" for the directory name and the dotted name of your package for the resource name.
+You would use this zcml to register it:
+
+.. code-block:: xml
 
   <browser:resourceDirectory
-    name="dotted.projectname"
-    directory="resources" />
+    name="example.conference"
+    directory="static" />
 
 
-Then, if a ``resources`` resource directory in the ``example.conference`` package
+Then, if a "static" resource directory in the ``example.conference`` package
 contains a file called ``conference.css``, it will be accessible on a URL
 like ``http://<server>/site/++resource++example.conference/conference.css.``
 The resource name is the same as the package name wherein the ``resources``
 directory appears.
 
-.. note::
-    Grok used to automatically register any directory named ``static``.
-    That behavior no longer works. If you're updating a Dexterity project
-    from < Plone 4.3, add to your configure.zcml a stanza like::
-
-      <browser:resourceDirectory
-        name="dotted.projectname"
-        directory="static" />
-
 
 Importing CSS and JavaScript files in templates
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -59,7 +52,7 @@ For example, we could add the following near the top of
 
     <head>
         <metal:block fill-slot="style_slot">
-            <link rel="stylesheet" type="text/css" 
+            <link rel="stylesheet" type="text/css"
                 tal:define="navroot context/@@plone_portal_state/navigation_root_url"
                 tal:attributes="href string:${navroot}/++resource++example.conference/conference.css"
                 />
@@ -137,7 +130,7 @@ Content type icons
 Finally, to use an image resource as the icon for a content type, simply
 list it in the FTI under the ``content_icon`` property. For example, in
 ``profiles/default/types/example.conference.presenter.xml``, we can use
-the following line, presuming we have a ``presenter.gif`` in the ``static``
+the following line, presuming we have a ``presenter.gif`` in the ``example.conference`` resource
 directory:
 
 .. code-block:: xml
diff --git a/docs/advanced/validators.rst b/docs/advanced/validators.rst
index 4ebe813..63147fb 100644
--- a/docs/advanced/validators.rst
+++ b/docs/advanced/validators.rst
@@ -81,9 +81,9 @@ Code not relevant to this example is snipped with an ellipsis (…)::
         __doc__ = _(u"The start or end date is invalid")
 
     class IProgram(model.Schema):
-        
+
         ...
-        
+
         start = schema.Datetime(
                 title=_(u"Start date"),
                 required=False,
@@ -93,9 +93,9 @@ Code not relevant to this example is snipped with an ellipsis (…)::
                 title=_(u"End date"),
                 required=False,
             )
-        
+
         ...
-        
+
         @invariant
         def validateStartEnd(data):
             if data.start is not None and data.end is not None:
@@ -107,8 +107,5 @@ Code not relevant to this example is snipped with an ellipsis (…)::
 Form validators
 ~~~~~~~~~~~~~~~
 
-Finally, you can write more powerful validators by using the `z3c.form`_
-widget validators. See :ref:`the z3c.form documentation <z3c.form>`_ for
-details.
-
-.. _z3c.form: http://pypi.python.org/pypi/z3c.form
+Finally, you can write more powerful validators by using the `z3c.form <http://pypi.python.org/pypi/z3c.form>`_
+widget validators. For details see the `z3c.form validators section <http://docs.plone.org/develop/plone/forms/z3c.form.html#validators>`_.
diff --git a/docs/advanced/vocabularies.rst b/docs/advanced/vocabularies.rst
index e24a982..91dd228 100644
--- a/docs/advanced/vocabularies.rst
+++ b/docs/advanced/vocabularies.rst
@@ -80,21 +80,23 @@ group::
     from zope.schema.interfaces import IContextSourceBinder
     from zope.schema.vocabulary import SimpleVocabulary
     from Products.CMFCore.utils import getToolByName
+    from zope.interface import directlyProvides
+
 
-    @grok.provider(IContextSourceBinder)
     def possibleOrganizers(context):
         acl_users = getToolByName(context, 'acl_users')
         group = acl_users.getGroupById('organizers')
         terms = []
-        
+
         if group is not None:
             for member_id in group.getMemberIds():
                 user = acl_users.getUserById(member_id)
                 if user is not None:
                     member_name = user.getProperty('fullname') or member_id
                     terms.append(SimpleVocabulary.createTerm(member_id, str(member_id), member_name))
-                
+
         return SimpleVocabulary(terms)
+    directlyProvides(possibleOrganizers, IContextSourceBinder)
 
 We use the PAS API to get the group and its members, building a list,
 which we then turn into a vocabulary.
@@ -152,28 +154,30 @@ function, allowing it to be set on a per-field basis. To do so, we turn
 our ``IContextSourceBinder`` into a class that is initialised with the
 group name::
 
+    from zope.interface import implements
+
     class GroupMembers(object):
         """Context source binder to provide a vocabulary of users in a given
         group.
         """
-        
-        grok.implements(IContextSourceBinder)
-        
+
+        implements(IContextSourceBinder)
+
         def __init__(self, group_name):
             self.group_name = group_name
-        
+
         def __call__(self, context):
             acl_users = getToolByName(context, 'acl_users')
             group = acl_users.getGroupById(self.group_name)
             terms = []
-        
+
             if group is not None:
                 for member_id in group.getMemberIds():
                     user = acl_users.getUserById(member_id)
                     if user is not None:
                         member_name = user.getProperty('fullname') or member_id
                         terms.append(SimpleVocabulary.createTerm(member_id, str(member_id), member_name))
-                
+
             return SimpleVocabulary(terms)
 
 Again, the source is set using the ``source`` argument to the ``Choice``
@@ -213,37 +217,47 @@ distribute vocabularies in third party packages.
 
 We can turn our first "members in the *organizers* group" vocabulary
 into a named vocabulary by creating a named utility providing
-``IVocabularyFactory``, like so::
+``IVocabularyFactory``. Add to your ``configure.zcml``:
+
+.. code-block:: xml
+
+    <utility
+        name="example.conference.Organisers"
+        provides="zope.schema.interfaces.IVocabularyFactory"
+        component="example.conference.vocabularies.OrganizersVocabularyFactory"
+    />
+
+    By convention, the vocabulary name is prefixed with the package name, to
+    ensure uniqueness.
+
+.. note::
+
+    Then create a vocabulary factory in ``vocabularies.py``:
+
+.. code-block:: python
 
-    from zope.schema.interfaces import IVocabularyFactory
     ...
 
-    class OrganizersVocabulary(object):
-        grok.implements(IVocabularyFactory)
-        
+    class OrganizersVocabularyFactory(object):
+
         def __call__(self, context):
             acl_users = getToolByName(context, 'acl_users')
             group = acl_users.getGroupById('organizers')
             terms = []
-        
+
             if group is not None:
                 for member_id in group.getMemberIds():
                     user = acl_users.getUserById(member_id)
                     if user is not None:
                         member_name = user.getProperty('fullname') or member_id
                         terms.append(SimpleVocabulary.createTerm(member_id, str(member_id), member_name))
-                
-            return SimpleVocabulary(terms)
 
-    grok.global_utility(OrganizersVocabulary, name=u"example.conference.Organizers")
-
-.. note::
-
-    By convention, the vocabulary name is prefixed with the package name, to
-    ensure uniqueness.
+            return SimpleVocabulary(terms)
 
 We can make use of this vocabulary in any schema by passing its name to
-the ``vocabulary`` argument of the ``Choice`` field constructor::
+the ``vocabulary`` argument of the ``Choice`` field constructor:
+
+.. code-block:: python
 
     organizer = schema.Choice(
         title=_(u"Organiser"),
@@ -346,7 +360,11 @@ In the ``IProgram`` schema (which, recall, derives from ``model.Schema`` and
 is therefore processed for form hints at startup), we then add the
 following::
 
-    form.widget(organizer=AutocompleteFieldWidget)
+.. code-block:: python
+
+    from plone.autoform import directives
+
+    directives.widget(organizer=AutocompleteFieldWidget)
     organizer = schema.Choice(
         title=_(u"Organiser"),
         vocabulary=u"plone.principalsource.Users",
diff --git a/docs/advanced/webdav-and-other-file-representations.rst b/docs/advanced/webdav-and-other-file-representations.rst
index ec9203f..54702ae 100644
--- a/docs/advanced/webdav-and-other-file-representations.rst
+++ b/docs/advanced/webdav-and-other-file-representations.rst
@@ -1,4 +1,4 @@
-WebDAV and other file representations 
+WebDAV and other file representations
 ======================================
 
 **Adding support for WebDAV and accessing and modifying a
@@ -24,10 +24,10 @@ server on the given port.
 
 Most operating systems support mounting WebDAV servers as folders.
 Unfortunately, not all WebDAV implementations are very good.
-Dexterity content should work with Windows Web Folders [*]_ 
+Dexterity content should work with Windows Web Folders [*]_
 and well-behaved clients such as Novell NetDrive.
 
-.. [*] open Internet Explorer, 
+.. [*] open Internet Explorer,
    go to :guilabel:`File | Open`,
    type in a WebDAV address, e.g.  http://localhost:9800,
    and then select :guilabel:`Open as web folder` before hitting
@@ -49,22 +49,27 @@ will be contained in the body of the message.
 If there is more than one primary field, a multi-part message is created.
 
 A field can be marked as “primary” using the ``primary()`` directive from
-`plone.directives.form`_. For example::
+`plone.supermodel`_. For example:
 
-    class ISession(form.Schema):
+.. code-block:: python
+
+    from plone.autoform import directives as form
+    from plone.supermodel import directives
+
+    class ISession(model.Schema):
         """A conference session. Sessions are managed inside Programs.
         """
-        
+
         title = schema.TextLine(
                 title=_(u"Title"),
                 description=_(u"Session title"),
             )
-        
+
         description = schema.Text(
                 title=_(u"Session summary"),
             )
-        
-        form.primary('details')
+
+        directives.primary('details')
         details = RichText(
                 title=_(u"Session details"),
                 required=False
@@ -76,8 +81,8 @@ A field can be marked as “primary” using the ``primary()`` directive from
                 source=ObjPathSourceBinder(object_provides=IPresenter.__identifier__),
                 required=False,
             )
-        
-        dexterity.write_permission(track='example.conference.ModifyTrack')
+
+        form.write_permission(track='example.conference.ModifyTrack')
         track = schema.Choice(
                 title=_(u"Track"),
                 source=possibleTracks,
@@ -111,7 +116,7 @@ It is also possible to upload such a file to create a new session.
 In order to do that, the ``content_type_registry`` tool needs to be
 configured with a predicate that can detect the type of content from the
 uploaded file and instantiate the correct type of object.
-Such predicates could be based on an extension or a filename pattern. 
+Such predicates could be based on an extension or a filename pattern.
 Below, we will see a different approach that uses a custom “file factory”
 for the containing ``Program`` type.
 
@@ -119,7 +124,7 @@ Containers
 ~~~~~~~~~~
 
 Container objects will be shown as *collections* (WebDAV-speak for
-folders) for WebDAV purposes. 
+folders) for WebDAV purposes.
 This allows the WebDAV client to open the container and list its contents.
 However, representing containers as collections makes it impossible to
 access the data contained in the various fields of the content object.
@@ -145,7 +150,7 @@ of your type.
   your own ``IRawReadFile`` and ``IRawWriteFile`` adapters.
   For example, if you have a content object that stores binary data,
   you could return this data directly, with an appropriate MIME type, to
-  allow it to be edited in a desktop program 
+  allow it to be edited in a desktop program
   (e.g. an image editor if the MIME type is ``image/jpeg``).
   The file ``plone.dexterity.filerepresentation`` contains
   two base classes, ``ReadFileBase`` and ``WriteFileBase``, which you may
@@ -164,27 +169,31 @@ since that is the only type that is allowed inside a ``Program`` container.
 
 The code, in ``program.py``, looks like this::
 
-    from five import grok
-    ...
-
+    from zope.component import adapter
     from zope.component import createObject
+    from zope.interface import implementer
     from zope.event import notify
     from zope.lifecycleevent import ObjectCreatedEvent
     from zope.filerepresentation.interfaces import IFileFactory
-    ...
 
-    class ProgramFileFactory(grok.Adapter):
+    @implementer(IFileFactory)
+    @adapter(IProgram)
+    class ProgramFileFactory(object):
         """Custom file factory for programs, which always creates a Session.
         """
-        
-        grok.implements(IFileFactory)
-        grok.context(IProgram)
-        
+
+        def __init__(self, context)
+            self.context = context
+
         def __call__(self, name, contentType, data):
             session = createObject('example.conference.session', id=name)
             notify(ObjectCreatedEvent(session))
             return session
 
+We need to register the adapter in configure.zcml::
+
+    <adapter factory=".program.ProgramFileFactory" />
+
 This adapter overrides the ``DefaultFileFactory`` found in
 `plone.dexterity.filerepresentation`_.
 It creates an object of the designated type, fires an
@@ -202,13 +211,13 @@ Here is a simple automated integration test for the same component::
             p1 = self.folder['p1']
             fileFactory = IFileFactory(p1)
             newObject = fileFactory('new-session', 'text/plain', 'dummy')
-            self.failUnless(ISession.providedBy(newObject))
+            self.assertTrue(ISession.providedBy(newObject))
 
 How it all works
 ----------------
 
 The rest of this section describes in some detail how the various WebDAV
-related components interact in Zope 2, CMF and Dexterity. 
+related components interact in Zope 2, CMF and Dexterity.
 This may be helpful if you are trying to customise or debug WebDAV behaviour.
 
 Background
@@ -239,9 +248,9 @@ operations to be overridden without subclassing.
 
 A ``HEAD`` request retrieves headers only.
 
-``Resource.HEAD()`` sets 
+``Resource.HEAD()`` sets
 ``Content-Type`` based on ``self.content_type()``,
-``Content-Length`` based on ``self.get\_size()``, 
+``Content-Length`` based on ``self.get\_size()``,
 ``Last-Modified`` based on ``self._p_mtime``,
 and an ``ETag`` based on ``self.http__etag()``, if available.
 
@@ -361,7 +370,7 @@ if available, on each property sheet.
 This method returns a list of name/value pairs in the correct WebDAV XML
 encoding, plus a status.
 
-If a ``propnames`` request is received, it calls ``dav__propnames()``, 
+If a ``propnames`` request is received, it calls ``dav__propnames()``,
 if available, on each property sheet.
 This method returns a list of property names in the correct WebDAV XML
 encoding, plus a status.
@@ -381,7 +390,7 @@ This in turn has two property sheets:
 The ``DefaultProperties`` instance contains the main property sheet. This
 typically has a ``title`` property, for example.
 
-``DAVProperties`` will provides various core WebDAV properties. 
+``DAVProperties`` will provides various core WebDAV properties.
 It defines a number of read-only properties:
 ``creationdate``, ``displayname``,
 ``resourcetype``, ``getcontenttype``, ``getcontentlength``, ``source``,
@@ -407,7 +416,7 @@ In particular:
 
 ``getcontenttype``
     delegates to the ``content_type()`` method, falling back on the
-    ``default_content_type()`` method. 
+    ``default_content_type()`` method.
     In Dexterity, ``content_type()`` is implemented to look up the
     ``IRawReadFile`` adapter on the context and return the value of its
     ``mimeType`` property.
@@ -432,7 +441,7 @@ In particular:
 Other properties in this and any other property sheets are returned as
 stored when requested.
 
-If the ``PROPFIND`` request specifies a depth of 1 or infinity 
+If the ``PROPFIND`` request specifies a depth of 1 or infinity
 (i.e. the client wants properties for items in a collection),
 the process is repeated for all items returned by the ``listDAVObjects()``
 methods,
@@ -457,7 +466,7 @@ A ``MKCOL`` request is used to create a new collection resource,
 i.e. create a new folder.
 
 ``Resource.MKCOL()`` raises "405 Method Not Allowed",
-because the resource already exists 
+because the resource already exists
 (remember that in WebDAV, the ``MKCOL`` request, like a ``PUT``
 for a new resource, is sent with a location that specifies the desired
 new resource location, not the location of the parent object).
@@ -545,7 +554,7 @@ For example, when the data object is updated via a PUT request, the
 .. _Cyberduck: http://cyberduck.ch/
 .. _External Editor: ../../../../../external-editor
 .. _plone.dexterity.filerepresentation: http://pypi.python.org/pypi/plone.dexterity.filerepresentation
-.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
+.. _plone.supermodel: http://pypi.python.org/pypi/plone.supermodel
 .. _plone.locking: http://pypi.python.org/pypi/plone.locking
 .. _plone.recipe.zope2instance: http://pypi.python.org/pypi/plone.recipe.zope2instance
 .. _plone.rfc822: http://pypi.python.org/pypi/plone.rfc822
diff --git a/docs/advanced/workflow.rst b/docs/advanced/workflow.rst
index 67153d4..d6781de 100644
--- a/docs/advanced/workflow.rst
+++ b/docs/advanced/workflow.rst
@@ -20,7 +20,7 @@ but hopefully this will cover the basics.
 .. note::
 
     There is nothing Dexterity-specific in this section.
-    Everything here applies equally well to content objects 
+    Everything here applies equally well to content objects
     created with Archetypes or using CMF directly.
 
 A DCWorkflow refresher
@@ -31,7 +31,7 @@ originally posted `here`_.
 You may find some of this a little detailed on first reading,
 so feel free to skip to the specifics later on.
 However, it is useful to be familiar with the high level concepts.
-You’re unlikely to need multi-workflow chains 
+You’re unlikely to need multi-workflow chains
 in your first few attempts at workflow, for instance,
 but it’s useful to know what it is if you come across the term.
 
@@ -39,29 +39,29 @@ but it’s useful to know what it is if you come across the term.
 
 Plone’s workflow system is known as DCWorkflow.
 It is a *states-and-transitions* system,
-which means that your workflow starts in a particular *state* 
-(the *initial state*) and then moves to other states via *transitions* 
+which means that your workflow starts in a particular *state*
+(the *initial state*) and then moves to other states via *transitions*
 (also called *actions* in CMF).
 
 When an object enters a particular state (including the initial state),
 the workflow is given a chance to update **permissions** on the object.
-A workflow manages a number of permissions – 
-typically the “core” CMF permissions 
-like :guilabel:`View`, :guilabel:`Modify portal content` and so on – 
+A workflow manages a number of permissions –
+typically the “core” CMF permissions
+like :guilabel:`View`, :guilabel:`Modify portal content` and so on –
 and will set those on the object at each state change.
 Note that this is event-driven, rather than a real-time security check:
 only by changing the state is the security information updated.
-This is why you need to click :guilabel:`Update security settings` 
+This is why you need to click :guilabel:`Update security settings`
 at the bottom of the ``portal_workflow``
 screen in the ZMI when you change your workflows’ security settings and
 want to update existing objects.
 
-A state can also assign *local roles* to *groups*. 
+A state can also assign *local roles* to *groups*.
 This is akin to assigning roles to groups on Plone’s :guilabel:`Sharing` tab,
 but the mapping of roles to groups happens on each state change,
 much like the mapping of roles to permissions.
 Thus, you can say that in the ``pending_secondary`` state,
-members of the :guilabel:`Secondary reviewers` group 
+members of the :guilabel:`Secondary reviewers` group
 have the :guilabel:`Reviewer` local role.
 This is powerful stuff when combined with the more usual role-to-permission
 mapping, although it is not very commonly used.
@@ -71,31 +71,31 @@ such as the *actor* (the user that invoked the transition),
 the *action* (the name of the transition),
 the date and time and so on.
 The list of variables is dynamic,
-so each workflow can define any number of variables 
-linked to `TALES`_ expressions that are invoked 
+so each workflow can define any number of variables
+linked to `TALES`_ expressions that are invoked
 to calculate the current value at the point of transition.
 The workflow also keeps track of the current state of each object.
-The state is exposed as a special type of workflow variable 
+The state is exposed as a special type of workflow variable
 called the *state variable*.
 Most workflows in Plone uses the name ``review_state`` as the state variable.
 
-Workflow variables are recorded for each state change 
+Workflow variables are recorded for each state change
 in the *workflow history*.
 This allows you to see when a transition occurred,
 who effected it, and what state the object was in before or after.
-In fact, the “current state” of the workflow is internally looked up 
+In fact, the “current state” of the workflow is internally looked up
 as the most recent entry in the workflow history.
 
 Workflow variables are also the basis for *worklists*.
-These are basically pre-defined catalog queries 
+These are basically pre-defined catalog queries
 run against the current set of workflow variables.
 Plone’s review portlet shows all current worklists
 from all installed workflows.
 This can be a bit slow,
-but it does mean that you can use a single portlet 
-to display an amalgamated list of all items on all worklists 
+but it does mean that you can use a single portlet
+to display an amalgamated list of all items on all worklists
 that apply to the current user.
-Most Plone workflows have a single worklist 
+Most Plone workflows have a single worklist
 that matches on the ``review_state`` variable,
 e.g. showing all items in the ``pending`` state.
 
@@ -110,18 +110,18 @@ but not change the state (or security) of the object.
 
 Transitions are controlled by one or more *guards*.
 These can be permissions (the preferred approach),
-roles (mostly useful for the :guilabel:`Owner` role – 
+roles (mostly useful for the :guilabel:`Owner` role –
 in other cases it is normally better to use permissions)
 or `TALES`_ expressions.
 A transition is available if all its guard conditions are true.
-A transition with no guard conditions is available to everyone 
+A transition with no guard conditions is available to everyone
 (including anonymous!).
 
-Transitions are user-triggered by default, but may be **automatic**. 
+Transitions are user-triggered by default, but may be **automatic**.
 An automatic transition triggers immediately following another transition
 provided its guard conditions pass.
 It will not necessarily trigger as soon as the guard condition becomes true,
-as that would involve continually re-evaluating guards 
+as that would involve continually re-evaluating guards
 for all active workflows on all objects!
 
 When a transition is triggered,
@@ -133,9 +133,9 @@ There is a higher level ``IActionSucceededEvent`` in ``Products.CMFCore``
 that is more commonly used to react after a workflow action has completed.
 
 In addition to the events, you can configure workflow **scripts**.
-These are either created through-the-web 
+These are either created through-the-web
 or (more commonly) as External Methods [*]_,
-and may be set to execute before a transition is complete 
+and may be set to execute before a transition is complete
 (i.e.  before the object enters the target state)
 or just after it has been completed (the object is in the new state).
 Note that if you are using event handlers,
@@ -164,7 +164,7 @@ This is called a *workflow chain*.
 Note that in Plone, the workflow chain of an object is looked up by
 multi-adapting the object and the workflow to the ``IWorkflowChain``
 interface.
-The adapter factory should return a tuple of string workflow names 
+The adapter factory should return a tuple of string workflow names
 (``IWorkflowChain`` is a specialisation of ``IReadSequence``, i.e. a tuple).
 The default obviously looks at the mappings in the ``portal_workflow`` tool,
 but it is possible to override the mapping,
@@ -178,7 +178,7 @@ The standard ``portal_workflow`` API (in particular,
 ``doActionFor()``, which is used to change the state of an object)
 also assumes the transition ids are unique.
 If you have two workflows in the chain and both currently have a ``submit``
-action available, 
+action available,
 only the first workflow will be transitioned if you do
 ``portal_workflow.doActionFor(context, ‘submit’)``.
 Plone will show all available transitions from all workflows in the current
@@ -186,10 +186,10 @@ object’s chain in the ``State`` drop-down,
 so you do not need to create any custom UI for this.
 However, Plone always assumes the state variable is called ``review_state``
 (which is also the variable indexed in ``portal_catalog``).
-Therefore, the state of a secondary workflow won’t show up 
+Therefore, the state of a secondary workflow won’t show up
 unless you build some custom UI.
 
-In terms of security, remember that the role-to-permission 
+In terms of security, remember that the role-to-permission
 (and group-to-local-role) mappings
 are event-driven and are set after each transition.
 If you have two concurrent workflows that manage the same permissions,
@@ -200,12 +200,12 @@ will change, leaving the settings for other permissions untouched.
 
 Multiple workflows can be very useful in case you have concurrent processes.
 For example, an object may be published, but require translation.
-You can track the review state in the main workflow 
+You can track the review state in the main workflow
 and the translation state in another.
-If you index the state variable for the second workflow in the catalog 
+If you index the state variable for the second workflow in the catalog
 (the state variable is always available on the indexable object wrapper
-so you only need to add an index with the appropriate name 
-to ``portal_catalog``) 
+so you only need to add an index with the appropriate name
+to ``portal_catalog``)
 you can search for all objects pending translation,
 for example using a *Collection*.
 
@@ -244,7 +244,7 @@ In ``setup.py``, we have::
 A workflow definition using ``collective.wtf`` consists of a CSV file in
 the ``profiles/default/workflow_csv`` directory,
 which we will create,
-and a ``workflows.xml`` file in ``profiles/default`` 
+and a ``workflows.xml`` file in ``profiles/default``
 which maps types to workflows.
 
 The workflow mapping in ``profiles/default/workflows.xml`` looks like
@@ -263,7 +263,7 @@ this:
 
 The CSV file itself is found in
 ``profiles/default/workflow_csv/example.conference.session_workflow.csv``.
-It contains the following, 
+It contains the following,
 which was exported to CSV from an OpenOffice spreadsheet.
 You can find the original spreadsheet with the
 `example.conference source code`_. This applies some useful formatting,
@@ -368,7 +368,7 @@ This workflow assumes that regular members can add *Session* proposals to
 *Programs*, which are then reviewed.
 Previously, we granted the
 ``example.conference: Add session`` permission to the ``Member`` role.
-This is necessary, but not sufficient 
+This is necessary, but not sufficient
 to allow members to add sessions to programs.
 The user will also need the generic ``Add portal content`` permission in the
 ``Program`` folder.
diff --git a/docs/behaviors/behavior-basics.rst b/docs/behaviors/behavior-basics.rst
index e689aed..d304964 100644
--- a/docs/behaviors/behavior-basics.rst
+++ b/docs/behaviors/behavior-basics.rst
@@ -1,4 +1,4 @@
-Behavior basics 
+Behavior basics
 ================
 
 **The fundamental concepts behind behaviors**
diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst
index b80ad2d..a05d299 100644
--- a/docs/behaviors/creating-and-registering-behaviors.rst
+++ b/docs/behaviors/creating-and-registering-behaviors.rst
@@ -1,4 +1,4 @@
-Creating and registering behaviors 
+Creating and registering behaviors
 ====================================
 
 **How to create a basic behavior that provides form fields**
@@ -18,18 +18,11 @@ First, there are a few dependencies in *setup.py*:
           install_requires=[
               ...,
               'plone.behavior',
-              'plone.directives.form',
               'zope.schema',
               'zope.interface',
               'zope.component',
-              'rwproperty',
           ],
 
-The dependency on *plone.directives.form* is there to support form
-fields. If your behavior does not require form fields, you can skip this
-dependency. The *rwproperty* dependency provides some convenience
-decorators that are used in the behavior adapter factory class.
-
 Next, we have *behaviors.zcml*, which is included from *configure.zcml*
 and contains all necessary configuration to set up the behaviors. It
 looks like this:
@@ -39,15 +32,9 @@ looks like this:
     <configure
         xmlns="http://namespaces.zope.org/zope"
         xmlns:plone="http://namespaces.plone.org/plone"
-        xmlns:grok="http://namespaces.zope.org/grok"
         i18n_domain="collective.gtags">
 
         <include package="plone.behavior" file="meta.zcml" />
-        
-        <include package="plone.directives.form" file="meta.zcml" />
-        <include package="plone.directives.form" />
-
-        <grok:grok package=".behaviors" />
 
         <plone:behavior
             title="GTags"
@@ -61,17 +48,6 @@ looks like this:
 We first include the *plone.behavior meta.zcml* file, so that we get
 access to the *<plone:behavior />* ZCML directive.
 
-The next three lines include *plone.directives.form* and its *meta.zcml*
-file, and then invoke the *grok* action on the *behaviors* module. This
-is not directly related to the behavior, but rather to the configuration
-of a schema interface that provides form fields and display hints to
-*plone.autoform* (and thus Dexterity’s standard add and edit forms). If
-your behavior is not a form field provider, you can omit these lines.
-Similarly, if you have grokked the entire package elsewhere with
-*<grok:grok package=“.” />*, you can omit the *<grok:grok
-package=“.behaviors” />* line. Otherwise, adjust it to reflect the
-module or package where your behaviors are kept.
-
 The behavior itself is registered with the *<plone:behavior />*
 directive. We set a *title* and a *description*, and then speicfy the
 **behavior interface** with the *provides* attribute. This attribute is
@@ -84,7 +60,7 @@ for a type, it will be possible to adapt instances of that type to
 
 The *behaviors.py* module looks like this:
 
-::
+.. code-block:: python
 
     """Behaviours to assign tags (to ideas).
 
@@ -92,28 +68,26 @@ The *behaviors.py* module looks like this:
     standard Subject field.
     """
 
-    from rwproperty import getproperty, setproperty
-
-    from zope.interface import implements, alsoProvides
-    from zope.component import adapts
-
-    from plone.directives import form
-    from collective.gtags.field  import Tags
-
+    from collective.gtags import MessageFactory as _
+    from collective.gtags.field import Tags
+    from plone.autoform import directives as form
+    from plone.autoform.interfaces import IFormFieldProvider
+    from plone.supermodel import model
     from Products.CMFCore.interfaces import IDublinCore
+    from zope.interface import implementer, alsoProvides
+    from zope.component import adapter
 
-    from collective.gtags import MessageFactory as _
 
-    class ITags(form.Schema):
+    class ITags(model.Schema):
         """Add tags to content
         """
-        
+
         form.fieldset(
                 'categorization',
                 label=_(u'Categorization'),
                 fields=('tags',),
             )
-        
+
         tags = Tags(
                 title=_(u"Tags"),
                 description=_(u"Applicable tags"),
@@ -121,22 +95,23 @@ The *behaviors.py* module looks like this:
                 allow_uncommon=True,
             )
 
-    alsoProvides(ITags, form.IFormFieldProvider)
+    alsoProvides(ITags, IFormFieldProvider)
+
 
+    @implementer(ITags)
+    @adapter(IDublinCore)
     class Tags(object):
         """Store tags in the Dublin Core metadata Subject field. This makes
         tags easy to search for.
         """
-        implements(ITags)
-        adapts(IDublinCore)
 
         def __init__(self, context):
             self.context = context
-        
-        @getproperty
+
+        @property
         def tags(self):
             return set(self.context.Subject())
-        @setproperty
+        @tags.setter
         def tags(self, value):
             if value is None:
                 value = ()
@@ -148,9 +123,8 @@ have added methods and additional fields if required. Naturally, these
 need to be implemented by the behavior adapter.
 
 Since we want this behavior to provide form fields, we derive the
-behavior interface from *form.Schema* and set form hints using
-*plone.directives.form*(remember that these will only take effect if the
-package is *grokked*). We also mark the *ITags* interface with
+behavior interface from *model.Schema* and set form hints using
+*plone.autoform.directives*. We also mark the *ITags* interface with
 *IFormFieldProvider* to signal that it should be processed for form
 fields by the standard forms. See the `Dexterity Developer Manual`_ for
 more information about setting form hints in schema interfaces.
@@ -162,14 +136,11 @@ Next, we write the class that implements the behavior adapter and acts
 the adapter factory. Notice how it implements the behavior interface
 (*ITags*), and adapts a broad interface *(IDublinCore*). The behavior
 cannot be enabled on types not supporting this interface. In many cases,
-you will omit the *adapts()* line, provided your behavior is generic
+you will omit the *adapter()* line, provided your behavior is generic
 enough to work on any context.
 
 The adapter is otherwise identical to any other adapter. It implements
-the interface, here by storing values in the *Subject* field. The use of
-*getproperty* and *setproperty* from the `rwproperty`_ package is for
-convenience only.
+the interface, here by storing values in the *Subject* field.
 
 .. _Dexterity Developer Manual: ../index.html
-.. _rwproperty: http://pypi.python.org/pypi/rwproperty
 .. _collective.gtags: http://svn.plone.org/svn/collective/collective.gtags
diff --git a/docs/behaviors/intro.rst b/docs/behaviors/intro.rst
index 81d8ffe..c78c66f 100644
--- a/docs/behaviors/intro.rst
+++ b/docs/behaviors/intro.rst
@@ -1,4 +1,4 @@
-Introduction 
+Introduction
 =============
 
 **About this manual**
diff --git a/docs/behaviors/providing-marker-interfaces.rst b/docs/behaviors/providing-marker-interfaces.rst
index 6b606b6..0f33274 100644
--- a/docs/behaviors/providing-marker-interfaces.rst
+++ b/docs/behaviors/providing-marker-interfaces.rst
@@ -1,4 +1,4 @@
-Providing marker interfaces 
+Providing marker interfaces
 =============================
 
 **How to use behaviors to set marker interfaces on instances of a given type.**
@@ -84,15 +84,9 @@ interfaces that store their values in annotations. We’ll describe this
 in more detail later. We could just as easily have provided our own
 factory in this example.
 
-This whole package is grokked, so in *configure.zcml* we have:
-
-.. code-block:: xml
-
-        <grok:grok package="." />
-
 The *reviewers.py* module contains the following:
 
-::
+.. code-block:: python
 
     """Behavior to enable certain users to nominate reviewers
 
@@ -101,25 +95,22 @@ The *reviewers.py* module contains the following:
     OfficialReviewer roles appropriately.
     """
 
-    from five import grok
-
-    from zope.interface import alsoProvides, Interface
-
-    from plone.directives import form
-    from zope import schema
-
-    from plone.formwidget.autocomplete.widget import AutocompleteMultiFieldWidget
-
     from borg.localrole.interfaces import ILocalRoleProvider
+    from iz.behaviors import MessageFactory as _
+    from plone.autoform import directives as form
+    from plone.autoform.interfaces import IFormFieldProvider
+    from plone.formwidget.autocomplete.widget import AutocompleteMultiFieldWidget
     from plone.indexer.interfaces import IIndexer
+    from plone.supermodel import model
     from Products.ZCatalog.interfaces import IZCatalog
+    from zope import schema
+    from zope.interface import alsoProvides, Interface
+    from zope.component import adapter
 
-    from iz.behaviors import MessageFactory as _
-
-    class IReviewers(form.Schema):
+    class IReviewers(model.Schema):
         """Support for specifying official and unofficial reviewers
         """
-        
+
         form.fieldset(
                 'ownership',
                 label=_(u'Ownership'),
@@ -135,7 +126,7 @@ The *reviewers.py* module contains the following:
                 required=False,
                 missing_value=(), # important!
             )
-        
+
         form.widget(unofficial_reviewers=AutocompleteMultiFieldWidget)
         form.write_permission(unofficial_reviewers='iz.EditUnofficialReviewers')
         unofficial_reviewers = schema.Tuple(
@@ -146,7 +137,7 @@ The *reviewers.py* module contains the following:
                 missing_value=(), # important!
             )
 
-    alsoProvides(IReviewers, form.IFormFieldProvider)
+    alsoProvides(IReviewers, IFormFieldProvider)
 
     class IReviewersMarker(Interface):
         """Marker interface that will be provided by instances using the
@@ -154,60 +145,60 @@ The *reviewers.py* module contains the following:
         this marker.
         """
 
-    class ReviewerLocalRoles(grok.Adapter):
+    @implementer(ILocalRoleProvider)
+    @adapter(IReviewersMarker)
+    class ReviewerLocalRoles(object):
         """Grant local roles to reviewers when the behavior is used.
         """
-        
-        grok.implements(ILocalRoleProvider)
-        grok.context(IReviewersMarker)
-        grok.name('iz.behaviors.reviewers')
-        
+
+        def __init__(self, context):
+            self.context = context
+
         def getRoles(self, principal_id):
             """If the user is in the list of reviewers for this item, grant
             the Reader, Editor and Contributor local roles.
             """
-            
+
             c = IReviewers(self.context, None)
             if c is None or (not c.official_reviewers and not c.unofficial_reviewers):
                 return ()
-            
+
             if principal_id in c.official_reviewers:
                 return ('Reviewer', 'OfficialReviewer',)
             elif principal_id in c.unofficial_reviewers:
                 return ('Reviewer',)
-            
+
             return ()
-            
+
         def getAllRoles(self):
             """Return a list of tuples (principal_id, roles), where roles is a
             list of roles for the given user id.
             """
-            
+
             c = IReviewers(self.context, None)
             if c is None or (not c.official_reviewers and not c.unofficial_reviewers):
                 return
-            
+
             seen = set ()
-            
+
             for principal_id in c.official_reviewers:
                 seen.add(principal_id)
                 yield (principal_id, ('Reviewer', 'OfficialReviewer'),)
-                
+
             for principal_id in c.unofficial_reviewers:
                 if principal_id not in seen:
                     yield (principal_id, ('Reviewer',),)
 
-    class ReviewersIndexer(grok.MultiAdapter):
+
+    @implementer(IIndexer)
+    @adapter(IReviewersMarker, IZCatalog)
+    class ReviewersIndexer(object):
         """Catalog indexer for the 'reviewers' index.
         """
-        
-        grok.implements(IIndexer)
-        grok.adapts(IReviewersMarker, IZCatalog)
-        grok.name('reviewers')
-        
+
         def __init__(self, context, catalog):
             self.reviewers = IReviewers(context)
-        
+
         def __call__(self):
             official = self.reviewers.official_reviewers or ()
             unofficial = self.reviewers.unofficial_reviewers or ()
@@ -217,22 +208,27 @@ Note that the *iz.EditOfficialReviewers* and
 *iz.EditUnofficialReviewers* permissions are defined and granted
 elsewhere.
 
+We need to register these components in *configure.zcml*:
+
+.. code-block:: xml
+
+    <adapter factory=".reviewers.ReviewerLocalRoles" name="iz.behaviors.reviewers" />
+    <adapter factory=".reviewers.ReviewersIndexer" name="reviewers" />
+
+
 This is quite a complex behavior, but hopefully you can see what’s going
 on:
 
--  There is a standard schema interface, which is grokked for form hints
-   using *plone.directives.form* and marked as an *IFormFieldProvider*.
+-  There is a standard schema interface, which includes form hints
+   using *plone.autoform.directives* and is marked as an *IFormFieldProvider*.
    It uses *plone.formwidget.autocomplete* and *plone.principalsource*
    to implement the fields.
 -  We define a marker interface (*IReviewersMarker*) and register this
    with the *marker* attribute of the *<plone:behavior />* directive.
--  We define an adapter from this marker to *ILocalRoles* from
-   *borg.localrole*. Here, we have chosen to use *grokcore.component*
-   (via *five.grok*) to register the adapter. We could have used an
-   *<adapter />* ZCML statement as well, of course.
--  Similarly, we define a multi-adapter to *IIndexer*, as provided by
-   *plone.indexer*. Again, we’ve chosen to use
-   convention-over-configuration via *five.grok* to register this.
+-  We define and register an adapter from this marker to *ILocalRoles* from
+   *borg.localrole*.
+-  Similarly, we register a multi-adapter to *IIndexer*, as provided by
+   *plone.indexer*.
 
 Although this behavior provides a lot of functionality, it is no more
 difficult for integrators to use than any other: they would simply list
diff --git a/docs/behaviors/schema-only-behaviors.rst b/docs/behaviors/schema-only-behaviors.rst
index 30fb3f9..60ff860 100644
--- a/docs/behaviors/schema-only-behaviors.rst
+++ b/docs/behaviors/schema-only-behaviors.rst
@@ -65,16 +65,17 @@ As an example, here’s the standard *IRelatedItems* behavior from
 
 The *IRelatedItems* schema looks like this:
 
-::
-
-    from zope.interface import alsoProvides
+.. code-block:: python
 
+    from plone.autoform.directives import form
+    form plone.autoform.interfaces import IFormFieldProvider
+    from plone.formwidget.contenttree import ObjPathSourceBinder
+    from plone.supermodel import model
     from z3c.relationfield.schema import RelationChoice, RelationList
+    from zope.interface import alsoProvides
 
-    from plone.formwidget.contenttree import ObjPathSourceBinder
-    from plone.directives import form
 
-    class IRelatedItems(form.Schema):
+    class IRelatedItems(model.Schema):
         """Behavior interface to make a type support related items.
         """
 
@@ -89,10 +90,10 @@ The *IRelatedItems* schema looks like this:
             required=False,
             )
 
-    alsoProvides(IRelatedItems, form.IFormFieldProvider)
+    alsoProvides(IRelatedItems, IFormFieldProvider)
 
-This is a standard schema using *plone.directives.form* (the package is
-also grokked). However, notice the lack of a behavior factory. This is a
+This is a standard schema using *plone.autoform.directives*.
+However, notice the lack of a behavior factory. This is a
 directly provided “marker” interface, except that it has attributes, and
 so it is not actually a marker interface. The result is that the
 *relatedItems* attribute will be stored directly onto a content object
diff --git a/docs/behaviors/testing-behaviors.rst b/docs/behaviors/testing-behaviors.rst
index 5411bf1..4760500 100644
--- a/docs/behaviors/testing-behaviors.rst
+++ b/docs/behaviors/testing-behaviors.rst
@@ -93,7 +93,7 @@ tests the *ITags* behavior we saw on the first page of this manual.
 
     We also expect this behavior to be a form field provider. Let's verify that.
 
-        >>> from plone.directives.form import IFormFieldProvider
+        >>> from plone.autoform.interfaces import IFormFieldProvider
         >>> IFormFieldProvider.providedBy(tags_behavior.interface)
         True
 
diff --git a/docs/custom-views.rst b/docs/custom-views.rst
index 092b96d..e25516a 100644
--- a/docs/custom-views.rst
+++ b/docs/custom-views.rst
@@ -20,36 +20,43 @@ at least if you use the standard FTI configuration. This is because the
 FTI’s ``default_view`` property is set to ``view``, and ``view`` is in the
 list of ``view_methods.``
 
-When working with Dexterity, we will typically configure our views using
-the `five.grok`_ configuration system, eschewing ZCML configuration.
-Below, we will show how to add simple views for the ``Program`` and
-``Speaker`` types. Next, we will show how to use display forms to take
-advantage of the standard widgets if required.
-
-The `five.grok`_ view approach uses a class in the content type’s module,
-which is automatically associated with a template in an accompanying
-directory. These directories should be created next to the module files,
-so we will have ``program_templates``, ``presenter_templates`` and
-``session_templates``.
-
-(Note for newbies:
-A view will have update() and render() methods.  We will inherit these,
-with the result that our view will render a similarly-named page template.
-If you wanted, you could provide your own update and/or render methods.
-The sessions() method you will see defined below exists to provide
-information that will be referenced by the page template.)
-
 .. note::
 
     ``addcontent`` will have created a "SampleView" class in each content type's .py file. Just rename it to "View" to follow the example.
 
-In ``program.py``, the view is registered as follows:
+
+First create a view registration with a ``<browser:page />`` ZCML directive in your ```configure.zcml`` file:
+
+.. code-block:: xml
+
+    <configure
+        xmlns="http://namespaces.zope.org/zope"
+        xmlns:browser="http://namespaces.zope.org/browser">
+
+        ...
+
+        <browser:page
+            name="view"
+            for="example.conference.program.IProgram"
+            class="example.conference.program.ProgramView"
+            template="templates/programview.pt"
+            permission="zope2.View"
+            />
+
+    </configure>
+
+Secondly add a browser view in ``program.py`` as follows:
 
 .. code-block:: python
 
-    class View(grok.View):
-        grok.context(IProgram)
-        grok.require('zope2.View')
+    from Acquisition import aq_inner
+    from Products.CMFCore.utils import getToolByName
+    from Products.Five import BrowserView
+
+    from example.conference.session import ISession
+
+
+    class ProgramView(BrowserView):
 
         def sessions(self):
             """Return a catalog search result of sessions to show
@@ -62,45 +69,13 @@ In ``program.py``, the view is registered as follows:
                            path='/'.join(context.getPhysicalPath()),
                            sort_on='sortable_title')
 
-This creates a view registration similar to what you may do with a
-``<browser:page />`` ZCML directive. We have also added a helper method
-which will be used in the view. Note that this requires some imports at
-the top of the file:
+We have added ``sessions``, a helper method
+which will be used in the view.
 
-.. code-block:: python
+You can add any methods to the view. They will be available to the template via
+the ``view`` variable. The content object is available via ``context``.
 
-    from Acquisition import aq_inner
-    from Products.CMFCore.utils import getToolByName
-
-    from example.conference.session import ISession
-
-The view registration works as follows:
-
-- The view name will be ``@@view``, taken from the class name in
-  lowercase. You can specify an alternative name with
-  ``grok.name('some-name')`` if required.
-- The ``grok.context()`` directive specifies that this view is used for
-  objects providing ``IProgram``.
-- You can add a ``grok.layer()`` directive if you want to specify a
-  browser layer.
-- The ``grok.require()`` directive specifies the required permission for
-  this view.
-  It uses the Zope 3 permission name.
-  ``zope2.View`` and ``zope.Public`` are the most commonly used permissions
-  (in fact, ``zope.Public`` is not actually a permission, it just means “no
-  permission required”).
-  For a list of other standard permissions, see
-  ``parts/omelette/Products/Five/permissions.zcml``.
-  We will cover
-  creating custom permissions later in this manual.
-- Any methods added to the view will be available to the template via
-  the ``view`` variable. The content object is available via ``context``,
-  as usual.
-
-This is associated with a file in ``program_templates/view.pt``. The file name
-matches the class name (even if a different view name was specified).
-``addcontent`` will have created a sampleview.pt file. Just rename it to
-continue with the example. This contains:
+Finaly add a template in ``templates/programview.pt``:
 
 .. code-block:: html
 
@@ -173,15 +148,26 @@ contained within the program.
    MIME type (e.g. ``text/html``) and the rendered output text.
    *RichText* fields are covered in more detail :ref:`later in this manual <richtext-label>`.
 
-The view for ``Presenter``, in ``presenter.py``, is even simpler:
+The view for ``Presenter`` is even simpler:
 
-.. code-block:: python
+.. code-block:: xml
+
+    <configure
+        xmlns="http://namespaces.zope.org/zope"
+        xmlns:browser="http://namespaces.zope.org/browser">
+
+        ...
+
+        <browser:page
+            name="view"
+            for="example.conference.program.IPresenter"
+            template="templates/presenterview.pt"
+            permission="zope2.View"
+            />
 
-    class View(grok.View):
-        grok.context(IPresenter)
-        grok.require('zope2.View')
+    </configure>
 
-Its template, in ``presenter_templates/view.pt``, is similar to the
+The template, in ``templates/presenterview.pt``, is similar to the
 previous template:
 
 .. code-block:: html
@@ -226,34 +212,52 @@ technique. Your view does not have to be related to a particular content
 type, even. You could set the context to ``Interface``, for example, to
 make a view that’s available on all types.
 
-Display forms
---------------
+Display view
+------------
 
 **Using display widgets in your views**
 
-In the previous section, we created a view extending ``grok.View``. This
+In the previous section, we created a browser view. This
 kind of view is the most common, but sometimes we want to make use of
 the widgets and information in the type’s schema more directly, for
 example to invoke transforms or re-use more complex HTML.
 
-To do this, you can use a *display form*. This is really just a view
+To do this, you can use a *display view*. This is really just a view
 base class that knows about the schema of a type. We will use an example
-in ``session.py``, with a template in ``session_templates/view.pt.``
+in ``session.py``, with a template in ``templates/sessionview.pt``.
 
-.. note:: Display forms involve the same type of overhead as add- and
-   edit-forms. If you have complex forms with many behaviors, fieldsets and
-   widget hints, you may notice a slow-down compared to standard views, at
-   least on high volume sites.
+.. note:: *Display view* involve the same type of overhead as add- and
+   edit-forms. If you have complex content type with many behaviors, fieldsets and
+   widget hints, you may notice a slow-down. This can be a problem
+   on high volume sites.
 
 The new view class is pretty much the same as before, except that we
-derive from ``dexterity.DisplayForm``
-(``plone.directives.dexterity.DisplayForm``):
+derive from ``plone.dexterity.browser.view.DefaultView``:
+
+.. code-block:: xml
+
+    <configure
+        xmlns="http://namespaces.zope.org/zope"
+        xmlns:browser="http://namespaces.zope.org/browser">
+
+        ...
+
+        <browser:page
+            name="view"
+            for="example.conference.program.ISession"
+            class="example.conference.session.SessionView"
+            template="templates/sessionview.pt"
+            permission="zope2.View"
+            />
+
+    </configure>
 
 .. code-block:: python
 
-    class View(dexterity.DisplayForm):
-        grok.context(ISession)
-        grok.require('zope2.View')
+    from plone.dexterity.browser.view import DefaultView
+
+    class SessionView(DefaultView):
+        pass
 
 This gives our view a few extra properties that we can use in the
 template:
@@ -279,7 +283,7 @@ template:
 
 The ``w`` dict is the most commonly used.
 
-The ``session_templates/view.pt`` template contains the following:
+The ``templates/sessionview.pt`` template contains the following:
 
 .. code-block:: html
 
@@ -313,4 +317,3 @@ properties include ``__name__``, the field name, and ``label``, the
 field title.
 
 .. _z3c.form: http://pypi.python.org/pypi/z3c.form
-.. _five.grok: http://pypi.python.org/pypi/five.grok
diff --git a/docs/designing.rst b/docs/designing.rst
index fb5fae4..420cb19 100644
--- a/docs/designing.rst
+++ b/docs/designing.rst
@@ -1,4 +1,4 @@
-Designing with content types 
+Designing with content types
 ==============================
 
 **How to solve problems with content types**
diff --git a/docs/grok/advanced/behaviours.rst b/docs/grok/advanced/behaviours.rst
new file mode 100644
index 0000000..fbd4a1d
--- /dev/null
+++ b/docs/grok/advanced/behaviours.rst
@@ -0,0 +1,46 @@
+Using behaviors
+----------------
+
+**Finding and adding behaviors**
+
+Dexterity introduces the concept of *behaviors* – re-usable bundles of
+functionality and/or form fields which can be turned on or off on a
+per-type basis.
+
+Each behavior has a unique interface. When a behavior is enabled on a
+type, you will be able to adapt that type to the behavior’s interface.
+If the behavior is disabled, the adaptation will fail. The behavior
+interface can also be marked as an ``IFormFieldsProvider``, in which case
+it will add fields to the standard add and edit forms. Finally, a
+behavior may imply a sub-type: a marker interface which will be
+dynamically provided by instances of the type for which the behavior is
+enabled.
+
+We will not cover writing new behaviors in this manual, but we will show
+how to enable behaviors on a type. Writing behaviors is covered in the
+`Behaviors manual <http://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html>`_.
+
+In fact, we’ve already seen one
+standard behavior applied to our example types, registered in the FTI
+and imported using GenericSetup:
+
+.. code-block:: xml
+
+     <property name="behaviors">
+         <element value="plone.app.content.interfaces.INameFromTitle" />
+     </property>
+
+Other behaviors are added in the same way, by listing additional
+behavior interfaces as elements of the ``behaviors`` property.
+
+Behaviors are normally registered with the ``<plone:behavior />`` ZCML
+directive. When registered, a behavior will create a global utility
+providing ``IBehavior``, which is used to provide some metadata, such as a
+title and description for the behavior.
+
+You can find and apply behaviors via the :guilabel:`Dexterity Content Types`
+control panel that is installed with `plone.app.dexterity`_. For a list
+of standard behaviors that ship with Dexterity, see the reference at the
+end of this manual.
+
+.. _plone.app.dexterity: http://pypi.python.org/pypi/plone.app.dexterity
diff --git a/docs/grok/advanced/catalog-indexing-strategies.rst b/docs/grok/advanced/catalog-indexing-strategies.rst
new file mode 100644
index 0000000..3f1cad6
--- /dev/null
+++ b/docs/grok/advanced/catalog-indexing-strategies.rst
@@ -0,0 +1,299 @@
+============================
+Catalog indexing strategies
+============================
+
+You may have two different interests in regard to indexing your custom content type objects:
+
+    * Making particular fields searchable via Plone's main search facility;
+
+    * Indexing particular fields for custom lookup.
+
+Making content searchable
+*************************
+
+Plone's main index is called *SearchableText*. This is the index which is searched when you use the main portal search. Fields in your custom content types are not necessarily added to SearchableText. Fields added via Dublin-core behaviors are automatically part of SearchableText; others are not.
+
+So, you may need to explicitly add fields to SearchableText if you wish their information to be findable via the main search. There are all sorts of highly customizable ways to do this, but the easiest is to use the `collective.dexteritytextindexer  <https://github.com/collective/collective.dexteritytextindexer>`_ add-on package.
+
+Add ``collective.dexteritytextindexer`` to your buildout and you will gain a new Dexterity behavior that will allow you to easily add fields to SearchableText. Once you turn on this behavior, you will then need to specify fields for addition to SearchableText.
+
+..Note::
+
+    Note that if you turn on the ``Dynamic SearchableText indexer behavior`` for a content type, then you must specify all fields that need SearchableText indexing. Dublin core fields like Title and Description are no longer automatically handled.
+
+Once you have turned on the indexer behavior, edit the XML field model to add ``indexer:searchable="true"`` to the ``field`` tag for each field you wish to add to the SearchableText index.
+
+See the `collective.dexteritytextindexer  <https://github.com/collective/collective.dexteritytextindexer>`_ package documentation for details and for information on how to use it via Python schema.
+
+
+Creating and using custom indexes
+*********************************
+
+**How to create custom catalog indexes**
+
+The ZODB is a hierarchical object store where objects of different schemata and sizes can live side by side.
+This is great for managing individual content items, but not optimal for searching across the content repository.
+A naive search would need to walk the entire object graph, loading each object into memory and comparing object metadata with search criteria.
+On a large site, this would quickly become prohibitive.
+
+Luckily, Zope comes with a technology called the *ZCatalog*, which is basically a table structure optimised for searching.
+In Plone, there’s a ZCatalog instance called ``portal_catalog``.
+Standard event handlers will index content in the catalog when it is created or modified, and unindex when the content is removed.
+
+The catalog manages *indexes*, which can be searched, and *metadata* (also known as *columns*), which are object attributes for which the value is copied into the catalog.
+When we perform a search, the result is a lazily loaded list of objects known as *catalog brains*.
+Catalog brains contain the value of metadata columns (but not indexes) as attributes.
+The functions ``getURL()``, ``getPath()`` and ``getObject()`` can be used to get the URL and path of the indexed content item, and to load the full item into memory.
+
+.. note::
+
+    Dexterity objects are more lightweight than Archetypes objects.
+    This means that loading objects into memory is not quite as undesirable as is sometimes assumed.
+    If you’re working with references, parent objects, or a small number of child objects, it is usually OK to load objects directly to work with them.
+    However, if you are working with a large or unknown-but-potentially-large number of objects, you should consider using catalog searches to find them and use catalog metadata to store frequently used values.
+    There is an important trade-off to be made between limiting object access and bloating the catalog with unneeded indexes and metadata, though.
+    In particular, large strings (such as the body text of a document) or binary data (such as the contents of image or file fields) should not be stored as catalog metadata.
+
+Plone comes with a number of standard indexes and metadata columns.
+These correspond to much of the *Dublin Core* set of metadata as well as several Plone-specific attributes.
+You can view the indexes, columns and the contents of the catalog through the ZMI pages of the ``portal_catalog`` tool.
+If you’ve never done this, it is probably instructive to have a look, both to understand how the indexes and columns may apply to your own content types, and to learn what searches are already possible.
+
+Indexes come in various types. The most common ones are:
+
+``FieldIndex``
+    the most common type, used to index a single value.
+
+``KeywordIndex``
+    used to index lists of values where you want to be able to search for a subset of the values.
+    As the name implies, commonly used for keyword fields, such as the ``Subject`` Dublin Core metadata field.
+
+``DateIndex``
+    used to index Zope 2 ``DateTime`` objects.
+    Note that if your type uses a *Python* ``datetime`` object, you’ll need to convert it to a Zope 2 ``DateTime`` using a custom indexer!
+
+``DateRangeIndex``
+    used mainly for the effective date range.
+
+``ZCTextIndex``
+    used mainly for the ``SearchableText`` index.
+    This is the index used for full-text search.
+
+``ExtendedPathIndex``
+    a variant of ``PathIndex``, which is used for the ``path`` index.
+    This is used to search for content by path and optionally depth.
+
+Adding new indexes and metadata columns
+=======================================
+
+When an object is indexed, the catalog will by default attempt to find attributes and methods that match index and column names on the object. Methods will be called (with no arguments) in an attempt to get a value.
+If a value is found, it is indexed.
+
+.. note::
+
+    Objects are normally acquisition-wrapped when they are indexed, which means that an indexed value may be acquired from a parent.
+    This can be confusing, especially if you are building container types and creating new indexes for them.
+    If child objects don’t have attributes/methods with names corresponding to indexes, the parent object’s value will be indexed for all children as well.
+
+Catalog indexes and metadata can be installed with the ``catalog.xml`` GenericSetup import step. It is useful to look at the one in Plone (``parts/omelette/Products/CMFPlone/profiles/default/catalog.xml``).
+
+As an example, let’s index the ``track`` property of a ``Session`` in the catalog, and add a metadata column for this property as well. In
+``profiles/default/catalog.xml``, we have:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="portal_catalog">
+        <index name="track" meta_type="FieldIndex">
+            <indexed_attr value="track"/>
+        </index>
+        <column value="track"/>
+    </object>
+
+Notice how we specify both the index name and the indexed attribute.
+It is possible to use an index name (the key you use when searching) that is different to the indexed attribute, although they are usually the same.
+The metadata column is just the name of an attribute.
+
+Creating custom indexers
+========================
+
+Indexing based on attributes can sometimes be limiting.
+First of all, the catalog is indiscriminate in that it attempts to index every attribute that’s listed against an index or metadata column for every object.
+Secondly, it is not always feasible to add a method or attribute to a class just to calculate an indexed value.
+
+Plone 3.3 and later ships with a package called `plone.indexer`_ to help make it easier to write custom indexers:
+components that are invoked to calculate the value which the catalog sees when it tries to index a given attribute.
+Indexers can be used to index a different value to the one stored on the object, or to allow indexing of a “virtual” attribute that does not actually exist on the object is question.
+Indexers are usually registered on a per-type basis, so you can have different implementations for different types of content.
+
+To illustrate indexers, we will add three indexers to ``program.py``.
+Two will provide values for the ``start`` and ``end`` indexes, normally used by Plone’s ``Event`` type.
+We actually have attributes with the correct name for these already, but they use Python ``datetime`` objects whereas the ``DateIndex`` requires a
+Zope 2 ``DateTime.DateTime`` object.
+(Python didn’t have a ``datetime`` module when this part of Zope was created!)
+The third indexer will be used to provide a value for the ``Subject`` index that takes its value from the ``tracks`` list. ::
+
+    from DateTime import DateTime
+    from plone.indexer import indexer
+    ...
+
+    @indexer(IProgram)
+    def startIndexer(obj):
+        if obj.start is None:
+            return None
+        return DateTime(obj.start.isoformat())
+    grok.global_adapter(startIndexer, name="start")
+
+    @indexer(IProgram)
+    def endIndexer(obj):
+        if obj.end is None:
+            return None
+        return DateTime(obj.end.isoformat())
+    grok.global_adapter(endIndexer, name="end")
+
+    @indexer(IProgram)
+    def tracksIndexer(obj):
+        return obj.tracks
+    grok.global_adapter(tracksIndexer, name="Subject")
+
+Here, we use the ``@indexer`` decorator to create an indexer.
+This doesn’t register the indexer component, though, so we need to use ``grok.global_adapter()`` to finalise the registration.
+Crucially, this is where the indexer’s ``name`` is defined.
+This is the name of the indexed attribute for which the indexer is providing a value.
+
+.. note::
+
+    Since all of these indexes are part of a standard Plone installation, we won’t register them in ``catalog.xml``.
+    If you are creating custom indexers and need to add new catalog indexes or columns for them, remember that the “indexed attribute” name (and the column name) must match the name of the indexer as set in its adapter registration.
+
+Searching using your indexes
+============================
+
+Once we have registered our indexers and re-installed our product (to ensure that the ``catalog.xml`` import step is allowed to install new indexes in the catalog), we can use our new indexes just like we would any of the default indexes.
+
+The pattern is always the same::
+
+    from Products.CMFCore.utils import getToolByName
+    # get the tool
+    catalog = getToolByName(context, 'portal_catalog')
+    # execute a search
+    results = catalog(track='Track 1')
+    # examine the results
+    for brain in results:
+        start = brain.start
+        url = brain.getURL()
+        obj = brain.getObject() # Performance hit!
+
+This shows a simple search using the ``portal_catalog`` tool, which we look up from some context object.
+We call the tool to perform a search, passing search criteria as keyword arguments, where the left hand side refers to an installed index and the right hand side is the search term.
+
+Some of the more commonly used indexes are:
+
+``Title``
+    the object’s title.
+
+``Description``
+    the object’s description.
+
+``path``
+    the object’s path. The argument is a string like ``/foo/bar``.
+    To get the path of an object (e.g. a parent folder), do
+    ``'/'.join(folder.getPhysicalPath())``.
+    Searching for an object’s path will return the object and any children.
+    To depth-limit the search, e.g. to get only those 1 level deep,
+    use a compound query, e.g.
+    ``path={'query': '/'.join(folder.getPhysicalPath()), 'depth': 1}``.
+    If a depth is specified, the object at the given path is not returned
+    (but any children within the depth limit are).
+
+``object_provides``
+    used to match interfaces provided by the object.
+    The argument is an interface name or list of interface names (of
+    which any one may match).
+    To get the name of a given interface, you can call
+    ``ISomeInterface.__identifier__``.
+
+``portal_type``
+    used to match the portal type.
+    Note that users can rename portal types,
+    so it is often better not to hardcode these.
+    Often, using an ``object_provides`` search for a type-specific
+    interface will be better.
+    Conversely, if you are asking the user to select a particular type to
+    search for, then they should be choosing from the currently installed
+    ``portal_types``.
+
+``SearchableText``
+    used for full-text searches.
+    This supports operands like ``AND`` and ``OR`` in the search string.
+
+``Creator``
+    the username of the creator of a content item.
+
+``Subject``
+    a ``KeywordIndex`` of object keywords.
+
+``review_state``
+    an object’s workflow state.
+
+In addition, the search results can be sorted based on any ``FieldIndex``,
+``KeywordIndex`` or ``DateIndex`` using the following keyword arguments:
+
+- Use ``sort_on='<index name>'`` to sort on a particular index.
+  For example, ``sort_on='sortable_title'`` will produce a sensible title-based sort.
+  ``sort_on='Date'`` will sort on the publication date, or the creation date if this is not set.
+- Add ``sort_order='reverse'`` to sort in reverse.
+  The default is ``sort_order='ascending'``.
+  ``'descending'`` can be used as an alias for ``'reverse'``.
+- Add ``sort_limit=10`` to limit to approximately 10 search results.
+  Note that it is possible to get more results due to index optimisations.
+  Use a list slice on the catalog search results to be absolutely sure that you have got the maximum number of results, e.g.
+  ``results = catalog(…, sort_limit=10)[:10]``.
+  Also note that the use of ``sort_limit`` requires a ``sort_on`` as well.
+
+Some of the more commonly used metadata columns are:
+
+*Creator*
+    the user who created the content object.
+
+*Date*
+    the publication date or creation date, whichever is later.
+
+*Title*
+    the object’s title.
+
+*Description*
+    the object’s description.
+
+*getId*
+    the object’s id (note that this is an attribute, not a function).
+
+*review_state*
+    the object’s workflow state.
+
+*portal_type*
+    the object’s portal type.
+
+For more information about catalog indexes and searching, see the
+`ZCatalog chapter in the Zope 2 book`_.
+
+.. _ZCatalog chapter in the Zope 2 book: http://docs.zope.org/zope2/zope2book/SearchingZCatalog.html
+
+.. _plone.indexer: http://pypi.python.org/pypi/plone.indexer
+
+
+How to setup the index TTW:
+---------------------------
+
+Now that the fields are index-able, we need to create the index itself.
+
+- Go to the Zope Management Interface
+- Go on 'portal_catalog'
+- Click 'Indexes' tab
+- There's a drop down menu to the top right to let you choose what type of index to add - if you are using a plain text string field you would select 'FieldIndex'
+- As the 'id' put in the programmatical name of your Dexterity type field that you want to index
+- Hit OK, tick your new index and click 'Reindex'
+
+You should now see content being indexed.
+
+See the :doc:`documentation </develop/plone/searching_and_indexing/indexing>` for further information
diff --git a/docs/grok/advanced/custom-add-and-edit-forms.rst b/docs/grok/advanced/custom-add-and-edit-forms.rst
new file mode 100644
index 0000000..b18fcdd
--- /dev/null
+++ b/docs/grok/advanced/custom-add-and-edit-forms.rst
@@ -0,0 +1,194 @@
+Custom add and edit forms
+============================
+
+**Using `z3c.form`_ to build custom forms**
+
+Until now, we have used Dexterity’s default content add and edit forms,
+supplying form hints in our schemata to influence how the forms are
+built.
+For most types, that is all that’s ever needed.
+In some cases, however, we want to build custom forms, or supply additional
+forms.
+
+Dexterity uses the `z3c.form`_ library to build its forms, via the
+`plone.z3cform`_ integration package.
+
+.. note::
+    the `plone.z3cform`_ package requires that standard `z3c.form`_
+    forms are used via a form wrapper view.
+    In Dexterity, this wrapper is normally applied automatically by the form
+    grokkers in `plone.directives.form`_ and `plone.directives.dexterity`_.
+
+Dexterity also relies on `plone.autoform`_, in particular its
+``AutoExtensibleForm`` base class, which is responsible for processing
+form hints and setting up `z3c.form`_ widgets and groups (fieldsets).
+A custom form, therefore, is simply a view that uses these libraries,
+although Dexterity provides some helpful base classes that make it
+easier to construct forms based on the schema and behaviors of a
+Dexterity type.
+
+.. note::
+    If you want to build standalone forms not related to content objects,
+    see the `z3c.form`_ documentation.
+    For convenience, you may want to use the base classes and schema support
+    in `plone.directives.form`_.
+
+Edit forms
+----------
+
+An edit form is just a form that is registered for a particular type of
+content and knows how to register its fields.
+If the form is named ``edit``, it will replace the default edit form,
+which is registered with that name for the more general
+``IDexterityContent`` interface.
+
+Dexterity provides a standard edit form base class that provides
+sensible defaults for buttons, labels and so on.
+This should be registered for a type schema (not a class).
+To create an edit form that is identical to the default, we could do::
+
+    class EditForm(dexterity.EditForm):
+        grok.context(IFSPage)
+
+The ``dexterity`` module is `plone.directives.dexterity`_ and
+the ``grok`` module is `five.grok`_.
+
+The default name for the form is *edit*, but we could supply a different
+name using ``grok.name()``.
+The default permission is ``cmf.ModifyPortalContent``,
+but we could require a different permission with ``grok.require()``.
+We could also register the form for a particular browser layer,
+using ``grok.layer()``.
+
+This form is of course not terribly interesting, since it is identical
+to the default. However, we can now start changing fields and values.
+For example, we could:
+
+- Override the ``schema`` property to tell `plone.autoform`_ to use a
+  different schema interface (with different form hints) than the
+  content type schema.
+- Override the ``additionalSchemata`` property to tell `plone.autoform`_
+  to use different supplemental schema interfaces.
+  The default is to use all behavior interfaces that provide the
+  ``IFormFieldProvider`` marker from `plone.directives.form`_.
+- Override the ``label`` and ``description`` properties to provide
+  different a different title and description for the form.
+- Set the `z3c.form`_ ``fields`` and ``groups`` attributes directly.
+- Override the ``updateWidgets()`` method to modify widget properties,
+  or one of the other ``update``()`` methods,
+  to perform additional processing on the fields.
+  In most cases, these require us to call the ``super`` version at the
+  beginning.
+  See the `plone.autoform`_ and `z3c.form`_ documentation
+  to learn more about the sequence of calls that emanate from the form
+  ``update()`` method in the ``z3c.form.form.BaseForm`` class.
+
+Content add sequence
+--------------------
+
+Add forms are similar to edit forms in that they are built from a type’s
+schema and the schemata of its behaviors.
+However, for an add form to be able to construct a content object,
+it needs to know which ``portal_type`` to use.
+
+You should realise that the FTIs in the ``portal_types`` tool can be
+modified through the web.
+It is even possible to create new types through the web that re-use existing
+classes and factories.
+
+For this reason, add forms are looked up via a namespace traversal
+adapter alled ``++add++``.
+You may have noticed this in the URLs to add forms already.
+What actually happens is this:
+
+- Plone renders the :guilabel:`add` menu.
+  - To do so, it looks, among other places, for actions in the *folder/add* category. This category is provided by the ``portal_types`` tool.
+  - The *folder/add* action category is constructed by looking up the ``add\_view\_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use.
+  - The default ``add\_view\_expr`` in Dexterity (and CMF 2.2) is ``string:${folder\_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name.
+- A user clicks on an entry in the menu and is taken to a URL like ``/path/to/folder/++add++my.type``.
+    - The ``++add++`` namespace adapter looks up the FTI with the given name, and gets its ``factory`` property.
+    - The ``factory`` property of an FTI gives the name of a particular ``zope.component.interfaces.IFactory`` utility, which is used later to construct an instance of the content object.  Dexterity automatically registers a factory instance for each type, with a name that matches the type name, although it is possible to use an existing factory name in a new type.
+      This allows administrators to create new “logical” types that are
+      functionally identical to an existing type.
+    - The ``++add++`` namespace adapter looks up the actual form to render as
+      a multi-adapter from ``(context, request, fti``) to ``Interface`` with
+      a name matching the ``factory`` property.
+      Recall that a standard view is a multi-adapter from
+      ``(context, request)`` to ``Interface`` with a name matching the URL
+      segment for which the view is looked up.
+      As such, add forms are not standard views, because they get the
+      additional ``fti`` parameter when constructed.
+    - If this fails, there is no custom add form for this factory (as is
+      normally the case).
+      The fallback is an unnamed adapter from ``(context, request, fti)``.
+      The default Dexterity add form is registered as such an adapter,
+      specific to the ``IDexterityFTI`` interface.
+- The form is rendered like any other ``z3c.form`` form instance,
+  and is subject to validation,
+  which may cause it to be loaded several times.
+- Eventually, the form is successfully submitted. At this point:
+    - The standard ``AddForm`` base class will look up the factory from the FTI reference it holds and call it to create an instance.
+    - The default Dexterity factory looks at the ``klass`` [*]_ attribute of the FTI to determine the actual content class to use, creates an object and initialises it.
+    - The ``portal_type`` attribute of the newly created instance is set to
+      the name of the FTI.
+      Thus, if the FTI is a “logical type” created through the web, but
+      using an existing factory, the new instance’s ``portal_type`` will be
+      set to the “logical type”.
+    - The object is initialised with the values submitted in the form.
+    - An ``IObjectCreatedEvent`` is fired.
+    - The object is added to its container.
+    - The user is redirected to the view specified in the ``immediate_view``
+      property of the FTI.
+
+.. [*] ``class`` is a reserved word in Python, so we use ``klass``.
+
+This sequence is pretty long, but thankfully we rarely have to worry
+about it. In most cases, we can use the default add form, and when we
+can’t, creating a custom add form is no more difficult than creating a
+custom edit form. The add form grokker take care of registering the add
+view appropriately.
+
+Custom add forms
+----------------
+
+As with edit forms, Dexterity provides a sensible base class for add
+forms that knows how to deal with the Dexterity FTI and factory.
+
+A custom form replicating the default would look like this::
+
+    class AddForm(dexterity.AddForm):
+        grok.name('example.fspage')
+
+The name here should match the *factory* name.
+By default, Dexterity types have a factory called the same as the FTI name.
+If no such factory exists
+(i.e. you have not registered a custom ``IFactory`` utility),
+a local factory utility will be created and managed by Dexterity when the
+FTI is installed.
+
+Also note that we do not specify a context here.
+Add forms are always registered for any ``IFolderish`` context.
+We can specify a layer with ``grok.layer()`` and a permission other than the
+default ``cmf.AddPortalContent`` with ``grok.require()``.
+
+.. note::
+    If the permission used for the add form is different to the
+    ``add_permission`` set in the FTI, the user needs to have *both*
+    permissions to be able to see the form and add content.
+    For this reason, most add forms will use the generic
+    ``cmf.AddPortalContent`` permission.
+    The :guilabel:`add` menu will not render links to types where the user
+    does not have the add permission stated in the FTI,
+    even if this is different to ``cmf.AddPortalContent``.
+
+As with edit forms, we can customise this form by overriding `z3c.form`_
+and `plone.autoform`_ properties and methods.
+See the `z3c.form`_ documentation on add forms for more details.
+
+
+.. _z3c.form: http://docs.zope.org/z3c.form
+.. _five.grok: http://docs.zope.org/five.grok
+.. _plone.z3cform: http://pypi.python.org/pypi/plone.z3cform
+.. _plone.autoform: http://pypi.python.org/pypi/plone.autoform
+.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
+.. _plone.directives.dexterity: http://pypi.python.org/pypi/plone.directives.dexterity
diff --git a/docs/grok/advanced/custom-content-classes.rst b/docs/grok/advanced/custom-content-classes.rst
new file mode 100644
index 0000000..b57f70d
--- /dev/null
+++ b/docs/grok/advanced/custom-content-classes.rst
@@ -0,0 +1,81 @@
+Custom content classes
+=======================
+
+**Adding a custom implementation**
+
+When we learned about configuring the Dexterity FTI,
+we saw the ``klass`` attribute and how it could be used to refer to either
+the ``Container`` or ``Item`` content classes.
+These classes are defined in the `plone.dexterity.content`_ module,
+and represent container (folder) and item (non-folder) types, respectively.
+
+For most applications, these two classes will suffice.
+We will normally use behaviors, adapters, event handlers and schema
+interfaces to build additional functionality for our types.
+In some cases, however, it is useful or necessary to override the class,
+typically to override some method or property provided by the base class
+that cannot be implemented with an adapter override.
+A custom class may also be able to provide marginally better performance by
+side-stepping some of the schema-dependent dynamic behavior found in the
+base classes.
+In real life, you are very unlikely to notice, though.
+
+Creating a custom class is simple: simply derive from one of the
+standard ones, e.g.::
+
+    from plone.dexterity.content import Item
+
+    class MyItem(Item):
+        """A custom content class"""
+        ...
+
+For a container type, we’d do::
+
+    from plone.dexterity.content import Container
+
+    class MyContainer(Container):
+        """A custom content class"""
+        ...
+
+You can now add any required attributes or methods to this class.
+
+To make use of this class, set the ``klass`` attribute in the FTI to its
+dotted name, e.g.
+
+.. code-block:: xml
+
+    <property name="klass">my.package.myitem.MyItem</property>
+
+This will cause the standard Dexterity factory to instantiate this class
+when the user submits the add form.
+
+.. note::
+
+    As an alternative to setting ``klass`` in the FTI,
+    you may provide your own ``IFactory`` utility for this type in lieu of
+    Dexterity’s default factory (see `plone.dexterity.factory`_).
+    However, you need to be careful that this factory performs all necessary
+    initialisation, so it is normally better to use the standard factory.
+
+Custom class caveats
+--------------------
+
+There are a few important caveats when working with custom content classes:
+
+- Make sure you use the correct base class: either
+  ``plone.dexterity.content.Item`` or
+  ``plone.dexterity.content.Container``.
+- If you mix in other base classes,
+  it is safer to put the ``Item`` or ``Container`` class first.
+  If another class comes first, it may override the ``__name__``,
+  ``__providedBy__``, ``__allow_access_to_unprotected_subobjects__`` and/or
+  ``isPrincipiaFolderish`` properties, and possibly the ``__getattr__()``
+  and ``__getitem__()`` methods,
+  causing problems with the dynamic schemata and/or folder item security.
+  In all cases, you may need to explicitly set these attributes to the ones
+  from the correct base class.
+- If you define a custom constructor, make sure it can be called with
+  no arguments, and with an optional ``id`` argument giving the name.
+
+.. _plone.dexterity.content: http://pypi.python.org/pypi/plone.dexterity.content
+.. _plone.dexterity.factory: http://pypi.python.org/pypi/plone.dexterity.factory
diff --git a/docs/grok/advanced/defaults.rst b/docs/grok/advanced/defaults.rst
new file mode 100644
index 0000000..0a2ecd9
--- /dev/null
+++ b/docs/grok/advanced/defaults.rst
@@ -0,0 +1,70 @@
+Defaults
+---------
+
+**Default values for fields on add forms**
+
+It is often useful to calculate a default value for a field. This value
+will be used on the add form, before the field is set.
+
+To continue with our conference example, let’s set the default values
+for the ``start`` and ``end`` dates to one week in the future and ten days
+in the future, respectively. We can do this by adding the following to
+``program.py``:
+
+.. code-block:: python
+
+    @form.default_value(field=IProgram['start'])
+    def startDefaultValue(data):
+        # To get hold of the folder, do: context = data.context
+        return datetime.datetime.today() + datetime.timedelta(7)
+
+    @form.default_value(field=IProgram['end'])
+    def endDefaultValue(data):
+        # To get hold of the folder, do: context = data.context
+        return datetime.datetime.today() + datetime.timedelta(10)
+
+We also need to import ``datetime`` at the top of the file, of course.
+
+Notice how the functions specify a particular schema field that they
+provide the default value for. The decorator will actually register
+these as “value adapters” for `z3c.form <http://pypi.python.org/pypi/z3c.form>`_, but you probably don’t need to
+worry about that.
+
+The ``data`` argument is an object that contains an attribute for each
+field in the schema. On the add form, most of these are likely to be
+``None``, but on a different form, the values may be populated from the
+context. The ``data`` object also has a ``context`` attribute that you can
+use to get the form’s context. For add forms, that’s the containing
+folder; for other forms, it is normally a content object being edited or
+displayed. If you need to look up tools (``getToolByName``) or acquire a
+value from a parent object, use ``data.context`` as the starting point,
+e.g.:
+
+.. code-block:: python
+
+    from Products.CMFCore.utils import getToolByName
+    ...
+    catalog = getToolByName(data.context, 'portal_catalog')
+
+The value returned by the method should be a value that’s allowable for
+the field. In the case of ``Datetime`` fields, that’s a Python ``datetime``
+object.
+
+It is possible to provide different default values depending on the type
+of context, a request layer, the type of form, or the type of widget
+used. See the `plone.directives.form`_ documentation for more details.
+
+For example, if you wanted to have a differently calculated default for
+a particular form, you could use a decorator like:
+
+.. code-block:: python
+
+    @form.default_value(field=IProgram['start'], form=FormClass)
+
+We’ll cover creating custom forms later in this manual.
+
+.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
+
+If the default_value decorator is not working, check that you have installed
+plone.directives.form installed with buildout or in your setup.py. Further
+ensure that you have "groked" your package.
diff --git a/docs/grok/advanced/event-handlers.rst b/docs/grok/advanced/event-handlers.rst
new file mode 100644
index 0000000..a152051
--- /dev/null
+++ b/docs/grok/advanced/event-handlers.rst
@@ -0,0 +1,104 @@
+Event handlers
+---------------
+
+**Adding custom event handlers for your type**
+
+So far, we have mainly been concerned with content types’ schemata and
+forms created from these. However, we often want to add more dynamic
+functionality, reacting when something happens to objects of our type.
+In Zope, that usually means writing event subscribers.
+
+Zope’s event model is *synchronous*. When an event is broadcast (via the
+``notify()`` function from the `zope.event`_ package), for example from the
+``save`` action of an add form, all registered event handlers will be
+called. There is no guarantee of which order the event handlers will be
+called in, however.
+
+Each event is described by an interface, and will typically carry some
+information about the event. Some events are known as *object events*,
+and provide ``zope.component.interfaces.IObjectEvent``. These have an
+``object`` attribute giving access to the (content) object that the event
+relates to. Object events allow event handlers to be registered for a
+specific type of object as well as a specific type of event.
+
+Some of the most commonly used event types in Plone are shown below.
+They are all object events.
+
+``zope.lifecycleevent.interfaces.IObjectCreatedEvent``
+    fired by the standard add form just after an object has been created,
+    but before it has been added on the container. Note that it is often
+    easier to write a handler for ``IObjectAddedEvent`` (see below), because
+    at this point the object has a proper acquisition context.
+
+``zope.lifecycleevent.interfaces.IObjectModifiedEvent``
+    fired by the standard edit form when an object has been modified.
+
+``zope.lifecycleevent.interfaces.IObjectAddedEvent``
+    fired when an object has been added to its container. The container is
+    available as the ``newParent`` attribute, and the name the new item holds
+    in the container is available as ``newName``.
+
+``zope.lifecycleevent.interfaces.IObjectRemovedEvent``
+    fired when an object has been removed from its container. The container
+    is available as the ``oldParent`` attribute, and the name the item held
+    in the container is available as ``oldName``.
+
+``zope.lifecycleevent.interfaces.IObjectMovedEvent``
+    fired when an object is added to, removed from, renamed in, or moved
+    between containers. This event is a super-type of ``IObjectAddedEvent``
+    and ``IObjectRemovedEvent``, shown above, so an event handler registered
+    for this interface will be invoked for the ‘added’ and ‘removed’ cases
+    as well. When an object is moved or renamed, all of ``oldParent``,
+    ``newParent``, ``oldName`` and ``newName`` will be set.
+
+``Products.CMFCore.interfaces.IActionSucceededEvent``
+    fired when a workflow event has completed. The ``workflow`` attribute
+    holds the workflow instance involved, and the ``action`` attribute holds
+    the action (transition) invoked.
+
+Event handlers can be registered using ZCML with the ``<subscriber />``
+directive, but when working with Dexterity types, we’ll more commonly
+use the ``grok.subscriber()`` in Python code.
+
+As an example, let’s add an event handler to the ``Presenter`` type that
+tries to find users with matching names matching the presenter id, and
+send these users an email.
+
+First, we require a few additional imports at the top of ``presenter.py``::
+
+    from zope.lifecycleevent.interfaces import IObjectAddedEvent
+    from Products.CMFCore.utils import getToolByName
+
+Then, we’ll add the following event subscriber after the schema
+definition::
+
+    @grok.subscribe(IPresenter, IObjectAddedEvent)
+    def notifyUser(presenter, event):
+        acl_users = getToolByName(presenter, 'acl_users')
+        mail_host = getToolByName(presenter, 'MailHost')
+        portal_url = getToolByName(presenter, 'portal_url')
+
+        portal = portal_url.getPortalObject()
+        sender = portal.getProperty('email_from_address')
+
+        if not sender:
+            return
+
+        subject = "Is this you?"
+        message = "A presenter called %s was added here %s" % (presenter.title, presenter.absolute_url(),)
+
+        matching_users = acl_users.searchUsers(fullname=presenter.title)
+        for user_info in matching_users:
+            email = user_info.get('email', None)
+            if email is not None:
+                mail_host.secureSend(message, email, sender, subject)
+
+There are many ways to improve this rather simplistic event handler, but
+it illustrates how events can be used. The first argument to
+``grok.subscribe()`` is an interface describing the object type. For
+non-object events, this is omitted. The second argument is the event
+type. The arguments to the function reflects these two, so the first
+argument is the ``IPresenter`` instance and the second is an
+``IObjectAddedEvent`` instance.
+
+.. _zope.event: http://pypi.python.org/pypi/zope.event
diff --git a/docs/grok/advanced/files-and-images.rst b/docs/grok/advanced/files-and-images.rst
new file mode 100644
index 0000000..cfdf14f
--- /dev/null
+++ b/docs/grok/advanced/files-and-images.rst
@@ -0,0 +1,94 @@
+Files and images
+-----------------
+
+**Working with file and image fields, including BLOBs**
+
+Plone has dedicated ``File`` and ``Image`` types, and it is often preferable
+to use these for managing files and images. However, it is sometimes
+useful to treat fields on an object as binary data. When working with
+Dexterity, you can accomplish this by using `plone.namedfile`_ and
+`plone.formwidget.namedfile`_.
+
+The `plone.namedfile`_ package includes four field types, all found in
+the ``plone.namedfile.field`` module:
+
+- ``NamedFile`` stores non-BLOB files. This is useful for small files
+  when you don’t want to configure BLOB storage.
+- ``NamedImage`` stores non-BLOB images.
+- ``NamedBlobFile`` stores BLOB files (see note below). It is otherwise
+  identical to ``NamedFile``.
+- ``NamedBlobImage`` stores BLOB images (see note below). It is otherwise
+  identical to ``NamedImage``.
+
+In use, the four field types are all pretty similar. They actually store
+persistent objects of type ``plone.namedfile.NamedFile``,
+``plone.namedfile.NamedImage``, ``plone.namedfile.NamedBlobFile`` and ``plone.namedfile.NamedBlobImage``,
+respectively. Note the different module! These objects have attributes
+like ``data``, to access the raw binary data, ``contentType``, to get a MIME
+type, and ``filename``, to get the original filename. The image values
+also support ``_height`` and ``_width`` to get image dimensions.
+
+To use the non-BLOB image and file fields, it is sufficient to depend on
+``plone.formwidget.namedfile``, since this includes ``plone.namefile`` as a
+dependency. We prefer to be explicit in ``setup.py``, however, since we
+will actually import directly from ``plone.namedfile``:
+
+.. code-block:: ini
+
+    install_requires=[
+      ...
+      'plone.namedfile',
+      'plone.formwidget.namedfile',
+    ],
+
+.. note::
+
+    Again, we do not need separate ``<include />`` lines in
+    ``configure.zcml`` for these new dependencies, because we use
+    ``<includeDependencies />``.
+
+For the sake of illustration, we will add an image of the
+speaker to the ``Presenter`` type. In ``presenter.py``, we add::
+
+    from plone.namedfile.field import NamedImage
+
+    class IPresenter(model.Schema):
+        ...
+
+        picture = NamedBlobImage(
+            title=_(u"Please upload an image"),
+            required=False,
+        )
+
+To use this in a view, we can either use a display widget via a
+``DisplayForm``, or construct a download URL manually. Since we don’t have
+a ``DisplayForm`` for the ``Presenter`` type, we’ll do the latter (of
+course, we could easily turn the view into a display form as well).
+
+In ``presenter_templates/view.pt``, we add this block of TAL::
+
+    <div tal:define="picture nocall:context/picture"
+         tal:condition="nocall:picture">
+        <img tal:attributes="src string:${context/absolute_url}/@@download/picture/${picture/filename};
+                             height picture/_height | nothing;
+                             width picture/_width | nothing;"
+            />
+    </div>
+
+This constructs an image URL using the ``@@download`` view from
+``plone.namedfile``. This view takes the name of the field containing the
+file or image on the traversal subpath (``/picture``), and optionally a
+filename on a further sub-path. The filename is used mainly so that the
+URL ends in the correct extension, which can help ensure web browsers
+display the picture correctly. We also define the ``height`` and ``width``
+of the image based on the values set on the object.
+
+For file fields, you can construct a download URL in a similar way,
+using an ``<a />`` tag, e.g.::
+
+    <a tal:attributes="href string:${context/absolute_url}/@@download/some_field/${context/some_field/filename}" />
+
+.. _z3c.blobfile: http://pypi.python.org/pypi/z3c.blobfile
+.. _plone.namedfile: http://pypi.python.org/pypi/plone.namedfile
+.. _plone.formwidget.namedfile: http://pypi.python.org/pypi/plone.formwidget.namedfile
+.. _extra: http://peak.telecommunity.com/DevCenter/setuptools#declaring-extras-optional-features-with-their-own-dependencies
diff --git a/docs/grok/advanced/index.rst b/docs/grok/advanced/index.rst
new file mode 100644
index 0000000..c80e5b9
--- /dev/null
+++ b/docs/grok/advanced/index.rst
@@ -0,0 +1,23 @@
+Advanced configuration
+=======================
+
+**Further configuration and tips**
+
+.. toctree::
+   :maxdepth: 2
+
+   defaults.rst
+   validators.rst
+   vocabularies.rst
+   references.rst
+   rich-text-markup-transformations.rst
+   files-and-images.rst
+   static-resources.rst
+   behaviours.rst
+   event-handlers.rst
+   permissions.rst
+   workflow.rst
+   catalog-indexing-strategies.rst
+   custom-add-and-edit-forms.rst
+   custom-content-classes.rst
+   webdav-and-other-file-representations.rst
diff --git a/docs/grok/advanced/permissions.rst b/docs/grok/advanced/permissions.rst
new file mode 100644
index 0000000..807a42e
--- /dev/null
+++ b/docs/grok/advanced/permissions.rst
@@ -0,0 +1,189 @@
+Permissions
+-------------
+
+**Setting up add permissions, view permissions and field view/edit permissions**
+
+Plone’s security system is based on the concept of
+*permissions* protecting *operations*
+(like accessing a view,
+viewing a field,
+modifying a field,
+or adding a type of content)
+that are granted to *roles*,
+which in turn are granted to *users* and/or *groups*.
+In the context of developing content types,
+permissions are typically used in three different ways:
+
+- A content type or group of related content types often has a custom
+  *add permission* which controls who can add this type of content.
+- Views (including forms) are sometimes protected by custom
+  permissions.
+- Individual fields are sometimes protected by permissions,
+  so that some users can view and edit fields that others can’t see.
+
+It is easy to create new permissions.
+However, be aware that it is considered good practice to use the standard permissions wherever possible and use *workflow* to control which roles are granted these permissions on a per-instance basis.
+
+For more basic information on permissions and how to create custom permissions read the `Security Section`_ in the Plone documentation.
+
+.. _`Security Section`: http://docs.plone.org/develop/plone/security/index.html
+
+Performing permission checks in code
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+It is sometimes necessary to check permissions explicitly in code, for
+example in a view. A permission check always checks a permission on a
+context object, since permissions can change with workflow.
+
+.. note::
+    Never make security dependent on users’ roles directly. 
+    Always check for a permission, and assign the permission to the appropriate role or roles.
+
+As an example,
+let’s display a message on the view of a ``Session`` type
+if the user has the ``cmf.RequestReview`` permission.
+In ``session.py``, we update the ``View`` class with the following::
+
+    from zope.security import checkPermission
+
+    class View(BrowserView):
+
+        def canRequestReview(self):
+            return checkPermission('cmf.RequestReview', self.context)
+
+And in the ``session_templates/view.pt`` template, we add:
+
+.. code-block:: html
+
+    <div class="discreet"
+         tal:condition="view/canRequestReview"
+         i18n:translate="suggest_review">
+        Please submit this for review.
+    </div>
+
+
+Content type add permissions
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Dexterity content types’ add permissions are set in the FTI,
+using the ``add_permission`` property.
+This can be changed through the web
+or in the GenericSetup import step for the content type.
+
+To make the ``Session`` type use our new permission, we modify the
+``add_permission`` line in
+``profiles/default/example.conference.session.xml``:
+
+.. code-block:: xml
+
+     <property name="add_permission">example.conference.AddSession</property>
+
+Protecting views and forms
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Access to views and other browser resources (like viewlets or portlets)
+can be protected by permissions, either using the ``permission`` attribute
+on ZCML statements like::
+
+    <browser:page
+        ...
+        permission="zope.Public"
+        ...
+        />
+
+We could also use the special ``zope.Public`` permission name to make the view accessible to anyone.
+
+Protecting form fields
+~~~~~~~~~~~~~~~~~~~~~~~
+
+Individual fields in a schema may be associated with a *read* permission
+and a *write* permission.
+The read permission is used to control access to the field’s value via protected code
+(e.g. scripts or templates created through the web)
+and URL traversal,
+and can be used to control the appearance of fields when using display forms
+(if you use custom views that access the attribute directly, you’ll need to perform your own checks).
+Write permissions can be used to control whether or not a given field appears on a type’s add and edit forms.
+
+In both cases,
+read and write permissions are annotated onto the schema using directives similar to those we’ve already seen for form widget hints.
+The ``read_permission()`` and ``write_permission()`` directives are found in the `plone.autoform.directives`_ package.
+
+If XML-schemas are used for defintion see :ref:`Dexterity XML: security attributes <dexterity-xml-security>`.
+
+Simple example protecting a field to be readable for Site Administrators only::
+
+    from zope import schema
+    from plone.supermodel import model
+    from plone.autoform.directives import read_permission
+
+    class IExampleProtectedInformation(model):
+
+        read_permission(info='cmf.ManagePortal')
+        write_permission(info='cmf.ManagePortal')
+        info = schema.Text(
+            title=_(u"Information"),
+        )
+
+As a complex example, let’s add a field for *Session* reviewers to record the track for a session.
+We’ll store the vocabulary of available tracks on the parent ``Program`` object in a text field,
+so that the creator of the ``Program`` can choose the available tracks.
+
+First, we add this to the ``IProgram`` schema in ``program.py``::
+
+    form.widget(tracks=TextLinesFieldWidget)
+    tracks = schema.List(
+            title=_(u"Tracks"),
+            required=True,
+            default=[],
+            value_type=schema.TextLine(),
+        )
+
+The ``TextLinesFieldWidget`` is used to edit a list of text lines in a
+text area. It is imported as::
+
+    from plone.z3cform.textlines.textlines import TextLinesFieldWidget
+
+Next, we’ll add a vocabulary for this to ``session.py``::
+
+    from Acquisition import aq_inner, aq_parent
+    from zope.component import provider
+    from zope.schema.interfaces import IContextSourceBinder
+    from zope.schema.vocabulary import SimpleVocabulary
+    ...
+
+    @provider(IContextSourceBinder)
+    def possibleTracks(context):
+
+        # we put the import here to avoid a circular import
+        from example.conference.program import IProgram
+        while context is not None and not IProgram.providedBy(context):
+            context = aq_parent(aq_inner(context))
+
+        values = []
+        if context is not None and context.tracks:
+            values = context.tracks
+
+        return SimpleVocabulary.fromValues(values)
+
+This vocabulary finds the closest ``IProgram``
+(in the add form, the ``context`` will be the ``Program``,
+but on the edit form, it will be the ``Session``,
+so we need to check the parent)
+and uses its ``tracks`` variable as the vocabulary.
+
+Next, we add a field to the ``ISession`` interface in the same file and
+protect it with the relevant write permission::
+
+    write_permission(track='example.conference.ModifyTrack')
+    track = schema.Choice(
+            title=_(u"Track"),
+            source=possibleTracks,
+            required=False,
+        )
+
+With this in place, users with the ``example.conference: Modify track``
+permission should be able to edit tracks for a session. For everyone
+else, the field will be hidden in the edit form.
+
+.. _plone.autoform.directives: http://pypi.python.org/pypi/plone.directives.dexterity
diff --git a/docs/grok/advanced/references.rst b/docs/grok/advanced/references.rst
new file mode 100644
index 0000000..7753b5e
--- /dev/null
+++ b/docs/grok/advanced/references.rst
@@ -0,0 +1,170 @@
+==========
+References
+==========
+
+**How to work with references between content objects**
+
+References are a way to maintain links between content that remain valid
+even if one or both of the linked items are moved or renamed.
+
+Under the hood, Dexterity’s reference system uses `five.intid`_, a Zope
+2 integration layer for `zope.intid`_, to give each content item a unique
+integer id. These are the basis for relationships maintained with the
+`zc.relationship`_ package, which in turn is accessed via an API
+provided by `z3c.relationfield`_, integrated into Zope 2 with
+`plone.app.relationfield`_. For most purposes, you need only to worry
+about the ``z3c.relationfield`` API, which provides methods for finding
+source and target objects for references and searching the relationship
+catalog.
+
+References are most commonly used in form fields with a selection or
+content browser widget. Dexterity comes with a standard widget in
+`plone.formwidget.contenttree`_ configured for the ``RelationList`` and
+``RelationChoice`` fields from ``z3c.relationfield``.
+
+To illustrate the use of references, we will allow the user to create a
+link between a ``Session`` and its ``Presenter``. Since Dexterity already
+ships with and installs ``plone.formwidget.contenttree`` and
+``z3c.relationfield``, we do not need to add any further setup code, and
+we can use the field directly in ``session.py``::
+
+    ...
+
+    from z3c.relationfield.schema import RelationChoice
+    from plone.formwidget.contenttree import ObjPathSourceBinder
+    ...
+
+    from example.conference.presenter import IPresenter
+
+    class ISession(form.Schema):
+        """A conference session. Sessions are managed inside Programs.
+        """
+        ...
+
+        presenter = RelationChoice(
+            title=_(u"Presenter"),
+            source=ObjPathSourceBinder(object_provides=IPresenter.__identifier__),
+            required=False,
+        )
+
+.. Note::
+
+    Remeber that `plone.app.relationfield`_ needs to be installed to use any
+    RelationChoice or RelationList field.
+
+To allow multiple items to be selected, we could have used a
+``RelationList`` like::
+
+    relatedItems = RelationList(
+        title=u"Related Items",
+        default=[],
+        value_type=RelationChoice(title=_(u"Related"),
+                                  source=ObjPathSourceBinder()),
+        required=False,
+    )
+
+The ``ObjPathSourceBinder`` class is an ``IContextSourceBinder`` that returns
+a vocabulary with content objects as values, object titles as term
+titles and object paths as tokens.
+
+You can pass keyword arguments to the constructor for
+``ObjPathSourceBinder()`` to restrict the selectable objects. Here, we
+demand that the object must provide the ``IPresenter`` interface. The
+syntax is the same as that used in a catalog search, except that only
+simple values and lists are allowed (e.g. you can’t use a dict to
+specify a range or values for a field index).
+
+If you want to restrict the folders and other content shown in the
+content browser, you can pass a dictionary with catalog search
+parameters (and here, any valid catalog query will do) as the first
+non-keyword argument (``navigation_tree_query``) to the
+``ObjPathSourceBinder()`` constructor.
+
+You can also create the fields in an XML schema, however you have to provide a
+pre-baked source instance. If you are happy with not restricting folders shown,
+you can use some that ``plone.formwidget.contenttree`` makes for you. For example::
+
+    <field name="links" type="plone.app.relationfield.RelationList">
+        <title>Related Items</title>
+        <value_type type="plone.app.relationfield.Relation">
+            <title>Related</title>
+            <source>plone.formwidget.contenttree.obj_path_src_binder</source>
+        </value_type>
+    </field>
+
+.. note::
+
+    The pre-baked source binders were added in plone.formwidget.contenttree
+    1.0.7, which ships with Plone 4.3.2+.
+
+If you want to use a different widget, you can use the same source (or a
+custom source that has content objects as values) with something like
+the autocomplete widget. The following line added to the interface will
+make the presenter selection similar to the ``organizer`` selection widget
+we showed in the previous section::
+
+    form.widget('presenter', AutocompleteFieldWidget)
+
+Once the user has created some relationships, the value stored in the
+relation field is a ``RelationValue`` object. This provides various
+attributes, including:
+
+- ``from_object``, the object from which the relationship is made;
+- ``to_object``, the object to which the relationship is made;
+- ``from_id`` and ``to_id``, the integer ids of the source and target;
+- ``from_path`` and ``to_path``, the path of the source and target.
+
+The ``isBroken()`` method can be used to determine if the relationship is
+broken. This normally happens if the target object is deleted.
+
+To display the relationship on our form, we can either use a display
+widget on a ``DisplayForm``, or use this API to find the object and
+display it. We’ll do the latter in ``session_templates/view.pt``:
+
+.. code-block:: html
+
+    <div tal:condition="context/presenter">
+        <label i18n:translate="presenter">Presenter:</label>
+        <span tal:content="context/presenter/to_object/Title | nothing" />
+    </div>
+
+
+Back references
+---------------
+
+To retrieve back-reference (all objects pointing to particular object using specified attribute) you can't simply use from_object or from_path, because source object is stored in the relation without acquisition wrappers.
+You should use from_id and helper method, which search the object in the IntId catalog.::
+
+    from Acquisition import aq_inner
+    from zope.component import getUtility
+    from zope.intid.interfaces import IIntIds
+    from zope.security import checkPermission
+    from zc.relation.interfaces import ICatalog
+
+    def back_references(source_object, attribute_name):
+    """ Return back references from source object on specified attribute_name """
+    catalog = getUtility(ICatalog)
+    intids = getUtility(IIntIds)
+    result = []
+    for rel in catalog.findRelations(
+    dict(to_id=intids.getId(aq_inner(source_object)),
+    from_attribute=attribute_name)
+    ):
+    obj = intids.queryObject(rel.from_id)
+    if obj is not None and checkPermission('zope2.View', obj):
+    result.append(obj)
+    return result
+
+Please note, this method does not check effective and expiration date or content language.
+
+Original issue: `<http://code.google.com/p/dexterity/issues/detail?id=234>`_
+
+
+
+
+.. _five.intid: http://pypi.python.org/pypi/five.intid
+.. _zope.intid: http://pypi.python.org/pypi/zope.intid
+.. _zc.relationship: http://pypi.python.org/pypi/zc.relationship
+.. _z3c.relationfield: http://pypi.python.org/pypi/z3c.relationfield
+.. _plone.app.relationfield: http://pypi.python.org/pypi/plone.app.relationfield
+.. _plone.formwidget.contenttree: http://pypi.python.org/pypi/plone.formwidget.contenttree
diff --git a/docs/grok/advanced/rich-text-markup-transformations.rst b/docs/grok/advanced/rich-text-markup-transformations.rst
new file mode 100644
index 0000000..ca55cea
--- /dev/null
+++ b/docs/grok/advanced/rich-text-markup-transformations.rst
@@ -0,0 +1,203 @@
+Rich text, markup and transformations
+--------------------------------------
+
+**How to store markup (such as HTML or reStructuredText) and render it with a transformation**
+
+Many content items need to allow users to provide rich text in some kind
+of markup, be that HTML (perhaps entered using a WYSIWYG editor),
+reStructuredText, Markdown or some other format. This markup typically
+needs to be transformed into HTML for the view template, but we also
+want to keep track of the original “raw” markup so that it can be edited
+again. Even when the input format is HTML, there is often a need for a
+transformation to tidy up the HTML and strip out tags that are not
+permitted.
+
+It is possible to store HTML in a standard ``Text`` field. You can even
+get a WYSIWYG widget, by using a schema such as this::
+
+    from plone.autoform import directives as form
+    from plone.supermodel import model
+    from zope import schema
+    from plone.app.z3cform.wysiwyg import WysiwygFieldWidget
+
+    class ITestSchema(model.Schema):
+
+        form.widget('body', WysiwygFieldWidget)
+        body = schema.Text(title=u"Body text")
+
+.. _richtext-label:
+
+However, this approach does not allow for alternative markups or any
+form of content filtering. For that, we need to use a more powerful
+field: ``RichText`` from the `plone.app.textfield`_ package::
+
+    from plone.app.textfield import RichText
+    from plone.supermodel import model
+
+    class ITestSchema(model.Schema):
+
+        body = RichText(title=u"Body text")
+
+The ``RichText`` field constructor can take the following arguments in
+addition to the usual arguments for a ``Text`` field:
+
+- ``default_mime_type``, a string representing the default MIME type of
+  the input markup. This defaults to ``text/html``.
+- ``output_mime_type``, a string representing the default output MIME
+  type. This defaults to ``text/x-html-safe``, which is a Plone-specific
+  MIME type that disallows certain tags. Use the :guilabel:`HTML Filtering`
+  control panel in Plone to control the tags.
+- ``allowed_mime_types``, a tuple of strings giving a vocabulary of
+  allowed input MIME types. If this is ``None`` (the default), the
+  allowable types will be restricted to those set in Plone’s
+  :guilabel:`Markup` control panel.
+
+Also note: The *default* field can be set to either a unicode object (in
+which case it will be assumed to be a string of the default MIME type)
+or a ``RichTextValue`` object (see below).
+
+Below is an example of a field allow StructuredText and
+reStructuredText, transformed to HTML by default::
+
+    from plone.app.textfield import RichText
+    from plone.supermodel import model
+
+    defaultBody = """\
+    Background
+    ==========
+
+    Please fill this in
+
+    Details
+    =======
+
+    And this
+    """
+
+    class ITestSchema(model.Schema):
+
+        body = RichText(
+            title=u"Body text",
+            default_mime_type='text/x-rst',
+            output_mime_type='text/x-html',
+            allowed_mime_types=('text/x-rst', 'text/structured',),
+            default=defaultBody,
+        )
+
+The RichTextValue
+~~~~~~~~~~~~~~~~~~~
+
+The ``RichText`` field does not store a string. Instead, it stores a
+``RichTextValue`` object. This is an immutable object that has the
+following properties:
+
+``raw``
+    a unicode string with the original input markup;
+
+``mimeType``
+    the MIME type of the original markup, e.g. ``text/html`` or
+    ``text/structured``;
+
+``encoding``
+    the default character encoding used when transforming the input markup.
+    Most likely, this will be UTF-8;
+
+``raw_encoded``
+    the raw input encoded in the given encoding;
+
+``outputMimeType``
+    the MIME type of the default output, taken from the field at the time of
+    instantiation;
+
+``output``
+    a unicode object representing the transformed output. If possible, this
+    is cached persistently until the ``RichTextValue`` is replaced with a
+    new one (as happens when an edit form is saved, for example).
+
+The storage of the ``RichTextValue`` object is optimised for the case where
+the transformed output will be read frequently (i.e. on the view screen
+of the content object) and the raw value will be read infrequently (i.e.
+on the edit screen). Because the output value is cached indefinitely,
+you will need to replace the ``RichTextValue`` object with a new one if any
+of the transformation parameters change. However, as we will see below,
+it is possible to apply a different transformation on demand should you
+need to.
+
+The code snippet belows shows how a ``RichTextValue`` object can be
+constructed in code. In this case, we have a raw input string of type
+``text/plain`` that will be transformed to a default output of
+``text/html``. (Note that we would normally look up the default output
+type from the field instance.)::
+
+    from plone.app.textfield.value import RichTextValue
+    ...
+
+    context.body = RichTextValue(u"Some input text", 'text/plain', 'text/html')
+
+Of course, the standard widget used for a ``RichText`` field will
+correctly store this type of object for you, so it is rarely necessary
+to create one yourself.
+
+Using rich text fields in templates
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+What about using the text field in a template? If you are using a
+``DisplayForm``, the display widget for the ``RichText`` field will render
+the transformed output markup automatically. If you are writing TAL
+manually, you may try something like this:
+
+.. code-block:: html
+
+    <div tal:content="structure context/body" />
+
+This, however, will render a string like::
+
+    RichTextValue object. (Did you mean <attribute>.raw or <attribute>.output?)
+
+The correct syntax is:
+
+.. code-block:: html
+
+    <div tal:content="structure context/body/output" />
+
+This will render the cached, transformed output. This operation is
+approximately as efficient as rendering a simple ``Text`` field, since the
+transformation is only applied once, when the value is first saved.
+
+Alternative transformations
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Sometimes, you may want to invoke alternative transformations. Under the
+hood, the default implementation uses the ``portal_transforms`` tool to
+calculate a transform chain from the raw value’s input MIME type to the
+desired output MIME type. (Should you need to write your own transforms,
+take a look at `this tutorial`_.) This is abstracted behind an
+``ITransformer`` adapter to allow alternative implementations.
+
+To invoke a transformation in code, you can use the following syntax::
+
+    from plone.app.textfield.interfaces import ITransformer
+
+    transformer = ITransformer(context)
+    transformedValue = transformer(context.body, 'text/plain')
+
+The ``__call__()`` method of the ``ITransformer`` adapter takes a
+``RichTextValue`` object and an output MIME type as parameters.
+
+If you are writing a page template, there is an even more convenient
+syntax:
+
+.. code-block:: html
+
+    <div tal:content="structure context/@@text-transform/body/text/plain" />
+
+The first traversal name gives the name of the field on the context
+(``body`` in this case). The second and third give the output MIME type.
+If the MIME type is omitted, the default output MIME type will be used.
+
+.. note::
+    Unlike the ``output`` property, the value is not cached, and so
+    will be calculated each time the page is rendered.
+
+.. _this tutorial: http://plone.org/documentation/kb/portal-transforms
+.. _plone.app.textfield: http://pypi.python.org/pypi/plone.app.textfield
diff --git a/docs/grok/advanced/static-resources.rst b/docs/grok/advanced/static-resources.rst
new file mode 100644
index 0000000..7d79cf9
--- /dev/null
+++ b/docs/grok/advanced/static-resources.rst
@@ -0,0 +1,145 @@
+Static resources
+-----------------
+
+**Adding images and stylesheets**
+
+Earlier in this manual, we have seen how to create views, and how to use
+file and image fields. These are all dynamic, however, and often we just
+want to ship with a static image/icon, CSS or JavaScript file. For this,
+we need to register static resources.
+
+Registering a static resource directory
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The easiest way to manage static resources is to create a
+``static`` resource directory in your Dexterity project using the ZCML resourceDirectory directive.
+
+Registration of the resource directory is done using the
+``<browser:resourceDirectory />`` ZCML directive. This requires two
+attributes: ``name`` is the name that appears after the
+``++resource++`` namespace; ``directory`` is a relative path to the
+directory containing resources.
+
+It's conventional to use "static" or "resources" for the directory name and the dotted name of your package for the resource name.
+If you create a directory named "resources", you would use this zcml to register it::
+
+  <browser:resourceDirectory
+    name="dotted.projectname"
+    directory="resources" />
+
+
+Then, if a ``resources`` resource directory in the ``example.conference`` package
+contains a file called ``conference.css``, it will be accessible on a URL
+like ``http://<server>/site/++resource++example.conference/conference.css.``
+The resource name is the same as the package name wherein the ``resources``
+directory appears.
+
+.. note::
+    Grok used to automatically register any directory named ``static``.
+    That behavior no longer works. If you're updating a Dexterity project
+    from < Plone 4.3, add to your configure.zcml a stanza like::
+
+      <browser:resourceDirectory
+        name="dotted.projectname"
+        directory="static" />
+
+
+Importing CSS and JavaScript files in templates
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+One common use of static resources is to add a static CSS or JavaScript
+file to a specific template. We can do this by filling the ``style_slot``
+or ``javascript_slot`` in Plone’s ``main_template`` in our own view
+template and using an appropriate resource link.
+
+For example, we could add the following near the top of
+``presenter_templates/view.pt``:
+
+.. code-block:: html
+
+    <head>
+        <metal:block fill-slot="style_slot">
+            <link rel="stylesheet" type="text/css"
+                tal:define="navroot context/@@plone_portal_state/navigation_root_url"
+                tal:attributes="href string:${navroot}/++resource++example.conference/conference.css"
+                />
+        </metal:block>
+    </head>
+
+.. note::
+    Always create the resource URL relative to the navigation root as shown
+    here, so that the URL is the same for all content objects using this
+    view. This allows for efficient resource caching.
+
+Registering resources with Plone’s resource registries
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Sometimes it is more appropriate to register a stylesheet with Plone’s
+``portal_css`` registry (or a JavaScript file with
+``portal_javascripts``), rather than add the registration on a
+per-template basis. This ensures that the resource is available
+site-wide.
+
+.. note::
+    It may seem wasteful to include a resource that is not be used on all
+    pages in the global registry. Remember, however, that ``portal_css`` and
+    ``portal_javascripts`` will merge and compress resources, and set caching
+    headers such that browsers and caching proxies can cache resources well.
+    It is often more effective to have one slightly larger file that caches
+    well, than to have a variable number of files that may need to be loaded
+    at different times.
+
+To add a static resource file, you can use the GenericSetup
+``cssregistry.xml`` or ``jsregistry.xml`` import steps in the
+``profiles/default`` directory. For example, an import step to add the
+``conference.css`` file site-wide may involve a ``cssregistry.xml`` file
+that looks like this:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="portal_css">
+     <stylesheet id="++resource++example.conference/conference.css"
+        title="" cacheable="True" compression="safe" cookable="True"
+        enabled="1" expression="" media="screen" rel="stylesheet" rendering="import"
+        />
+    </object>
+
+Similarly, a JavaScript resource could be imported with a
+``jsregistry.xml`` like:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="portal_javascripts">
+     <javascript cacheable="True" compression="none" cookable="True"
+        enabled="False" expression=""
+        id="++resource++example.conference/conference.js" inline="False"/>
+    </object>
+
+Image resources
+~~~~~~~~~~~~~~~~
+
+Images can be added to resource directories just like any other type of
+resource. To use the image in a view, you can construct an ``<img />`` tag
+like this:
+
+.. code-block:: html
+
+    <img style="float: left; margin-right: 2px; margin-top: 2px"
+         tal:define="navroot context/@@plone_portal_state/navigation_root_url"
+         tal:attributes="src string:${navroot}/++resource++example.conference/program.gif"
+         />
+
+Content type icons
+~~~~~~~~~~~~~~~~~~~
+
+Finally, to use an image resource as the icon for a content type, simply
+list it in the FTI under the ``content_icon`` property. For example, in
+``profiles/default/types/example.conference.presenter.xml``, we can use
+the following line, presuming we have a ``presenter.gif`` in the ``static``
+directory:
+
+.. code-block:: xml
+
+     <property name="content_icon">++resource++example.conference/presenter.gif</property>
diff --git a/docs/grok/advanced/validators.rst b/docs/grok/advanced/validators.rst
new file mode 100644
index 0000000..2b2248d
--- /dev/null
+++ b/docs/grok/advanced/validators.rst
@@ -0,0 +1,114 @@
+Validators
+-----------
+
+**Creating custom validators for your type**
+
+Many applications require some form of data entry validation. The
+simplest form of validation you get for free – the `z3c.form`_ library
+ensures that all data entered on Dexterity add and edit forms is valid
+for the field type.
+
+It is also possible to set certain properties on the fields to add
+further validation (or even create your own fields with custom
+validation logic, although that is a lot less common). These properties
+are set as parameters to the field constructor when the schema interface
+is created. You should see the `zope.schema`_ package for details, but
+the most common constraints are:
+
+``required=True/False``
+    to make a field required or optional;
+
+``min`` and ``max``
+    used for ``Int``, ``Float``, ``Datetime``, ``Date``, and ``Timedelta``
+    fields, specify the minimum and maximum (inclusive) allowed values of
+    the given type;
+
+``min_length`` and ``max_length``
+    used for collection fields (``Tuple``, ``List``, ``Set``, ``Frozenset``,
+    ``Dict``) and text fields (``Bytes``, ``BytesLine``, ``ASCII``,
+    ``ASCIILine``, ``Text``, ``TextLine``), set the minimum and maximum
+    (inclusive) length of a field.
+
+.. _zope.schema: http://pypi.python.org/pypi/zope.schema
+
+
+Constraints
+~~~~~~~~~~~
+
+If this does not suffice, you can pass your own constraint function to a
+field. The constraint function should take a single argument: the value
+that is to be validated. This will be of the field’s type. The function
+should return a boolean ``True`` or ``False``.
+
+::
+
+    def checkForMagic(value):
+        return 'magic' in value
+
+.. note::
+
+   Hint: The constraint function does not have access to the context, but
+   if you need to acquire a tool, you can use the
+   ``zope.app.component.hooks.getSite()`` method to obtain the site root.
+
+To use the constraint, pass the function as the ``constraint`` argument to
+the field constructor, e.g.::
+
+    my_field = schema.TextLine(title=_(u"My field"), constraint=checkForMagic)
+
+Constraints are easy to write, but do not necessarily produce very
+friendly error messages. It is however possible to customise these error
+messages using `z3c.form`_ error view snippets. See the `z3c.form
+documentation <z3c.form>`_ for more details.
+
+Invariants
+~~~~~~~~~~~~
+
+You’ll also notice that constraints only check a single field value. If
+you need to write a validator that compares multiple values, you can use
+an invariant. Invariants use exceptions to signal errors, which are
+displayed at the top of the form rather than next to a particular field.
+
+To illustrate an invariant, let’s make sure that the start date of a
+`Program` is before the end date. In `program.py`, we add the following.
+Code not relevant to this example is snipped with an ellipsis (…)::
+
+    ...
+
+    from zope.interface import invariant, Invalid
+
+    class StartBeforeEnd(Invalid):
+        __doc__ = _(u"The start or end date is invalid")
+
+    class IProgram(model.Schema):
+
+        ...
+
+        start = schema.Datetime(
+                title=_(u"Start date"),
+                required=False,
+            )
+
+        end = schema.Datetime(
+                title=_(u"End date"),
+                required=False,
+            )
+
+        ...
+
+        @invariant
+        def validateStartEnd(data):
+            if data.start is not None and data.end is not None:
+                if data.start > data.end:
+                    raise StartBeforeEnd(_(u"The start date must be before the end date."))
+
+    ...
+
+Form validators
+~~~~~~~~~~~~~~~
+
+Finally, you can write more powerful validators by using the `z3c.form <http://pypi.python.org/pypi/z3c.form>`_
+widget validators. See :ref:`the z3c.form documentation <z3c.form>`_ for
+details.
+
+.. _z3c.form: http://pypi.python.org/pypi/z3c.form
diff --git a/docs/grok/advanced/vocabularies.rst b/docs/grok/advanced/vocabularies.rst
new file mode 100644
index 0000000..833f183
--- /dev/null
+++ b/docs/grok/advanced/vocabularies.rst
@@ -0,0 +1,367 @@
+Vocabularies
+-------------
+
+**Creating your own static and dynamic vocabularies**
+
+Vocabularies are normally used in conjunction with selection fields, and
+are supported by the `zope.schema`_ package, with widgets provided by
+`z3c.form`_.
+
+Selection fields use the ``Choice`` field type. To allow the user to
+select a single value, use a ``Choice`` field directly::
+
+    class IMySchema(model.Schema):
+        myChoice = schema.Choice(...)
+
+For a multi-select field, use a ``List``, ``Tuple``, ``Set`` or
+``Frozenset`` with a ``Choice`` as the ``value_type``::
+
+    class IMySchema(model.Schema):
+        myList = schema.List(..., value_type=schema.Choice(...))
+
+The choice field must be passed one of the following arguments:
+
+- ``values`` can be used to give a list of static values;
+- ``source`` can be used to refer to an ``IContextSourceBinder`` or
+  ``ISource`` instance;
+- ``vocabulary`` can be used to refer to an ``IVocabulary`` instance or
+  (more commonly) a string giving the name of an ``IVocabularyFactory``
+  named utility.
+
+In the remainder of this section, we will show the various techniques
+for defining vocabularies through several iterations of a new field
+added to the Program type allowing the user to pick the organiser
+responsible for the program.
+
+Static vocabularies
+~~~~~~~~~~~~~~~~~~~~
+
+Our first attempt uses a static list of organisers. We use the message
+factory to allow the labels (term titles) to be translated. The values
+stored in the ``organizer`` field will be a unicode object representing
+the chosen label, or ``None`` if no value is selected::
+
+    from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
+
+    organizers = SimpleVocabulary(
+        [SimpleTerm(value=u'Bill', title=_(u'Bill')),
+         SimpleTerm(value=u'Bob', title=_(u'Bob')),
+         SimpleTerm(value=u'Jim', title=_(u'Jim'))]
+        )
+
+    organizer = schema.Choice(
+                title=_(u"Organiser"),
+                vocabulary=organizers,
+                required=False,
+            )
+
+Since ``required`` is ``False``, there will be a :guilabel:`no value` option
+in the drop-down list.
+
+Dynamic sources
+~~~~~~~~~~~~~~~~
+
+The static vocabulary is obviously a bit limited. Not only is it
+hard-coded in Python, it also does not allow separation of the stored
+values and the labels shown in the selection widget.
+
+We can make a one-off dynamic vocabulary using a context source binder.
+This is simply a callable (usually a function or an object with a
+``__call__`` method) that provides the ``IContextSourceBinder``
+interface and takes a ``context`` parameter. The ``context`` argument is the
+context of the form (i.e. the folder on an add form, and the content
+object on an edit form). The callable should return a vocabulary, which
+is most easily achieved by using the ``SimpleVocabulary`` class from
+`zope.schema`_.
+
+Here is an example using a function to return all users in a particular
+group::
+
+    from zope.schema.interfaces import IContextSourceBinder
+    from zope.schema.vocabulary import SimpleVocabulary
+    from Products.CMFCore.utils import getToolByName
+
+    @grok.provider(IContextSourceBinder)
+    def possibleOrganizers(context):
+        acl_users = getToolByName(context, 'acl_users')
+        group = acl_users.getGroupById('organizers')
+        terms = []
+
+        if group is not None:
+            for member_id in group.getMemberIds():
+                user = acl_users.getUserById(member_id)
+                if user is not None:
+                    member_name = user.getProperty('fullname') or member_id
+                    terms.append(SimpleVocabulary.createTerm(member_id, str(member_id), member_name))
+
+        return SimpleVocabulary(terms)
+
+We use the PAS API to get the group and its members, building a list,
+which we then turn into a vocabulary.
+
+When working with vocabularies, you’ll come across some terminology that
+is worth explaining:
+
+- A *term* is an entry in the vocabulary. The term has a value. Most
+  terms are *tokenised* terms which also have a token, and some terms
+  are *titled*, meaning they have a title that is different to the
+  token.
+- The *token* must be an ASCII string. It is the value passed with the
+  request when the form is submitted. A token must uniquely identify a
+  term.
+- The *value* is the actual value stored on the object. This is not
+  passed to the browser or used in the form. The value is often a
+  unicode object, but can be any type of object.
+- The *title* is a unicode object or translatable message. It is used
+  in the form.
+
+The ``SimpleVocabulary`` class contains two class methods that can be used
+to create vocabularies from lists:
+
+``fromValues()``
+    takes a simple list of values and returns a tokenised vocabulary where
+    the values are the items in the list, and the tokens are created by
+    calling ``str()`` on the values.
+``fromItems()``
+    takes a list of ``(token, value)`` tuples and creates a tokenised
+    vocabulary with the token and value specified.
+
+You can also instantiate a ``SimpleVocabulary`` yourself and pass a list
+of terms in the initialiser.
+The ``createTerm()`` class method can be used to create a term from a
+``value``, ``token`` and ``title``. Only the value is required.
+
+In the example above, we have chosen to create a ``SimpleVocabulary`` from
+terms with the user id used as value and token, and the user’s full name
+as a title.
+
+To use this context source binder, we use the ``source`` argument to the
+``Choice`` constructor::
+
+    organizer = schema.Choice(
+        title=_(u"Organiser"),
+        source=possibleOrganizers,
+        required=False,
+    )
+
+Parameterised sources
+~~~~~~~~~~~~~~~~~~~~~~
+
+We can improve this example by moving the group name out of the
+function, allowing it to be set on a per-field basis. To do so, we turn
+our ``IContextSourceBinder`` into a class that is initialised with the
+group name::
+
+    class GroupMembers(object):
+        """Context source binder to provide a vocabulary of users in a given
+        group.
+        """
+
+        grok.implements(IContextSourceBinder)
+
+        def __init__(self, group_name):
+            self.group_name = group_name
+
+        def __call__(self, context):
+            acl_users = getToolByName(context, 'acl_users')
+            group = acl_users.getGroupById(self.group_name)
+            terms = []
+
+            if group is not None:
+                for member_id in group.getMemberIds():
+                    user = acl_users.getUserById(member_id)
+                    if user is not None:
+                        member_name = user.getProperty('fullname') or member_id
+                        terms.append(SimpleVocabulary.createTerm(member_id, str(member_id), member_name))
+
+            return SimpleVocabulary(terms)
+
+Again, the source is set using the ``source`` argument to the ``Choice``
+constructor::
+
+    organizer = schema.Choice(
+        title=_(u"Organiser"),
+        source=GroupMembers('organizers'),
+        required=False,
+    )
+
+When the schema is initialised on startup, a ``GroupMembers`` object
+is instantiated, storing the desired group name. Each time the
+vocabulary is needed, this object will be called (i.e. the
+``__call__()`` method is invoked) with the context as an argument,
+expected to return an appropriate vocabulary.
+
+Named vocabularies
+~~~~~~~~~~~~~~~~~~~~
+
+Context source binders are great for simple dynamic vocabularies. They
+are also re-usable, since you can import the source from a single
+location and use it in multiple instances.
+
+Sometimes, however, we want to provide an additional level of
+decoupling, by using *named* vocabularies. These are similar to context
+source binders, but are components registered as named utilities,
+referenced in the schema by name only. This allows local overrides of
+the vocabulary via the Component Architecture, and makes it easier to
+distribute vocabularies in third party packages.
+
+.. note::
+
+    Named vocabularies cannot be parameterised in the way as we did
+    with the ``GroupMembers`` context source binder, since they are looked up
+    by name only.
+
+We can turn our first "members in the *organizers* group" vocabulary
+into a named vocabulary by creating a named utility providing
+``IVocabularyFactory``, like so::
+
+    from zope.schema.interfaces import IVocabularyFactory
+    ...
+
+    class OrganizersVocabulary(object):
+        grok.implements(IVocabularyFactory)
+
+        def __call__(self, context):
+            acl_users = getToolByName(context, 'acl_users')
+            group = acl_users.getGroupById('organizers')
+            terms = []
+
+            if group is not None:
+                for member_id in group.getMemberIds():
+                    user = acl_users.getUserById(member_id)
+                    if user is not None:
+                        member_name = user.getProperty('fullname') or member_id
+                        terms.append(SimpleVocabulary.createTerm(member_id, str(member_id), member_name))
+
+            return SimpleVocabulary(terms)
+
+    grok.global_utility(OrganizersVocabulary, name=u"example.conference.Organizers")
+
+.. note::
+
+    By convention, the vocabulary name is prefixed with the package name, to
+    ensure uniqueness.
+
+We can make use of this vocabulary in any schema by passing its name to
+the ``vocabulary`` argument of the ``Choice`` field constructor::
+
+    organizer = schema.Choice(
+        title=_(u"Organiser"),
+        vocabulary=u"example.conference.Organizers",
+        required=False,
+    )
+
+Some common vocabularies
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+As you might expect, there are a number of standard vocabularies that
+come with Plone. These are found in the `plone.app.vocabularies`_
+package. Some of the more useful ones include:
+
+``plone.app.vocabularies.AvailableContentLanguages``
+    a list of all available content languages;
+``plone.app.vocabularies.SupportedContentLanguages``
+    a list of currently supported content languages;
+``plone.app.vocabularies.Roles``
+    the user roles available in the site;
+``plone.app.vocabularies.PortalTypes``
+    a list of types installed in ``portal_types``;
+``plone.app.vocabularies.ReallyUserFriendlyTypes``
+    a list of those types that are likely to mean something to users;
+``plone.app.vocabularies.Workflows``
+    a list of workflows;
+``plone.app.vocabularies.WorkflowStates``
+    a list of all states from all workflows;
+``plone.app.vocabularies.WorkflowTransitions``
+    a list of all transitions from all workflows.
+
+In addition, the package `plone.principalsource`_ provides several
+vocabularies that are useful for selecting users and groups in a
+Dexterity context:
+
+``plone.principalsource.Users``
+    provides users
+
+``plone.principalsource.Groups``
+    provides groups
+
+``plone.principalsource.Principals``
+    provides security principals (users or groups)
+
+Importantly, these sources are not iterable, which means that you cannot
+use them to provide a list of all users in the site. This is
+intentional: calculating this list can be extremely expensive if you
+have a large site with many users, especially if you are connecting to
+LDAP or Active Directory. Instead, you should use a search-based source
+such as one of these.
+
+We will use one of these together with an auto-complete widget to
+finalise our ``organizer`` field. To do so, we need to add
+``plone.principalsource`` as a dependency of ``example.conference``. In
+``setup.py``, we add::
+
+    install_requires=[
+          ...
+          'plone.principalsource',
+      ],
+
+.. note::
+
+    Since we use an ``<includeDependencies />`` line in ``configure.zcml``,
+    we do not need a separate ``<include />`` line in ``configure.zcml`` for
+    this new dependency.
+
+The ``organizer`` field now looks like::
+
+    organizer = schema.Choice(
+        title=_(u"Organiser"),
+        vocabulary=u"plone.principalsource.Users",
+        required=False,
+    )
+
+The autocomplete selection widget
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The ``organizer`` field now has a query-based source. The standard
+selection widget (a drop-down list) is not capable of rendering such a
+source. Instead, we need to use a more powerful widget. For a basic
+widget, see `z3c.formwidget.query`_, but in a Plone context, you will
+more likely want to use `plone.formwidget.autocomplete`_, which extends
+``z3c.formwidget.query`` to provide friendlier user interface.
+
+The widget is provided with `plone.app.dexterity`_, so we do not need to
+configure it ourselves. We only need to tell Dexterity to use this
+widget instead of the default, using a form widget hint as shown
+earlier. At the top of ``program.py``, we add the following import::
+
+    from plone.formwidget.autocomplete import AutocompleteFieldWidget
+
+.. note::
+
+    If we were using a multi-valued field, such as a ``List`` with a
+    ``Choice`` ``value_type``, we would use the
+    ``AutocompleteMultiFieldWidget`` instead.
+
+In the ``IProgram`` schema (which, recall, derives from ``model.Schema`` and
+is therefore processed for form hints at startup), we then add the
+following::
+
+    form.widget(organizer=AutocompleteFieldWidget)
+    organizer = schema.Choice(
+        title=_(u"Organiser"),
+        vocabulary=u"plone.principalsource.Users",
+        required=False,
+    )
+
+You should now see a dynamic auto-complete widget on the form, so long
+as you have JavaScript enabled. Start typing a user name and see what
+happens. The widget also has fall-back for non-JavaScript capable
+browsers.
+
+.. _plone.app.dexterity: http://pypi.python.org/pypi/plone.app.dexterity
+.. _plone.principalsource: http://pypi.python.org/pypi/plone.principalsource
+.. _plone.app.vocabularies: http://pypi.python.org/pypi/plone.app.vocabularies
+.. _z3c.form: http://pypi.python.org/pypi/z3c.form
+.. _zope.schema: http://pypi.python.org/pypi/zope.schema
+.. _z3c.formwidget.query: http://pypi.python.org/pypi/z3c.formwidget.query
+.. _plone.formwidget.autocomplete: http://pypi.python.org/pypi/plone.formwidget.autocomplete
diff --git a/docs/grok/advanced/webdav-and-other-file-representations.rst b/docs/grok/advanced/webdav-and-other-file-representations.rst
new file mode 100644
index 0000000..56a2890
--- /dev/null
+++ b/docs/grok/advanced/webdav-and-other-file-representations.rst
@@ -0,0 +1,552 @@
+WebDAV and other file representations
+======================================
+
+**Adding support for WebDAV and accessing and modifying a
+content object using file-like operations**
+
+Zope supports WebDAV, a protocol that allows content objects to be
+viewed, modified, copied, renamed, moved and deleted as if they were
+files on the filesystem. WebDAV is also used to support saving to remote
+locations from various desktop programs. In addition, WebDAV powers the
+`External Editor`_ product, which allows users to launch a desktop
+program from within Plone to edit a content object.
+
+To configure a WebDAV server, you can add the following option to the
+``[instance]`` section of your ``buildout.cfg`` and re-run buildout.
+
+.. code-block:: ini
+
+    webdav-address = 9800
+
+See the documentation for `plone.recipe.zope2instance`_ for details.
+When Zope is started, you should now be able to mount it as a WebDAV
+server on the given port.
+
+Most operating systems support mounting WebDAV servers as folders.
+Unfortunately, not all WebDAV implementations are very good.
+Dexterity content should work with Windows Web Folders [*]_
+and well-behaved clients such as Novell NetDrive.
+
+.. [*] open Internet Explorer,
+   go to :guilabel:`File | Open`,
+   type in a WebDAV address, e.g.  http://localhost:9800,
+   and then select :guilabel:`Open as web folder` before hitting
+   :guilabel:`OK`
+
+On Mac OS X, the Finder claims to support WebDAV, but the implementation
+is so flakey that it is just as likely to crash Mac OS X as it is to let
+you browse files and folders. Use a dedicated WebDAV client instead,
+such as `Cyberduck`_.
+
+Default WebDAV behaviour
+------------------------
+
+By default, Dexterity content can be downloaded and uploaded using a
+text format based on :RFC:`2822`, the same standard used to encode email
+messages.
+Most fields are encoded in headers, whilst the field marked as “primary”
+will be contained in the body of the message.
+If there is more than one primary field, a multi-part message is created.
+
+A field can be marked as “primary” using the ``primary()`` directive from
+`plone.directives.form`_. For example::
+
+    class ISession(form.Schema):
+        """A conference session. Sessions are managed inside Programs.
+        """
+
+        title = schema.TextLine(
+                title=_(u"Title"),
+                description=_(u"Session title"),
+            )
+
+        description = schema.Text(
+                title=_(u"Session summary"),
+            )
+
+        form.primary('details')
+        details = RichText(
+                title=_(u"Session details"),
+                required=False
+            )
+
+        form.widget(presenter=AutocompleteFieldWidget)
+        presenter = RelationChoice(
+                title=_(u"Presenter"),
+                source=ObjPathSourceBinder(object_provides=IPresenter.__identifier__),
+                required=False,
+            )
+
+        dexterity.write_permission(track='example.conference.ModifyTrack')
+        track = schema.Choice(
+                title=_(u"Track"),
+                source=possibleTracks,
+                required=False,
+            )
+
+This will actually apply the ``IPrimaryField`` marker interface from the
+`plone.rfc822`_ package to the given field(s).
+
+A WebDAV download of this content item will by default look like this::
+
+    title: Test session
+    description: First session
+    presenter: 713399904
+    track: Administrators
+    MIME-Version: 1.0
+    Content-Type: text/html; charset="utf-8"
+    Portal-Type: example.conference.session
+
+    <p>Details <b>here</b></p>
+
+Notice how most fields are encoded as header strings.
+The ``presenter`` relation field stores a number,
+which is the integer id of the target object.
+Note that this id is generated when the content object is created,
+and so is unlikely to be valid on a different site.
+The ``details`` field, which we marked as primary,
+is encoded in the body of the message.
+
+It is also possible to upload such a file to create a new session.
+In order to do that, the ``content_type_registry`` tool needs to be
+configured with a predicate that can detect the type of content from the
+uploaded file and instantiate the correct type of object.
+Such predicates could be based on an extension or a filename pattern.
+Below, we will see a different approach that uses a custom “file factory”
+for the containing ``Program`` type.
+
+Containers
+~~~~~~~~~~
+
+Container objects will be shown as *collections* (WebDAV-speak for
+folders) for WebDAV purposes.
+This allows the WebDAV client to open the container and list its contents.
+However, representing containers as collections makes it impossible to
+access the data contained in the various fields of the content object.
+
+To allow access to this information, a pseudo-file called ``_data`` will
+be exposed inside a Dexterity container.
+This file can be read and written like any other,
+to access or modify the container’s data.
+It cannot be copied, moved, renamed or deleted: those operations should be
+performed on the container itself.
+
+Customising WebDAV behaviour
+----------------------------
+
+There are several ways in which you can influence the WebDAV behaviour
+of your type.
+
+- If you are happy with the :RFC:`2822` format, you can provide your own
+  ``plone.rfc822.interfaces.IFieldMarshaler`` adapters to provide
+  alternate serialisations and parsers for fields.
+  See the `plone.rfc822`_ documentation for details.
+- If you want to use a different file representation, you can provide
+  your own ``IRawReadFile`` and ``IRawWriteFile`` adapters.
+  For example, if you have a content object that stores binary data,
+  you could return this data directly, with an appropriate MIME type, to
+  allow it to be edited in a desktop program
+  (e.g. an image editor if the MIME type is ``image/jpeg``).
+  The file ``plone.dexterity.filerepresentation`` contains
+  two base classes, ``ReadFileBase`` and ``WriteFileBase``, which you may
+  be able to use to make it easier to implement these interfaces.
+- If you want to control how content objects are created when a new
+  file or directory is dropped into a particular type of container, you
+  can provide your own ``IFileFactory`` or ``IDirectoryFactory`` adapters.
+  See `plone.dexterity.filerepresentation`_ for the default implementations.
+
+As an example, let’s register a custom ``IFileFactory`` adapter for the
+``IProgram`` type.
+This adapter will not rely on the ``content_type_registry`` tool to
+determine which type to construct,
+but will instead create a ``Session`` object,
+since that is the only type that is allowed inside a ``Program`` container.
+
+The code, in ``program.py``, looks like this::
+
+    from five import grok
+    ...
+
+    from zope.component import createObject
+    from zope.event import notify
+    from zope.lifecycleevent import ObjectCreatedEvent
+    from zope.filerepresentation.interfaces import IFileFactory
+    ...
+
+    class ProgramFileFactory(grok.Adapter):
+        """Custom file factory for programs, which always creates a Session.
+        """
+
+        grok.implements(IFileFactory)
+        grok.context(IProgram)
+
+        def __call__(self, name, contentType, data):
+            session = createObject('example.conference.session', id=name)
+            notify(ObjectCreatedEvent(session))
+            return session
+
+This adapter overrides the ``DefaultFileFactory`` found in
+`plone.dexterity.filerepresentation`_.
+It creates an object of the designated type, fires an
+``IObjectModifiedEvent`` and then returns the object, which will then be
+populated with data from the uploaded file.
+
+To test this, you could write a text file like the one shown above in a
+text editor and save it on your desktop, then drag it into the folder in
+your WebDAV client representing a ``Program``.
+
+Here is a simple automated integration test for the same component::
+
+        def test_file_factory(self):
+            self.folder.invokeFactory('example.conference.program', 'p1')
+            p1 = self.folder['p1']
+            fileFactory = IFileFactory(p1)
+            newObject = fileFactory('new-session', 'text/plain', 'dummy')
+            self.assertTrue(ISession.providedBy(newObject))
+
+How it all works
+----------------
+
+The rest of this section describes in some detail how the various WebDAV
+related components interact in Zope 2, CMF and Dexterity.
+This may be helpful if you are trying to customise or debug WebDAV behaviour.
+
+Background
+~~~~~~~~~~
+
+Basic WebDAV support can be found in the ``webdav`` package.
+This defines two base classes, ``webdav.Resource.Resource`` and
+``webdav.Collection.Collection``.
+``Collection`` extends ``Resource``.
+These are mixed into *item* and *container* content objects, respectively.
+
+The webdav package also defines the ``NullResource`` object.
+A ``NullResource`` is a kind of placeholder,
+which supports the HTTP verbs ``HEAD``, ``PUT``, and ``MKCOL``.
+
+Contents based on ``ObjectManager`` (including those in Dexterity) will
+return a ``NullResource`` if they cannot find the requested object and the
+request is a WebDAV request.
+
+The `zope.filerepresentation`_ package defines a number of interfaces
+which are intended to help manage file representations of content
+objects.
+Dexterity uses these interfaces to allow the exact file read and write
+operations to be overridden without subclassing.
+
+``HEAD``
+~~~~~~~~~
+
+A ``HEAD`` request retrieves headers only.
+
+``Resource.HEAD()`` sets
+``Content-Type`` based on ``self.content_type()``,
+``Content-Length`` based on ``self.get\_size()``,
+``Last-Modified`` based on ``self._p_mtime``,
+and an ``ETag`` based on ``self.http__etag()``, if available.
+
+``Collection.HEAD()`` looks for ``self.index_html.HEAD()`` and returns its
+value if that exists.
+Otherwise, it returns a "405 Method Not Allowed" response. If there is no
+``index_html`` object, it returns "404 Not Found".
+
+``GET``
+~~~~~~~~
+
+A ``GET`` request retrieves headers and body.
+
+Zope calls ``manage_DAVget()`` to retrieve the body.
+The default implementation calls ``manage_FTPget()``.
+
+In Dexterity, ``manage_FTPget()`` adapts ``self`` to ``IRawReadFile`` and
+uses its ``mimeType`` and ``encoding`` properties to set the ``Content-Type``
+header, and its ``size()`` method to set ``Content-Length``.
+
+If the ``IRawReadFile`` adapter is also an ``IStreamIterator``,
+it will be returned for the publisher to consume directly.
+This provides for efficient serving of large files,
+although it does require that the file can be read in its entirety with the
+ZODB connection closed.
+Dexterity solves this problem by writing the file content to a temporary
+file on the server.
+
+If the ``IRawReadFile`` adapter is not a stream iterator, its contents are
+returned as a string, by calling its ``read()`` method.
+Note that this loads the entire file contents into memory on the server.
+
+The default ``IRawReadFile`` implementation for Dexterity content returns
+an :RFC:`2822`-style message document.
+Most fields on the object and any enabled behaviours will be turned into
+UTF-8 encoded headers.
+The primary field, if any, will be returned in the body, also most likely
+encoded as an UTF-8 encoded string.
+Binary data may be base64-encoded instead.
+
+A type which wishes to override this behaviour can provide its own adapter.
+For example, an image type could return the raw image data.
+
+``PUT``
+~~~~~~~~
+
+A ``PUT`` request reads the body of a request and uses it to update a
+resource that already exists, or to create a new object.
+
+By default ``Resource.PUT()`` fails with "405 Method Not Allowed".
+That is, it is not by default possible to ``PUT`` to a resource that already
+exists.
+The same is true of ``Collection.PUT()``.
+
+In Dexterity, the ``PUT()`` method is overridden to adapt self to
+``zope.filerepresentation.IRawWriteFile``, and call its ``write()`` method
+one or more times, writing the contents of the request body, before
+calling ``close()``.
+The ``mimeType`` and ``encoding`` properties will also be
+set based on the value of the ``Content-Type`` header, if available.
+
+The default implementation of ``IRawWriteFile`` for Dexterity objects
+assumes the input is an RFC 2822 style message document.
+It will read header values and use them to set fields on the object or in
+behaviours, and similarly read the body and update the corresponding primary
+field.
+
+``NullResource.PUT()`` is responsible for creating a new content object
+and initialising it (recall that a ``NullResource`` may be returned if a
+WebDAV request attempts to traverse to an object which does not exist).
+It sniffs the content type and body from the request,
+and then looks for the ``PUT_factory()`` method on the parent folder.
+
+In Dexterity, ``PUT_factory()`` is implemented to look up an
+``IFileFactory`` adapter on self and use it to create the empty file.
+The default implementation will use the ``content_type_registry`` tool to
+determine a type name for the request (e.g. based on its extension or
+MIME type), and then construct an instance of that type.
+
+Once an instance has been constructed, the object will be initialised by
+calling its ``PUT()`` method, as above.
+
+Note that when content is created via WebDAV,
+an ``IObjectCreatedEvent`` will be fired from the ``IFileFactory`` adapter,
+just after the object has been constructed.
+At this point, none of its values will be set.
+Subsequently, at the end of the ``PUT()`` method,
+an ``IObjectModifiedEvent`` will be fired.
+This differs from the event sequence of an object created through the web.
+Here, only an ``IObjectCreatedEvent`` is fired,
+and only *after* the object has been fully initialised.
+
+``DELETE``
+~~~~~~~~~~~
+
+A ``DELETE`` request instructs the WebDAV server to delete a resource.
+
+``Resource.DELETE()`` calls ``manage_delObjects()`` on the parent folder to
+delete an object.
+
+``Collection.DELETE()`` does the same,
+but checks for write locks of all children of the collection, recursively,
+before allowing the delete.
+
+``PROPFIND``
+~~~~~~~~~~~~~
+
+A ``PROPFIND`` request returns all or a set of WebDAV properties.
+WebDAV properties are metadata used to describe an object, such as the last
+modified time or the author.
+
+``Resource.PROPFIND()`` parses the request and then looks for a
+``propertysheets`` attribute on self.
+
+If an ``allprop`` request is received, it calls ``dav__allprop()``,
+if available, on each property sheet.
+This method returns a list of name/value pairs in the correct WebDAV XML
+encoding, plus a status.
+
+If a ``propnames`` request is received, it calls ``dav__propnames()``,
+if available, on each property sheet.
+This method returns a list of property names in the correct WebDAV XML
+encoding, plus a status.
+
+If a ``propstat`` request is received, it calls ``dav__propstats()``,
+if available, on each property sheet,
+for each requested property.
+This method returns a property name/value pair in the correct WebDAV XML
+encoding, plus a status.
+
+The ``PropertyManager`` mixin class defines the ``propertysheets`` variable
+to be an instance of ``DefaultPropertySheets``.
+This in turn has two property sheets:
+``default``, a ``DefaultProperties`` instance; and
+``webdav``, a ``DAVProperties`` instance.
+
+The ``DefaultProperties`` instance contains the main property sheet. This
+typically has a ``title`` property, for example.
+
+``DAVProperties`` will provides various core WebDAV properties.
+It defines a number of read-only properties:
+``creationdate``, ``displayname``,
+``resourcetype``, ``getcontenttype``, ``getcontentlength``, ``source``,
+``supportedlock``, and ``lockdiscovery``.
+These in turn are delegated to methods prefixed with ``dav__``, so e.g.
+reading the ``creationdate`` property calls ``dav__creationdate()`` on the
+property sheet instance.
+These methods in turn return values based on the property manager instance
+(i.e. the content object).
+In particular:
+
+``creationdate``
+    returns a fixed date (January 1st, 1970).
+
+``displayname``
+    returns the value of the ``title_or_id()`` method.
+
+``resourcetype``
+    returns an empty string or ``<n:collection/>``.
+
+``getlastmodified``
+    returns the ZODB modification time.
+
+``getcontenttype``
+    delegates to the ``content_type()`` method, falling back on the
+    ``default_content_type()`` method.
+    In Dexterity, ``content_type()`` is implemented to look up the
+    ``IRawReadFile`` adapter on the context and return the value of its
+    ``mimeType`` property.
+
+``getcontentlength``
+    delegates to the ``get_size()`` method (which is also used for the
+    “size” column in Plone folder listings).
+    In Dexterity, this looks up a ``zope.size.interfaces.ISized`` adapter on
+    the object and calls ``sizeForSorting()``.
+    If this returns a unit of ``'bytes'``, the value portion is used.
+    Otherwise, a size of 0 is returned.
+
+``source``
+    returns a link to ``/document_src``, if that attribute exists.
+
+``supportedlock``
+    indicates whether ``IWriteLock`` is supported by the content item.
+
+``lockdiscovery``
+    returns information about any active locks.
+
+Other properties in this and any other property sheets are returned as
+stored when requested.
+
+If the ``PROPFIND`` request specifies a depth of 1 or infinity
+(i.e. the client wants properties for items in a collection),
+the process is repeated for all items returned by the ``listDAVObjects()``
+methods,
+which by default returns all contained items via the ``objectValues()``
+method.
+
+``PROPPATCH``
+~~~~~~~~~~~~~~
+
+A ``PROPPATCH`` request is used to update the properties on an existing
+object.
+
+``Resource.PROPPATCH()`` deals with the same types of properties from
+property sheets as ``PROPFIND()``.
+It uses the ``PropertySheet`` API to add or update properties as
+appropriate.
+
+``MKCOL``
+~~~~~~~~~
+
+A ``MKCOL`` request is used to create a new collection resource,
+i.e. create a new folder.
+
+``Resource.MKCOL()`` raises "405 Method Not Allowed",
+because the resource already exists
+(remember that in WebDAV, the ``MKCOL`` request, like a ``PUT``
+for a new resource, is sent with a location that specifies the desired
+new resource location, not the location of the parent object).
+
+``NullResource.MKCOL()`` handles the valid case where a ``MKCOL`` request
+has been sent to a new resource.
+After checking that the resource does not already exist,
+that the parent is indeed a collection (folderish item),
+and that the parent is not locked,
+it calls the ``MKCOL_handler()`` method on the parent folder.
+
+In Dexterity, the ``MKCOL()_handler`` is overridden to adapt ``self`` to an
+``IDirectoryFactory`` from `zope.filerepresentation`_ and use this to
+create a directory.
+The default implementation simply calls ``manage_addFolder()`` on the parent.
+This will create an instance of the ``Folder`` type.
+
+``COPY``
+~~~~~~~~
+
+A ``COPY`` request is used to copy a resource.
+
+``Resource.COPY()`` implements this operation using the standard Zope
+content object copy semantics.
+
+``MOVE``
+~~~~~~~~
+
+A ``MOVE`` request is used to relocate or rename a resource.
+
+``Resource.MOVE()`` implements this operation using the standard Zope
+content-object move semantics.
+
+``LOCK``
+~~~~~~~~
+
+A ``LOCK`` request is used to lock a content object.
+
+All relevant WebDAV methods in the ``webdav`` package are lock aware.
+That is, they check for locks before attempting any operation that would
+violate a lock.
+
+Also note that `plone.locking`_ uses the lock implementation from the
+``webdav`` package by default.
+
+``Resource.LOCK()`` implements locking and lock refresh support.
+
+``NullResource.LOCK()`` implements locking on a ``NullResource``.
+In effect, this means locking the name of the non-existent resource.
+When a ``NullResource`` is locked, it is temporarily turned into a
+``LockNullResource`` object, which is a persistent object set onto the
+parent (remember that a ``NullResource`` is a transient object returned
+when a child object cannot be found in a WebDAV request).
+
+``UNLOCK``
+~~~~~~~~~~
+
+An ``UNLOCK`` request is used to unlock a locked object.
+
+``Resource.UNLOCK()`` handles unlock requests.
+
+``LockNullResource.UNLOCK()`` handles unlocking of a ``LockNullResource``.
+This deletes the ``LockNullResource`` object from the parent container.
+
+Fields on container objects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+When browsing content via WebDAV, a container object (folderish item)
+will appear as a folder.
+Most likely, this object will also have content in the form of schema
+fields.
+To make this accessible, Dexterity containers expose a pseudo-file with the
+name ``_data``, by injecting this into the return value of
+``listDAVObjects()`` and adding a special traversal hook to allow its
+contents to be retrieved.
+
+This file supports ``HEAD``, ``GET``, ``PUT``, ``LOCK``, ``UNLOCK``,
+``PROPFIND`` and ``PROPPATCH`` requests (an error will be raised if the user
+attempts to rename, copy, move or delete it).
+These operate on the container object, obviously.
+For example, when the data object is updated via a PUT request, the
+``PUT()`` method on the container is called, by default delegating to an
+``IRawWriteFile`` adapter on the container.
+
+.. _Cyberduck: http://cyberduck.ch/
+.. _External Editor: ../../../../../external-editor
+.. _plone.dexterity.filerepresentation: http://pypi.python.org/pypi/plone.dexterity.filerepresentation
+.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
+.. _plone.locking: http://pypi.python.org/pypi/plone.locking
+.. _plone.recipe.zope2instance: http://pypi.python.org/pypi/plone.recipe.zope2instance
+.. _plone.rfc822: http://pypi.python.org/pypi/plone.rfc822
+.. _zope.filerepresentation: http://pypi.python.org/pypi/zope.filerepresentation
diff --git a/docs/grok/advanced/workflow.rst b/docs/grok/advanced/workflow.rst
new file mode 100644
index 0000000..d6781de
--- /dev/null
+++ b/docs/grok/advanced/workflow.rst
@@ -0,0 +1,388 @@
+Workflow
+========
+
+**Controlling security with workflow**
+
+Workflow is used in Plone for three distinct, but overlapping purposes:
+
+- To keep track of metadata, chiefly an object’s *state*;
+- to create content review cycles and model other types of processes;
+- to manage object security.
+
+When writing content types,
+we will often create custom workflows to go with them.
+In this section,
+we will explain at a high level how Plone’s workflow system works,
+and then show an example of a simple workflow to go with our example types.
+An exhaustive manual on using workflows is beyond the scope of this manual,
+but hopefully this will cover the basics.
+
+.. note::
+
+    There is nothing Dexterity-specific in this section.
+    Everything here applies equally well to content objects
+    created with Archetypes or using CMF directly.
+
+A DCWorkflow refresher
+----------------------
+
+What follows is a fairly detailed description of `DCWorkflow`_,
+originally posted `here`_.
+You may find some of this a little detailed on first reading,
+so feel free to skip to the specifics later on.
+However, it is useful to be familiar with the high level concepts.
+You’re unlikely to need multi-workflow chains
+in your first few attempts at workflow, for instance,
+but it’s useful to know what it is if you come across the term.
+
+.. _here: http://www.martinaspeli.net/articles/dcworkflows-hidden-gems
+
+Plone’s workflow system is known as DCWorkflow.
+It is a *states-and-transitions* system,
+which means that your workflow starts in a particular *state*
+(the *initial state*) and then moves to other states via *transitions*
+(also called *actions* in CMF).
+
+When an object enters a particular state (including the initial state),
+the workflow is given a chance to update **permissions** on the object.
+A workflow manages a number of permissions –
+typically the “core” CMF permissions
+like :guilabel:`View`, :guilabel:`Modify portal content` and so on –
+and will set those on the object at each state change.
+Note that this is event-driven, rather than a real-time security check:
+only by changing the state is the security information updated.
+This is why you need to click :guilabel:`Update security settings`
+at the bottom of the ``portal_workflow``
+screen in the ZMI when you change your workflows’ security settings and
+want to update existing objects.
+
+A state can also assign *local roles* to *groups*.
+This is akin to assigning roles to groups on Plone’s :guilabel:`Sharing` tab,
+but the mapping of roles to groups happens on each state change,
+much like the mapping of roles to permissions.
+Thus, you can say that in the ``pending_secondary`` state,
+members of the :guilabel:`Secondary reviewers` group
+have the :guilabel:`Reviewer` local role.
+This is powerful stuff when combined with the more usual role-to-permission
+mapping, although it is not very commonly used.
+
+State changes result in a number of *variables* being recorded,
+such as the *actor* (the user that invoked the transition),
+the *action* (the name of the transition),
+the date and time and so on.
+The list of variables is dynamic,
+so each workflow can define any number of variables
+linked to `TALES`_ expressions that are invoked
+to calculate the current value at the point of transition.
+The workflow also keeps track of the current state of each object.
+The state is exposed as a special type of workflow variable
+called the *state variable*.
+Most workflows in Plone uses the name ``review_state`` as the state variable.
+
+Workflow variables are recorded for each state change
+in the *workflow history*.
+This allows you to see when a transition occurred,
+who effected it, and what state the object was in before or after.
+In fact, the “current state” of the workflow is internally looked up
+as the most recent entry in the workflow history.
+
+Workflow variables are also the basis for *worklists*.
+These are basically pre-defined catalog queries
+run against the current set of workflow variables.
+Plone’s review portlet shows all current worklists
+from all installed workflows.
+This can be a bit slow,
+but it does mean that you can use a single portlet
+to display an amalgamated list of all items on all worklists
+that apply to the current user.
+Most Plone workflows have a single worklist
+that matches on the ``review_state`` variable,
+e.g. showing all items in the ``pending`` state.
+
+If states are the static entities in the workflow system,
+*transitions* (actions) provide the dynamic parts.
+Each state defines zero or more possible exit transitions,
+and each transition defines exactly one target state,
+though it is possible to mark a transition as “stay in current state”.
+This can be useful if you want to do something in reaction to a transition
+and record that the transition happened in the workflow history,
+but not change the state (or security) of the object.
+
+Transitions are controlled by one or more *guards*.
+These can be permissions (the preferred approach),
+roles (mostly useful for the :guilabel:`Owner` role –
+in other cases it is normally better to use permissions)
+or `TALES`_ expressions.
+A transition is available if all its guard conditions are true.
+A transition with no guard conditions is available to everyone
+(including anonymous!).
+
+Transitions are user-triggered by default, but may be **automatic**.
+An automatic transition triggers immediately following another transition
+provided its guard conditions pass.
+It will not necessarily trigger as soon as the guard condition becomes true,
+as that would involve continually re-evaluating guards
+for all active workflows on all objects!
+
+When a transition is triggered,
+the ``IBeforeTransitionEvent`` and ``IAfterTransitionEvent`` **events**
+are triggered.
+These are low-level events from ``Products.DCWorkflow`` that can tell you a
+lot about the previous and current states.
+There is a higher level ``IActionSucceededEvent`` in ``Products.CMFCore``
+that is more commonly used to react after a workflow action has completed.
+
+In addition to the events, you can configure workflow **scripts**.
+These are either created through-the-web
+or (more commonly) as External Methods [*]_,
+and may be set to execute before a transition is complete
+(i.e.  before the object enters the target state)
+or just after it has been completed (the object is in the new state).
+Note that if you are using event handlers,
+you’ll need to check the event object to find out which transition was
+invoked, since the events are fired on all transitions.
+The per-transition scripts are only called for the specific transitions
+for which they were configured.
+
+.. [*] An *External Method* is a Python script evaluated in Zope context.
+   See `Logic Objects
+   <http://docs.zope.org/zope2/zope2book/BasicObject.html#logic-objects-script-python-objects-and-external-methods>`_
+   in the Zope 2 Book.
+
+Multi-chain workflows
+~~~~~~~~~~~~~~~~~~~~~
+
+Workflows are mapped to types via the ``portal_workflow`` tool.
+There is a default workflow, indicated by the string ``(Default)``.
+Some types have no workflow,
+which means that they hold no state information and
+typically inherit permissions from their parent.
+It is also possible for types to have *multiple workflows*.
+You can list multiple workflows by separating their names by commas.
+This is called a *workflow chain*.
+
+Note that in Plone, the workflow chain of an object is looked up by
+multi-adapting the object and the workflow to the ``IWorkflowChain``
+interface.
+The adapter factory should return a tuple of string workflow names
+(``IWorkflowChain`` is a specialisation of ``IReadSequence``, i.e. a tuple).
+The default obviously looks at the mappings in the ``portal_workflow`` tool,
+but it is possible to override the mapping,
+e.g. by using a custom adapter registered for some marker interface,
+which in turn could be provided by a type-specific behavior.
+
+Multiple workflows applied in a single chain co-exist in time.
+Typically, you need each workflow in the chain to have a different state
+variable name.
+The standard ``portal_workflow`` API (in particular,
+``doActionFor()``, which is used to change the state of an object)
+also assumes the transition ids are unique.
+If you have two workflows in the chain and both currently have a ``submit``
+action available,
+only the first workflow will be transitioned if you do
+``portal_workflow.doActionFor(context, ‘submit’)``.
+Plone will show all available transitions from all workflows in the current
+object’s chain in the ``State`` drop-down,
+so you do not need to create any custom UI for this.
+However, Plone always assumes the state variable is called ``review_state``
+(which is also the variable indexed in ``portal_catalog``).
+Therefore, the state of a secondary workflow won’t show up
+unless you build some custom UI.
+
+In terms of security, remember that the role-to-permission
+(and group-to-local-role) mappings
+are event-driven and are set after each transition.
+If you have two concurrent workflows that manage the same permissions,
+the settings from the last transition invoked will apply.
+If they manage different permissions (or there is a partial overlap)
+then only the permissions managed by the most-recently-invoked workflow
+will change, leaving the settings for other permissions untouched.
+
+Multiple workflows can be very useful in case you have concurrent processes.
+For example, an object may be published, but require translation.
+You can track the review state in the main workflow
+and the translation state in another.
+If you index the state variable for the second workflow in the catalog
+(the state variable is always available on the indexable object wrapper
+so you only need to add an index with the appropriate name
+to ``portal_catalog``)
+you can search for all objects pending translation,
+for example using a *Collection*.
+
+Creating a new workflow
+-----------------------
+
+With the theory out of the way, let’s show how to create a new workflow.
+
+Workflows are managed in the ``portal_workflow`` tool. You can use the ZMI
+to create new workflows and assign them to types. However, it is usually
+preferable to create an installable workflow configuration using
+GenericSetup. By default, each workflow as well as the workflow
+assignments are imported and exported using an XML syntax. This syntax
+is comprehensive, but rather verbose if you are writing it manually.
+
+For the purposes of this manual, we will show an alternative
+configuration syntax based on spreadsheets (in CSV format). This is
+provided by the `collective.wtf`_ package. You can read more about the
+details of the syntax in its documentation. Here, we will only show how
+to use it to create a simple workflow for the ``Session`` type, allowing
+members to submit sessions for review.
+
+To use ``collective.wtf``, we need to depend on it.
+In ``setup.py``, we have::
+
+      install_requires=[
+          ...
+          'collective.wtf',
+      ],
+
+.. note::
+
+    As before, the ``<includeDependencies />`` line in ``configure.zcml``
+    takes care of configuring the package for us.
+
+A workflow definition using ``collective.wtf`` consists of a CSV file in
+the ``profiles/default/workflow_csv`` directory,
+which we will create,
+and a ``workflows.xml`` file in ``profiles/default``
+which maps types to workflows.
+
+The workflow mapping in ``profiles/default/workflows.xml`` looks like
+this:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="portal_workflow">
+        <bindings>
+            <type type_id="example.conference.session">
+                <bound-workflow workflow_id="example.conference.session_workflow"/>
+            </type>
+        </bindings>
+    </object>
+
+The CSV file itself is found in
+``profiles/default/workflow_csv/example.conference.session_workflow.csv``.
+It contains the following,
+which was exported to CSV from an OpenOffice spreadsheet.
+You can find the original spreadsheet with the
+`example.conference source code`_. This applies some useful formatting,
+which is obviously lost in the CSV version.
+
+.. note::
+
+    For your own workflows, you may want to use `this template`_ as a
+    starting point.
+
+.. _this template: ../Workflow%20template.ods
+
+::
+
+    "[Workflow]"
+    "Id:","example.conference.session_workflow"
+    "Title:","Conference session workflow"
+    "Description:","Allows members to submit session proposals for review"
+    "Initial state:","draft"
+
+    "[State]"
+    "Id:","draft"
+    "Title:","Draft"
+    "Description:","The proposal is being drafted."
+    "Transitions","submit"
+    "Permissions","Acquire","Anonymous","Authenticated","Member","Manager","Owner","Editor","Reader","Contributor","Reviewer"
+    "View","N",,,,"X","X","X","X",,
+    "Access contents information","N",,,,"X","X","X","X",,
+    "Modify portal content","N",,,,"X","X","X",,,
+
+
+    "[State]"
+    "Id:","pending"
+    "Title:","Pending"
+    "Description:","The proposal is pending review"
+    "Worklist:","Pending review"
+    "Worklist label:","Conference sessions pending review"
+    "Worklist guard permission:","Review portal content"
+    "Transitions:","reject, publish"
+    "Permissions","Acquire","Anonymous","Authenticated","Member","Manager","Owner","Editor","Reader","Contributor","Reviewer"
+    "View","N",,,,"X","X","X","X",,"X"
+    "Access contents information","N",,,,"X","X","X","X",,"X"
+    "Modify portal content","N",,,,"X","X","X",,,"X"
+
+    "[State]"
+    "Id:","published"
+    "Title:","Published"
+    "Description:","The proposal has been accepted"
+    "Transitions:","reject"
+    "Permissions","Acquire","Anonymous","Authenticated","Member","Manager","Owner","Editor","Reader","Contributor","Reviewer"
+    "View","Y","X",,,,,,,,
+    "Access contents information","Y","X",,,,,,,,
+    "Modify portal content","Y",,,,"X","X","X",,,
+
+    "[Transition]"
+    "Id:","submit"
+    "Title:","Submit"
+    "Description:","Submit the session for review"
+    "Target state:","pending"
+    "Guard permission:","Request review"
+
+    "[Transition]"
+    "Id:","reject"
+    "Title:","Reject"
+    "Description:","Reject the session from the program"
+    "Target state:","draft"
+    "Guard permission:","Review portal content"
+
+    "[Transition]"
+    "Id:","publish"
+    "Title:","Publish"
+    "Description:","Accept and publish the session proposal"
+    "Target state:","published"
+    "Guard permission:","Review portal content"
+
+Here, you can see several states and transitions.
+Each state contains a role/permission map,
+and a list of the possible exit transitions.
+Each transition contains a target state and other meta-data such as a title
+and a description, as well as guard permissions.
+
+.. note::
+
+    Like most other GenericSetup import steps, the workflow uses
+    the Zope 2 permission title when referring to permissions.
+
+When the package is (re-)installed, this workflow should be available
+under ``portal_workflow`` and mapped to the ``Session`` type.
+
+.. note::
+
+    If you have existing instances, don’t forget to go to ``portal_workflow``
+    in the ZMI and click :guilabel:`Update security settings`
+    at the bottom of the page.
+    This ensures that existing objects reflect the most recent security
+    settings in the workflow.
+
+A note about add permissions
+----------------------------
+
+This workflow assumes that regular members can add *Session* proposals to
+*Programs*, which are then reviewed.
+Previously, we granted the
+``example.conference: Add session`` permission to the ``Member`` role.
+This is necessary, but not sufficient
+to allow members to add sessions to programs.
+The user will also need the generic ``Add portal content`` permission in the
+``Program`` folder.
+
+There are two ways to achieve this:
+
+- Build a workflow for the ``Program`` type that manages this permission
+- Use the :guilabel:`Sharing` tab to grant :guilabel:`Can add` to the
+  :guilabel:`Authenticated Users` group.
+  This grants the :guilabel:`Contributor` local role to members.
+  By default, this role is granted the :guilabel:`Add portal content`
+  permission.
+
+.. _collective.wtf: http://pypi.python.org/pypi/collective.wtf
+.. _DCWorkflow: http://pypi.python.org/pypi/Products.DCWorkflow
+.. _example.conference source code: http://svn.plone.org/svn/collective/example.conference/trunk/example/conference/profiles/default/workflow_csv
+.. _TALES: http://docs.zope.org/zope2/zope2book/AppendixC.html#tales-overview
diff --git a/docs/grok/behaviors/behavior-basics.rst b/docs/grok/behaviors/behavior-basics.rst
new file mode 100644
index 0000000..d304964
--- /dev/null
+++ b/docs/grok/behaviors/behavior-basics.rst
@@ -0,0 +1,34 @@
+Behavior basics
+================
+
+**The fundamental concepts behind behaviors**
+
+Before we dive into the practical examples, we need to explain a few of
+the concepts that underpin behaviors.
+
+At the most basic level, a behavior is like a ‘conditional’ adapter. For
+a Dexterity content type, the condition is, "is this behavior listed in
+the *behaviors* property in the FTI?" When a behavior is enabled for a
+particular object, it will be possible to adapt that object to the
+behavior’s interface. If the behavior is disabled, adaptation will fail.
+
+A behavior consist at the very least of an interface and some metadata,
+namely a title and a description. In most cases, there is also a
+*factory*, akin to an adapter factory, which will be invoked to get an
+appropriate adapter when requested. This is usually just a class that
+looks like any other adapter factory, although it will tend to be
+applicable to *Interface*, *IContentish* or a similarly broad context.
+
+In some cases, behaviors specify a *marker interface*, which will be
+directly provided by instances for which the behavior is enabled. This
+is useful if you want to conditionally enable event handlers or view
+components, which are registered for this marker interface. Some
+behaviors have no factory. In this case, the behavior interface and the
+marker interface must be one and the same.
+
+Behaviors are registered globally, using the *<plone.behavior />* ZCML
+directive. This results in, among other things, a named utility
+providing *plone.behavior.interfaces.IBehavior* being registered. This
+utility contains various information about the behavior, such as its
+name, title, interface and (optional) marker interface. The utility name
+is the full dotted name to the behavior interface.
diff --git a/docs/grok/behaviors/creating-and-registering-behaviors.rst b/docs/grok/behaviors/creating-and-registering-behaviors.rst
new file mode 100644
index 0000000..222d6f4
--- /dev/null
+++ b/docs/grok/behaviors/creating-and-registering-behaviors.rst
@@ -0,0 +1,175 @@
+Creating and registering behaviors
+====================================
+
+**How to create a basic behavior that provides form fields**
+
+The following example is based on the `collective.gtags`_ product, which
+comes with a behavior that adds a *tags* field to the “Categorization”
+fieldset, storing the actual tags in the Dublin Core *Subject* field.
+
+*collective.gtags* is a standard package, with a *configure.zcml*, a
+GenericSetup profile, and a number of modules. We won’t describe those
+here, though, since we are only interested in the behavior.
+
+First, there are a few dependencies in *setup.py*:
+
+.. code-block:: python
+
+          install_requires=[
+              ...,
+              'plone.behavior',
+              'plone.directives.form',
+              'zope.schema',
+              'zope.interface',
+              'zope.component',
+              'rwproperty',
+          ],
+
+The dependency on *plone.directives.form* is there to support form
+fields. If your behavior does not require form fields, you can skip this
+dependency. The *rwproperty* dependency provides some convenience
+decorators that are used in the behavior adapter factory class.
+
+Next, we have *behaviors.zcml*, which is included from *configure.zcml*
+and contains all necessary configuration to set up the behaviors. It
+looks like this:
+
+.. code-block:: xml
+
+    <configure
+        xmlns="http://namespaces.zope.org/zope"
+        xmlns:plone="http://namespaces.plone.org/plone"
+        xmlns:grok="http://namespaces.zope.org/grok"
+        i18n_domain="collective.gtags">
+
+        <include package="plone.behavior" file="meta.zcml" />
+
+        <include package="plone.directives.form" file="meta.zcml" />
+        <include package="plone.directives.form" />
+
+        <grok:grok package=".behaviors" />
+
+        <plone:behavior
+            title="GTags"
+            description="Use the Dublin Core Subject (keywords) field for Google Code like tags."
+            provides=".behaviors.ITags"
+            factory=".behaviors.Tags"
+            />
+
+    </configure>
+
+We first include the *plone.behavior meta.zcml* file, so that we get
+access to the *<plone:behavior />* ZCML directive.
+
+The next three lines include *plone.directives.form* and its *meta.zcml*
+file, and then invoke the *grok* action on the *behaviors* module. This
+is not directly related to the behavior, but rather to the configuration
+of a schema interface that provides form fields and display hints to
+*plone.autoform* (and thus Dexterity’s standard add and edit forms). If
+your behavior is not a form field provider, you can omit these lines.
+Similarly, if you have grokked the entire package elsewhere with
+*<grok:grok package=“.” />*, you can omit the *<grok:grok
+package=“.behaviors” />* line. Otherwise, adjust it to reflect the
+module or package where your behaviors are kept.
+
+The behavior itself is registered with the *<plone:behavior />*
+directive. We set a *title* and a *description*, and then speicfy the
+**behavior interface** with the *provides* attribute. This attribute is
+required, and is used to construct the unique name for the behavior. In
+this case, the behavior name is *collective.gtags.behaviors.ITags*, the
+full dotted name to the behavior interface. When the behavior is enabled
+for a type, it will be possible to adapt instances of that type to
+*ITags*. That adaptation will invoke the factory specified by the
+*factory* attribute.
+
+The *behaviors.py* module looks like this:
+
+::
+
+    """Behaviours to assign tags (to ideas).
+
+    Includes a form field and a behaviour adapter that stores the data in the
+    standard Subject field.
+    """
+
+    from rwproperty import getproperty, setproperty
+
+    from zope.interface import implements, alsoProvides
+    from zope.component import adapts
+
+    from plone.directives import form
+    from collective.gtags.field  import Tags
+
+    from Products.CMFCore.interfaces import IDublinCore
+
+    from collective.gtags import MessageFactory as _
+
+    class ITags(form.Schema):
+        """Add tags to content
+        """
+
+        form.fieldset(
+                'categorization',
+                label=_(u'Categorization'),
+                fields=('tags',),
+            )
+
+        tags = Tags(
+                title=_(u"Tags"),
+                description=_(u"Applicable tags"),
+                required=False,
+                allow_uncommon=True,
+            )
+
+    alsoProvides(ITags, form.IFormFieldProvider)
+
+    class Tags(object):
+        """Store tags in the Dublin Core metadata Subject field. This makes
+        tags easy to search for.
+        """
+        implements(ITags)
+        adapts(IDublinCore)
+
+        def __init__(self, context):
+            self.context = context
+
+        @getproperty
+        def tags(self):
+            return set(self.context.Subject())
+        @setproperty
+        def tags(self, value):
+            if value is None:
+                value = ()
+            self.context.setSubject(tuple(value))
+
+We first define the *ITags* interface, which is also the behavior
+interface. Here, we define a single attribute, *tags*, but we could also
+have added methods and additional fields if required. Naturally, these
+need to be implemented by the behavior adapter.
+
+Since we want this behavior to provide form fields, we derive the
+behavior interface from *form.Schema* and set form hints using
+*plone.directives.form*(remember that these will only take effect if the
+package is *grokked*). We also mark the *ITags* interface with
+*IFormFieldProvider* to signal that it should be processed for form
+fields by the standard forms. See the `Dexterity Developer Manual`_ for
+more information about setting form hints in schema interfaces.
+
+If your behavior does not provide form fields, you can just derive from
+*zope.interface.Interface* and omit the *alsoProvides()* line.
+
+Next, we write the class that implements the behavior adapter and acts
+the adapter factory. Notice how it implements the behavior interface
+(*ITags*), and adapts a broad interface *(IDublinCore*). The behavior
+cannot be enabled on types not supporting this interface. In many cases,
+you will omit the *adapts()* line, provided your behavior is generic
+enough to work on any context.
+
+The adapter is otherwise identical to any other adapter. It implements
+the interface, here by storing values in the *Subject* field. The use of
+*getproperty* and *setproperty* from the `rwproperty`_ package is for
+convenience only.
+
+.. _Dexterity Developer Manual: ../index.html
+.. _rwproperty: http://pypi.python.org/pypi/rwproperty
+.. _collective.gtags: http://svn.plone.org/svn/collective/collective.gtags
diff --git a/docs/grok/behaviors/index.rst b/docs/grok/behaviors/index.rst
new file mode 100644
index 0000000..da1be4b
--- /dev/null
+++ b/docs/grok/behaviors/index.rst
@@ -0,0 +1,14 @@
+Behaviors
+==========
+
+**How to create re-usable behaviors for Dexterity types**
+
+.. toctree::
+   :maxdepth: 2
+
+   intro.rst
+   behavior-basics.rst
+   creating-and-registering-behaviors.rst
+   providing-marker-interfaces.rst
+   schema-only-behaviors.rst
+   testing-behaviors.rst
diff --git a/docs/grok/behaviors/intro.rst b/docs/grok/behaviors/intro.rst
new file mode 100644
index 0000000..c78c66f
--- /dev/null
+++ b/docs/grok/behaviors/intro.rst
@@ -0,0 +1,46 @@
+Introduction
+=============
+
+**About this manual**
+
+*Behaviors* are re-usable bundles of functionality that can be enabled
+or disabled on a per-content type basis. Examples might include:
+
+-  A set of form fields (on standard add and edit forms)
+-  Enabling particular event handler
+-  Enabling one or more views, viewlets or other UI components
+-  Anything else which may be expressed in code via an adapter and/or
+   marker interface
+
+You would typically not write a behavior as a one-off. Behaviors are
+normally used when:
+
+-  You want to share fields and functionality across multiple types
+   easily. Behaviors allow you to write a schema and associated
+   components (e.g. adapters, event handlers, views, viwelets) once and
+   re-use them easily.
+-  A more experienced developer is making functionality available for
+   re-use by less experienced integrators. For example, a behavior can
+   be packaged up and release as an add-on product. Integators can then
+   install that product and use the behavior in their own types, either
+   in code or through-the-web.
+
+This manual is aimed at developers who want to write new behaviors. This
+is a slightly more advanced topic than the writing of custom content
+types, and we will assume that you are familiar with buildout, know how
+to create a custom package, understand interfaces and have a basic
+understanding of Zope’s adapter concept.
+
+Behaviors are not tied to Dexterity, but Dexterity provides behavior
+support for its types via the *behaviors* FTI property. In fact, if
+you’ve used Dexterity before, you’ve probably used some behaviors. Take
+a look at the `Dexterity Developer Manual`_ for more information about
+how to enable behaviors on a type and for a list of standard behaviors.
+
+To learn more about how behaviors are implemented, see the
+`plone.behavior`_ package. This manual should teach you everything you
+need to know to write your own behaviors, but not how to integrate them
+into another framework.
+
+.. _Dexterity Developer Manual: ../index.html
+.. _plone.behavior: http://pypi.python.org/pypi/plone.behavior
diff --git a/docs/grok/behaviors/providing-marker-interfaces.rst b/docs/grok/behaviors/providing-marker-interfaces.rst
new file mode 100644
index 0000000..d93ac6c
--- /dev/null
+++ b/docs/grok/behaviors/providing-marker-interfaces.rst
@@ -0,0 +1,245 @@
+Providing marker interfaces
+=============================
+
+**How to use behaviors to set marker interfaces on instances of a given type.**
+
+Sometimes, it is useful for objects that provide a particular behavior
+to also provide a specific marker interface. For example, you can
+register a viewlet for a particular marker and use a behavior to enable
+that marker on all instances of a particular content type. The viewlet
+will then only show up when the behavior is enabled. The same principle
+can be applied to event handlers, views and other components.
+
+.. note::
+    There is usually no need to use markers to enable a custom adapter since
+    a standard behavior is already a conditional adapter. However, in
+    certain cases, you may want to provide one or more adapters to an
+    interface that is not the behavior interface, e.g. to use a particular
+    extension point provided by another component. In this case, it may
+    easier to set a marker interface and provide an adapter from this
+    marker.
+
+*plone.behavior’s* marker support can be used in two ways:
+
+-  As the behavior interface itself. In this case, there is no behavior
+   adapter factory. The behavior interface and the marker interface are
+   one and the same.
+-  As a supplement to a standard behavior adapter. In this case, a
+   factory is provided, and the behavior interface (which the behavior
+   adapter factory implements) is different to the marker interface.
+
+Primary marker behaviors
+------------------------
+
+In the first case, where the behavior interface and the marker interface
+are the same, you can simply use the *<plone:behavior />*directive
+without a *factory*. For example:
+
+.. code-block:: xml
+
+        <plone:behavior
+            title="Pony viewlet"
+            description="Shows a pony next to the content"
+            provides=".behaviors.IWantAPony"
+            />
+
+One could imagine a viewlet based on `plone.pony`_ registered for the
+*IWantAPony* marker interface. If the behavior is enabled for a
+particular object, *IWantAPony.providedBy(object)* would be true.
+
+Supplementary marker behaviors
+------------------------------
+
+In the second case, we want to provide a behavior interface with a
+behavior adapter factory as usual (e.g. with some form fields and a
+custom storage or a few methods implemented in an adapter), but we also
+need a custom marker. Here, we use both the *provides* and *marker*
+attributes to *<plone:behavior />* to reference the two interfaces, as
+well as a *factory*.
+
+To show a slightly more interesting example, here is a behavior from a
+project that lets content authors with particular permissions
+(*iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers*), nominate
+the “official” and any “unofficial” reviewers for a given content item.
+The behavior provides the necessary form fields to support this, but it
+also sets a marker interface that enables an *ILocalRoleProvider*
+adapter to automatically grant local roles to the chosen reviewers, as
+well as a custom indexer that lists the reviewers.
+
+The ZCML registration looks like this:
+
+.. code-block:: xml
+
+        <plone:behavior
+            title="Reviewers"
+            description="The ability to assign a list of official and/or unofficial reviewers to an item, granting those users special powers."
+            provides=".reviewers.IReviewers"
+            factory="plone.behavior.AnnotationStorage"
+            marker=".reviewers.IReviewersMarker"
+            />
+
+Notice the use of the *AnnotationStorage* factory. This is a re-usable
+factory that can be used to easily create behaviors from schema
+interfaces that store their values in annotations. We’ll describe this
+in more detail later. We could just as easily have provided our own
+factory in this example.
+
+This whole package is grokked, so in *configure.zcml* we have:
+
+.. code-block:: xml
+
+        <grok:grok package="." />
+
+The *reviewers.py* module contains the following:
+
+::
+
+    """Behavior to enable certain users to nominate reviewers
+
+    Includes form fields, an indexer to make it easy to find the items with
+    specific reviewers, and a local role provider to grant the Reviewer and
+    OfficialReviewer roles appropriately.
+    """
+
+    from five import grok
+
+    from zope.interface import alsoProvides, Interface
+
+    from plone.directives import form
+    from zope import schema
+
+    from plone.formwidget.autocomplete.widget import AutocompleteMultiFieldWidget
+
+    from borg.localrole.interfaces import ILocalRoleProvider
+    from plone.indexer.interfaces import IIndexer
+    from Products.ZCatalog.interfaces import IZCatalog
+
+    from iz.behaviors import MessageFactory as _
+
+    class IReviewers(form.Schema):
+        """Support for specifying official and unofficial reviewers
+        """
+
+        form.fieldset(
+                'ownership',
+                label=_(u'Ownership'),
+                fields=('official_reviewers', 'unofficial_reviewers'),
+            )
+
+        form.widget(official_reviewers=AutocompleteMultiFieldWidget)
+        form.write_permission(official_reviewers='iz.EditOfficialReviewers')
+        official_reviewers = schema.Tuple(
+                title=_(u'Official reviewers'),
+                description=_(u'People or groups who may review this item in an official capacity.'),
+                value_type=schema.Choice(title=_(u"Principal"), source="plone.principalsource.Principals"),
+                required=False,
+                missing_value=(), # important!
+            )
+
+        form.widget(unofficial_reviewers=AutocompleteMultiFieldWidget)
+        form.write_permission(unofficial_reviewers='iz.EditUnofficialReviewers')
+        unofficial_reviewers = schema.Tuple(
+                title=_(u'Unofficial reviewers'),
+                description=_(u'People or groups who may review this item in a supplementary capacity'),
+                value_type=schema.Choice(title=_(u"Principal"), source="plone.principalsource.Principals"),
+                required=False,
+                missing_value=(), # important!
+            )
+
+    alsoProvides(IReviewers, form.IFormFieldProvider)
+
+    class IReviewersMarker(Interface):
+        """Marker interface that will be provided by instances using the
+        IReviewers behavior. The ILocalRoleProvider adapter is registered for
+        this marker.
+        """
+
+    class ReviewerLocalRoles(grok.Adapter):
+        """Grant local roles to reviewers when the behavior is used.
+        """
+
+        grok.implements(ILocalRoleProvider)
+        grok.context(IReviewersMarker)
+        grok.name('iz.behaviors.reviewers')
+
+        def getRoles(self, principal_id):
+            """If the user is in the list of reviewers for this item, grant
+            the Reader, Editor and Contributor local roles.
+            """
+
+            c = IReviewers(self.context, None)
+            if c is None or (not c.official_reviewers and not c.unofficial_reviewers):
+                return ()
+
+            if principal_id in c.official_reviewers:
+                return ('Reviewer', 'OfficialReviewer',)
+            elif principal_id in c.unofficial_reviewers:
+                return ('Reviewer',)
+
+            return ()
+
+        def getAllRoles(self):
+            """Return a list of tuples (principal_id, roles), where roles is a
+            list of roles for the given user id.
+            """
+
+            c = IReviewers(self.context, None)
+            if c is None or (not c.official_reviewers and not c.unofficial_reviewers):
+                return
+
+            seen = set ()
+
+            for principal_id in c.official_reviewers:
+                seen.add(principal_id)
+                yield (principal_id, ('Reviewer', 'OfficialReviewer'),)
+
+            for principal_id in c.unofficial_reviewers:
+                if principal_id not in seen:
+                    yield (principal_id, ('Reviewer',),)
+
+    class ReviewersIndexer(grok.MultiAdapter):
+        """Catalog indexer for the 'reviewers' index.
+        """
+
+        grok.implements(IIndexer)
+        grok.adapts(IReviewersMarker, IZCatalog)
+        grok.name('reviewers')
+
+        def __init__(self, context, catalog):
+            self.reviewers = IReviewers(context)
+
+        def __call__(self):
+            official = self.reviewers.official_reviewers or ()
+            unofficial = self.reviewers.unofficial_reviewers or ()
+            return tuple(set(official + unofficial))
+
+Note that the *iz.EditOfficialReviewers* and
+*iz.EditUnofficialReviewers* permissions are defined and granted
+elsewhere.
+
+This is quite a complex behavior, but hopefully you can see what’s going
+on:
+
+-  There is a standard schema interface, which is grokked for form hints
+   using *plone.directives.form* and marked as an *IFormFieldProvider*.
+   It uses *plone.formwidget.autocomplete* and *plone.principalsource*
+   to implement the fields.
+-  We define a marker interface (*IReviewersMarker*) and register this
+   with the *marker* attribute of the *<plone:behavior />* directive.
+-  We define an adapter from this marker to *ILocalRoles* from
+   *borg.localrole*. Here, we have chosen to use *grokcore.component*
+   (via *five.grok*) to register the adapter. We could have used an
+   *<adapter />* ZCML statement as well, of course.
+-  Similarly, we define a multi-adapter to *IIndexer*, as provided by
+   *plone.indexer*. Again, we’ve chosen to use
+   convention-over-configuration via *five.grok* to register this.
+
+Although this behavior provides a lot of functionality, it is no more
+difficult for integrators to use than any other: they would simply list
+the behavior interface (*iz.behaviors.reviewers.IReviewers* in this
+case) in the FTI, and all this functionality comes to life. This is the
+true power of behaviors: developers can bundle up complex functionality
+into re-usable behaviors, which can then be enabled on a per-type basis
+by integrators (or the same developers in lazier moments).
+
+.. _plone.pony: http://pypi.python.org/pypi/plone.pony
diff --git a/docs/grok/behaviors/schema-only-behaviors.rst b/docs/grok/behaviors/schema-only-behaviors.rst
new file mode 100644
index 0000000..30fb3f9
--- /dev/null
+++ b/docs/grok/behaviors/schema-only-behaviors.rst
@@ -0,0 +1,136 @@
+Schema-only behaviors using annotations or attributes
+=======================================================
+
+**Writing behaviors that provide schema fields**
+
+Oftentimes, we simply want a behavior to be a reusable collection of
+form fields. Integrators can then compose their types by combining
+different schemata. Writing the behavior schema is no different to
+writing any other schema interface. But how and where do we store the
+values? By default, *plone.behavior* provides two alternatives.
+
+Using annotations
+-----------------
+
+Annotations, as provided by the `zope.annotation`_ package, are a
+standard means of storing of key/value pairs on objects. In the default
+implementation (so-called *attribute annotation*), the values are stored
+in a BTree on the object called *\_\_annotations\_\_*. The raw
+annotations API involves adapting the object to the *IAnnotations*
+interface, which behaves like a dictionary, and storing values under
+unique keys here. *plone.behavior* comes with a special type of factory
+that means you can simply adapt an object to its behavior interface to
+get an adapter providing this interface, on which you can get and set
+values, which are eventually stored in annotations.
+
+We’ve already seen an example of this factory:
+
+.. code-block:: xml
+
+        <plone:behavior
+            title="Reviewers"
+            description="The ability to assign a list of official and/or unofficial reviewers to an item, granting those users special powers."
+            provides=".reviewers.IReviewers"
+            factory="plone.behavior.AnnotationStorage"
+            marker=".reviewers.IReviewersMarkere"
+            />
+
+Here, *plone.behavior.AnnotationStorage* is a behavior factory that can
+be used by any behavior with an interface that consists entirely of
+*zope.schema* fields. It simply stores those items in object
+annotations, saving you the trouble of writing your own annotation
+storage adapter. If you adapt an object for which the behavior is
+enabled to the behavior interface, you will be able to read and write
+values off the resultant adapter as normal.
+
+Storing attributes
+------------------
+
+This approach is convenient, but there is another approach that is even
+more convenient, and, contrary to what you may think, may be more
+efficient: simply store the attributes of the schema interface directly
+on the content object.
+
+As an example, here’s the standard *IRelatedItems* behavior from
+*plone.app.dexerity*:
+
+.. code-block:: xml
+
+        <plone:behavior
+            title="Related items"
+            description="Adds the ability to assign related items"
+            provides=".related.IRelatedItems"
+            for="plone.dexterity.interfaces.IDexterityContent"
+            />
+
+The *IRelatedItems* schema looks like this:
+
+::
+
+    from zope.interface import alsoProvides
+
+    from z3c.relationfield.schema import RelationChoice, RelationList
+
+    from plone.formwidget.contenttree import ObjPathSourceBinder
+    from plone.directives import form
+
+    class IRelatedItems(form.Schema):
+        """Behavior interface to make a type support related items.
+        """
+
+        form.fieldset('categorization', label=u"Categorization",
+                      fields=['relatedItems'])
+
+        relatedItems = RelationList(
+            title=u"Related Items",
+            default=[],
+            value_type=RelationChoice(title=u"Related",
+                          source=ObjPathSourceBinder()),
+            required=False,
+            )
+
+    alsoProvides(IRelatedItems, form.IFormFieldProvider)
+
+This is a standard schema using *plone.directives.form* (the package is
+also grokked). However, notice the lack of a behavior factory. This is a
+directly provided “marker” interface, except that it has attributes, and
+so it is not actually a marker interface. The result is that the
+*relatedItems* attribute will be stored directly onto a content object
+when first set (usually in the add form).
+
+This approach has a few advantages:
+
+-  There is no need to write or use a separate factory, so it is a
+   little easier to use.
+-  The attribute is available on the content object directly, so you can
+   write *context/relatedItems* in a TAL expression, for example. This
+   does require that it has been set at least once, though! If the
+   schema is used in the type’s add form, that will normally suffice,
+   but old instances of the same type may not have the attribute and
+   could raise an *AttributeError.*
+-  If the value is going to be used frequently, and especially if it is
+   read when viewing the content object, storing it in an attribute is
+   more efficient than storing it in an annotation. (This is because the
+   *\_\_annotations\_\_* BTree is a separate persistent object which has
+   to be loaded into memory, and may push something else out of the ZODB
+   cache.)
+
+The possible disadvantages are:
+
+-  The attribute name may collide with another attribute on the object,
+   either from its class, its base schema, or another behavior. Whether
+   this is a problem in practice depends largely on whether the name is
+   likely to be unique. In most cases, it will probably be sufficiently
+   unique.
+-  If the attribute stores a large value, it will increase memory usage,
+   as it will be loaded into memory each time the object is fetched from
+   the ZODB. However, you should use BLOBs or BTrees to store large
+   values anyway. Loading an object with a BLOB or BTree does not mean
+   loading the entire BLOB or Btree, so the memory overhead does not
+   occur unless the whole BLOB or BTree is actually used.
+
+.. note::
+    “The moral of this story? BTrees do not always make things more
+    efficient!” ~ Laurence Rowe
+
+.. _zope.annotation: http://pypi.python.org/pypi/zope.annotation
diff --git a/docs/grok/behaviors/testing-behaviors.rst b/docs/grok/behaviors/testing-behaviors.rst
new file mode 100644
index 0000000..5411bf1
--- /dev/null
+++ b/docs/grok/behaviors/testing-behaviors.rst
@@ -0,0 +1,193 @@
+Testing behaviors
+=====================
+
+**How to write unit tests for behaviors**
+
+Behaviors, like any other code, should be tested. If you are writing a
+behavior with just a marker interface or schema interface, it is
+probably not necessary to test the interface. However, any actual code,
+such as a behavior adapter factory, ought to be tested.
+
+Writing a behavior integration test is not very difficult if you are
+happy to depend on Dexterity in your test. You can create a dummy type
+by instantiating a Dexterty FTI in *portal\_types* and enable your
+behavior by adding its interface name to the *behaviors* property.
+
+In many cases, however, it is better not to depend on Dexterity at all.
+It is not too difficult to mock what Dexterity does to enable behaviors
+on its types. The following example is taken from *collective.gtags* and
+tests the *ITags* behavior we saw on the first page of this manual.
+
+::
+
+    Behaviors
+    =========
+
+    This package provides a behavior called `collective.gtags.behaviors.ITags`.
+    This adds a `Tags` field called `tags` to the "Categorization" fieldset, with
+    a behavior adapter that stores the chosen tags in the Subject metadata field.
+
+    To learn more about the `Tags` field and how it works, see `tagging.rst`.
+
+    Test setup
+    ----------
+
+    Before we can run these tests, we need to load the collective.gtags
+    configuration. This will configure the behavior.
+
+        >>> configuration = """\
+        ... <configure
+        ...      xmlns="http://namespaces.zope.org/zope"
+        ...      i18n_domain="collective.gtags">
+        ...
+        ...     <include package="Products.Five" file="meta.zcml" />
+        ...     <include package="collective.gtags" file="behaviors.zcml" />
+        ...
+        ... </configure>
+        ... """
+
+        >>> from StringIO import StringIO
+        >>> from zope.configuration import xmlconfig
+        >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+    This behavior can be enabled for any `IDublinCore`. For the purposes of
+    testing, we will use the CMFDefault Document type and a custom
+    IBehaviorAssignable adapter to mark the behavior as enabled.
+
+        >>> from Products.CMFDefault.Document import Document
+
+        >>> from plone.behavior.interfaces import IBehaviorAssignable
+        >>> from collective.gtags.behaviors import ITags
+        >>> from zope.component import adapts
+        >>> from zope.interface import implements
+        >>> class TestingAssignable(object):
+        ...     implements(IBehaviorAssignable)
+        ...     adapts(Document)
+        ...
+        ...     enabled = [ITags]
+        ...
+        ...     def __init__(self, context):
+        ...         self.context = context
+        ...
+        ...     def supports(self, behavior_interface):
+        ...         return behavior_interface in self.enabled
+        ...
+        ...     def enumerate_behaviors(self):
+        ...         for e in self.enabled:
+        ...             yield queryUtility(IBehavior, name=e.__identifier__)
+
+        >>> from zope.component import provideAdapter
+        >>> provideAdapter(TestingAssignable)
+
+    Behavior installation
+    ---------------------
+
+    We can now test that the behavior is installed when the ZCML for this package
+    is loaded.
+
+        >>> from zope.component import getUtility
+        >>> from plone.behavior.interfaces import IBehavior
+        >>> tags_behavior = getUtility(IBehavior, name='collective.gtags.behaviors.ITags')
+        >>> tags_behavior.interface
+        <InterfaceClass collective.gtags.behaviors.ITags>
+
+    We also expect this behavior to be a form field provider. Let's verify that.
+
+        >>> from plone.directives.form import IFormFieldProvider
+        >>> IFormFieldProvider.providedBy(tags_behavior.interface)
+        True
+
+    Using the behavior
+    ------------------
+
+    Let's create a content object that has this behavior enabled and check that
+    it works.
+
+        >>> doc = Document('doc')
+        >>> tags_adapter = ITags(doc, None)
+        >>> tags_adapter is not None
+        True
+
+    We'll check that the `tags` set is built from the `Subject()` field:
+
+        >>> doc.setSubject(['One', 'Two'])
+        >>> doc.Subject()
+        ('One', 'Two')
+
+        >>> tags_adapter.tags == set(['One', 'Two'])
+        True
+
+        >>> tags_adapter.tags = set(['Two', 'Three'])
+        >>> doc.Subject() == ('Two', 'Three')
+        True
+
+This test tries to prove that the behavior is correctly installed and
+works as intended on a suitable content class. It is not a true unit
+test, of course. For that, we would simply test the *Tags* adapter
+directly on a dummy context, but that is not terribly interesting, since
+all it does is convert sets to tuples.
+
+First, we configure the package. To keep the test small, we limit
+ourselves to the *behaviors.zcml* file, which in this case will suffice.
+We still need to include a minimal set of ZCML from Five.
+
+Next, we implement an *IBehaviorAssignable*adapter. This is a low-level
+component used by *plone.behavior* to determine if a behavior is enabled
+on a particular object. Dexterity provides an implementation that checks
+the type’s FTI. Our test version is much simpler - it hardcodes the
+supported behaviors.
+
+With this in place, we first check that the *IBehavior* utility has been
+correctly registered. This is essentially a test to show that we’ve used
+the *<plone:behavior />* directive as intended. We also verify that our
+schema interface is an *IFormFieldsProvider*. For a non-form behavior,
+we’d obviously omit this.
+
+Finally, we test the behavior. We’ve chosen to use CMFDefault’s
+*Document* type for our test, as the behavior adapter requires an object
+providing *IDublinCore*. If we were less lazy, we’d write our own class
+and implement *IDublinCore* directly. However, in many cases, the types
+from CMFDefault are going to provide convenient test fodder.
+
+Obviously, if our behavior was more complex, we’d add more intricate
+tests. By the last section of the doctest, we have enough context to
+test the adapter factory.
+
+To run the test, we need a test suite. In *tests.py*, we have:
+
+::
+
+    import doctest
+    import unittest
+    from zope.testing import doctestunit
+    from zope.app.testing import setup
+
+    def setUp(test):
+        pass
+
+    def tearDown(test):
+        setup.placefulTearDown()
+
+    def test_suite():
+        return unittest.TestSuite((
+            doctestunit.DocFileSuite(
+                'behaviors.rst',
+                setUp=setUp, tearDown=tearDown,
+                optionflags=doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS),
+            ))
+
+This runs the *behaviors.rst* doctest from the same directory as the
+*tests.py* file. To run the test, we can use the usual test runner:
+
+::
+
+    $ ./bin/instance test -s collective.gtags
+
+A note about marker interfaces
+------------------------------
+
+Note that marker interface support depends on code that is implemented
+in Dexterity and is non-trivial to reproduce in a test. If you need a
+marker interface in a test, set it manually with
+*zope.interface.alsoProvides*, or write an integration test with
+Dexterity content.
diff --git a/docs/grok/custom-views.rst b/docs/grok/custom-views.rst
new file mode 100644
index 0000000..092b96d
--- /dev/null
+++ b/docs/grok/custom-views.rst
@@ -0,0 +1,316 @@
+Custom views
+============
+
+**Configuring custom views and using display forms**
+
+Simple views
+------------
+
+**Creating basic views**
+
+So far, our types have used the default views, which use the *display*
+widgets from `z3c.form`_, much like the add and edit forms use the *edit*
+widgets. This is functional, but not very attractive. Most types will
+need one or more custom view templates.
+
+Dexterity types are no different from any other content type in Plone. You
+can register a view for your schema interface, and it will be available
+on your type. If the view is named *view*, it will be the default view,
+at least if you use the standard FTI configuration. This is because the
+FTI’s ``default_view`` property is set to ``view``, and ``view`` is in the
+list of ``view_methods.``
+
+When working with Dexterity, we will typically configure our views using
+the `five.grok`_ configuration system, eschewing ZCML configuration.
+Below, we will show how to add simple views for the ``Program`` and
+``Speaker`` types. Next, we will show how to use display forms to take
+advantage of the standard widgets if required.
+
+The `five.grok`_ view approach uses a class in the content type’s module,
+which is automatically associated with a template in an accompanying
+directory. These directories should be created next to the module files,
+so we will have ``program_templates``, ``presenter_templates`` and
+``session_templates``.
+
+(Note for newbies:
+A view will have update() and render() methods.  We will inherit these,
+with the result that our view will render a similarly-named page template.
+If you wanted, you could provide your own update and/or render methods.
+The sessions() method you will see defined below exists to provide
+information that will be referenced by the page template.)
+
+.. note::
+
+    ``addcontent`` will have created a "SampleView" class in each content type's .py file. Just rename it to "View" to follow the example.
+
+In ``program.py``, the view is registered as follows:
+
+.. code-block:: python
+
+    class View(grok.View):
+        grok.context(IProgram)
+        grok.require('zope2.View')
+
+        def sessions(self):
+            """Return a catalog search result of sessions to show
+            """
+
+            context = aq_inner(self.context)
+            catalog = getToolByName(context, 'portal_catalog')
+
+            return catalog(object_provides=ISession.__identifier__,
+                           path='/'.join(context.getPhysicalPath()),
+                           sort_on='sortable_title')
+
+This creates a view registration similar to what you may do with a
+``<browser:page />`` ZCML directive. We have also added a helper method
+which will be used in the view. Note that this requires some imports at
+the top of the file:
+
+.. code-block:: python
+
+    from Acquisition import aq_inner
+    from Products.CMFCore.utils import getToolByName
+
+    from example.conference.session import ISession
+
+The view registration works as follows:
+
+- The view name will be ``@@view``, taken from the class name in
+  lowercase. You can specify an alternative name with
+  ``grok.name('some-name')`` if required.
+- The ``grok.context()`` directive specifies that this view is used for
+  objects providing ``IProgram``.
+- You can add a ``grok.layer()`` directive if you want to specify a
+  browser layer.
+- The ``grok.require()`` directive specifies the required permission for
+  this view.
+  It uses the Zope 3 permission name.
+  ``zope2.View`` and ``zope.Public`` are the most commonly used permissions
+  (in fact, ``zope.Public`` is not actually a permission, it just means “no
+  permission required”).
+  For a list of other standard permissions, see
+  ``parts/omelette/Products/Five/permissions.zcml``.
+  We will cover
+  creating custom permissions later in this manual.
+- Any methods added to the view will be available to the template via
+  the ``view`` variable. The content object is available via ``context``,
+  as usual.
+
+This is associated with a file in ``program_templates/view.pt``. The file name
+matches the class name (even if a different view name was specified).
+``addcontent`` will have created a sampleview.pt file. Just rename it to
+continue with the example. This contains:
+
+.. code-block:: html
+
+    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+          xmlns:tal="http://xml.zope.org/namespaces/tal"
+          xmlns:metal="http://xml.zope.org/namespaces/metal"
+          xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+          lang="en"
+          metal:use-macro="context/main_template/macros/master"
+          i18n:domain="example.conference">
+    <body>
+
+    <metal:main fill-slot="main">
+        <tal:main-macro metal:define-macro="main"
+            tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime">
+
+            <div tal:replace="structure provider:plone.abovecontenttitle" />
+
+            <h1 class="documentFirstHeading" tal:content="context/title" />
+
+            <div class="discreet">
+                <tal:block condition="context/start">
+                    <span i18n:translate="label_from">From:</span>
+                    <span tal:content="python:context.start.strftime('%x %X')" />
+                </tal:block>
+                <tal:block condition="context/end">
+                    <span i18n:translate="label_to">To:</span>
+                    <span tal:content="python:context.end.strftime('%x %X')" />
+                </tal:block>
+            </div>
+
+            <div tal:replace="structure provider:plone.belowcontenttitle" />
+
+            <p class="documentDescription" tal:content="context/description" />
+
+            <div tal:replace="structure provider:plone.abovecontentbody" />
+
+            <div tal:content="structure context/details/output" />
+
+            <h2 i18n:translate="heading_sessions">Sessions</h2>
+            <dl>
+                <tal:block repeat="session view/sessions">
+                    <dt>
+                        <a tal:attributes="href session/getURL"
+                           tal:content="session/Title" />
+                    </dt>
+                    <dd tal:content="session/Description" />
+                </tal:block>
+            </dl>
+
+            <div tal:replace="structure provider:plone.belowcontentbody" />
+
+        </tal:main-macro>
+    </metal:main>
+
+    </body>
+    </html>
+
+
+For the most part, this template outputs the values of the various
+fields, using the ``sessions()`` method on the view to obtain the sessions
+contained within the program.
+
+.. note:: Notice how the ``details`` *RichText* field is output as
+   ``tal:content="structure context/details/output"``.
+   The ``structure`` keyword ensures that the rendered HTML is not escaped.
+   The extra traversal to ``details/output`` is necessary because the
+   *RichText* field actually stores a *RichTextValue* object that
+   contains not only the raw text as entered by the user, but also a
+   MIME type (e.g. ``text/html``) and the rendered output text.
+   *RichText* fields are covered in more detail :ref:`later in this manual <richtext-label>`.
+
+The view for ``Presenter``, in ``presenter.py``, is even simpler:
+
+.. code-block:: python
+
+    class View(grok.View):
+        grok.context(IPresenter)
+        grok.require('zope2.View')
+
+Its template, in ``presenter_templates/view.pt``, is similar to the
+previous template:
+
+.. code-block:: html
+
+    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+          xmlns:tal="http://xml.zope.org/namespaces/tal"
+          xmlns:metal="http://xml.zope.org/namespaces/metal"
+          xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+          lang="en"
+          metal:use-macro="context/main_template/macros/master"
+          i18n:domain="example.conference">
+    <body>
+
+    <metal:main fill-slot="main">
+        <tal:main-macro metal:define-macro="main">
+
+            <div tal:replace="structure provider:plone.abovecontenttitle" />
+
+            <h1 class="documentFirstHeading" tal:content="context/title" />
+
+            <div tal:replace="structure provider:plone.belowcontenttitle" />
+
+            <p class="documentDescription" tal:content="context/description" />
+
+            <div tal:replace="structure provider:plone.abovecontentbody" />
+
+            <div tal:content="structure context/bio/output" />
+
+            <div tal:replace="structure provider:plone.belowcontentbody" />
+
+        </tal:main-macro>
+    </metal:main>
+
+    </body>
+    </html>
+
+Obviously, these views are very basic. Much more interesting views could
+be created by putting a little more work into the templates.
+
+You should also realise that you can create any type of view using this
+technique. Your view does not have to be related to a particular content
+type, even. You could set the context to ``Interface``, for example, to
+make a view that’s available on all types.
+
+Display forms
+--------------
+
+**Using display widgets in your views**
+
+In the previous section, we created a view extending ``grok.View``. This
+kind of view is the most common, but sometimes we want to make use of
+the widgets and information in the type’s schema more directly, for
+example to invoke transforms or re-use more complex HTML.
+
+To do this, you can use a *display form*. This is really just a view
+base class that knows about the schema of a type. We will use an example
+in ``session.py``, with a template in ``session_templates/view.pt.``
+
+.. note:: Display forms involve the same type of overhead as add- and
+   edit-forms. If you have complex forms with many behaviors, fieldsets and
+   widget hints, you may notice a slow-down compared to standard views, at
+   least on high volume sites.
+
+The new view class is pretty much the same as before, except that we
+derive from ``dexterity.DisplayForm``
+(``plone.directives.dexterity.DisplayForm``):
+
+.. code-block:: python
+
+    class View(dexterity.DisplayForm):
+        grok.context(ISession)
+        grok.require('zope2.View')
+
+This gives our view a few extra properties that we can use in the
+template:
+
+``view.w``
+    a dictionary of all the display widgets, keyed by field names.
+    For fields provided by behaviors, that is usually prefixed with the
+    behavior interface name (``IBehaviorInterface.field_name``).
+    For the default schema, unqualified names apply.
+
+``view.widgets``
+    contains a list of widgets in schema order for the default fieldset.
+
+``view.groups``
+    contains a list of fieldsets in fieldset order.
+
+``view.fieldsets``
+    contains a dictionary mapping fieldset name to fieldset.
+
+``widgets``
+     On a fieldset (group), you can access a ``widgets`` list to get widgets
+     in that fieldset.
+
+The ``w`` dict is the most commonly used.
+
+The ``session_templates/view.pt`` template contains the following:
+
+.. code-block:: html
+
+    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+          xmlns:tal="http://xml.zope.org/namespaces/tal"
+          xmlns:metal="http://xml.zope.org/namespaces/metal"
+          xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+          lang="en"
+          metal:use-macro="context/main_template/macros/master"
+          i18n:domain="example.conference">
+    <body>
+
+    <metal:main fill-slot="main">
+        <tal:main-macro metal:define-macro="main">
+            <div tal:replace="structure provider:plone.abovecontenttitle" />
+            <h1 class="documentFirstHeading" tal:content="context/title" />
+            <div tal:replace="structure provider:plone.belowcontenttitle" />
+            <p class="documentDescription" tal:content="context/description" />
+            <div tal:replace="structure provider:plone.abovecontentbody" />
+            <div tal:content="structure view/w/details/render" />
+            <div tal:replace="structure provider:plone.belowcontentbody" />
+        </tal:main-macro>
+    </metal:main>
+
+    </body>
+    </html>
+
+Notice how we use expressions like ``view/w/details/render`` (where
+``details`` is the field name) to get the rendering of a widget. Other
+properties include ``__name__``, the field name, and ``label``, the
+field title.
+
+.. _z3c.form: http://pypi.python.org/pypi/z3c.form
+.. _five.grok: http://pypi.python.org/pypi/five.grok
diff --git a/docs/grok/designing.rst b/docs/grok/designing.rst
new file mode 100644
index 0000000..420cb19
--- /dev/null
+++ b/docs/grok/designing.rst
@@ -0,0 +1,44 @@
+Designing with content types
+==============================
+
+**How to solve problems with content types**
+
+Before we dive into Dexterity, it is worth thinking about the way we design
+solutions with content types in Plone. If you are familiar with Archetypes
+based development, Grok or Zope 3, then much of this will probably be familiar.
+
+Plone uses the ZODB, an object database, instead of a relational database as its
+default content store. The ZODB is well suited to heterogeneous, loosely
+structured content such as web pages.
+
+Types in Plone are either containers or items (this distinction is sometimes
+called folderish vs. non-folderish). A one-to-many type relationship is typically
+modelled as a container (the "one") containing many items (the "many"), although
+it is also possible to use references across the content hierarchy.
+
+Each type has a schema – a set of fields with related properties such as a title,
+default value, constraints, and so on. The schema is used to generate forms and
+describe instances of the type. In addition to schema-driven forms, a type
+typically comes with one or more views, and is subject to security (e.g. add
+permissions, or per-field read/write permissions) and workflow.
+
+When we attempt to solve a particular content management problem with Plone,
+we will often design new content types. For the purposes of this tutorial,
+we'll build a simple set of types to help conference organisers. We want to
+manage a program consisting of multiple sessions. Each session should be listed
+against a track, have a time slot, a title, a description and a presenter. We
+also want to manage bios for presenters.
+
+There are many ways to approach this, but here is one possible design:
+
+* A content type Presenter is used to represent presenter bios. Fields
+  include name, description and professional experience.
+* A content type Program represents a given conference program. Besides some
+  basic metadata, it will list the available tracks. This type is folderish.
+* A content type Session represents a session. Sessions can only be added
+  inside Programs. A Session will contain some information about the session,
+  and allow the user to choose the track and associate a presenter.
+
+Each type will also have custom views, and we will show how to configure
+catalog indexers, security and workflow for the types.
+
diff --git a/docs/grok/index.rst b/docs/grok/index.rst
new file mode 100644
index 0000000..b16f85e
--- /dev/null
+++ b/docs/grok/index.rst
@@ -0,0 +1,25 @@
+=======================================================
+Dexterity Developer Manual
+=======================================================
+
+.. toctree::
+   :maxdepth: 2
+
+   intro.rst
+   designing.rst
+   prerequisite.rst
+   schema-driven-types.rst
+   model-driven-types.rst
+   custom-views.rst
+   advanced/index.rst
+   testing/index.rst
+   reference/index.rst
+
+Appendixes
+-------------------
+
+.. toctree::
+   :maxdepth: 1
+
+   install.rst
+   behaviors/index.rst
diff --git a/docs/grok/install.rst b/docs/grok/install.rst
new file mode 100644
index 0000000..3c447ec
--- /dev/null
+++ b/docs/grok/install.rst
@@ -0,0 +1,118 @@
+Installing Dexterity
+====================
+
+*How to install Dexterity and use it in your project*
+
+Dexterity is distributed as a number of eggs, published on
+`PyPI <http://pypi.python.org>`_. The
+`plone.app.dexterity <http://pypi.python.org/pypi/plone.app.dexterity>`_
+egg pulls in all the required dependencies and should get you up and
+running. This how-to explains what you need to do use Dexterity in a
+standard Plone buildout.
+
+Installing Dexterity on Plone 4.3
+---------------------------------
+
+Note: Plone 4.3 is the latest release of Plone. Dexterity is included
+with Plone 4.3, but must be activated via the "Add-ons" configlet in site setup.
+
+**If you wish to follow the examples in this manual, you must do one extra
+installation step:** activate the `grok` extra for Dexterity.
+To do so, add the following line to the `eggs` section of yor buildout::
+
+    eggs =
+        Plone
+        ...
+        plone.app.dexterity [grok]
+
+**Important: If you installed Dexterity on a Plone site that you
+upgraded to Plone 4.3, you must include the relations extra. Otherwise
+your site will have a broken intid utility.**
+
+    eggs =
+        Plone
+        ...
+        plone.app.dexterity [grok,relations]
+
+
+Installing Dexterity on Plone 4.2
+---------------------------------
+
+Plone 4.2 is the previous stable release of Plone. The Plone KGS (known
+good set of package versions) includes version pins for the packages
+that make up Dexterity, so all you need to do is add plone.app.dexterity
+to the eggs in your buildout, and re-run the buildout::
+
+    [buildout]
+    extensions = buildout.dumppickedversions
+    unzip = true
+    parts = instance
+    extends =
+        http://dist.plone.org/release/4.2.1/versions.cfg
+    versions = versions
+    develop =
+
+    [instance]
+    recipe = plone.recipe.zope2instance
+    user = admin:admin
+    http-address = 8080
+    debug-mode = on
+    verbose-security = on
+    eggs =
+        Plone
+        plone.app.dexterity
+
+Note that:
+
+-   We use the
+    `buildout.dumppickedversions <http://pypi.python.org/pypi/buildout.dumppickedversions>`_
+    extension to help show what versions buildout picked for any
+    dependencies not pinned in the buildout. This helps trace any
+    dependency issues.
+-   We extend the official Plone release known good set for Plone 4.2.1.
+-   In the instance configuration, we load the *Plone* egg and
+    *plone.app.dexterity*. The latter will pull in all the Dexterity
+    dependencies.
+-   Since *plone.app.dexterity* configures a *z3c.autoinclude* entry
+    point, there is no need to load a separate ZCML slug.
+
+Your own buildout may be more extensive. The developer manual shows a
+more comprehensive one with some debugging tools, for example. However,
+the buildout above should be enough for creating types through the web.
+If you are using a package that itself depends on plone.app.dexterity,
+then the second eggs line becomes superfluous as well, of course.
+
+Installing Dexterity on older versions of Plone
+-----------------------------------------------
+
+Prior to Plone 4.2, the official Plone KGS did not include version pins
+for the packages that make up Dexterity. Instead, you can extend a KGS
+from the `good-py service <http://good-py.appspot.com>`_. That looks like
+this::
+
+    [buildout]
+    extensions = buildout.dumppickedversions
+    unzip = true
+    parts = instance
+    extends =
+        http://good-py.appspot.com/release/dexterity/1.2.1?plone=4.1.6
+    versions = versions
+    develop =
+
+    [instance]
+    recipe = plone.recipe.zope2instance
+    user = admin:admin
+    http-address = 8080
+    debug-mode = on
+    verbose-security = on
+    eggs =
+        Plone
+        plone.app.dexterity
+
+Notice that the extends line has been changed to point at good-py and
+specify both a particular version of Dexterity and a particular version
+of Plone. good-py returns a set of versions that will work for that
+combination.
+
+Dexterity 1.2.1 is the last version of Dexterity supported for Plone <
+4.2. No version of Dexterity is compatible with Plone < 3.3.
diff --git a/docs/grok/intro.rst b/docs/grok/intro.rst
new file mode 100644
index 0000000..ef458cc
--- /dev/null
+++ b/docs/grok/intro.rst
@@ -0,0 +1,59 @@
+Introduction
+=============
+
+This manual will teach you how to build content types using the Dexterity system.
+
+If you have decided that Dexterity is for you, and you are a programmer and comfortable
+working on the filesystem, then this manual is a good place to start.
+
+This manual will cover:
+
+* Some basic design techniques for solving problems with content types in Plone
+* Getting a Dexterity development environment set up
+* Creating a package to house your types
+* Building a custom type based on a schema
+* Creating custom views and forms for your type
+* Advanced customisation, including workflow and security
+* Testing your types
+* A quick reference to common fields, widgets and APIs
+
+History
+--------
+
+Why was Dexterity created?
+++++++++++++++++++++++++++
+
+Dexterity was created to serve two audiences: Administrators/integrators, and developers.
+
+For administrators and integrators, Dexterity offers:
+
+* the ability to create new content types through-the-web
+* the ability to switch on/off various aspects (called "behaviors") on a per-type basis
+* improved collaboration between integrators (who may define a type's schema, say) and programmers (who may provide re-usable behaviors that the administrator can plug in).
+
+For developers, Dexterity promises:
+
+* the ability to create content types more quickly and easily, and with less boilerplate and repetition, than what is possible with Archetypes or plain CMF types
+* content objects with a smaller runtime footprint, to improve performance
+* types that use the now-standard zope.interface/zope.schema style of schema, and more broadly support modern idioms that sit a little awkardly with Archetypes and its ilk
+
+How is Dexterity different from Archetypes
+++++++++++++++++++++++++++++++++++++++++++
+
+Dexterity is an alternative to Archetypes, Plone's venerable content type framework. Being more recent, Dexterity has been able to learn from some of the mistakes that were made Archetypes, and - more importantly - leverage some of the technologies that did not exist when Archetypes was first conceived.
+
+Some of the main differences include:
+
+* Dexterity is able to leverage many technologies that come with newer versions of CMF and Zope 3. This means that the Dexterity framework contains significantly less code than Archetypes. Dexterity also has better automated test coverage.
+* Dexterity is more modular where Archetypes is more monolithic. This promises to make it easier to support things like SQL database-backed types, alternative workflow systems, instance-specific sub-types and so on. It also means that many of the components developed for Dexterity, such as the through-the-web schema editor, the "behaviors" system, or the forms construction API (plone.autoform) are re-usable in other contexts, e.g. to build standalone forms or even to augment existing Archetypes-based types.
+* Archetypes has its own Schema implementation which is incompatible with the interface-based approached found in zope.interface and zope.schema. The latter is used throughout the Zope stack to describe components and build forms. Various techniques exist to bridge the Archetypes schema to the Zope 3 schema notation, but none are particularly attractive.
+* Archetypes uses accessor and mutator methods to get/set values. These are generated and scribbled onto a class at startup. Dexterity uses attribute notation, so whereas in Archetypes you may write context.getFirstName(), in Dexterity you would write context.first_name.
+* Archetypes has its own implementation of fields and widgets. It is difficult to re-use these in standalone forms or templates, because they are tied to the idea of a content object. Dexterity uses the de-facto standard z3c.form library instead, which means that the widgets used for standalone forms are the same as those used for content type add- and edit forms.
+* Archetypes does not support add forms. Dexterity does, via z3c.form. This means that Dexterity types do not need to use the portal_factory hack to avoid stale objects in content space, and are thus significantly faster and less error prone.
+* Archetypes requires a chunk of boilerplate in your product's initialize() method (and requires that your package is registered as a Zope 2 product) and elsewhere. It requires a particular sequence of initialisation calls to register content classes, run the class generator to add accessors/mutators, and set up permissions. Dexterity does away with all that boilerplate, and tries to minimise repetition.
+* It is possible to extend the schemata of existing Archetypes types with the archetypes.schemaextender product, although this adds some performance overhead and relies on a somewhat awkward programming technique. Dexterity types were built to be extensible from the beginning, and it is possible to declaratively turn on or off aspects of a type (such as Dublin Core metadata, locking support, ratings, tagging, etc) with re-usable "behaviors".
+* Dexterity is built from the ground up to support through-the-web type creation. There are products that achieve the same thing with Archetypes types, but they have to work around a number of limitations in the design of Archetypes that make them somewhat brittle or slow. Dexterity also allows types to be developed jointly through-the-web and on the filesystem. For example, a schema can be written in Python and then extended through the web.
+
+All that said, Archetypes is still an older and more mature framework. Dexterity is a viable alternative to Archetypes in many projects, but if you are happy with Archetypes, you should not immediately rush to rewrite your types to use Dexterity.
+
+There are also some things that Dexterity does not yet support, or, more commonly, services that Plone ships with that currently assume all content objects are built using Archetypes. The current list of "gaps" can be found in the Dexterity issue tracker. You should take a look at this before deciding whether Dexterity will work for you. If in doubt, don't hesitate to write to the Dexterity mailing list and ask for advice.
diff --git a/docs/grok/model-driven-types.rst b/docs/grok/model-driven-types.rst
new file mode 100644
index 0000000..e315397
--- /dev/null
+++ b/docs/grok/model-driven-types.rst
@@ -0,0 +1,160 @@
+Model-driven types
+==================
+
+In the previous section, we defined two types by using Zope schema. In this
+section, we're going to define a type's fields using an XML model file.
+
+The great advantage of using a model file is that we can prototype the content
+type in Dexterity's through-the-web field editor, then export the XML model file
+for incorporation into our package.
+
+XML may be used to do pretty much anything you could do via Zope schema. Many
+users not already schooled in Zope schema will find this by far the easiest and
+fastest way to create Dexterity content types.
+
+Adding the type
+---------------
+
+As in the previous section, we'll use ``addcontent`` to add our content type to
+the project. This type will be for conference presenters.
+
+.. code-block:: bash
+
+    $ ../../bin/paster addcontent dexterity_content
+    Enter contenttype_name (Content type name ) ['Example Type']: Presenter
+    Enter contenttype_description (Content type description ) ['Description of the Example Type']: A person presenting a conference session
+    Enter folderish (True/False: Content type should act as a container ) [False]: False
+    Enter global_allow (True/False: Globally addable ) [True]:
+    Enter allow_discussion (True/False: Allow discussion ) [False]:
+
+Setting the field model
+-----------------------
+
+Look in ``example.conference/example/conference/models/presenter.xml`` for a bare model file created by addcontent. Let's elaborate it:
+
+.. code-block:: xml
+
+    <model xmlns:form="http://namespaces.plone.org/supermodel/form"
+           xmlns:security="http://namespaces.plone.org/supermodel/security"
+           xmlns:marshal="http://namespaces.plone.org/supermodel/marshal"
+           xmlns="http://namespaces.plone.org/supermodel/schema">
+      <schema>
+        <field name="name" type="zope.schema.TextLine">
+          <description/>
+          <title>Name</title>
+        </field>
+        <field name="description" type="zope.schema.Text">
+          <description/>
+          <title>A short summary</title>
+        </field>
+        <field name="bio" type="plone.app.textfield.RichText">
+          <description/>
+          <required>False</required>
+          <title>Bio</title>
+        </field>
+        <field name="photo" type="plone.namedfile.field.NamedBlobImage">
+          <description>Please upload an image.</description>
+          <required>False</required>
+          <title>Photo</title>
+        </field>I
+      </schema>
+    </model>
+
+The XML name spaces we use are described in the `Dexterity XML` reference
+section.
+
+That's all we need! To see why, look in the generated file ``presenter.py``:
+
+.. code-block:: python
+
+    from example.conference import MessageFactory as _
+    from five import grok
+    from plone.supermodel import model
+    from zope import schema
+
+
+    class IPresenter(model.Schema):
+        """
+        Schema for Conference Presenter content type
+        """
+
+        model.load("models/presenter.xml")
+
+
+Note the model.load directive. We'd deleted that when we created schema-driven field sets. Now, we leave it in to automatically load our model file.
+
+Setting Factory Type Information
+--------------------------------
+
+This part of the process is identical to what we explained for schema-driven
+type.
+
+Look in the ``types.xml`` file in your packages
+``example/conference/profiles/default`` directory. It should now contain:
+
+.. code-block:: xml
+
+    <object name="portal_types">
+     <object name="example.conference.program" meta_type="Dexterity FTI" />
+     <object name="example.conference.session" meta_type="Dexterity FTI" />
+     <object name="example.conference.presenter" meta_type="Dexterity FTI" />
+    </object>
+
+
+For the *Presenter* type, we have ``example.conference.presenter.xml``:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="example.conference.presenter"
+       meta_type="Dexterity FTI"
+       i18n:domain="example.conference" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+
+      <!-- Basic metadata -->
+      <property name="title" i18n:translate="">Presenter</property>
+      <property name="description"
+        i18n:translate="">Conference Presenter</property>
+      <property name="icon_expr">string:${portal_url}/document_icon.png</property>
+      <property name="factory">example.conference.presenter</property>
+      <property name="global_allow">True</property>
+      <property name="filter_content_types">True</property>
+      <property name="allowed_content_types" />
+      <property name="allow_discussion">False</property>
+
+      <!-- schema and class used for content items -->
+      <property name="schema">example.conference.presenter.IPresenter</property>
+      <property name="klass">example.conference.presenter.Presenter</property>
+
+      <property name="behaviors">
+         <element value="plone.app.content.interfaces.INameFromTitle" />
+       </property>
+
+      <!-- View information -->
+      <property name="link_target"></property>
+      <property name="immediate_view">view</property>
+      <property name="default_view">view</property>
+      <property name="view_methods">
+       <element value="view"/>
+      </property>
+      <property name="default_view_fallback">False</property>
+      <property name="add_permission">cmf.AddPortalContent</property>
+
+
+      <!-- Method aliases -->
+      <alias from="(Default)" to="(dynamic view)" />
+      <alias from="view" to="(selected layout)" />
+      <alias from="edit" to="@@edit" />
+      <alias from="sharing" to="@@sharing" />
+
+      <!-- Actions -->
+      <action title="View" action_id="view" category="object" condition_expr=""
+        url_expr="string:${object_url}/" visible="True">
+        <permission value="View" />
+      </action>
+      <action title="Edit" action_id="edit" category="object" condition_expr=""
+        url_expr="string:${object_url}/edit" visible="True">
+        <permission value="Modify portal content" />
+      </action>
+    </object>
+
+Note that this is addable anywhere.
\ No newline at end of file
diff --git a/docs/grok/prerequisite.rst b/docs/grok/prerequisite.rst
new file mode 100644
index 0000000..4d62fd9
--- /dev/null
+++ b/docs/grok/prerequisite.rst
@@ -0,0 +1,144 @@
+Prerequisites
+==============
+
+**Setting up a Dexterity project**
+
+Preparing a development environment
+-----------------------------------
+
+First, get a working Plone installation. If you don't already have one, the
+easiest way to do so is to use one of Plone's installers. Note that for
+development purposes, you may use a `standalone` (non-ZEO), non-root install.
+
+Second, add our standard development tools. If you've used one of our
+installers, developer tool configurations are in a separate file,
+``develop.cfg``. Once your site is running, you may activate the development
+configuration by using the command::
+
+    bin/buildout -c develop.cfg
+
+rather than simply running ``bin/buildout``. The `develop.cfg` config file
+extends the existing buildout.cfg.
+
+If you've created yor own buildout.cfg file rather than using one of the
+installers, you'll need to add an equivalent development configuration. The
+easiest way to do so is to pick up a copy from the `Unified Installer's github repository <https://github.com/plone/Installers-UnifiedInstaller/blob/master/base_skeleton/develop.cfg>`_.
+
+The key tools that you'll need, both supplied by develop.cfg, are:
+
+1. A ZopeSkel configuration to supply a package skeleton builder; and
+2. A test runner.
+
+.. note::
+
+    If you are using Plone earlier than 4.3, you'll need to add
+    `zopeskel.dexterity` to the eggs list for the zopeskel part. This supplies
+    the Dexterity skeleton.
+
+Creating a package
+-------------------
+
+**Setting up a package to house your content types**
+
+.. note::
+
+    We're going to build a package named example.conference. You may find a
+    completed version of it in the `Collective repository
+    <https://github.com/collective/example.conference>`_.
+
+Typically, our content types will live in a separate package to our theme and
+other customisations.
+
+To create a new package, we can start with *ZopeSkel* and the ``dexterity``
+template.
+
+.. note::
+
+    Nothing that we're doing actually requires ZopeSkel or the zopeskel.dexterity skeleton package. It's just a quick way of getting started.
+
+We run the following from the ``src/`` directory
+
+.. code-block:: console
+
+  $ ../bin/zopeskel dexterity example.conference
+
+You may accept all the default suggestions. This will create a directory named
+``example.conference`` inside ./src.
+
+Now, take a look at the setup.py file in your new package. Edit the `author,`
+`author_email` and `description` fields as you wish. Note a couple of parts of
+the generated setup.py file::
+
+          install_requires=[
+              ...
+              'plone.app.dexterity [grok]',
+              ...
+          ],
+          ...
+          entry_points="""
+          # -*- Entry points: -*-
+          [z3c.autoinclude.plugin]
+          target = plone
+          """,
+
+The addition of `plone.app.dexterity [grok]` to our install requirements
+assures that we'll have dexterity loaded with the `grok` extra. Our example
+code won't work without it. The specification of `plone` as a
+z3c.autoinclude.plugin entry point ensures that we won't need to separately
+specify our zcml in buildout.
+
+Now, let's take a look at ``configure.zcml`` in the examples/conference directory of our project. Again, we want to note a few parts::
+
+    <configure ...>
+
+      <includeDependencies package="." />
+
+      <grok:grok package="." />
+
+      <browser:resourceDirectory
+        name="example.conference"
+        directory="resources" />
+
+      <genericsetup:registerProfile
+          name="default"
+          title="Example Dexterity Product"
+          directory="profiles/default"
+          description="Extension profile for Example Dexterity Product"
+          provides="Products.GenericSetup.interfaces.EXTENSION"
+          />
+
+    </configure>
+
+Here, with the ``includeDependencies`` tag we automatically include the ZCML configuration for all
+packages listed under ``install_requires`` in ``setup.py``.
+The alternative would be to manually add a line like
+``<include package="plone.app.dexterity" />`` for each dependency.
+
+Next, we *grok* the package to construct and register schemata, views,
+forms and so on based on conventions used in the various files we will
+add throughout this tutorial.
+
+The ``browser.resourceDirectory`` command creates a directory for static resources that we want to make available through the web.
+
+Finally, we register a GenericSetup profile to make the type
+installable, which we will build up over the next several sections.
+
+When you've got your project tuned up, return to your buildout/instance directory and edit buildout.cfg to add ``example.conference`` to your eggs list and ``src/example.conference`` to your develop sources list::
+
+    eggs =
+        Plone
+        ...
+        example.conference
+
+    ...
+    develop =
+        ...
+        src/example.conference
+
+Run ``bin/buildout -c develop.cfg`` to add your new product to the
+configuration. (Or, just bin/buildout if you don't have a separate develop.cfg.)
+
+The buildout should now configure Plone, Dexterity and the
+*example.conference* package.
+
+We are now ready to start adding types.
diff --git a/docs/grok/reference/dexterity-xml.rst b/docs/grok/reference/dexterity-xml.rst
new file mode 100644
index 0000000..06b844e
--- /dev/null
+++ b/docs/grok/reference/dexterity-xml.rst
@@ -0,0 +1,327 @@
+Dexterity XML
+=============
+
+**A reference for Dexterity's XML name spaces**
+
+Introduction
+------------
+
+The schema (structure) of a Dexterity content type may be detailed in two very
+different ways:
+
+    * In Python as a Zope schema; or,
+
+    * In XML
+
+When you are using Dexterity's through-the-web schema editor, all your work is
+being saved in the content type's Factory Type Information (FTI) as XML.
+``plone.supermodel`` dynamically translates that XML into Python objects which
+are used to display and edit your content objects.
+
+The XML model of your content object may be exported from Dexterity and
+incorporated into a Python package. That's typically done with code like::
+
+    class IExampleType(form.Schema):
+
+        form.model("models/example_type.xml")
+
+or::
+
+    from plone.supermodel import xmlSchema
+
+    IExampleType = xmlSchema("models/example_type.xml")
+
+XML models in a package may be directly edited. (Dexterity will probably also
+include a TTW XML-model editor at some point in the future.)
+
+This document is a reference to the tags and attributes you may use in model
+XML files. This includes several form-control and security-control attributes
+that are not available through the TTW schema editor.
+
+XML Document Structure
+----------------------
+
+Dexterity requires that its model XML be well-formed XML, including name space
+declarations. The typical structure of a Dexterity XML document is::
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <model xmlns="http://namespaces.plone.org/supermodel/schema"
+           xmlns:form="http://namespaces.plone.org/supermodel/form"
+           xmlns:security="http://namespaces.plone.org/supermodel/security">
+        <schema>
+            <field type="zope.schema.TextLine" name="one"
+                <title>One</title>
+                ... More field attributes
+            </field>
+            ... More fields
+        </schema>
+    </model>
+
+Only the default name space (.../supermodel/schema) is required for basic
+schema. The ``supermodel/form`` and ``supermodel/schema`` provide additional
+attributes to control form presentation and security.
+
+supermodel/schema fields
+------------------------
+
+Most of the supermodel/schema field tag and its attributes map directly to what's available via the TTW schema editor::
+
+        <field name="dummy" type="zope.schema.TextLine">
+          <default>abc</default>
+          <description>Test desc</description>
+          <max_length>10</max_length>
+          <min_length>2</min_length>
+          <missing_value>m</missing_value>
+          <readonly>True</readonly>
+          <required>False</required>
+          <title>Test</title>
+        </field>
+
+The field ``type`` needs to be the full dotted name (as if it was being
+imported in Python) of the field type.
+
+Fieldsets
+~~~~~~~~~
+
+It's easy to add fieldsets by surrounding embedding fields tags in a ``fieldset`` block::
+
+      <schema>
+        ...
+        <fieldset name="test"
+                label="Test Fieldset"
+                description="Description of test fieldset">
+            <field name="three" type="zope.schema.TextLine">
+              <description/>
+              <title>Three</title>
+            </field>
+            <field name="four" type="zope.schema.TextLine">
+              <description/>
+              <title>Four</title>
+            </field>
+        </fieldset>
+        ...
+      </schema>
+
+
+Vocabularies
+~~~~~~~~~~~~
+
+Vocabularies may be specified via dotted names using the ``source`` tag::
+
+    <field name="dummy" type="zope.schema.Choice">
+        <default>a</default>
+        <description>Test desc</description>
+        <missing_value/>
+        <readonly>True</readonly>
+        <required>False</required>
+        <title>Test</title>
+        <source>plone.supermodel.tests.dummy_vocabulary_instance</source>
+    </field>
+
+Where the full Python dotted-name of a Zope vocabulary in a package::
+
+    from zope.schema.vocabulary import SimpleVocabulary
+
+    dummy_vocabulary_instance = SimpleVocabulary.fromItems([(1, 'a'), (2, 'c')])
+
+Or, a source binder::
+
+    <field name="dummy" type="zope.schema.Choice">
+        ...
+        <source>plone.supermodel.tests.dummy_binder</source>
+    </field>
+
+
+With Python like::
+
+    from zope.schema.interfaces import IContextSourceBinder
+
+    class Binder(object):
+        implements(IContextSourceBinder)
+
+        def __call__(self, context):
+            return SimpleVocabulary.fromValues(['a', 'd', 'f'])
+
+    dummy_binder = Binder()
+
+You may also use the ``vocabulary`` tag rather than ``source`` to refer to named vocabularies registered via the ZCA.
+
+
+Internationalization
+~~~~~~~~~~~~~~~~~~~~
+
+Translation domains and message ids can be specified for text
+that is interpreted as unicode. This will result in deserialization
+as a zope.i18nmessageid message id rather than a basic Unicode string.
+
+Note that we need to add the i18n namespace and a domain specification::
+
+    <model xmlns="http://namespaces.plone.org/supermodel/schema"
+           xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+           i18n:domain="your.application">
+        <schema>
+
+            <field type="zope.schema.TextLine" name="title">
+                <title i18n:translate="yourapp_test_title">Title</title>
+            </field>
+
+        </schema>
+    </model>
+
+
+supermodel/form attributes
+--------------------------
+
+supermodel/form provides attributes that govern presentation and editing.
+
+after/before
+~~~~~~~~~~~~
+
+To re-order fields, use ``form:after`` or ``form:before``.
+
+The value should be either ``'*'``, to put the field first/last in the form,
+or the name of a another field. Use ``'.fieldname'`` to refer to field in the
+current schema (or a base schema). Use a fully prefixed name (e.g.
+``'my.package.ISomeSchema'``) to refer to a field in another schema. Use an
+unprefixed name to refer to a field in the default schema for the form.
+
+Example::
+
+    <field type="zope.schema.TextLine"
+           name="one"
+           form:after="two">
+        <title>One</title>
+    </field>
+
+mode
+~~~~
+
+To turn a field into a view mode or hidden field, use ``form:mode``.  The
+mode may be set for only some forms by specifying a form interface in the
+same manner as for ``form:omitted``.
+
+Example::
+
+    <field type="zope.schema.TextLine"
+            name="three"
+            form:mode="z3c.form.interfaces.IEditForm:input">
+        <title>Three</title>
+    </field>
+
+
+omitted
+~~~~~~~
+
+To omit a field from all forms, use ``form:omitted="true"``.  To omit a field
+only from some forms, specify a form interface like
+``form:omitted="z3c.form.interfaces.IForm:true"``. Multiple interface:value
+settings may be specified, separated by spaces.
+
+Examples::
+
+    <field type="zope.schema.TextLine"
+           name="one"
+           form:omitted="true">
+        <title>One</title>
+    </field>
+
+    <field type="zope.schema.TextLine" name="three"
+            form:omitted="z3c.form.interfaces.IForm:true z3c.form.interfaces.IEditForm:false"
+            >
+        <title>Three</title>
+    </field>
+
+The latter example hides the field on everything except the edit form.
+
+
+widget
+~~~~~~
+
+To set a custom widget for a field, use ``form:widget`` to give a fully
+qualified name to the field widget factory.
+
+Example::
+
+    <field type="zope.schema.TextLine"
+           name="password"
+           form:widget="z3c.form.browser.password.PasswordFieldWidget">
+        <title>One</title>
+    </field>
+
+
+Dynamic Defaults
+~~~~~~~~~~~~~~~~
+
+To set a dynamic default for a field, use a ``defaultFactory`` tag to
+give a fully qualified name for a callable. The defaultFactory callable must
+provide either plone.supermodel.interfaces.IDefaultFactory or
+zope.schema.interfaces.IContextAwareDefaultFactory.
+
+Example::
+
+    <field type="zope.schema.TextLine" name="three">
+        <title>Three</title>
+        <defaultFactory>plone.supermodel.tests.dummy_defaultFactory</defaultFactory>
+    </field>
+
+Sample Python for the validator factory::
+
+    @provider(IDefaultFactory)
+    def dummy_defaultFactory():
+        return u'something'
+
+For a callable using context::
+
+    @provider(IContextAwareDefaultFactory)
+    def dummy_defaultCAFactory(context):
+        return context.something
+
+.. note::
+
+    The ``defaultFactory`` tag was added in plone.supermodel 1.2.3,
+    shipping with Plone 4.3.2+.
+
+
+validator
+~~~~~~~~~
+
+To set a custom validator for a field, use ``form:validator`` to give a fully
+qualified name to the field validator factory. The validator factory should be
+a class derived from one of the validators in z3c.form.validator.
+
+Example::
+
+    <field type="zope.schema.TextLine"
+            name="three"
+            form:validator="plone.autoform.tests.test_utils.TestValidator">
+        <title>Three</title>
+    </field>
+
+Sample Python for the validator factory::
+
+    class TestValidator(z3c.form.validator.SimpleFieldValidator):
+
+        def validate(self, value):
+            super(TestValidator, self).validate(value)
+            raise Invalid("Test")
+
+.. _dexterity-xml-security:
+
+supermodel/security attributes
+------------------------------
+
+read-permission/write-permission
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To set a read or write permission, use ``security:read-permission`` or
+``security:write-permission``. The value should be the name of an
+``IPermission`` utility.
+
+Example::
+
+    <field type="zope.schema.TextLine"
+            name="one"
+            security:read-permission="zope2.View"
+            security:write-permission="cmf.ModifyPortalContent">
+        <title>One</title>
+    </field>
diff --git a/docs/grok/reference/fields.rst b/docs/grok/reference/fields.rst
new file mode 100644
index 0000000..4575e7a
--- /dev/null
+++ b/docs/grok/reference/fields.rst
@@ -0,0 +1,177 @@
+Fields
+========
+
+**The standard schema fields**
+
+The following tables shows the most common field types for use in
+Dexterity schemata.
+See the documentation on `creating schemata`_ for information about how to
+use these.
+
+Field properties
+----------------
+
+Fields are initialised with properties passed in their constructors.
+To avoid having to repeat the available properties for each field, we’ll
+list them once here, grouped into the interfaces that describe them.
+You’ll see those interfaces again in the tables below that describe the
+various field types.
+Refer to the table below to see what properties a particular interface
+implies.
+
+=========== =================== ========== ===================================================
+Interface   Property            Type       Description
+=========== =================== ========== ===================================================
+IField      title               unicode    The title of the field. Used in the widget.
+\           description         unicode    A description for the field. Used in the widget.
+\           required            bool       Whether or not the field is required. Used for
+                                           form validation. The default is ``True``.
+\           readonly            bool       Whether or not the field is read-only. Default
+                                           is ``False``.
+\           default                        The default value for the field. Used in forms
+                                           and sometimes as a fallback value. Must be a
+                                           valid value for the field if set. The default
+                                           is ``None``.
+\           missing_value                  A value that represents "this field is not set".
+                                           Used by form validation. Defaults to ``None``. For
+                                           lists and tuples, it is sometimes useful to set
+                                           this to an empty list/tuple.
+IMinMaxLen  min_length          int        The minimum required length. Used for string
+                                           fields. Default is ``0``.
+\           max_length          int        The maximum allowed length. Used for string
+                                           fields. Default is ``None`` (no check).
+IMinMax     min                            The minimum allowed value. Must be a valid value
+                                           for the field, e.g. for an ``Int`` field this
+                                           should be an integer. Default is ``None`` (no
+                                           check).
+\           max                            The maximum allowed value. Must be a valid value
+                                           for the field, e.g. for an Int field this should
+                                           be an integer. Default is ``None`` (no check).
+ICollection value_type                     Another ``Field`` instance that describes the
+                                           allowable values in a list, tuple or other
+                                           collection. Must be set for any collection field.
+                                           One common usage is to set this to a ``Choice``,
+                                           to model a multi-selection field with a vocabulary.
+\           unique              bool       Whether or not values in the collection must be
+                                           unique. Usually not set directly – use a ``Set``
+                                           or ``Frozenset`` to guarantee uniqueness in an
+                                           efficient way.
+IDict       key_type                       Another ``Field`` instance that describes the
+                                           allowable keys in a dictionary. Similar to the
+                                           ``value_type`` of a collection. Must be set.
+\           value_type                     Another ``Field`` instance that describes the
+                                           allowable values in a dictionary. Similar to the
+                                           ``value_type`` of a collection. Must be set.
+IObject     schema              Interface  An interface that must be provided by any object
+                                           stored in this field.
+IRichText   default_mime_type   str        Default MIME type for the input text of a rich
+                                           text field. Defaults to ``text/html``.
+\           output_mime_type    str        Default output MIME type for the transformed
+                                           value of a rich text field. Defaults to
+                                           ``text/x-html-safe``. There must be a
+                                           transformation chain in the ``portal_transforms``
+                                           tool that can transform from the input value to
+                                           the ``output`` value for the output property of
+                                           the ``RichValue`` object to contain a value.
+\           allowed_mime_types  tuple      A list of allowed input MIME types. The default
+                                           is ``None``, in which case the site-wide settings
+                                           (from the ``Markup`` control panel) will be used.
+=========== =================== ========== ===================================================
+
+Field types
+-----------
+
+The following tables describe the most commonly used field types,
+grouped by the module from which they can be imported.
+
+Fields in zope.schema
+~~~~~~~~~~~~~~~~~~~~~
+
+================= ============ ================================================================================= ================================
+Name              Type         Description                                                                       Properties
+================= ============ ================================================================================= ================================
+Choice            N/A          Used to model selection from a vocabulary, which must be supplied.                See `vocabularies`_.
+                               Often used as the ``value_type`` of a selection field. The value
+                               type is the value of the terms in the vocabulary.
+Bytes             str          Used for binary data.                                                             IField, IMinMaxLen
+ASCII             str          ASCII text (multi-line).                                                          IField, IMinMaxLen
+BytesLine         str          A single line of binary data, i.e. a ``Bytes`` with newlines                      IField, IMinMaxLen
+                               disallowed.
+ASCIILine         str          A single line of ASCII text.                                                      IField, IMinMaxLen
+Text              unicode      Unicode text (multi-line). Often used with a WYSIWYG widget,                      IField, IMinMaxLen
+                               although the default is a text area.
+TextLine          unicode      A single line of Unicode text.                                                    IField, IMinMaxLen
+Bool              bool         ``True`` or ``False``.                                                            IField
+Int               int, long    An integer number. Both ints and longs are allowed.                               IField, IMinMax
+Float             float        A floating point number.                                                          IField, IMinMax
+Tuple             tuple        A tuple (non-mutable).                                                            IField, ICollection, IMinMaxLen
+List              list         A list.                                                                           IField, ICollection, IMinMaxLen
+Set               set          A set.                                                                            IField, ICollection, IMinMaxLen
+Frozenset         frozenset    A frozenset (non-mutable).                                                        IField, ICollection, IMinMaxLen
+Password          unicode      Stores a simple string, but implies a password widget.                            IField, IMinMaxLen
+Dict              dict         Stores a dictionary. Both ``key_type`` and ``value_type`` must be set to fields.  IField, IMinMaxLen, IDict
+Datetime          datetime     Stores a Python ``datetime`` (not a Zope 2 ``DateTime``).                         IField, IMinMax
+Date              date         Stores a python ``date``.                                                         IField, IMinMax
+Timedelta         timedelta    Stores a python ``timedelta``.                                                    IField, IMinMax
+SourceText        unicode      A textfield intended to store source text (e.g. HTML or Python code).             IField, IMinMaxLen
+Object            N/A          Stores a Python object that conforms to the interface given as the                IField, IObject
+                               ``schema``. There is no standard widget for this.
+URI               str          A URI (URL) string.                                                               IField, MinMaxLen
+Id                str          A unique identifier – either a URI or a dotted name.                              IField, IMinMaxLen
+DottedName        str          A dotted name string.                                                             IField, IMinMaxLen
+InterfaceField    Interface    A Zope interface.                                                                 IField
+Decimal           Decimal      Stores a Python ``Decimal``. Requires version 3.4 or later of                     IField, IMinMax
+                               `zope.schema`_. Not available by default in Zope 2.10.
+================= ============ ================================================================================= ================================
+
+Fields in ``plone.namedfile.field``
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+See `plone.namedfile`_ and `plone.formwidget.namedfile`_ for more
+details.
+
+=============== =============== ================================================================================= ==========
+Name            Type            Description                                                                       Properties
+=============== =============== ================================================================================= ==========
+NamedFile       NamedFile       A binary uploaded file. Normally used with the widget from                        IField
+                                `plone.formwidget.namedfile`_.
+NamedImage      NamedImage      A binary uploaded image. Normally used with the widget from                       IField
+                                `plone.formwidget.namedfile`_.
+NamedBlobFile   NamedBlobFile   A binary uploaded file stored as a ZODB BLOB. Requires the ``[blobs]`` extra to   IField
+                                `plone.namedfile`_. Otherwise identical to ``NamedFile``.
+NamedBlobImage  NamedBlobImage  A binary uploaded image stored as a ZODB BLOB. Requires the ``[blobs]`` extra to  IField
+                                `plone.namedfile`_. Otherwise identical to ``NamedImage``.
+=============== =============== ================================================================================= ==========
+
+Fields in ``z3c.relationfield.schema``
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+See `z3c.relationfield`_ for more details.
+
+================= ================ ================================================================ ===============
+Name              Type             Description                                                      Properties
+================= ================ ================================================================ ===============
+Relation          RelationValue    Stores a single ``RelationValue``.                               IField
+RelationList      list             A ``List`` field that defaults to ``Relation`` as the value type See ``List``
+RelationChoice    RelationValue    A ``Choice`` field intended to store ``RelationValue``’s         See ``Choice``
+================= ================ ================================================================ ===============
+
+Fields in `plone.app.textfield`_
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+See `plone.app.textfield`_  for more details.
+
+========= ============== ====================================================================================== ==================
+Name      Type           Description                                                                            Properties
+========= ============== ====================================================================================== ==================
+RichText  RichTextValue  Stores a ``RichTextValue``, which encapsulates a raw text value, the source MIME type, IField, IRichText
+                         and a cached copy of the raw text transformed to the default output MIME type.
+========= ============== ====================================================================================== ==================
+
+.. _creating schemata: ../schema-driven-types.html#the-schema
+.. _plone.app.textfield: http://pypi.python.org/pypi/plone.app.textfield
+.. _plone.formwidget.namedfile: http://pypi.python.org/pypi/plone.formwidget.namedfile
+.. _plone.namedfile: http://pypi.python.org/pypi/plone.namedfile
+.. _vocabularies: ../advanced/vocabularies.html
+.. _z3c.relationfield: http://pypi.python.org/pypi/z3c.relationfield
+.. _zope.schema: http://pypi.python.org/pypi/zope.schema
diff --git a/docs/grok/reference/form-schema-hints.rst b/docs/grok/reference/form-schema-hints.rst
new file mode 100644
index 0000000..7891745
--- /dev/null
+++ b/docs/grok/reference/form-schema-hints.rst
@@ -0,0 +1,160 @@
+Form schema hints
+==================
+
+**Directives which can be used to configure forms from schemata**
+
+Dexterity uses the `plone.autoform`_ package to configure its
+`z3c.form`_-based add and edit forms. This allows a schema to be
+annotated with “form hints”, which are used to configure the form.
+
+The easiest way to apply form hints in Python code is to use the
+directives from `plone.directives.form`_ and
+`plone.directives.dexterity`_. These directives are used when the
+package is “grokked” (via the *<grok:grok package=“.” />*ZCML directive)
+to apply the form hints to the interface where they are found. For this
+process to work, the schema must derive from
+*plone.directives.form.Schema*. Directives can be placed anywhere in the
+class body. By convention they are kept next to the fields they apply
+to.
+
+For example, here is a schema that omits a field:
+
+::
+
+    from plone.directives import form
+    from zope import schema
+
+    class ISampleSchema(form.Schema):
+
+        title = schema.TextLine(title=u"Title")
+
+        form.omitted('additionalInfo')
+        additionalInfo = schema.Bytes()
+
+The form directives take parameters in the form of a list of field
+names, or a set of field name/value pairs as keyword arguments. Each
+directive can be used zero or more times.
+
+Form directives
+---------------
+
+The form directives in the *plone.directives.form* package are shown
+below.
+
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Name            | Description                                                                                                                                                                                                                                                                                                                                  |
++=================+==============================================================================================================================================================================================================================================================================================================================================+
+| widget          | Specify an alternate widget for a field. Pass the field name as a key and a widget as the value. The widget can either be a z3c.form widget instance or a string giving the dotted name to one.                                                                                                                                              |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| omitted         | Omit one or more fields from forms. Takes a sequence of field names as parameters.                                                                                                                                                                                                                                                           |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| mode            | Set the widget mode for one or more fields. Pass the field name as a key and the string ‘input’, ‘display’ or ‘hidden’ as the value.                                                                                                                                                                                                         |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| order\_before   | Specify that a given field should be rendered before another. Pass the field name as a key and name of the other field as a value. If the other field is in a supplementary schema (i.e. one from a behaviour), its name will be e.g. “IOtherSchema.otherFieldName”. Alternatively, pass the string “\*” to put a field first in the form.   |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| order\_after    | The inverse of order\_before(), putting a field after another. Passing “\*” will put the field at the end of the form.                                                                                                                                                                                                                       |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| primary         | Designate a given field as the primary field in the schema. This is not used for form rendering, but is used for WebDAV marshaling of the content object.                                                                                                                                                                                    |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| fieldset        | Creates a fieldset (rendered in Plone as a tab on the edit form).                                                                                                                                                                                                                                                                            |
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+
+The code sample below illustrates each of these directives:
+
+::
+
+    from plone.directives import form
+    from zope import schema
+    from plone.app.z3cform.wysiwyg import WysiwygFieldWidget
+
+    class ISampleSchema(form.Schema):
+
+        # A fieldset with id 'extra' and label 'Extra information' containing
+        # the 'footer' and 'dummy' fields. The label can be omitted if the
+        # fieldset has already been defined.
+
+        form.fieldset('extra',
+                label=u"Extra information",
+                fields=['footer', 'dummy']
+            )
+
+        # Here a widget is specified as a dotted name.
+        # The body field is also designated as the priamry field for this schema
+
+        form.widget(body='plone.app.z3cform.wysiwyg.WysiwygFieldWidget')
+        form.primary('body')
+        body = schema.Text(
+                title=u"Body text",
+                required=False,
+                default=u"Body text goes here"
+            )
+
+        # The widget can also be specified as an object
+
+        form.widget(footer=WysiwygFieldWidget)
+        footer = schema.Text(
+                title=u"Footer text",
+                required=False
+            )
+
+        # An omitted field. Use form.omitted('a', 'b', 'c') to omit several fields
+
+        form.omitted('dummy')
+        dummy = schema.Text(
+                title=u"Dummy"
+            )
+
+        # A field in 'hidden' mode
+
+        form.mode(secret='hidden')
+        secret = schema.TextLine(
+                title=u"Secret",
+                default=u"Secret stuff"
+            )
+
+        # This field is moved before the 'description' field of the standard
+        # IBasic behaviour, if this is in use.
+
+        form.order_before(importantNote='IBasic.description')
+        importantNote = schema.TextLine(
+                title=u"Important note",
+            )
+
+Security directives
+-------------------
+
+The security directives in the *plone.directives.dexterity* package are
+shown below. Note that these are also used to control reading and
+writing of fields on content instances.
+
++---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Name                | Description                                                                                                                                                                                                                          |
++=====================+======================================================================================================================================================================================================================================+
+| read\_permission    | Set the (Zope 3) name of a permission required to read the field’s value. Pass the field name as a key and the permission name as a string value. Among other things, this controls the field’s appearance in display forms.         |
++---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| write\_permission   | Set the (Zope 3) name of a permission required to write the field’s value. Pass the field name as a key and the permission name as a string value. Among other things, this controls the field’s appearance in add and edit forms.   |
++---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+
+The code sample below illustrates each of these directives:
+
+::
+
+    from plone.directives import form, dexterity
+    from zope import schema
+
+    class ISampleSchema(form.Schema):
+
+        # This field requires the 'cmf.ReviewPortalContent' to be read and
+        # written
+
+        dexterity.read_permission(reviewNotes='cmf.ReviewPortalContent')
+        dexterity.write_permission(reviewNotes='cmf.ReviewPortalContent')
+        reviewNotes = schema.Text(
+                title=u"Review notes",
+                required=False,
+            )
+
+.. _plone.autoform: http://pypi.python.org/pypi/plone.autoform
+.. _z3c.form: http://docs.zope.org/z3c.form
+.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
+.. _plone.directives.dexterity: http://pypi.python.org/pypi/plone.directives.dexterity
diff --git a/docs/grok/reference/index.rst b/docs/grok/reference/index.rst
new file mode 100644
index 0000000..84e34c6
--- /dev/null
+++ b/docs/grok/reference/index.rst
@@ -0,0 +1,16 @@
+Reference
+==========
+
+**Useful references for things like field types, wigets and APIs**
+
+.. toctree::
+   :maxdepth: 2
+
+   fields.rst
+   widgets.rst
+   standard-behaviours.rst
+   form-schema-hints.rst
+   value-and-validator-adaptors.rst
+   manipulating-content-objects.rst
+   dexterity-xml.rst
+   misc.rst
diff --git a/docs/grok/reference/manipulating-content-objects.rst b/docs/grok/reference/manipulating-content-objects.rst
new file mode 100644
index 0000000..bc7afa7
--- /dev/null
+++ b/docs/grok/reference/manipulating-content-objects.rst
@@ -0,0 +1,418 @@
+Manipulating content objects
+============================
+
+**Common APIs used to manipulate Dexterity content objects**
+
+In this section, we will describe some of the more commonly used APIs
+that can be used to inspect and manipulate Dexterity content objects. In
+most cases, the content object is referred to as *context*, its parent
+folder is referred to as *folder*, and the type name is *example.type*.
+Relevant imports are shown with each code snippet, though of course you
+are more likely to place those at the top of the relevant code module.
+
+Content object creation and folder manipulation
+-----------------------------------------------
+
+This section describes means to create objects and manipulate folders.
+
+Creating a content object
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The simplest way to create a content item is via its factory:
+
+::
+
+    from zope.component import createObject
+    context = createObject('example.type')
+
+At this point, the object is not acquisition wrapped. You can wrap it
+explicitly by calling:
+
+::
+
+    wrapped = context.__of__(folder)
+
+However, it’s normally better to add the item to a folder and then
+re-get it from the folder.
+
+Note that the factory is normally installed as a local utility, so the
+*createObject()* call will only work once you’ve traversed over the
+Plone site root.
+
+There is a convenience method that can be used to create a Dexterity
+object. It is mostly useful in tests:
+
+::
+
+    from plone.dexterity.utils import createContent
+    context = createContent('example.type', title=u"Foo")
+
+Any keyword arguments are used to set properties on the new instance
+(via *setattr()* on the newly created object). This method relies on
+being able to look up the FTI as a local utility, so again you must be
+inside the site for it to work.
+
+Adding an object to a container
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Once an object has been created, it can be added to a container. If the
+container is a Dexterity container, or another container that supports a
+dict API (e.g. a *Large Plone Folder* in Plone 3 or a container based on
+*plone.folder*), you can do:
+
+::
+
+    folder['some_id'] = context
+
+You should normally make sure that the *id* property of the object is
+the same as the id used in the container.
+
+If the object only supports the basic OFS API (as is the case with
+standard Plone *Folders* in Plone 3), you can use the *\_setObject()*
+method:
+
+::
+
+    folder._setObject('some_id') = context
+
+Note that both of these approaches bypass any type checks, i.e. you can
+add items to containers that would not normally allow this type of
+content. Dexterity comes with a convenience function, useful in tests,
+to simulate the checks performed when content is added through the web:
+
+::
+
+    from plone.dexterity.utils import addContentToContainer
+    addContentToContainer(folder, context)
+
+This will also invoke a name chooser and set the object’s id
+accordingly, so things like the title-to-id behavior should work. As
+before, this relies on local components, so you must have traversed into
+a Plone site (*PloneTestCase* takes care of this for you).
+
+To bypass folder constraints, you can use this function and pass
+*checkConstraints=False*.
+
+You can also both create and add an object in one call:
+
+::
+
+    from plone.dexterity.utils import createContentInContainer
+    createContentInContainer(folder, 'example.type', title=u"Foo")
+
+Again, you can pass *checkConstraints=False* to bypass folder
+constraints, and pass object properties as keyword arguments.
+
+Finally, you can use the *invokeFactory()* API, which is similar, but
+more generic in that it can be used for any type of content, not just
+Dexterity content:
+
+::
+
+    new_id = folder.invokeFactory('example.type', 'some_id')
+    context = folder['new_id']
+
+This always respects add constraints, including add permissions and the
+current user’s roles.
+
+Getting items from a folder
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Dexterity containers and other containers based on *plone.folder*
+support a dict-like API to obtain and manipulate items in folders. For
+example, to obtain an (acquisition-wrapped) object by name:
+
+::
+
+    context = folder['some_id']
+
+Folders can also be iterated over, and you can all *items()*, *keys()*,
+*values()* and so on, treating the folder as a dict with string keys and
+content objects as values.
+
+Dexterity containers also support the more basic OFS API. You can call
+*objectIds()* to get keys, *objectValues()* to get a list of content
+objects, *objectItems()* to get an *items()*-like dict,and
+*hasObject(id)* to check if an object exists in a container.
+
+Removing items from a folder
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Again, Dexterity containers act like dictionaries, and so implement
+*\_\_delitem\_\_*:
+
+::
+
+    del folder['some_id']
+
+The OFS API uses the *\_delObject()* function for the same purpose:
+
+::
+
+    folder._delObject('some_id')
+
+Object introspection
+--------------------
+
+This section describes means of getting information about an object.
+
+Obtaining an object’s schema interface
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+A content object’s schema is an interface, i.e. an object of type
+*zope.interface.interface.InterfaceClass*.
+
+::
+
+    from zope.app.content import queryContentType
+    schema = queryContentType(context)
+
+The schema can now be inspected. For example:
+
+::
+
+    from zope.schema import getFieldsInOrder
+    fields = getFieldsInOrder(schema)
+
+Finding an object’s behaviors
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To find all behaviors supported by an object, use the *plone.behavior*
+API:
+
+::
+
+    from plone.behavior.interfaces import IBehaviorAssignable
+    assignable = IBehaviorAssignable(context)
+    for behavior in assignable.enumerateBehaviors():
+        behavior_schema = behavior.interface
+        adapted = behavior_schema(context)
+        ...
+
+The objects returned are instances providing
+*plone.behavior.interfaces.IBehavior*. To get the behavior schema, use
+the *interface* property of this object. You can inspect this and use it
+to adapt the context if required.
+
+Getting the FTI
+~~~~~~~~~~~~~~~
+
+To obtain a Dexterity FTI, look it up as a local utility:
+
+::
+
+    from zope.component import getUtility
+    from plone.dexterity.interfaces import IDexterityFTI
+    fti = getUtility(IDexterityFTI, name='example.type')
+
+The returned object provides *plone.dexterity.interfaces.IDexterityFTI*.
+To get the schema interface for the type from the FTI, you can do:
+
+::
+
+    schema = fti.lookupSchema()
+
+Getting the object’s parent folder
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+A Dexterity item in a Dexterity container should have the
+*\_\_parent\_\_* property set, pointing to its containment parent:
+
+::
+
+    folder = context.__parent__
+
+Items in standard Plone folders won’t have this property set, at least
+not in Plone 3.x.
+
+The more general approach relies on acquisition:
+
+::
+
+    from Acquisition import aq_inner, aq_parent
+    folder = aq_parent(aq_inner(context))
+
+Workflow
+--------
+
+This section describes ways to inspect an object’s workflow state and
+invoke transitions.
+
+Obtaining the workflow state of an object
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To obtain an object’s workflow state, ask the*portal\_workflow* tool:
+
+::
+
+    from Products.CMFCore.utils import getToolByName
+    portal_workflow = getToolByName(context, 'portal_workflow')
+    review_state = portal_workflow.getInfoFor(context, 'review_state')
+
+This assumes that the workflow state variable is called *review\_state*,
+as is the case for almost all workflows.
+
+Invoking a workflow transition
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To invoke a transition:
+
+::
+
+    portal_workflow.doActionFor(context, 'some_transition')
+
+The transition must be available in the current workflow state, for the
+current user. Otherwise, an error will be raised.
+
+Cataloging and indexing
+-----------------------
+
+This section describes ways of indexing an object in the portal\_catalog
+tool.
+
+Reindexing the object
+~~~~~~~~~~~~~~~~~~~~~
+
+Objects may need to be reindexed if they are modified in code. The best
+way to reindex them is actually to send an event and let Dexterity’s
+standard event handlers take care of this:
+
+::
+
+    from zope.lifecycleevent import modified
+    modified(context)
+
+In tests, it is sometimes necessary to reindex explicitly. This can be
+done with:
+
+::
+
+    context.reindexObject()
+
+You can also pass specific index names to reindex, if you don’t want to
+reindex everything:
+
+::
+
+    context.reindexObject(idxs=['Title', 'sortable_title'])
+
+This method comes from the
+*Products.CMFCore.CMFCatalogAware.CMFCatalogAware* mix-in class.
+
+Security
+--------
+
+This section describes ways to check and modify permissions. For more
+information, see the section on `permissions`_.
+
+Checking a permission
+~~~~~~~~~~~~~~~~~~~~~
+
+To check a permission by its Zope 3 name:
+
+::
+
+    from zope.security import checkPermission
+    checkPermission('zope2.View', context)
+
+Note: In a test, you may get an AttributeError when calling this method.
+To resolve this, call *newInteraction()* from *Products.Five.security*
+in your test setup (e.g. the *afterSetUp()* method).
+
+To use the Zope 2 permission title:
+
+::
+
+    from AccessControl import getSecurityManager
+    getSecurityManager().checkPermission('View', context)
+
+Sometimes, normally in tests, you want to know which roles have a
+particular permission. To do this, use:
+
+::
+
+    roles = [r['name'] for r in context.rolesOfPermission('View') if r['selected']]
+
+Again, note that this uses the Zope 2 permission title.
+
+Changing permissions
+~~~~~~~~~~~~~~~~~~~~
+
+Normally, permissions should be set with workflow, but in tests it is
+often useful to manipulate security directly:
+
+::
+
+    context.manage_permission('View', roles=['Manager', 'Owner'], acquire=True)
+
+Again note that this uses the Zope 2 permission title.
+
+Content object properties and methods
+-------------------------------------
+
+The following table shows the more important properties and methods
+available on Dexterity content objects. In addition, any field described
+in the type’s schema will be available as a property, and can be read
+and set using normal attribute access.
+
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Property/method       | Type          | Description                                                                                                                                                                                                                                                                                                                                                                                |
++=======================+===============+============================================================================================================================================================================================================================================================================================================================================================================================+
+| \_\_name\_\_          | unicode       | The name (id) of the object in its container. This is a unicode string to be consistent with the Zope 3 *IContained* interface, although in reality it will only ever contain ASCII characters, since Zope 2 does not support non-ASCII URLs.                                                                                                                                              |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| id                    | str           | The name (id) of the object in its container. This is an ASCII string encoding of the *\_\_name\_\_*.                                                                                                                                                                                                                                                                                      |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| getId()               | str           | Returns the value of the *id*property*.*                                                                                                                                                                                                                                                                                                                                                   |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| isPrincipaFolderish   | bool/int      | True (or 1) if the object is a folder. False (or 0) otherwise.                                                                                                                                                                                                                                                                                                                             |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| portal\_type          | str           | The portal\_type of this instance. Should match an FTI in the *portal\_types* tool. For Dexterity types, should match a local utility providing *IDexterityFTI*. Note that the *portal\_type* is a per-instance property set upon creation (by the factory), and should not be set on the class.                                                                                           |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| meta\_type            | str           | A Zope 2 specific way to describe a class. Rarely, if ever, used in Dexterity. Do not set it on your own classes unless you know what you’re doing.                                                                                                                                                                                                                                        |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| title\_or\_id()       | str           | Returns the value of the *title* property or, if this is not set, the *id* property.                                                                                                                                                                                                                                                                                                       |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| absolute\_url()       | str           | The full URL to the content object. Will take virtual hosting and the current domain into account.                                                                                                                                                                                                                                                                                         |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| getPhysicalPath()     | tuple         | A sequence of string path elements from the application root. Stays the same regardless of virtual hosting and domain. A common pattern is to use *‘/’.join(context.getPhysicalPath())* to get a string representing the path to the Zope application root. Note that it is *not* safe to construct a relative URL from the path, because it does not take virtual hosting into account.   |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| getIcon()             | str           | Returns a string suitable for use in the *src* attribute of an *<img />* tag to get the icon of the content object.                                                                                                                                                                                                                                                                        |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| title                 | unicode/str   | Property representing the title of the content object. Usually part of an object’s schema or provided by the *IBasic* behavior. The default is an empty string.                                                                                                                                                                                                                            |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Title()               | unicode/str   | Dublin Core accessor for the *title* property. Set the title by modifying this property. You can also use *setTitle()*.                                                                                                                                                                                                                                                                    |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| listCreators()        | tuple         | A list of user ids for object creators. The first creator is normally the owner of the content object. You can set this list using the *setCreators()* method.                                                                                                                                                                                                                             |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Creator()             | str           | The first creator returned by the *listCreators()* method. Usually the owner of the content object.                                                                                                                                                                                                                                                                                        |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Subject()             | tuple         | Dublin Core accessor for item keywords. You can set this list using the *setSubject()* method.                                                                                                                                                                                                                                                                                             |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Description()         | unicode/str   | Dublin Core accessor for the *description* property, which is usually part of an object’s schema or provided by the *IBasic* behavior. You can set the description by setting the *description* attribute, or using the *setDescription()* method.                                                                                                                                         |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| listContributors()    | tuple         | Dublin Core accessor for the list of object contributors. You can set this with *setContributors()*.                                                                                                                                                                                                                                                                                       |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Date()                | str           | Dublin Core accessor for the default date of the content item, in ISO format. Uses the effective date is set, falling back on the modification date.                                                                                                                                                                                                                                       |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| CreationDate()        | str           | Dublin Core accessor for the creation date of the content item, in ISO format.                                                                                                                                                                                                                                                                                                             |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| EffectiveDate()       | str           | Dublin Core accessor for the effective publication date of the content item, in ISO format. You can set this by passing a DateTime object to *setEffectiveDate()*.                                                                                                                                                                                                                         |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| ExpirationDate()      | str           | Dublin Core accessor for the content expiration date, in ISO format. You can set this by passing a DateTime object to *setExpirationDate()*.                                                                                                                                                                                                                                               |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| ModificationDate()    | str           | Dublin Core accessor for the content last-modified date, in ISO format.                                                                                                                                                                                                                                                                                                                    |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Language()            | str           | Dublin Core accessor for the content language. You can set this using *setLanguage()*.                                                                                                                                                                                                                                                                                                     |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Rights()              | str           | Dublin Core accessor for content copyright information. You can set this using *setRights()*.                                                                                                                                                                                                                                                                                              |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| created()             | DateTime      | Returns the Zope 2 DateTime for the object’s creation date. If not set, returns a “floor” date of January 1st, 1970.                                                                                                                                                                                                                                                                       |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| modified()            | DateTime      | Returns the Zope 2 DateTime for the object’s modification date. If not set, returns a “floor” date of January 1st, 1970.                                                                                                                                                                                                                                                                   |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| effective()           | DateTime      | Returns the Zope 2 DateTime for the object’s effective date. If not set, returns a “floor” date of January 1st, 1970.                                                                                                                                                                                                                                                                      |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+| expires()             | DateTime      | Returns the Zope 2 DateTime for the object’s expiration date. If not set, returns a “floor” date of January 1st, 1970.                                                                                                                                                                                                                                                                     |
++-----------------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+
+.. _permissions: ../advanced/permissions.html
diff --git a/docs/grok/reference/misc.rst b/docs/grok/reference/misc.rst
new file mode 100644
index 0000000..1c53ab0
--- /dev/null
+++ b/docs/grok/reference/misc.rst
@@ -0,0 +1,24 @@
+Miscellaneous
+==============
+
+User contributed recipes
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+**How to hide a field on a schema if we do not want to or cannot modify the original schema**
+
+To do this one can use tagged values on the schema. In this case want to hide 'introduction' and 'answers' fields:
+
+::
+
+    from example.package.content.assessmentitem import IAssessmentItem
+    from plone.autoform.interfaces import OMITTED_KEY
+    IAssessmentItem.setTaggedValue(OMITTED_KEY,
+                               [(Interface, 'introduction', 'true'),
+                                (Interface, 'answers', 'true')])
+
+								
+This code can sit in another.package.__init__.py for example.
+								
+See also: `Original thread on coredev mailinglist`_
+
+.. _Original thread on coredev mailinglist: http://plone.293351.n2.nabble.com/plone-autoform-why-use-tagged-values-td7560956.html
diff --git a/docs/grok/reference/standard-behaviours.rst b/docs/grok/reference/standard-behaviours.rst
new file mode 100644
index 0000000..d0a1205
--- /dev/null
+++ b/docs/grok/reference/standard-behaviours.rst
@@ -0,0 +1,42 @@
+Standard behaviors
+===================
+
+**A list of common behaviors that ship with Dexterity**
+
+Dexterity ships with several standard behaviors. The following table
+shows the interfaces you can list in the FTI *behaviors* properties and
+the resultant form fields and interfaces.
+
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Interface                                                         | Description                                                                                                                                          |
++===================================================================+======================================================================================================================================================+
+| plone.app.dexterity.behaviors.metadata.IBasic                     | Basic metadata: Adds title and description fields.                                                                                                   |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.ICategorization            | Categorization: Adds keywords and language fields.                                                                                                   |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.IPublication               | Date range: Adds effective date and expiration date fields.                                                                                          |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.IOwnership                 | Ownership: Adds creator, contributor, and rights fields.                                                                                             |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.IDublinCore                | Dublin Core metadata: Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)                           |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.content.interfaces.INameFromTitle                       | Name from title: Automatically generate short URL name for content based on its initial title. Not a form field provider.                            |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.filename.INameFromFileName          | Name from file name: Automatically generate short URL name for content based on its primary field file name                                          |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.layout.navigation.interfaces.INavigationRoot            | Navigation root: Make all items of this type a navigation root                                                                                       |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation  | Exclude From navigation: Allow items to be excluded from navigation                                                                                  |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle    | Next previous navigation toggle: Allow items to have next previous navigation enabled                                                                |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.discussion.IAllowDiscussion         | Allow discussion: Allow discussion on this item                                                                                                      |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.id.IShortName                       | Short name: Gives the ability to rename an item from its edit form.                                                                                  |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled   | Next previous navigation: Enable next previous navigation for all items of this type                                                                 |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes | Folder Addable Constrains: Restrict the content types that can be added to folderish content                                                         |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.relationfield.behavior.IRelatedItems                    | Adds the *Related items* field to the *Categorization* fieldset.                                                                                     |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
diff --git a/docs/grok/reference/value-and-validator-adaptors.rst b/docs/grok/reference/value-and-validator-adaptors.rst
new file mode 100644
index 0000000..a374dec
--- /dev/null
+++ b/docs/grok/reference/value-and-validator-adaptors.rst
@@ -0,0 +1,52 @@
+Value and validator adaptors
+============================
+
+**Handy Decorators to set computed defaults and dynamic validators**
+
+Decorators from `plone.directives.form`_ allow you to set dynamic
+defaults and validators for schema fields. These are used outside the
+interface class, after its declaration.
+
+Defaults
+~~~~~~~~
+
+Use the plone.directives.form.default\_value decorator to create an
+adaptor to dynamically set a default. For example, to set a Datetime
+field to default to the current time:
+
+::
+
+    import datetime
+    from plone.directives import form
+    from zope import schema
+
+    class IMySchema(form.Schema):
+
+        start = schema.Datetime(title=u"Start Date")
+
+    @form.default_value(field=IMySchema['start'])
+    def startDefaultValue(data):
+        return datetime.datetime.today()
+
+Validators
+~~~~~~~~~~
+
+Use the plone.directives.form.validator decorator to create an adaptor
+to validate field input. For example, to validate that a field is not
+entered all uppercase:
+
+::
+
+    from plone.directives import form
+    from zope import schema
+
+    class IMySchema(form.Schema):
+
+        title = schema.TextLine(title=u"Title")
+
+    @form.validator(field=IMySchema['title'])
+    def validateTitle(value):
+        if value and value == value.upper():
+            raise schema.ValidationError(u"Please don't shout")
+
+.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
diff --git a/docs/grok/reference/widgets.rst b/docs/grok/reference/widgets.rst
new file mode 100644
index 0000000..42328c7
--- /dev/null
+++ b/docs/grok/reference/widgets.rst
@@ -0,0 +1,33 @@
+Widgets
+=======
+
+**Standard and common third party widgets**
+
+Most of the time, you will use the standard widgets provided by
+*z3c.form*. To learn more about z3c.form widgets, see the `z3c.form
+documentation`_. To learn about setting custom widgets for Dexterity
+content types, see the `schema introduction`_.
+
+The table below shows some commonly used custom widgets.
+
+============================== ================================= ================= =============================================================================================================================================================
+ Widget                         Imported from                     Field             Description
+============================== ================================= ================= =============================================================================================================================================================
+ WysiwygFieldWidget             plone.app.z3cform.wysiwyg         Text              Use Plone’s standard WYSIWYG HTML editor on a standard text field. Note that if you used a *RichText* field, you will get the WYSIWYG editor automatically.
+ RichTextWidget                 plone.app.textfield.widget        RichText          Use Plone’s standard WYSIWYG HTML editor on a *RichText* field. This also allows text-based markup such as reStructuredText.
+ AutocompleteFieldWidget        plone.formwidget.autocomplete     Choice            Autocomplete widget based on jQuery Autocomplete. Requires a Choice field with a query source. See `vocabularies`_.
+ AutocompleteMultiFieldWidget   plone.formwidget.autocomplete     Collection        Multi-select version of the above. Used for a List, Tuple, Set or Frozenset with a Choice value\_type.
+ ContentTreeFieldWidget         plone.formwidget.contenttree      RelationChoice    Content browser. Requires a query source with content objects as values.
+ MultiContentTreeFieldWidget    plone.formwidget.contenttree      RelationList      Content browser. Requires a query source with content objects as values.
+ NamedFileFieldWidget           plone.formwidget.namedfile        NamedFile         A file upload widget
+ NamedImageFieldWidget          plone.formwidget.namedimage       NamedImage        An image upload widget
+ TextLinesFieldWidget           plone.z3cform.textlines           Collection        One-per-line list entry for List, Tuple, Set or Frozenset fields. Requires a value_type of TextLine or ASCIILine.
+ SingleCheckBoxFieldWidget      z3c.form.browser.checkbox         Bool              A single checkbox for true/false.
+ CheckBoxFieldWidget            z3c.form.browser.checkbox         Collection        A set of checkboxes. Used for Set or Frozenset fields with a Choice value_type and a vocabulary.
+============================== ================================= ================= =============================================================================================================================================================
+
+.. _z3c.form documentation: http://docs.zope.org/z3c.form/widget.html
+.. _schema introduction: ../schema-driven-types.html#the-schema
+.. _vocabularies: ../advanced/vocabularies.html
+
+
diff --git a/docs/grok/schema-driven-types.rst b/docs/grok/schema-driven-types.rst
new file mode 100644
index 0000000..52a0f0d
--- /dev/null
+++ b/docs/grok/schema-driven-types.rst
@@ -0,0 +1,462 @@
+Schema-driven types
+=====================
+
+**Creating a minimal type based on a schema**
+
+The schema
+------------
+
+A simple Dexterity type consists of a schema and an FTI (Factory Type
+Information, the object configured in :guilabel:`portal_types` in the ZMI).
+We’ll create the schemata here, and the FTI on the next page.
+
+Each schema is typically in a separate module. Thus, we will add three
+files to our product: ``presenter.py``, ``program.py``, and ``session.py``.
+Each will start off with a schema interface.
+
+Creating base files
+~~~~~~~~~~~~~~~~~~~
+
+Since we created our example.conference command via ZopeSkel, we'll be able to use its ``addcontent`` command to add base files for our content types. ``addcontent`` must be used from inside your new package.
+
+.. note::
+
+    If you didn't use ZopeSkel, you'll need to add the files yourself. We'll supply the full source here, and you may refer to the example repository.
+
+Typical `addcontent` use starting out at the buildout directory is:
+
+.. code-block:: bash
+
+    $ cd src/example.conference/
+    $ ../../bin/paster addcontent -l
+    Available templates:
+        dexterity_behavior:  A behavior skeleton
+        dexterity_content:   A content type skeleton
+
+The "-l" lists available content templates.
+
+.. note::
+
+    At this point, you may receive an error message beginning with
+    ``pkg_resources.DistributionNotFound``. Do *not* follow the error messages
+    advice to run `python setup.py`. Instead, check to make sure that you have
+    added your package to the eggs and develop sections of your buildout and
+    have run buildout. This loads package dependencies that are required to run
+    addcontent.
+
+Now, let's add two of the three content types, for the conference sessions and programs.
+We'll do presenters in the next section as a model-driven type.
+
+.. code-block:: bash
+
+    $ ../../bin/paster addcontent dexterity_content
+    Enter contenttype_name (Content type name ) ['Example Type']: Session
+    Enter contenttype_description (Content type description ) ['Description of the Example Type']: A session in a conference
+    Enter folderish (True/False: Content type should act as a container ) [False]: False
+    Enter global_allow (True/False: Globally addable ) [True]: False
+    Enter allow_discussion (True/False: Allow discussion ) [False]:
+
+    $ ../../bin/paster addcontent dexterity_content
+    Enter contenttype_name (Content type name ) ['Example Type']: Program
+    Enter contenttype_description (Content type description ) ['Description of the Example Type']: A conference program
+    Enter folderish (True/False: Content type should act as a container ) [False]: True
+    Enter global_allow (True/False: Globally addable ) [True]:
+    Enter allow_discussion (True/False: Allow discussion ) [False]:
+
+Notice that we chose to make the `Conference` type a container, because we will
+want it to be able to contain sessions. Likewise, we set `Globally addable`` for
+the `Session` type to False, as we'll only want to allow them to be added inside
+programs.
+
+If you check ``example.conference/example/conference``, you'll discover that
+Python source files program.py, session.py and presenter.py have been added. If
+you explore ``example.conference/example/conference/profiles/default/types``,
+you'll also find XML files setting the Factory Type Information for each new
+type. We'll customize all of these.
+
+Setting the schema
+~~~~~~~~~~~~~~~~~~
+
+Start with program.py. Notice the boilerplate:
+
+.. code-block:: python
+
+    # If you want a schema-defined interface, delete the model.load
+    # line below and delete the matching file in the models sub-directory.
+    # If you want a model-based interface, edit
+    # models/program.xml to define the content type
+    # and add directives here as necessary.
+
+    model.load("models/program.xml")
+
+Since we're going to be defining our fields via Zope schema rather than an XML model, delete all of that.
+
+Next, add schema declarations for our fields. The top part of the file should look like:
+
+.. code-block:: python
+
+    from example.conference import MessageFactory as _
+    from five import grok
+    from plone.app.textfield import RichText
+    from plone.supermodel import model
+    from zope import schema
+
+
+    class IProgram(model.Schema):
+        """A conference program. Programs can contain Sessions.
+        """
+
+        title = schema.TextLine(
+                title=_(u"Program name"),
+            )
+
+        description = schema.Text(
+                title=_(u"Program summary"),
+            )
+
+        start = schema.Datetime(
+                title=_(u"Start date"),
+                required=False,
+            )
+
+        end = schema.Datetime(
+                title=_(u"End date"),
+                required=False,
+            )
+
+        details = RichText(
+                title=_(u"Details"),
+                description=_(u"Details about the program"),
+                required=False,
+            )
+
+
+We've also removed unnecessary ``import`` declarations.
+
+If you haven't developed for Plone before, take special note of the ``from example.conference import MessageFactory as _`` code. This is to aid future
+internationalisation of the package. Every string that is presented to
+the user should be wrapped in ``_()`` as shown with the titles and
+descriptions below.
+
+The message factory lives in the package root ``__init__.py`` file:
+
+.. code-block:: python
+
+    from zope.i18nmessageid import MessageFactory
+
+    _ = MessageFactory("example.conference")
+
+Notice how we use the package name as the translation domain.
+
+Notice how we use the field names title and description for the name and
+summary. We do this to provide values for the default title and
+description metadata used in Plone’s folder listings and searches, which
+defaults to these fields. In general, every type should have a title
+field, although it could be provided by behaviors (more on those later).
+
+Save program.py.
+
+``session.py`` for the Session type should look like this:
+
+.. code-block:: python
+
+    from example.conference import MessageFactory as _
+    from five import grok
+    from plone.app.textfield import RichText
+    from plone.supermodel import model
+    from zope import schema
+
+
+    class ISession(model.Schema):
+            """A conference session. Sessions are managed inside Programs.
+            """
+
+            title = schema.TextLine(
+                    title=_(u"Title"),
+                    description=_(u"Session title"),
+                )
+
+            description = schema.Text(
+                    title=_(u"Session summary"),
+                )
+
+            details = RichText(
+                    title=_(u"Session details"),
+                    required=False
+                )
+
+
+Note that we haven’t added information about speakers or tracks yet.
+We’ll do that when we cover vocabularies and references later.
+
+Schema interfaces vs. other interfaces
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+As you may have noticed, each schema is basically just an interface
+(``zope.interface.Interface``) with fields.
+The standard fields are found in the `zope.schema`_ package.
+You should look at its interfaces
+(``parts/omelette/zope/schema/interfaces.py``) to learn about the various
+schema fields available, and review the `online documentation`_ for the
+package. You may also want to look up `plone.namedfile`_, which you can
+use if you require a file field, `plone.app.relationfield`_, which can be used
+for references, and `plone.app.textfield`_, which supports rich text
+with a WYSIWYG editor. We will cover these field types later in this
+manual. They can also be found in the reference at the end.
+
+Unlike a standard interface, however, we are deriving from ``model.Schema``
+(actually, ``plone.supermodel.model.Schema``). This is just a marker
+interface that allows us to add some form hints to the interface, which
+are then used by Dexterity (actually, the `plone.autoform`_ package) to
+construct forms. Take a look at the `plone.autoform`_
+documentation to learn more about the various hints that are possible.
+The most common ones are ``form.fieldset()``, to define groups of fields,
+``form.widget()``, to set a widget for a particular field, and
+``form.omit()`` to hide one or more fields from the form.
+We will see examples of these later in the manual.
+
+.. _zope.schema:
+.. _online documentation: http://pypi.python.org/pypi/zope.schema
+.. _plone.app.relationfield: http://pypi.python.org/pypi/plone.app.relationfield
+.. _plone.app.textfield: http://pypi.python.org/pypi/plone.app.textfield
+.. _plone.autoform: http://pypi.python.org/pypi/plone.autoform
+.. _plone.namedfile: http://pypi.python.org/pypi/plone.namedfile
+
+The FTI
+--------
+
+**Adding a Factory Type Information object for the type**
+
+With the schema in place, we just need to make our types installable. We
+do this with GenericSetup. Most of this was set up when we used ``addcontent`` to add the content type boilerplate.
+
+Look in the ``types.xml`` file in your packages ``example/conference/profiles/default`` directory:
+
+.. code-block:: xml
+
+    <object name="portal_types">
+     <object name="example.conference.program" meta_type="Dexterity FTI" />
+     <object name="example.conference.session" meta_type="Dexterity FTI" />
+    </object>
+
+We use the package name as a prefix and the type name in lowercase to
+create a unique name. It is important that the ``meta_type`` is
+*Dexterity FTI*.
+
+We then need to add/edit an XML file for each of the types, where the file
+name matches the type name.
+
+The ``Session`` type, in ``example.conference.session.xml``, should look like this:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="example.conference.session"
+       meta_type="Dexterity FTI"
+       i18n:domain="example.conference" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+
+      <!-- Basic metadata -->
+      <property name="title" i18n:translate="">Session</property>
+      <property name="description"
+        i18n:translate="">A session in a program</property>
+      <property name="icon_expr">string:${portal_url}/document_icon.png</property>
+      <property name="factory">example.conference.session</property>
+      <property name="global_allow">False</property>
+      <property name="filter_content_types">True</property>
+      <property name="allowed_content_types" />
+      <property name="allow_discussion">False</property>
+
+      <!-- schema and class used for content items -->
+      <property name="schema">example.conference.session.ISession</property>
+      <property name="klass">example.conference.session.Session</property>
+
+      <property name="behaviors">
+         <element value="plone.app.content.interfaces.INameFromTitle" />
+       </property>
+
+      <!-- View information -->
+      <property name="link_target"></property>
+      <property name="immediate_view">view</property>
+      <property name="default_view">view</property>
+      <property name="view_methods">
+       <element value="view"/>
+      </property>
+      <property name="default_view_fallback">False</property>
+      <property name="add_permission">cmf.AddPortalContent</property>
+
+
+      <!-- Method aliases -->
+      <alias from="(Default)" to="(dynamic view)" />
+      <alias from="view" to="(selected layout)" />
+      <alias from="edit" to="@@edit" />
+      <alias from="sharing" to="@@sharing" />
+
+      <!-- Actions -->
+      <action title="View" action_id="view" category="object" condition_expr=""
+        url_expr="string:${object_url}/" visible="True">
+        <permission value="View" />
+      </action>
+      <action title="Edit" action_id="edit" category="object" condition_expr=""
+        url_expr="string:${object_url}/edit" visible="True">
+        <permission value="Modify portal content" />
+      </action>
+    </object>
+
+There is a fair amount of boilerplate here which could actually be
+omitted, because the Dexterity FTI defaults will take care of most of
+this. However, it is useful to see the options available so that you
+know what you can change.
+
+The important lines here are:
+
+-  The ``name`` attribute on the root element must match the name in
+   ``types.xml`` and the filename.
+-  We use the package name as the translation domain again, via
+   ``i18n:domain``.
+-  We set a title and description for the type
+-  We also specify an icon. Here, we use a standard icon from Plone’s
+   ``plone_images`` skin layer. You’ll learn more about static resources
+   later.
+-  We have set ``global_allow`` to ``False``,
+   since these objects should only be addable inside a *Program*..
+-  The schema interface is referenced by the ``schema`` property.
+-  We set the ``klass`` property to the class defined in the boilerplate file.
+   If you were creating this yourself, you could have instead just used
+   ``plone.dexterity.content.Item`` or
+   ``plone.dexterity.content.Container``.
+-  We specify the name of an add permission. The default
+   ``cmf.AddPortalContent`` should be used unless you configure a custom
+   permission. Custom permissions are convered later in this manual.
+-  We add a *behavior*. Behaviors are re-usable aspects providing
+   semantics and/or schema fields. Here, we add the ``INameFromTitle``
+   behavior, which will give our content object a readable id based on
+   the ``title`` property. We’ll cover other behaviors later.
+   We removed the IBasic behavior (which would supply title and description fields)
+   as we have alternative fields.
+
+
+The ``Program``, in ``example.conference.program.xml``, looks like this:
+
+.. code-block:: xml
+
+    <?xml version="1.0"?>
+    <object name="example.conference.program"
+       meta_type="Dexterity FTI"
+       i18n:domain="example.conference" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+
+      <!-- Basic metadata -->
+      <property name="title" i18n:translate="">Program</property>
+      <property name="description"
+        i18n:translate="">Conference Program</property>
+      <property name="icon_expr">string:${portal_url}/folder_icon.png</property>
+      <property name="factory">example.conference.program</property>
+      <property name="global_allow">True</property>
+      <property name="filter_content_types">True</property>
+      <property name="allowed_content_types">
+          <element value="example.conference.session" />
+      </property>
+      <property name="allow_discussion">False</property>
+
+      <!-- schema and class used for content items -->
+      <property name="schema">example.conference.program.IProgram</property>
+      <property name="klass">example.conference.program.Program</property>
+
+      <property name="behaviors">
+         <element value="plone.app.content.interfaces.INameFromTitle" />
+       </property>
+
+      <!-- View information -->
+      <property name="link_target"></property>
+      <property name="immediate_view">view</property>
+      <property name="default_view">view</property>
+      <property name="view_methods">
+       <element value="view"/>
+      </property>
+      <property name="default_view_fallback">False</property>
+      <property name="add_permission">cmf.AddPortalContent</property>
+
+
+      <!-- Method aliases -->
+      <alias from="(Default)" to="(dynamic view)" />
+      <alias from="view" to="(selected layout)" />
+      <alias from="edit" to="@@edit" />
+      <alias from="sharing" to="@@sharing" />
+
+      <!-- Actions -->
+      <action title="View" action_id="view" category="object" condition_expr=""
+        url_expr="string:${object_url}/" visible="True">
+        <permission value="View" />
+      </action>
+      <action title="Edit" action_id="edit" category="object" condition_expr=""
+        url_expr="string:${object_url}/edit" visible="True">
+        <permission value="Modify portal content" />
+      </action>
+    </object>
+
+We've edited this one a little from the boilplate: the difference here is that
+we filter the containable types (``filter_content_types`` and
+``allowed_content_types``) to allow only ``Sessions`` to be added inside this
+folder.
+
+Testing the type
+------------------
+
+**How to start up Plone and test the type, and some trouble-shooting tips.**
+
+With a schema and FTI for each type, and our GenericSetup profile
+registered in ``configure.zcml``, we should be able to test our type. Make
+sure that you have run a buildout, and then start ``./bin/instance fg`` as
+normal. Add a Plone site, and go to the :guilabel:`portal_quickinstaller` in the
+ZMI. You should see your package there and be able to install it.
+
+Once installed, you should be able to add objects of the new content
+types.
+
+If Zope doesn’t start up:
+
+-  Look for error messages on the console, and make sure you start in
+   the foreground with ``./bin/instance fg``. You could have a syntax
+   error or a ZCML error.
+
+If you have a failed import for ``plone.directives.form``, make sure that you
+specified the ``[grok]`` extra for ``plone.app.dexterity`` in your setup.py
+install_requires.
+
+If you don’t see your package in :guilabel:`portal_quickinstaller`:
+
+-  Ensure that the package is either checked out by ``mr.developer`` or
+   that you have a ``develop`` line in ``buildout.cfg`` to load it as a
+   develop egg. ``develop = src/*`` should suffice, but you can also add
+   the package explicitly, e.g. with
+   ``develop = src/example.conference.``
+-  Ensure that the package is actually loaded as an egg. It should be
+   referenced in the ``eggs`` section under ``[instance]`` .
+-  You can check that the package is correctly configured in the
+   buildout by looking at the generated ``bin/instance`` script
+   (``bin\instance-script.py`` on Windows). There should be a line for
+   your package in the list of eggs at the top of the file.
+-  Make sure that the package’s ZCML is loaded. You can do this by
+   installing a ZCML slug (via the ``zcml`` option in the ``[instance]``
+   section of ``buildout.cfg``) or by adding an ``<include />`` line in
+   another package’s ``configure.zcml``. However, the easiest way with
+   Plone 3.3 and later is to add the ``z3c.autoinclude.plugin`` entry
+   point to ``setup.py``.
+-  Ensure that you have added a ``<genericsetup:registerProfile />``
+   stanza to ``configure.zcml``.
+
+If the package fails to install in ``portal_quickinstaller``:
+
+-  Look for errors in the :guilabel:`error_log` at the root of the Plone site, in
+   your console, or in your log files.
+-  Check the syntax and placement of the profile files. Remember that
+   you need a ``types.xml`` listing your types, and corresponding files in
+   ``types/*.xml``.
+
+If your forms do not look right (e.g. you are missing custom widgets):
+
+- Make sure your schema derives from ``model.Schema``.
+- Remember that the directives require you to specify the correct field
+  name, even if they are placed before or after the relevant field.
+- Check that you have a ``<grok:grok package="." />`` line in
+  ``configure.zcml``.
+
diff --git a/docs/grok/testing/index.rst b/docs/grok/testing/index.rst
new file mode 100644
index 0000000..f1624a1
--- /dev/null
+++ b/docs/grok/testing/index.rst
@@ -0,0 +1,12 @@
+Testing Dexterity types
+==========================
+
+**Writing unit and integration tests**
+
+.. toctree::
+   :maxdepth: 2
+
+   unit-tests.rst
+   integration-tests.rst
+   mock-testing.rst
+
diff --git a/docs/grok/testing/integration-tests.rst b/docs/grok/testing/integration-tests.rst
new file mode 100644
index 0000000..6c3f74c
--- /dev/null
+++ b/docs/grok/testing/integration-tests.rst
@@ -0,0 +1,414 @@
+Integration tests
+=================
+
+**Writing integration tests with plone.app.testing**
+
+We’ll now add some integration tests for our type.
+These should ensure that the package installs cleanly, and that our custom
+types are addable in the right places and have the right schemata, at the
+very least.
+
+To help manage test setup, we’ll make use of the Zope test runner’s
+concept of *layers*.
+Layers allow common test setup (such as configuring a Plone site and
+installing a product) to take place once and be re-used by multiple test
+cases.
+Those test cases can still modify the environment, but their changes will be
+torn down and the environment reset to the layer’s initial state between
+each test, facilitating test isolation.
+
+As the name implies, layers are, erm, layered.
+One layer can extend another.
+If two test cases in the same test run use two different layers with a
+common ancestral layer, the ancestral layer is only set up and torn down
+once.
+
+`plone.app.testing`_ provides tools for writing integration and functional
+tests for code that runs on top of Plone, so we’ll use it.
+
+In *setup.py*, we will add the extras_require option, like so:
+
+::
+
+          extras_require = {
+            'test': ['plone.app.testing']
+          },
+
+.. note::
+    Don’t forget to re-run buildout after making changes to ``setup.py``.
+
+`plone.app.testing`_ includes a set of layers that set up fixtures
+containing a Plone site, intended for writing integration and functional
+tests.
+
+We need to create a custom fixture.
+The usual pattern is to create a new layer class that has ``PLONE_FIXTURE``
+as its default base, instantiating that as a separate "fixture" layer.
+This layer is not to be used in tests directly,
+since it won't have test/transaction lifecycle management, but represents a
+shared fixture, potentially for both functional and integration testing.
+It is also the point of extension for other layers that follow the same
+pattern.
+
+Once this fixture has been defined, "end-user" layers can be defined using the
+IntegrationTesting and FunctionalTesting classes. We’ll add this in a
+``testing.py`` file::
+
+    from plone.app.testing import PloneSandboxLayer
+    from plone.app.testing import PLONE_FIXTURE
+    from plone.app.testing import IntegrationTesting
+    from plone.app.testing import FunctionalTesting
+
+    class Fixture(PloneSandboxLayer):
+
+        defaultBases = (PLONE_FIXTURE,)
+
+        def setUpZope(self, app, configurationContext):
+            # Load ZCML
+            import example.conference
+            self.loadZCML(package=example.conference)
+
+        def setUpPloneSite(self, portal):
+            # Install the example.conference product
+            self.applyProfile(portal, 'example.conference:default')
+
+
+    FIXTURE = Fixture()
+    INTEGRATION_TESTING = IntegrationTesting(
+        bases=(FIXTURE,),
+        name='example.conference:Integration',
+        )
+    FUNCTIONAL_TESTING = FunctionalTesting(
+        bases=(FIXTURE,),
+        name='example.conference:Functional',
+        )
+
+This extends a base layer that sets up Plone, and adds some custom layer
+setup for our package,
+in this case installing the ``example.conference`` extension profile.
+We could also perform additional setup here, such as creating some initial
+content or setting the default roles for the test run.
+See the *plone.app.testing* documentation for more details.
+
+To use the layer, we can create a new test case based on ``unittest.TestCase``
+that uses our layer. We’ll add one to ``test_program.py`` first.
+(In the code snippet below, the unit test we created previously has been
+removed to conserve space.)::
+
+    import unittest2 as unittest
+
+    from zope.component import createObject
+    from zope.component import queryUtility
+
+    from plone.app.testing import TEST_USER_ID
+    from plone.app.testing import setRoles
+
+    from plone.dexterity.interfaces import IDexterityFTI
+
+    from example.conference.program import IProgram
+    from example.conference.testing import INTEGRATION_TESTING
+
+    class TestProgramIntegration(unittest.TestCase):
+
+        layer = INTEGRATION_TESTING
+
+        def setUp(self):
+            self.portal = self.layer['portal']
+            setRoles(self.portal, TEST_USER_ID, ['Manager'])
+            self.portal.invokeFactory('Folder', 'test-folder')
+            setRoles(self.portal, TEST_USER_ID, ['Member'])
+            self.folder = self.portal['test-folder']
+
+        def test_adding(self):
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+            self.assertTrue(IProgram.providedBy(p1))
+
+        def test_fti(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.program')
+            self.assertNotEquals(None, fti)
+
+        def test_schema(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.program')
+            schema = fti.lookupSchema()
+            self.assertEqual(IProgram, schema)
+
+        def test_factory(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.program')
+            factory = fti.factory
+            new_object = createObject(factory)
+            self.assertTrue(IProgram.providedBy(new_object))
+
+        def test_view(self):
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+            view = p1.restrictedTraverse('@@view')
+            sessions = view.sessions()
+            self.assertEqual(0, len(sessions))
+
+        def test_start_end_dates_indexed(self):
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+            p1.start = datetime.datetime(2009, 1, 1, 14, 01)
+            p1.end = datetime.datetime(2009, 1, 2, 15, 02)
+            p1.reindexObject()
+
+            result = self.portal.portal_catalog(path='/'.join(p1.getPhysicalPath()))
+
+            self.assertEqual(1, len(result))
+            self.assertEqual(result[0].start, DateTime('2009-01-01T14:01:00'))
+            self.assertEqual(result[0].end, DateTime('2009-01-02T15:02:00'))
+
+        def test_tracks_indexed(self):
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+            p1.tracks = ['Track 1', 'Track 2']
+            p1.reindexObject()
+
+            result = self.portal.portal_catalog(Subject='Track 2')
+
+            self.assertEqual(1, len(result))
+            self.assertEqual(result[0].getURL(), p1.absolute_url())
+
+    def test_suite():
+        return unittest.defaultTestLoader.loadTestsFromName(__name__)
+
+This illustrates a basic set of tests that make sense for most content
+types.
+There are many more things we could test
+(for example, we could test the add permissions more thoroughly,
+and we ought to test the ``sessions()`` method on the view with some actual
+content!),
+but even this small set of integration tests tells us that
+our product has installed,
+that the content type is addable,
+that it has the right factory, and
+that instances of the type provide the right schema interface.
+
+There are some important things to note about this test case:
+
+- We extend ``unittest.TestCase``, which means we have access to a full Plone
+  integration test environment.
+  See the `testing tutorial`_ for more details.
+- We set the ``layer`` attribute to our custom layer.
+  This means that all tests in our test case will have the
+  ``example.conference:default`` profile installed.
+- We need to create a test user's member folder as self.folder because
+  ``plone.app.testing`` takes a minimalist approach and no content is available
+  by default.
+- We test that the content is addable (here, as a normal member in
+  their member folder, since that is the default security context for
+  the test – use ``self.setRoles([‘Manager’])`` to get the ``Manager`` role
+  and ``self.portal`` to access the portal root),
+  that the FTI is installed and can be located, and
+  that both the FTI and instances of the type know about the correct type
+  schema.
+- We also test that the view can be looked up and has the correct methods.
+  We’ve not included a fully functional test (e.g. using
+  ``zope.testbrowser``) or any other front-end testing here.
+  If you require those, take a look at the testing tutorial.
+- We also test that our custom indexers are working,
+  by creating an appropriate object and searching for it.
+  Note that we need to reindex the object after we’ve modified it so that
+  the catalog is up to date.
+- The ``defaultTestLoader`` will find this test and load it, just as it
+  found the ``TestProgramUnit`` test case.
+
+To run our tests, we can still do.
+
+.. code-block:: console
+
+    $ ./bin/test example.conference
+
+You should now notice layers being set up and torn down.
+Again, use the ``-t`` option to run a particular test case (or test method)
+only.
+
+The other tests are similar. We have ``tests/test_session.py`` to test
+the ``Session`` type::
+
+    import unittest2 as unittest
+
+    from zope.component import createObject
+    from zope.component import queryUtility
+
+    from plone.app.testing import TEST_USER_ID
+    from plone.app.testing import setRoles
+
+    from plone.dexterity.interfaces import IDexterityFTI
+
+    from example.conference.session import ISession
+    from example.conference.session import possible_tracks
+    from example.conference.testing import INTEGRATION_TESTING
+
+    class TestSessionIntegration(unittest.TestCase):
+
+        layer = INTEGRATION_TESTING
+
+        def setUp(self):
+            self.portal = self.layer['portal']
+            setRoles(self.portal, TEST_USER_ID, ['Manager'])
+            self.portal.invokeFactory('Folder', 'test-folder')
+            setRoles(self.portal, TEST_USER_ID, ['Member'])
+            self.folder = self.portal['test-folder']
+
+        def test_adding(self):
+
+            # We can't add this directly
+            self.assertRaises(ValueError, self.folder.invokeFactory, 'example.conference.session', 'session1')
+
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+
+            p1.invokeFactory('example.conference.session', 'session1')
+            s1 = p1['session1']
+            self.assertTrue(ISession.providedBy(s1))
+
+        def test_fti(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.session')
+            self.assertNotEquals(None, fti)
+
+        def test_schema(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.session')
+            schema = fti.lookupSchema()
+            self.assertEqual(ISession, schema)
+
+        def test_factory(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.session')
+            factory = fti.factory
+            new_object = createObject(factory)
+            self.assertTrue(ISession.providedBy(new_object))
+
+        def test_tracks_vocabulary(self):
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+            p1.tracks = ['T1', 'T2', 'T3']
+
+            p1.invokeFactory('example.conference.session', 'session1')
+            s1 = p1['session1']
+
+            vocab = possible_tracks(s1)
+
+            self.assertEqual(['T1', 'T2', 'T3'], [t.value for t in vocab])
+            self.assertEqual(['T1', 'T2', 'T3'], [t.token for t in vocab])
+
+        def test_catalog_index_metadata(self):
+            self.assertTrue('track' in self.portal.portal_catalog.indexes())
+            self.assertTrue('track' in self.portal.portal_catalog.schema())
+
+        def test_workflow_installed(self):
+            self.folder.invokeFactory('example.conference.program', 'program1')
+            p1 = self.folder['program1']
+
+            p1.invokeFactory('example.conference.session', 'session1')
+            s1 = p1['session1']
+
+            chain = self.portal.portal_workflow.getChainFor(s1)
+            self.assertEqual(('example.conference.session_workflow',), chain)
+
+    def test_suite():
+        return unittest.defaultTestLoader.loadTestsFromName(__name__)
+
+Notice here how we test
+that the ``Session`` type cannot be added directly to a folder, and
+that it can be added inside a program.
+We also add a test for the ``possible_tracks()`` vocabulary method,
+as well as tests for the installation of the ``track`` index and metadata
+column and the custom workflow::
+
+    import unittest2 as unittest
+
+    from zope.component import createObject
+    from zope.component import queryUtility
+
+    from plone.app.testing import TEST_USER_ID
+    from plone.app.testing import setRoles
+
+    from plone.dexterity.interfaces import IDexterityFTI
+
+    from example.conference.presenter import IPresenter
+    from example.conference.testing import INTEGRATION_TESTING
+
+    class TestPresenterIntegration(unittest.TestCase):
+
+        layer = INTEGRATION_TESTING
+
+        def setUp(self):
+            self.portal = self.layer['portal']
+            setRoles(self.portal, TEST_USER_ID, ['Manager'])
+            self.portal.invokeFactory('Folder', 'test-folder')
+            setRoles(self.portal, TEST_USER_ID, ['Member'])
+            self.folder = self.portal['test-folder']
+
+        def test_adding(self):
+            self.folder.invokeFactory('example.conference.presenter', 'presenter1')
+            p1 = self.folder['presenter1']
+            self.assertTrue(IPresenter.providedBy(p1))
+
+        def test_fti(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.presenter')
+            self.assertNotEquals(None, fti)
+
+        def test_schema(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.presenter')
+            schema = fti.lookupSchema()
+            self.assertEqual(IPresenter, schema)
+
+        def test_factory(self):
+            fti = queryUtility(IDexterityFTI, name='example.conference.presenter')
+            factory = fti.factory
+            new_object = createObject(factory)
+            self.assertTrue(IPresenter.providedBy(new_object))
+
+    def test_suite():
+        return unittest.defaultTestLoader.loadTestsFromName(__name__)
+
+Faster tests with Roadrunner
+----------------------------
+
+.. warning::
+    Roadrunner development halted in 2009. The following is only useful if you
+    are using Plone 3.x.
+
+You will have noticed that running unit tests was much quicker than
+running integration tests. That is unfortunate, but to be expected: the
+integration test setup basically requires starting all of Zope and
+configuring a Plone site.
+
+Luckily, there is a tool that we can use to speed things up, and if
+you’ve been following along the tutorial, you already have it in your
+buildout: `Roadrunner`_.
+This is a command that takes the place of ``./bin/instance test`` that
+preloads the Zope environment and allows you to re-run tests much faster.
+
+To run our tests with roadrunner, we would do:
+
+.. code-block:: console
+
+    $ ./bin/roadrunner -s example.conference
+
+This runs the tests once, and then drops to the Roadrunner prompt:
+
+.. code-block:: console
+
+    rr>
+
+Simply hitting enter here, or typing a command like
+``test -s example.conference`` will re-run your tests,
+this time taking much less time.
+
+Roadrunner works best when you are adding and debugging your tests.
+For example, it’s a very quick way to get to a ``pdb`` prompt: just set a
+breakpoint in your test with ``import pdb; pdb.set_trace()`` and re-run
+it in roadrunner.
+You can then step into your test code and the code under test.
+
+Roadrunner should pick up changes to your tests automatically. However,
+it may not pick up changes to your application code, grokked components
+or ZCML files. If it doesn’t, you’ll need to exit the Roadrunner prompt
+and restart.
+
+.. _collective.testcaselayer: http://pypi.python.org/pypi/collective.testcaselayer
+.. _plone.app.testing: http://pypi.python.org/pypi/plone.app.testing
+.. _Roadrunner: http://pypi.python.org/pypi/roadrunner
+.. _testing tutorial: /external/plone.app.testing/docs/source/index
diff --git a/docs/grok/testing/mock-testing.rst b/docs/grok/testing/mock-testing.rst
new file mode 100644
index 0000000..9154d06
--- /dev/null
+++ b/docs/grok/testing/mock-testing.rst
@@ -0,0 +1,257 @@
+Mock testing
+=============
+
+**Using a mock objects framework to write mock based tests**
+
+Mock testing is a powerful approach to testing that lets you make
+assertions about how the code under test is interacting with other
+system modules. It is often useful when the code you want to test is
+performing operations that cannot be easily asserted by looking at its
+return value.
+
+In our example product, we have an event handler like this:
+
+::
+
+    @grok.subscribe(IPresenter, IObjectAddedEvent)
+    def notifyUser(presenter, event):
+        acl_users = getToolByName(presenter, 'acl_users')
+        mail_host = getToolByName(presenter, 'MailHost')
+        portal_url = getToolByName(presenter, 'portal_url')
+
+        portal = portal_url.getPortalObject()
+        sender = portal.getProperty('email_from_address')
+
+        if not sender:
+            return
+
+        subject = "Is this you?"
+        message = "A presenter called %s was added here %s" % (presenter.title, presenter.absolute_url(),)
+
+        matching_users = acl_users.searchUsers(fullname=presenter.title)
+        for user_info in matching_users:
+            email = user_info.get('email', None)
+            if email is not None:
+                mail_host.secureSend(message, email, sender, subject)
+
+If we want to test that this sends the right kind of email message,
+we’ll need to somehow inspect what is passed to *secureSend()*. The only
+way to do that is to replace the *MailHost*object that is acquired when
+*getToolByName(presenter, ‘MailHost’)* is called, with something that
+performs that assertion for us.
+
+If we wanted to write an integration test, we could use *PloneTestCase*
+to execute this event handler, e.g. by firing the event manually, and
+temporarily replace the *MailHost* object in the root of the test case
+portal (*self.portal*) with a dummy that raised an exception if the
+wrong value was passed.
+
+However, such integration tests can get pretty heavy handed, and
+sometimes it is difficult to ensure that it works in all cases. In the
+approach outlined above, for example, we would miss cases where no mail
+was sent at all.
+
+Enter mock objects. A mock object is a “test double” that knows how and
+when it ought to be called. The typical approach is as follows:
+
+-  Create a mock object.
+-  The mock object starts out in “record” mode.
+-  Record the operations that you expect the code under test perform on
+   the mock object. You can make assertions about the type and value of
+   arguments, the sequence of calls, or the number of times a method is
+   called or an attribute is retrieved or set.
+-  You can also give your mock objects behaviour, e.g. by specifying
+   return values or exceptions to be raised in certain cases.
+-  Initialise the code under test and/or the environment it runs in so
+   that it will use the mock object rather than the real object.
+   Sometimes this involves temporarily “patching” the environment.
+-  Put the mock framework into “replay” mode.
+-  Run the code under test.
+-  Apply any assertions as you normally would.
+-  The mock framework will raise exceptions if the mock objects are
+   called incorrectly (e.g. with the wrong arguments, or too many times)
+   or insufficiently (e.g. an expected method was not called).
+
+There are several Python mock object frameworks. Dexterity itself users
+a powerful one called `mocker`_, via the `plone.mocktestcase`_
+integration package. You are encouraged to read the documentation for
+those two packages to better understand how mock testing works, and what
+options are available.
+
+.. note::
+
+    Take a look at the tests in *plone.dexterity* if you’re looking for more
+    examples of mock tests using *plone.mocktestcase*.
+
+To use the mock testing framework, we first need to depend on
+*plone.mocktestcase*. As usual, we add it to *setup.py* and re-run
+buildout.
+
+::
+
+          install_requires=[
+              ...
+              'plone.mocktestcase',
+          ],
+
+As an example test case, consider the following class in
+*test\_presenter.py*:
+
+::
+
+    import unittest
+
+    ...
+
+    from plone.mocktestcase import MockTestCase
+    from zope.app.container.contained import ObjectAddedEvent
+    from example.conference.presenter import notifyUser
+
+    class TestPresenterUnit(MockTestCase):
+
+        def test_notify_user(self):
+
+            # dummy presenter
+            presenter = self.create_dummy(
+                    __parent__=None,
+                    __name__=None,
+                    title="Jim",
+                    absolute_url = lambda: 'http://example.org/presenter',
+                )
+
+            # dummy event
+            event = ObjectAddedEvent(presenter)
+
+            # search result for acl_users
+            user_info = [{'email': 'jim@example.org', 'id': 'jim'}]
+
+            # email data
+            message = "A presenter called Jim was added here http://example.org/presenter"
+            email = "jim@example.org"
+            sender = "test@example.org"
+            subject = "Is this you?"
+
+            # mock tools/portal
+
+            portal_mock = self.mocker.mock()
+            self.expect(portal_mock.getProperty('email_from_address')).result('test@example.org')
+
+            portal_url_mock = self.mocker.mock()
+            self.mock_tool(portal_url_mock, 'portal_url')
+            self.expect(portal_url_mock.getPortalObject()).result(portal_mock)
+
+            acl_users_mock = self.mocker.mock()
+            self.mock_tool(acl_users_mock, 'acl_users')
+            self.expect(acl_users_mock.searchUsers(fullname='Jim')).result(user_info)
+
+            mail_host_mock = self.mocker.mock()
+            self.mock_tool(mail_host_mock, 'MailHost')
+            self.expect(mail_host_mock.secureSend(message, email, sender, subject))
+
+
+            # put mock framework into replay mode
+            self.replay()
+
+            # call the method under test
+            notifyUser(presenter, event)
+
+            # we could make additional assertions here, e.g. if the function
+            # returned something. The mock framework will verify the assertions
+            # about expected call sequences.
+
+    ...
+
+    def test_suite():
+        return unittest.defaultTestLoader.loadTestsFromName(__name__)
+
+Note that the other tests in this module have been removed for the sake
+of brevity.
+
+If you are not familiar with mock testing, it may take a bit of time to
+get your head around what’s going on here. Let’s run though the test:
+
+-  First, we create a dummy presenter object. This is *not* a mock
+   object, it’s just a class with the required minimum set of
+   attributes, created using the *create\_dummy()* helper method from
+   the *MockTestCase* base class. We use this type of dummy because we
+   are not interested in making any assertions on the *presenter*
+   object: it is used as an “input” only.
+-  Next, we create a dummy event. Here we have opted to use a standard
+   implementation from *zope.app.container*.
+-  We then define a few variables that we will use in the various
+   assertions and mock return values: the user data that will form our
+   dummy user search results, and the email data passed to the mail
+   host.
+-  Next, we create mocks for each of the tools that our code needs to
+   look up. For each, we use the *expect()* method from *MockTestCase*
+   to make some assertions. For example, we expect that
+   *getPortalObject()* will be called (once) on the *portal\_url* tool,
+   and it should return another mock object, the *portal\_mock*. On
+   this, we expect that *getProperty()* is called with an argument equal
+   to *“email\_from\_address”*. The mock will then return
+   *“test@example.org”*. Take a look at the *mocker* and
+   *plone.mocktestcase* documentation to see the various other types of
+   assertions you can make.
+-  The most important mock assertion is the line
+   *self.expect(mail\_host\_mock.secureSend(message, email, sender,
+   subject))*. This asserts that the *secureSend()* method gets called
+   with the required message, recipient address, sender address and
+   subject, exactly once.
+-  We then put the mock into replay mode, using *self.replay()*. Up
+   until this point, any calls on our mock objects have been to record
+   expectations and specify behaviour. From now on, any call will count
+   towards verifying those expectations.
+-  Finally, we call the code under test with our dummy presenter and
+   event.
+-  In this case, we don’t have any “normal” assertions, although the
+   usual unit test assertion methods are all available if you need them,
+   e.g. to test the return value of the method under test. The
+   assertions in this case are all coming from the mock objects. The
+   *tearDown()* method of the *MockTestCase* class will in fact check
+   that all the various methods were called exactly as expected.
+
+To run these tests, use the normal test runner, e.g.:
+
+::
+
+    $ ./bin/test example.conference -t TestPresenterMock
+
+Note that mock tests are typically as fast as unit tests, so there is
+typically no need for something like roadrunner.
+
+Mock testing caveats
+--------------------
+
+Mock testing is a somewhat controversial topic. On the one hand, it
+allows you to write tests for things that are often difficult to test,
+and a mock framework can - once you are familiar with it - make child’s
+play out of the often laborious task of creating reliable test doubles.
+On the other hand, mock based tests are inevitably tied to the
+implementation of the code under test, and sometimes this coupling can
+be too tight for the test to be meaningful. Using mock objects normally
+also means that you need a very good understanding of the external APIs
+you are mocking. Otherwise, your mock may not be a good representation
+of how these systems would behave in the real world. Much has been
+written on this, for example by `Martin Fowler`_.
+
+As always, it pays to be pragmatic. If you find that you can’t write a
+mock based test without reading every line of code in the method under
+test and reverse engineering it for the mocks, then an integration test
+may be more appropriate. In fact, it is prudent to have at least some
+integration tests in any case, since you can never be 100% sure your
+mocks are valid representations of the real objects they are mocking.
+
+On the other hand, if the code you are testing is using well-defined
+APIs in a relatively predictable manner, mock objects can be a valuable
+way to test the “side effects” of your code, and a helpful tool to
+simulate things like exceptions and input values that may be difficult
+to produce otherwise.
+
+Remember also that mock objects are not necessarily an “all or nothing”
+proposition. You can use simple dummy objects or “real” instances in
+most cases, and augment them with a few mock objects for those
+difficult-to-replicate test cases.
+
+.. _Martin Fowler: http://www.martinfowler.com/articles/mocksArentStubs.html
+.. _mocker: http://labix.org/mocker
+.. _plone.mocktestcase: http://pypi.python.org/pypi/plone.mocktestcase
diff --git a/docs/grok/testing/unit-tests.rst b/docs/grok/testing/unit-tests.rst
new file mode 100644
index 0000000..206364f
--- /dev/null
+++ b/docs/grok/testing/unit-tests.rst
@@ -0,0 +1,161 @@
+Unit tests
+============
+
+**Writing simple unit tests**
+
+As all good developers know, automated tests are very important!
+If you are not comfortable with automated testing and test-driven
+development, you should read the `Plone testing tutorial`_.
+In this section, we will assume you are familiar with Plone testing basics,
+and show some tests that are particularly relevant to our example types.
+
+Firstly, we will add a few unit tests.
+Recall that unit tests are simple tests for a particular function or method,
+and do not depend on an outside environment being set up.
+As a rule of thumb, if something can be tested with a simple unit test, do
+so, because:
+
+- Unit tests are quick to write.
+- They are also quick to run.
+- Because they are more isolated, you are less likely to have tests
+  that pass or fail due to incorrect assumptions or by luck.
+- You can usually test things more thoroughly and exhaustively with
+  unit tests than with (slower) integration tests.
+
+You’ll typically supplement a larger number of unit tests with a smaller
+number of integration tests, to ensure that your application’s correctly
+wired up and working.
+
+That’s the theory, at least. When we’re writing content types, we’re
+often more interested in integration test, because a type schema and FTI
+are more like configuration of the Plone and Dexterity frameworks than
+imperative programming.
+We can’t “unit test” the type’s schema interface, but we can and should test
+that the correct schema is picked up and used when our type is installed.
+We will often write unit tests (with mock objects, where required) for
+custom event handlers, default value calculation functions and other
+procedural code.
+
+In that spirit, let’s write some unit tests for the default value
+handler and the invariant in ``program.py``.
+We’ll add the directory ``tests``, with an ``__init__.py`` and a file
+``test_program.py`` that looks like this::
+
+    import unittest
+    import datetime
+
+    from example.conference.program import startDefaultValue
+    from example.conference.program import endDefaultValue
+    from example.conference.program import IProgram
+    from example.conference.program import StartBeforeEnd
+
+    class MockProgram(object):
+        pass
+
+    class TestProgramUnit(unittest.TestCase):
+        """Unit test for the Program type
+        """
+
+        def test_start_defaults(self):
+            data = MockProgram()
+            default_value = startDefaultValue(data)
+            today = datetime.datetime.today()
+            delta = default_value - today
+            self.assertEqual(6, delta.days)
+
+        def test_end_default(self):
+            data = MockProgram()
+            default_value = endDefaultValue(data)
+            today = datetime.datetime.today()
+            delta = default_value - today
+            self.assertEqual(9, delta.days)
+
+        def test_validate_invariants_ok(self):
+            data = MockProgram()
+            data.start = datetime.datetime(2009, 1, 1)
+            data.end = datetime.datetime(2009, 1, 2)
+
+            try:
+                IProgram.validateInvariants(data)
+            except:
+                self.fail()
+
+        def test_validate_invariants_fail(self):
+            data = MockProgram()
+            data.start = datetime.datetime(2009, 1, 2)
+            data.end = datetime.datetime(2009, 1, 1)
+
+            try:
+                IProgram.validateInvariants(data)
+                self.fail()
+            except StartBeforeEnd:
+                pass
+
+        def test_validate_invariants_edge(self):
+            data = MockProgram()
+            data.start = datetime.datetime(2009, 1, 2)
+            data.end = datetime.datetime(2009, 1, 2)
+
+            try:
+                IProgram.validateInvariants(data)
+            except:
+                self.fail()
+
+    def test_suite():
+        return unittest.defaultTestLoader.loadTestsFromName(__name__)
+
+This is a simple test using the Python standard library’s ``unittest``
+module. There are a few things to note here:
+
+- We have created a dummy class to simulate a ``Program`` instance.
+  It doesn’t contain anything at all, but we set some attributes onto it
+  for certain tests.
+  This is a very simple way to do mocks.
+  There are much more sophisticated mock testing approaches, but starting
+  simple is good.
+- Each test is self contained.
+  There is no test layer or test case setup/tear-down.
+- We use the ``defaultTestLoader`` to load all test classes in the module
+  automatically.
+  The test runner will look for modules in the ``tests``
+  package with names starting with ``test`` that have a ``test_suite()``
+  method to get test suites.
+
+To run the tests, we can do:
+
+.. code-block:: console
+
+    $ ./bin/text example.conference
+
+Hopefully it should show five passing tests.
+
+.. note::
+
+    This uses the testrunner configured via the ``[test]`` part in our
+    ``buildout.cfg``.
+    This provides better test reporting and a few more advanced options
+    (like output colouring).
+    We could also use the built-in test runner in the ``instance`` script,
+    e.g. with ``./bin/instance test -s example.conference``.
+
+To run just this test suite, we can do:
+
+.. code-block:: console
+
+    $ ./bin/test example.conference -t TestProgramUnit
+
+This is useful when we have other test suites that we don’t want to run,
+e.g. because they are integration tests and require lengthy setup.
+
+To get a report about test coverage, we can run:
+
+.. code-block:: console
+
+    $ ./bin/test example.conference --coverage
+
+Test coverage reporting is important. If you have a module with low test
+coverage, it means that your tests do not cover many of the code paths
+in those modules, and so are less useful for detecting bugs or guarding
+against future problems. Aim for 100%.
+
+.. _Plone testing tutorial: /external/plone.app.testing/docs/source/index
diff --git a/docs/index.rst b/docs/index.rst
index b16f85e..3d41420 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -23,3 +23,4 @@ Appendixes
 
    install.rst
    behaviors/index.rst
+   grok/index.rst
diff --git a/docs/install.rst b/docs/install.rst
index 3c447ec..bd19f9d 100644
--- a/docs/install.rst
+++ b/docs/install.rst
@@ -16,9 +16,9 @@ Installing Dexterity on Plone 4.3
 Note: Plone 4.3 is the latest release of Plone. Dexterity is included
 with Plone 4.3, but must be activated via the "Add-ons" configlet in site setup.
 
-**If you wish to follow the examples in this manual, you must do one extra
+**If you are using grok-style configuration, you must do one extra
 installation step:** activate the `grok` extra for Dexterity.
-To do so, add the following line to the `eggs` section of yor buildout::
+To do so, add the following line to the `eggs` section of your buildout::
 
     eggs =
         Plone
diff --git a/docs/model-driven-types.rst b/docs/model-driven-types.rst
index aecaacd..57a5dd4 100644
--- a/docs/model-driven-types.rst
+++ b/docs/model-driven-types.rst
@@ -32,7 +32,7 @@ Setting the field model
 
 Look in ``example.conference/example/conference/models/presenter.xml`` for a bare model file created by addcontent. Let's elaborate it:
 
-.. code-block:: html
+.. code-block:: xml
 
     <model xmlns:form="http://namespaces.plone.org/supermodel/form"
            xmlns:security="http://namespaces.plone.org/supermodel/security"
@@ -68,7 +68,6 @@ That's all we need! To see why, look in the generated file ``presenter.py``:
 .. code-block:: python
 
     from example.conference import MessageFactory as _
-    from five import grok
     from plone.supermodel import model
     from zope import schema
 
@@ -81,7 +80,7 @@ That's all we need! To see why, look in the generated file ``presenter.py``:
         model.load("models/presenter.xml")
 
 
-Note the model.load directive. We'd deleted that when we created schema-driven field sets. Now, we leave it in to automatically load our model file.
+Note the ``model.load`` directive. We'd deleted that when we created schema-driven field sets. Now, we leave it in to automatically load our model file.
 
 Setting Factory Type Information
 --------------------------------
@@ -92,7 +91,7 @@ type.
 Look in the ``types.xml`` file in your packages
 ``example/conference/profiles/default`` directory. It should now contain:
 
-.. code-block:: html
+.. code-block:: xml
 
     <object name="portal_types">
      <object name="example.conference.program" meta_type="Dexterity FTI" />
@@ -103,7 +102,7 @@ Look in the ``types.xml`` file in your packages
 
 For the *Presenter* type, we have ``example.conference.presenter.xml``:
 
-.. code-block:: html
+.. code-block:: xml
 
     <?xml version="1.0"?>
     <object name="example.conference.presenter"
diff --git a/docs/prerequisite.rst b/docs/prerequisite.rst
index 2c11ac8..d11342b 100644
--- a/docs/prerequisite.rst
+++ b/docs/prerequisite.rst
@@ -56,11 +56,11 @@ template.
 
     Nothing that we're doing actually requires ZopeSkel or the zopeskel.dexterity skeleton package. It's just a quick way of getting started.
 
-We run the following from the ``src/`` directory::
+We run the following from the ``src/`` directory
 
-.. code-block:: bash
+.. code-block:: console
 
-    $ ../bin/zopeskel dexterity example.conference
+  $ ../bin/zopeskel dexterity example.conference
 
 You may accept all the default suggestions. This will create a directory named
 ``example.conference`` inside ./src.
@@ -71,7 +71,7 @@ the generated setup.py file::
 
           install_requires=[
               ...
-              'plone.app.dexterity [grok]',
+              'plone.app.dexterity',
               ...
           ],
           ...
@@ -81,8 +81,8 @@ the generated setup.py file::
           target = plone
           """,
 
-The addition of `plone.app.dexterity [grok]` to our install requirements
-assures that we'll have dexterity loaded with the `grok` extra. Our example
+The addition of `plone.app.dexterity` to our install requirements
+assures that we'll have dexterity loaded. Our example
 code won't work without it. The specification of `plone` as a
 z3c.autoinclude.plugin entry point ensures that we won't need to separately
 specify our zcml in buildout.
@@ -93,8 +93,6 @@ Now, let's take a look at ``configure.zcml`` in the examples/conference director
 
       <includeDependencies package="." />
 
-      <grok:grok package="." />
-
       <browser:resourceDirectory
         name="example.conference"
         directory="resources" />
@@ -114,10 +112,6 @@ packages listed under ``install_requires`` in ``setup.py``.
 The alternative would be to manually add a line like
 ``<include package="plone.app.dexterity" />`` for each dependency.
 
-Next, we *grok* the package to construct and register schemata, views,
-forms and so on based on conventions used in the various files we will
-add throughout this tutorial.
-
 The ``browser.resourceDirectory`` command creates a directory for static resources that we want to make available through the web.
 
 Finally, we register a GenericSetup profile to make the type
diff --git a/docs/reference/dexterity-xml.rst b/docs/reference/dexterity-xml.rst
index 1b59376..06b844e 100644
--- a/docs/reference/dexterity-xml.rst
+++ b/docs/reference/dexterity-xml.rst
@@ -25,6 +25,12 @@ incorporated into a Python package. That's typically done with code like::
 
         form.model("models/example_type.xml")
 
+or::
+
+    from plone.supermodel import xmlSchema
+
+    IExampleType = xmlSchema("models/example_type.xml")
+
 XML models in a package may be directly edited. (Dexterity will probably also
 include a TTW XML-model editor at some point in the future.)
 
@@ -248,7 +254,7 @@ Dynamic Defaults
 
 To set a dynamic default for a field, use a ``defaultFactory`` tag to
 give a fully qualified name for a callable. The defaultFactory callable must
-provide either plone.supermodel.IDefaultFactory or
+provide either plone.supermodel.interfaces.IDefaultFactory or
 zope.schema.interfaces.IContextAwareDefaultFactory.
 
 Example::
@@ -299,6 +305,7 @@ Sample Python for the validator factory::
             super(TestValidator, self).validate(value)
             raise Invalid("Test")
 
+.. _dexterity-xml-security:
 
 supermodel/security attributes
 ------------------------------
diff --git a/docs/reference/fields.rst b/docs/reference/fields.rst
index 0454d29..4575e7a 100644
--- a/docs/reference/fields.rst
+++ b/docs/reference/fields.rst
@@ -1,4 +1,4 @@
-Fields 
+Fields
 ========
 
 **The standard schema fields**
@@ -19,64 +19,64 @@ various field types.
 Refer to the table below to see what properties a particular interface
 implies.
 
-=========== =================== ========== =================================================== 
-Interface   Property            Type       Description                                         
-=========== =================== ========== =================================================== 
-IField      title               unicode    The title of the field. Used in the widget.         
-\           description         unicode    A description for the field. Used in the widget.    
-\           required            bool       Whether or not the field is required. Used for      
-                                           form validation. The default is ``True``.           
-\           readonly            bool       Whether or not the field is read-only. Default      
-                                           is ``False``.                                       
-\           default                        The default value for the field. Used in forms      
-                                           and sometimes as a fallback value. Must be a        
-                                           valid value for the field if set. The default       
-                                           is ``None``.                                        
-\           missing_value                  A value that represents "this field is not set".    
-                                           Used by form validation. Defaults to ``None``. For  
-                                           lists and tuples, it is sometimes useful to set     
-                                           this to an empty list/tuple.                        
-IMinMaxLen  min_length          int        The minimum required length. Used for string        
-                                           fields. Default is ``0``.                           
-\           max_length          int        The maximum allowed length. Used for string         
-                                           fields. Default is ``None`` (no check).             
-IMinMax     min                            The minimum allowed value. Must be a valid value    
-                                           for the field, e.g. for an ``Int`` field this       
-                                           should be an integer. Default is ``None`` (no       
-                                           check).                                             
-\           max                            The maximum allowed value. Must be a valid value    
-                                           for the field, e.g. for an Int field this should    
-                                           be an integer. Default is ``None`` (no check).      
-ICollection value_type                     Another ``Field`` instance that describes the             
-                                           allowable values in a list, tuple or other          
-                                           collection. Must be set for any collection field.   
-                                           One common usage is to set this to a ``Choice``,    
-                                           to model a multi-selection field with a vocabulary. 
-\           unique              bool       Whether or not values in the collection must be     
-                                           unique. Usually not set directly – use a ``Set``    
-                                           or ``Frozenset`` to guarantee uniqueness in an      
-                                           efficient way.                                      
-IDict       key_type                       Another ``Field`` instance that describes the       
-                                           allowable keys in a dictionary. Similar to the      
-                                           ``value_type`` of a collection. Must be set.        
-\           value_type                     Another ``Field`` instance that describes the       
-                                           allowable values in a dictionary. Similar to the    
-                                           ``value_type`` of a collection. Must be set.        
-IObject     schema              Interface  An interface that must be provided by any object    
-                                           stored in this field.                               
-IRichText   default_mime_type   str        Default MIME type for the input text of a rich      
-                                           text field. Defaults to ``text/html``.              
-\           output_mime_type    str        Default output MIME type for the transformed        
-                                           value of a rich text field. Defaults to             
-                                           ``text/x-html-safe``. There must be a               
-                                           transformation chain in the ``portal_transforms``   
-                                           tool that can transform from the input value to     
-                                           the ``output`` value for the output property of     
-                                           the ``RichValue`` object to contain a value.        
-\           allowed_mime_types  tuple      A list of allowed input MIME types. The default     
-                                           is ``None``, in which case the site-wide settings   
-                                           (from the ``Markup`` control panel) will be used.   
-=========== =================== ========== =================================================== 
+=========== =================== ========== ===================================================
+Interface   Property            Type       Description
+=========== =================== ========== ===================================================
+IField      title               unicode    The title of the field. Used in the widget.
+\           description         unicode    A description for the field. Used in the widget.
+\           required            bool       Whether or not the field is required. Used for
+                                           form validation. The default is ``True``.
+\           readonly            bool       Whether or not the field is read-only. Default
+                                           is ``False``.
+\           default                        The default value for the field. Used in forms
+                                           and sometimes as a fallback value. Must be a
+                                           valid value for the field if set. The default
+                                           is ``None``.
+\           missing_value                  A value that represents "this field is not set".
+                                           Used by form validation. Defaults to ``None``. For
+                                           lists and tuples, it is sometimes useful to set
+                                           this to an empty list/tuple.
+IMinMaxLen  min_length          int        The minimum required length. Used for string
+                                           fields. Default is ``0``.
+\           max_length          int        The maximum allowed length. Used for string
+                                           fields. Default is ``None`` (no check).
+IMinMax     min                            The minimum allowed value. Must be a valid value
+                                           for the field, e.g. for an ``Int`` field this
+                                           should be an integer. Default is ``None`` (no
+                                           check).
+\           max                            The maximum allowed value. Must be a valid value
+                                           for the field, e.g. for an Int field this should
+                                           be an integer. Default is ``None`` (no check).
+ICollection value_type                     Another ``Field`` instance that describes the
+                                           allowable values in a list, tuple or other
+                                           collection. Must be set for any collection field.
+                                           One common usage is to set this to a ``Choice``,
+                                           to model a multi-selection field with a vocabulary.
+\           unique              bool       Whether or not values in the collection must be
+                                           unique. Usually not set directly – use a ``Set``
+                                           or ``Frozenset`` to guarantee uniqueness in an
+                                           efficient way.
+IDict       key_type                       Another ``Field`` instance that describes the
+                                           allowable keys in a dictionary. Similar to the
+                                           ``value_type`` of a collection. Must be set.
+\           value_type                     Another ``Field`` instance that describes the
+                                           allowable values in a dictionary. Similar to the
+                                           ``value_type`` of a collection. Must be set.
+IObject     schema              Interface  An interface that must be provided by any object
+                                           stored in this field.
+IRichText   default_mime_type   str        Default MIME type for the input text of a rich
+                                           text field. Defaults to ``text/html``.
+\           output_mime_type    str        Default output MIME type for the transformed
+                                           value of a rich text field. Defaults to
+                                           ``text/x-html-safe``. There must be a
+                                           transformation chain in the ``portal_transforms``
+                                           tool that can transform from the input value to
+                                           the ``output`` value for the output property of
+                                           the ``RichValue`` object to contain a value.
+\           allowed_mime_types  tuple      A list of allowed input MIME types. The default
+                                           is ``None``, in which case the site-wide settings
+                                           (from the ``Markup`` control panel) will be used.
+=========== =================== ========== ===================================================
 
 Field types
 -----------
@@ -88,40 +88,40 @@ Fields in zope.schema
 ~~~~~~~~~~~~~~~~~~~~~
 
 ================= ============ ================================================================================= ================================
-Name              Type         Description                                                                       Properties                      
+Name              Type         Description                                                                       Properties
 ================= ============ ================================================================================= ================================
-Choice            N/A          Used to model selection from a vocabulary, which must be supplied.                See `vocabularies`_.            
-                               Often used as the ``value_type`` of a selection field. The value                                                  
-                               type is the value of the terms in the vocabulary.                                                                 
-Bytes             str          Used for binary data.                                                             IField, IMinMaxLen              
-ASCII             str          ASCII text (multi-line).                                                          IField, IMinMaxLen              
-BytesLine         str          A single line of binary data, i.e. a ``Bytes`` with newlines                      IField, IMinMaxLen              
-                               disallowed.                                                                                                       
-ASCIILine         str          A single line of ASCII text.                                                      IField, IMinMaxLen              
-Text              unicode      Unicode text (multi-line). Often used with a WYSIWYG widget,                      IField, IMinMaxLen              
-                               although the default is a text area.                                                                              
-TextLine          unicode      A single line of Unicode text.                                                    IField, IMinMaxLen              
-Bool              bool         ``True`` or ``False``.                                                            IField                          
-Int               int, long    An integer number. Both ints and longs are allowed.                               IField, IMinMax                 
-Float             float        A floating point number.                                                          IField, IMinMax                 
-Tuple             tuple        A tuple (non-mutable).                                                            IField, ICollection, IMinMaxLen 
-List              list         A list.                                                                           IField, ICollection, IMinMaxLen 
-Set               set          A set.                                                                            IField, ICollection, IMinMaxLen 
-Frozenset         frozenset    A frozenset (non-mutable).                                                        IField, ICollection, IMinMaxLen 
-Password          unicode      Stores a simple string, but implies a password widget.                            IField, IMinMaxLen              
-Dict              dict         Stores a dictionary. Both ``key_type`` and ``value_type`` must be set to fields.  IField, IMinMaxLen, IDict       
-Datetime          datetime     Stores a Python ``datetime`` (not a Zope 2 ``DateTime``).                         IField, IMinMax                 
-Date              date         Stores a python ``date``.                                                         IField, IMinMax                 
-Timedelta         timedelta    Stores a python ``timedelta``.                                                    IField, IMinMax                 
-SourceText        unicode      A textfield intended to store source text (e.g. HTML or Python code).             IField, IMinMaxLen              
-Object            N/A          Stores a Python object that conforms to the interface given as the                IField, IObject                 
-                               ``schema``. There is no standard widget for this.                                                                 
-URI               str          A URI (URL) string.                                                               IField, MinMaxLen               
-Id                str          A unique identifier – either a URI or a dotted name.                              IField, IMinMaxLen              
-DottedName        str          A dotted name string.                                                             IField, IMinMaxLen              
-InterfaceField    Interface    A Zope interface.                                                                 IField                          
-Decimal           Decimal      Stores a Python ``Decimal``. Requires version 3.4 or later of                     IField, IMinMax                 
-                               `zope.schema`_. Not available by default in Zope 2.10.                                                            
+Choice            N/A          Used to model selection from a vocabulary, which must be supplied.                See `vocabularies`_.
+                               Often used as the ``value_type`` of a selection field. The value
+                               type is the value of the terms in the vocabulary.
+Bytes             str          Used for binary data.                                                             IField, IMinMaxLen
+ASCII             str          ASCII text (multi-line).                                                          IField, IMinMaxLen
+BytesLine         str          A single line of binary data, i.e. a ``Bytes`` with newlines                      IField, IMinMaxLen
+                               disallowed.
+ASCIILine         str          A single line of ASCII text.                                                      IField, IMinMaxLen
+Text              unicode      Unicode text (multi-line). Often used with a WYSIWYG widget,                      IField, IMinMaxLen
+                               although the default is a text area.
+TextLine          unicode      A single line of Unicode text.                                                    IField, IMinMaxLen
+Bool              bool         ``True`` or ``False``.                                                            IField
+Int               int, long    An integer number. Both ints and longs are allowed.                               IField, IMinMax
+Float             float        A floating point number.                                                          IField, IMinMax
+Tuple             tuple        A tuple (non-mutable).                                                            IField, ICollection, IMinMaxLen
+List              list         A list.                                                                           IField, ICollection, IMinMaxLen
+Set               set          A set.                                                                            IField, ICollection, IMinMaxLen
+Frozenset         frozenset    A frozenset (non-mutable).                                                        IField, ICollection, IMinMaxLen
+Password          unicode      Stores a simple string, but implies a password widget.                            IField, IMinMaxLen
+Dict              dict         Stores a dictionary. Both ``key_type`` and ``value_type`` must be set to fields.  IField, IMinMaxLen, IDict
+Datetime          datetime     Stores a Python ``datetime`` (not a Zope 2 ``DateTime``).                         IField, IMinMax
+Date              date         Stores a python ``date``.                                                         IField, IMinMax
+Timedelta         timedelta    Stores a python ``timedelta``.                                                    IField, IMinMax
+SourceText        unicode      A textfield intended to store source text (e.g. HTML or Python code).             IField, IMinMaxLen
+Object            N/A          Stores a Python object that conforms to the interface given as the                IField, IObject
+                               ``schema``. There is no standard widget for this.
+URI               str          A URI (URL) string.                                                               IField, MinMaxLen
+Id                str          A unique identifier – either a URI or a dotted name.                              IField, IMinMaxLen
+DottedName        str          A dotted name string.                                                             IField, IMinMaxLen
+InterfaceField    Interface    A Zope interface.                                                                 IField
+Decimal           Decimal      Stores a Python ``Decimal``. Requires version 3.4 or later of                     IField, IMinMax
+                               `zope.schema`_. Not available by default in Zope 2.10.
 ================= ============ ================================================================================= ================================
 
 Fields in ``plone.namedfile.field``
@@ -133,14 +133,14 @@ details.
 =============== =============== ================================================================================= ==========
 Name            Type            Description                                                                       Properties
 =============== =============== ================================================================================= ==========
-NamedFile       NamedFile       A binary uploaded file. Normally used with the widget from                        IField    
-                                `plone.formwidget.namedfile`_.                                                              
-NamedImage      NamedImage      A binary uploaded image. Normally used with the widget from                       IField    
-                                `plone.formwidget.namedfile`_.                                                              
-NamedBlobFile   NamedBlobFile   A binary uploaded file stored as a ZODB BLOB. Requires the ``[blobs]`` extra to   IField    
-                                `plone.namedfile`_. Otherwise identical to ``NamedFile``.                                   
-NamedBlobImage  NamedBlobImage  A binary uploaded image stored as a ZODB BLOB. Requires the ``[blobs]`` extra to  IField    
-                                `plone.namedfile`_. Otherwise identical to ``NamedImage``.                                  
+NamedFile       NamedFile       A binary uploaded file. Normally used with the widget from                        IField
+                                `plone.formwidget.namedfile`_.
+NamedImage      NamedImage      A binary uploaded image. Normally used with the widget from                       IField
+                                `plone.formwidget.namedfile`_.
+NamedBlobFile   NamedBlobFile   A binary uploaded file stored as a ZODB BLOB. Requires the ``[blobs]`` extra to   IField
+                                `plone.namedfile`_. Otherwise identical to ``NamedFile``.
+NamedBlobImage  NamedBlobImage  A binary uploaded image stored as a ZODB BLOB. Requires the ``[blobs]`` extra to  IField
+                                `plone.namedfile`_. Otherwise identical to ``NamedImage``.
 =============== =============== ================================================================================= ==========
 
 Fields in ``z3c.relationfield.schema``
@@ -149,10 +149,10 @@ Fields in ``z3c.relationfield.schema``
 See `z3c.relationfield`_ for more details.
 
 ================= ================ ================================================================ ===============
-Name              Type             Description                                                      Properties     
+Name              Type             Description                                                      Properties
 ================= ================ ================================================================ ===============
-Relation          RelationValue    Stores a single ``RelationValue``.                               IField      
-RelationList      list             A ``List`` field that defaults to ``Relation`` as the value type See ``List`` 
+Relation          RelationValue    Stores a single ``RelationValue``.                               IField
+RelationList      list             A ``List`` field that defaults to ``Relation`` as the value type See ``List``
 RelationChoice    RelationValue    A ``Choice`` field intended to store ``RelationValue``’s         See ``Choice``
 ================= ================ ================================================================ ===============
 
@@ -162,10 +162,10 @@ Fields in `plone.app.textfield`_
 See `plone.app.textfield`_  for more details.
 
 ========= ============== ====================================================================================== ==================
-Name      Type           Description                                                                            Properties        
+Name      Type           Description                                                                            Properties
 ========= ============== ====================================================================================== ==================
-RichText  RichTextValue  Stores a ``RichTextValue``, which encapsulates a raw text value, the source MIME type, IField, IRichText 
-                         and a cached copy of the raw text transformed to the default output MIME type.                           
+RichText  RichTextValue  Stores a ``RichTextValue``, which encapsulates a raw text value, the source MIME type, IField, IRichText
+                         and a cached copy of the raw text transformed to the default output MIME type.
 ========= ============== ====================================================================================== ==================
 
 .. _creating schemata: ../schema-driven-types.html#the-schema
diff --git a/docs/reference/form-schema-hints.rst b/docs/reference/form-schema-hints.rst
index 58e0886..557771a 100644
--- a/docs/reference/form-schema-hints.rst
+++ b/docs/reference/form-schema-hints.rst
@@ -1,4 +1,4 @@
-Form schema hints 
+Form schema hints
 ==================
 
 **Directives which can be used to configure forms from schemata**
@@ -8,24 +8,23 @@ Dexterity uses the `plone.autoform`_ package to configure its
 annotated with “form hints”, which are used to configure the form.
 
 The easiest way to apply form hints in Python code is to use the
-directives from `plone.directives.form`_ and
-`plone.directives.dexterity`_. These directives are used when the
-package is “grokked” (via the *<grok:grok package=“.” />*ZCML directive)
-to apply the form hints to the interface where they are found. For this
-process to work, the schema must derive from
-*plone.directives.form.Schema*. Directives can be placed anywhere in the
-class body. By convention they are kept next to the fields they apply
-to.
+directives from `plone.autoform` and `plone.supermodel`.
+For the directives to work, the schema
+must derive from *plone.supermodel.model.Schema*. Directives can be
+placed anywhere in the class body. By convention they are kept next to
+the fields they apply to.
 
 For example, here is a schema that omits a field:
 
-::
+.. code-block:: python
 
-    from plone.directives import form
+    from plone.autoform import directives as form
+    from plone.supermodel import model
     from zope import schema
 
-    class ISampleSchema(form.Schema):
-        
+
+    class ISampleSchema(model.Schema):
+
         title = schema.TextLine(title=u"Title")
 
         form.omitted('additionalInfo')
@@ -38,8 +37,7 @@ directive can be used zero or more times.
 Form directives
 ---------------
 
-The form directives in the *plone.directives.form* package are shown
-below.
+These form directives are included in the *plone.autoform.directives* module:
 
 +-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | Name            | Description                                                                                                                                                                                                                                                                                                                                  |
@@ -54,6 +52,10 @@ below.
 +-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | order\_after    | The inverse of order\_before(), putting a field after another. Passing “\*” will put the field at the end of the form.                                                                                                                                                                                                                       |
 +-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+
+These form directives are included in the *plone.supermodel.directives* module:
+
++-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | primary         | Designate a given field as the primary field in the schema. This is not used for form rendering, but is used for WebDAV marshaling of the content object.                                                                                                                                                                                    |
 +-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | fieldset        | Creates a fieldset (rendered in Plone as a tab on the edit form).                                                                                                                                                                                                                                                                            |
@@ -61,18 +63,20 @@ below.
 
 The code sample below illustrates each of these directives:
 
-::
+.. code-block:: python
 
-    from plone.directives import form
-    from zope import schema
+    from plone.autoform import directives as form
+    from plone.supermodel import model
     from plone.app.z3cform.wysiwyg import WysiwygFieldWidget
+    from zope import schema
 
-    class ISampleSchema(form.Schema):
+
+    class ISampleSchema(model.Schema):
 
         # A fieldset with id 'extra' and label 'Extra information' containing
         # the 'footer' and 'dummy' fields. The label can be omitted if the
         # fieldset has already been defined.
-        
+
         form.fieldset('extra',
                 label=u"Extra information",
                 fields=['footer', 'dummy']
@@ -80,9 +84,9 @@ The code sample below illustrates each of these directives:
 
         # Here a widget is specified as a dotted name.
         # The body field is also designated as the priamry field for this schema
-        
+
         form.widget(body='plone.app.z3cform.wysiwyg.WysiwygFieldWidget')
-        form.primary('body')
+        model.primary('body')
         body = schema.Text(
                 title=u"Body text",
                 required=False,
@@ -90,28 +94,28 @@ The code sample below illustrates each of these directives:
             )
 
         # The widget can also be specified as an object
-        
+
         form.widget(footer=WysiwygFieldWidget)
         footer = schema.Text(
                 title=u"Footer text",
                 required=False
             )
-        
+
         # An omitted field. Use form.omitted('a', 'b', 'c') to omit several fields
-            
+
         form.omitted('dummy')
         dummy = schema.Text(
                 title=u"Dummy"
             )
-        
+
         # A field in 'hidden' mode
-        
+
         form.mode(secret='hidden')
         secret = schema.TextLine(
                 title=u"Secret",
                 default=u"Secret stuff"
             )
-            
+
         # This field is moved before the 'description' field of the standard
         # IBasic behaviour, if this is in use.
 
@@ -123,7 +127,7 @@ The code sample below illustrates each of these directives:
 Security directives
 -------------------
 
-The security directives in the *plone.directives.dexterity* package are
+The security directives in the *plone.autoform.directives* module are
 shown below. Note that these are also used to control reading and
 writing of fields on content instances.
 
@@ -137,18 +141,19 @@ writing of fields on content instances.
 
 The code sample below illustrates each of these directives:
 
-::
+.. code-block:: python
 
-    from plone.directives import form, dexterity
+    from plone.autoform import directives as form
+    from plone.supermodel import model
     from zope import schema
 
-    class ISampleSchema(form.Schema):
+    class ISampleSchema(model.Schema):
 
         # This field requires the 'cmf.ReviewPortalContent' to be read and
         # written
-        
-        dexterity.read_permission(reviewNotes='cmf.ReviewPortalContent')
-        dexterity.write_permission(reviewNotes='cmf.ReviewPortalContent')
+
+        form.read_permission(reviewNotes='cmf.ReviewPortalContent')
+        form.write_permission(reviewNotes='cmf.ReviewPortalContent')
         reviewNotes = schema.Text(
                 title=u"Review notes",
                 required=False,
@@ -156,5 +161,3 @@ The code sample below illustrates each of these directives:
 
 .. _plone.autoform: http://pypi.python.org/pypi/plone.autoform
 .. _z3c.form: http://docs.zope.org/z3c.form
-.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
-.. _plone.directives.dexterity: http://pypi.python.org/pypi/plone.directives.dexterity
diff --git a/docs/reference/index.rst b/docs/reference/index.rst
index 84e34c6..3c47af8 100644
--- a/docs/reference/index.rst
+++ b/docs/reference/index.rst
@@ -10,7 +10,6 @@ Reference
    widgets.rst
    standard-behaviours.rst
    form-schema-hints.rst
-   value-and-validator-adaptors.rst
    manipulating-content-objects.rst
    dexterity-xml.rst
    misc.rst
diff --git a/docs/reference/manipulating-content-objects.rst b/docs/reference/manipulating-content-objects.rst
index f04d601..bc7afa7 100644
--- a/docs/reference/manipulating-content-objects.rst
+++ b/docs/reference/manipulating-content-objects.rst
@@ -1,4 +1,4 @@
-Manipulating content objects 
+Manipulating content objects
 ============================
 
 **Common APIs used to manipulate Dexterity content objects**
diff --git a/docs/reference/misc.rst b/docs/reference/misc.rst
index 23c7496..1c53ab0 100644
--- a/docs/reference/misc.rst
+++ b/docs/reference/misc.rst
@@ -1,4 +1,4 @@
-Miscellaneous 
+Miscellaneous
 ==============
 
 User contributed recipes
diff --git a/docs/reference/standard-behaviours.rst b/docs/reference/standard-behaviours.rst
index 5415597..d0a1205 100644
--- a/docs/reference/standard-behaviours.rst
+++ b/docs/reference/standard-behaviours.rst
@@ -1,4 +1,4 @@
-Standard behaviors 
+Standard behaviors
 ===================
 
 **A list of common behaviors that ship with Dexterity**
@@ -7,22 +7,36 @@ Dexterity ships with several standard behaviors. The following table
 shows the interfaces you can list in the FTI *behaviors* properties and
 the resultant form fields and interfaces.
 
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| Interface                                                | Description                                                                                                                                                   |
-+==========================================================+===============================================================================================================================================================+
-| plone.app.dexterity.behaviors.metadata.IBasic            | Adds the standard title and description fields                                                                                                                |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| plone.app.dexterity.behaviors.metadata.ICategorization   | Adds the *Categorization* fieldset and fields                                                                                                                 |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| plone.app.dexterity.behaviors.metadata.IPublication      | Adds the *Dates* fieldset and fields                                                                                                                          |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| plone.app.dexterity.behaviors.metadata.IOwnership        | Adds the *Ownership* fieldset and fields                                                                                                                      |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| plone.app.dexterity.behaviors.metadata.IDublinCore       | A single behavior that includes all the Dublin Core fields of the behaviors above                                                                             |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| plone.app.content.interfacess.INameFromTitle             | Causes the content item’s name to be calculated from the *title* attribute (which you must ensure is present and correctly set). Not a form field provider.   |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-| plone.app.dexterity.behaviors.metadata.IRelatedItems     | Adds the *Related items* field to the *Categorization* fieldset.                                                                                              |
-+----------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
-
-
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Interface                                                         | Description                                                                                                                                          |
++===================================================================+======================================================================================================================================================+
+| plone.app.dexterity.behaviors.metadata.IBasic                     | Basic metadata: Adds title and description fields.                                                                                                   |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.ICategorization            | Categorization: Adds keywords and language fields.                                                                                                   |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.IPublication               | Date range: Adds effective date and expiration date fields.                                                                                          |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.IOwnership                 | Ownership: Adds creator, contributor, and rights fields.                                                                                             |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.metadata.IDublinCore                | Dublin Core metadata: Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)                           |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.content.interfaces.INameFromTitle                       | Name from title: Automatically generate short URL name for content based on its initial title. Not a form field provider.                            |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.filename.INameFromFileName          | Name from file name: Automatically generate short URL name for content based on its primary field file name                                          |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.layout.navigation.interfaces.INavigationRoot            | Navigation root: Make all items of this type a navigation root                                                                                       |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation  | Exclude From navigation: Allow items to be excluded from navigation                                                                                  |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle    | Next previous navigation toggle: Allow items to have next previous navigation enabled                                                                |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.discussion.IAllowDiscussion         | Allow discussion: Allow discussion on this item                                                                                                      |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.id.IShortName                       | Short name: Gives the ability to rename an item from its edit form.                                                                                  |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled   | Next previous navigation: Enable next previous navigation for all items of this type                                                                 |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes | Folder Addable Constrains: Restrict the content types that can be added to folderish content                                                         |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
+| plone.app.relationfield.behavior.IRelatedItems                    | Adds the *Related items* field to the *Categorization* fieldset.                                                                                     |
++-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
diff --git a/docs/reference/value-and-validator-adaptors.rst b/docs/reference/value-and-validator-adaptors.rst
deleted file mode 100644
index f954c21..0000000
--- a/docs/reference/value-and-validator-adaptors.rst
+++ /dev/null
@@ -1,52 +0,0 @@
-Value and validator adaptors 
-============================
-
-**Handy Decorators to set computed defaults and dynamic validators**
-
-Decorators from `plone.directives.form`_ allow you to set dynamic
-defaults and validators for schema fields. These are used outside the
-interface class, after its declaration.
-
-Defaults
-~~~~~~~~
-
-Use the plone.directives.form.default\_value decorator to create an
-adaptor to dynamically set a default. For example, to set a Datetime
-field to default to the current time:
-
-::
-
-    import datetime
-    from plone.directives import form
-    from zope import schema
-
-    class IMySchema(form.Schema):
-
-        start = schema.Datetime(title=u"Start Date")
-
-    @form.default_value(field=IMySchema['start'])
-    def startDefaultValue(data):
-        return datetime.datetime.today()
-
-Validators
-~~~~~~~~~~
-
-Use the plone.directives.form.validator decorator to create an adaptor
-to validate field input. For example, to validate that a field is not
-entered all uppercase:
-
-::
-
-    from plone.directives import form
-    from zope import schema
-
-    class IMySchema(form.Schema):
-
-        title = schema.TextLine(title=u"Title")
-
-    @form.validator(field=IMySchema['title'])
-    def validateTitle(value):
-        if value and value == value.upper():
-            raise schema.ValidationError(u"Please don't shout")
-
-.. _plone.directives.form: http://pypi.python.org/pypi/plone.directives.form
diff --git a/docs/reference/widgets.rst b/docs/reference/widgets.rst
index 7f84b03..42328c7 100644
--- a/docs/reference/widgets.rst
+++ b/docs/reference/widgets.rst
@@ -11,19 +11,19 @@ content types, see the `schema introduction`_.
 The table below shows some commonly used custom widgets.
 
 ============================== ================================= ================= =============================================================================================================================================================
- Widget                         Imported from                     Field             Description                                                                                                                                                 
+ Widget                         Imported from                     Field             Description
 ============================== ================================= ================= =============================================================================================================================================================
- WysiwygFieldWidget             plone.app.z3cform.wysiwyg         Text              Use Plone’s standard WYSIWYG HTML editor on a standard text field. Note that if you used a *RichText* field, you will get the WYSIWYG editor automatically. 
- RichTextWidget                 plone.app.textfield.widget        RichText          Use Plone’s standard WYSIWYG HTML editor on a *RichText* field. This also allows text-based markup such as reStructuredText.                                 
- AutocompleteFieldWidget        plone.formwidget.autocomplete     Choice            Autocomplete widget based on jQuery Autocomplete. Requires a Choice field with a query source. See `vocabularies`_.                                         
- AutocompleteMultiFieldWidget   plone.formwidget.autocomplete     Collection        Multi-select version of the above. Used for a List, Tuple, Set or Frozenset with a Choice value\_type.                                                      
- ContentTreeFieldWidget         plone.formwidget.contenttree      RelationChoice    Content browser. Requires a query source with content objects as values.                                                                                    
- MultiContentTreeFieldWidget    plone.formwidget.contenttree      RelationList      Content browser. Requires a query source with content objects as values.                                                                                    
- NamedFileFieldWidget           plone.formwidget.namedfile        NamedFile         A file upload widget                                                                                                                                        
- NamedImageFieldWidget          plone.formwidget.namedimage       NamedImage        An image upload widget                                                                                                                                      
- TextLinesFieldWidget           plone.z3cform.textlines           Collection        One-per-line list entry for List, Tuple, Set or Frozenset fields. Requires a value_type of TextLine or ASCIILine.                                           
- SingleCheckBoxFieldWidget      z3c.form.browser.checkbox         Bool              A single checkbox for true/false.                                                                                                                           
- CheckBoxFieldWidget            z3c.form.browser.checkbox         Collection        A set of checkboxes. Used for Set or Frozenset fields with a Choice value_type and a vocabulary.                                                            
+ WysiwygFieldWidget             plone.app.z3cform.wysiwyg         Text              Use Plone’s standard WYSIWYG HTML editor on a standard text field. Note that if you used a *RichText* field, you will get the WYSIWYG editor automatically.
+ RichTextWidget                 plone.app.textfield.widget        RichText          Use Plone’s standard WYSIWYG HTML editor on a *RichText* field. This also allows text-based markup such as reStructuredText.
+ AutocompleteFieldWidget        plone.formwidget.autocomplete     Choice            Autocomplete widget based on jQuery Autocomplete. Requires a Choice field with a query source. See `vocabularies`_.
+ AutocompleteMultiFieldWidget   plone.formwidget.autocomplete     Collection        Multi-select version of the above. Used for a List, Tuple, Set or Frozenset with a Choice value\_type.
+ ContentTreeFieldWidget         plone.formwidget.contenttree      RelationChoice    Content browser. Requires a query source with content objects as values.
+ MultiContentTreeFieldWidget    plone.formwidget.contenttree      RelationList      Content browser. Requires a query source with content objects as values.
+ NamedFileFieldWidget           plone.formwidget.namedfile        NamedFile         A file upload widget
+ NamedImageFieldWidget          plone.formwidget.namedimage       NamedImage        An image upload widget
+ TextLinesFieldWidget           plone.z3cform.textlines           Collection        One-per-line list entry for List, Tuple, Set or Frozenset fields. Requires a value_type of TextLine or ASCIILine.
+ SingleCheckBoxFieldWidget      z3c.form.browser.checkbox         Bool              A single checkbox for true/false.
+ CheckBoxFieldWidget            z3c.form.browser.checkbox         Collection        A set of checkboxes. Used for Set or Frozenset fields with a Choice value_type and a vocabulary.
 ============================== ================================= ================= =============================================================================================================================================================
 
 .. _z3c.form documentation: http://docs.zope.org/z3c.form/widget.html
diff --git a/docs/schema-driven-types.rst b/docs/schema-driven-types.rst
index bdaf361..365edd1 100644
--- a/docs/schema-driven-types.rst
+++ b/docs/schema-driven-types.rst
@@ -96,7 +96,6 @@ Next, add schema declarations for our fields. The top part of the file should lo
 .. code-block:: python
 
     from example.conference import MessageFactory as _
-    from five import grok
     from plone.app.textfield import RichText
     from plone.supermodel import model
     from zope import schema
@@ -161,7 +160,6 @@ Save program.py.
 .. code-block:: python
 
     from example.conference import MessageFactory as _
-    from five import grok
     from plone.app.textfield import RichText
     from plone.supermodel import model
     from zope import schema
@@ -210,9 +208,10 @@ interface that allows us to add some form hints to the interface, which
 are then used by Dexterity (actually, the `plone.autoform`_ package) to
 construct forms. Take a look at the `plone.autoform`_
 documentation to learn more about the various hints that are possible.
-The most common ones are ``form.fieldset()``, to define groups of fields,
-``form.widget()``, to set a widget for a particular field, and
-``form.omit()`` to hide one or more fields from the form.
+The most common ones are from ``plone.autoform.directives``.
+Use ``fieldset()`` to define groups of fields,
+``widget()`` to set widgets for particular fields and
+``omitted()`` to hide one or more fields from the form.
 We will see examples of these later in the manual.
 
 .. _zope.schema:
@@ -232,7 +231,7 @@ do this with GenericSetup. Most of this was set up when we used ``addcontent`` t
 
 Look in the ``types.xml`` file in your packages ``example/conference/profiles/default`` directory:
 
-.. code-block:: html
+.. code-block:: xml
 
     <object name="portal_types">
      <object name="example.conference.program" meta_type="Dexterity FTI" />
@@ -248,7 +247,7 @@ name matches the type name.
 
 The ``Session`` type, in ``example.conference.session.xml``, should look like this:
 
-.. code-block:: html
+.. code-block:: xml
 
     <?xml version="1.0"?>
     <object name="example.conference.session"
@@ -337,7 +336,7 @@ The important lines here are:
 
 The ``Program``, in ``example.conference.program.xml``, looks like this:
 
-.. code-block:: html
+.. code-block:: xml
 
     <?xml version="1.0"?>
     <object name="example.conference.program"
@@ -418,10 +417,6 @@ If Zope doesn’t start up:
    the foreground with ``./bin/instance fg``. You could have a syntax
    error or a ZCML error.
 
-If you have a failed import for ``plone.directives.form``, make sure that you
-specified the ``[grok]`` extra for ``plone.app.dexterity`` in your setup.py
-install_requires.
-
 If you don’t see your package in :guilabel:`portal_quickinstaller`:
 
 -  Ensure that the package is either checked out by ``mr.developer`` or
@@ -457,6 +452,3 @@ If your forms do not look right (e.g. you are missing custom widgets):
 - Make sure your schema derives from ``model.Schema``.
 - Remember that the directives require you to specify the correct field
   name, even if they are placed before or after the relevant field.
-- Check that you have a ``<grok:grok package="." />`` line in
-  ``configure.zcml``.
-
diff --git a/docs/testing/integration-tests.rst b/docs/testing/integration-tests.rst
index 12b5746..6c3f74c 100644
--- a/docs/testing/integration-tests.rst
+++ b/docs/testing/integration-tests.rst
@@ -122,7 +122,7 @@ removed to conserve space.)::
         def test_adding(self):
             self.folder.invokeFactory('example.conference.program', 'program1')
             p1 = self.folder['program1']
-            self.failUnless(IProgram.providedBy(p1))
+            self.assertTrue(IProgram.providedBy(p1))
 
         def test_fti(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.program')
@@ -131,20 +131,20 @@ removed to conserve space.)::
         def test_schema(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.program')
             schema = fti.lookupSchema()
-            self.assertEquals(IProgram, schema)
+            self.assertEqual(IProgram, schema)
 
         def test_factory(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.program')
             factory = fti.factory
             new_object = createObject(factory)
-            self.failUnless(IProgram.providedBy(new_object))
+            self.assertTrue(IProgram.providedBy(new_object))
 
         def test_view(self):
             self.folder.invokeFactory('example.conference.program', 'program1')
             p1 = self.folder['program1']
             view = p1.restrictedTraverse('@@view')
             sessions = view.sessions()
-            self.assertEquals(0, len(sessions))
+            self.assertEqual(0, len(sessions))
 
         def test_start_end_dates_indexed(self):
             self.folder.invokeFactory('example.conference.program', 'program1')
@@ -155,9 +155,9 @@ removed to conserve space.)::
 
             result = self.portal.portal_catalog(path='/'.join(p1.getPhysicalPath()))
 
-            self.assertEquals(1, len(result))
-            self.assertEquals(result[0].start, DateTime('2009-01-01T14:01:00'))
-            self.assertEquals(result[0].end, DateTime('2009-01-02T15:02:00'))
+            self.assertEqual(1, len(result))
+            self.assertEqual(result[0].start, DateTime('2009-01-01T14:01:00'))
+            self.assertEqual(result[0].end, DateTime('2009-01-02T15:02:00'))
 
         def test_tracks_indexed(self):
             self.folder.invokeFactory('example.conference.program', 'program1')
@@ -167,8 +167,8 @@ removed to conserve space.)::
 
             result = self.portal.portal_catalog(Subject='Track 2')
 
-            self.assertEquals(1, len(result))
-            self.assertEquals(result[0].getURL(), p1.absolute_url())
+            self.assertEqual(1, len(result))
+            self.assertEqual(result[0].getURL(), p1.absolute_url())
 
     def test_suite():
         return unittest.defaultTestLoader.loadTestsFromName(__name__)
@@ -262,7 +262,7 @@ the ``Session`` type::
 
             p1.invokeFactory('example.conference.session', 'session1')
             s1 = p1['session1']
-            self.failUnless(ISession.providedBy(s1))
+            self.assertTrue(ISession.providedBy(s1))
 
         def test_fti(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.session')
@@ -271,13 +271,13 @@ the ``Session`` type::
         def test_schema(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.session')
             schema = fti.lookupSchema()
-            self.assertEquals(ISession, schema)
+            self.assertEqual(ISession, schema)
 
         def test_factory(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.session')
             factory = fti.factory
             new_object = createObject(factory)
-            self.failUnless(ISession.providedBy(new_object))
+            self.assertTrue(ISession.providedBy(new_object))
 
         def test_tracks_vocabulary(self):
             self.folder.invokeFactory('example.conference.program', 'program1')
@@ -289,12 +289,12 @@ the ``Session`` type::
 
             vocab = possible_tracks(s1)
 
-            self.assertEquals(['T1', 'T2', 'T3'], [t.value for t in vocab])
-            self.assertEquals(['T1', 'T2', 'T3'], [t.token for t in vocab])
+            self.assertEqual(['T1', 'T2', 'T3'], [t.value for t in vocab])
+            self.assertEqual(['T1', 'T2', 'T3'], [t.token for t in vocab])
 
         def test_catalog_index_metadata(self):
-            self.failUnless('track' in self.portal.portal_catalog.indexes())
-            self.failUnless('track' in self.portal.portal_catalog.schema())
+            self.assertTrue('track' in self.portal.portal_catalog.indexes())
+            self.assertTrue('track' in self.portal.portal_catalog.schema())
 
         def test_workflow_installed(self):
             self.folder.invokeFactory('example.conference.program', 'program1')
@@ -304,7 +304,7 @@ the ``Session`` type::
             s1 = p1['session1']
 
             chain = self.portal.portal_workflow.getChainFor(s1)
-            self.assertEquals(('example.conference.session_workflow',), chain)
+            self.assertEqual(('example.conference.session_workflow',), chain)
 
     def test_suite():
         return unittest.defaultTestLoader.loadTestsFromName(__name__)
@@ -343,7 +343,7 @@ column and the custom workflow::
         def test_adding(self):
             self.folder.invokeFactory('example.conference.presenter', 'presenter1')
             p1 = self.folder['presenter1']
-            self.failUnless(IPresenter.providedBy(p1))
+            self.assertTrue(IPresenter.providedBy(p1))
 
         def test_fti(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.presenter')
@@ -352,13 +352,13 @@ column and the custom workflow::
         def test_schema(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.presenter')
             schema = fti.lookupSchema()
-            self.assertEquals(IPresenter, schema)
+            self.assertEqual(IPresenter, schema)
 
         def test_factory(self):
             fti = queryUtility(IDexterityFTI, name='example.conference.presenter')
             factory = fti.factory
             new_object = createObject(factory)
-            self.failUnless(IPresenter.providedBy(new_object))
+            self.assertTrue(IPresenter.providedBy(new_object))
 
     def test_suite():
         return unittest.defaultTestLoader.loadTestsFromName(__name__)
@@ -411,4 +411,4 @@ and restart.
 .. _collective.testcaselayer: http://pypi.python.org/pypi/collective.testcaselayer
 .. _plone.app.testing: http://pypi.python.org/pypi/plone.app.testing
 .. _Roadrunner: http://pypi.python.org/pypi/roadrunner
-.. _testing tutorial: /documentation/tutorial/testing
+.. _testing tutorial: /external/plone.app.testing/docs/source/index
diff --git a/docs/testing/mock-testing.rst b/docs/testing/mock-testing.rst
index ef7920c..6311668 100644
--- a/docs/testing/mock-testing.rst
+++ b/docs/testing/mock-testing.rst
@@ -1,4 +1,4 @@
-Mock testing 
+Mock testing
 =============
 
 **Using a mock objects framework to write mock based tests**
@@ -13,21 +13,20 @@ In our example product, we have an event handler like this:
 
 ::
 
-    @grok.subscribe(IPresenter, IObjectAddedEvent)
     def notifyUser(presenter, event):
         acl_users = getToolByName(presenter, 'acl_users')
         mail_host = getToolByName(presenter, 'MailHost')
         portal_url = getToolByName(presenter, 'portal_url')
-        
+
         portal = portal_url.getPortalObject()
         sender = portal.getProperty('email_from_address')
-        
+
         if not sender:
             return
-        
+
         subject = "Is this you?"
         message = "A presenter called %s was added here %s" % (presenter.title, presenter.absolute_url(),)
-        
+
         matching_users = acl_users.searchUsers(fullname=presenter.title)
         for user_info in matching_users:
             email = user_info.get('email', None)
@@ -108,9 +107,9 @@ As an example test case, consider the following class in
     from example.conference.presenter import notifyUser
 
     class TestPresenterUnit(MockTestCase):
-        
+
         def test_notify_user(self):
-            
+
             # dummy presenter
             presenter = self.create_dummy(
                     __parent__=None,
@@ -118,40 +117,40 @@ As an example test case, consider the following class in
                     title="Jim",
                     absolute_url = lambda: 'http://example.org/presenter',
                 )
-            
+
             # dummy event
             event = ObjectAddedEvent(presenter)
-            
+
             # search result for acl_users
             user_info = [{'email': 'jim@example.org', 'id': 'jim'}]
-            
+
             # email data
             message = "A presenter called Jim was added here http://example.org/presenter"
             email = "jim@example.org"
             sender = "test@example.org"
             subject = "Is this you?"
-            
+
             # mock tools/portal
-            
+
             portal_mock = self.mocker.mock()
             self.expect(portal_mock.getProperty('email_from_address')).result('test@example.org')
-            
+
             portal_url_mock = self.mocker.mock()
             self.mock_tool(portal_url_mock, 'portal_url')
             self.expect(portal_url_mock.getPortalObject()).result(portal_mock)
-            
+
             acl_users_mock = self.mocker.mock()
             self.mock_tool(acl_users_mock, 'acl_users')
             self.expect(acl_users_mock.searchUsers(fullname='Jim')).result(user_info)
-            
+
             mail_host_mock = self.mocker.mock()
             self.mock_tool(mail_host_mock, 'MailHost')
             self.expect(mail_host_mock.secureSend(message, email, sender, subject))
-            
-            
+
+
             # put mock framework into replay mode
             self.replay()
-            
+
             # call the method under test
             notifyUser(presenter, event)
 
diff --git a/docs/testing/unit-tests.rst b/docs/testing/unit-tests.rst
index 4b3e4b9..206364f 100644
--- a/docs/testing/unit-tests.rst
+++ b/docs/testing/unit-tests.rst
@@ -1,9 +1,9 @@
-Unit tests 
+Unit tests
 ============
 
 **Writing simple unit tests**
 
-As all good developers know, automated tests are very important! 
+As all good developers know, automated tests are very important!
 If you are not comfortable with automated testing and test-driven
 development, you should read the `Plone testing tutorial`_.
 In this section, we will assume you are familiar with Plone testing basics,
@@ -37,7 +37,7 @@ custom event handlers, default value calculation functions and other
 procedural code.
 
 In that spirit, let’s write some unit tests for the default value
-handler and the invariant in ``program.py``. 
+handler and the invariant in ``program.py``.
 We’ll add the directory ``tests``, with an ``__init__.py`` and a file
 ``test_program.py`` that looks like this::
 
@@ -55,47 +55,47 @@ We’ll add the directory ``tests``, with an ``__init__.py`` and a file
     class TestProgramUnit(unittest.TestCase):
         """Unit test for the Program type
         """
-        
+
         def test_start_defaults(self):
             data = MockProgram()
             default_value = startDefaultValue(data)
             today = datetime.datetime.today()
             delta = default_value - today
-            self.assertEquals(6, delta.days)
+            self.assertEqual(6, delta.days)
 
         def test_end_default(self):
             data = MockProgram()
             default_value = endDefaultValue(data)
             today = datetime.datetime.today()
             delta = default_value - today
-            self.assertEquals(9, delta.days)
-        
+            self.assertEqual(9, delta.days)
+
         def test_validate_invariants_ok(self):
             data = MockProgram()
             data.start = datetime.datetime(2009, 1, 1)
             data.end = datetime.datetime(2009, 1, 2)
-            
+
             try:
                 IProgram.validateInvariants(data)
             except:
                 self.fail()
-        
+
         def test_validate_invariants_fail(self):
             data = MockProgram()
             data.start = datetime.datetime(2009, 1, 2)
             data.end = datetime.datetime(2009, 1, 1)
-            
+
             try:
                 IProgram.validateInvariants(data)
                 self.fail()
             except StartBeforeEnd:
                 pass
-        
+
         def test_validate_invariants_edge(self):
             data = MockProgram()
             data.start = datetime.datetime(2009, 1, 2)
             data.end = datetime.datetime(2009, 1, 2)
-            
+
             try:
                 IProgram.validateInvariants(data)
             except:
@@ -107,7 +107,7 @@ We’ll add the directory ``tests``, with an ``__init__.py`` and a file
 This is a simple test using the Python standard library’s ``unittest``
 module. There are a few things to note here:
 
-- We have created a dummy class to simulate a ``Program`` instance. 
+- We have created a dummy class to simulate a ``Program`` instance.
   It doesn’t contain anything at all, but we set some attributes onto it
   for certain tests.
   This is a very simple way to do mocks.
@@ -158,4 +158,4 @@ coverage, it means that your tests do not cover many of the code paths
 in those modules, and so are less useful for detecting bugs or guarding
 against future problems. Aim for 100%.
 
-.. _Plone testing tutorial: ../../../../../../documentation/tutorial/testing
+.. _Plone testing tutorial: /external/plone.app.testing/docs/source/index
diff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml
index 19b08a9..9928ae7 100644
--- a/plone/app/dexterity/behaviors/configure.zcml
+++ b/plone/app/dexterity/behaviors/configure.zcml
@@ -124,6 +124,15 @@
         for="plone.dexterity.interfaces.IDexterityContainer"
         />
 
+    <!-- Short name -->
+    <plone:behavior
+        title="Short name"
+        description="Gives the ability to rename an item from its edit form."
+        factory=".id.ShortName"
+        provides=".id.IShortName"
+        for="plone.dexterity.interfaces.IDexterityContent"
+        />
+
     <!-- BBB -->
     <configure zcml:condition="installed plone.app.relationfield">
       <include package="plone.app.relationfield" />
diff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py
index ea7510b..e28aeba 100644
--- a/plone/app/dexterity/behaviors/constrains.py
+++ b/plone/app/dexterity/behaviors/constrains.py
@@ -41,8 +41,10 @@ def canSetConstrainTypes(self):
         return member.has_permission(
             'Modify constrain types', self.context)
 
-    def getDefaultAddableTypes(self):
-        return self._getAddableTypesFor(self.context, self.context)
+    def getDefaultAddableTypes(self, context=None):
+        if context is None:
+            context = self.context
+        return self._getAddableTypesFor(self.context, context)
 
     def _getAddableTypesFor(self, obj, context):
         """
@@ -57,15 +59,17 @@ def _getAddableTypesFor(self, obj, context):
         return [t for t in result if my_type.allowType(t.getId()) and
                 t.isConstructionAllowed(context)]
 
-    def _filterByDefaults(self, types):
+    def _filterByDefaults(self, types, context=None):
         """
         Filter the given types by the items which would also be allowed by
         default. Important, else users could circumvent security restritions
         """
-        defaults = [fti.getId() for fti in self.getDefaultAddableTypes()]
+        if context is None:
+            context = self.context
+        defaults = [fti.getId() for fti in self.getDefaultAddableTypes(context)]
         return [x for x in types if x in defaults]
 
-    def allowedContentTypes(self):
+    def allowedContentTypes(self, context=None):
         """
         If constraints are enabled, return the locally allowed types.
         If the setting is ACQUIRE, acquire the locally allowed types according
@@ -74,9 +78,10 @@ def allowedContentTypes(self):
 
         This method returns the FTI, NOT the FTI id, like most other methods.
         """
+        if context is None:
+            context = self.context
         mode = self.getConstrainTypesMode()
-        default_addable = self.getDefaultAddableTypes()
-
+        default_addable = self.getDefaultAddableTypes(context)
         if mode == DISABLED:
             return default_addable
         elif mode == ENABLED:
@@ -91,21 +96,21 @@ def allowedContentTypes(self):
             if not parent_constrain_adapter:
                 return default_addable
             return_tids = self._filterByDefaults(
-                parent_constrain_adapter.getLocallyAllowedTypes())
+                parent_constrain_adapter.getLocallyAllowedTypes(context), context)
             return [t for t in default_addable if t.getId() in return_tids]
         else:
             raise Exception(
                 "Wrong constraint setting. %i is an invalid value",
                 mode)
 
-    def getLocallyAllowedTypes(self):
+    def getLocallyAllowedTypes(self, context=None):
         """
         If constraints are enabled, return the locally allowed types.
         If the setting is ACQUIRE, acquire the locally allowed types according
         to the ACQUIRE rules, described in the interface.
         If constraints are disabled, use the default addable types
         """
-        return [t.getId() for t in self.allowedContentTypes()]
+        return [t.getId() for t in self.allowedContentTypes(context)]
 
     def setLocallyAllowedTypes(self, types):
         defaults = [t.getId() for t in self.getDefaultAddableTypes()]
@@ -114,7 +119,7 @@ def setLocallyAllowedTypes(self, types):
                 raise ValueError("%s is not a valid type id", type_)
         self.context.locally_allowed_types = types
 
-    def getImmediatelyAddableTypes(self):
+    def getImmediatelyAddableTypes(self, context=None):
         """
         If constraints are enabled, return the locally immediately
         addable tpes.
@@ -122,22 +127,24 @@ def getImmediatelyAddableTypes(self):
         the parent, according to the rules described in the interface.
         If constraints are disabled, use the default addable types
         """
+        if context is None:
+            context = self.context
         mode = self.getConstrainTypesMode()
-        default_addable = [t.getId() for t in self.getDefaultAddableTypes()]
+        default_addable = [t.getId() for t in self.getDefaultAddableTypes(context)]
 
         if mode == DISABLED:
             return default_addable
         elif mode == ENABLED:
             if hasattr(self.context, 'immediately_addable_types'):
                 return self._filterByDefaults(
-                    self.context.immediately_addable_types)
+                    self.context.immediately_addable_types, context)
         elif mode == ACQUIRE:
             parent = self.context.__parent__
             parent_constrain_adapter = ISelectableConstrainTypes(parent, None)
             if not parent_constrain_adapter:
                 return default_addable
             return self._filterByDefaults(
-                parent_constrain_adapter.getImmediatelyAddableTypes())
+                parent_constrain_adapter.getImmediatelyAddableTypes(context), context)
         else:
             raise Exception(
                 "Wrong constraint setting. %i is an invalid value",
diff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py
new file mode 100644
index 0000000..1157fd7
--- /dev/null
+++ b/plone/app/dexterity/behaviors/id.py
@@ -0,0 +1,55 @@
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from zope import schema
+from zope.interface import alsoProvides
+from zope.container.interfaces import INameChooser
+from plone.app.dexterity import MessageFactory as _
+from plone.autoform import directives as form
+from plone.autoform.interfaces import IFormFieldProvider
+from plone.supermodel import model
+import transaction
+
+
+class IShortName(model.Schema):
+
+    model.fieldset(
+        'settings',
+        label=_(u"Settings"),
+        fields=['id'],
+    )
+
+    id = schema.ASCIILine(
+        title=_(u'Short name'),
+        description=_(u'This name will be displayed in the URL.'),
+        required=False,
+    )
+    form.write_permission(id='cmf.AddPortalContent')
+
+alsoProvides(IShortName, IFormFieldProvider)
+
+
+class ShortName(object):
+
+    def __init__(self, context):
+        self.context = context
+
+    def _get_id(self):
+        return self.context.getId()
+
+    def _set_id(self, value):
+        if not value:
+            return
+        context = aq_inner(self.context)
+        parent = aq_parent(context)
+        if parent is None:
+            # Object hasn't been added to graph yet; just set directly
+            context.id = value
+            return
+        new_id = INameChooser(parent).chooseName(value, context)
+        if getattr(aq_base(context), 'id', None):
+            transaction.savepoint()
+            parent.manage_renameObject(context.getId(), new_id)
+        else:
+            context.id = new_id
+    id = property(_get_id, _set_id)
diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index 94740db..d7e779b 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -1,23 +1,28 @@
 from AccessControl.SecurityManagement import getSecurityManager
 from DateTime import DateTime
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from datetime import datetime
+from plone.app.dexterity import MessageFactory as _
+from plone.app.dexterity import PloneMessageFactory as _PMF
+from plone.app.z3cform.widget import (
+    AjaxSelectFieldWidget, SelectFieldWidget, DatetimeFieldWidget)
+from plone.autoform import directives as form
+from plone.autoform.interfaces import IFormFieldProvider
+from plone.dexterity.interfaces import IDexterityContent
+from plone.supermodel import model
 from z3c.form.interfaces import IEditForm, IAddForm
 from z3c.form.widget import ComputedWidgetAttribute
-from zope.interface import provider
-from zope.interface import alsoProvides
+from zope import schema
 from zope.component import adapts
 from zope.component.hooks import getSite
-from zope import schema
-from zope.schema.interfaces import IText, ISequence
+from zope.interface import Invalid
+from zope.interface import alsoProvides
+from zope.interface import invariant
+from zope.interface import provider
 from zope.schema.interfaces import IContextAwareDefaultFactory
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
-from plone.autoform import directives as form
 from plone.dexterity.utils import safe_unicode
-from plone.supermodel import model
-from plone.dexterity.interfaces import IDexterityContent
-from plone.autoform.interfaces import IFormFieldProvider
-from plone.app.dexterity import PloneMessageFactory as _PMF
+from zope.schema.interfaces import IText, ISequence
 
 # Behavior interfaces to display Dublin Core metadata fields on Dexterity
 # content edit forms.
@@ -99,6 +104,8 @@ class ICategorization(model.Schema):
         required=False,
         missing_value=(),
     )
+    form.widget('subjects', AjaxSelectFieldWidget,
+                vocabulary='plone.app.vocabularies.Keywords')
 
     language = schema.Choice(
         title=_PMF(u'label_language', default=u'Language'),
@@ -107,12 +114,18 @@ class ICategorization(model.Schema):
         missing_value='',
         defaultFactory=default_language,
     )
+    form.widget('language', SelectFieldWidget)
 
     form.omitted('subjects', 'language')
     form.no_omit(IEditForm, 'subjects', 'language')
     form.no_omit(IAddForm, 'subjects', 'language')
 
 
+class EffectiveAfterExpires(Invalid):
+    __doc__ = _("error_invalid_publication",
+                default=u"Invalid effective or expires date")
+
+
 class IPublication(model.Schema):
     # dates fieldset
     model.fieldset(
@@ -129,6 +142,7 @@ class IPublication(model.Schema):
                     u"not show up in listings and searches until this date."),
         required=False
     )
+    form.widget('effective', DatetimeFieldWidget)
 
     expires = schema.Datetime(
         title=_PMF(u'label_expiration_date', u'Expiration Date'),
@@ -138,6 +152,15 @@ class IPublication(model.Schema):
                     u"longer be visible in listings and searches."),
         required=False
     )
+    form.widget('expires', DatetimeFieldWidget)
+
+    @invariant
+    def validate_start_end(data):
+        if data.effective and data.expires and data.effective > data.expires:
+            raise EffectiveAfterExpires(
+                _("error_expiration_must_be_after_effective_date",
+                  default=u"Expiration date must be after publishing date.")
+            )
 
     form.omitted('effective', 'expires')
     form.no_omit(IEditForm, 'effective', 'expires')
@@ -168,6 +191,8 @@ class IOwnership(model.Schema):
         required=False,
         missing_value=(),
     )
+    form.widget('creators', AjaxSelectFieldWidget,
+                vocabulary='plone.app.vocabularies.Users')
 
     contributors = schema.Tuple(
         title=_PMF(u'label_contributors', u'Contributors'),
@@ -180,6 +205,8 @@ class IOwnership(model.Schema):
         required=False,
         missing_value=(),
     )
+    form.widget('contributors', AjaxSelectFieldWidget,
+                vocabulary='plone.app.vocabularies.Users')
 
     rights = schema.Text(
         title=_PMF(u'label_copyrights', default=u'Rights'),
@@ -326,7 +353,19 @@ def _get_description(self):
     def _set_description(self, value):
         if isinstance(value, str):
             raise ValueError('Description must be unicode.')
+
+        # If description is containing linefeeds the HTML
+        # validation can break.
+        # See http://bo.geekworld.dk/diazo-bug-on-html5-validation-errors/
+
+        if '\n' in value:
+            value = value.replace('\n', '')
+
+        if '\r' in value:
+            value = value.replace('\r', '')
+
         self.context.description = value
+
     description = property(_get_description, _set_description)
 
 
diff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py
new file mode 100644
index 0000000..acc7933
--- /dev/null
+++ b/plone/app/dexterity/behaviors/tests/test_id.py
@@ -0,0 +1,86 @@
+from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
+from plone.testing import z2
+import transaction
+import unittest
+
+
+class TestShortNameBehavior(unittest.TestCase):
+
+    layer = DEXTERITY_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        # add IShortName behavior to Page
+        behaviors = list(self.layer['portal'].portal_types.Document.behaviors)
+        behaviors.append('plone.app.dexterity.behaviors.id.IShortName')
+        self.layer['portal'].portal_types.Document.behaviors = tuple(behaviors)
+        transaction.commit()
+
+        # prepare browser
+        self.browser = z2.Browser(self.layer['app'])
+        self.browser.addHeader('Authorization', 'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
+        self.browser.open('http://nohost/plone')
+
+    def test_add_item_w_id_specified(self):
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'title'
+        self.browser.getControl('Short name').value = 'foo'
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/foo')
+
+        # adding another item should append a suffix
+        self.browser.open('http://nohost/plone')
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'title'
+        self.browser.getControl('Short name').value = 'foo'
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/foo-1')
+
+    def test_add_item_w_reserved_name(self):
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'title'
+        self.browser.getControl('Short name').value = 'login'  # naughty naughty
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/login-1')
+
+    def test_add_item_w_title_only(self):
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'Id from Title'
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/id-from-title')
+
+    def test_edit_item_renames(self):
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'title'
+        self.browser.getControl('Short name').value = 'foo'
+        self.browser.getControl('Save').click()
+        self.browser.getLink('Edit').click()
+        self.assertEqual(self.browser.getControl('Short name').value, 'foo')
+        # spaces should get stripped
+        self.browser.getControl('Short name').value = ' bar '
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/bar')
+
+    def test_edit_item_doesnt_rename_if_id_blank(self):
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'title'
+        self.browser.getControl('Short name').value = 'foo'
+        self.browser.getControl('Save').click()
+        self.browser.getLink('Edit').click()
+        self.browser.getControl('Short name').value = ''
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/foo')
+
+    def test_edit_item_doesnt_rename_if_same_id(self):
+        self.browser.getLink('Page').click()
+        self.browser.getControl('Title').value = 'title'
+        self.browser.getControl('Short name').value = 'foo'
+        self.browser.getControl('Save').click()
+        mtime = self.layer['portal'].foo.bobobase_modification_time()
+        self.browser.getLink('Edit').click()
+        self.browser.getControl('Short name').value = 'foo'
+        self.browser.getControl('Save').click()
+        self.assertEqual(self.browser.url, 'http://nohost/plone/foo')
+        # assert that object has not been modified
+        self.assertEqual(mtime, self.layer['portal'].foo.bobobase_modification_time())
diff --git a/plone/app/dexterity/browser/behaviors.pt b/plone/app/dexterity/browser/behaviors.pt
index dfba50b..f402414 100644
--- a/plone/app/dexterity/browser/behaviors.pt
+++ b/plone/app/dexterity/browser/behaviors.pt
@@ -7,12 +7,10 @@
             tal:attributes="action request/getURL; enctype view/enctype">
 
           <tal:widgets repeat="widget view/widgets/values">
-            <div class="row"
-                 tal:define="hidden python:widget.mode == 'hidden'"
-                 tal:omit-tag="hidden">
 
                 <div class="field"
-                     tal:define="error widget/error"
+                     tal:define="error widget/error;
+                                 hidden python:widget.mode == 'hidden'"
                      tal:attributes="class python:'field' + (error and ' error' or '')">
                   <label for=""
                          tal:attributes="for widget/id"
@@ -46,7 +44,6 @@
 
                 </div>
 
-            </div>
           </tal:widgets>
 
         <metal:actions metal:use-macro="context/@@ploneform-macros/actions"/>
diff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py
index c46d04a..3657f9a 100644
--- a/plone/app/dexterity/browser/clone_type.py
+++ b/plone/app/dexterity/browser/clone_type.py
@@ -14,13 +14,15 @@ class TypeCloneForm(form.AddForm):
     id = 'clone-type-form'
 
     def create(self, data):
-        id = data.pop('id')
+        type_id = data.pop('id')
         props = dict(self.context.fti.propertyItems())
         # make sure we don't share the factory
         if props['factory'] == self.context.fti.getId():
             del props['factory']
+
         props['title'] = data['title']
-        fti = DexterityFTI(id, **props)
+        props['add_view_expr'] = props['add_view_expr'].replace(self.context.fti.getId(), type_id)
+        fti = DexterityFTI(type_id, **props)
         return fti
 
     def add(self, fti):
diff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml
index a6974af..1bd09a0 100644
--- a/plone/app/dexterity/browser/configure.zcml
+++ b/plone/app/dexterity/browser/configure.zcml
@@ -21,6 +21,15 @@
         permission="zope2.View"
         />
 
+    <!-- warning when editing default pages -->
+    <browser:viewlet
+        name="plone.app.dexterity.defaultpagewarning"
+        view="plone.dexterity.interfaces.IDexterityEditForm"
+        template="default_page_warning.pt"
+        permission="cmf.ModifyPortalContent"
+        manager="plone.app.layout.viewlets.interfaces.IGlobalStatusMessage"
+        />
+
     <!-- Control panel -->
 
     <browser:page
@@ -93,6 +102,11 @@
         permission="plone.schemaeditor.ManageSchemata"
         />
 
+    <browser:resource
+        name="plone.app.dexterity.types_listing.js"
+        file="types_listing.js"
+        />
+
     <configure zcml:condition="installed plone.resourceeditor">
         <browser:page
             name="modeleditor"
diff --git a/plone/app/dexterity/browser/container.pt b/plone/app/dexterity/browser/container.pt
index 340b619..db926c3 100644
--- a/plone/app/dexterity/browser/container.pt
+++ b/plone/app/dexterity/browser/container.pt
@@ -26,7 +26,7 @@
 
     <fieldset id="folder-listing">
         <legend i18n:translate="" i18n:domain="plone">Contents</legend>
-        <tal:block define="listing_macro context/folder_listing/macros/listing">
+        <tal:block define="view nocall:context/folder_listing; listing_macro view/macros/listing">
             <metal:use_macro use-macro="listing_macro" />
         </tal:block>
     </fieldset>
diff --git a/plone/app/dexterity/browser/default_page_warning.pt b/plone/app/dexterity/browser/default_page_warning.pt
new file mode 100644
index 0000000..c0818d0
--- /dev/null
+++ b/plone/app/dexterity/browser/default_page_warning.pt
@@ -0,0 +1,14 @@
+<div class="portalMessage info" role="alertdialog" aria-labelledby="dialogTitle"
+    tal:condition="context/@@plone_context_state/is_default_page|nothing">
+    <strong id="dialogTitle"
+            i18n:translate="">
+        Info
+    </strong>
+    <span i18n:translate="label_edit_default_view_container">
+        You are editing the default view of a container. If you wanted to edit the container itself,
+       <a href=""
+          i18n:name="go_here"
+          i18n:translate="label_edit_default_view_container_go_here"
+          tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/edit">go here</a>.
+    </span>
+</div>
diff --git a/plone/app/dexterity/browser/modeleditor.pt b/plone/app/dexterity/browser/modeleditor.pt
index eab7189..c93a8a6 100644
--- a/plone/app/dexterity/browser/modeleditor.pt
+++ b/plone/app/dexterity/browser/modeleditor.pt
@@ -22,7 +22,7 @@
                 <span i18n:name="name" tal:content="context/Title">name</span>
             </h1>
 
-            <p class="description" i18:translate="description_model_edit">
+            <p class="description" i18n:translate="description_model_edit">
                 This form allows you to directly edit the XML representation
                 of the field list. This makes it possible to add annotations for fieldsets,
                 validation and widgets. See the <a
diff --git a/plone/app/dexterity/browser/overview.pt b/plone/app/dexterity/browser/overview.pt
index 0c11d1b..0558a9b 100644
--- a/plone/app/dexterity/browser/overview.pt
+++ b/plone/app/dexterity/browser/overview.pt
@@ -16,13 +16,13 @@
 				     tal:attributes="name context/name;
 				                     checked python:'checked' if 'none' in value else None"/>
 			  <tal:block i18n:translate="label_no_content_types">No content types</tal:block>
-			</label><br/>
+			</label><br />
 			<label>
 			  <input type="radio" value="all"
 			  	     tal:attributes="name context/name;
 				                     checked python:'checked' if 'all' in value else None"/>
 			  <tal:block i18n:translate="label_all_content_types">All content types</tal:block>
-			</label><br/>
+			</label><br />
 			<label>
 			  <input type="radio" value="some"
 			  	     tal:attributes="name context/name;
diff --git a/plone/app/dexterity/browser/tabbed_forms.pt b/plone/app/dexterity/browser/tabbed_forms.pt
index 0b72218..4d9f5dd 100644
--- a/plone/app/dexterity/browser/tabbed_forms.pt
+++ b/plone/app/dexterity/browser/tabbed_forms.pt
@@ -3,48 +3,29 @@
       xmlns:tal="http://xml.zope.org/namespaces/tal"
       xmlns:i18n="http://xml.zope.org/namespaces/i18n"
       metal:use-macro="here/prefs_main_template/macros/master"
-      i18n:domain="plone.z3cform"
-      tal:omit-tag="">
+      i18n:domain="plone.z3cform">
 
-  <body>
-      <metal:slot metal:fill-slot="prefs_configlet_wrapper" i18n:domain="cmf_default">
+<body>
+    <metal:slot metal:fill-slot="prefs_configlet_main">
 
-        <div class="documentEditable">
-
-            <div id="edit-bar">
-             <ul id="content-views" class="contentViews">
-                <li class="selected"
-                    tal:repeat="tab view/tabs"
-                    tal:attributes="class python:tab[0] == view.label and 'selected' or ''">
-                    <a href=""
-                       tal:define="tab_url python:context.absolute_url() + '/' + tab[1]"
-                       tal:attributes="href tab_url"
-                       tal:content="python:tab[0]">
-                        Schema
-                    </a>
-                </li>
-             </ul>
-
-             <div class="contentActions"></div>
-            </div>
-
-            <div id="content">
-
-             <div class="documentContent">
-
-               <div metal:use-macro="context/global_statusmessage/macros/portal_message">
-                 Portal status message
-               </div>
+        <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+          Portal status message
+        </div>
 
-               <h1 class="documentFirstHeading"><tal:block tal:content="context/Title"/> (<tal:block tal:content="python:context.__name__" />)</h1>
-               <h2 tal:content="view/label"/>
+        <h1 class="documentFirstHeading"><tal:block tal:content="context/Title"/> (<tal:block tal:content="python:context.__name__" />)</h1>
 
-               <tal:block tal:replace="structure view/contents|view/render"/>
-             </div>
+        <div class="autotabs">
+         
+          <nav class="autotoc-nav">
+            <a tal:repeat="tab view/tabs"
+               tal:attributes="href python:context.absolute_url() + '/' + tab[1];
+                               class python:'active' if tab[0] == view.label else ''"
+               tal:content="python:tab[0]" />
+          </nav>
 
-           </div>
+          <tal:block tal:replace="structure view/contents|view/render"/>
         </div>
-     </metal:slot>
+    </metal:slot>
 
-  </body>
+</body>
 </html>
diff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py
index 9a9c5b4..b26a7df 100644
--- a/plone/app/dexterity/browser/types.py
+++ b/plone/app/dexterity/browser/types.py
@@ -122,6 +122,8 @@ def _get_allowed_content_types(self):
         return set(self.context.allowed_content_types)
 
     def _set_allowed_content_types(self, value):
+        if not value:
+            value = ()
         self.context.allowed_content_types = tuple(value)
         if value:
             self.context.filter_content_types = True
@@ -206,7 +208,7 @@ def link(self, item, field):
         (But only for types with schemata that can be edited through the web.)
         """
         if field == 'title':
-            return '%s/%s' % (self.context.absolute_url(), item.__name__)
+            return '%s/%s' % (self.context.absolute_url(), urllib.quote(item.__name__))
 
 # Create a form wrapper so the form gets layout.
 TypesListingPage = layout.wrap_form(
diff --git a/plone/app/dexterity/browser/types_listing.js b/plone/app/dexterity/browser/types_listing.js
new file mode 100644
index 0000000..1b11c1f
--- /dev/null
+++ b/plone/app/dexterity/browser/types_listing.js
@@ -0,0 +1,46 @@
+require([
+    'jquery',
+    'mockup-patterns-modal'
+], function($, Modal) {
+
+    $('.action').css('display', 'inline');
+
+    // clone type form
+    $('#crud-edit-form-buttons-clone').click(function(e) {
+      var selected = $('input[id$=-widgets-select-0]:checked');
+      if (selected.length == 1) {
+          e.preventDefault();
+          $(this).removeClass('submitting');
+          var type_link = $('a', selected.closest('tr'));
+          var $el = $('<' + 'a href="' + type_link.attr('href') + '/@@clone"><' + '/a>').appendTo('body');
+          new Modal($el, {
+            actionOptions: {displayInModal: false}
+          });
+          $el.click();
+      }
+    });
+
+    // delete type confirmation
+    $('#crud-edit-form-buttons-delete').click(function(e) {
+        var items = 0, msg;
+        $('td.count').closest('tr').has('input:checked').each(function() {
+          items += parseInt($('td.count .int-field', this).html().trim());
+        });
+        if (items) {
+          msg = 'WARNING: There are existing instances of these content types which will break.\n\nAre you sure you want to delete these types?';
+        } else {
+          msg = 'Are you sure you want to delete these types?';
+        }
+        if(!confirm(msg)) {
+            $(this).removeClass('submitting');
+            e.preventDefault();
+        }
+    });
+
+    // set id from title
+    $('body').on('change', '#form-widgets-title', function () {
+        var id = $.plone_schemaeditor_normalize_string($(this).val());
+        $('#form-widgets-id').val(id);
+    });
+
+});
diff --git a/plone/app/dexterity/browser/types_listing.pt b/plone/app/dexterity/browser/types_listing.pt
index b2543c4..de75042 100644
--- a/plone/app/dexterity/browser/types_listing.pt
+++ b/plone/app/dexterity/browser/types_listing.pt
@@ -1,89 +1,30 @@
 <tal:root>
-<script type="text/javascript" charset="utf-8">
-(function($){
-$(document).ready(function() {
+<script type="text/javascript"
+        tal:attributes="src context/++resource++schemaeditor.js"></script>
+<script type="text/javascript"
+        tal:attributes="src context/++resource++plone.app.dexterity.types_listing.js"></script>
 
-    common_content_filter = '#content>*:not(div.configlet),dl.portalMessage.error,dl.portalMessage.info';
-
-    $('.action').css('display', 'inline');
-
-    // add new type form
-    $('#add-type').prepOverlay({
-        subtype: 'ajax',
-        filter: common_content_filter,
-        formselector: '#add-type-form',
-        noform: function(el) {return $.plonepopups.noformerrorshow(el, 'redirect');},
-        redirect: function (el, responseText) {
-            var mo = responseText.match(/<base href="(\S+?)"/i);
-            if (mo.length === 2) {
-                return mo[1] + '/@@fields';
-            }
-            return location;
-        }
-    });
-
-    // clone type form
-    $('#crud-edit-form-buttons-clone').click(function(e) {
-      var selected = $('input[id$=-widgets-select-0]:checked');
-      if (selected.length == 1) {
-          e.preventDefault();
-          $(this).removeClass('submitting');
-          var type_link = $('a', selected.closest('tr'));
-          var el = $('<' + 'a href="' + type_link.attr('href') + '/@@clone"><' + '/a>').appendTo('body');
-          el.prepOverlay({
-              subtype: 'ajax',
-              filter: common_content_filter,
-              formselector: '#clone-type-form',
-              noform: 'reload'
-          })
-          el.click();
-      }
-    });
-
-    // delete type confirmation
-    $('#crud-edit-form-buttons-delete').click(function(e) {
-        var items = 0;
-        $('td.count').closest('tr').has('input:checked').each(function() {
-          items += parseInt($('td.count .int-field', this).html().trim());
-        });
-        if (items) {
-          var msg = 'WARNING: There are existing instances of these content types which will break.\n\nAre you sure you want to delete these types?';
-        } else {
-          var msg = 'Are you sure you want to delete these types?';
-        }
-        if(!confirm(msg)) {
-            $(this).removeClass('submitting');
-            e.preventDefault();
-        }
-    });
-
-    // set id from title
-    $('#form-widgets-title').live('change', function () {
-        var val = $(this).val().toLowerCase().replace(/[^A-Za-z0-9_\.]/g, '_');
-        $('#form-widgets-id').val(val);
-    });
-});
-})(jQuery);
-</script>
-
-<dl class="portalMessage"
+<div class="portalMessage info" role="alertdialog" aria-labelledby="dialogTitle"
      tal:condition="view/status">
-  <dt>Info</dt>
-  <dd tal:content="view/status"/>
-</dl>
+  <strong id="dialogTitle"
+          i18n:translate="">
+    Info
+  </strong>
+  <span tal:content="view/status">
+    Status
+  </span>
+</div>
 
-<p class="crud-description"
+<p class="crud-description documentDescription"
      tal:condition="view/description"
      tal:content="structure view/description">
 </p>
 
-<form id="add-type" method="GET"
-      tal:attributes="action string:${context/absolute_url}/@@add-type">
-  <p><input type="submit"
-         i18n:attributes="value"
-         i18n:domain="plone.app.dexterity"
-         value="Add New Content Type&hellip;"/></p>
-</form>
+<a class="pat-modal"
+   href="${context/absolute_url}/@@add-type">
+   <button i18n:domain="plone.app.dexterity"
+           i18n:translate="">Add New Content Type&hellip;</button>
+</a>
 
 <div tal:repeat="form view/subforms"
      tal:content="structure form/render"
diff --git a/plone/app/dexterity/configure.zcml b/plone/app/dexterity/configure.zcml
index 3e57edc..e75af3f 100644
--- a/plone/app/dexterity/configure.zcml
+++ b/plone/app/dexterity/configure.zcml
@@ -17,9 +17,10 @@
     <include zcml:condition="installed plone.directives.dexterity"
              package="plone.directives.dexterity" />
     <include package="plone.dexterity" />
-    
+    <include package="plone.behavior" />
+
     <i18n:registerTranslations directory="locales"/>
-    
+
     <genericsetup:registerProfile
         name="default"
         title="Dexterity Content Types"
@@ -29,12 +30,21 @@
         for="Products.CMFPlone.interfaces.IPloneSiteRoot"
         />
 
+    <genericsetup:registerProfile
+        name="testing"
+        title="Dexterity Content Types"
+        description="Adds Dexterity-based Folder and Document types for testing."
+        directory="profiles/testing"
+        provides="Products.GenericSetup.interfaces.EXTENSION"
+        for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+        />
+
     <include package=".browser" />
     <include package=".behaviors" />
     <include package=".upgrades" />
-    
+
     <include file="events.zcml" />
-    
+
     <class class="plone.dexterity.content.DexterityContent">
         <!-- Make Dexterity types portlet- and content rule aware -->
         <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
@@ -49,8 +59,14 @@
         for="plone.dexterity.interfaces.IDexterityFTI
              Products.GenericSetup.interfaces.ISetupEnviron"
         />
-    
+
     <adapter factory=".interfaces.TypeIdValidator" />
     <adapter factory=".interfaces.TypeTitleValidator" />
 
+    <adapter factory=".factories.DXFileFactory" />
+    <adapter factory=".permissions.DXFieldPermissionChecker" />
+    <adapter factory=".permissions.DXAddViewFieldPermissionChecker" />
+    <adapter factory=".permissions.DXAddViewFieldPermissionChecker"
+             for="plone.z3cform.interfaces.IFormWrapper" />
+
 </configure>
diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py
new file mode 100644
index 0000000..6b14406
--- /dev/null
+++ b/plone/app/dexterity/factories.py
@@ -0,0 +1,70 @@
+import transaction
+from thread import allocate_lock
+
+from zope.component import adapts
+from zope.container.interfaces import INameChooser
+from zope.interface import implements
+
+from Products.CMFCore.utils import getToolByName
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFPlone import utils as ploneutils
+
+
+from plone.namedfile.file import NamedBlobImage
+from plone.namedfile.file import NamedBlobFile
+from plone.app.dexterity.interfaces import IDXFileFactory
+
+upload_lock = allocate_lock()
+
+from plone.dexterity.utils import createContentInContainer
+
+
+class DXFileFactory(object):
+    implements(IDXFileFactory)
+    adapts(IFolderish)
+
+    def __init__(self, context):
+        self.context = context
+
+    def __call__(self, name, content_type, data):
+        ctr = getToolByName(self.context, 'content_type_registry')
+        type_ = ctr.findTypeName(name.lower(), '', '') or 'File'
+
+        name = name.decode("utf8")
+
+        chooser = INameChooser(self.context)
+
+        # otherwise I get ZPublisher.Conflict ConflictErrors
+        # when uploading multiple files
+        upload_lock.acquire()
+
+        newid = chooser.chooseName(name, self.context.aq_parent)
+        try:
+            transaction.begin()
+
+            # Try to determine which kind of NamedBlob we need
+            # This will suffice for standard p.a.contenttypes File/Image
+            # and any other custom type that would have 'File' or 'Image' in
+            # its type name
+            filename = ploneutils.safe_unicode(name)
+            if 'Image' in type_:
+                image = NamedBlobImage(data=data,
+                                       filename=filename,
+                                       contentType=content_type)
+                obj = createContentInContainer(
+                    self.context, type_, id=newid, image=image)
+            else:
+                file = NamedBlobFile(data=data,
+                                     filename=filename,
+                                     contentType=content_type)
+                obj = createContentInContainer(
+                    self.context, type_, id=newid, file=file)
+
+            obj.title = name
+            obj.reindexObject()
+            transaction.commit()
+
+        finally:
+            upload_lock.release()
+
+        return obj
diff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py
index 91c0a07..281dbc5 100644
--- a/plone/app/dexterity/interfaces.py
+++ b/plone/app/dexterity/interfaces.py
@@ -6,6 +6,7 @@
 from z3c.form import validator
 from plone.app.dexterity import MessageFactory as _
 from Products.CMFCore.utils import getToolByName
+from plone.app.widgets.interfaces import IFileFactory
 
 
 class ITypesContext(IBrowserPage):
@@ -122,3 +123,9 @@ def validate(self, value):
 
 validator.WidgetValidatorDiscriminators(
     TypeTitleValidator, field=ITypeSettings['title'])
+
+
+
+class IDXFileFactory(IFileFactory):
+    """ adapter factory for DX types
+    """
diff --git a/plone/app/dexterity/locales/ca/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/ca/LC_MESSAGES/plone.app.dexterity.po
index c826b12..ee9a195 100644
--- a/plone/app/dexterity/locales/ca/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/ca/LC_MESSAGES/plone.app.dexterity.po
@@ -1,21 +1,19 @@
-# Víctor Fernández de Alba <sneridagh@gmail.com>, 2013.
 msgid ""
 msgstr ""
 "Project-Id-Version: plone.app.dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
-"PO-Revision-Date: 2013-05-02 15:00 +0100\n"
-"Last-Translator: Víctor Fernández de Alba <sneridagh@gmail.com>\n"
+"POT-Creation-Date: 2014-12-12 11:42+0000\n"
+"PO-Revision-Date: 2014-12-12 12:46+0100\n"
+"Last-Translator: Roberto Diaz <plone.team@upcnet.es>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=utf-8\n"
 "Content-Transfer-Encoding: 8bit\n"
-"Plural-Forms: nplurals=1; plural=0\n"
 "Language-Code: ca\n"
 "Language-Name: Catalan\n"
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "# d'elements"
 
@@ -23,27 +21,31 @@ msgstr "# d'elements"
 msgid "Add Content Type"
 msgstr "Afegeix tipus de contingut"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:84
 msgid "Add New Content Type…"
 msgstr "Afegeix un nou tipus…"
 
-msgid "Adds Dublin Core metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)"
-msgstr "Afegeix els camps de metadades de Dublin Core (metadades bàsiques, categorització, dates efectives i propietari)"
+msgid ""
+"Adds Dublin Core metadata fields (equals Basic metadata + Categorization + "
+"Effective range + Ownership)"
+msgstr ""
+"Afegeix els camps de metadades de Dublin Core (metadades bàsiques, "
+"categorització, dates efectives i propietari)"
 
 msgid "Adds a title and description"
-msgstr "Afegeix un títol i descripció"
+msgstr "Afegeix un títol i una descripció"
 
 msgid "Adds creator, contributor, and rights fields"
 msgstr "Afegeix els camps creador, col·laboradors i drets"
 
 msgid "Adds keywords and language setting"
-msgstr "Afegeix els camps d'etiquetes i idioma"
+msgstr "Afegeix els camps d'etiquetes i d'idioma"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
-msgstr "Permet comentaris"
+msgstr "Permetre comentaris"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr "Permet els comentaris per aquest tipus de contingut."
 
@@ -53,28 +55,34 @@ msgstr "Permet excloure de la navegació"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Permet habilitar la navegació següent/anterior"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
-msgstr "Tipus de contingut permessos"
+msgstr "Tipus de contingut permesos"
 
 msgid "Assign an effective and/or expiration date"
 msgstr "Assigna la data efectiva i/o la data d'expiració"
 
-msgid "Automatically generate short URL name for content based on its initial title"
-msgstr "Genera automàticament el nom curt utilitzat a la URL per aquest contingut basat en el seu títol"
+msgid ""
+"Automatically generate short URL name for content based on its initial title"
+msgstr ""
+"Genera automàticament el nom curt utilitzat a la URL per aquest contingut, "
+"basat en el seu títol"
 
-msgid "Automatically generate short URL name for content based on its primary field file name"
-msgstr "Genera automàticament el nom curt utilitzat a la URL per aquest contingut basat en el nom del fitxer"
+msgid ""
+"Automatically generate short URL name for content based on its primary field "
+"file name"
+msgstr ""
+"Genera automàticament el nom curt utilitzat a la URL per aquest contingut, "
+"basat en el nom del fitxer"
 
 msgid "Basic metadata"
 msgstr "Metadades bàsiques"
 
-#: ../browser/behaviors.py:58
-#: ../browser/layout.py:16
+#: ../browser/behaviors.py:59 ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Comportaments"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Els comportaments s'han actualitzat"
 
@@ -82,28 +90,28 @@ msgstr "Els comportaments s'han actualitzat"
 msgid "Clone"
 msgstr "Clona"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Clona el tipus de contingut"
 
 msgid "Configures various components needed for full Dexterity support."
-msgstr "Configura els diferents components necessaris per a donar suport a Dexterity."
+msgstr ""
+"Configura els diferents components necessaris per a donar suport a Dexterity."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Contenidor"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Descripció"
 
-#: ../browser/types.py:247
-#: ../profiles/default/actions.xml
+#: ../browser/types.py:249 ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Tipus de contingut Dexterity"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Tipus de contingut Dexterity"
 
@@ -114,7 +122,16 @@ msgid "Effective range"
 msgstr "Rang de dates efectiu"
 
 msgid "Enable next previous navigation for all items of this type"
-msgstr "Habilita la navegació següent/anterior per tots els objectes d'aquest tipus"
+msgstr ""
+"Habilita la navegació següent/anterior per tots els objectes d'aquest tipus"
+
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr "Error: tots els elements 'model', han de ser de tipus 'schema'"
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr "Error: l'etiqueta arrel ha de ser 'model'"
 
 msgid "Exclude From navigation"
 msgstr "Exclou de la navegació"
@@ -127,16 +144,15 @@ msgstr "Exporta l'esquema dels models"
 msgid "Export Type Profiles"
 msgstr "Exporta els perfils del tipus"
 
-#: ../browser/fields.py:9
-#: ../browser/layout.py:15
+#: ../browser/fields.py:34 ../browser/layout.py:15
 msgid "Fields"
 msgstr "Camps"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
-msgstr "Filtra els tipus"
+msgstr "Filtra els tipus continguts"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Els objectes d'aquest tipus podran contenir altres objectes."
 
@@ -158,26 +174,26 @@ msgstr "Navegació següent/anterior"
 msgid "Next previous navigation toggle"
 msgstr "Canviar a navegació següent/anterior"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr "No"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "No s'ha fet cap canvi."
 
-#: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/layout.py:14 ../browser/overview.py:33
 msgid "Overview"
 msgstr "Resum"
 
 #: ../browser/types.py:63
 msgid "Please select a single type to clone."
-msgstr "Si us plau, seleccioneu un únic tipus de contingut per la clonació."
+msgstr ""
+"Si us plau, seleccioneu un únic tipus de contingut per fer la clonació."
 
 #: ../browser/types.py:69
 msgid "Please select a type to clone."
-msgstr "Si us plau, seleccioneu un tipus per la clonació."
+msgstr "Si us plau, seleccioneu un tipus per fer la clonació."
 
 #: ../browser/types.py:76
 msgid "Please select types to export."
@@ -187,29 +203,34 @@ msgstr "Si us plau, seleccioneu els tipus a exportar."
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Si us plau, utilitzeu només lletres, números i els caracters: .-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr "Guardat"
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Seleccioneu els comportaments per aquest tipus de contingut."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22 ../behaviors/exclfromnav.py:16
+#: ../behaviors/nextprevious.py:30
 msgid "Settings"
 msgstr "Configuració"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Nom curt"
 
-#: ../browser/types.py:176
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
-msgstr "Els següents tipus"
+msgstr ""
+"Els següents tipus de contingut personalitzats estan disponibles per al seu "
+"lloc."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "Ja existeix un tipus de contingut anomenat '${name}'"
 
-#: ../interfaces.py:41
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Nom del tipus"
 
@@ -217,31 +238,36 @@ msgstr "Nom del tipus"
 msgid "Type added successfully."
 msgstr "Tipus afegit satisfactòriament."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Tipus clonat satisfactòriament."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Utilitzat per accedir progamàticament al tipus."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr "Sí"
 
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
-msgstr "Cliqueu sobre el botó \"Afegeix tipus de contingut\" per a crear un nou tipus de contingut personalitzat."
+msgstr ""
+"Cliqueu sobre el botó \"Afegeix tipus de contingut\" per a crear un nou "
+"tipus de contingut personalitzat."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
-msgstr "Si està seleccionat, aquest objecte no apareixerà a l'arbre de navegació"
+msgstr ""
+"Si està seleccionat, aquest objecte no apareixerà a l'arbre de navegació"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
-msgstr "Habilita la navegació següent/anterior sobre el contingut de dins d'aquesta carpeta."
+msgstr ""
+"Habilita la navegació següent/anterior sobre el contingut de dins d'aquesta "
+"carpeta."
 
 #. Default: "All content types"
 #: ../browser/overview.pt:24
@@ -251,29 +277,31 @@ msgstr "Tots els tipus de contingut"
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr "Tipus d'elements que pot contindre"
+msgstr "Tipus d'elements que pot contenir"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Exclou de la navegació"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
-msgstr "Aquest tipus actúa de contenidor d'elements d'altres tipus de contingut. Quins tipus de contingut pot contindre?"
+msgstr ""
+"Aquest tipus actúa de contenidor d'elements d'altres tipus de contingut. "
+"Quins tipus de contingut pot contenir?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Habilita la navegació següent/anterior"
 
 #. Default: "No content types"
 #: ../browser/overview.pt:18
 msgid "label_no_content_types"
-msgstr "Cap tipus de contingut"
+msgstr "No hi ha cap tipus de contingut"
 
 #. Default: "Some content types:"
 #: ../browser/overview.pt:30
 msgid "label_some_content_types"
-msgstr "Només aquests tipus de contingut"
+msgstr "Alguns tipus de contingut:"
diff --git a/plone/app/dexterity/locales/cs/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/cs/LC_MESSAGES/plone.app.dexterity.po
index 0e83a7a..302480d 100644
--- a/plone/app/dexterity/locales/cs/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/cs/LC_MESSAGES/plone.app.dexterity.po
@@ -1,174 +1,184 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: Dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
-"PO-Revision-Date: 2011-09-16 10:23+0100\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
+"PO-Revision-Date: 2014-08-24 08:16+0100\n"
 "Last-Translator: Radim Novotny <novotny.radim@gmail.com>\n"
 "Language-Team: Czech <info@dms4u.cz>\n"
 "MIME-Version: 1.0\n"
-"Content-Type: text/plain; charset=utf-8\n"
+"Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
-"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
+"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"
 "Language-Code: cs\n"
 "Language-Name: Czech\n"
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
+"Language: cs\n"
+"X-Generator: Poedit 1.6.8\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
-msgstr ""
+msgstr "počet položek"
 
 #: ../browser/add_type.py:12
 msgid "Add Content Type"
 msgstr "Přidat typ obsahu"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
-msgstr ""
+msgstr "Přidat nový typ obsahu"
 
 msgid "Adds Dublin Core metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)"
-msgstr ""
+msgstr "Přidá Dublin Core metadata (nadpis, popis, kategorizaci, data zveřejnění a expirace, vlastnictví)"
 
 msgid "Adds a title and description"
-msgstr ""
+msgstr "Přidá nadpis a popis"
 
 msgid "Adds creator, contributor, and rights fields"
-msgstr ""
+msgstr "Přidá pole pro autora, přispěvatele a práva"
 
 msgid "Adds keywords and language setting"
-msgstr ""
+msgstr "Přidá nastavení klíčových slov a nastavení jazyka položky"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
-msgstr ""
+msgstr "Povolit diskusi"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
-msgstr ""
+msgstr "Povolit diskusi pro tuto položku"
 
 msgid "Allow items to be excluded from navigation"
-msgstr ""
+msgstr "Umožní položkám být vyloučeny z navigace"
 
 msgid "Allow items to have next previous navigation enabled"
-msgstr ""
+msgstr "Povolí položkám nastavení navigace předchozí-další"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
-msgstr ""
+msgstr "Povolené typy"
 
 msgid "Assign an effective and/or expiration date"
-msgstr ""
+msgstr "Nastavení data zveřejnění a expirace položky."
 
 msgid "Automatically generate short URL name for content based on its initial title"
-msgstr ""
+msgstr "Automaticky generovat krátký název z nadpisu"
 
 msgid "Automatically generate short URL name for content based on its primary field file name"
-msgstr ""
+msgstr "Automaticky generovat krátký název primárního pole"
 
 msgid "Basic metadata"
-msgstr ""
+msgstr "Základní metadata"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
-msgstr ""
+msgstr "Vlastnosti"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
-msgstr ""
+msgstr "Vlastnosti byly aktualizovány."
 
 #: ../browser/types.py:58
 msgid "Clone"
 msgstr "Duplikovat"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Duplikovat typ obsahu"
 
 msgid "Configures various components needed for full Dexterity support."
-msgstr ""
+msgstr "Nastavuje různé komponenty nutné pro správné chování Dexterity typů"
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
-msgstr ""
+msgstr "Slořka"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
-msgstr ""
+msgstr "Popis"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity typy"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
-msgstr ""
+msgstr "Nastavení Dexterity typů"
 
 msgid "Dublin Core metadata"
-msgstr ""
+msgstr "Dublin Core metadata"
 
 msgid "Effective range"
-msgstr ""
+msgstr "Datum účinnosti"
 
 msgid "Enable next previous navigation for all items of this type"
+msgstr "Povolit navigaci předchozí-další pro všechny položky tohoto typu"
+
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
 msgstr ""
 
-msgid "Exclude From navigation"
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
 msgstr ""
 
+msgid "Exclude From navigation"
+msgstr "Vyloučit z navigace"
+
 #: ../browser/types.py:83
 msgid "Export Schema Models"
-msgstr ""
+msgstr "Exportovat modely schema"
 
 #: ../browser/types.py:71
 msgid "Export Type Profiles"
-msgstr ""
+msgstr "Exportovat profily typu"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
-msgstr ""
+msgstr "Pole"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
-msgstr ""
+msgstr "Filtrovat typ vkládaných položek"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
-msgstr ""
+msgstr "Položky tohoto typu budou moci obsahovat další položky"
 
 msgid "Make all items of this type a navigation root"
-msgstr ""
+msgstr "Všechny položky tohoto typu budou kořenem navigace"
 
 msgid "Name from file name"
-msgstr ""
+msgstr "Identifikátor z názvu souboru"
 
 msgid "Name from title"
-msgstr ""
+msgstr "Identifikátor z nadpisu"
 
 msgid "Navigation root"
-msgstr ""
+msgstr "Kořen navigace"
 
 msgid "Next previous navigation"
-msgstr ""
+msgstr "Navigace předchozí-další"
 
 msgid "Next previous navigation toggle"
-msgstr ""
+msgstr "Zapnutí navigace předchozí-další"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
-msgstr ""
+msgstr "Ne"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
-msgstr ""
+msgstr "Nebyly provedeny žádné změny"
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
-msgstr ""
+msgstr "Přehled"
 
 #: ../browser/types.py:63
 msgid "Please select a single type to clone."
@@ -180,101 +190,123 @@ msgstr "Vyberte prosím typ k duplikaci"
 
 #: ../browser/types.py:76
 msgid "Please select types to export."
-msgstr ""
+msgstr "Vyberte prosím typy k exportu"
 
 #: ../interfaces.py:25
 msgid "Please use only letters, numbers, and the following characters: .-_"
+msgstr "Použijte prosím pouze písmena, číslice a znaky .-_"
+
+#: ../browser/modeleditor.py:83
+msgid "Saved"
 msgstr ""
 
-#: ../browser/behaviors.py:59
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
-msgstr ""
+msgstr "Vyberte vlastnosti podporované tímto typem obsahu"
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
-msgstr ""
+msgstr "Nastavení"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
+msgstr "Krátký název"
+
+#: ../behaviors/id.py:23
+msgid "Short name"
 msgstr ""
 
-#: ../browser/types.py:176
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
-msgstr ""
+msgstr "V portálu jsou dostupné následující vlastní typy obsahu"
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
+msgstr "Typ  '${name}' již existuje"
+
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../interfaces.py:43
 msgid "Type Name"
-msgstr ""
+msgstr "Název typu"
 
 #: ../browser/add_type.py:47
 msgid "Type added successfully."
 msgstr "Typ byl úspěšně přidán."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Typ byl úspěšně duplikován."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
-msgstr ""
+msgstr "Používá se k programátorskému přístupu k tomuto typu"
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
+msgstr "Ano"
+
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
 msgstr ""
 
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
-msgstr ""
+msgstr "Chcete-li vytvořit nový typ, klepněte na tlačítko \"Přidat typ obsahu\" "
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
-msgstr ""
+msgstr "Je-li zaškrtnuto, tento typ se nebude objevovat v navigaci"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
-msgstr ""
+msgstr "Povoluje widget pro navigaci předchozí-další pro položky uložené v této slořce."
 
 #. Default: "All content types"
 #: ../browser/overview.pt:24
 msgid "label_all_content_types"
-msgstr ""
+msgstr "Všechny typy položek"
 
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr ""
+msgstr "Vložené položky"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
-msgstr ""
+msgstr "Vyloučit z navigace"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
-msgstr ""
+msgstr "Položky tohoto typu mohou fungovat jako složky pro další položky. Jaké typy položek by měly být v této složce povoleny?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
-msgstr ""
+msgstr "Povolit navigaci předchozí-další"
 
 #. Default: "No content types"
 #: ../browser/overview.pt:18
 msgid "label_no_content_types"
-msgstr ""
+msgstr "Žádné typy"
 
 #. Default: "Some content types:"
 #: ../browser/overview.pt:30
 msgid "label_some_content_types"
-msgstr ""
+msgstr "Některé typy obsahu"
 
diff --git a/plone/app/dexterity/locales/da/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/da/LC_MESSAGES/plone.app.dexterity.po
index e1b33d5..73c0f52 100644
--- a/plone/app/dexterity/locales/da/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/da/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2012-08-28 18:13+0100\n"
 "Last-Translator: Thomas Clement Mogensen <tmog@headnet.dk>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -14,7 +14,7 @@ msgstr ""
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "antal emner"
 
@@ -22,7 +22,7 @@ msgstr "antal emner"
 msgid "Add Content Type"
 msgstr "Tilføj Indholdstype"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr ""
 
@@ -38,11 +38,11 @@ msgstr "Tilføjer felter til Opretter, Bidragsydere og Rettigheder "
 msgid "Adds keywords and language setting"
 msgstr "Tilføjer filter til Kategorisering og Sprogindstillinger"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -52,7 +52,7 @@ msgstr ""
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Tillad indholdsobjekter at vise navigering til forrige og næste side"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -68,12 +68,12 @@ msgstr "Generér automatisk en kort URL, afledt fra indholdsobjektets primære f
 msgid "Basic metadata"
 msgstr "Basal metadata"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Udvidelser (opførsler)"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Opførsler"
 
@@ -81,28 +81,28 @@ msgstr "Opførsler"
 msgid "Clone"
 msgstr "Klon"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Klon indholdstype"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr ""
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Mappe"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Beskrivelse"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity indholdstyper"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterity indholdstyper"
 
@@ -115,6 +115,14 @@ msgstr "Gyldighedsperiode"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Slå navigering til næste og forrige side til for alle indholdsobjekter af denne type"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "Ekskludér fra menunavigation"
 
@@ -126,16 +134,16 @@ msgstr "Eksportér skema-modeller"
 msgid "Export Type Profiles"
 msgstr "Eksportér type-profiler"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Felter"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Disse indholdstyper vil kunne indholde andre indholdsobjekter."
 
@@ -157,16 +165,16 @@ msgstr "Næste-/forrige-navigation"
 msgid "Next previous navigation toggle"
 msgstr "Næste-/forrige-navigation til"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "Ingen ændringer blev foretaget."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "Overblik"
 
@@ -186,29 +194,41 @@ msgstr "Vælg venligst de typer der skal eksporteres."
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Brug venligst kun bogstaver (a-z), tal, og følgende tegn: .-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Vælg de udvidelser der skal slås til for denne indholdstype."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Indstillinger"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Kort navn"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "Følgende indholdstyper er tilgængelige på sitet."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Indholdstypenavn"
 
@@ -216,30 +236,40 @@ msgstr "Indholdstypenavn"
 msgid "Type added successfully."
 msgstr "Indholdstypen blev tilføjet"
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Indholdstypen blev klonet"
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Bruges ved programmatisk tilgang til indholdstypen."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Klik på knappen \"Tilføj indholdstype\" for at oprette en ny type."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Hvis valgt, vil dette indholdsobjekt ikke blive vist i menunavigationen"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Slå næste-/forrige-navigation til på indhold placeret i denne mappe."
 
@@ -254,17 +284,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Ekskludér fra menunavigation"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Næste-/forrige-navigation"
 
diff --git a/plone/app/dexterity/locales/de/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/de/LC_MESSAGES/plone.app.dexterity.po
index bb5bbc4..f75f09f 100644
--- a/plone/app/dexterity/locales/de/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/de/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
 "Last-Translator: Timo Stollenwerk <contact@timostollenwerk.net>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -15,7 +15,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: de-at de-li de-lu de-ch de-de\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "Anzahl"
 
@@ -23,12 +23,12 @@ msgstr "Anzahl"
 msgid "Add Content Type"
 msgstr "Inhaltstyp hinzufügen"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
-msgstr "Neuen Inhaltstypen hinzufügen"
+msgstr "Neuen Inhaltstypen hinzufügen…"
 
 msgid "Adds Dublin Core metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)"
-msgstr "Fügt Dublin Core Metadatenfelder hinzu (Basis Metadaten + Kategorisierung + Zeitraum + Urheber)"
+msgstr "Fügt Dublin Core Metadatenfelder hinzu (Basis Metadaten + Kategorisierung + Veröffentlichungs-Zeitraum + Urheber)"
 
 msgid "Adds a title and description"
 msgstr "Fügt Titel und Beschreibung hinzu"
@@ -39,13 +39,13 @@ msgstr "Fügt Ersteller, Beitragende und Berechtigungen hinzu"
 msgid "Adds keywords and language setting"
 msgstr "Fügt Keywords und Spracheinstellungen hinzu"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
-msgstr ""
+msgstr "Diskussion erlauben"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
-msgstr ""
+msgstr "Erlaubt Diskussionsbeiträge für diesen Inhalt."
 
 msgid "Allow items to be excluded from navigation"
 msgstr "Erlaubt es, Objekte von der Navigation auszuschließen"
@@ -53,57 +53,57 @@ msgstr "Erlaubt es, Objekte von der Navigation auszuschließen"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Erlaubt für Objekte eine zurück/weiter-Navigation zu aktivieren"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
-msgstr ""
+msgstr "Erlaubte Inhaltstypen"
 
 msgid "Assign an effective and/or expiration date"
 msgstr "Erlaubt die Vergabe eines Freigabe- oder Ablaufdatums"
 
 msgid "Automatically generate short URL name for content based on its initial title"
-msgstr "Automatische Erstellung einer Kurz-URL für Inhalt basierend auf dem zuerst eingegebenen Titel"
+msgstr "Automatische Erstellung einer Kurz-URL für Inhalt, basierend auf dem zuerst eingegebenen Titel."
 
 msgid "Automatically generate short URL name for content based on its primary field file name"
-msgstr "Automatische Erstellung einer Kurz-URL für Inhalt basierend auf dem zuerst eingegebenen Titel"
+msgstr "Automatische Erstellung einer Kurz-URL für Inhalt, basierend auf dem Dateinamen des Hauptfeldes."
 
 msgid "Basic metadata"
-msgstr "Metadaten"
+msgstr "Basis Metadaten"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
-msgstr "Behaviors"
+msgstr "Verhalten"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
-msgstr "Behaviors erfolgreich aktualisiert"
+msgstr "Verhalten erfolgreich aktualisiert."
 
 #: ../browser/types.py:58
 msgid "Clone"
 msgstr "Duplizieren"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Inhaltstyp duplizieren"
 
 msgid "Configures various components needed for full Dexterity support."
-msgstr "Konfiguration verschiedener Komponenten die für Dexterity notwendig sind"
+msgstr "Konfiguration verschiedener Komponenten, die für den vollständigen Dexterity Funktionsumfang notwendig sind."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
-msgstr "Ordner"
+msgstr "Basisordner"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Beschreibung"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity Inhaltstypen"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterity Inhaltstypen"
 
@@ -111,10 +111,18 @@ msgid "Dublin Core metadata"
 msgstr "Dublin Core Metadaten"
 
 msgid "Effective range"
-msgstr "Zeitraum Veröffentlichungsdatum"
+msgstr "Veröffentlichungs-Zeitraum"
 
 msgid "Enable next previous navigation for all items of this type"
-msgstr "Aktiviere zurück/vor-Navigation für alle Objekte dieses Typs"
+msgstr "Aktiviert die zurück/vor-Navigation für alle Artikel dieses Inhaltstyps"
+
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr "Fehler: Root-Tag muss 'model' sein."
 
 msgid "Exclude From navigation"
 msgstr "Von der Navigation ausschließen"
@@ -127,27 +135,27 @@ msgstr "Schemamodell exportieren"
 msgid "Export Type Profiles"
 msgstr "Inhaltstyp-Profile exportieren"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Felder"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
-msgstr ""
+msgstr "Beinhaltete Inhaltstypen einschränken"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
-msgstr "Objekte diese Typs können andere Objekte enthalten"
+msgstr "Artikel diese Typs können andere Artikel enthalten."
 
 msgid "Make all items of this type a navigation root"
-msgstr "Alle Objekte dieses Types zur Navigations-Wurzel"
+msgstr "Macht alle Artikel dieses Typs zur Navigations-Wurzel"
 
 msgid "Name from file name"
-msgstr "Name vom Dateinamen"
+msgstr "Kurznamen vom Dateinamen ableiten"
 
 msgid "Name from title"
-msgstr "Name vom Titel"
+msgstr "Kurznamen vom Titel ableiten"
 
 msgid "Navigation root"
 msgstr "Navigations-Wurzel"
@@ -156,126 +164,148 @@ msgid "Next previous navigation"
 msgstr "Vor/zurück-Navigation"
 
 msgid "Next previous navigation toggle"
-msgstr "Vor/zurück-Navigation Umschalter"
+msgstr "Umschalter für Vor/zurück-Navigation"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
-msgstr ""
+msgstr "Nein"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
-msgstr "Keine Änderungen vorgenommen"
+msgstr "Es wurden keine Änderungen vorgenommen."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "Übersicht"
 
 #: ../browser/types.py:63
 msgid "Please select a single type to clone."
-msgstr "Bitte wählen sie eine einzelnen Typen zum Duplizieren"
+msgstr "Wählen sie einen einzelnen Inhaltstypen zum Duplizieren aus."
 
 #: ../browser/types.py:69
 msgid "Please select a type to clone."
-msgstr "Bitte wählen sie einen Typen zum Duplizieren"
+msgstr "Wählen sie einen Inhaltstypen zum Duplizieren aus."
 
 #: ../browser/types.py:76
 msgid "Please select types to export."
-msgstr "Bitte wählen sie Tpyen zum Duplizieren"
+msgstr "Wählen sie die Inhaltstypen zum Exportieren aus."
 
 #: ../interfaces.py:25
 msgid "Please use only letters, numbers, and the following characters: .-_"
-msgstr "Verwenden sie bitte nur Buchstaben, Nummern und die folgenden Zeichen .-_"
+msgstr "Verwenden sie bitte nur Buchstaben, Nummern und die folgenden Zeichen: .-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr "Gespeichert"
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
-msgstr "Wählen sie ein zu aktivierendes Behavior für diesen Inhaltstypen"
+msgstr "Wählen sie die zu aktivierenden Verhalten für diesen Inhaltstypen."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Einstellungen"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Kurzname"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr "Kurzname"
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
-msgstr "Die Folgenden Inhaltstypen sind für ihre Seite verfügbar"
+msgstr "Die Folgenden Inhaltstypen sind für ihre Seite verfügbar."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "Es gibt bereits einen Inhaltstypen mit dem Namen '${name}'"
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr "Dieser Name wird in der Adressleiste des Browsers angezeigt."
+
+#: ../interfaces.py:43
 msgid "Type Name"
-msgstr "Typname"
+msgstr "Name des Inhaltstyps"
 
 #: ../browser/add_type.py:47
 msgid "Type added successfully."
-msgstr "Typ erfolgreich hinzugefügt"
+msgstr "Inhaltstyp erfolgreich hinzugefügt."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
-msgstr "Typ erfolgreich dupliziert"
+msgstr "Inhaltstyp erfolgreich dupliziert."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
-msgstr ""
+msgstr "Wird für den programmatischen Zugriff auf diesen Inhaltstyp benötigt."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
-msgstr ""
+msgstr "Ja"
+
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr "Das Ablaufdatum muss nach dem Publikationsdatum sein."
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr "Ungültiges Publikation- oder Ablaufdatum"
 
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Klicken sie auf den \"Inhaltstypen hinzufügen\"-Button um einen neuen Inhaltstypen zu erstellen."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
-msgstr "Wenn sie diese Einstellung auswählen, erscheint dieses Objekt nicht in der Navigation"
+msgstr "Wenn sie diese Einstellung auswählen, erscheint dieser Artikel nicht in der Navigation"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
-msgstr "Diese Einstellung aktiviert das vor/zurück-Widget für Inhaltsobjekte welche in diesem Ordner liegen."
+msgstr "Diese Einstellung aktiviert die vor/zurück-Navigation für Artikel, welche in diesem Ordner liegen."
 
 #. Default: "All content types"
 #: ../browser/overview.pt:24
 msgid "label_all_content_types"
-msgstr ""
+msgstr "Alle Inhaltstypen"
 
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr ""
+msgstr "Beinhaltete Inhaltstypen"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Von der Navigation ausschließen"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
-msgstr ""
+msgstr "Artikel dieses Typs können sich wie ein Ordner verhalten, der andere Artikel enthält. Welche Inhaltstypen dürfen enthalten sein?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "vor/zurück-Navigation"
 
 #. Default: "No content types"
 #: ../browser/overview.pt:18
 msgid "label_no_content_types"
-msgstr ""
+msgstr "Keine Inhaltstypen"
 
 #. Default: "Some content types:"
 #: ../browser/overview.pt:30
 msgid "label_some_content_types"
-msgstr ""
+msgstr "Einige Inhaltstypen"
 
diff --git a/plone/app/dexterity/locales/es/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/es/LC_MESSAGES/plone.app.dexterity.po
index 0b14f84..a1b7b4f 100644
--- a/plone/app/dexterity/locales/es/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/es/LC_MESSAGES/plone.app.dexterity.po
@@ -1,30 +1,30 @@
-# Héctor Velarde <hector.velarde@gmail.com>, 2011.
 msgid ""
 msgstr ""
 "Project-Id-Version: plone.app.dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-12-12 11:42+0000\n"
 "PO-Revision-Date: 2012-02-01 16:22-0400\n"
-"Last-Translator: Héctor Velarde <hector.velarde@gmail.com>\n"
+"Last-Translator: Roberto Díaz <plone.team@upcnet.es>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=utf-8\n"
 "Content-Transfer-Encoding: 8bit\n"
-"Plural-Forms: nplurals=2; plural=n != 1;\n"
+"Plural-Forms: nplurals=2; plural=(n != 1);\n"
+"Language: es\n"
 "Language-Code: es\n"
 "Language-Name: Español\n"
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: es-ar es-bo es-cl es-co es-cr es-do es-ec es-es es-sv es-gt es-hn es-mx es-ni es-pa es-py es-pe es-pr es-us es-uy es-ve\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
-msgstr ""
+msgstr "# de elementos"
 
 #: ../browser/add_type.py:12
 msgid "Add Content Type"
 msgstr "Agregar tipo de contenido"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:84
 msgid "Add New Content Type…"
 msgstr "Agregar nuevo tipo de contenido…"
 
@@ -40,23 +40,23 @@ msgstr "Agrega los campos creador, colaboradores y derechos de autor"
 msgid "Adds keywords and language setting"
 msgstr "Agrega los campos etiquetas e idioma"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
-msgstr ""
+msgstr "Permitir comentarios"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
-msgstr ""
+msgstr "Permitir comentarios para este tipo de contenido"
 
 msgid "Allow items to be excluded from navigation"
-msgstr ""
+msgstr "Permitir elementos excluidos de la navegación"
 
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Permite a los elementos tener habilitada la navegación siguiente/anterior"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
-msgstr ""
+msgstr "Tipos de contenido permitidos"
 
 msgid "Assign an effective and/or expiration date"
 msgstr "Asigna una fecha de publicación y/o de terminación"
@@ -70,12 +70,12 @@ msgstr "Genera automáticamente un URL con base en el nombre del archivo"
 msgid "Basic metadata"
 msgstr "Metadatos básicos"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Comportamientos"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Los comportamientos se actualizaron exitosamente."
 
@@ -83,28 +83,28 @@ msgstr "Los comportamientos se actualizaron exitosamente."
 msgid "Clone"
 msgstr "Clonar"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Clonar tipo de contenido"
 
 msgid "Configures various components needed for full Dexterity support."
-msgstr ""
+msgstr "Configura diversos componentes necesarios para soporte completo de Dexterity"
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Contenedor"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Descripción"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Tipos de contenido Dexterity"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Tipos de contenido Dexterity"
 
@@ -117,6 +117,14 @@ msgstr "Rango effectivo"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Habilitar la navegación siguiente/anterior para todos los elementos de este tipo"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr "Error: todos los elementos 'model' han de ser de tipo 'schema'"
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr "Error: la etiqueta raíz debe ser 'model'"
+
 msgid "Exclude From navigation"
 msgstr "Excluir de la navegación"
 
@@ -128,21 +136,21 @@ msgstr "Exportar los modelos del esquema"
 msgid "Export Type Profiles"
 msgstr "Exportar los perfiles del tipo"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Campos"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
-msgstr ""
+msgstr "Filtrar elementos contenidos"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Los elementos de este tipo serán capaces de contener otros elementos."
 
 msgid "Make all items of this type a navigation root"
-msgstr ""
+msgstr "Marcar todos los elementos de este tipo como raíz de la navegación"
 
 msgid "Name from file name"
 msgstr "Nombre a partir del nombre del archivo"
@@ -159,26 +167,26 @@ msgstr "Navegación siguiente/anterior"
 msgid "Next previous navigation toggle"
 msgstr "Cambiar navegación siguiente/próximo"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
-msgstr ""
+msgstr "No"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "No se realizaron cambios."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
-msgstr ""
+msgstr "Resumen"
 
 #: ../browser/types.py:63
 msgid "Please select a single type to clone."
-msgstr "Por favor selecciones un único tipo para clonar."
+msgstr "Por favor seleccione un único tipo para clonar."
 
 #: ../browser/types.py:69
 msgid "Please select a type to clone."
-msgstr "Por favor selecciones un tipo para clonar."
+msgstr "Por favor seleccione un tipo para clonar."
 
 #: ../browser/types.py:76
 msgid "Please select types to export."
@@ -188,95 +196,101 @@ msgstr "Por favor seleccione los tipos a exportar."
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Por favor utilice únicamente letras, números y los siguientes caracteres: _."
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr "Guardado"
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Seleccione los comportamientos que estarán habilitados para este tipo de contenido."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/nextprevious.py:30
 msgid "Settings"
 msgstr "Configuración"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Nombre corto"
 
-#: ../browser/types.py:176
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "Los siguientes tipos de contenido personalizados están disponibles en su sitio."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
-msgstr ""
+msgstr "Ya existe un tipo de contenido llamado '${name}'"
 
-#: ../interfaces.py:41
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Nombre del tipo"
 
 #: ../browser/add_type.py:47
 msgid "Type added successfully."
-msgstr "Tipo adicionado exitosamente."
+msgstr "Elemento añadido satisfactoriamente."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
-msgstr "Tipo clonado exitosamente."
+msgstr "Elemento clonado satisfactoriamente."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Empleado para acceso programático al tipo."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
-msgstr ""
+msgstr "Sí"
 
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Haga clic sobre el botón \"Agregar tipo de contenido\" para comenzar a crear un nuevo tipo de contenido personalizado."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Si está seleccionado, este elemento no aparecerá en el árbol de navegación"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Esto habilita el widget siguiente/próximo en los elementos contenidos en esta carpeta."
 
 #. Default: "All content types"
 #: ../browser/overview.pt:24
 msgid "label_all_content_types"
-msgstr ""
+msgstr "Todos los tipos de contenido"
 
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr ""
+msgstr "Elementos contenidos"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Excluir de la navegación"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
+"Este tipo de elemento actúa de contenedor de elemento de otros tipos de contenido. "
+"Qué tipos de elementos puede contener?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Habilitar la navegación siguiente/anterior"
 
 #. Default: "No content types"
 #: ../browser/overview.pt:18
 msgid "label_no_content_types"
-msgstr ""
+msgstr "No hay nigún tipo de elemento"
 
 #. Default: "Some content types:"
 #: ../browser/overview.pt:30
 msgid "label_some_content_types"
-msgstr ""
+msgstr "algún tipo de elemento:"
 
diff --git a/plone/app/dexterity/locales/eu/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/eu/LC_MESSAGES/plone.app.dexterity.po
index 154b9ed..a4c81c1 100644
--- a/plone/app/dexterity/locales/eu/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/eu/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: plone.app.dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2012-02-09 18:16+0100\n"
 "Last-Translator: Mikel Larreategi <mlarreategi@codesyntax.com>\n"
 "Language-Team: eu <eu@li.org>\n"
@@ -16,7 +16,7 @@ msgstr ""
 "X-Is-Fallback-For: eu-es\n"
 "X-Poedit-Language: Basque\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr ""
 
@@ -24,7 +24,7 @@ msgstr ""
 msgid "Add Content Type"
 msgstr "Elementu-mota gehitu"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "Elementu-mota berria gehitu"
 
@@ -40,11 +40,11 @@ msgstr "Sortzaileak, parte-hartzaileak eta eskubideen eremuak"
 msgid "Adds keywords and language setting"
 msgstr "Etiketak eta hizkuntzaren eremua gehitu"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -54,7 +54,7 @@ msgstr ""
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Elementuak \"aurrekoa-hurrengoa\" nabigazioa izatea aktibatu"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -70,12 +70,12 @@ msgstr "Elementuaren helbidea fitxategi-eremuan dagoen fitxategiaren izenaren ar
 msgid "Basic metadata"
 msgstr "Oinarrizko metadatuak"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Portaerak"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Portaerak ondo eguneratu dira."
 
@@ -83,28 +83,28 @@ msgstr "Portaerak ondo eguneratu dira."
 msgid "Clone"
 msgstr "Klonatu"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Elementu-mota klonatu"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr ""
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Edukiontzia"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Deskribapena"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity elementu-motak"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterity elementu-motak"
 
@@ -117,6 +117,14 @@ msgstr "Argitaratze-tartea"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Elementuak \"aurrekoa-hurrengoa\" nabigazioa izatea aktibatu"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "Nabigaziotik baztertu"
 
@@ -128,16 +136,16 @@ msgstr "Eskema modeloak esportatu"
 msgid "Export Type Profiles"
 msgstr "Moten profilak esportatu"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Eremuak"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Elementu-mota honetara beste elementu batzuk gehitu daitezke"
 
@@ -159,16 +167,16 @@ msgstr "Aurrekoa/Hurrengoa nabigazioa"
 msgid "Next previous navigation toggle"
 msgstr "Aurrekoa/Hurrengoa nabigazioa aukera"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "Ez da aldaketarik egin."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr ""
 
@@ -188,29 +196,41 @@ msgstr "Esportatu beharreko elementu-motak aukeratu."
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Hizkiak, zenbakiak eta ., - edo _ karaktereak bakarrik erabili"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Elementu-mota honi aktibatuko zaizkion portaerak aukeratu."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Ezarpenak"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Izen-laburra"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "Zure atarian elementu-mota hauek daude"
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Elementu-motaren izena"
 
@@ -218,30 +238,40 @@ msgstr "Elementu-motaren izena"
 msgid "Type added successfully."
 msgstr "Elementu-mota ondo gehitu da."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Elementu-mota ondo klonatu da."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Elementu-mota programaziotik erabiltzeko."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Egin klik \"Elementu-mota gehitu\" botoian elementu-mota berri bat sortzen hasteko."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Hautatu badago, elementu hau ez da nabigazio zuhaitzean agertuko"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Honek, karpeta honen edukientzat aurrekoak/hurrengoak estekak aktibatzen ditu."
 
@@ -256,17 +286,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Nabigaziotik baztertu "
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Aurreko/hurrengoetarako nabigazioa aktibatu "
 
diff --git a/plone/app/dexterity/locales/fr/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/fr/LC_MESSAGES/plone.app.dexterity.po
index adac2ef..329ce29 100644
--- a/plone/app/dexterity/locales/fr/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/fr/LC_MESSAGES/plone.app.dexterity.po
@@ -4,7 +4,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2013-04-07 00:15+0100\n"
 "Last-Translator: Thomas Desvenain <thomas.desvenain@gmail.com>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -18,7 +18,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: fr-be fr-ca fr-lu fr-mc fr-ch fr-fr\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "Nombre d'éléments"
 
@@ -26,7 +26,7 @@ msgstr "Nombre d'éléments"
 msgid "Add Content Type"
 msgstr "Ajouter un type de contenu"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "Ajouter un type de contenu…"
 
@@ -42,11 +42,11 @@ msgstr "Ajoute les champs créateur, contributeur et droits"
 msgid "Adds keywords and language setting"
 msgstr "Ajoute les champs mots-clés et langue"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr "Autoriser les commentaires"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr "Autoriser les commentaires pour cet objet de contenu."
 
@@ -56,7 +56,7 @@ msgstr "Permettre aux éléments d'être exclus de la navigation"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Permet la navigation précédent/suivant sur les éléments"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr "Types de contenus autorisés"
 
@@ -72,12 +72,12 @@ msgstr "Le nom court pour l'URL est généré à partir du nom du fichier princi
 msgid "Basic metadata"
 msgstr "Métadonnées de base"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Comportements"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Comportements mis à jour avec succès."
 
@@ -85,28 +85,28 @@ msgstr "Comportements mis à jour avec succès."
 msgid "Clone"
 msgstr "Dupliquer"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Dupliquer un type de contenu"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr "Configure les composants requis pour le support complet de Dexterity."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Conteneur"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Description"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Types de Contenu Dexterity"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Types de contenu Dexterity"
 
@@ -119,6 +119,14 @@ msgstr "Période de validité"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Autoriser précédent/suivant"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "Exclure de la navigation"
 
@@ -130,16 +138,16 @@ msgstr "Exporter les modèles de schémas"
 msgid "Export Type Profiles"
 msgstr "Exporter les profils des Types"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Champs"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr "Filtrer les types de contenus autorisés"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Les items de ce type pourront contenir d'autres items."
 
@@ -161,16 +169,16 @@ msgstr "Navigation précédent/suivant"
 msgid "Next previous navigation toggle"
 msgstr "Activer/désactiver la navigation précédent/suivant"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr "Non"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "Aucun changement effectué."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "Aperçu"
 
@@ -190,29 +198,41 @@ msgstr "Veuillez sélectionner les types à exporter."
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Veuillez n'utiliser que des lettres, des nombres, et les caractères : .-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Choisissez les comportements à activer pour ce type de contenu."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Paramètres"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Nom court"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "Les types de contenus personnalisés suivants sont disponibles sur votre site."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "Il y a déjà un type de contenu nommé '${name}'"
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Nom du type"
 
@@ -220,30 +240,40 @@ msgstr "Nom du type"
 msgid "Type added successfully."
 msgstr "Type ajouté avec succès."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Type dupliqué avec succès."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Utilisé pour l'accès programmatique au type."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr "Oui"
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Cliquez sur le bouton \"Ajouter un Type de Contenu\" pour commencer la création d'un type personnalisé."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Cochez cette case pour que ce contenu n'apparaisse pas dans la navigation"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Cochez cette case pour permettre la navigation précédent/suivant entre les contenus de ce dossier"
 
@@ -258,17 +288,17 @@ msgid "label_contained_items"
 msgstr "Élément contenus"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Exclure de la navigation"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr "Les éléments de ce type fonctionnent comme des dossiers. Quels types de contenu peuvent-ils contenir ?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Autoriser la navigation précédent/suivant"
 
diff --git a/plone/app/dexterity/locales/it/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/it/LC_MESSAGES/plone.app.dexterity.po
index 0ae5d57..2353c31 100644
--- a/plone/app/dexterity/locales/it/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/it/LC_MESSAGES/plone.app.dexterity.po
@@ -1,10 +1,10 @@
 # Translation of plone.app.dexterity.pot to Italian
 # Giacomo Spettoli, 2011.
-# 
+#
 msgid ""
 msgstr ""
 "Project-Id-Version: plone.app.dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2011-11-21 21:10+0100\n"
 "Last-Translator: Giacomo Spettoli <giacomo.spettoli@gmail.com>\n"
 "Language-Team: Plone i18n <plone-i18n@lists.sourceforge.net>\n"
@@ -18,7 +18,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: it-ch it-it\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "# di elementi"
 
@@ -26,7 +26,7 @@ msgstr "# di elementi"
 msgid "Add Content Type"
 msgstr "Aggiungi tipo di contenuto"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "Aggiungi un nuovo tipo di contenuto…"
 
@@ -42,11 +42,11 @@ msgstr "Aggiunge i campi creatori, contributori, e diritti"
 msgid "Adds keywords and language setting"
 msgstr "Aggiunge le categorie e l'impostazione della lingua"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -56,7 +56,7 @@ msgstr "Permette agli elementi di essere esclusi dalla navigazione"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Permette ai contenuti di avere la navigazione precedente successivo abilitata"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -72,12 +72,12 @@ msgstr "Generazione automatica del nome breve URL per il contenuto in base al no
 msgid "Basic metadata"
 msgstr "Metadati di base"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Comportamenti"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "I comportamenti sono stati aggiornati con successo."
 
@@ -85,28 +85,28 @@ msgstr "I comportamenti sono stati aggiornati con successo."
 msgid "Clone"
 msgstr "Copia"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Copia il tipo di contenuto"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr "Configura i vari componenti necessari per il supporto completo a Dexterity."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Contenitore"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Descrizione"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Tipi di contenuto Dexterity"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Tipi di contenuto Dexterity"
 
@@ -119,6 +119,14 @@ msgstr "Durata effettiva"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Abilita la navigazione precedente successivo per tutti i contenuti di questo tipo"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "Escludi dalla navigazione"
 
@@ -130,16 +138,16 @@ msgstr "Esporta i modelli di Schema"
 msgid "Export Type Profiles"
 msgstr "Esporta i profili del Tipo di contenuto"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Campi"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "I contenuti di questo tipo potranno contenere altri contenuti."
 
@@ -161,16 +169,16 @@ msgstr "Navigazione precedente successivo"
 msgid "Next previous navigation toggle"
 msgstr "Alterna la navigazione precedente successivo"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "Nessun cambiamento apportato."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "Anteprima"
 
@@ -190,29 +198,41 @@ msgstr "Seleziona i tipi da esportare"
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Utilizzare solo lettere, numeri o i seguenti caratteri: .-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Seleziona i comportamenti da abilitare per questo tipo di contenuto."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Impostazioni"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Nome breve"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "I seguenti tipi di contenuto personalizzati sono disponibili per questo sito."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "Esiste già un tipo di contenuto chiamato '${name}'"
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Nome del tipo"
 
@@ -220,30 +240,40 @@ msgstr "Nome del tipo"
 msgid "Type added successfully."
 msgstr "Il tipo di contenuto è stato aggiunto con successo."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Tipo di contenuto copiato con successo."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Utilizzato per l'accesso programmatico al tipo di contenuto."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Clicca su \"Aggiungi tipo di contenuto\" per iniziare la creazione di un nuovo tipo di contenuto personalizzato."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Se selezionato, questo contenuto non apparirà nell'albero di navigazione"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Abilita il widget precedente/successivo sui contenuti presenti in questa cartella."
 
@@ -258,17 +288,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Escludi dalla navigazione"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Abilita la navigazione precedente successivo"
 
diff --git a/plone/app/dexterity/locales/ja/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/ja/LC_MESSAGES/plone.app.dexterity.po
index eddfcf1..40a1a0a 100644
--- a/plone/app/dexterity/locales/ja/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/ja/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2011-05-20 15:13+0800\n"
 "Last-Translator: retsu <retsuyam@gmail.com>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -15,7 +15,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: ja-jp\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr ""
 
@@ -23,7 +23,7 @@ msgstr ""
 msgid "Add Content Type"
 msgstr "コンテンツタイプを追加"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "新しいコンテンツタイプを追加..."
 
@@ -39,11 +39,11 @@ msgstr "作者、貢献者、権利といったフィールドを追加"
 msgid "Adds keywords and language setting"
 msgstr "キーワードと言語設定を追加"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -53,7 +53,7 @@ msgstr ""
 msgid "Allow items to have next previous navigation enabled"
 msgstr "アイテムについて、次・前ナビゲーションを有効にする"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -69,12 +69,12 @@ msgstr "コンテンツの主要フィールドファイル名を基にして、
 msgid "Basic metadata"
 msgstr "基本メタデータ"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "振る舞い"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "振る舞いが更新されました"
 
@@ -82,28 +82,28 @@ msgstr "振る舞いが更新されました"
 msgid "Clone"
 msgstr "複製"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "コンテンツタイプを複製する"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr ""
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "コンテナ"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "説明"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterityコンテンツタイプ"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterityコンテンツタイプ"
 
@@ -116,6 +116,14 @@ msgstr "有効期間"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "このタイプのアイテムについて、次・前ナビゲーションを有効にする"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "ナビゲーションから除外する"
 
@@ -127,16 +135,16 @@ msgstr "スキーマモデルをエクポート"
 msgid "Export Type Profiles"
 msgstr "タイププロファイルをエクスポート"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "フィールド"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "このタイプのアイテムは、他のアイテムを含めることができます"
 
@@ -158,16 +166,16 @@ msgstr "次・前ナビゲーション"
 msgid "Next previous navigation toggle"
 msgstr "次・前ナビゲーションのトグル"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "何も変更されていません"
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr ""
 
@@ -187,29 +195,41 @@ msgstr "エクスポートするタイプを選んでください（複数選択
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "文字、数字、記号 \".\", \"-\", \"_\" だけを使うようにしてください"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "このコンテンツタイプに対して有効にする振る舞いを選んでください"
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "設定"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "ショートネーム"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "次のカスタムコンテンツタイプがあなたのサイトで利用できます"
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "タイプ名"
 
@@ -217,30 +237,40 @@ msgstr "タイプ名"
 msgid "Type added successfully."
 msgstr "タイプが追加されました"
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "タイプが複製されました"
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "プログラム的にタイプにアクセスするのに使われます"
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "新しいカスタムコンテンツタイプを作り始めるには、「コンテンツタイプを追加」ボタンをクリックします"
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "選ばれると、このアイテムはナビゲーションツリーに現れなくなります"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "このフォルダに含まれるコンテンツアイテムについて、次・前ウィジェットを有効にします。"
 
@@ -255,17 +285,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "ナビゲーションから除外"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "次・前ナビゲーションを有効化"
 
diff --git a/plone/app/dexterity/locales/nl/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/nl/LC_MESSAGES/plone.app.dexterity.po
index 50db3bc..794c0c7 100644
--- a/plone/app/dexterity/locales/nl/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/nl/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -15,7 +15,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: nl-be nl-nl\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr ""
 
@@ -23,7 +23,7 @@ msgstr ""
 msgid "Add Content Type"
 msgstr ""
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr ""
 
@@ -39,11 +39,11 @@ msgstr ""
 msgid "Adds keywords and language setting"
 msgstr ""
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -53,7 +53,7 @@ msgstr ""
 msgid "Allow items to have next previous navigation enabled"
 msgstr ""
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -69,12 +69,12 @@ msgstr ""
 msgid "Basic metadata"
 msgstr ""
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr ""
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr ""
 
@@ -82,28 +82,28 @@ msgstr ""
 msgid "Clone"
 msgstr ""
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr ""
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr ""
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr ""
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr ""
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr ""
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr ""
 
@@ -116,6 +116,14 @@ msgstr ""
 msgid "Enable next previous navigation for all items of this type"
 msgstr ""
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr ""
 
@@ -127,16 +135,16 @@ msgstr ""
 msgid "Export Type Profiles"
 msgstr ""
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr ""
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr ""
 
@@ -158,16 +166,16 @@ msgstr ""
 msgid "Next previous navigation toggle"
 msgstr ""
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr ""
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr ""
 
@@ -187,29 +195,41 @@ msgstr ""
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr ""
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr ""
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr ""
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr ""
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr ""
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr ""
 
@@ -217,30 +237,40 @@ msgstr ""
 msgid "Type added successfully."
 msgstr ""
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr ""
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr ""
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr ""
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr ""
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr ""
 
@@ -255,17 +285,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr ""
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr ""
 
diff --git a/plone/app/dexterity/locales/plone.app.dexterity.pot b/plone/app/dexterity/locales/plone.app.dexterity.pot
index f23fa4a..fac810c 100644
--- a/plone/app/dexterity/locales/plone.app.dexterity.pot
+++ b/plone/app/dexterity/locales/plone.app.dexterity.pot
@@ -4,7 +4,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -17,7 +17,7 @@ msgstr ""
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr ""
 
@@ -25,7 +25,7 @@ msgstr ""
 msgid "Add Content Type"
 msgstr ""
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr ""
 
@@ -41,11 +41,11 @@ msgstr ""
 msgid "Adds keywords and language setting"
 msgstr ""
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -55,7 +55,7 @@ msgstr ""
 msgid "Allow items to have next previous navigation enabled"
 msgstr ""
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -71,12 +71,12 @@ msgstr ""
 msgid "Basic metadata"
 msgstr ""
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr ""
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr ""
 
@@ -84,28 +84,28 @@ msgstr ""
 msgid "Clone"
 msgstr ""
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr ""
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr ""
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr ""
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr ""
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr ""
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr ""
 
@@ -118,6 +118,14 @@ msgstr ""
 msgid "Enable next previous navigation for all items of this type"
 msgstr ""
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr ""
 
@@ -129,16 +137,16 @@ msgstr ""
 msgid "Export Type Profiles"
 msgstr ""
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr ""
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr ""
 
@@ -160,16 +168,16 @@ msgstr ""
 msgid "Next previous navigation toggle"
 msgstr ""
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr ""
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr ""
 
@@ -189,29 +197,41 @@ msgstr ""
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr ""
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr ""
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr ""
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr ""
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr ""
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr ""
 
@@ -219,29 +239,39 @@ msgstr ""
 msgid "Type added successfully."
 msgstr ""
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr ""
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr ""
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
-#: ../browser/types.py:179
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr ""
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr ""
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr ""
 
@@ -256,17 +286,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr ""
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr ""
 
diff --git a/plone/app/dexterity/locales/pt/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/pt/LC_MESSAGES/plone.app.dexterity.po
index bdc2c8a..300f4c7 100644
--- a/plone/app/dexterity/locales/pt/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/pt/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -14,7 +14,7 @@ msgstr ""
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr ""
 
@@ -22,7 +22,7 @@ msgstr ""
 msgid "Add Content Type"
 msgstr ""
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr ""
 
@@ -38,11 +38,11 @@ msgstr ""
 msgid "Adds keywords and language setting"
 msgstr ""
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr ""
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr ""
 
@@ -52,7 +52,7 @@ msgstr ""
 msgid "Allow items to have next previous navigation enabled"
 msgstr ""
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr ""
 
@@ -68,12 +68,12 @@ msgstr ""
 msgid "Basic metadata"
 msgstr ""
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr ""
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr ""
 
@@ -81,28 +81,28 @@ msgstr ""
 msgid "Clone"
 msgstr ""
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr ""
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr ""
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr ""
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr ""
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr ""
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr ""
 
@@ -115,6 +115,14 @@ msgstr ""
 msgid "Enable next previous navigation for all items of this type"
 msgstr ""
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr ""
 
@@ -126,16 +134,16 @@ msgstr ""
 msgid "Export Type Profiles"
 msgstr ""
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr ""
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr ""
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr ""
 
@@ -157,16 +165,16 @@ msgstr ""
 msgid "Next previous navigation toggle"
 msgstr ""
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr ""
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr ""
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr ""
 
@@ -186,29 +194,41 @@ msgstr ""
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr ""
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr ""
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr ""
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr ""
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr ""
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr ""
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr ""
 
@@ -216,30 +236,40 @@ msgstr ""
 msgid "Type added successfully."
 msgstr ""
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr ""
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr ""
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr ""
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr ""
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr ""
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr ""
 
@@ -254,17 +284,17 @@ msgid "label_contained_items"
 msgstr ""
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr ""
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr ""
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr ""
 
diff --git a/plone/app/dexterity/locales/pt_BR/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/pt_BR/LC_MESSAGES/plone.app.dexterity.po
index 8e19c52..77f6536 100644
--- a/plone/app/dexterity/locales/pt_BR/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/pt_BR/LC_MESSAGES/plone.app.dexterity.po
@@ -1,7 +1,7 @@
 msgid ""
 msgstr ""
-"Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"Project-Id-Version: Dexterity\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2012-09-01 21:07-0400\n"
 "Last-Translator: Herson Rodrigues <hersonrodrigues@gmail.com>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -15,7 +15,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: pt-ao pt-gw pt-cv pt-mz pt-pt pt-st\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "# de itens"
 
@@ -23,7 +23,7 @@ msgstr "# de itens"
 msgid "Add Content Type"
 msgstr "Adicionar Tipo de Conteúdo"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "Adicionar novo tipo de conteúdo…"
 
@@ -39,11 +39,11 @@ msgstr "Adiciona os campos criador, colaborador e direitos autorais"
 msgid "Adds keywords and language setting"
 msgstr "Adiciona palavras-chave e configurações de idioma"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr "Permitir comentários"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr "Permitir comentários para este conteúdo."
 
@@ -53,7 +53,7 @@ msgstr "Permite que itens de conteúdo sejam excluídos da navegação"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Permite habilitar a navegação (próximo/anterior) para os items"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr "Tipos de conteúdo permitidos"
 
@@ -69,12 +69,12 @@ msgstr "Gera automáticamente uma URL baseado no nome do arquivo"
 msgid "Basic metadata"
 msgstr "Metadados básicos"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Comportamentos"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Comportamentos atualizados com sucesso."
 
@@ -82,28 +82,28 @@ msgstr "Comportamentos atualizados com sucesso."
 msgid "Clone"
 msgstr "Clonar"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Clonar Tipo de Conteúdo"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr "Configura os vários componentes necessários para suporte ao Dexterity."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Container"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Descrição"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Tipos de conteúdo Dexterity"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Tipos de conteúdo usando Dexterity"
 
@@ -116,6 +116,14 @@ msgstr "Data de Publicação"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Habilitar a navegação próximo/anterior para todos os elementos deste tipo"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "Excluir da navegação"
 
@@ -127,21 +135,21 @@ msgstr "Exportar os modelos de esquema"
 msgid "Export Type Profiles"
 msgstr "Exportar as configurações do tipo"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Campos"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr "Filtrar tipos contidos"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Os itens deste tipo poderão conter outros itens."
 
 msgid "Make all items of this type a navigation root"
-msgstr "Torna todos os itens deste tipo de conteúdo raízes de navegação"
+msgstr "Tornar todos os itens deste tipo de conteúdo, fixos na raíz da navegação"
 
 msgid "Name from file name"
 msgstr "Nome criado a partir do nome do arquivo"
@@ -158,26 +166,26 @@ msgstr "Navegação próximo/anterior"
 msgid "Next previous navigation toggle"
 msgstr "Alterar a navegação próximo/anterior"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr "Não"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "As alterações não foram realizadas."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "Visão geral"
 
 #: ../browser/types.py:63
 msgid "Please select a single type to clone."
-msgstr "Por favor selecione um tipo simples para clonar"
+msgstr "Por favor selecione um tipo simples para clonar."
 
 #: ../browser/types.py:69
 msgid "Please select a type to clone."
-msgstr "Por favor selecione um tipo para clonar"
+msgstr "Por favor selecione um tipo para clonar."
 
 #: ../browser/types.py:76
 msgid "Please select types to export."
@@ -185,31 +193,43 @@ msgstr "Por favor selecione os tipos a serem exportados."
 
 #: ../interfaces.py:25
 msgid "Please use only letters, numbers, and the following characters: .-_"
-msgstr "Por favor use somente letras, números e os seguintes caracteres: _."
+msgstr "Por favor use somente letras, números e os seguintes caracteres: .-_ (ponto, espaço e underline)"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Selecione os comportamentos que serão habilitados para este tipo de conteúdo."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Configurações"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Nome curto"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "Os seguintes tipos de conteúdo personalizados estão disponíveis para o seu site."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
-msgstr "Já existe um tipo de conteúdo com nome '${name}'"
+msgstr "Já existe um tipo de conteúdo com o nome '${name}'"
+
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
 
-#: ../interfaces.py:41
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Nome do tipo"
 
@@ -217,30 +237,40 @@ msgstr "Nome do tipo"
 msgid "Type added successfully."
 msgstr "Tipo adicionado com sucesso."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Tipo clonado com sucesso."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Usado para acessar um tipo de conteúdo programado."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr "Sim"
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Clique no botão \"Adicionar tipo de conteúdo\" para criar um novo tipo de conteúdo personalizado."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Se estiver selecionado, o item não aparecerá na navegação"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Isto habilita o widget próximo/anterior em itens de conteúdo contidos nesta pasta."
 
@@ -252,20 +282,20 @@ msgstr "Todos os tipos de conteúdo"
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr ""
+msgstr "Itens contidos"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Excluir da navegação"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr "Itens deste tipo de conteúdo podem agir como uma Pasta contendo outros itens. Quais tipos de conteúdo devem ser permitidos?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Habilitar a navegação próximo/anterior"
 
diff --git a/plone/app/dexterity/locales/uk/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/uk/LC_MESSAGES/plone.app.dexterity.po
index 6ba467f..6abff4b 100644
--- a/plone/app/dexterity/locales/uk/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/uk/LC_MESSAGES/plone.app.dexterity.po
@@ -1,8 +1,8 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
-"PO-Revision-Date: 2013-02-04 13:22+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
+"PO-Revision-Date: 2013-11-17 21:03+0300\n"
 "Last-Translator: Roman Kozlovskyi <krzroman@gmail.com>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
 "MIME-Version: 1.0\n"
@@ -14,7 +14,7 @@ msgstr ""
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "кількість елементів"
 
@@ -22,7 +22,7 @@ msgstr "кількість елементів"
 msgid "Add Content Type"
 msgstr "Додати Тип Контенту"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "Додати Новий Тип Контенту…"
 
@@ -38,11 +38,11 @@ msgstr "Додає поля автора, співавторів і права 
 msgid "Adds keywords and language setting"
 msgstr "Додає ключові слова і налаштування мови"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr "Дозволити обговорення"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr "Дозволити обговорення для цього контентного об'єкта."
 
@@ -52,9 +52,9 @@ msgstr "Дозволити виключення елементів з навіг
 msgid "Allow items to have next previous navigation enabled"
 msgstr "Дозволити включення наступний/попередній навігації"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
-msgstr ""
+msgstr "Дозволені типи контенту"
 
 msgid "Assign an effective and/or expiration date"
 msgstr "Призначення робочої дати і/або дати придатності"
@@ -68,12 +68,12 @@ msgstr "Автоматичне створення коротких імен URL
 msgid "Basic metadata"
 msgstr "Основні метадані"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Поведінка"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Поведінка успішно оновлена."
 
@@ -81,28 +81,28 @@ msgstr "Поведінка успішно оновлена."
 msgid "Clone"
 msgstr "Клонування"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "Клонування Типу Контенту"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr "Налаштовує різні компоненти, необхідні для повної підтримки Dexterity."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "Контейнер"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "Опис"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity Типи Контенту"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterity типи контенту"
 
@@ -115,6 +115,14 @@ msgstr "Робочий діапазон"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "Увімкнути наступний/попередній навігації для всіх елементів цього типу"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr "Помилка: всі елементи моделі повинні бути 'schema'"
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr "Помилка: кореневий тег повинен бути 'model'"
+
 msgid "Exclude From navigation"
 msgstr "Виключити з навігації"
 
@@ -126,16 +134,16 @@ msgstr "Експорт Схем Моделей"
 msgid "Export Type Profiles"
 msgstr "Експорт Профілів Типів"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "Поля"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
-msgstr ""
+msgstr "Фільтр вкладених типів"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "Елементи такого типу може містити інші елементи."
 
@@ -157,16 +165,16 @@ msgstr "Наступний/попередній навігація"
 msgid "Next previous navigation toggle"
 msgstr "Перемикання наступний/попередній навігації"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr "Ні"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "Зміни не були внесені."
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "Огляд"
 
@@ -186,29 +194,41 @@ msgstr "Будь ласка, виберіть типи для експорту."
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "Будь ласка, використовуйте тільки букви, цифри та наступні символи: .-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr "Збережено"
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "Вибрати поведінки, щоб включити для даного типу контенту."
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "Налаштування"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "Коротка Назва"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "Наступні користувацькі типи контенту доступні для вашого сайту."
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "Існує вже тип контенту з іменем '${name}'"
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "Ім'я Типу"
 
@@ -216,65 +236,75 @@ msgstr "Ім'я Типу"
 msgid "Type added successfully."
 msgstr "Тип успішно додано."
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "Тип успішно клоновано."
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "Використовується для програмного доступу до типу."
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr "Так"
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "Натисніть кнопку \"Додати Тип Контенту\", щоб почати створення нового користувацького типу контенту."
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "Якщо обрано цей пункт, то елемент не буде відображатися в дереві навігації"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "Це дозволяє наступний/попередній віджет на елементів контенту, що містяться в цій папці."
 
 #. Default: "All content types"
 #: ../browser/overview.pt:24
 msgid "label_all_content_types"
-msgstr ""
+msgstr "Всі типи контенту"
 
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr ""
+msgstr "Вкладені елементи"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "Виключити з навігації"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
-msgstr ""
+msgstr "Елемент цього типу може виступати в якості папки, які містять інші елементи. Які типи контенту повинні бути дозволені всередині?"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "Увімкнути наступний/попередній навігацію"
 
 #. Default: "No content types"
 #: ../browser/overview.pt:18
 msgid "label_no_content_types"
-msgstr ""
+msgstr "Немає типів контенту"
 
 #. Default: "Some content types:"
 #: ../browser/overview.pt:30
 msgid "label_some_content_types"
-msgstr ""
+msgstr "Деякі типи контенту:"
 
diff --git a/plone/app/dexterity/locales/zh_CN/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/zh_CN/LC_MESSAGES/plone.app.dexterity.po
index efd64b5..5403a48 100644
--- a/plone/app/dexterity/locales/zh_CN/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/zh_CN/LC_MESSAGES/plone.app.dexterity.po
@@ -4,7 +4,7 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: plone.app.dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
 "PO-Revision-Date: 2013-07-03 15:25+0800\n"
 "Last-Translator: Jian Aijun <jianaijun@gmail.com>\n"
 "Language-Team: Plone i18n <plone-i18n@lists.sourceforge.net>\n"
@@ -17,7 +17,7 @@ msgstr ""
 "Preferred-Encodings: utf-8 latin1\n"
 "Domain: plone.app.dexterity\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "# 条目数量"
 
@@ -25,7 +25,7 @@ msgstr "# 条目数量"
 msgid "Add Content Type"
 msgstr "添加​​内容类型"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "添加​​新内容类型…"
 
@@ -41,11 +41,11 @@ msgstr "添加​​创建者、贡献者和版权字段"
 msgid "Adds keywords and language setting"
 msgstr "添加关键字和语言设置"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr "允许评论"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr "允许对此条目进行评论。"
 
@@ -55,7 +55,7 @@ msgstr "允许条目从导航中排除"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "允许 上一条目/下一条目 导航"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
 msgstr "允许的内容类型"
 
@@ -71,12 +71,12 @@ msgstr "自动生成内容的短 URL 名称，基于其主字段文件名称"
 msgid "Basic metadata"
 msgstr "基本元数据"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "行为"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "行为已更新成功。"
 
@@ -84,28 +84,28 @@ msgstr "行为已更新成功。"
 msgid "Clone"
 msgstr "克隆"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "克隆内容类型"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr "Configures various components needed for full Dexterity support."
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "容器"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "描述"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity 内容类型"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterity 内容类型"
 
@@ -118,6 +118,14 @@ msgstr "有效范围"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "此类型的所有条目, 启用 上一条目/下一条目 导航"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "从导航中排除"
 
@@ -129,16 +137,16 @@ msgstr "导出模式模型"
 msgid "Export Type Profiles"
 msgstr "导出类型配置文件"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "字段"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
 msgstr "过滤所包含的类型"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "此类型的条目，可以包含其他条目。"
 
@@ -160,16 +168,16 @@ msgstr "上一条目/下一条目 导航"
 msgid "Next previous navigation toggle"
 msgstr "切换 上一条目/下一条目 导航"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr "禁用"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "没有更改。"
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "概览"
 
@@ -189,29 +197,41 @@ msgstr "请选择要导出的类型。"
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "请使用字母、数字和下列字符：.-_"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "选择此内容类型要启用的行为。"
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "设置"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "类型ID"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "下列自定义内容类型可用于您的网站。"
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "已经有一个名为 '${name}' 的内容类型"
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "类型名称"
 
@@ -219,30 +239,40 @@ msgstr "类型名称"
 msgid "Type added successfully."
 msgstr "类型添加成功。"
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "类型克隆成功。"
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "用于编程访问。"
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr "启用"
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "单击 \"添加内容类型\" 按钮，开始创建一个新的自定义内容类型。"
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "如果选中，此条目不会在导航树中显示"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "在此文件夹中的内容条目，启用 上一条目/下一条目 导航。"
 
@@ -257,17 +287,17 @@ msgid "label_contained_items"
 msgstr "包含的类型"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "从导航中排除"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
 msgstr "此类型的条目可作为一个文件夹包含其他条目。允许包含什么内容类型？"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "启用 上一条目/下一条目 导航"
 
diff --git a/plone/app/dexterity/locales/zh_TW/LC_MESSAGES/plone.app.dexterity.po b/plone/app/dexterity/locales/zh_TW/LC_MESSAGES/plone.app.dexterity.po
index 693654c..7f22153 100644
--- a/plone/app/dexterity/locales/zh_TW/LC_MESSAGES/plone.app.dexterity.po
+++ b/plone/app/dexterity/locales/zh_TW/LC_MESSAGES/plone.app.dexterity.po
@@ -1,8 +1,8 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: plone.app.dexterity\n"
-"POT-Creation-Date: 2013-04-06 15:36+0000\n"
-"PO-Revision-Date: 2013-01-21 17:45+0800\n"
+"POT-Creation-Date: 2014-09-16 14:03+0000\n"
+"PO-Revision-Date: 2013-07-19 22:15+0800\n"
 "Last-Translator: TsungWei Hu <marr.tw@gmail.com>\n"
 "Language-Team: Plone i18n <plone-i18n@lists.sourceforge.net>\n"
 "MIME-Version: 1.0\n"
@@ -15,7 +15,7 @@ msgstr ""
 "Domain: plone.app.dexterity\n"
 "X-Is-Fallback-For: zh\n"
 
-#: ../interfaces.py:87
+#: ../interfaces.py:90
 msgid "# of items"
 msgstr "項目數量"
 
@@ -23,7 +23,7 @@ msgstr "項目數量"
 msgid "Add Content Type"
 msgstr "新增型別"
 
-#: ../browser/types_listing.pt:82
+#: ../browser/types_listing.pt:20
 msgid "Add New Content Type…"
 msgstr "新增內容型別…"
 
@@ -39,11 +39,11 @@ msgstr "新增建立者、貢獻者、著作權欄位"
 msgid "Adds keywords and language setting"
 msgstr "新增關鍵字與語系欄位"
 
-#: ../behaviors/discussion.py:30
+#: ../behaviors/discussion.py:27
 msgid "Allow discussion"
 msgstr "允許討論"
 
-#: ../behaviors/discussion.py:31
+#: ../behaviors/discussion.py:28
 msgid "Allow discussion for this content object."
 msgstr "允許其他人留言討論。"
 
@@ -53,9 +53,9 @@ msgstr "允許排除於導覽方框"
 msgid "Allow items to have next previous navigation enabled"
 msgstr "允許啟用前後項導覽功能"
 
-#: ../interfaces.py:75
+#: ../interfaces.py:78
 msgid "Allowed Content Types"
-msgstr ""
+msgstr "允許使用的內容型別"
 
 msgid "Assign an effective and/or expiration date"
 msgstr "指定生效或失效日期"
@@ -69,12 +69,12 @@ msgstr "依照主要欄位自動產生 URL 名稱"
 msgid "Basic metadata"
 msgstr "基本資料"
 
-#: ../browser/behaviors.py:58
+#: ../browser/behaviors.py:59
 #: ../browser/layout.py:16
 msgid "Behaviors"
 msgstr "Behaviors"
 
-#: ../browser/behaviors.py:60
+#: ../browser/behaviors.py:61
 msgid "Behaviors successfully updated."
 msgstr "Behaviors 更新成功。"
 
@@ -82,28 +82,28 @@ msgstr "Behaviors 更新成功。"
 msgid "Clone"
 msgstr "複製"
 
-#: ../browser/clone_type.py:11
+#: ../browser/clone_type.py:12
 msgid "Clone Content Type"
 msgstr "複製內容型別"
 
 msgid "Configures various components needed for full Dexterity support."
 msgstr "設定 Dexterity 元件功能"
 
-#: ../interfaces.py:57
+#: ../interfaces.py:59
 msgid "Container"
 msgstr "目錄"
 
-#: ../interfaces.py:52
+#: ../interfaces.py:54
 msgid "Description"
 msgstr "摘要描述"
 
-#: ../browser/types.py:247
+#: ../browser/types.py:249
 #: ../profiles/default/actions.xml
 #: ../profiles/default/controlpanel.xml
 msgid "Dexterity Content Types"
 msgstr "Dexterity 內容型別"
 
-#: ../browser/types.py:214
+#: ../browser/types.py:216
 msgid "Dexterity content types"
 msgstr "Dexterity 內容型別"
 
@@ -116,6 +116,14 @@ msgstr "日期"
 msgid "Enable next previous navigation for all items of this type"
 msgstr "啟用前後項導覽"
 
+#: ../browser/modeleditor.py:57
+msgid "Error: all model elements must be 'schema'"
+msgstr ""
+
+#: ../browser/modeleditor.py:51
+msgid "Error: root tag must be 'model'"
+msgstr ""
+
 msgid "Exclude From navigation"
 msgstr "排除導覽"
 
@@ -127,16 +135,16 @@ msgstr "匯出 Schema Model"
 msgid "Export Type Profiles"
 msgstr "匯出 Type Profile"
 
-#: ../browser/fields.py:9
+#: ../browser/fields.py:34
 #: ../browser/layout.py:15
 msgid "Fields"
 msgstr "欄位"
 
-#: ../interfaces.py:64
+#: ../interfaces.py:67
 msgid "Filter Contained Types"
-msgstr ""
+msgstr "篩選被包含的型別"
 
-#: ../interfaces.py:58
+#: ../interfaces.py:60
 msgid "Items of this type will be able to contain other items."
 msgstr "目錄式項目可以包含其他項目。"
 
@@ -158,16 +166,16 @@ msgstr "前後項導覽"
 msgid "Next previous navigation toggle"
 msgstr "切換前後項導覽"
 
-#: ../behaviors/discussion.py:17
+#: ../behaviors/discussion.py:14
 msgid "No"
 msgstr "否"
 
-#: ../browser/behaviors.py:61
+#: ../browser/behaviors.py:62
 msgid "No changes were made."
 msgstr "沒有更動。"
 
 #: ../browser/layout.py:14
-#: ../browser/overview.py:32
+#: ../browser/overview.py:33
 msgid "Overview"
 msgstr "總覽"
 
@@ -187,29 +195,41 @@ msgstr "選擇型別來匯出。"
 msgid "Please use only letters, numbers, and the following characters: .-_"
 msgstr "只能使用字母、數字，還有 .-_ 符號。"
 
-#: ../browser/behaviors.py:59
+#: ../browser/modeleditor.py:83
+msgid "Saved"
+msgstr ""
+
+#: ../browser/behaviors.py:60
 msgid "Select the behaviors to enable for this content type."
 msgstr "選擇想要啟用的 Behavior"
 
-#: ../behaviors/discussion.py:25
-#: ../behaviors/exclfromnav.py:13
-#: ../behaviors/nextprevious.py:27
+#: ../behaviors/discussion.py:22
+#: ../behaviors/exclfromnav.py:16
+#: ../behaviors/id.py:18
 msgid "Settings"
 msgstr "設定"
 
-#: ../interfaces.py:45
+#: ../interfaces.py:47
 msgid "Short Name"
 msgstr "識別碼"
 
-#: ../browser/types.py:176
+#: ../behaviors/id.py:23
+msgid "Short name"
+msgstr ""
+
+#: ../browser/types.py:178
 msgid "The following custom content types are available for your site."
 msgstr "下列是可供使用的型別列表。"
 
-#: ../interfaces.py:98
+#: ../interfaces.py:101
 msgid "There is already a content type named '${name}'"
 msgstr "已有型別命名為 '${name}'"
 
-#: ../interfaces.py:41
+#: ../behaviors/id.py:24
+msgid "This name will be displayed in the URL."
+msgstr ""
+
+#: ../interfaces.py:43
 msgid "Type Name"
 msgstr "型別名稱"
 
@@ -217,65 +237,75 @@ msgstr "型別名稱"
 msgid "Type added successfully."
 msgstr "型別新增成功。"
 
-#: ../browser/clone_type.py:28
+#: ../browser/clone_type.py:31
 msgid "Type cloned successfully."
 msgstr "型別複製成功。"
 
-#: ../interfaces.py:46
+#: ../interfaces.py:48
 msgid "Used for programmatic access to the type."
 msgstr "用於程式存取之用。"
 
-#: ../behaviors/discussion.py:16
+#: ../behaviors/discussion.py:13
 msgid "Yes"
 msgstr "是"
 
+#. Default: "Expiration date must be after publishing date."
+#: ../behaviors/metadata.py:153
+msgid "error_expiration_must_be_after_effective_date"
+msgstr ""
+
+#. Default: "Invalid effective or expires date"
+#: ../behaviors/metadata.py:119
+msgid "error_invalid_publication"
+msgstr ""
+
 #. Default: "Click the \"Add Content Type\" button to begin creating  a new custom content type."
-#: ../browser/types.py:179
+#: ../browser/types.py:181
 msgid "help_addcontenttype_button"
 msgstr "點選「新增內容型別」按鈕就能建立新的型別。"
 
 #. Default: "If selected, this item will not appear in the navigation tree"
-#: ../behaviors/exclfromnav.py:18
+#: ../behaviors/exclfromnav.py:25
 msgid "help_exclude_from_nav"
 msgstr "勾選的話，這個項目就不會出現在導覽方框裡。"
 
 #. Default: "This enables next/previous widget on content items contained in this folder."
-#: ../behaviors/nextprevious.py:32
+#: ../behaviors/nextprevious.py:38
 msgid "help_nextprevious"
 msgstr "勾選的話，目錄裡的項目會顯示前後項導覽功能。"
 
 #. Default: "All content types"
 #: ../browser/overview.pt:24
 msgid "label_all_content_types"
-msgstr ""
+msgstr "包括所有的內容型別"
 
 #. Default: "Contained items"
 #: ../browser/overview.pt:9
 msgid "label_contained_items"
-msgstr ""
+msgstr "是否包含其他內容型別"
 
 #. Default: "Exclude from navigation"
-#: ../behaviors/exclfromnav.py:17
+#: ../behaviors/exclfromnav.py:21
 msgid "label_exclude_from_nav"
 msgstr "排除導覽"
 
 #. Default: "Items of this type can act as a folder containing other items.What content types should be allowed inside?"
-#: ../interfaces.py:65
+#: ../interfaces.py:68
 msgid "label_filter_contained_types"
-msgstr ""
+msgstr "這個型別可以包含其他型別，就像目錄一樣。請設定哪些型別能被包含。"
 
 #. Default: "Enable next previous navigation"
-#: ../behaviors/nextprevious.py:31
+#: ../behaviors/nextprevious.py:34
 msgid "label_nextprevious"
 msgstr "啟用前後項導覽"
 
 #. Default: "No content types"
 #: ../browser/overview.pt:18
 msgid "label_no_content_types"
-msgstr ""
+msgstr "不包含其他內容型別"
 
 #. Default: "Some content types:"
 #: ../browser/overview.pt:30
 msgid "label_some_content_types"
-msgstr ""
+msgstr "包含一些內容型別："
 
diff --git a/plone/app/dexterity/meta.zcml b/plone/app/dexterity/meta.zcml
index c516136..ff42bfb 100644
--- a/plone/app/dexterity/meta.zcml
+++ b/plone/app/dexterity/meta.zcml
@@ -1,10 +1,10 @@
 <configure xmlns="http://namespaces.zope.org/zope"
            xmlns:zcml="http://namespaces.zope.org/zcml">
-  
+
   <include package="plone.dexterity" file="meta.zcml" />
   <include zcml:condition="installed plone.directives.dexterity"
            package="plone.directives.dexterity" file="meta.zcml" />
   <include zcml:condition="installed plone.directives.form"
            package="plone.directives.form" file="meta.zcml" />
-  
+
 </configure>
\ No newline at end of file
diff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py
new file mode 100644
index 0000000..8ede354
--- /dev/null
+++ b/plone/app/dexterity/permissions.py
@@ -0,0 +1,102 @@
+# -*- coding: utf-8 -*-
+from AccessControl import getSecurityManager
+from plone.app.widgets.interfaces import IFieldPermissionChecker
+from plone.app.widgets.interfaces import IWidgetsLayer
+from plone.autoform.interfaces import WIDGETS_KEY
+from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from plone.autoform.utils import resolveDottedName
+from plone.dexterity.interfaces import IDexterityContent
+from plone.dexterity.utils import iterSchemata, getAdditionalSchemata
+from plone.supermodel.utils import mergedTaggedValueDict
+from z3c.form.interfaces import IAddForm
+from z3c.form.interfaces import IFieldWidget
+from zope.component import adapts
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
+from zope.interface import implements
+from zope.publisher.browser import TestRequest
+from zope.security.interfaces import IPermission
+
+
+class MockRequest(TestRequest):
+    implements(IWidgetsLayer)
+
+
+class DXFieldPermissionChecker(object):
+    """
+    """
+
+    implements(IFieldPermissionChecker)
+    adapts(IDexterityContent)
+
+    DEFAULT_PERMISSION = 'Modify portal content'
+
+    def __init__(self, context):
+        self.context = context
+        self._request = MockRequest()
+
+    def _get_schemata(self):
+        return iterSchemata(self.context)
+
+    def validate(self, field_name, vocabulary_name=None):
+        context = self.context
+        checker = getSecurityManager().checkPermission
+        schemata = self._get_schemata()
+        for schema in schemata:
+            if field_name in schema:
+                # If a vocabulary name was specified and it does not
+                # match the vocabulary name for the field or widget,
+                # fail.
+                field = schema[field_name]
+                if vocabulary_name and (
+                   vocabulary_name != getattr(field, 'vocabulary', None) and
+                   vocabulary_name != getattr(field, 'vocabularyName', None)):
+                    # Determine the widget to check for vocabulary there
+                    widgets = mergedTaggedValueDict(schema, WIDGETS_KEY)
+                    widget = widgets.get(field_name)
+                    if widget:
+                        widget = (isinstance(widget, basestring) and
+                                  resolveDottedName(widget) or widget)
+                        widget = widget and widget(field, self._request)
+                    else:
+                        widget = queryMultiAdapter((field, self._request),
+                                                   IFieldWidget)
+                    if getattr(widget, 'vocabulary', None) != vocabulary_name:
+                        return False
+                # Create mapping of all schema permissions
+                permissions = mergedTaggedValueDict(schema,
+                                                    WRITE_PERMISSIONS_KEY)
+                permission_name = permissions.get(field_name, None)
+                if permission_name is not None:
+                    permission = queryUtility(IPermission,
+                                              name=permission_name)
+                    if permission:
+                        return checker(permission.title, context)
+
+                # If the field is in the schema, but no permission is
+                # specified, fall back to the default edit permission
+                return checker(self.DEFAULT_PERMISSION, context)
+        else:
+            raise AttributeError('No such field: {0}'.format(field_name))
+
+
+class DXAddViewFieldPermissionChecker(DXFieldPermissionChecker):
+    """Permission checker for when we just have an add view"""
+
+    adapts(IAddForm)
+
+    def __init__(self, view):
+        self.context = view.context
+        # This may fail for views that aren't DefaultAddForm or
+        # DefaultAddView sub-classes, but they can register their own
+        # more specific adapters, if needed.
+        self.fti = getattr(view, 'fti', None)
+        if self.fti is None:
+            self.fti = view.ti
+        self._request = view.request
+
+    def _get_schemata(self):
+        fti = self.fti
+        yield fti.lookupSchema()
+        for schema in getAdditionalSchemata(portal_type=fti.getId()):
+            yield schema
diff --git a/plone/app/dexterity/profiles/default/metadata.xml b/plone/app/dexterity/profiles/default/metadata.xml
index 4ab65c4..b75a5da 100644
--- a/plone/app/dexterity/profiles/default/metadata.xml
+++ b/plone/app/dexterity/profiles/default/metadata.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>2003</version>
+  <version>2004</version>
   <dependencies>
     <dependency>profile-plone.app.z3cform:default</dependency>
-    <dependency>profile-collective.z3cform.datetimewidget:default</dependency>
   </dependencies>
 </metadata>
diff --git a/plone/app/dexterity/profiles/testing/metadata.xml b/plone/app/dexterity/profiles/testing/metadata.xml
new file mode 100644
index 0000000..76cc755
--- /dev/null
+++ b/plone/app/dexterity/profiles/testing/metadata.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<metadata>
+  <version>1</version>
+  <dependencies>
+    <dependency>profile-plone.app.dexterity:default</dependency>
+    <dependency>profile-plone.app.z3cform:default</dependency>
+  </dependencies>
+</metadata>
diff --git a/plone/app/dexterity/profiles/testing/types.xml b/plone/app/dexterity/profiles/testing/types.xml
new file mode 100644
index 0000000..b0e4759
--- /dev/null
+++ b/plone/app/dexterity/profiles/testing/types.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0"?>
+<object meta_type="Plone Types Tool" name="portal_types">
+ <object name="Document" remove="true" />
+ <object meta_type="Dexterity FTI" name="Document" />
+ <object name="Folder" remove="true" />
+ <object meta_type="Dexterity FTI" name="Folder" />
+</object>
diff --git a/plone/app/dexterity/profiles/testing/types/Document.xml b/plone/app/dexterity/profiles/testing/types/Document.xml
new file mode 100644
index 0000000..5060051
--- /dev/null
+++ b/plone/app/dexterity/profiles/testing/types/Document.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0"?>
+<object name="Document" meta_type="Dexterity FTI" i18n:domain="plone"
+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+ <property name="title" i18n:translate="">Page</property>
+ <property name="description" i18n:translate=""></property>
+ <property name="icon_expr"></property>
+ <property name="factory">Document</property>
+ <property name="add_view_expr">string:${folder_url}/++add++Document</property>
+ <property name="link_target"></property>
+ <property name="global_allow">True</property>
+ <property name="filter_content_types">True</property>
+ <property name="allowed_content_types"/>
+ <property name="allow_discussion">False</property>
+ <property name="default_view">view</property>
+ <property name="immediate_view"></property>
+ <property name="view_methods">
+  <element value="view"/>
+ </property>
+ <property name="default_view_fallback">False</property>
+ <property name="add_permission">cmf.AddPortalContent</property>
+ <property name="klass">plone.dexterity.content.Item</property>
+ <property name="behaviors">
+  <element value="plone.app.content.interfaces.INameFromTitle"/>
+  <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion"/>
+  <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"/>
+  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>
+ </property>
+ <property name="schema">zope.interface.Interface</property>
+ <alias from="(Default)" to="(dynamic view)"/>
+ <alias from="edit" to="@@edit"/>
+ <alias from="sharing" to="@@sharing"/>
+ <alias from="view" to="(selected layout)"/>
+ <action title="View" action_id="view" category="object" condition_expr=""
+    icon_expr="" link_target="" url_expr="string:${object_url}"
+    visible="True" i18n:attributes="title">
+  <permission value="View"/>
+ </action>
+ <action title="Edit" action_id="edit" category="object" condition_expr=""
+    icon_expr="" link_target="" url_expr="string:${object_url}/edit"
+    visible="True" i18n:attributes="title">
+  <permission value="Modify portal content"/>
+ </action>
+</object>
diff --git a/plone/app/dexterity/profiles/testing/types/Folder.xml b/plone/app/dexterity/profiles/testing/types/Folder.xml
new file mode 100644
index 0000000..e8bb9de
--- /dev/null
+++ b/plone/app/dexterity/profiles/testing/types/Folder.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0"?>
+<object name="Folder" meta_type="Dexterity FTI" i18n:domain="plone"
+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+ <property name="title" i18n:translate="">Folder</property>
+ <property name="description" i18n:translate=""></property>
+ <property name="icon_expr"></property>
+ <property name="factory">Folder</property>
+ <property name="add_view_expr">string:${folder_url}/++add++Folder</property>
+ <property name="link_target"></property>
+ <property name="immediate_view">view</property>
+ <property name="global_allow">True</property>
+ <property name="filter_content_types">False</property>
+ <property name="allowed_content_types"/>
+ <property name="allow_discussion">False</property>
+ <property name="default_view">folder_listing</property>
+ <property name="view_methods">
+  <element value="folder_summary_view"/>
+  <element value="folder_full_view"/>
+  <element value="folder_tabular_view"/>
+  <element value="atct_album_view"/>
+  <element value="folder_listing"/>
+ </property>
+ <property name="default_view_fallback">False</property>
+ <property name="add_permission">cmf.AddPortalContent</property>
+ <property name="klass">plone.dexterity.content.Container</property>
+ <property name="behaviors">
+  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>
+  <element value="plone.app.content.interfaces.INameFromTitle"/>
+  <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion"/>
+  <element
+     value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"/>
+  <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"/>
+  <element value="plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle"/>
+ </property>
+ <property name="schema">zope.interface.Interface</property>
+ <alias from="(Default)" to="(dynamic view)"/>
+ <alias from="edit" to="@@edit"/>
+ <alias from="sharing" to="@@sharing"/>
+ <alias from="view" to="(selected layout)"/>
+ <action title="View" action_id="view" category="object" condition_expr=""
+    icon_expr="" link_target="" url_expr="string:${object_url}"
+    visible="True" i18n:attributes="title">
+  <permission value="View"/>
+ </action>
+ <action title="Edit" action_id="edit" category="object" condition_expr=""
+    icon_expr="" link_target="" url_expr="string:${object_url}/edit"
+    visible="True" i18n:attributes="title">
+  <permission value="Modify portal content"/>
+ </action>
+</object>
diff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py
index 9706b0d..14a6567 100644
--- a/plone/app/dexterity/testing.py
+++ b/plone/app/dexterity/testing.py
@@ -2,6 +2,10 @@
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import IntegrationTesting, FunctionalTesting
 
+from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE
+
+from plone.testing import z2
+
 
 class DexterityFixture(PloneSandboxLayer):
     defaultBases = (PLONE_FIXTURE,)
@@ -12,7 +16,7 @@ def setUpZope(self, app, configurationContext):
         self.loadZCML(package=plone.app.dexterity)
 
     def setUpPloneSite(self, portal):
-        self.applyProfile(portal, 'plone.app.dexterity:default')
+        self.applyProfile(portal, 'plone.app.dexterity:testing')
 
 
 DEXTERITY_FIXTURE = DexterityFixture()
@@ -20,3 +24,6 @@ def setUpPloneSite(self, portal):
     bases=(DEXTERITY_FIXTURE,), name="dexterity:Integration")
 DEXTERITY_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(DEXTERITY_FIXTURE,), name="dexterity:Functional")
+DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(
+    bases=(DEXTERITY_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE,
+    z2.ZSERVER_FIXTURE), name="dexterity:Acceptance")
diff --git a/plone/app/dexterity/tests/base.py b/plone/app/dexterity/tests/base.py
deleted file mode 100644
index 8bda264..0000000
--- a/plone/app/dexterity/tests/base.py
+++ /dev/null
@@ -1,15 +0,0 @@
-# Note: These test case classes are deprecated.  We recommend using the
-# plone.app.testing-based test setup in plone.app.dexterity.testing
-
-from Products.PloneTestCase import PloneTestCase as ptc
-from plone.app.dexterity.tests.layer import DexterityLayer
-
-ptc.setupPloneSite()
-
-
-class DexterityTestCase(ptc.PloneTestCase):
-    layer = DexterityLayer
-
-
-class DexterityFunctionalTestCase(ptc.FunctionalTestCase):
-    layer = DexterityLayer
diff --git a/plone/app/dexterity/tests/discussion.txt b/plone/app/dexterity/tests/discussion.txt
index 77be611..66a78e6 100644
--- a/plone/app/dexterity/tests/discussion.txt
+++ b/plone/app/dexterity/tests/discussion.txt
@@ -23,7 +23,7 @@ Set up a test browser::
     >>> browser.addHeader('Authorization', 'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
 
 We have to make sure the request provides IDiscussonLayer because the enabled
-method on the conversation calls conversation_view (which is only registered 
+method on the conversation calls conversation_view (which is only registered
 for IDiscussionLayer).
 
     >>> from plone.app.discussion.interfaces import IDiscussionLayer
diff --git a/plone/app/dexterity/tests/editing.txt b/plone/app/dexterity/tests/editing.txt
index 95ce708..2adef24 100644
--- a/plone/app/dexterity/tests/editing.txt
+++ b/plone/app/dexterity/tests/editing.txt
@@ -37,7 +37,7 @@ Adding a content type
 Let's add a 'Plonista' content type to keep track of members of the Plone
 community::
 
-  >>> browser.getControl('Add New Content Type').click()
+  >>> browser.getLink('Add New Content Type').click()
   >>> browser.getControl('Type Name').value = 'Plonista'
   >>> browser.getControl('Short Name').value = 'plonista'
   >>> browser.getControl('Description').value = 'Represents a Plonista.'
@@ -105,12 +105,12 @@ and saved.
   >>> for name, factory in sorted(component.getUtilitiesFor(
   ...     interfaces.IFieldFactory)):
   ...     browser.open(schemaeditor_url)
-  ...     browser.getControl('Add new field').click()
+  ...     browser.getLink('Add new field').click()
   ...     browser.getControl('Title').value = name
   ...     field_id = normalizer.normalize(name).replace('-', '_')
   ...     browser.getControl('Short Name').value = field_id
   ...     browser.getControl('Field type').getControl(
-  ...         value=getattr(factory.title, 'default', factory.title)
+  ...         value=getattr(factory.title, 'default', '') or factory.title
   ...         ).selected = True
   ...     browser.getControl('Add').click()
   ...     assert browser.url == schemaeditor_url, (
@@ -173,7 +173,7 @@ Return to our view and find the XML model source in a div, ready for the Ace edi
 
 There should be an authenticator in the `save` form::
 
-  >>> authenticator = browser.getControl(name="_authenticator").value
+  >>> authenticator = browser.getControl(name="_authenticator", index=0).value
 
 Save is via AJAX. Let's check the save view's functionality.
 
@@ -299,7 +299,7 @@ Validation to prevent duplicate content types
 A new content type cannot be created if its name is the same as an existing
 content type.
 
-  >>> browser.getControl('Add New Content Type').click()
+  >>> browser.getLink('Add New Content Type').click()
   >>> browser.getControl('Type Name').value = 'foobar'
   >>> browser.getControl('Short Name').value = 'plonista'
   >>> browser.getControl('Add').click()
@@ -311,7 +311,7 @@ content type.
 To avoid confusion, the title must also be unique.
 
   >>> browser.open('http://nohost/plone/dexterity-types')
-  >>> browser.getControl('Add New Content Type').click()
+  >>> browser.getLink('Add New Content Type').click()
   >>> browser.getControl('Type Name').value = 'Plonista'
   >>> browser.getControl('Short Name').value = 'foobar'
   >>> browser.getControl('Add').click()
@@ -351,7 +351,7 @@ Adding a container
 We can create a content type that is a container for other content::
 
   >>> browser.open('http://nohost/plone/@@dexterity-types')
-  >>> browser.getControl('Add New Content Type').click()
+  >>> browser.getLink('Add New Content Type').click()
   >>> browser.getControl('Type Name').value = 'Plonista Folder'
   >>> browser.getControl('Short Name').value = 'plonista-folder'
   >>> browser.getControl('Add').click()
@@ -398,31 +398,23 @@ container::
   >>> select
   <ListControl name='form.widgets.allowed_content_types:list' type='select'>
 
-  >>> select.getControl('News Item').selected = True
-  >>> event = select.getControl('Event').selected = True
+  >>> select.getControl('Page').selected = True
   >>> browser.getControl('Apply').click()
-  >>> print browser.contents
-  <BLANKLINE>
-  ...Data successfully updated...
+  >>> 'Data successfully updated' in browser.contents
+  True
 
 Now only the allowed types may be added::
 
   >>> browser.open('http://nohost/plone')
   >>> browser.getLink('Plonista Folder 1').click()
 
-  >>> browser.getLink(url='Document')
+  >>> browser.getLink(url='Folder')
   Traceback (most recent call last):
   ...
   LinkNotFound...
 
-  >>> browser.getLink(url='Event').click()
-  >>> browser.getControl('Title').value = 'Foo Plonista Event'
-  >>> browser.getControl('Save').click()
-
-  >>> browser.open('http://nohost/plone')
-  >>> browser.getLink('Plonista Folder 1').click()
-  >>> browser.getLink(url='News+Item').click()
-  >>> browser.getControl('Title').value = 'Foo Plonista News Item'
+  >>> browser.getLink(url='Document').click()
+  >>> browser.getControl('Title').value = 'Foo Plonista Page'
   >>> browser.getControl('Save').click()
 
 
@@ -509,7 +501,7 @@ zip archive containing supermodel xml files::
     ['models/plonista2.xml', 'models/plonista-folder.xml']
 
     >>> print archive.read('models/plonista2.xml')
-    <model...xmlns="http://namespaces.plone.org/supermodel/schema">
+    <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>
       <schema>
       ...
       </schema>
@@ -531,7 +523,7 @@ file::
     'attachment; filename=plonista2.xml'
 
     >>> print browser.contents
-    <model...xmlns="http://namespaces.plone.org/supermodel/schema">
+    <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>
       <schema>
       ...
       </schema>
diff --git a/plone/app/dexterity/tests/filename.txt b/plone/app/dexterity/tests/filename.txt
index a6f782c..65a857e 100644
--- a/plone/app/dexterity/tests/filename.txt
+++ b/plone/app/dexterity/tests/filename.txt
@@ -34,7 +34,7 @@ appropriately::
   >>> from plone.testing.z2 import Browser
   >>> browser = Browser(layer['app'])
   >>> browser.addHeader('Authorization', 'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
-  
+
   >>> browser.open('http://nohost/plone/++add++file_type')
   >>> browser.getControl('Title').value = 'A test file'
   >>> from cStringIO import StringIO
diff --git a/plone/app/dexterity/tests/layer.py b/plone/app/dexterity/tests/layer.py
deleted file mode 100644
index bf8fcfb..0000000
--- a/plone/app/dexterity/tests/layer.py
+++ /dev/null
@@ -1,46 +0,0 @@
-# Note: This layer is deprecated.  We recommend using the
-# plone.app.testing-based test setup in plone.app.dexterity.testing
-
-from Testing.ZopeTestCase import app, close
-from Products.CMFCore.utils import getToolByName
-from Products.PloneTestCase.layer import PloneSite
-from zope.component.hooks import setSite, setHooks
-from transaction import commit
-
-# BBB Zope 2.12
-try:
-    from Zope2.App import zcml
-    from OFS import metaconfigure
-    zcml  # pyflakes
-    metaconfigure
-except ImportError:
-    from Products.Five import zcml
-    from Products.Five import fiveconfigure as metaconfigure
-
-
-class DexterityLayer(PloneSite):
-
-    @classmethod
-    def setUp(cls):
-        metaconfigure.debug_mode = True
-        import plone.app.dexterity
-        zcml.load_config('meta.zcml', plone.app.dexterity)
-        zcml.load_config('configure.zcml', plone.app.dexterity)
-        metaconfigure.debug_mode = False
-
-        # import the default profile
-        root = app()
-        portal = root.plone
-        setHooks()
-        setSite(portal)
-        tool = getToolByName(portal, 'portal_setup')
-        profile = 'profile-plone.app.dexterity:default'
-        tool.runAllImportStepsFromProfile(profile, purge_old=False)
-        setSite(None)
-        # and commit the changes
-        commit()
-        close(root)
-
-    @classmethod
-    def tearDown(cls):
-        pass
diff --git a/plone/app/dexterity/tests/metadata.txt b/plone/app/dexterity/tests/metadata.txt
index 4d071fb..ee78901 100644
--- a/plone/app/dexterity/tests/metadata.txt
+++ b/plone/app/dexterity/tests/metadata.txt
@@ -36,7 +36,7 @@ We can see this type in the addable types at the root of the site::
     >>> browser.getControl(name="form.buttons.save").click()
     >>> browser.url
     'http://nohost/plone/metadatad_type/view'
-    
+
 The creator of the object is the current user::
 
     >>> "http://nohost/plone/author/test_user_1_" in browser.contents
@@ -47,7 +47,7 @@ The creator of the object is the current user::
 
 The modified and creation dates are set correctly::
 
-    >>> md.ModificationDate() == md.CreationDate()
+    >>> md.ModificationDate()[0:16] == md.CreationDate()[0:16]
     True
     >>> from DateTime import DateTime
     >>> DateTime() > DateTime(md.CreationDate())
diff --git a/plone/app/dexterity/tests/robot/test_types.robot b/plone/app/dexterity/tests/robot/test_types.robot
new file mode 100644
index 0000000..0f1b4f7
--- /dev/null
+++ b/plone/app/dexterity/tests/robot/test_types.robot
@@ -0,0 +1,33 @@
+*** Settings *****************************************************************
+
+Resource  plone/app/robotframework/keywords.robot
+
+Library  Remote  ${PLONE_URL}/RobotRemote
+
+Test Setup  Run keywords  Open test browser
+Test Teardown  Close all browsers
+
+
+*** Test cases ***************************************************************
+
+Scenario: type title is normalized
+  Given a logged in manager
+   When adding a new content type
+    and type title is  Boîte à outils
+   Then type id should become  boite_a_outils
+
+
+*** Keywords *****************************************************************
+
+adding a new content type
+  Go to  ${PLONE_URL}/@@dexterity-types
+  Click Overlay Button  Add New Content Type…
+
+type title is
+  [Arguments]  ${title}
+  Input text  form-widgets-title  ${title}
+
+type id should become
+  [Arguments]  ${id}
+  Focus  form-widgets-id
+  Wait until keyword succeeds  10  1  Textfield Value Should Be  form-widgets-id  ${id}
diff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py
index 0a7b776..783e946 100644
--- a/plone/app/dexterity/tests/test_constrains.py
+++ b/plone/app/dexterity/tests/test_constrains.py
@@ -3,6 +3,7 @@
 
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
+from plone.app.testing import login
 from plone.testing.z2 import Browser
 
 from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
@@ -66,8 +67,8 @@ def setUp(self):
         self.default_types = [t for t in self.types_tool.listTypeInfo() if
                               t.isConstructionAllowed(self.folder)
                               and folder_type.allowType(t.getId())]
-        assert len(self.default_types) > 3
-        self.types_id_subset = [t.getId() for t in self.default_types][:2]
+        assert len(self.default_types) > 1
+        self.types_id_subset = [t.getId() for t in self.default_types][:1]
 
     def test_behavior_added(self):
         self.assertIn('Products.CMFPlone.interfaces.'
@@ -162,6 +163,21 @@ def test_locallyAllowedTypesDefaultWhenAcquired(self):
         self.assertEqual(types, behavior.allowedContentTypes())
         self.assertEqual(type_ids, behavior.getLocallyAllowedTypes())
 
+    def test_locallyAllowedTypesDefaultWhenMultipleAcquired(self):
+        """
+        Prevent regression.
+        Multiple (two or more) acquisition from parent must not fail if
+        user doesn't have add permission on parent.
+        """
+        self.inner_folder.invokeFactory('folder', 'deeper_folder')
+        deeper_folder = self.inner_folder.deeper_folder
+        self.portal.acl_users._doAddUser('user_contributor', 'secret', ['Member'], [])
+        deeper_folder.manage_addLocalRoles('user_contributor', ['Contributor'])
+        login(self.portal, 'user_contributor')
+        behavior = ISelectableConstrainTypes(deeper_folder)
+        types = behavior.getLocallyAllowedTypes()
+        self.assertTrue(len(types) > 0)
+
     def test_locallyAllowedTypesInvalidSet(self):
         behavior = ISelectableConstrainTypes(self.folder)
         self.assertRaises(ValueError,
@@ -262,7 +278,7 @@ def test_allowedContentTypesExit1(self):
         types = behavior._getAddableTypesFor(self.portal, self.folder)
 
         behavior.setConstrainTypesMode(constrains.DISABLED)
-        self.assertEquals(types, behavior.allowedContentTypes())
+        self.assertEqual(types, behavior.allowedContentTypes())
 
     def test_allowedContentTypesExit2(self):
         """
@@ -273,7 +289,7 @@ def test_allowedContentTypesExit2(self):
         types = behavior._getAddableTypesFor(self.portal, self.folder)
 
         behavior.setConstrainTypesMode(constrains.ACQUIRE)
-        self.assertEquals(types, behavior.allowedContentTypes())
+        self.assertEqual(types, behavior.allowedContentTypes())
 
     def test_allowedContentTypesExit3(self):
         """
@@ -287,7 +303,7 @@ def test_allowedContentTypesExit3(self):
 
         behavior = ISelectableConstrainTypes(self.inner_folder)
         behavior.setConstrainTypesMode(constrains.ACQUIRE)
-        self.assertEquals(self.types_id_subset,
+        self.assertEqual(self.types_id_subset,
                           [x.getId() for x in behavior.allowedContentTypes()])
 
     def test_allowedContentTypesExit4(self):
@@ -299,19 +315,19 @@ def test_allowedContentTypesExit4(self):
         behavior.setLocallyAllowedTypes(self.types_id_subset)
         behavior.setConstrainTypesMode(constrains.ENABLED)
 
-        self.assertEquals(self.types_id_subset,
+        self.assertEqual(self.types_id_subset,
                           [x.getId() for x in behavior.allowedContentTypes()])
 
     def test_formschemainvariants(self):
         class Data(object):
-            current_prefer = []
-            current_allow = []
+            allowed_types = []
+            secondary_types = []
         bad = Data()
-        bad.current_prefer = []
-        bad.current_allow = ['1']
+        bad.allowed_types = []
+        bad.secondary_types = ['1']
         good = Data()
-        good.current_prefer = ['1']
-        good.current_allow = []
+        good.allowed_types = ['1']
+        good.secondary_types = []
         self.assertTrue(IConstrainForm.validateInvariants(good) is None)
         self.assertRaises(Invalid, IConstrainForm.validateInvariants, bad)
 
@@ -358,14 +374,14 @@ def test_form_save_restrictions(self):
         self.browser.getLink('Restrictions').click()
         ctrl = lambda name: self.browser.getControl(name=name)
         self.browser.getControl("Type restrictions").value = ['1']
-        ctrl("form.widgets.current_prefer:list").value = ["Document", "Folder"]
-        ctrl("form.widgets.current_allow:list").value = ["Document"]
+        ctrl("form.widgets.allowed_types:list").value = ["Document", "Folder"]
+        ctrl("form.widgets.secondary_types:list").value = ["Document"]
         self.browser.getControl("Save").click()
         aspect = ISelectableConstrainTypes(self.folder)
-        self.assertEquals(1, aspect.getConstrainTypesMode())
-        self.assertEquals(["Document", "Folder"],
+        self.assertEqual(1, aspect.getConstrainTypesMode())
+        self.assertEqual(["Document", "Folder"],
                           aspect.getLocallyAllowedTypes())
-        self.assertEquals(["Folder"], aspect.getImmediatelyAddableTypes())
+        self.assertEqual(["Folder"], aspect.getImmediatelyAddableTypes())
 
     def test_form_bad_save(self):
         aspect = ISelectableConstrainTypes(self.folder)
@@ -377,10 +393,10 @@ def test_form_bad_save(self):
         self.browser.getLink('Restrictions').click()
         ctrl = lambda name: self.browser.getControl(name=name)
         self.browser.getControl("Type restrictions").value = ['1']
-        ctrl("form.widgets.current_prefer:list").value = ["Document"]
-        ctrl("form.widgets.current_allow:list").value = ["Document", "Folder"]
+        ctrl("form.widgets.allowed_types:list").value = ["Document"]
+        ctrl("form.widgets.secondary_types:list").value = ["Document", "Folder"]
         self.browser.getControl("Save").click()
-        self.assertEquals(constraint_before, aspect.getConstrainTypesMode())
+        self.assertEqual(constraint_before, aspect.getConstrainTypesMode())
         self.assertTrue('Error' in self.browser.contents)
 
 
diff --git a/plone/app/dexterity/tests/test_nextprevious.py b/plone/app/dexterity/tests/test_nextprevious.py
index 3e3db8d..1cac31f 100644
--- a/plone/app/dexterity/tests/test_nextprevious.py
+++ b/plone/app/dexterity/tests/test_nextprevious.py
@@ -41,9 +41,6 @@ def setUp(self):
         self.portal.invokeFactory('Document', 'doc2')
         self.portal.invokeFactory('Document', 'doc3')
         self.portal.invokeFactory(self._portal_type, 'folder1')
-        self.portal.invokeFactory('Link', 'link1')
-        self.portal.link1.setRemoteUrl('http://plone.org')
-        self.portal.link1.reindexObject()
         folder1 = getattr(self.portal, 'folder1')
         folder1.invokeFactory('Document', 'doc11')
         folder1.invokeFactory('Document', 'doc12')
@@ -53,19 +50,18 @@ def setUp(self):
         folder2.invokeFactory('Document', 'doc21')
         folder2.invokeFactory('Document', 'doc22')
         folder2.invokeFactory('Document', 'doc23')
-        folder2.invokeFactory('File', 'file21')
 
     def testIfFolderImplementsPreviousNext(self):
-        self.failUnless(INextPreviousProvider(self.portal.folder1, None))
+        self.assertTrue(INextPreviousProvider(self.portal.folder1, None))
 
     def testNextPreviousEnablingOnCreation(self):
-        self.failUnless(INextPreviousProvider(self.portal.folder1).enabled)
+        self.assertTrue(INextPreviousProvider(self.portal.folder1).enabled)
 
     def testNextPreviousViewEnabled(self):
         doc = self.portal.folder1.doc11
         view = doc.restrictedTraverse('@@plone_nextprevious_view')
-        self.failIf(view is None)
-        self.failUnless(view.enabled())
+        self.assertFalse(view is None)
+        self.assertTrue(view.enabled())
 
     def testNextPreviousItems(self):
         container = self.portal[self.portal.invokeFactory(
@@ -174,25 +170,25 @@ def setUp(self):
         setRoles(self.portal, TEST_USER_ID, ['Member'])
 
     def testIfFolderImplementsPreviousNext(self):
-        self.failUnless(INextPreviousProvider(self.portal.folder1, None))
+        self.assertTrue(INextPreviousProvider(self.portal.folder1, None))
 
     def testNextPreviousEnablingOnCreation(self):
         # This is tested properly in the doctest, the default z3c.form
         # value is not set here.
-        self.failIf(INextPreviousProvider(self.portal.folder1).enabled)
+        self.assertFalse(INextPreviousProvider(self.portal.folder1).enabled)
 
     def testNextPreviousViewDisabled(self):
         doc = self.portal.folder1.doc11
         view = doc.restrictedTraverse('@@plone_nextprevious_view')
-        self.failIf(view is None)
-        self.failIf(view.enabled())
+        self.assertFalse(view is None)
+        self.assertFalse(view.enabled())
 
     def testNextPreviousViewEnabled(self):
         self.portal.folder1.nextPreviousEnabled = True
         doc = self.portal.folder1.doc11
         view = doc.restrictedTraverse('@@plone_nextprevious_view')
-        self.failIf(view is None)
-        self.failUnless(view.enabled())
+        self.assertFalse(view is None)
+        self.assertTrue(view.enabled())
 
 
 def test_suite():
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
new file mode 100644
index 0000000..51d89ed
--- /dev/null
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -0,0 +1,201 @@
+# -*- coding: utf-8 -*-
+from z3c.form.interfaces import IFieldWidget
+from z3c.form.util import getSpecification
+from zope.component import provideAdapter
+from plone.app.widgets.interfaces import IWidgetsLayer
+from zope.component.globalregistry import base
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import login
+from plone.app.testing import setRoles
+from plone.app.content.browser.vocabulary import VocabularyView
+from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
+from plone.app.widgets.testing import TestRequest
+from plone.autoform.interfaces import WIDGETS_KEY
+from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from zope import schema
+from zope.globalrequest import setRequest
+from zope.interface import Interface
+from z3c.form.widget import FieldWidget
+from plone.dexterity.fti import DexterityFTI
+
+import json
+
+try:
+    import unittest2 as unittest
+except ImportError:  # pragma: nocover
+    import unittest  # pragma: nocover
+    assert unittest  # pragma: nocover
+
+
+def add_mock_fti(portal):
+    # Fake DX Type
+    fti = DexterityFTI('dx_mock')
+    portal.portal_types._setObject('dx_mock', fti)
+    fti.klass = 'plone.dexterity.content.Item'
+    fti.schema = 'plone.app.dexterity.tests.test_permissions.IMockSchema'
+    fti.filter_content_types = False
+    fti.behaviors = ('plone.app.dexterity.behaviors.metadata.IBasic',)
+
+
+def _custom_field_widget(field, request):
+    from plone.app.z3cform.widget import AjaxSelectWidget
+    widget = FieldWidget(field, AjaxSelectWidget(request))
+    widget.vocabulary = 'plone.app.vocabularies.PortalTypes'
+    return widget
+
+
+class IMockSchema(Interface):
+    allowed_field = schema.Choice(
+        vocabulary='plone.app.vocabularies.PortalTypes')
+    disallowed_field = schema.Choice(
+        vocabulary='plone.app.vocabularies.PortalTypes')
+    default_field = schema.Choice(
+        vocabulary='plone.app.vocabularies.PortalTypes')
+    custom_widget_field = schema.TextLine()
+    adapted_widget_field = schema.TextLine()
+
+IMockSchema.setTaggedValue(WRITE_PERMISSIONS_KEY, {
+    'allowed_field': u'zope2.View',
+    'disallowed_field': u'zope2.ViewManagementScreens',
+    'custom_widget_field': u'zope2.View',
+    'adapted_widget_field': u'zope2.View',
+})
+IMockSchema.setTaggedValue(WIDGETS_KEY, {
+    'custom_widget_field': _custom_field_widget,
+})
+
+
+def _enable_custom_widget(field):
+    provideAdapter(_custom_field_widget, adapts=
+                   (getSpecification(field), IWidgetsLayer),
+                   provides=IFieldWidget)
+
+
+def _disable_custom_widget(field):
+        base.unregisterAdapter(
+            required=(getSpecification(field), IWidgetsLayer,),
+            provided=IFieldWidget)
+
+
+class DexterityVocabularyPermissionTests(unittest.TestCase):
+
+    layer = PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
+        setRequest(self.request)
+        self.portal = self.layer['portal']
+
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+        add_mock_fti(self.portal)
+        self.portal.invokeFactory('dx_mock', 'test_dx')
+
+        self.portal.test_dx.manage_permission('View',
+                                              ('Anonymous',),
+                                              acquire=False)
+        self.portal.test_dx.manage_permission('View management screens',
+                                              (),
+                                              acquire=False)
+        self.portal.test_dx.manage_permission('Modify portal content',
+                                              ('Editor', 'Manager',
+                                               'Site Adiminstrator'),
+                                              acquire=False)
+
+    def test_vocabulary_field_allowed(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'allowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+    def test_vocabulary_field_wrong_vocabulary_disallowed(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.Fake',
+            'field': 'allowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_field_disallowed(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'disallowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_field_default_permission(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'default_field',
+        })
+        # If the field is does not have a security declaration, the
+        # default edit permission is tested (Modify portal content)
+        setRoles(self.portal, TEST_USER_ID, ['Member'])
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+        setRoles(self.portal, TEST_USER_ID, ['Editor'])
+        # Now access should be allowed, but the vocabulary does not exist
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+    def test_vocabulary_field_default_permission_wrong_vocab(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.Fake',
+            'field': 'default_field',
+        })
+        setRoles(self.portal, TEST_USER_ID, ['Editor'])
+        # Now access should be allowed, but the vocabulary does not exist
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_missing_field(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'missing_field',
+        })
+        setRoles(self.portal, TEST_USER_ID, ['Member'])
+        with self.assertRaises(AttributeError):
+            view()
+
+    def test_vocabulary_on_widget(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'custom_widget_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+        self.request.form['name'] = 'plone.app.vocabularies.Fake'
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_on_adapted_widget(self):
+        _enable_custom_widget(IMockSchema['adapted_widget_field'])
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'adapted_widget_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+        self.request.form['name'] = 'plone.app.vocabularies.Fake'
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        _disable_custom_widget(IMockSchema['adapted_widget_field'])
\ No newline at end of file
diff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py
new file mode 100644
index 0000000..af93902
--- /dev/null
+++ b/plone/app/dexterity/tests/test_robot.py
@@ -0,0 +1,28 @@
+from plone.testing import layered
+
+from plone.app.dexterity.testing import DEXTERITY_ACCEPTANCE_TESTING
+from plone.app.testing import ROBOT_TEST_LEVEL
+
+import os
+import robotsuite
+import unittest
+
+
+def test_suite():
+    suite = unittest.TestSuite()
+    current_dir = os.path.abspath(os.path.dirname(__file__))
+    robot_dir = os.path.join(current_dir, 'robot')
+    robot_tests = [
+        os.path.join('robot', doc) for doc in os.listdir(robot_dir)
+        if doc.endswith('.robot') and doc.startswith('test_')
+    ]
+    for robot_test in robot_tests:
+        robottestsuite = robotsuite.RobotTestSuite(robot_test)
+        robottestsuite.level = ROBOT_TEST_LEVEL
+        suite.addTests([
+            layered(
+                robottestsuite,
+                layer=DEXTERITY_ACCEPTANCE_TESTING
+            ),
+        ])
+    return suite
diff --git a/plone/app/dexterity/upgrades/configure.zcml b/plone/app/dexterity/upgrades/configure.zcml
index 1b40b5d..e79a73b 100644
--- a/plone/app/dexterity/upgrades/configure.zcml
+++ b/plone/app/dexterity/upgrades/configure.zcml
@@ -19,7 +19,7 @@
     />
 
   <!-- Dexterity 2.0 -->
-  
+
   <genericsetup:upgradeStep
     source="5"
     destination="2000"
@@ -27,7 +27,7 @@
     profile="plone.app.dexterity:default"
     handler=".to2000.remove_overlays_css"
     />
-  
+
   <genericsetup:upgradeStep
     source="2000"
     destination="2001"
@@ -52,4 +52,12 @@
     handler=".to2003.fix_installed_products"
     />
 
+  <genericsetup:upgradeStep
+    source="2003"
+    destination="2004"
+    title="Remove line feeds and carrige returns from the description"
+    profile="plone.app.dexterity:default"
+    handler=".to2004.remove_cr_and_lf_description"
+    />
+
 </configure>
diff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py
new file mode 100644
index 0000000..00d44a5
--- /dev/null
+++ b/plone/app/dexterity/upgrades/to2004.py
@@ -0,0 +1,35 @@
+from Products.CMFCore.utils import getToolByName
+
+from plone.dexterity.interfaces import IDexterityFTI
+
+
+def remove_cr_and_lf_description(context):
+    types = []
+
+    behaviors = [
+        'plone.app.dexterity.behaviors.metadata.IBasic',
+        'plone.app.dexterity.behaviors.metadata.IDublinCore'
+    ]
+
+    context = context.aq_parent
+    sm = context.getSiteManager()
+    for (name, fti) in sm.getUtilitiesFor(IDexterityFTI):
+        for behavior in behaviors:
+            if behavior in fti.behaviors:
+                types.append(name)
+
+    catalog = getToolByName(context, 'portal_catalog')
+
+    for portal_type in types:
+        brains = catalog.searchResults(
+            portal_type=portal_type
+        )
+
+        for brain in brains:
+            obj = brain.getObject()
+
+            if '\n' in obj.description:
+                obj.description = obj.description.replace('\n', '')
+
+            if '\r' in obj.description:
+                obj.description = obj.description.replace('\r', '')
diff --git a/setup.py b/setup.py
index b08109c..d06731c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,10 +1,9 @@
 from setuptools import setup, find_packages
-import os
 
-version = '2.0.9.dev0'
+version = '2.1.3.dev0'
 long_description = open("README.rst").read() + "\n" + \
-    open("RELEASE_NOTES.txt").read() + "\n" + \
-    open(os.path.join("docs", "HISTORY.txt")).read()
+    open("RELEASE_NOTES.rst").read() + "\n" + \
+    open("CHANGES.rst").read()
 
 setup(name='plone.app.dexterity',
       version=version,
@@ -15,7 +14,9 @@
       long_description=long_description,
       classifiers=[
           "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
           "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
           "Topic :: Software Development :: Libraries :: Python Modules",
           "Development Status :: 5 - Production/Stable",
       ],
@@ -30,14 +31,13 @@
       zip_safe=False,
       install_requires=[
           # Dexterity
-          'collective.z3cform.datetimewidget >=1.1dev',
           'plone.app.textfield',
           'plone.behavior>=1.0b5',
-          'plone.dexterity >= 1.0rc1',
+          'plone.dexterity >= 2.2.2dev',
           'plone.formwidget.namedfile',
           'plone.namedfile[scales] >=1.0b5dev-r36016',
           'plone.rfc822',
-          'plone.schemaeditor >=1.0',
+          'plone.schemaeditor >1.3.3',
           # Plone/Zope core
           'lxml',
           'plone.app.content',
@@ -60,9 +60,11 @@
           'zope.schema',
           'zope.publisher',
           'z3c.form>=3.0.0a1',
+          'plone.app.z3cform>=1.1.0.dev0'
       ],
       extras_require={
           'test': [
+              'plone.app.robotframework',
               'plone.app.testing',
               'unittest2'
           ],


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-01T22:42:57Z
Author: Jamie Lentin (lentinj) <jm@lentin.co.uk>
Commit: https://github.com/plone/plone.app.dexterity/commit/f15abd6c9b6b042290966301615e106aab98b3de

Add changelog entry

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 6254a47..e20bec6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.3 (unreleased)
 ------------------
 
+- Ensure the default creator value is a unicode string.
+  [lentinj]
+
 - Update markup and javascript for Plone 5.
   [davisagli]
 


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-06T09:40:42Z
Author: Jamie Lentin (lentinj) <jm@lentin.co.uk>
Commit: https://github.com/plone/plone.app.dexterity/commit/009c53ee7916655b4c5f3cd71c83b7f6e71e3318

Merge remote-tracking branch 'origin/master' into unicode-default-value

Conflicts:
	CHANGES.rst

Files changed:
A plone/app/dexterity/browser/import_types.py
A plone/app/dexterity/tests/import/dexterity_export.zip
A plone/app/dexterity/tests/test_import.py
M CHANGES.rst
M README.rst
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/types_listing.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index e20bec6..eb37398 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -7,6 +7,10 @@ Changelog
 - Ensure the default creator value is a unicode string.
   [lentinj]
 
+- Add facility to import type profiles in zip archives. Added button to
+  types edit page. Import format is identical to export.
+  [smcmahon]
+
 - Update markup and javascript for Plone 5.
   [davisagli]
 
@@ -26,7 +30,7 @@ Changelog
 
 - Add validator to ensure expires date is after effective date.
   [benniboy]
-  
+
 - Remove line feeds and carrige returns from meta description and
   added upgrade step to do it for existing content
   [bosim]
diff --git a/README.rst b/README.rst
index cf2c0b8..50ded0e 100644
--- a/README.rst
+++ b/README.rst
@@ -115,26 +115,16 @@ The following documents are not Dexterity-specific, but will likely be useful
 to users of Dexterity:
 
 * `Schema-driven forms manual`_
-* `five.grok manual`_
 
 .. _`Schema-driven forms manual`: http://docs.plone.org/develop/addons/schema-driven-forms/index.html
-.. _`five.grok manual`: http://docs.plone.org/develop/addons/five-grok/index.html
 
 
-Mailing list
-============
-
-The `dexterity-development group`_ provides a place to discuss development
-and use of Dexterity.
-
-.. _`dexterity-development group`: http://groups.google.com/group/dexterity-development
-
 Issue tracker
 =============
 
 Please report issues via the `Plone issue tracker`_.
 
-.. _`Plone issue tracker`: https://dev.plone.org/
+.. _`Plone issue tracker`: https://github.com/plone/plone.app.dexterity/issues
 
 Support
 =======
@@ -146,13 +136,9 @@ Dexterity use questions may be answered via `Plone's support channels`_.
 Contributing
 ============
 
-Most Dexterity code is owned by the `Plone Foundation`_ and maintained in the
-`Plone github repository`_. We're happy to share commit access so that you can
-share code with us, but first you must sign the `Plone contributor agreement`_.
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
 
-.. _`Plone Foundation`: http://plone.org/foundation
-.. _`Plone github repository`: http://github.com/plone
-.. _`Plone contributor agreement`: http://plone.org/foundation/contributors-agreement
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.dexterity>`_.
 
 Dexterity wouldn't be possible without the hard work of a lot of people, including:
 
diff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml
index 1bd09a0..d93185e 100644
--- a/plone/app/dexterity/browser/configure.zcml
+++ b/plone/app/dexterity/browser/configure.zcml
@@ -65,6 +65,13 @@
         />
 
     <browser:page
+        name="import-types"
+        for="plone.app.dexterity.interfaces.ITypesContext"
+        class=".import_types.TypeProfileImportFormPage"
+        permission="plone.schemaeditor.ManageSchemata"
+        />
+
+    <browser:page
         name="overview"
         for="plone.app.dexterity.interfaces.ITypeSchemaContext"
         class=".overview.TypeOverviewPage"
diff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py
new file mode 100644
index 0000000..d96dce3
--- /dev/null
+++ b/plone/app/dexterity/browser/import_types.py
@@ -0,0 +1,188 @@
+# -*- coding: utf-8 -*-
+""" Support for importing Dexterity types from GS zip file.
+"""
+
+# XXX: need to make exceptions more specific, shorten messages
+
+from DateTime.DateTime import DateTime
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.context import BaseContext
+from Products.GenericSetup.interfaces import IImportContext
+from cStringIO import StringIO
+from lxml import etree
+from plone.app.dexterity import MessageFactory as _
+from plone.namedfile.field import NamedFile
+from plone.z3cform.layout import wrap_form
+from z3c.form import field
+from z3c.form import form
+from zipfile import BadZipfile
+from zipfile import ZipFile
+from zope.interface import implementer
+from zope.interface import Invalid
+from zope.interface import Interface
+from zope.interface import invariant
+from zope.site.hooks import getSite
+
+import os.path
+import zope.schema
+
+class ITypeProfileImport(Interface):
+    """ Fields for a zip import form
+    """
+
+    profile_file = NamedFile(
+        title=_(u'Type profiles archive file'),
+        required=True,
+    )
+
+    @invariant
+    def isGoodImportFile(data):
+        nfile = getattr(data, 'profile_file', None)
+        if nfile is None:
+            # let required validator handle this
+            return None
+        try:
+            archive = ZipFile(StringIO(data.profile_file.data), 'r')
+        except BadZipfile:
+            raise Invalid(
+                _(u"Error: The file submitted must be a zip archive."),
+            )
+        name_list = archive.namelist()
+        for fname in name_list:
+            if fname == 'types.xml':
+                continue
+            if os.path.dirname(fname) != 'types' \
+               or os.path.splitext(fname)[1] != '.xml':
+                raise Invalid(
+                    _(u"Error: The file submitted must be a zip archive "
+                      u"containing only type profile information.")
+                )
+
+        # check XML for basic integrity
+        with archive.open('types.xml', 'rU') as f:
+            source = f.read()
+            root = etree.fromstring(source)
+            if root.tag != 'object':
+                raise Invalid(_(u'types.xml in archive is invalid.'))
+
+        # check against existing types; don't allow overwrites
+        site = getSite()
+        existing_types = getToolByName(site, 'portal_types').listContentTypes()
+        for element in root.getchildren():
+            if element.tag == 'object':
+                attribs = element.attrib
+                if not attribs['meta_type'] == 'Dexterity FTI':
+                    raise Invalid(_(
+                        'Types in archive must be only Dexterity types.'
+                    ),)
+                if attribs['name'] in existing_types:
+                    raise Invalid(_(
+                        u'One or more types in the import archive is an '
+                        u'existing type. Delete "%s" if you '
+                        u'really wish to replace it.' % attribs['name']
+                    ),)
+
+
+@implementer(ITypeProfileImport)
+class TypeProfileImport(object):
+    form_fields = field.Fields(ITypeProfileImport)
+    profile_file = zope.schema.fieldproperty.FieldProperty(
+        ITypeProfileImport['profile_file']
+    )
+
+    def __init__(self, profile_file):
+        self.profile_file = profile_file
+
+
+class TypeProfileImportForm(form.AddForm):
+
+    label = _(u'Import Content Types')
+    description = _(
+        u"You may import types by uploading a zip archive containing type "
+        u"profiles. The import archive should contain a types.xml file and a "
+        u"types directory containing one or more Dexterity type information "
+        u"files. For a sample, create a content type and export it from the "
+        u"Dexterity Content Types page."
+    )
+    fields = field.Fields(ITypeProfileImport)
+    id = 'import-types-form'
+
+    def create(self, data):
+        return TypeProfileImport(**data)
+
+    def add(self, profile_import):
+        # initialize import context
+        types_tool = getToolByName(self.context, 'portal_types')
+        import_context = ZipFileImportContext(
+            types_tool,
+            StringIO(profile_import.profile_file.data)
+        )
+        # run the profile
+        setup_tool = getToolByName(self.context, 'portal_setup')
+        handler = setup_tool.getImportStep(u'typeinfo')
+        handler(import_context)
+        self.status = _(u"Imported successfully.")
+
+    def nextURL(self):
+        url = self.context.absolute_url()
+        return url
+
+TypeProfileImportFormPage = wrap_form(TypeProfileImportForm)
+
+
+@implementer(IImportContext)
+class ZipFileImportContext(BaseContext):
+    """ GS Import context for a ZipFile """
+
+    def __init__(self, tool, archive_bits, encoding=None, should_purge=False):
+        super(ZipFileImportContext, self).__init__(tool, encoding)
+        self._archive = ZipFile(archive_bits, 'r')
+        self._should_purge = bool(should_purge)
+        self.name_list = self._archive.namelist()
+
+    def readDataFile(self, filename, subdir=None):
+
+        if subdir is not None:
+            filename = '/'.join((subdir, filename))
+
+        try:
+            file = self._archive.open(filename, 'rU')
+        except KeyError:
+            return None
+
+        return file.read()
+
+    def getLastModified(self, path):
+        try:
+            zip_info = self._archive.getinfo(path)
+        except KeyError:
+            return None
+        return DateTime(*zip_info.date_time)
+
+    def isDirectory(self, path):
+        """ See IImportContext """
+
+        # namelist only includes full filenames, not directories
+        return path not in self.name_list
+
+    def listDirectory(self, path, skip=[]):
+        """ See IImportContext """
+
+        # namelist contains only full path/filenames, not
+        # directories. But we need to include directories.
+
+        if path is None:
+            path = ''
+        path_parts = path.split('/')
+        res = set()
+        for pn in self.name_list:
+            dn, bn = os.path.split(pn)
+            dn_parts = dn.split('/')
+            if dn == path:
+                if bn not in skip:
+                    res.add(bn)
+                continue
+            if dn.startswith(path) \
+               and (path == '' or len(dn_parts) == len(path_parts) + 1):
+                res.add(dn_parts[-1])
+        return list(res)
diff --git a/plone/app/dexterity/browser/types_listing.pt b/plone/app/dexterity/browser/types_listing.pt
index de75042..9a82b23 100644
--- a/plone/app/dexterity/browser/types_listing.pt
+++ b/plone/app/dexterity/browser/types_listing.pt
@@ -26,6 +26,12 @@
            i18n:translate="">Add New Content Type&hellip;</button>
 </a>
 
+<a class="pat-modal"
+   href="${context/absolute_url}/@@import-types">
+   <button i18n:domain="plone.app.dexterity"
+           i18n:translate="">Import Type Profiles&hellip;</button>
+</a>
+
 <div tal:repeat="form view/subforms"
      tal:content="structure form/render"
      class="crud-form">
diff --git a/plone/app/dexterity/tests/import/dexterity_export.zip b/plone/app/dexterity/tests/import/dexterity_export.zip
new file mode 100644
index 0000000..34563be
Binary files /dev/null and b/plone/app/dexterity/tests/import/dexterity_export.zip differ
diff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py
new file mode 100644
index 0000000..46ea510
--- /dev/null
+++ b/plone/app/dexterity/tests/test_import.py
@@ -0,0 +1,103 @@
+# -*- coding: utf-8 -*-
+"""Test the types import."""
+
+from DateTime.DateTime import DateTime
+from plone.app.dexterity.browser.import_types import ITypeProfileImport
+from plone.app.dexterity.browser.import_types import TypeProfileImport
+from plone.app.dexterity.browser.import_types import ZipFileImportContext
+from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+from Products.CMFCore.utils import getToolByName
+
+import os.path
+import plone.namedfile
+import unittest2 as unittest
+import zope.interface
+
+
+class TestDexterityTypesImport(unittest.TestCase):
+    """Test import."""
+
+    layer = DEXTERITY_INTEGRATION_TESTING
+
+    def testZipFileImportContext(self):
+        portal = self.layer['portal']
+        types_tool = getToolByName(portal, 'portal_types')
+
+        zname = os.path.join(
+            os.path.dirname(__file__),
+            'import',
+            'dexterity_export.zip',
+        )
+        f = open(zname, 'r')
+        icontext = ZipFileImportContext(types_tool, f)
+
+        types_xml = icontext.readDataFile('types.xml')
+        self.assertTrue(
+            types_xml,
+            msg='Unable to read types.xml in sample import file',
+        )
+
+        self.assertTrue(
+            isinstance(
+                icontext.getLastModified('types.xml'),
+                DateTime
+            )
+        )
+
+        self.assertEqual(
+            set(icontext.listDirectory('')),
+            set(['types', 'types.xml'])
+        )
+
+        self.assertEqual(
+            set(icontext.listDirectory('types')),
+            set(['test_type_two.xml', 'test_type_one.xml'])
+        )
+
+        # test importIsTypesOnly check
+        # self.assertTrue(icontext.importIsTypesOnly())
+
+        f.close()
+
+    def testSampleImportStep(self):
+        """ Import our sample file
+        """
+
+        portal = self.layer['portal']
+        setup_tool = getToolByName(portal, 'portal_setup')
+        types_tool = getToolByName(portal, 'portal_types')
+        old_types = set(types_tool.listContentTypes())
+
+        handler = setup_tool.getImportStep(u'typeinfo')
+
+        zname = os.path.join(
+            os.path.dirname(__file__),
+            'import',
+            'dexterity_export.zip'
+        )
+        with open(zname, 'r') as f:
+            icontext = ZipFileImportContext(types_tool, f)
+            handler(icontext)
+
+        # Our types list should have our two new types
+        self.assertEqual(
+            set(types_tool.listContentTypes()) - old_types,
+            set(['test_type_one', 'test_type_two'])
+        )
+
+        # Trying to import now should fail, since
+        # it would be importing existing types.
+        # This is tested in an invariant.
+        data = TypeProfileImport(profile_file=plone.namedfile.NamedFile())
+        with open(zname, 'r') as f:
+            data.profile_file.data = f.read()
+        self.assertRaises(
+            zope.interface.Invalid,
+            ITypeProfileImport.validateInvariants,
+            data
+        )
+
+
+
+def test_suite():
+    return unittest.defaultTestLoader.loadTestsFromName(__name__)


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-06T11:35:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/9be5ef2e647a6b1a4965d2f848e0881cd1034cd3

Merge pull request #115 from lentinj/unicode-default-value

Default creators value should be unicode

Files changed:
M CHANGES.rst
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/tests/metadata.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 369c0bd..eb37398 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.3 (unreleased)
 ------------------
 
+- Ensure the default creator value is a unicode string.
+  [lentinj]
+
 - Add facility to import type profiles in zip archives. Added button to
   types edit page. Import format is identical to export.
   [smcmahon]
diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index fececbf..d7e779b 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -21,6 +21,7 @@
 from zope.interface import invariant
 from zope.interface import provider
 from zope.schema.interfaces import IContextAwareDefaultFactory
+from plone.dexterity.utils import safe_unicode
 from zope.schema.interfaces import IText, ISequence
 
 # Behavior interfaces to display Dublin Core metadata fields on Dexterity
@@ -225,7 +226,8 @@ class IOwnership(model.Schema):
 # make sure the add form shows the default creator
 def creatorsDefault(data):
     user = getSecurityManager().getUser()
-    return user and (user.getId(),)
+    # NB: CMF users are UTF-8 encoded bytes, decode them before inserting
+    return user and (safe_unicode(user.getId()),)
 CreatorsDefaultValue = ComputedWidgetAttribute(
     creatorsDefault,
     field=IOwnership['creators']
diff --git a/plone/app/dexterity/tests/metadata.txt b/plone/app/dexterity/tests/metadata.txt
index b2cb3a1..ee78901 100644
--- a/plone/app/dexterity/tests/metadata.txt
+++ b/plone/app/dexterity/tests/metadata.txt
@@ -53,3 +53,13 @@ The modified and creation dates are set correctly::
     >>> DateTime() > DateTime(md.CreationDate())
     True
 
+The creators field contains the current user as a unicode string, and you
+should be able to set same value without a validation error::
+
+    >>> from zope.schema import getFields
+    >>> from plone.dexterity.utils import getAdditionalSchemata
+    >>> schema = getAdditionalSchemata(context=md).next()
+    >>> field = getFields(schema)['creators']
+    >>> field.get(field.interface(md))
+    (u'test_user_1_',)
+    >>> field.set(field.interface(md), (u'test_user_1_',))


