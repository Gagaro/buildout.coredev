Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2015-08-03T15:01:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/0603210c74ff3cc31ee326f97811944022573fe8

pe8 et al.

Files changed:
M CHANGES.rst
M README.rst
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/__init__.py
M plone/app/contentmenu/tests/test_menu.py
M plone/app/contentmenu/view.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b26d5b8..e72c38e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.6 (unreleased)
 ------------------
 
+- pep8, zca decorators, plone code conventions
+  [jensens]
+
 - do not open manage portlets in a modal
   [vangheem]
 
diff --git a/README.rst b/README.rst
index 0409600..9a646a0 100644
--- a/README.rst
+++ b/README.rst
@@ -2,5 +2,5 @@ Introduction
 ============
 
 plone.app.contentmenu contains the logic that powers Plone's content menu
-(the green one with the drop-down menus).
+(the green one with the drop-down menus or in toolbar).
 
diff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py
index 985e571..ccf11d9 100644
--- a/plone/app/contentmenu/__init__.py
+++ b/plone/app/contentmenu/__init__.py
@@ -1,3 +1,3 @@
-# Import PloneMessageFactory to create messages in the plone domain
+# -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory
 PloneMessageFactory = MessageFactory('plone')
diff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py
index 9505e8f..dcfecc2 100644
--- a/plone/app/contentmenu/displayviewsmenu.py
+++ b/plone/app/contentmenu/displayviewsmenu.py
@@ -1,14 +1,13 @@
+# -*- coding: utf-8 -*-
+from plone.app.contentmenu.interfaces import IDisplayViewsMenu
 from zope.browsermenu.menu import BrowserMenu
 from zope.component import getAdapters
-from zope.interface import implements
-
-from plone.app.contentmenu.interfaces import IDisplayViewsMenu
+from zope.interface import implementer
 
 
+@implementer(IDisplayViewsMenu)
 class DisplayViewsMenu(BrowserMenu):
 
-    implements(IDisplayViewsMenu)
-
     def getMenuItemByAction(self, object, request, action):
         # Normalize actions; strip view prefix
         if action.startswith('@@'):
diff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py
index 219acd2..68606b6 100644
--- a/plone/app/contentmenu/interfaces.py
+++ b/plone/app/contentmenu/interfaces.py
@@ -1,10 +1,10 @@
+# -*- coding: utf-8 -*-
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.browsermenu.interfaces import IBrowserSubMenuItem
 from zope.browsermenu.interfaces import IMenuItemType
-from zope.interface import Interface
-from zope.interface import directlyProvides
-
 from zope.contentprovider.interfaces import IContentProvider
+from zope.interface import directlyProvides
+from zope.interface import Interface
 
 
 class IContentMenuView(IContentProvider):
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index ecb08fb..62bf20c 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -1,26 +1,8 @@
-from cgi import escape
-
-from plone.memoize.instance import memoize
-from plone.app.content.browser.folderfactories import _allowedTypes
-from zope.browsermenu.menu import BrowserMenu
-from zope.browsermenu.menu import BrowserSubMenuItem
-from zope.interface import implements
-from zope.component import getMultiAdapter, queryMultiAdapter
-from zope.component import getUtilitiesFor
-from zope.component import getUtility
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
-
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName, _checkPermission
-from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.CMFPlone import utils
-from Products.CMFPlone.interfaces.structure import INonStructuralFolder
-from Products.CMFPlone.interfaces.constrains import IConstrainTypes
-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import ILocalPortletAssignable
-from plone.registry.interfaces import IRegistry
-
+from cgi import escape
+from plone.app.content.browser.folderfactories import _allowedTypes
 from plone.app.contentmenu import PloneMessageFactory as _
 from plone.app.contentmenu.interfaces import IActionsMenu
 from plone.app.contentmenu.interfaces import IActionsSubMenuItem
@@ -28,27 +10,38 @@
 from plone.app.contentmenu.interfaces import IDisplaySubMenuItem
 from plone.app.contentmenu.interfaces import IFactoriesMenu
 from plone.app.contentmenu.interfaces import IFactoriesSubMenuItem
-from plone.app.contentmenu.interfaces import IWorkflowMenu
-from plone.app.contentmenu.interfaces import IWorkflowSubMenuItem
 from plone.app.contentmenu.interfaces import IPortletManagerMenu
 from plone.app.contentmenu.interfaces import IPortletManagerSubMenuItem
+from plone.app.contentmenu.interfaces import IWorkflowMenu
+from plone.app.contentmenu.interfaces import IWorkflowSubMenuItem
+from plone.memoize.instance import memoize
+from plone.portlets.interfaces import ILocalPortletAssignable
+from plone.portlets.interfaces import IPortletManager
+from plone.protect.utils import addTokenToUrl
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName, _checkPermission
+from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
+from Products.CMFPlone import utils
+from Products.CMFPlone.interfaces.constrains import IConstrainTypes
+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
+from Products.CMFPlone.interfaces.structure import INonStructuralFolder
+from zope.browsermenu.menu import BrowserMenu
+from zope.browsermenu.menu import BrowserSubMenuItem
+from zope.component import getMultiAdapter, queryMultiAdapter
+from zope.component import getUtilitiesFor
+from zope.component import getUtility
+from zope.interface import implementer
+import pkg_resources
 
 try:
+    pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
     from Products.CMFPlacefulWorkflow import ManageWorkflowPolicies
-except ImportError:
-    from Products.CMFCore.permissions import \
-        ManagePortal as ManageWorkflowPolicies
-from plone.protect.utils import addTokenToUrl
-
-
-def _safe_unicode(text):
-    if not isinstance(text, unicode):
-        text = unicode(text, 'utf-8', 'ignore')
-    return text
+except pkg_resources.DistributionNotFound:
+    from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies  # noqa
 
 
+@implementer(IActionsSubMenuItem)
 class ActionsSubMenuItem(BrowserSubMenuItem):
-    implements(IActionsSubMenuItem)
 
     title = _(u'label_actions_menu', default=u'Actions')
     description = _(u'title_actions_menu',
@@ -84,8 +77,8 @@ def selected(self):
         return False
 
 
+@implementer(IActionsMenu)
 class ActionsMenu(BrowserMenu):
-    implements(IActionsMenu)
 
     def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
@@ -121,8 +114,8 @@ def getMenuItems(self, context, request):
         return results
 
 
+@implementer(IDisplaySubMenuItem)
 class DisplaySubMenuItem(BrowserSubMenuItem):
-    implements(IDisplaySubMenuItem)
 
     title = _(u'label_choose_template', default=u'Display')
     submenuId = 'plone_contentmenu_display'
@@ -149,21 +142,18 @@ def description(self):
                      default=u'Delete or rename the index_html item to gain '
                              u'full control over how this folder is '
                              u'displayed.')
-        else:
-            return _(u'title_choose_default_view',
-                     default=u'Select the view mode for this folder, or set a '
-                             u'content item as its default view.')
+        return _(u'title_choose_default_view',
+                 default=u'Select the view mode for this folder, or set a '
+                         u'content item as its default view.')
 
     @property
     def action(self):
         if self.disabled():
             return ''
-        else:
-            if self.context_state.is_default_page():
-                return self.context_state.parent().absolute_url() + \
-                    '/select_default_view'
-            else:
-                return self.context.absolute_url() + '/select_default_view'
+        if self.context_state.is_default_page():
+            return self.context_state.parent().absolute_url() + \
+                '/select_default_view'
+        return self.context.absolute_url() + '/select_default_view'
 
     @memoize
     def available(self):
@@ -231,8 +221,8 @@ def disabled(self):
             return True
 
 
+@implementer(IDisplayMenu)
 class DisplayMenu(BrowserMenu):
-    implements(IDisplayMenu)
 
     def getMenuItems(self, obj, request):
         """Return menu item entries in a TAL-friendly form."""
@@ -322,7 +312,7 @@ def getMenuItems(self, obj, request):
                 'title': _(u'label_item_selected',
                            default=u'Item: ${contentitem}',
                            mapping={'contentitem': escape(
-                               _safe_unicode(obj.Title()))}),
+                               utils.safe_unicode(obj.Title()))}),
                 'description': '',
                 'action': None,
                 'selected': True,
@@ -440,7 +430,7 @@ def getMenuItems(self, obj, request):
                         'title': _(u'label_item_selected',
                                    default=u'Item: ${contentitem}',
                                    mapping={'contentitem': escape(
-                                       _safe_unicode(defaultPageTitle))}),
+                                       utils.safe_unicode(defaultPageTitle))}),
                         'description': '',
                         'action': None,
                         'selected': True,
@@ -473,8 +463,8 @@ def getMenuItems(self, obj, request):
         return results
 
 
+@implementer(IFactoriesSubMenuItem)
 class FactoriesSubMenuItem(BrowserSubMenuItem):
-    implements(IFactoriesSubMenuItem)
 
     submenuId = 'plone_contentmenu_factory'
     order = 10
@@ -549,8 +539,8 @@ def _showConstrainOptions(self):
             return True
 
 
+@implementer(IFactoriesMenu)
 class FactoriesMenu(BrowserMenu):
-    implements(IFactoriesMenu)
 
     def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
@@ -643,8 +633,9 @@ def _contentCanBeAdded(self, addContext, request):
             return _allowedTypes(request, addContext)
         return constrain.getLocallyAllowedTypes()
 
+
+@implementer(IWorkflowSubMenuItem)
 class WorkflowSubMenuItem(BrowserSubMenuItem):
-    implements(IWorkflowSubMenuItem)
 
     MANAGE_SETTINGS_PERMISSION = 'Manage portal'
 
@@ -711,8 +702,8 @@ def _currentStateTitle(self):
                     return w.states[state].title or state
 
 
+@implementer(IWorkflowMenu)
 class WorkflowMenu(BrowserMenu):
-    implements(IWorkflowMenu)
 
     # BBB: These actions (url's) existed in old workflow definitions
     # but were never used. The scripts they reference don't exist in
@@ -815,8 +806,8 @@ def getMenuItems(self, context, request):
         return results
 
 
+@implementer(IPortletManagerSubMenuItem)
 class PortletManagerSubMenuItem(BrowserSubMenuItem):
-    implements(IPortletManagerSubMenuItem)
 
     MANAGE_SETTINGS_PERMISSION = 'Portlets: Manage portlets'
 
@@ -874,8 +865,8 @@ def _manageSettings(self):
         return has_manage_portlets_permission
 
 
+@implementer(IPortletManagerMenu)
 class PortletManagerMenu(BrowserMenu):
-    implements(IPortletManagerMenu)
 
     def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
diff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py
index 49d7339..4d8cbdf 100644
--- a/plone/app/contentmenu/testing.py
+++ b/plone/app/contentmenu/testing.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import applyProfile
 from plone.app.testing import FunctionalTesting
 from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import applyProfile
 from plone.testing import z2
 from zope.configuration import xmlconfig
 import pkg_resources
diff --git a/plone/app/contentmenu/tests/__init__.py b/plone/app/contentmenu/tests/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/contentmenu/tests/__init__.py
+++ b/plone/app/contentmenu/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 59a2844..17194b4 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -1,10 +1,4 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import INonStructuralFolder
-from Products.CMFPlone.interfaces import ISelectableConstrainTypes
-from Products.CMFPlone.tests import dummy
-from Products.CMFPlone.utils import _createObjectByType
 from plone.app.contentmenu.interfaces import IActionsMenu
 from plone.app.contentmenu.interfaces import IDisplayMenu
 from plone.app.contentmenu.interfaces import IFactoriesMenu
@@ -13,11 +7,17 @@
 from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING  # noqa
 from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING  # noqa
 from plone.app.contenttypes.testing import set_browserlayer
-from plone.app.testing import TEST_USER_ID
 from plone.app.testing import login
 from plone.app.testing import logout
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.locking.interfaces import ILockable
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import INonStructuralFolder
+from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+from Products.CMFPlone.tests import dummy
+from Products.CMFPlone.utils import _createObjectByType
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
 from zope.interface import directlyProvides
@@ -336,7 +336,7 @@ def testTypeNameIsURLQuoted(self):
         actions = self.menu.getMenuItems(self.folder, self.request)
         found = False
         for url in [a['action'] for a in actions]:
-            if self.folder.absolute_url() + '/createObject?type_name=News+Item' in url:
+            if self.folder.absolute_url() + '/createObject?type_name=News+Item' in url:  # noqa
                 found = True
         self.assertTrue(found)
 
diff --git a/plone/app/contentmenu/view.py b/plone/app/contentmenu/view.py
index 6a5bed6..eff3754 100644
--- a/plone/app/contentmenu/view.py
+++ b/plone/app/contentmenu/view.py
@@ -1,19 +1,17 @@
+# -*- coding: utf-8 -*-
+from plone.app.contentmenu.interfaces import IContentMenuView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
-from zope.interface import implements
 from zope.contentprovider.provider import ContentProviderBase
-
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-from plone.app.contentmenu.interfaces import IContentMenuView
+from zope.interface import implementer
 
 
+@implementer(IContentMenuView)
 class ContentMenuProvider(ContentProviderBase):
     """Content menu provider for the "view" tab: displays the menu
     """
 
-    implements(IContentMenuView)
-
     index = ViewPageTemplateFile('contentmenu.pt')
 
     def render(self):
diff --git a/setup.py b/setup.py
index e11c320..aef8859 100644
--- a/setup.py
+++ b/setup.py
@@ -1,36 +1,39 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '2.1.6.dev0'
-
-setup(name='plone.app.contentmenu',
-      version=version,
-      description="Plone's content menu implementation",
-      long_description=open("README.rst").read() + "\n" +
-                       open("CHANGES.rst").read(),
-      classifiers=[
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-        ],
-      keywords='plone contentmenu menu',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.app.contentmenu',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
+long_description = open("README.rst").read() + "\n"
+long_description += open("CHANGES.rst").read()
+setup(
+    name='plone.app.contentmenu',
+    version=version,
+    description="Plone's content menu implementation",
+    long_description=long_description,
+    classifiers=[
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+      ],
+    keywords='plone contentmenu menu',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.app.contentmenu',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
         test=[
-          'plone.app.testing',
-          'plone.app.contenttypes',
-          ]
-        ),
-      install_requires=[
+            'plone.app.testing',
+            'plone.app.contenttypes',
+        ]
+    ),
+    install_requires=[
         'setuptools',
         'plone.locking',
         'plone.memoize',
@@ -48,5 +51,5 @@
         'Products.CMFPlone',
         'plone.protect >= 3.0.0a1',
         'Zope2',
-      ],
-      )
+    ],
+)


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2015-08-03T15:44:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/86b80c2227afb2bb575fd7c194b636cee1cb491d

Fix: Permission check ManageWorkflowPolicies was always on fallback to ManagerPortal

Files changed:
M CHANGES.rst
M plone/app/contentmenu/menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e72c38e..fb595b0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 2.1.6 (unreleased)
 ------------------
 
+- Fix: Permission check ``ManageWorkflowPolicies`` was always on fallback to
+  ``ManagerPortal``. Now checks the correct permission after using the 
+  pkg_resources.get_distribution api for checking (never catch an ImportError).
+  [jensens]
+
 - pep8, zca decorators, plone code conventions
   [jensens]
 
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 62bf20c..3976d72 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -35,7 +35,7 @@
 
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
-    from Products.CMFPlacefulWorkflow import ManageWorkflowPolicies
+    from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies
 except pkg_resources.DistributionNotFound:
     from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies  # noqa
 


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2015-08-03T17:21:55+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.contentmenu/commit/d3f1c66ded63cf59940e7f9053a828b78dbc3be3

Merge pull request #12 from plone/jensens-cleanup

pep8 et al.

Files changed:
M CHANGES.rst
M README.rst
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/__init__.py
M plone/app/contentmenu/tests/test_menu.py
M plone/app/contentmenu/view.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b26d5b8..fb595b0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,14 @@ Changelog
 2.1.6 (unreleased)
 ------------------
 
+- Fix: Permission check ``ManageWorkflowPolicies`` was always on fallback to
+  ``ManagerPortal``. Now checks the correct permission after using the 
+  pkg_resources.get_distribution api for checking (never catch an ImportError).
+  [jensens]
+
+- pep8, zca decorators, plone code conventions
+  [jensens]
+
 - do not open manage portlets in a modal
   [vangheem]
 
diff --git a/README.rst b/README.rst
index 0409600..9a646a0 100644
--- a/README.rst
+++ b/README.rst
@@ -2,5 +2,5 @@ Introduction
 ============
 
 plone.app.contentmenu contains the logic that powers Plone's content menu
-(the green one with the drop-down menus).
+(the green one with the drop-down menus or in toolbar).
 
diff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py
index 985e571..ccf11d9 100644
--- a/plone/app/contentmenu/__init__.py
+++ b/plone/app/contentmenu/__init__.py
@@ -1,3 +1,3 @@
-# Import PloneMessageFactory to create messages in the plone domain
+# -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory
 PloneMessageFactory = MessageFactory('plone')
diff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py
index 9505e8f..dcfecc2 100644
--- a/plone/app/contentmenu/displayviewsmenu.py
+++ b/plone/app/contentmenu/displayviewsmenu.py
@@ -1,14 +1,13 @@
+# -*- coding: utf-8 -*-
+from plone.app.contentmenu.interfaces import IDisplayViewsMenu
 from zope.browsermenu.menu import BrowserMenu
 from zope.component import getAdapters
-from zope.interface import implements
-
-from plone.app.contentmenu.interfaces import IDisplayViewsMenu
+from zope.interface import implementer
 
 
+@implementer(IDisplayViewsMenu)
 class DisplayViewsMenu(BrowserMenu):
 
-    implements(IDisplayViewsMenu)
-
     def getMenuItemByAction(self, object, request, action):
         # Normalize actions; strip view prefix
         if action.startswith('@@'):
diff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py
index 219acd2..68606b6 100644
--- a/plone/app/contentmenu/interfaces.py
+++ b/plone/app/contentmenu/interfaces.py
@@ -1,10 +1,10 @@
+# -*- coding: utf-8 -*-
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.browsermenu.interfaces import IBrowserSubMenuItem
 from zope.browsermenu.interfaces import IMenuItemType
-from zope.interface import Interface
-from zope.interface import directlyProvides
-
 from zope.contentprovider.interfaces import IContentProvider
+from zope.interface import directlyProvides
+from zope.interface import Interface
 
 
 class IContentMenuView(IContentProvider):
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index ecb08fb..3976d72 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -1,26 +1,8 @@
-from cgi import escape
-
-from plone.memoize.instance import memoize
-from plone.app.content.browser.folderfactories import _allowedTypes
-from zope.browsermenu.menu import BrowserMenu
-from zope.browsermenu.menu import BrowserSubMenuItem
-from zope.interface import implements
-from zope.component import getMultiAdapter, queryMultiAdapter
-from zope.component import getUtilitiesFor
-from zope.component import getUtility
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
-
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName, _checkPermission
-from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.CMFPlone import utils
-from Products.CMFPlone.interfaces.structure import INonStructuralFolder
-from Products.CMFPlone.interfaces.constrains import IConstrainTypes
-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import ILocalPortletAssignable
-from plone.registry.interfaces import IRegistry
-
+from cgi import escape
+from plone.app.content.browser.folderfactories import _allowedTypes
 from plone.app.contentmenu import PloneMessageFactory as _
 from plone.app.contentmenu.interfaces import IActionsMenu
 from plone.app.contentmenu.interfaces import IActionsSubMenuItem
@@ -28,27 +10,38 @@
 from plone.app.contentmenu.interfaces import IDisplaySubMenuItem
 from plone.app.contentmenu.interfaces import IFactoriesMenu
 from plone.app.contentmenu.interfaces import IFactoriesSubMenuItem
-from plone.app.contentmenu.interfaces import IWorkflowMenu
-from plone.app.contentmenu.interfaces import IWorkflowSubMenuItem
 from plone.app.contentmenu.interfaces import IPortletManagerMenu
 from plone.app.contentmenu.interfaces import IPortletManagerSubMenuItem
-
-try:
-    from Products.CMFPlacefulWorkflow import ManageWorkflowPolicies
-except ImportError:
-    from Products.CMFCore.permissions import \
-        ManagePortal as ManageWorkflowPolicies
+from plone.app.contentmenu.interfaces import IWorkflowMenu
+from plone.app.contentmenu.interfaces import IWorkflowSubMenuItem
+from plone.memoize.instance import memoize
+from plone.portlets.interfaces import ILocalPortletAssignable
+from plone.portlets.interfaces import IPortletManager
 from plone.protect.utils import addTokenToUrl
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName, _checkPermission
+from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
+from Products.CMFPlone import utils
+from Products.CMFPlone.interfaces.constrains import IConstrainTypes
+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
+from Products.CMFPlone.interfaces.structure import INonStructuralFolder
+from zope.browsermenu.menu import BrowserMenu
+from zope.browsermenu.menu import BrowserSubMenuItem
+from zope.component import getMultiAdapter, queryMultiAdapter
+from zope.component import getUtilitiesFor
+from zope.component import getUtility
+from zope.interface import implementer
+import pkg_resources
 
-
-def _safe_unicode(text):
-    if not isinstance(text, unicode):
-        text = unicode(text, 'utf-8', 'ignore')
-    return text
+try:
+    pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
+    from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies
+except pkg_resources.DistributionNotFound:
+    from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies  # noqa
 
 
+@implementer(IActionsSubMenuItem)
 class ActionsSubMenuItem(BrowserSubMenuItem):
-    implements(IActionsSubMenuItem)
 
     title = _(u'label_actions_menu', default=u'Actions')
     description = _(u'title_actions_menu',
@@ -84,8 +77,8 @@ def selected(self):
         return False
 
 
+@implementer(IActionsMenu)
 class ActionsMenu(BrowserMenu):
-    implements(IActionsMenu)
 
     def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
@@ -121,8 +114,8 @@ def getMenuItems(self, context, request):
         return results
 
 
+@implementer(IDisplaySubMenuItem)
 class DisplaySubMenuItem(BrowserSubMenuItem):
-    implements(IDisplaySubMenuItem)
 
     title = _(u'label_choose_template', default=u'Display')
     submenuId = 'plone_contentmenu_display'
@@ -149,21 +142,18 @@ def description(self):
                      default=u'Delete or rename the index_html item to gain '
                              u'full control over how this folder is '
                              u'displayed.')
-        else:
-            return _(u'title_choose_default_view',
-                     default=u'Select the view mode for this folder, or set a '
-                             u'content item as its default view.')
+        return _(u'title_choose_default_view',
+                 default=u'Select the view mode for this folder, or set a '
+                         u'content item as its default view.')
 
     @property
     def action(self):
         if self.disabled():
             return ''
-        else:
-            if self.context_state.is_default_page():
-                return self.context_state.parent().absolute_url() + \
-                    '/select_default_view'
-            else:
-                return self.context.absolute_url() + '/select_default_view'
+        if self.context_state.is_default_page():
+            return self.context_state.parent().absolute_url() + \
+                '/select_default_view'
+        return self.context.absolute_url() + '/select_default_view'
 
     @memoize
     def available(self):
@@ -231,8 +221,8 @@ def disabled(self):
             return True
 
 
+@implementer(IDisplayMenu)
 class DisplayMenu(BrowserMenu):
-    implements(IDisplayMenu)
 
     def getMenuItems(self, obj, request):
         """Return menu item entries in a TAL-friendly form."""
@@ -322,7 +312,7 @@ def getMenuItems(self, obj, request):
                 'title': _(u'label_item_selected',
                            default=u'Item: ${contentitem}',
                            mapping={'contentitem': escape(
-                               _safe_unicode(obj.Title()))}),
+                               utils.safe_unicode(obj.Title()))}),
                 'description': '',
                 'action': None,
                 'selected': True,
@@ -440,7 +430,7 @@ def getMenuItems(self, obj, request):
                         'title': _(u'label_item_selected',
                                    default=u'Item: ${contentitem}',
                                    mapping={'contentitem': escape(
-                                       _safe_unicode(defaultPageTitle))}),
+                                       utils.safe_unicode(defaultPageTitle))}),
                         'description': '',
                         'action': None,
                         'selected': True,
@@ -473,8 +463,8 @@ def getMenuItems(self, obj, request):
         return results
 
 
+@implementer(IFactoriesSubMenuItem)
 class FactoriesSubMenuItem(BrowserSubMenuItem):
-    implements(IFactoriesSubMenuItem)
 
     submenuId = 'plone_contentmenu_factory'
     order = 10
@@ -549,8 +539,8 @@ def _showConstrainOptions(self):
             return True
 
 
+@implementer(IFactoriesMenu)
 class FactoriesMenu(BrowserMenu):
-    implements(IFactoriesMenu)
 
     def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
@@ -643,8 +633,9 @@ def _contentCanBeAdded(self, addContext, request):
             return _allowedTypes(request, addContext)
         return constrain.getLocallyAllowedTypes()
 
+
+@implementer(IWorkflowSubMenuItem)
 class WorkflowSubMenuItem(BrowserSubMenuItem):
-    implements(IWorkflowSubMenuItem)
 
     MANAGE_SETTINGS_PERMISSION = 'Manage portal'
 
@@ -711,8 +702,8 @@ def _currentStateTitle(self):
                     return w.states[state].title or state
 
 
+@implementer(IWorkflowMenu)
 class WorkflowMenu(BrowserMenu):
-    implements(IWorkflowMenu)
 
     # BBB: These actions (url's) existed in old workflow definitions
     # but were never used. The scripts they reference don't exist in
@@ -815,8 +806,8 @@ def getMenuItems(self, context, request):
         return results
 
 
+@implementer(IPortletManagerSubMenuItem)
 class PortletManagerSubMenuItem(BrowserSubMenuItem):
-    implements(IPortletManagerSubMenuItem)
 
     MANAGE_SETTINGS_PERMISSION = 'Portlets: Manage portlets'
 
@@ -874,8 +865,8 @@ def _manageSettings(self):
         return has_manage_portlets_permission
 
 
+@implementer(IPortletManagerMenu)
 class PortletManagerMenu(BrowserMenu):
-    implements(IPortletManagerMenu)
 
     def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
diff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py
index 49d7339..4d8cbdf 100644
--- a/plone/app/contentmenu/testing.py
+++ b/plone/app/contentmenu/testing.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import applyProfile
 from plone.app.testing import FunctionalTesting
 from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import applyProfile
 from plone.testing import z2
 from zope.configuration import xmlconfig
 import pkg_resources
diff --git a/plone/app/contentmenu/tests/__init__.py b/plone/app/contentmenu/tests/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/contentmenu/tests/__init__.py
+++ b/plone/app/contentmenu/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 59a2844..17194b4 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -1,10 +1,4 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import INonStructuralFolder
-from Products.CMFPlone.interfaces import ISelectableConstrainTypes
-from Products.CMFPlone.tests import dummy
-from Products.CMFPlone.utils import _createObjectByType
 from plone.app.contentmenu.interfaces import IActionsMenu
 from plone.app.contentmenu.interfaces import IDisplayMenu
 from plone.app.contentmenu.interfaces import IFactoriesMenu
@@ -13,11 +7,17 @@
 from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING  # noqa
 from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING  # noqa
 from plone.app.contenttypes.testing import set_browserlayer
-from plone.app.testing import TEST_USER_ID
 from plone.app.testing import login
 from plone.app.testing import logout
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.locking.interfaces import ILockable
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import INonStructuralFolder
+from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+from Products.CMFPlone.tests import dummy
+from Products.CMFPlone.utils import _createObjectByType
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
 from zope.interface import directlyProvides
@@ -336,7 +336,7 @@ def testTypeNameIsURLQuoted(self):
         actions = self.menu.getMenuItems(self.folder, self.request)
         found = False
         for url in [a['action'] for a in actions]:
-            if self.folder.absolute_url() + '/createObject?type_name=News+Item' in url:
+            if self.folder.absolute_url() + '/createObject?type_name=News+Item' in url:  # noqa
                 found = True
         self.assertTrue(found)
 
diff --git a/plone/app/contentmenu/view.py b/plone/app/contentmenu/view.py
index 6a5bed6..eff3754 100644
--- a/plone/app/contentmenu/view.py
+++ b/plone/app/contentmenu/view.py
@@ -1,19 +1,17 @@
+# -*- coding: utf-8 -*-
+from plone.app.contentmenu.interfaces import IContentMenuView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
-from zope.interface import implements
 from zope.contentprovider.provider import ContentProviderBase
-
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-from plone.app.contentmenu.interfaces import IContentMenuView
+from zope.interface import implementer
 
 
+@implementer(IContentMenuView)
 class ContentMenuProvider(ContentProviderBase):
     """Content menu provider for the "view" tab: displays the menu
     """
 
-    implements(IContentMenuView)
-
     index = ViewPageTemplateFile('contentmenu.pt')
 
     def render(self):
diff --git a/setup.py b/setup.py
index e11c320..aef8859 100644
--- a/setup.py
+++ b/setup.py
@@ -1,36 +1,39 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '2.1.6.dev0'
-
-setup(name='plone.app.contentmenu',
-      version=version,
-      description="Plone's content menu implementation",
-      long_description=open("README.rst").read() + "\n" +
-                       open("CHANGES.rst").read(),
-      classifiers=[
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-        ],
-      keywords='plone contentmenu menu',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.app.contentmenu',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
+long_description = open("README.rst").read() + "\n"
+long_description += open("CHANGES.rst").read()
+setup(
+    name='plone.app.contentmenu',
+    version=version,
+    description="Plone's content menu implementation",
+    long_description=long_description,
+    classifiers=[
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+      ],
+    keywords='plone contentmenu menu',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.app.contentmenu',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
         test=[
-          'plone.app.testing',
-          'plone.app.contenttypes',
-          ]
-        ),
-      install_requires=[
+            'plone.app.testing',
+            'plone.app.contenttypes',
+        ]
+    ),
+    install_requires=[
         'setuptools',
         'plone.locking',
         'plone.memoize',
@@ -48,5 +51,5 @@
         'Products.CMFPlone',
         'plone.protect >= 3.0.0a1',
         'Zope2',
-      ],
-      )
+    ],
+)


