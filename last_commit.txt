Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-04-12T08:15:04+02:00
Author: Vincent Fretin (vincentfretin) <vincent.fretin@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/5956262d26799b76da1132188eab4c8f2e3a8726

remove not used code, quickinstaller/prefs_install_products_form view is in CMFPlone/controlpanel (closes https://github.com/plone/Products.CMFPlone/issues/430)

Files changed:
D plone/app/controlpanel/qi.pt
D plone/app/controlpanel/qi.py

diff --git a/plone/app/controlpanel/qi.pt b/plone/app/controlpanel/qi.pt
deleted file mode 100644
index 2e4e96a..0000000
--- a/plone/app/controlpanel/qi.pt
+++ /dev/null
@@ -1,211 +0,0 @@
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
-      xmlns:tal="http://xml.zope.org/namespaces/tal"
-      xmlns:metal="http://xml.zope.org/namespaces/metal"
-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
-      lang="en"
-      metal:use-macro="context/prefs_main_template/macros/master">
-
-<body>
-
-
-<metal:main metal:fill-slot="prefs_configlet_main" i18n:domain="plone">
-
-    <h1 class="documentFirstHeading"
-        i18n:translate="">Add-ons</h1>
-
-    <div class="documentDescription"
-       i18n:translate="">
-      This is the Add-on configuration section, you can activate and deactivate
-      add-ons in the lists below.
-    </div>
-
-    <div id="content-core"
-         tal:define="products  view/get_addons">
-        <!--<a href=""
-           class="link-parent"
-           tal:attributes="href string:${context/portal_url}/plone_control_panel"
-           i18n:translate="label_up_to_plone_setup">
-          Up to Site Setup
-        </a>-->
-
-        <p class="discreet" i18n:translate="">
-          To make new add-ons show up here, add them to your buildout
-          configuration, run buildout, and restart the server process.
-          For detailed instructions see
-          <span i18n:name="third_party_product">
-          <a i18n:translate="" href="http://plone.org/documentation/tutorial/buildout/installing-a-third-party-product">
-            Installing a third party add-on
-          </a>
-          </span>.
-        </p>
-
-        <section tal:define="products   view/get_upgrades;
-                         num_products  python:len(products)"
-             id="upgrade-products" class="portlet">
-          <header class="portletHeader">Upgrades</header>
-          <section tal:condition="not:products" class="portletContent">
-            <div id="up-to-date-message" class="portalMessage info">
-                 <strong>No upgrades in this corner</strong>
-                 <span>You are up to date. High fives.</span>
-             </div>
-          </section>
-          <section class="portletContent" tal:condition="products">
-            <ul class="configlets">
-              <tal:products  tal:repeat="product products">
-              <li tal:define="pid product/id;">
-                <form action="upgrade_products" method="post" class="pull-right">
-                  <input type="hidden"
-                                     name="prefs_reinstallProducts:list"
-                                     tal:attributes="value pid;" />
-                  <span i18n:translate="label_product_upgrade_action">
-                    <span i18n:name="reinstall_button">
-                    <input class="standalone"
-                                     type="submit"
-                                     value="product"
-                                     name="form.submitted"
-                                     tal:attributes="value string:Upgrade ${pid};"/>
-                    </span>
-                  </span>
-                </form>
-                <h3>
-                  <span tal:replace="product/title">
-                    Add-on Name
-                  </span>
-                </h3>
-                <p class="configletDescription discreet">
-                  <tal:span tal:condition="product/description" tal:content="product/description">add-on description</tal:span>
-                  <em class="discreet"> – (<tal:span tal:content="string:${pid}"> plugin.app.name </tal:span>)</em>
-                </p>
-                <ul class="configletDetails">
-                  <li tal:define="upgrade_info product/upgrade_info">
-                      <span i18n:translate="">
-                        This addon has been upgraded.
-                      </span>
-                      <span tal:condition="not:upgrade_info/hasProfile"
-                            i18n:translate="label_product_upgrade_old_version">
-                        Old version was <strong i18n:name="version" tal:content="upgrade_info/installedVersion">version</strong>.
-                      </span>
-                      <span tal:condition="upgrade_info/hasProfile">
-                        <tal:span i18n:translate="label_product_upgrade_old_profile_version">
-                          Old profile version was <strong i18n:name="version" tal:content="upgrade_info/installedVersion">version</strong>.
-                        </tal:span>
-                        <tal:span i18n:translate="label_product_upgrade_new_profile_version">
-                          New profile version is <strong i18n:name="version" tal:content="upgrade_info/newVersion">version</strong>.
-                        </tal:span>
-                      </span>
-
-                      <div tal:condition="not:upgrade_info/available">
-                        <strong i18n:translate="">Warning</strong>
-                        <span i18n:translate="">There is no upgrade procedure defined for this
-                        addon. Please consult the addon documentation
-                        for upgrade information, or contact the addon
-                        author.</span>
-                      </div>
-                  </li>
-                </ul>
-              </li>
-              </tal:products>
-              <li  tal:condition="python:num_products > 1">
-                <form action="upgrade_products" method="post">
-                   <tal:products  tal:repeat="product products">
-                   <input type="hidden" value="product"
-                          name="prefs_reinstallProducts:list"
-                          tal:attributes="value product/id;" />
-                   </tal:products>
-                   <span i18n:translate="label_product_upgrade_all_action">
-                     <div>The question is, do you feel lucky, punk?</div>
-                     <span i18n:name="reinstall_all_button">
-                              <input class="context"
-                                     type="submit"
-                                     value="Upgrade them ALL!"
-                                     name="form.submitted" />
-                     </span>
-                   </span>
-                </form>
-               </li>
-              </ul>
-          </section>
-        </section>
-
-
-        <section tal:define="products   view/get_available;
-                         num_products  python:len(products)"
-             id="install-products" class="portlet">
-          <header class="portletHeader" i18n:translate="">Available add-ons</header>
-          <section class="portletContent">
-            <ul class="configlets">
-              <li tal:repeat="product products">
-              <tal:product define="pid product/id">
-                <form action="install_products" method="post" class="pull-right">
-                   <input type="hidden"
-                           name="install_products:list"
-                           tal:attributes="value string:profile-${product/install_profile/id};" />
-                   <span i18n:translate="label_product_install_action">
-                      <span i18n:name="install_button">
-                         <input class="context"
-                           type="submit"
-                           value="product"
-                           name="form.submitted"
-                           tal:attributes="value string:Install"/>
-                       </span>
-                   </span>
-                </form>
-
-                <h3>
-                  <span tal:replace="product/title">
-                    Add-on Name
-                  </span>
-                </h3>
-                <p class="configletDescription discreet">
-                  <tal:span tal:condition="product/description" tal:content="product/description">add-on description</tal:span>
-                  <em class="discreet"> – (<tal:span tal:content="string:${pid}"> plugin.app.name </tal:span>)</em>
-                </p>
-              </tal:product>
-              </li>
-            </ul>
-          </section>
-        </section>
-
-
-        <section tal:define="products   view/get_installed;
-                         num_products  python:len(products)"
-             id="activated-products" class="portlet">
-          <header class="portletHeader" i18n:translate="">Activated add-ons</header>
-          <section class="portletContent">
-            <ul class="configlets">
-                <li tal:repeat="product products">
-                <tal:product define="pid product/id">
-                  <form action="uninstall_products" method="post" class="pull-right">
-                    <input type="hidden"
-                          name="uninstall_products:list"
-                          tal:attributes="value pid;" />
-                      <span i18n:translate="label_product_uninstall_action">
-                        <span i18n:name="uninstall_button">
-                           <input class="destructive"
-                             type="submit"
-                             value="product"
-                             name="form.submitted"
-                             tal:attributes="value string:Uninstall;"/>
-                         </span>
-                     </span>
-                  </form>
-                    <h3>
-                      <span tal:replace="product/title">
-                        Add-on Name
-                      </span>
-                    </h3>
-                    <p class="configletDescription discreet">
-                      <tal:span tal:condition="product/description" tal:content="product/description">add-on description</tal:span>
-                      <em class="discreet"> – (<tal:span tal:content="string:${pid}"> plugin.app.name </tal:span>)</em>
-                    </p>
-                </tal:product>
-                </li>
-              </ul>
-          </section>
-        </section>
-    </div>
-</metal:main>
-
-</body>
-</html>
-
diff --git a/plone/app/controlpanel/qi.py b/plone/app/controlpanel/qi.py
deleted file mode 100644
index 4dd465e..0000000
--- a/plone/app/controlpanel/qi.py
+++ /dev/null
@@ -1,212 +0,0 @@
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFCore.utils import getToolByName
-import logging
-from Products.Five.browser import BrowserView
-from Products.statusmessages.interfaces import IStatusMessage
-from Products.GenericSetup import EXTENSION
-from plone.memoize import view
-
-
-class ManageProductsView(BrowserView):
-    """
-    Activate and deactivate products in mass, and without weird
-    permissions issues
-    """
-
-    def __init__(self, *args, **kwargs):
-        super(ManageProductsView, self).__init__(*args, **kwargs)
-        self.qi = getToolByName(self.context, 'portal_quickinstaller')
-        self.ps = getToolByName(self.context, 'portal_setup')
-
-    def __call__(self):
-        return self.index()
-
-    @view.memoize
-    def marshall_addons(self):
-        addons = {}
-
-        profiles = self.ps.listProfileInfo()
-        for profile in profiles:
-            if profile['type'] != EXTENSION:
-                continue
-            pid = profile['id']
-            pid_parts = pid.split(':')
-            if len(pid_parts) != 2:
-                logging.error("Profile with id '%s' is invalid." % pid)
-            product_id = profile['product']
-            profile_type = pid_parts[-1]
-            if product_id not in addons:
-                # get some basic information on the product
-                product_file = self.qi.getProductFile(product_id)
-                installed = False
-                upgrade_info = None
-                p_obj = self.qi._getOb(product_id, None)
-                if p_obj:
-                    # TODO; if you install then uninstall, the
-                    # presence lingers in the qi. Before it is
-                    # run the very first time, it doesn't exist
-                    # at all in the qi. How remove the qi from this?
-                    installed = p_obj.isInstalled()
-                    upgrade_info = self.qi.upgradeInfo(product_id)
-                else:
-                    # XXX: holy rabbit hole batman!
-                    if not self.qi.isProductInstallable(product_id):
-                        continue
-
-                addons[product_id] = {
-                    'id': product_id,
-                    'title': product_id,
-                    'description': '',
-                    'product_file': product_file,
-                    'upgrade_profiles': {},
-                    'other_profiles': [],
-                    'install_profile': None,
-                    'uninstall_profile': None,
-                    'is_installed': installed,
-                    'upgrade_info': upgrade_info,
-                    'profile_type': profile_type,
-                }
-            product = addons[product_id]
-            if profile_type == 'default':
-                product['title'] = profile['title']
-                product['description'] = profile['description']
-                product['install_profile'] = profile
-            elif profile_type == 'uninstall':
-                product['uninstall_profile'] = profile
-            else:
-                if 'version' in profile:
-                    product['upgrade_profiles'][profile['version']] = profile
-                else:
-                    product['other_profiles'].append(profile)
-        return addons
-
-    def get_addons(self, apply_filter=None, product_name=None):
-        """
-        100% based on generic setup profiles now. Kinda.
-        For products magic, use the zope quickinstaller I guess.
-
-        @filter:= 'installed': only products that are installed
-                  'upgrades': only products with upgrades
-                  'available': products that are not installed bit
-                               could be
-
-        @product_name:= a specific product id that you want info on. Do
-                   not pass in the profile type, just the name
-
-        XXX: I am pretty sure we don't want base profiles ...
-        """
-        addons = self.marshall_addons()
-        filtered = {}
-        for product_id, addon in addons.items():
-            if product_name and addon['id'] != product_name:
-                continue
-
-            installed = addon['is_installed']
-            if apply_filter in ['installed', 'upgrades'] and not installed:
-                continue
-            elif apply_filter == 'available':
-                if installed:
-                    continue
-                # filter out upgrade profiles
-                if addon['profile_type'] != 'default':
-                    continue
-            elif apply_filter == 'upgrades':
-                # weird p.a.discussion integration behavior
-                upgrade_info = addon['upgrade_info']
-                if type(upgrade_info) == bool:
-                    continue
-
-                if not upgrade_info['available']:
-                    continue
-
-            filtered[product_id] = addon
-
-        return filtered
-
-    def get_upgrades(self):
-        """
-        Return a list of products that have upgrades on tap
-        """
-        return self.get_addons(apply_filter='upgrades').values()
-
-    def get_installed(self):
-        return self.get_addons(apply_filter='installed').values()
-
-    def get_available(self):
-        return self.get_addons(apply_filter='available').values()
-
-    def upgrade_product(self, product):
-        qi = getToolByName(self.context, 'portal_quickinstaller')
-        messages = IStatusMessage(self.request)
-        try:
-            qi.upgradeProduct(product)
-            messages.addStatusMessage(
-                _(u'Upgraded ${product}!', mapping={'product', product}), type="info")
-            return True
-        except Exception, e:
-            logging.error("Could not upgrade %s: %s" % (product, e))
-            messages.addStatusMessage(
-                _(u'Error upgrading ${product}.', mapping={'product': product}), type="error")
-
-        return False
-
-
-class UpgradeProductsView(BrowserView):
-    """
-    Upgrade a product... or twenty
-    """
-    def __call__(self):
-        qi = ManageProductsView(self.context, self.request)
-        products = self.request.get('prefs_reinstallProducts', None)
-        if products:
-            for product in products:
-                qi.upgrade_product(product)
-
-        purl = getToolByName(self.context, 'portal_url')()
-        self.request.response.redirect(purl + '/prefs_install_products_form')
-
-
-class InstallProductsView(BrowserView):
-
-    def __call__(self):
-        """
-        Install products by running the default import steps
-        XXX: is this running all profiles?
-        """
-        setupTool = getToolByName(self.context, 'portal_setup')
-        profiles = self.request.get('install_products')
-        msg_type = 'info'
-        if profiles:
-            messages = IStatusMessage(self.request)
-            for profile in profiles:
-                # TODO: find out where this is and don't run already
-                # activated profiles
-                setupTool.runAllImportStepsFromProfile(profile)
-                msg = _(u'Installed ${product}!', mapping={'product': profile})
-                messages.addStatusMessage(msg, type=msg_type)
-
-        purl = getToolByName(self.context, 'portal_url')()
-        self.request.response.redirect(purl + '/prefs_install_products_form')
-
-
-class UninstallProductsView(BrowserView):
-    def __call__(self):
-        # XXX: Need to call the uninstall profile
-        qi = getToolByName(self.context, 'portal_quickinstaller')
-        products = self.request.get('uninstall_products')
-        msg_type = 'info'
-        if products:
-            messages = IStatusMessage(self.request)
-            # 1 at a time for better error messages
-            for product in products:
-                try:
-                    qi.uninstallProducts(products=[product, ])
-                    msg = _(u'Uninstalled ${product}.', mapping={'product': product})
-                except Exception, e:
-                    logging.error("Could not uninstall %s: %s" % (product, e))
-                    msg_type = 'error'
-                    msg = _(u'Error uninstalling ${product}.', mapping={'product': product})
-                messages.addStatusMessage(msg, type=msg_type)
-
-        purl = getToolByName(self.context, 'portal_url')()
-        self.request.response.redirect(purl + '/prefs_install_products_form')


