Repository: plone.app.content
Branch: refs/heads/master
Date: 2015-03-18T11:57:59+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/468bd4329e35500a3d1524f2aeb085a0a5938c37

rough pep8 cleanup, remove lambdas, ...

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/content/__init__.py
M plone/app/content/browser/__init__.py
M plone/app/content/browser/actions.py
M plone/app/content/browser/adding.py
M plone/app/content/browser/constraintypes.py
M plone/app/content/browser/content_status_history.py
M plone/app/content/browser/file.py
M plone/app/content/browser/folder.py
M plone/app/content/browser/folderfactories.py
M plone/app/content/browser/i18n.py
M plone/app/content/browser/interfaces.py
M plone/app/content/browser/query.py
M plone/app/content/browser/reviewlist.py
M plone/app/content/browser/selection.py
M plone/app/content/browser/tableview.py
M plone/app/content/browser/vocabulary.py
M plone/app/content/catalog.py
M plone/app/content/container.py
M plone/app/content/interfaces.py
M plone/app/content/item.py
M plone/app/content/namechooser.py
M plone/app/content/tests/test_adding.py
M plone/app/content/tests/test_basecontent.py
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_namechooser.py
M plone/app/content/tests/test_namechooser_unit.py
M plone/app/content/tests/test_reviewlist.py
M plone/app/content/tests/test_table.py
M plone/app/content/utils.py
M setup.py

diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/content/__init__.py b/plone/app/content/__init__.py
index f48ad10..40a96af 100644
--- a/plone/app/content/__init__.py
+++ b/plone/app/content/__init__.py
@@ -1,6 +1 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
diff --git a/plone/app/content/browser/__init__.py b/plone/app/content/browser/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/content/browser/__init__.py
+++ b/plone/app/content/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py
index c5dc0bc..3a3b63b 100644
--- a/plone/app/content/browser/actions.py
+++ b/plone/app/content/browser/actions.py
@@ -9,11 +9,11 @@
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
-from zExceptions import Unauthorized
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
 from z3c.form.widget import ComputedWidgetAttribute
+from zExceptions import Unauthorized
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.component import queryMultiAdapter
diff --git a/plone/app/content/browser/adding.py b/plone/app/content/browser/adding.py
index 725c1c5..26bed83 100644
--- a/plone/app/content/browser/adding.py
+++ b/plone/app/content/browser/adding.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import Implicit
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.adding import ContentAdding
diff --git a/plone/app/content/browser/constraintypes.py b/plone/app/content/browser/constraintypes.py
index 78db1ab..cc81e23 100644
--- a/plone/app/content/browser/constraintypes.py
+++ b/plone/app/content/browser/constraintypes.py
@@ -1,32 +1,52 @@
-from plone.autoform.form import AutoExtensibleForm
+# -*- coding: utf-8 -*-
 from Products.CMFPlone import PloneMessageFactory as PC_
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.autoform.form import AutoExtensibleForm
 from z3c.form import button
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
-from zope.interface import implementer
 from zope.interface import Interface
+from zope.interface import implementer
 from zope.interface import invariant
 from zope.interface.exceptions import Invalid
-from zope.schema import List, Choice
+from zope.schema import Choice
+from zope.schema import List
 from zope.schema.interfaces import IVocabularyFactory
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
 # XXX
-ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
-DISABLED = 0  # use default behavior of PortalFolder which uses the
-              # FTI information
-ENABLED = 1   # allow types from locallyAllowedTypes only
-
-ST = lambda key, txt, default: SimpleTerm(value=key,
-                                          title=PC_(txt, default=default))
-possible_constrain_types = SimpleVocabulary(
-    [ST(ACQUIRE, u'constraintypes_mode_acquire',
-                 u'Use parent folder settings'),
-     ST(DISABLED, 'label_constraintypes_allow_standard', u'Use portal default'),
-     ST(ENABLED, u'label_constraintypes_specify_manually', u'Select manually')
-     ])
+# acquire locallyAllowedTypes from parent (default)
+ACQUIRE = -1
+
+# use default behavior of PortalFolder which uses the FTI information
+DISABLED = 0
+
+# allow types from locallyAllowedTypes only
+ENABLED = 1
+
+
+def ST(key, txt, default):
+    SimpleTerm(value=key, title=PC_(txt, default=default))
+
+possible_constrain_types = SimpleVocabulary([
+    ST(
+        ACQUIRE,
+        u'constraintypes_mode_acquire',
+        u'Use parent folder settings'
+    ),
+    ST(
+        DISABLED,
+        'label_constraintypes_allow_standard',
+        u'Use portal default'
+    ),
+    ST(
+        ENABLED,
+        u'label_constraintypes_specify_manually',
+        u'Select manually'
+    )
+])
 
 
 @implementer(IVocabularyFactory)
diff --git a/plone/app/content/browser/content_status_history.py b/plone/app/content/browser/content_status_history.py
index 59d78d3..34a265a 100644
--- a/plone/app/content/browser/content_status_history.py
+++ b/plone/app/content/browser/content_status_history.py
@@ -1,11 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from zope.publisher.browser import BrowserView
+from z3c.form import field
+from z3c.form import form
 from zope.interface import Interface
+from zope.publisher.browser import BrowserView
 from zope.schema import Datetime
 from zope.schema.fieldproperty import FieldProperty
-from z3c.form import form, field
 
 
 class IContentStatusHistoryDates(Interface):
@@ -15,18 +17,22 @@ class IContentStatusHistoryDates(Interface):
     effective_date = Datetime(
         title=_(u"label_effective_date",
                 default=u"Publishing Date"),
-        description=_(u"help_effective_date",
-                      default=u"The date when the item will be published. If no "
-                              u"date is selected the item will be published immediately."),
+        description=_(
+            u"help_effective_date",
+            default=u"The date when the item will be published. If no "
+                    u"date is selected the item will be published immediately."
+        ),
         required=False)
 
     expiration_date = Datetime(
         title=_(u"label_expiration_date",
                 default=u"Expiration Date"),
-        description=_(u"help_expiration_date",
-                      default=u"The date when the item expires. This will automatically "
-                              u"make the item invisible for others at the given date."
-                              u"If no date is chosen, it will never expire."),
+        description=_(
+            u"help_expiration_date",
+            default=u"The date when the item expires. This will automatically "
+                    u"make the item invisible for others at the given date."
+                    u"If no date is chosen, it will never expire."
+            ),
         required=False)
 
 
@@ -35,8 +41,12 @@ class ContentStatusHistoryDatesForm(form.Form):
     ignoreContext = True
     label = "Content status history dates"
 
-    effective_date = FieldProperty(IContentStatusHistoryDates['effective_date'])
-    expiration_date = FieldProperty(IContentStatusHistoryDates['expiration_date'])
+    effective_date = FieldProperty(
+        IContentStatusHistoryDates['effective_date']
+    )
+    expiration_date = FieldProperty(
+        IContentStatusHistoryDates['expiration_date']
+    )
 
 
 class ContentStatusHistoryView(BrowserView):
@@ -56,11 +66,17 @@ def __call__(self, workflow_action=None, paths=[], comment="",
                  include_children=False, *args):
 
         data = self.dates_form.extractData()
-        if self.request.get('form.widgets.effective_date-calendar', None) and data:
-            effective_date = data[0]['effective_date'].strftime("%Y-%m-%d %H:%M")
-
-        if self.request.get('form.widgets.expiration_date-calendar', None) and data:
-            expiration_date = data[0]['expiration_date'].strftime("%Y-%m-%d %H:%M")
+        if self.request.get('form.widgets.effective_date-calendar', None) \
+           and data:
+            effective_date = data[0]['effective_date'].strftime(
+                "%Y-%m-%d %H:%M"
+            )
+
+        if self.request.get('form.widgets.expiration_date-calendar', None) \
+           and data:
+            expiration_date = data[0]['expiration_date'].strftime(
+                "%Y-%m-%d %H:%M"
+            )
 
         if self.request.get('form.button.Cancel', None):
             return self.request.RESPONSE.redirect(
diff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py
index 7598fd5..0d579c2 100644
--- a/plone/app/content/browser/file.py
+++ b/plone/app/content/browser/file.py
@@ -1,13 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
-
-import json
-import mimetypes
-from plone.dexterity.interfaces import IDexterityFTI
 from plone.app.dexterity.interfaces import IDXFileFactory
+from plone.dexterity.interfaces import IDexterityFTI
 from plone.uuid.interfaces import IUUID
-import os
+import json
 import logging
+import mimetypes
+import os
 
 logger = logging.getLogger('plone')
 
diff --git a/plone/app/content/browser/folder.py b/plone/app/content/browser/folder.py
index b621cba..f462a8f 100644
--- a/plone/app/content/browser/folder.py
+++ b/plone/app/content/browser/folder.py
@@ -1,4 +1,4 @@
-from .interfaces import IFolderContentsView
+# -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from AccessControl import getSecurityManager
 from Acquisition import aq_inner
@@ -12,7 +12,9 @@
 from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from Products.Five import BrowserView
 from ZODB.POSException import ConflictError
-from plone.app.content.utils import json_dumps, json_loads
+from plone.app.content.interfaces import IFolderContentsView
+from plone.app.content.utils import json_dumps
+from plone.app.content.utils import json_loads
 from plone.dexterity.interfaces import IDexterityContent
 from plone.folder.interfaces import IExplicitOrdering
 from plone.protect.postonly import check as checkpost
@@ -23,7 +25,7 @@
 from zope.component.hooks import getSite
 from zope.container.interfaces import INameChooser
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.lifecycleevent import ObjectModifiedEvent
 
 import transaction
@@ -34,8 +36,8 @@
     TUS_ENABLED = False
 
 
+@implementer(IFolderContentsView)
 class FolderContentsView(BrowserView):
-    implements(IFolderContentsView)
 
     def __call__(self):
         site = getSite()
diff --git a/plone/app/content/browser/folderfactories.py b/plone/app/content/browser/folderfactories.py
index 97ee853..088583b 100644
--- a/plone/app/content/browser/folderfactories.py
+++ b/plone/app/content/browser/folderfactories.py
@@ -1,18 +1,18 @@
-from urllib import quote_plus
-
-from plone.i18n.normalizer.interfaces import IIDNormalizer
-from plone.memoize.instance import memoize
-from plone.memoize.request import memoize_diy_request
-from zope.component import getMultiAdapter, queryUtility
-from zope.i18n import translate
-from zope.publisher.browser import BrowserView
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from Acquisition import aq_parent
 from Products.CMFCore.Expression import createExprContext
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 from plone.app.content.browser.interfaces import IFolderContentsView
+from plone.i18n.normalizer.interfaces import IIDNormalizer
+from plone.memoize.instance import memoize
+from plone.memoize.request import memoize_diy_request
+from urllib import quote_plus
+from zope.component import getMultiAdapter
+from zope.component import queryUtility
+from zope.i18n import translate
+from zope.publisher.browser import BrowserView
 
 
 @memoize_diy_request(arg=0)
diff --git a/plone/app/content/browser/i18n.py b/plone/app/content/browser/i18n.py
index 612b510..8909b4e 100644
--- a/plone/app/content/browser/i18n.py
+++ b/plone/app/content/browser/i18n.py
@@ -1,10 +1,9 @@
-import json
-
+# -*- coding: utf-8 -*-
+from Products.Five.browser import BrowserView
 from plone.memoize import ram
 from zope.component import queryUtility
 from zope.i18n.interfaces import ITranslationDomain
-
-from Products.Five.browser import BrowserView
+import json
 
 
 def _cache_key(method, self, domain, language):
@@ -35,4 +34,4 @@ def __call__(self, domain, language=None):
         response = self.request.response
         response.setHeader('content-type', 'application/json')
         response.setBody(json.dumps(catalog))
-        return response
\ No newline at end of file
+        return response
diff --git a/plone/app/content/browser/interfaces.py b/plone/app/content/browser/interfaces.py
index df1a648..3a558a6 100644
--- a/plone/app/content/browser/interfaces.py
+++ b/plone/app/content/browser/interfaces.py
@@ -1,4 +1,4 @@
-# Zope imports
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 from zope.viewlet.interfaces import IViewletManager
 
diff --git a/plone/app/content/browser/query.py b/plone/app/content/browser/query.py
index 91dc9d1..9834029 100644
--- a/plone/app/content/browser/query.py
+++ b/plone/app/content/browser/query.py
@@ -1,8 +1,9 @@
-import json
-from plone.registry.interfaces import IRegistry
+# -*- coding: utf-8 -*-
+from Products.Five import BrowserView
 from plone.app.querystring.interfaces import IQuerystringRegistryReader
+from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
-from Products.Five import BrowserView
+import json
 
 
 class QueryStringIndexOptions(BrowserView):
diff --git a/plone/app/content/browser/reviewlist.py b/plone/app/content/browser/reviewlist.py
index eb17ec7..97104c3 100644
--- a/plone/app/content/browser/reviewlist.py
+++ b/plone/app/content/browser/reviewlist.py
@@ -1,13 +1,13 @@
-import urllib
-
-from zope.component import getMultiAdapter
-from zope.i18n import translate
-from zope.publisher.browser import BrowserView
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_unicode
-from plone.app.content.browser.tableview import Table, TableBrowserView
+from plone.app.content.browser.tableview import Table
+from plone.app.content.browser.tableview import TableBrowserView
+from zope.component import getMultiAdapter
+from zope.i18n import translate
+from zope.publisher.browser import BrowserView
+import urllib
 
 
 class FullReviewListView(BrowserView):
diff --git a/plone/app/content/browser/selection.py b/plone/app/content/browser/selection.py
index bc083ee..99e8d47 100644
--- a/plone/app/content/browser/selection.py
+++ b/plone/app/content/browser/selection.py
@@ -1,8 +1,9 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.statusmessages.interfaces import IStatusMessage
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five.browser import BrowserView
+from Products.statusmessages.interfaces import IStatusMessage
 from zope.component import getMultiAdapter
 
 
diff --git a/plone/app/content/browser/tableview.py b/plone/app/content/browser/tableview.py
index 1b90f16..36b76ab 100644
--- a/plone/app/content/browser/tableview.py
+++ b/plone/app/content/browser/tableview.py
@@ -1,22 +1,16 @@
-import urllib
-
-from plone.memoize import instance
-
+# -*- coding: utf-8 -*-
+from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
+from ZTUtils import make_query
 from plone.batching import Batch
-
+from plone.batching.browser import BatchView
+from plone.memoize import instance
 from zope.i18nmessageid import MessageFactory
-
-from Products.CMFPlone.utils import safe_unicode
+from zope.publisher.browser import BrowserView
+import urllib
 
 _ = MessageFactory('plone')
 
-from ZTUtils import make_query
-
-from plone.batching.browser import BatchView
-from zope.publisher.browser import BrowserView
-
 
 class TableBatchView(BatchView):
 
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index 6bc2bde..3caeba5 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-
 from AccessControl import getSecurityManager
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five import BrowserView
 from logging import getLogger
-from plone.app.content.utils import json_loads, json_dumps
+from plone.app.content.utils import json_dumps
+from plone.app.content.utils import json_loads
 from plone.app.querystring import queryparser
 from plone.app.widgets.interfaces import IFieldPermissionChecker
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
diff --git a/plone/app/content/catalog.py b/plone/app/content/catalog.py
index 5ae53f1..632448c 100644
--- a/plone/app/content/catalog.py
+++ b/plone/app/content/catalog.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 
 
 def reindexOnModify(content, event):
diff --git a/plone/app/content/container.py b/plone/app/content/container.py
index 0783f2b..1f083b0 100644
--- a/plone/app/content/container.py
+++ b/plone/app/content/container.py
@@ -1,23 +1,21 @@
-from zope.container.interfaces import IContainer
-from zope.container.contained import Contained
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
+from Products.CMFCore.CMFCatalogAware import CMFCatalogAware
 from Products.CMFCore.PortalContent import PortalContent
 from Products.CMFCore.PortalFolder import PortalFolderBase
-from Products.CMFCore.CMFCatalogAware import CMFCatalogAware
 from Products.CMFDefault.DublinCore import DefaultDublinCoreImpl
-
 from plone.app.content.interfaces import IReindexOnModify
+from zope.container.contained import Contained
+from zope.container.interfaces import IContainer
+from zope.interface import implementer
 
 
+@implementer(IContainer)
 class OFSContainer(object):
     """A folder that's also a container.
 
     Borrowed in part from megrok.five.
     """
 
-    implements(IContainer)
-
     isPrincipiaFolderish = 1
 
     def __init__(self, id=None):
@@ -69,14 +67,14 @@ def __len__(self):
 #
 # ... I WANT AN ADAPTER!
 
+
+@implementer(IReindexOnModify)
 class Container(OFSContainer, CMFCatalogAware, PortalFolderBase, PortalContent,
                 DefaultDublinCoreImpl, Contained):
     """A base class mixing in CMFish, contentish, containerish, containedish,
     dublincoreish behaviour.
     """
 
-    implements(IReindexOnModify)
-
     def __init__(self, id=None, **kwargs):
         OFSContainer.__init__(self, id, **kwargs)
         PortalFolderBase.__init__(self, id, **kwargs)
diff --git a/plone/app/content/interfaces.py b/plone/app/content/interfaces.py
index b08d66f..b51e45a 100644
--- a/plone/app/content/interfaces.py
+++ b/plone/app/content/interfaces.py
@@ -1,36 +1,20 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 
 
 class INameFromTitle(Interface):
     """An object that supports gettings it name from its title.
     """
 
-    title = schema.TextLine(title=u"Title",
-                            description=u"A title, which will be converted to "
-                                        u"a name",
-                            required=True)
+    title = schema.TextLine(
+        title=u"Title",
+        description=u"A title, which will be converted to a name",
+        required=True
+    )
 
 
 class IReindexOnModify(Interface):
     """Marker interface which makes sure an object gets reindexed when
     it's modified.
     """
-
-# XXX: This should be deprecated and removed in Plone 4.
-
-class IIndexableObjectWrapper(Interface):
-    """An adapter of a (object, portal) where object is to be indexed in
-    portal_catalog.
-
-    This should implement __getattr__(), which in turn should react
-    when the catalog tries to get attributes to index.
-
-    The update() method must be called before the catalog is given the
-    wrapper.
-    """
-
-    def update(vars, **kwargs):
-        """Update the wrapper with variables from e.g. the workflow
-        tool.
-        """
diff --git a/plone/app/content/item.py b/plone/app/content/item.py
index 7a7478b..46b95f8 100644
--- a/plone/app/content/item.py
+++ b/plone/app/content/item.py
@@ -1,18 +1,16 @@
-from zope.container.contained import Contained
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from Products.CMFCore.PortalContent import PortalContent
 from Products.CMFDefault.DublinCore import DefaultDublinCoreImpl
-
 from plone.app.content.interfaces import IReindexOnModify
+from zope.container.contained import Contained
+from zope.interface import implementer
 
 
+@implementer(IReindexOnModify)
 class Item(PortalContent, DefaultDublinCoreImpl, Contained):
     """A non-containerish, CMFish item
     """
 
-    implements(IReindexOnModify)
-
     def __init__(self, id=None, **kwargs):
         DefaultDublinCoreImpl.__init__(self, **kwargs)
         if id is not None:
diff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py
index b5fd297..f768223 100644
--- a/plone/app/content/namechooser.py
+++ b/plone/app/content/namechooser.py
@@ -1,19 +1,20 @@
+# -*- coding: utf-8 -*-
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from plone.app.content.interfaces import INameFromTitle
 from plone.i18n.normalizer import FILENAME_REGEX
-from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer
 from plone.i18n.normalizer.interfaces import IURLNormalizer
+from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer
+from zExceptions import BadRequest
 from zope.component import getUtility
 from zope.container.interfaces import INameChooser
-from zope.interface import implements
-
-from Acquisition import aq_inner, aq_base
-from zExceptions import BadRequest
-
-from plone.app.content.interfaces import INameFromTitle
+from zope.interface import implementer
 import time
 
 ATTEMPTS = 100
 
 
+@implementer(INameChooser)
 class NormalizingNameChooser(object):
     """A name chooser for a Zope object manager.
 
@@ -21,8 +22,6 @@ class NormalizingNameChooser(object):
     title to generate a name.
     """
 
-    implements(INameChooser)
-
     def __init__(self, context):
         self.context = context
 
@@ -96,12 +95,12 @@ def _getCheckId(self, obj):
         if _check_id is not None:
             def do_Plone_check(id, required):
                 return _check_id(id, required=required, contained_by=parent)
-            check_id = lambda id, required: do_Plone_check(id, required)
+            check_id = do_Plone_check
         else:
             def do_OFS_check(parent, id):
                 try:
                     parent._checkId(id)
                 except BadRequest:
                     return True
-            check_id = lambda id, required: do_OFS_check(parent, id)
+            check_id = do_OFS_check
         return check_id
diff --git a/plone/app/content/tests/test_adding.py b/plone/app/content/tests/test_adding.py
index 97131f7..3df20b0 100644
--- a/plone/app/content/tests/test_adding.py
+++ b/plone/app/content/tests/test_adding.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_get
 from plone.app.testing.bbb import PloneTestCase
 
diff --git a/plone/app/content/tests/test_basecontent.py b/plone/app/content/tests/test_basecontent.py
index 7a8f678..c8ac5ab 100644
--- a/plone/app/content/tests/test_basecontent.py
+++ b/plone/app/content/tests/test_basecontent.py
@@ -1,16 +1,15 @@
-import unittest
-import doctest
-
+# -*- coding: utf-8 -*-
 from Testing import ZopeTestCase as ztc
-
-from base import ContentFunctionalTestCase
+from plone.app.content.tests.base import ContentFunctionalTestCase
+import doctest
+import unittest
 
 
 def test_suite():
     return unittest.TestSuite((
         ztc.ZopeDocFileSuite(
-            'basecontent.txt', package='plone.app.content',
+            'basecontent.txt',
+            package='plone.app.content',
             test_class=ContentFunctionalTestCase,
-            optionflags=(doctest.ELLIPSIS |
-                         doctest.NORMALIZE_WHITESPACE)),
+            optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)),
     ))
diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py
index 911af47..4cab4bd 100644
--- a/plone/app/content/tests/test_folder.py
+++ b/plone/app/content/tests/test_folder.py
@@ -1,23 +1,20 @@
 # -*- coding: utf-8 -*-
-from plone.app.content.testing import (
-    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,
-    PLONE_APP_CONTENT_AT_INTEGRATION_TESTING
-)
+from DateTime import DateTime
+from Products.CMFCore.utils import getToolByName
+from plone.app.content.testing import PLONE_APP_CONTENT_AT_INTEGRATION_TESTING
+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
-
-from zope.publisher.browser import TestRequest
-from plone.uuid.interfaces import IUUID
-import unittest
-from plone.protect.authenticator import createToken
-import json
-from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from plone.dexterity.fti import DexterityFTI
+from plone.protect.authenticator import createToken
+from plone.uuid.interfaces import IUUID
 from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.interface import alsoProvides
+from zope.publisher.browser import TestRequest
+import json
+import unittest
 
 
 class BaseTest(unittest.TestCase):
diff --git a/plone/app/content/tests/test_namechooser.py b/plone/app/content/tests/test_namechooser.py
index 4c40f62..70282a9 100644
--- a/plone/app/content/tests/test_namechooser.py
+++ b/plone/app/content/tests/test_namechooser.py
@@ -1,6 +1,8 @@
-from zope.component.testing import setUp, tearDown
-import unittest
+# -*- coding: utf-8 -*-
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 import doctest
+import unittest
 
 
 def test_suite():
diff --git a/plone/app/content/tests/test_namechooser_unit.py b/plone/app/content/tests/test_namechooser_unit.py
index a874178..b65a256 100644
--- a/plone/app/content/tests/test_namechooser_unit.py
+++ b/plone/app/content/tests/test_namechooser_unit.py
@@ -1,12 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
+from plone.app.content.namechooser import ATTEMPTS
 from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING
 from plone.app.testing import TEST_USER_ID, TEST_USER_NAME
-from plone.app.testing import setRoles, login
-import transaction
-from plone.app.content.namechooser import ATTEMPTS
+from plone.app.testing import login
+from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
 from zope.container.interfaces import INameChooser
-
+import transaction
 import unittest2 as unittest
 
 
diff --git a/plone/app/content/tests/test_reviewlist.py b/plone/app/content/tests/test_reviewlist.py
index 852fbc5..ec1666c 100644
--- a/plone/app/content/tests/test_reviewlist.py
+++ b/plone/app/content/tests/test_reviewlist.py
@@ -1,8 +1,8 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-import transaction
-
 from plone.app.testing.bbb import PloneTestCase
 from plone.testing.z2 import Browser
+import transaction
 
 
 class ReviewListTestCase(PloneTestCase):
diff --git a/plone/app/content/tests/test_table.py b/plone/app/content/tests/test_table.py
index 804ce1f..3142590 100644
--- a/plone/app/content/tests/test_table.py
+++ b/plone/app/content/tests/test_table.py
@@ -1,6 +1,8 @@
-from zope.component.testing import setUp, tearDown
-import unittest
+# -*- coding: utf-8 -*-
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 import doctest
+import unittest
 
 
 def test_suite():
diff --git a/plone/app/content/utils.py b/plone/app/content/utils.py
index adbbbbf..e25b6ca 100644
--- a/plone/app/content/utils.py
+++ b/plone/app/content/utils.py
@@ -16,4 +16,4 @@ def json_dumps(data):
 
 
 # can eventually provide custom handling here if we want
-json_loads = json.loads
\ No newline at end of file
+json_loads = json.loads
diff --git a/setup.py b/setup.py
index 2ba5379..6edf0d1 100644
--- a/setup.py
+++ b/setup.py
@@ -1,57 +1,60 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '3.0.3.dev0'
 
-setup(name='plone.app.content',
-      version=version,
-      description="Content Views for Plone",
-      long_description='\n\n'.join([
-          open("README.rst").read(),
-          open("CHANGES.rst").read(),
-      ]),
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-      ],
-      keywords='plone content views viewlet',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.app.content',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
-          test=[
-              'plone.app.testing',
-              'plone.app.contenttypes',
-          ]
-      ),
-      install_requires=[
-          'setuptools',
-          'plone.memoize',
-          'plone.batching',
-          'plone.i18n',
-          'zope.i18n',
-          'zope.i18nmessageid',
-          'zope.interface',
-          'zope.component',
-          'zope.container',
-          'zope.event',
-          'zope.lifecycleevent',
-          'zope.publisher',
-          'zope.schema',
-          'zope.viewlet',
-          'Acquisition',
-          'Products.CMFPlone',
-          'Products.CMFCore>=2.2.0dev',
-          'Products.CMFDefault',
-          'Products.CMFDynamicViewFTI',  # required for cmf.ModifyViewTemplate
-          'Zope2',
-          'plone.app.widgets>=2.0.0.dev0'
-      ],
-      )
+setup(
+    name='plone.app.content',
+    version=version,
+    description="Content Views for Plone",
+    long_description='\n\n'.join([
+        open("README.rst").read(),
+        open("CHANGES.rst").read(),
+    ]),
+    classifiers=[
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+    ],
+    keywords='plone content views viewlet',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.app.content',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
+        test=[
+            'plone.app.testing',
+            'plone.app.contenttypes',
+        ]
+    ),
+    install_requires=[
+        'Acquisition',
+        'Products.CMFCore>=2.2.0dev',
+        'Products.CMFDefault',
+        'Products.CMFDynamicViewFTI',  # required for cmf.ModifyViewTemplate
+        'Products.CMFPlone',
+        'Zope2',
+        'plone.app.widgets>=2.0.0.dev0'
+        'plone.batching',
+        'plone.i18n',
+        'plone.memoize',
+        'setuptools',
+        'zope.component',
+        'zope.container',
+        'zope.event',
+        'zope.i18n',
+        'zope.i18nmessageid',
+        'zope.interface',
+        'zope.lifecycleevent',
+        'zope.publisher',
+        'zope.schema',
+        'zope.viewlet',
+    ],
+)


Repository: plone.app.content
Branch: refs/heads/master
Date: 2015-03-18T11:57:59+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/19b8eecb40a4e3f96cd691ef6bc3f3f507ebfa82

sanitize namechooser functions

Files changed:
M plone/app/content/namechooser.py

diff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py
index f768223..51ba0f5 100644
--- a/plone/app/content/namechooser.py
+++ b/plone/app/content/namechooser.py
@@ -92,15 +92,18 @@ def _getCheckId(self, obj):
         """
         parent = aq_inner(self.context)
         _check_id = getattr(obj, 'check_id', None)
-        if _check_id is not None:
-            def do_Plone_check(id, required):
-                return _check_id(id, required=required, contained_by=parent)
-            check_id = do_Plone_check
-        else:
-            def do_OFS_check(parent, id):
-                try:
-                    parent._checkId(id)
-                except BadRequest:
-                    return True
-            check_id = do_OFS_check
-        return check_id
+
+        def do_Plone_check(newid, required):
+            if _check_id is not None:
+                return _check_id(
+                    newid,
+                    required=required,
+                    contained_by=parent
+                )
+            # fallback to OFS
+            try:
+                parent._checkId(newid)
+            except BadRequest:
+                return True
+
+        return do_Plone_check


Repository: plone.app.content
Branch: refs/heads/master
Date: 2015-03-18T12:00:10+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/88c674dba2cc5102fa090c555cca59ebfcc312ea

document changes

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 787db48..1a5c263 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,8 +4,12 @@ Changelog
 3.0.3 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- pep8, flake8, utf8-headers et al cleanup.
+  [jensens]
 
+- refactored ``p.a.c.namechooser.NormalizingNameChooser._getCheckId`` to not
+  use lambdas.
+  [jensens]
 
 3.0.2 (2015-03-13)
 ------------------


Repository: plone.app.content
Branch: refs/heads/master
Date: 2015-03-18T12:52:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/1c8407c2d34ba8d23b7dbde54f57be52503c25ad

more utf8 headers

Files changed:
M plone/app/content/utils.py

diff --git a/plone/app/content/utils.py b/plone/app/content/utils.py
index e25b6ca..29ae09b 100644
--- a/plone/app/content/utils.py
+++ b/plone/app/content/utils.py
@@ -1,6 +1,7 @@
-import json
-import datetime
+# -*- coding: utf-8 -*-
 import Missing
+import datetime
+import json
 
 
 def custom_json_handler(obj):


Repository: plone.app.content
Branch: refs/heads/master
Date: 2015-03-18T13:27:35+01:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.content/commit/d349d5e4f7182d75727431017226e76b475742d1

Merge pull request #26 from plone/jensens-cleanup

rough pep8 cleanup, remove lambdas, ...

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/content/__init__.py
M plone/app/content/browser/__init__.py
M plone/app/content/browser/actions.py
M plone/app/content/browser/adding.py
M plone/app/content/browser/constraintypes.py
M plone/app/content/browser/content_status_history.py
M plone/app/content/browser/file.py
M plone/app/content/browser/folder.py
M plone/app/content/browser/folderfactories.py
M plone/app/content/browser/i18n.py
M plone/app/content/browser/interfaces.py
M plone/app/content/browser/query.py
M plone/app/content/browser/reviewlist.py
M plone/app/content/browser/selection.py
M plone/app/content/browser/tableview.py
M plone/app/content/browser/vocabulary.py
M plone/app/content/catalog.py
M plone/app/content/container.py
M plone/app/content/interfaces.py
M plone/app/content/item.py
M plone/app/content/namechooser.py
M plone/app/content/tests/test_adding.py
M plone/app/content/tests/test_basecontent.py
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_namechooser.py
M plone/app/content/tests/test_namechooser_unit.py
M plone/app/content/tests/test_reviewlist.py
M plone/app/content/tests/test_table.py
M plone/app/content/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 787db48..1a5c263 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,8 +4,12 @@ Changelog
 3.0.3 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- pep8, flake8, utf8-headers et al cleanup.
+  [jensens]
 
+- refactored ``p.a.c.namechooser.NormalizingNameChooser._getCheckId`` to not
+  use lambdas.
+  [jensens]
 
 3.0.2 (2015-03-13)
 ------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/content/__init__.py b/plone/app/content/__init__.py
index f48ad10..40a96af 100644
--- a/plone/app/content/__init__.py
+++ b/plone/app/content/__init__.py
@@ -1,6 +1 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
diff --git a/plone/app/content/browser/__init__.py b/plone/app/content/browser/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/content/browser/__init__.py
+++ b/plone/app/content/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py
index c5dc0bc..3a3b63b 100644
--- a/plone/app/content/browser/actions.py
+++ b/plone/app/content/browser/actions.py
@@ -9,11 +9,11 @@
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
-from zExceptions import Unauthorized
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
 from z3c.form.widget import ComputedWidgetAttribute
+from zExceptions import Unauthorized
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.component import queryMultiAdapter
diff --git a/plone/app/content/browser/adding.py b/plone/app/content/browser/adding.py
index 725c1c5..26bed83 100644
--- a/plone/app/content/browser/adding.py
+++ b/plone/app/content/browser/adding.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import Implicit
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.adding import ContentAdding
diff --git a/plone/app/content/browser/constraintypes.py b/plone/app/content/browser/constraintypes.py
index 78db1ab..cc81e23 100644
--- a/plone/app/content/browser/constraintypes.py
+++ b/plone/app/content/browser/constraintypes.py
@@ -1,32 +1,52 @@
-from plone.autoform.form import AutoExtensibleForm
+# -*- coding: utf-8 -*-
 from Products.CMFPlone import PloneMessageFactory as PC_
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.autoform.form import AutoExtensibleForm
 from z3c.form import button
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
-from zope.interface import implementer
 from zope.interface import Interface
+from zope.interface import implementer
 from zope.interface import invariant
 from zope.interface.exceptions import Invalid
-from zope.schema import List, Choice
+from zope.schema import Choice
+from zope.schema import List
 from zope.schema.interfaces import IVocabularyFactory
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
 # XXX
-ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
-DISABLED = 0  # use default behavior of PortalFolder which uses the
-              # FTI information
-ENABLED = 1   # allow types from locallyAllowedTypes only
-
-ST = lambda key, txt, default: SimpleTerm(value=key,
-                                          title=PC_(txt, default=default))
-possible_constrain_types = SimpleVocabulary(
-    [ST(ACQUIRE, u'constraintypes_mode_acquire',
-                 u'Use parent folder settings'),
-     ST(DISABLED, 'label_constraintypes_allow_standard', u'Use portal default'),
-     ST(ENABLED, u'label_constraintypes_specify_manually', u'Select manually')
-     ])
+# acquire locallyAllowedTypes from parent (default)
+ACQUIRE = -1
+
+# use default behavior of PortalFolder which uses the FTI information
+DISABLED = 0
+
+# allow types from locallyAllowedTypes only
+ENABLED = 1
+
+
+def ST(key, txt, default):
+    SimpleTerm(value=key, title=PC_(txt, default=default))
+
+possible_constrain_types = SimpleVocabulary([
+    ST(
+        ACQUIRE,
+        u'constraintypes_mode_acquire',
+        u'Use parent folder settings'
+    ),
+    ST(
+        DISABLED,
+        'label_constraintypes_allow_standard',
+        u'Use portal default'
+    ),
+    ST(
+        ENABLED,
+        u'label_constraintypes_specify_manually',
+        u'Select manually'
+    )
+])
 
 
 @implementer(IVocabularyFactory)
diff --git a/plone/app/content/browser/content_status_history.py b/plone/app/content/browser/content_status_history.py
index 59d78d3..34a265a 100644
--- a/plone/app/content/browser/content_status_history.py
+++ b/plone/app/content/browser/content_status_history.py
@@ -1,11 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from zope.publisher.browser import BrowserView
+from z3c.form import field
+from z3c.form import form
 from zope.interface import Interface
+from zope.publisher.browser import BrowserView
 from zope.schema import Datetime
 from zope.schema.fieldproperty import FieldProperty
-from z3c.form import form, field
 
 
 class IContentStatusHistoryDates(Interface):
@@ -15,18 +17,22 @@ class IContentStatusHistoryDates(Interface):
     effective_date = Datetime(
         title=_(u"label_effective_date",
                 default=u"Publishing Date"),
-        description=_(u"help_effective_date",
-                      default=u"The date when the item will be published. If no "
-                              u"date is selected the item will be published immediately."),
+        description=_(
+            u"help_effective_date",
+            default=u"The date when the item will be published. If no "
+                    u"date is selected the item will be published immediately."
+        ),
         required=False)
 
     expiration_date = Datetime(
         title=_(u"label_expiration_date",
                 default=u"Expiration Date"),
-        description=_(u"help_expiration_date",
-                      default=u"The date when the item expires. This will automatically "
-                              u"make the item invisible for others at the given date."
-                              u"If no date is chosen, it will never expire."),
+        description=_(
+            u"help_expiration_date",
+            default=u"The date when the item expires. This will automatically "
+                    u"make the item invisible for others at the given date."
+                    u"If no date is chosen, it will never expire."
+            ),
         required=False)
 
 
@@ -35,8 +41,12 @@ class ContentStatusHistoryDatesForm(form.Form):
     ignoreContext = True
     label = "Content status history dates"
 
-    effective_date = FieldProperty(IContentStatusHistoryDates['effective_date'])
-    expiration_date = FieldProperty(IContentStatusHistoryDates['expiration_date'])
+    effective_date = FieldProperty(
+        IContentStatusHistoryDates['effective_date']
+    )
+    expiration_date = FieldProperty(
+        IContentStatusHistoryDates['expiration_date']
+    )
 
 
 class ContentStatusHistoryView(BrowserView):
@@ -56,11 +66,17 @@ def __call__(self, workflow_action=None, paths=[], comment="",
                  include_children=False, *args):
 
         data = self.dates_form.extractData()
-        if self.request.get('form.widgets.effective_date-calendar', None) and data:
-            effective_date = data[0]['effective_date'].strftime("%Y-%m-%d %H:%M")
-
-        if self.request.get('form.widgets.expiration_date-calendar', None) and data:
-            expiration_date = data[0]['expiration_date'].strftime("%Y-%m-%d %H:%M")
+        if self.request.get('form.widgets.effective_date-calendar', None) \
+           and data:
+            effective_date = data[0]['effective_date'].strftime(
+                "%Y-%m-%d %H:%M"
+            )
+
+        if self.request.get('form.widgets.expiration_date-calendar', None) \
+           and data:
+            expiration_date = data[0]['expiration_date'].strftime(
+                "%Y-%m-%d %H:%M"
+            )
 
         if self.request.get('form.button.Cancel', None):
             return self.request.RESPONSE.redirect(
diff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py
index 7598fd5..0d579c2 100644
--- a/plone/app/content/browser/file.py
+++ b/plone/app/content/browser/file.py
@@ -1,13 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
-
-import json
-import mimetypes
-from plone.dexterity.interfaces import IDexterityFTI
 from plone.app.dexterity.interfaces import IDXFileFactory
+from plone.dexterity.interfaces import IDexterityFTI
 from plone.uuid.interfaces import IUUID
-import os
+import json
 import logging
+import mimetypes
+import os
 
 logger = logging.getLogger('plone')
 
diff --git a/plone/app/content/browser/folder.py b/plone/app/content/browser/folder.py
index b621cba..f462a8f 100644
--- a/plone/app/content/browser/folder.py
+++ b/plone/app/content/browser/folder.py
@@ -1,4 +1,4 @@
-from .interfaces import IFolderContentsView
+# -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from AccessControl import getSecurityManager
 from Acquisition import aq_inner
@@ -12,7 +12,9 @@
 from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from Products.Five import BrowserView
 from ZODB.POSException import ConflictError
-from plone.app.content.utils import json_dumps, json_loads
+from plone.app.content.interfaces import IFolderContentsView
+from plone.app.content.utils import json_dumps
+from plone.app.content.utils import json_loads
 from plone.dexterity.interfaces import IDexterityContent
 from plone.folder.interfaces import IExplicitOrdering
 from plone.protect.postonly import check as checkpost
@@ -23,7 +25,7 @@
 from zope.component.hooks import getSite
 from zope.container.interfaces import INameChooser
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.lifecycleevent import ObjectModifiedEvent
 
 import transaction
@@ -34,8 +36,8 @@
     TUS_ENABLED = False
 
 
+@implementer(IFolderContentsView)
 class FolderContentsView(BrowserView):
-    implements(IFolderContentsView)
 
     def __call__(self):
         site = getSite()
diff --git a/plone/app/content/browser/folderfactories.py b/plone/app/content/browser/folderfactories.py
index 97ee853..088583b 100644
--- a/plone/app/content/browser/folderfactories.py
+++ b/plone/app/content/browser/folderfactories.py
@@ -1,18 +1,18 @@
-from urllib import quote_plus
-
-from plone.i18n.normalizer.interfaces import IIDNormalizer
-from plone.memoize.instance import memoize
-from plone.memoize.request import memoize_diy_request
-from zope.component import getMultiAdapter, queryUtility
-from zope.i18n import translate
-from zope.publisher.browser import BrowserView
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from Acquisition import aq_parent
 from Products.CMFCore.Expression import createExprContext
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 from plone.app.content.browser.interfaces import IFolderContentsView
+from plone.i18n.normalizer.interfaces import IIDNormalizer
+from plone.memoize.instance import memoize
+from plone.memoize.request import memoize_diy_request
+from urllib import quote_plus
+from zope.component import getMultiAdapter
+from zope.component import queryUtility
+from zope.i18n import translate
+from zope.publisher.browser import BrowserView
 
 
 @memoize_diy_request(arg=0)
diff --git a/plone/app/content/browser/i18n.py b/plone/app/content/browser/i18n.py
index 612b510..8909b4e 100644
--- a/plone/app/content/browser/i18n.py
+++ b/plone/app/content/browser/i18n.py
@@ -1,10 +1,9 @@
-import json
-
+# -*- coding: utf-8 -*-
+from Products.Five.browser import BrowserView
 from plone.memoize import ram
 from zope.component import queryUtility
 from zope.i18n.interfaces import ITranslationDomain
-
-from Products.Five.browser import BrowserView
+import json
 
 
 def _cache_key(method, self, domain, language):
@@ -35,4 +34,4 @@ def __call__(self, domain, language=None):
         response = self.request.response
         response.setHeader('content-type', 'application/json')
         response.setBody(json.dumps(catalog))
-        return response
\ No newline at end of file
+        return response
diff --git a/plone/app/content/browser/interfaces.py b/plone/app/content/browser/interfaces.py
index df1a648..3a558a6 100644
--- a/plone/app/content/browser/interfaces.py
+++ b/plone/app/content/browser/interfaces.py
@@ -1,4 +1,4 @@
-# Zope imports
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 from zope.viewlet.interfaces import IViewletManager
 
diff --git a/plone/app/content/browser/query.py b/plone/app/content/browser/query.py
index 91dc9d1..9834029 100644
--- a/plone/app/content/browser/query.py
+++ b/plone/app/content/browser/query.py
@@ -1,8 +1,9 @@
-import json
-from plone.registry.interfaces import IRegistry
+# -*- coding: utf-8 -*-
+from Products.Five import BrowserView
 from plone.app.querystring.interfaces import IQuerystringRegistryReader
+from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
-from Products.Five import BrowserView
+import json
 
 
 class QueryStringIndexOptions(BrowserView):
diff --git a/plone/app/content/browser/reviewlist.py b/plone/app/content/browser/reviewlist.py
index eb17ec7..97104c3 100644
--- a/plone/app/content/browser/reviewlist.py
+++ b/plone/app/content/browser/reviewlist.py
@@ -1,13 +1,13 @@
-import urllib
-
-from zope.component import getMultiAdapter
-from zope.i18n import translate
-from zope.publisher.browser import BrowserView
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_unicode
-from plone.app.content.browser.tableview import Table, TableBrowserView
+from plone.app.content.browser.tableview import Table
+from plone.app.content.browser.tableview import TableBrowserView
+from zope.component import getMultiAdapter
+from zope.i18n import translate
+from zope.publisher.browser import BrowserView
+import urllib
 
 
 class FullReviewListView(BrowserView):
diff --git a/plone/app/content/browser/selection.py b/plone/app/content/browser/selection.py
index bc083ee..99e8d47 100644
--- a/plone/app/content/browser/selection.py
+++ b/plone/app/content/browser/selection.py
@@ -1,8 +1,9 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_inner
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.statusmessages.interfaces import IStatusMessage
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five.browser import BrowserView
+from Products.statusmessages.interfaces import IStatusMessage
 from zope.component import getMultiAdapter
 
 
diff --git a/plone/app/content/browser/tableview.py b/plone/app/content/browser/tableview.py
index 1b90f16..36b76ab 100644
--- a/plone/app/content/browser/tableview.py
+++ b/plone/app/content/browser/tableview.py
@@ -1,22 +1,16 @@
-import urllib
-
-from plone.memoize import instance
-
+# -*- coding: utf-8 -*-
+from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
+from ZTUtils import make_query
 from plone.batching import Batch
-
+from plone.batching.browser import BatchView
+from plone.memoize import instance
 from zope.i18nmessageid import MessageFactory
-
-from Products.CMFPlone.utils import safe_unicode
+from zope.publisher.browser import BrowserView
+import urllib
 
 _ = MessageFactory('plone')
 
-from ZTUtils import make_query
-
-from plone.batching.browser import BatchView
-from zope.publisher.browser import BrowserView
-
 
 class TableBatchView(BatchView):
 
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index 6bc2bde..3caeba5 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-
 from AccessControl import getSecurityManager
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five import BrowserView
 from logging import getLogger
-from plone.app.content.utils import json_loads, json_dumps
+from plone.app.content.utils import json_dumps
+from plone.app.content.utils import json_loads
 from plone.app.querystring import queryparser
 from plone.app.widgets.interfaces import IFieldPermissionChecker
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
diff --git a/plone/app/content/catalog.py b/plone/app/content/catalog.py
index 5ae53f1..632448c 100644
--- a/plone/app/content/catalog.py
+++ b/plone/app/content/catalog.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 
 
 def reindexOnModify(content, event):
diff --git a/plone/app/content/container.py b/plone/app/content/container.py
index 0783f2b..1f083b0 100644
--- a/plone/app/content/container.py
+++ b/plone/app/content/container.py
@@ -1,23 +1,21 @@
-from zope.container.interfaces import IContainer
-from zope.container.contained import Contained
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
+from Products.CMFCore.CMFCatalogAware import CMFCatalogAware
 from Products.CMFCore.PortalContent import PortalContent
 from Products.CMFCore.PortalFolder import PortalFolderBase
-from Products.CMFCore.CMFCatalogAware import CMFCatalogAware
 from Products.CMFDefault.DublinCore import DefaultDublinCoreImpl
-
 from plone.app.content.interfaces import IReindexOnModify
+from zope.container.contained import Contained
+from zope.container.interfaces import IContainer
+from zope.interface import implementer
 
 
+@implementer(IContainer)
 class OFSContainer(object):
     """A folder that's also a container.
 
     Borrowed in part from megrok.five.
     """
 
-    implements(IContainer)
-
     isPrincipiaFolderish = 1
 
     def __init__(self, id=None):
@@ -69,14 +67,14 @@ def __len__(self):
 #
 # ... I WANT AN ADAPTER!
 
+
+@implementer(IReindexOnModify)
 class Container(OFSContainer, CMFCatalogAware, PortalFolderBase, PortalContent,
                 DefaultDublinCoreImpl, Contained):
     """A base class mixing in CMFish, contentish, containerish, containedish,
     dublincoreish behaviour.
     """
 
-    implements(IReindexOnModify)
-
     def __init__(self, id=None, **kwargs):
         OFSContainer.__init__(self, id, **kwargs)
         PortalFolderBase.__init__(self, id, **kwargs)
diff --git a/plone/app/content/interfaces.py b/plone/app/content/interfaces.py
index b08d66f..b51e45a 100644
--- a/plone/app/content/interfaces.py
+++ b/plone/app/content/interfaces.py
@@ -1,36 +1,20 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 
 
 class INameFromTitle(Interface):
     """An object that supports gettings it name from its title.
     """
 
-    title = schema.TextLine(title=u"Title",
-                            description=u"A title, which will be converted to "
-                                        u"a name",
-                            required=True)
+    title = schema.TextLine(
+        title=u"Title",
+        description=u"A title, which will be converted to a name",
+        required=True
+    )
 
 
 class IReindexOnModify(Interface):
     """Marker interface which makes sure an object gets reindexed when
     it's modified.
     """
-
-# XXX: This should be deprecated and removed in Plone 4.
-
-class IIndexableObjectWrapper(Interface):
-    """An adapter of a (object, portal) where object is to be indexed in
-    portal_catalog.
-
-    This should implement __getattr__(), which in turn should react
-    when the catalog tries to get attributes to index.
-
-    The update() method must be called before the catalog is given the
-    wrapper.
-    """
-
-    def update(vars, **kwargs):
-        """Update the wrapper with variables from e.g. the workflow
-        tool.
-        """
diff --git a/plone/app/content/item.py b/plone/app/content/item.py
index 7a7478b..46b95f8 100644
--- a/plone/app/content/item.py
+++ b/plone/app/content/item.py
@@ -1,18 +1,16 @@
-from zope.container.contained import Contained
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from Products.CMFCore.PortalContent import PortalContent
 from Products.CMFDefault.DublinCore import DefaultDublinCoreImpl
-
 from plone.app.content.interfaces import IReindexOnModify
+from zope.container.contained import Contained
+from zope.interface import implementer
 
 
+@implementer(IReindexOnModify)
 class Item(PortalContent, DefaultDublinCoreImpl, Contained):
     """A non-containerish, CMFish item
     """
 
-    implements(IReindexOnModify)
-
     def __init__(self, id=None, **kwargs):
         DefaultDublinCoreImpl.__init__(self, **kwargs)
         if id is not None:
diff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py
index b5fd297..51ba0f5 100644
--- a/plone/app/content/namechooser.py
+++ b/plone/app/content/namechooser.py
@@ -1,19 +1,20 @@
+# -*- coding: utf-8 -*-
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from plone.app.content.interfaces import INameFromTitle
 from plone.i18n.normalizer import FILENAME_REGEX
-from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer
 from plone.i18n.normalizer.interfaces import IURLNormalizer
+from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer
+from zExceptions import BadRequest
 from zope.component import getUtility
 from zope.container.interfaces import INameChooser
-from zope.interface import implements
-
-from Acquisition import aq_inner, aq_base
-from zExceptions import BadRequest
-
-from plone.app.content.interfaces import INameFromTitle
+from zope.interface import implementer
 import time
 
 ATTEMPTS = 100
 
 
+@implementer(INameChooser)
 class NormalizingNameChooser(object):
     """A name chooser for a Zope object manager.
 
@@ -21,8 +22,6 @@ class NormalizingNameChooser(object):
     title to generate a name.
     """
 
-    implements(INameChooser)
-
     def __init__(self, context):
         self.context = context
 
@@ -93,15 +92,18 @@ def _getCheckId(self, obj):
         """
         parent = aq_inner(self.context)
         _check_id = getattr(obj, 'check_id', None)
-        if _check_id is not None:
-            def do_Plone_check(id, required):
-                return _check_id(id, required=required, contained_by=parent)
-            check_id = lambda id, required: do_Plone_check(id, required)
-        else:
-            def do_OFS_check(parent, id):
-                try:
-                    parent._checkId(id)
-                except BadRequest:
-                    return True
-            check_id = lambda id, required: do_OFS_check(parent, id)
-        return check_id
+
+        def do_Plone_check(newid, required):
+            if _check_id is not None:
+                return _check_id(
+                    newid,
+                    required=required,
+                    contained_by=parent
+                )
+            # fallback to OFS
+            try:
+                parent._checkId(newid)
+            except BadRequest:
+                return True
+
+        return do_Plone_check
diff --git a/plone/app/content/tests/test_adding.py b/plone/app/content/tests/test_adding.py
index 97131f7..3df20b0 100644
--- a/plone/app/content/tests/test_adding.py
+++ b/plone/app/content/tests/test_adding.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_get
 from plone.app.testing.bbb import PloneTestCase
 
diff --git a/plone/app/content/tests/test_basecontent.py b/plone/app/content/tests/test_basecontent.py
index 7a8f678..c8ac5ab 100644
--- a/plone/app/content/tests/test_basecontent.py
+++ b/plone/app/content/tests/test_basecontent.py
@@ -1,16 +1,15 @@
-import unittest
-import doctest
-
+# -*- coding: utf-8 -*-
 from Testing import ZopeTestCase as ztc
-
-from base import ContentFunctionalTestCase
+from plone.app.content.tests.base import ContentFunctionalTestCase
+import doctest
+import unittest
 
 
 def test_suite():
     return unittest.TestSuite((
         ztc.ZopeDocFileSuite(
-            'basecontent.txt', package='plone.app.content',
+            'basecontent.txt',
+            package='plone.app.content',
             test_class=ContentFunctionalTestCase,
-            optionflags=(doctest.ELLIPSIS |
-                         doctest.NORMALIZE_WHITESPACE)),
+            optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)),
     ))
diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py
index 911af47..4cab4bd 100644
--- a/plone/app/content/tests/test_folder.py
+++ b/plone/app/content/tests/test_folder.py
@@ -1,23 +1,20 @@
 # -*- coding: utf-8 -*-
-from plone.app.content.testing import (
-    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,
-    PLONE_APP_CONTENT_AT_INTEGRATION_TESTING
-)
+from DateTime import DateTime
+from Products.CMFCore.utils import getToolByName
+from plone.app.content.testing import PLONE_APP_CONTENT_AT_INTEGRATION_TESTING
+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
-
-from zope.publisher.browser import TestRequest
-from plone.uuid.interfaces import IUUID
-import unittest
-from plone.protect.authenticator import createToken
-import json
-from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from plone.dexterity.fti import DexterityFTI
+from plone.protect.authenticator import createToken
+from plone.uuid.interfaces import IUUID
 from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.interface import alsoProvides
+from zope.publisher.browser import TestRequest
+import json
+import unittest
 
 
 class BaseTest(unittest.TestCase):
diff --git a/plone/app/content/tests/test_namechooser.py b/plone/app/content/tests/test_namechooser.py
index 4c40f62..70282a9 100644
--- a/plone/app/content/tests/test_namechooser.py
+++ b/plone/app/content/tests/test_namechooser.py
@@ -1,6 +1,8 @@
-from zope.component.testing import setUp, tearDown
-import unittest
+# -*- coding: utf-8 -*-
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 import doctest
+import unittest
 
 
 def test_suite():
diff --git a/plone/app/content/tests/test_namechooser_unit.py b/plone/app/content/tests/test_namechooser_unit.py
index a874178..b65a256 100644
--- a/plone/app/content/tests/test_namechooser_unit.py
+++ b/plone/app/content/tests/test_namechooser_unit.py
@@ -1,12 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
+from plone.app.content.namechooser import ATTEMPTS
 from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING
 from plone.app.testing import TEST_USER_ID, TEST_USER_NAME
-from plone.app.testing import setRoles, login
-import transaction
-from plone.app.content.namechooser import ATTEMPTS
+from plone.app.testing import login
+from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
 from zope.container.interfaces import INameChooser
-
+import transaction
 import unittest2 as unittest
 
 
diff --git a/plone/app/content/tests/test_reviewlist.py b/plone/app/content/tests/test_reviewlist.py
index 852fbc5..ec1666c 100644
--- a/plone/app/content/tests/test_reviewlist.py
+++ b/plone/app/content/tests/test_reviewlist.py
@@ -1,8 +1,8 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-import transaction
-
 from plone.app.testing.bbb import PloneTestCase
 from plone.testing.z2 import Browser
+import transaction
 
 
 class ReviewListTestCase(PloneTestCase):
diff --git a/plone/app/content/tests/test_table.py b/plone/app/content/tests/test_table.py
index 804ce1f..3142590 100644
--- a/plone/app/content/tests/test_table.py
+++ b/plone/app/content/tests/test_table.py
@@ -1,6 +1,8 @@
-from zope.component.testing import setUp, tearDown
-import unittest
+# -*- coding: utf-8 -*-
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 import doctest
+import unittest
 
 
 def test_suite():
diff --git a/plone/app/content/utils.py b/plone/app/content/utils.py
index adbbbbf..29ae09b 100644
--- a/plone/app/content/utils.py
+++ b/plone/app/content/utils.py
@@ -1,6 +1,7 @@
-import json
-import datetime
+# -*- coding: utf-8 -*-
 import Missing
+import datetime
+import json
 
 
 def custom_json_handler(obj):
@@ -16,4 +17,4 @@ def json_dumps(data):
 
 
 # can eventually provide custom handling here if we want
-json_loads = json.loads
\ No newline at end of file
+json_loads = json.loads
diff --git a/setup.py b/setup.py
index 2ba5379..6edf0d1 100644
--- a/setup.py
+++ b/setup.py
@@ -1,57 +1,60 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '3.0.3.dev0'
 
-setup(name='plone.app.content',
-      version=version,
-      description="Content Views for Plone",
-      long_description='\n\n'.join([
-          open("README.rst").read(),
-          open("CHANGES.rst").read(),
-      ]),
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-      ],
-      keywords='plone content views viewlet',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.app.content',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
-          test=[
-              'plone.app.testing',
-              'plone.app.contenttypes',
-          ]
-      ),
-      install_requires=[
-          'setuptools',
-          'plone.memoize',
-          'plone.batching',
-          'plone.i18n',
-          'zope.i18n',
-          'zope.i18nmessageid',
-          'zope.interface',
-          'zope.component',
-          'zope.container',
-          'zope.event',
-          'zope.lifecycleevent',
-          'zope.publisher',
-          'zope.schema',
-          'zope.viewlet',
-          'Acquisition',
-          'Products.CMFPlone',
-          'Products.CMFCore>=2.2.0dev',
-          'Products.CMFDefault',
-          'Products.CMFDynamicViewFTI',  # required for cmf.ModifyViewTemplate
-          'Zope2',
-          'plone.app.widgets>=2.0.0.dev0'
-      ],
-      )
+setup(
+    name='plone.app.content',
+    version=version,
+    description="Content Views for Plone",
+    long_description='\n\n'.join([
+        open("README.rst").read(),
+        open("CHANGES.rst").read(),
+    ]),
+    classifiers=[
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+    ],
+    keywords='plone content views viewlet',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.app.content',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
+        test=[
+            'plone.app.testing',
+            'plone.app.contenttypes',
+        ]
+    ),
+    install_requires=[
+        'Acquisition',
+        'Products.CMFCore>=2.2.0dev',
+        'Products.CMFDefault',
+        'Products.CMFDynamicViewFTI',  # required for cmf.ModifyViewTemplate
+        'Products.CMFPlone',
+        'Zope2',
+        'plone.app.widgets>=2.0.0.dev0'
+        'plone.batching',
+        'plone.i18n',
+        'plone.memoize',
+        'setuptools',
+        'zope.component',
+        'zope.container',
+        'zope.event',
+        'zope.i18n',
+        'zope.i18nmessageid',
+        'zope.interface',
+        'zope.lifecycleevent',
+        'zope.publisher',
+        'zope.schema',
+        'zope.viewlet',
+    ],
+)


