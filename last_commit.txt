Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-15T22:49:00-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/58f801563f0d59e8e3c847db6f5d6815800bde2e

update mockup-core

Files changed:
M Products/CMFPlone/static/.gitignore
M Products/CMFPlone/static/bower.json
M Products/CMFPlone/static/components/mockup-core/.bower.json
M Products/CMFPlone/static/components/mockup-core/js/pattern.js
M Products/CMFPlone/static/components/mockup-core/package.json
M Products/CMFPlone/static/components/mockup-core/tests/pattern-test.js

diff --git a/Products/CMFPlone/static/.gitignore b/Products/CMFPlone/static/.gitignore
index 1d37d0f..3bc35d2 100644
--- a/Products/CMFPlone/static/.gitignore
+++ b/Products/CMFPlone/static/.gitignore
@@ -61,6 +61,21 @@ components/tinymce-builded/Gruntfile.js
 components/tinymce-builded/tests/.jshintrc
 components/tinymce-builded/tools/saucelabs/
 components/tinymce-builded/tools/tasks/
+components/tinymce-builded/.gitignore
+components/tinymce-builded/LICENSE.TXT
+components/tinymce-builded/changelog.txt
+components/tinymce-builded/package.json
+components/tinymce-builded/tests/.eslintrc
+components/tinymce-builded/tests/js/module_loader.js
+components/tinymce-builded/tests/manual/dirty.html
+components/tinymce-builded/tests/manual/dragdrop.html
+components/tinymce-builded/tests/manual/imagetools.html
+components/tinymce-builded/tests/manual/img/
+components/tinymce-builded/tests/manual/inline-toolbars.html
+components/tinymce-builded/tests/manual/skin.html
+components/tinymce-builded/tests/tinymce/EditorUpload.js
+components/tinymce-builded/tests/tinymce/data/
+components/tinymce-builded/tests/tinymce/file/
 
 components/jquery.recurrenceinput.js/.*
 components/jquery.recurrenceinput.js/*.rst
diff --git a/Products/CMFPlone/static/bower.json b/Products/CMFPlone/static/bower.json
index 8afafda..73c46cc 100644
--- a/Products/CMFPlone/static/bower.json
+++ b/Products/CMFPlone/static/bower.json
@@ -17,7 +17,7 @@
     "jquery.recurrenceinput.js": "v1.5.2",
     "lodash": "2.4.1",
     "logging": "",
-    "mockup-core": "2.1.10",
+    "mockup-core": "2.1.11",
     "moment": "2.10.3",
     "patternslib": "2.0.9",
     "pickadate": "3.5.6",
diff --git a/Products/CMFPlone/static/components/mockup-core/.bower.json b/Products/CMFPlone/static/components/mockup-core/.bower.json
index 362c6ea..850f164 100644
--- a/Products/CMFPlone/static/components/mockup-core/.bower.json
+++ b/Products/CMFPlone/static/components/mockup-core/.bower.json
@@ -22,14 +22,14 @@
     "jquery": "1.11.3"
   },
   "homepage": "https://github.com/plone/mockup-core",
-  "version": "2.1.10",
-  "_release": "2.1.10",
+  "version": "2.1.11",
+  "_release": "2.1.11",
   "_resolution": {
     "type": "version",
-    "tag": "v2.1.10",
-    "commit": "aa875728dfefeca6136025df1be593d759d93072"
+    "tag": "v2.1.11",
+    "commit": "6637f00644712a29777e9576766411651abb03e1"
   },
   "_source": "git://github.com/plone/mockup-core.git",
-  "_target": "2.1.10",
+  "_target": "2.1.11",
   "_originalSource": "mockup-core"
 }
\ No newline at end of file
diff --git a/Products/CMFPlone/static/components/mockup-core/js/pattern.js b/Products/CMFPlone/static/components/mockup-core/js/pattern.js
index bea3f24..d774286 100644
--- a/Products/CMFPlone/static/components/mockup-core/js/pattern.js
+++ b/Products/CMFPlone/static/components/mockup-core/js/pattern.js
@@ -28,8 +28,28 @@ define([
 
   // Base Pattern
   var Base = function($el, options) {
+    function _recursiveExtend(obj, source){
+      if (typeof source === "object" && source !== null){
+        for (var p in source){
+          if ($.isArray(source[p])){
+            obj[p] = source[p];
+          } else if (typeof source[p] === "object" && source[p] !== null && $.isPlainObject(source[p])){
+            // This is another dict, so will recurse
+            if (!obj.hasOwnProperty(p) || typeof obj[p] !== "object"){
+              // Create if not there, or if it is something else
+              obj[p] = {};
+            }
+            _recursiveExtend(obj[p], source[p]);
+          } else {
+            obj[p] = source[p];
+          }
+        }
+      }
+    }
+
     this.$el = $el;
-    this.options = $.extend(true, {}, this.defaults || {}, options || {});
+    this.options = $.extend(true, {}, this.defaults || {});
+    _recursiveExtend(this.options, options);
     this.init($el, options);
     this.emit('init');
   };
@@ -94,9 +114,9 @@ define([
 
     // Register the pattern in the Patternslib registry.
     if (!patternProps.name) {
-      log.warn("This mockup pattern without a name attribute will not be registered!");
+      log.info("This mockup pattern without a name attribute will not be registered!");
     } else if (!patternProps.trigger) {
-      log.warn("The mockup pattern '"+patternProps.name+"' does not have a trigger attribute, it will not be registered.");
+      log.info("The mockup pattern '"+patternProps.name+"' does not have a trigger attribute, it will not be registered.");
     } else {
       Registry.register(child, patternProps.name);
     }
diff --git a/Products/CMFPlone/static/components/mockup-core/package.json b/Products/CMFPlone/static/components/mockup-core/package.json
index 3bd4827..60139a2 100644
--- a/Products/CMFPlone/static/components/mockup-core/package.json
+++ b/Products/CMFPlone/static/components/mockup-core/package.json
@@ -1,6 +1,6 @@
 {
   "name": "mockup-core",
-  "version": "2.1.8",
+  "version": "2.1.11",
   "description": "Core library for the Mockup front end library",
   "homepage": "http://plone.github.io/mockup",
   "devDependencies": {
diff --git a/Products/CMFPlone/static/components/mockup-core/tests/pattern-test.js b/Products/CMFPlone/static/components/mockup-core/tests/pattern-test.js
index be84a45..a55f89a 100644
--- a/Products/CMFPlone/static/components/mockup-core/tests/pattern-test.js
+++ b/Products/CMFPlone/static/components/mockup-core/tests/pattern-test.js
@@ -52,6 +52,50 @@ define([
       var tmp = new Tmp($('<div class="pat-example"/>'), {option: 'value'});
     });
 
+    it('default values can be overriden', function(done) {
+      var Tmp = Base.extend({
+        name: 'example',
+        trigger: 'pat-example',
+        some: 'thing',
+        defaults: {
+          'val1': 'default',
+          'val2': 'default',
+          'val3': {
+            'child1': 'default',
+            'child2': 'default',
+            'child3': ['1', '2', '3'],
+            'child4': ['1', '2', '3']
+          },
+          'val4': ['a', 'b', 'c'],
+          'val5': ['a', 'b', 'c'],
+          'val6': 'a',
+          'val7': ['a']
+        },
+        init: function() {
+          expect(this.$el.hasClass('pat-example')).to.equal(true);
+          this.extra();
+        },
+        extra: function() {
+          expect(Object.keys(this.options).length).to.eql(7);
+          expect(this.options.val1).to.eql('value');
+          expect(this.options.val2).to.eql('default');
+          expect(Object.keys(this.options.val3).length).to.eql(5);
+          expect(this.options.val3.child1).to.eql('value');
+          expect(this.options.val3.child2).to.eql('default');
+          expect(this.options.val3.child3).to.eql(['4']);
+          expect(this.options.val3.child4).to.eql(['1', '2', '3']);
+          expect(Object.keys(this.options.val3.child5).length).to.eql(1);
+          expect(this.options.val3.child5.sub1).to.eql('a');
+          expect(this.options.val4).to.eql(['d']);
+          expect(this.options.val5).to.eql(['a', 'b', 'c']);
+          expect(this.options.val6).to.eql(['b', 'c']);
+          expect(this.options.val7).to.eql('b');
+          done();
+        }
+      });
+      var tmp = new Tmp($('<div class="pat-example"/>'), {'val1': 'value', 'val3': {'child1': 'value', 'child3':['4'], 'child5':{'sub1': 'a'}}, 'val4': ['d'], 'val6': ['b', 'c'], 'val7': 'b' });
+    });
+
     it('will automatically register a pattern in the Patternslib registry when extended', function() {
       var registerSpy = sinon.spy();
       var originalRegister = Registry.register;


