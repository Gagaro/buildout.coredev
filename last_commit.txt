Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2015-10-01T02:59:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.Archetypes/commit/e9ad0f4e76544b7890835ca93d25adeca4fc064f

White space only pep8 cleanup.  Not in the skins.

Fixed about 450 pep8 warnings, which is about two thirds.

Files changed:
M CHANGES.rst
M Products/Archetypes/AllowedTypesByIface.py
M Products/Archetypes/ArchetypeTool.py
M Products/Archetypes/BaseBTreeFolder.py
M Products/Archetypes/BaseContent.py
M Products/Archetypes/BaseFolder.py
M Products/Archetypes/BaseObject.py
M Products/Archetypes/BaseUnit.py
M Products/Archetypes/CatalogMultiplex.py
M Products/Archetypes/ClassGen.py
M Products/Archetypes/ExtensibleMetadata.py
M Products/Archetypes/Extensions/__init__.py
M Products/Archetypes/Extensions/migrations.py
M Products/Archetypes/Extensions/utils.py
M Products/Archetypes/Field.py
M Products/Archetypes/Layer.py
M Products/Archetypes/Marshall.py
M Products/Archetypes/OrderedBaseFolder.py
M Products/Archetypes/ReferenceEngine.py
M Products/Archetypes/Referenceable.py
M Products/Archetypes/Registry.py
M Products/Archetypes/Renderer.py
M Products/Archetypes/SQLMethod.py
M Products/Archetypes/SQLStorage.py
M Products/Archetypes/SQLStorageConfig.py
M Products/Archetypes/Schema/Composite.py
M Products/Archetypes/Schema/Facade.py
M Products/Archetypes/Schema/__init__.py
M Products/Archetypes/Storage/Facade.py
M Products/Archetypes/Storage/__init__.py
M Products/Archetypes/Storage/annotation.py
M Products/Archetypes/TemplateMixin.py
M Products/Archetypes/UIDCatalog.py
M Products/Archetypes/VariableSchemaSupport.py
M Products/Archetypes/WebDAVSupport.py
M Products/Archetypes/Widget.py
M Products/Archetypes/__init__.py
M Products/Archetypes/annotations.py
M Products/Archetypes/atapi.py
M Products/Archetypes/athistoryaware.py
M Products/Archetypes/browser/datecomponents.py
M Products/Archetypes/browser/edit.py
M Products/Archetypes/browser/fields.py
M Products/Archetypes/browser/lifecycle.py
M Products/Archetypes/browser/utils.py
M Products/Archetypes/config.py
M Products/Archetypes/debug.py
M Products/Archetypes/event.py
M Products/Archetypes/examples/ATBIFolder.py
M Products/Archetypes/examples/ComplexType.py
M Products/Archetypes/examples/DDocument.py
M Products/Archetypes/examples/Fact.py
M Products/Archetypes/examples/RefNode.py
M Products/Archetypes/examples/SimpleBTreeFolder.py
M Products/Archetypes/examples/SimpleFile.py
M Products/Archetypes/examples/SimpleFolder.py
M Products/Archetypes/examples/SimpleType.py
M Products/Archetypes/exceptions.py
M Products/Archetypes/exportimport/archetypetool.py
M Products/Archetypes/fieldproperty.py
M Products/Archetypes/generator/widget.py
M Products/Archetypes/interfaces/__init__.py
M Products/Archetypes/interfaces/annotations.py
M Products/Archetypes/interfaces/athistoryaware.py
M Products/Archetypes/interfaces/edit.py
M Products/Archetypes/interfaces/event.py
M Products/Archetypes/interfaces/field.py
M Products/Archetypes/interfaces/marshall.py
M Products/Archetypes/interfaces/orderedfolder.py
M Products/Archetypes/interfaces/referenceable.py
M Products/Archetypes/interfaces/schema.py
M Products/Archetypes/interfaces/storage.py
M Products/Archetypes/interfaces/templatemixin.py
M Products/Archetypes/interfaces/utils.py
M Products/Archetypes/interfaces/vocabulary.py
M Products/Archetypes/log.py
M Products/Archetypes/references.py
M Products/Archetypes/tests/__init__.py
M Products/Archetypes/tests/attestcase.py
M Products/Archetypes/tests/test_annotation.py
M Products/Archetypes/tests/test_athistoryaware.py
M Products/Archetypes/tests/test_baseobject.py
M Products/Archetypes/tests/test_baseschema.py
M Products/Archetypes/tests/test_baseunit.py
M Products/Archetypes/tests/test_browser_utils.py
M Products/Archetypes/tests/test_classgen.py
M Products/Archetypes/tests/test_cmfessentials.py
M Products/Archetypes/tests/test_contenttype.py
M Products/Archetypes/tests/test_copying.py
M Products/Archetypes/tests/test_datecomponents.py
M Products/Archetypes/tests/test_default_mimetypes.py
M Products/Archetypes/tests/test_doctests.py
M Products/Archetypes/tests/test_event.py
M Products/Archetypes/tests/test_extensions_utils.py
M Products/Archetypes/tests/test_externaleditor.py
M Products/Archetypes/tests/test_fields.py
M Products/Archetypes/tests/test_fieldvalidation.py
M Products/Archetypes/tests/test_file_upload.py
M Products/Archetypes/tests/test_filename.py
M Products/Archetypes/tests/test_functional.py
M Products/Archetypes/tests/test_index.py
M Products/Archetypes/tests/test_interfaces.py
M Products/Archetypes/tests/test_languagevocabulary.py
M Products/Archetypes/tests/test_marshaller.py
M Products/Archetypes/tests/test_metadata.py
M Products/Archetypes/tests/test_referenceCatalog.py
M Products/Archetypes/tests/test_reference_optimizations.py
M Products/Archetypes/tests/test_referenceable.py
M Products/Archetypes/tests/test_rename.py
M Products/Archetypes/tests/test_schemata.py
M Products/Archetypes/tests/test_schemata_manipulation.py
M Products/Archetypes/tests/test_security.py
M Products/Archetypes/tests/test_storage.py
M Products/Archetypes/tests/test_templatemixin.py
M Products/Archetypes/tests/test_traverse.py
M Products/Archetypes/tests/test_unicode.py
M Products/Archetypes/tests/test_update_schema.py
M Products/Archetypes/tests/test_utils.py
M Products/Archetypes/tests/test_utils2.py
M Products/Archetypes/tests/test_validation.py
M Products/Archetypes/tests/test_varschema.py
M Products/Archetypes/tests/test_widgets.py
M Products/Archetypes/tests/utils.py
M Products/Archetypes/traverse.py
M Products/Archetypes/utils.py
M Products/Archetypes/uuid.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 53e3af2..aaec619 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 1.10.11 (unreleased)
 --------------------
 
+- White space only pep8 cleanup.  Not in the skins.
+  [maurits]
+
 - Removed code for unused types_link_to_folder_contents and
   use_folder_tabs.
   [maurits]
diff --git a/Products/Archetypes/AllowedTypesByIface.py b/Products/Archetypes/AllowedTypesByIface.py
index e4aff4b..241ac7b 100644
--- a/Products/Archetypes/AllowedTypesByIface.py
+++ b/Products/Archetypes/AllowedTypesByIface.py
@@ -120,7 +120,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kwargs):
 
         if not at.typeImplementsInterfaces(fti, self.allowed_interfaces):
             raise ValueError, "Type %r does not implement any of %s." % \
-                  (type_name, self.allowed_interfaces)
+                (type_name, self.allowed_interfaces)
 
         args = (type_name, self, id, RESPONSE) + args
         new_id = pt.constructContent(*args, **kwargs)
diff --git a/Products/Archetypes/ArchetypeTool.py b/Products/Archetypes/ArchetypeTool.py
index b132de2..f76c9f8 100644
--- a/Products/Archetypes/ArchetypeTool.py
+++ b/Products/Archetypes/ArchetypeTool.py
@@ -86,28 +86,28 @@ def pt_render(self, source=False, extra_context={}):
                  'gethtml': '',
                  'mkdir': '',
                  },
-      'actions': (
-                     {'id': 'view',
-                      'title': 'View',
-                      'action': Expression('string:${object_url}/view'),
-                      'permissions': (permissions.View,),
-                      },
-
-                     {'id': 'edit',
-                      'title': 'Edit',
-                      'action': Expression('string:${object_url}/edit'),
-                      'permissions': (permissions.ModifyPortalContent,),
-                      'condition': Expression('not:object/@@plone_lock_info/is_locked_for_current_user')
-                      },
-
-                     {'id': 'metadata',
-                      'title': 'Properties',
-                      'action': Expression('string:${object_url}/properties'),
-                      'permissions': (permissions.ModifyPortalContent,),
-                      },
-
-                     ),
-      }, )
+     'actions': (
+         {'id': 'view',
+          'title': 'View',
+          'action': Expression('string:${object_url}/view'),
+          'permissions': (permissions.View,),
+          },
+
+         {'id': 'edit',
+          'title': 'Edit',
+          'action': Expression('string:${object_url}/edit'),
+          'permissions': (permissions.ModifyPortalContent,),
+          'condition': Expression('not:object/@@plone_lock_info/is_locked_for_current_user')
+          },
+
+         {'id': 'metadata',
+          'title': 'Properties',
+          'action': Expression('string:${object_url}/properties'),
+          'permissions': (permissions.ModifyPortalContent,),
+          },
+
+     ),
+     }, )
 
 
 def fixActionsForType(portal_type, typesTool):
@@ -119,12 +119,12 @@ def fixActionsForType(portal_type, typesTool):
             # Look for each action we define in portal_type.actions in
             # typeInfo.action replacing it if its there and just
             # adding it if not
-            ## rr: this is now trial-and-error programming
-            ## I really don't know what's going on here
-            ## most importantly I don't know why the default
-            ## actions are not set in some cases :-(
-            ## (maybe they are removed afterwards sometimes???)
-            ## if getattr(portal_type,'include_default_actions', True):
+            # rr: this is now trial-and-error programming
+            # I really don't know what's going on here
+            # most importantly I don't know why the default
+            # actions are not set in some cases :-(
+            # (maybe they are removed afterwards sometimes???)
+            # if getattr(portal_type,'include_default_actions', True):
             if True:
                 default = [ActionInformation(**action) for action in
                            base_factory_type_information[0]['actions']]
@@ -145,10 +145,10 @@ def fixActionsForType(portal_type, typesTool):
                 # Change action and condition into expressions, if
                 # they are still strings
                 if 'action' in action and \
-                       type(action['action']) in (type(''), type(u'')):
+                        type(action['action']) in (type(''), type(u'')):
                     action['action'] = Expression(action['action'])
                 if 'condition' in action and \
-                       type(action['condition']) in (type(''), type(u'')):
+                        type(action['condition']) in (type(''), type(u'')):
                     action['condition'] = Expression(action['condition'])
                 if 'name' in action:
                     action['title'] = action['name']
@@ -309,15 +309,16 @@ def registerType(klass, package):
         'module': sys.modules[klass.__module__],
         'schema': klass.schema,
         'signature': klass.schema.signature(),
-        }
+    }
 
     key = '%s.%s' % (package, data['meta_type'])
     if key in _types.keys():
         existing = _types[key]
-        existing_name = '%s.%s' % (existing['module'].__name__, existing['name'])
+        existing_name = '%s.%s' % (
+            existing['module'].__name__, existing['name'])
         override_name = '%s.%s' % (data['module'].__name__, data['name'])
-        log('ArchetypesTool: Trying to register "%s" which ' \
-            'has already been registered.  The new type %s ' \
+        log('ArchetypesTool: Trying to register "%s" which '
+            'has already been registered.  The new type %s '
             'is going to override %s' % (key, override_name, existing_name))
     _types[key] = data
 
@@ -332,7 +333,8 @@ def fixAfterRenameType(context, old_portal_type, new_portal_type):
     at_tool = getToolByName(context, TOOL_NAME)
     __traceback_info__ = (context, old_portal_type, new_portal_type,
                           [t['portal_type'] for t in _types.values()])
-    # Will fail if old portal type wasn't registered (DO 'FIX' THE INDEX ERROR!)
+    # Will fail if old portal type wasn't registered (DO 'FIX' THE INDEX
+    # ERROR!)
     old_type = [t for t in _types.values()
                 if t['portal_type'] == old_portal_type][0]
 
@@ -402,7 +404,7 @@ def registerClasses(context, package, types=None):
             constructors=(generatedForm, constructor),
             visibility=None,
             icon=icon
-            )
+        )
 
 
 def listTypes(package=None):
@@ -425,6 +427,7 @@ class WidgetWrapper:
     """
     security = ClassSecurityInfo()
     security.declareObjectPublic()
+
     def __init__(self, **args):
         self._args = args
 
@@ -435,7 +438,7 @@ def __call__(self):
 last_load = DateTime()
 
 
-class ArchetypeTool(UniqueObject, ActionProviderBase, \
+class ArchetypeTool(UniqueObject, ActionProviderBase,
                     SQLStorageConfig, Folder):
     """Archetypes tool, manage aspects of Archetype instances.
     """
@@ -452,32 +455,32 @@ class ArchetypeTool(UniqueObject, ActionProviderBase, \
 
     manage_options = (
         (
-        {'label': 'Types',
-         'action': 'manage_debugForm',
-         },
+            {'label': 'Types',
+             'action': 'manage_debugForm',
+             },
 
-        {'label': 'Catalogs',
-         'action': 'manage_catalogs',
-         },
+            {'label': 'Catalogs',
+             'action': 'manage_catalogs',
+             },
 
-        {'label': 'Templates',
-         'action': 'manage_templateForm',
-         },
+            {'label': 'Templates',
+             'action': 'manage_templateForm',
+             },
 
-        {'label': 'UIDs',
-         'action': 'manage_uids',
-         },
+            {'label': 'UIDs',
+             'action': 'manage_uids',
+             },
 
-        {'label': 'Update Schema',
-         'action': 'manage_updateSchemaForm',
-         },
+            {'label': 'Update Schema',
+             'action': 'manage_updateSchemaForm',
+             },
 
-        {'label': 'Migration',
-         'action': 'manage_migrationForm',
-         },
+            {'label': 'Migration',
+             'action': 'manage_migrationForm',
+             },
 
         ) + SQLStorageConfig.manage_options
-        )
+    )
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_uids')
@@ -508,11 +511,13 @@ def __init__(self):
         # meta_type -> [names of CatalogTools]
         self.catalog_map = PersistentMapping()
         self.catalog_map['Reference'] = []  # References not in portal_catalog
-        # DM (avoid persistency bug): "_types" now maps known schemas to signatures
+        # DM (avoid persistency bug): "_types" now maps known schemas to
+        # signatures
         self._types = {}
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_dumpSchema')
+
     def manage_dumpSchema(self, REQUEST=None):
         """XML Dump Schema of passed in class.
         """
@@ -537,6 +542,7 @@ def manage_dumpSchema(self, REQUEST=None):
     # are persistent
     security.declareProtected(permissions.ManagePortal,
                               'registerTemplate')
+
     def registerTemplate(self, template, name=None):
         # Lookup the template by name
         if not name:
@@ -549,6 +555,7 @@ def registerTemplate(self, template, name=None):
         self._registeredTemplates[template] = name
 
     security.declareProtected(permissions.View, 'lookupTemplates')
+
     def lookupTemplates(self, instance_or_portaltype=None):
         """Lookup templates by giving an instance or a portal_type.
 
@@ -572,12 +579,14 @@ def lookupTemplates(self, instance_or_portaltype=None):
         return DisplayList(results).sortedByValue()
 
     security.declareProtected(permissions.View, 'listTemplates')
+
     def listTemplates(self):
         """Lists all the templates.
         """
         return DisplayList(self._registeredTemplates.items()).sortedByValue()
 
     security.declareProtected(permissions.ManagePortal, 'bindTemplate')
+
     def bindTemplate(self, portal_type, templateList):
         """Creates binding between a type and its associated views.
         """
@@ -585,6 +594,7 @@ def bindTemplate(self, portal_type, templateList):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_templates')
+
     def manage_templates(self, REQUEST=None):
         """Sets all the template/type mappings.
         """
@@ -603,6 +613,7 @@ def manage_templates(self, REQUEST=None):
         return REQUEST.RESPONSE.redirect(self.absolute_url() + '/manage_templateForm')
 
     security.declareProtected(permissions.View, 'typeImplementsInterfaces')
+
     def typeImplementsInterfaces(self, type, interfaces):
         """Checks if an type uses one of the given interfaces.
         """
@@ -615,18 +626,23 @@ def typeImplementsInterfaces(self, type, interfaces):
         return False
 
     security.declareProtected(permissions.View, 'isTemplateEnabled')
+
     def isTemplateEnabled(self, type):
         """Checks if an type uses ITemplateMixin.
         """
         return self.typeImplementsInterfaces(type, [ITemplateMixin])
 
-    security.declareProtected(permissions.View, 'listTemplateEnabledPortalTypes')
+    security.declareProtected(
+        permissions.View, 'listTemplateEnabledPortalTypes')
+
     def listTemplateEnabledPortalTypes(self):
         """Return a list of portal_types with ITemplateMixin
         """
         return self.listPortalTypesWithInterfaces([ITemplateMixin])
 
-    security.declareProtected(permissions.View, 'listPortalTypesWithInterfaces')
+    security.declareProtected(
+        permissions.View, 'listPortalTypesWithInterfaces')
+
     def listPortalTypesWithInterfaces(self, ifaces):
         """Returns a list of ftis of which the types implement one of
         the given interfaces.  Only returns AT types.
@@ -656,6 +672,7 @@ def listPortalTypesWithInterfaces(self, ifaces):
 
     # Type/Schema Management
     security.declareProtected(permissions.View, 'listRegisteredTypes')
+
     def listRegisteredTypes(self, inProject=False, portalTypes=False):
         """Return the list of sorted types.
         """
@@ -688,6 +705,7 @@ def type_sort(a, b):
         return values
 
     security.declareProtected(permissions.View, 'getTypeSpec')
+
     def getTypeSpec(self, package, type):
         t = self.lookupType(package, type)
         module = t['klass'].__module__
@@ -695,6 +713,7 @@ def getTypeSpec(self, package, type):
         return '%s.%s' % (module, klass)
 
     security.declareProtected(permissions.View, 'listTypes')
+
     def listTypes(self, package=None, type=None):
         """Just the class.
         """
@@ -704,6 +723,7 @@ def listTypes(self, package=None, type=None):
             return [getType(type, package)['klass']]
 
     security.declareProtected(permissions.View, 'lookupType')
+
     def lookupType(self, package, type):
         types = self.listRegisteredTypes()
         for t in types:
@@ -720,6 +740,7 @@ def lookupType(self, package, type):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_installType')
+
     def manage_installType(self, typeName, package=None,
                            uninstall=None, REQUEST=None):
         """Un/Install a type TTW.
@@ -745,7 +766,8 @@ def manage_installType(self, typeName, package=None,
         process_types([typeDesc], package)
         klass = typeDesc['klass']
 
-        # get the meta type of the FTI from the class, use the default FTI as default
+        # get the meta type of the FTI from the class, use the default FTI as
+        # default
         fti_meta_type = getattr(klass, '_at_fti_meta_type', None)
         if fti_meta_type in (None, 'simple item'):
             fti_meta_type = FactoryTypeInformation.meta_type
@@ -766,6 +788,7 @@ def manage_installType(self, typeName, package=None,
                                              '/manage_debugForm')
 
     security.declarePublic('getSearchWidgets')
+
     def getSearchWidgets(self, package=None, type=None,
                          context=None, nosort=None):
         """Empty widgets for searching.
@@ -774,6 +797,7 @@ def getSearchWidgets(self, package=None, type=None,
                                context=context, mode='search', nosort=nosort)
 
     security.declarePublic('getWidgets')
+
     def getWidgets(self, instance=None,
                    package=None, type=None,
                    context=None, mode='edit',
@@ -822,7 +846,7 @@ def getWidgets(self, instance=None,
                         field.vocabulary = field.Vocabulary(instance)
                     if '' not in field.vocabulary.keys():
                         field.vocabulary = DisplayList([('', _(u'at_search_any', default=u'<any>'))]) + \
-                                           field.vocabulary
+                            field.vocabulary
                     widget.populate = False
                     field_name = field.accessor
                     # accessor must be a method which doesn't take an argument
@@ -842,6 +866,7 @@ def getWidgets(self, instance=None,
         return [widget for name, widget in widgets]
 
     security.declarePrivate('_rawEnum')
+
     def _rawEnum(self, callback, *args, **kwargs):
         """Finds all object to check if they are 'referenceable'.
         """
@@ -856,6 +881,7 @@ def _rawEnum(self, callback, *args, **kwargs):
                 log('no object for brain: %s:%s' % (b, b.getURL()))
 
     security.declareProtected(permissions.View, 'enum')
+
     def enum(self, callback, *args, **kwargs):
         catalog = getToolByName(self, UID_CATALOG)
         keys = catalog.uniqueValuesFor('UID')
@@ -867,6 +893,7 @@ def enum(self, callback, *args, **kwargs):
                 log('No object for %s' % uid)
 
     security.declareProtected(permissions.View, 'Content')
+
     def Content(self):
         """Return a list of all the content ids.
         """
@@ -878,6 +905,7 @@ def Content(self):
     # Management Forms
     security.declareProtected(permissions.ManagePortal,
                               'manage_doGenerate')
+
     def manage_doGenerate(self, sids=(), REQUEST=None):
         """(Re)generate types.
         """
@@ -894,6 +922,7 @@ def manage_doGenerate(self, sids=(), REQUEST=None):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_inspect')
+
     def manage_inspect(self, UID, REQUEST=None):
         """Dump some things about an object hook in the debugger for now.
         """
@@ -905,6 +934,7 @@ def manage_inspect(self, UID, REQUEST=None):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_reindex')
+
     def manage_reindex(self, REQUEST=None):
         """Assign UIDs to all basecontent objects.
         """
@@ -929,6 +959,7 @@ def _listAllTypes(self):
 
     security.declareProtected(permissions.ManagePortal,
                               'getChangedSchema')
+
     def getChangedSchema(self):
         """Returns a list of tuples indicating which schema have changed.
 
@@ -960,6 +991,7 @@ def getChangedSchema(self):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_updateSchema')
+
     def manage_updateSchema(self, REQUEST=None, update_all=None,
                             remove_instance_schemas=None):
         """Make sure all objects' schema are up to date.
@@ -998,10 +1030,10 @@ def manage_updateSchema(self, REQUEST=None, update_all=None,
                 func_update_all = self._updateObject
             if update_all:
                 catalog.ZopeFindAndApply(portal, obj_metatypes=meta_types,
-                    search_sub=True, apply_func=func_update_all)
+                                         search_sub=True, apply_func=func_update_all)
             else:
                 catalog.ZopeFindAndApply(portal, obj_metatypes=meta_types,
-                    search_sub=True, apply_func=func_update_changed)
+                                         search_sub=True, apply_func=func_update_changed)
             for t in update_types:
                 self._types[t] = _types[t]['signature']
             self._p_changed = True
@@ -1018,7 +1050,8 @@ def _updateObject(self, o, path, remove_instance_schemas=None):
         # Subtransactions to avoid eating up RAM when used inside a
         # 'ZopeFindAndApply' like in manage_updateSchema
         self.subtransactioncounter += 1
-        # Only every 250 objects a sub-commit, otherwise it eats up all diskspace
+        # Only every 250 objects a sub-commit, otherwise it eats up all
+        # diskspace
         if not self.subtransactioncounter % 250:
             transaction.savepoint(optimistic=True)
 
@@ -1035,6 +1068,7 @@ def _removeSchemaAndUpdateChangedObject(self, o, path):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_updateSchema')
+
     def manage_migrate(self, REQUEST=None):
         """Run Extensions.migrations.migrate.
         """
@@ -1046,6 +1080,7 @@ def manage_migrate(self, REQUEST=None):
     # Catalog management
     security.declareProtected(permissions.View,
                               'listCatalogs')
+
     def listCatalogs(self):
         """Show the catalog mapping.
         """
@@ -1053,6 +1088,7 @@ def listCatalogs(self):
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_updateCatalogs')
+
     def manage_updateCatalogs(self, REQUEST=None):
         """Set the catalog map for meta_type to include the list
         catalog_names.
@@ -1069,6 +1105,7 @@ def manage_updateCatalogs(self, REQUEST=None):
 
     security.declareProtected(permissions.ManagePortal,
                               'setCatalogsByType')
+
     def setCatalogsByType(self, portal_type, catalogList):
         """ associate catalogList with meta_type. (unfortunally not portal_type).
 
@@ -1078,6 +1115,7 @@ def setCatalogsByType(self, portal_type, catalogList):
         self.catalog_map[portal_type] = catalogList
 
     security.declareProtected(permissions.View, 'getCatalogsByType')
+
     def getCatalogsByType(self, portal_type):
         """Return the catalog objects assoicated with a given type.
         """
@@ -1099,6 +1137,7 @@ def getCatalogsByType(self, portal_type):
         return catalogs
 
     security.declareProtected(permissions.View, 'getCatalogsInSite')
+
     def getCatalogsInSite(self):
         """Return a list of ids for objects implementing ZCatalog.
         """
@@ -1117,6 +1156,7 @@ def getCatalogsInSite(self):
         return res
 
     security.declareProtected(permissions.View, 'visibleLookup')
+
     def visibleLookup(self, field, vis_key, vis_value='visible'):
         """Checks the value of a specific key in the field widget's
         'visible' dictionary.
diff --git a/Products/Archetypes/BaseBTreeFolder.py b/Products/Archetypes/BaseBTreeFolder.py
index fadb69c..8a45c7c 100644
--- a/Products/Archetypes/BaseBTreeFolder.py
+++ b/Products/Archetypes/BaseBTreeFolder.py
@@ -34,7 +34,7 @@ class ObsoleteBaseBTreeFolder(CMFBTreeFolder, BaseFolder):
         (permissions.ModifyPortalContent,
          ('manage_cutObjects', 'manage_pasteObjects',
           'manage_renameObject', 'manage_renameObjects',)),
-        )
+    )
     security.declareProtected('Copy or Move', 'manage_copyObjects')
 
     def __init__(self, oid, **kwargs):
@@ -42,6 +42,7 @@ def __init__(self, oid, **kwargs):
         BaseFolder.__init__(self, oid, **kwargs)
 
     security.declarePrivate('manage_afterAdd')
+
     def manage_afterAdd(self, item, container):
         # CMFBTreeFolder inherits from PortalFolder, which has the same
         # base class as SkinnedFolder, and SkinnedFolder doesn't
@@ -50,6 +51,7 @@ def manage_afterAdd(self, item, container):
         BaseFolder.manage_afterAdd(self, item, container)
 
     security.declarePrivate('manage_afterClone')
+
     def manage_afterClone(self, item):
         # CMFBTreeFolder inherits from PortalFolder, which has the same
         # base class as SkinnedFolder, and SkinnedFolder doesn't
@@ -58,6 +60,7 @@ def manage_afterClone(self, item):
         BaseFolder.manage_afterClone(self, item)
 
     security.declarePrivate('manage_beforeDelete')
+
     def manage_beforeDelete(self, item, container):
         # CMFBTreeFolder inherits from PortalFolder, which has the same
         # base class as SkinnedFolder, and SkinnedFolder doesn't
@@ -94,22 +97,27 @@ def __getitem__(self, key):
     security.declareProtected(permissions.ModifyPortalContent, 'reindexObject')
     reindexObject = BaseFolder.reindexObject.im_func
 
-    security.declareProtected(permissions.ModifyPortalContent, 'reindexObjectSecurity')
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'reindexObjectSecurity')
     reindexObjectSecurity = BaseFolder.reindexObjectSecurity.im_func
 
     security.declarePrivate('notifyWorkflowCreated')
     notifyWorkflowCreated = BaseFolder.notifyWorkflowCreated.im_func
 
-    security.declareProtected(permissions.AccessContentsInformation, 'opaqueItems')
+    security.declareProtected(
+        permissions.AccessContentsInformation, 'opaqueItems')
     opaqueItems = BaseFolder.opaqueItems.im_func
 
-    security.declareProtected(permissions.AccessContentsInformation, 'opaqueIds')
+    security.declareProtected(
+        permissions.AccessContentsInformation, 'opaqueIds')
     opaqueIds = BaseFolder.opaqueIds.im_func
 
-    security.declareProtected(permissions.AccessContentsInformation, 'opaqueValues')
+    security.declareProtected(
+        permissions.AccessContentsInformation, 'opaqueValues')
     opaqueValues = BaseFolder.opaqueValues.im_func
 
-    security.declareProtected(permissions.ListFolderContents, 'listFolderContents')
+    security.declareProtected(
+        permissions.ListFolderContents, 'listFolderContents')
     listFolderContents = BaseFolder.listFolderContents.im_func
 
     security.declareProtected(permissions.AccessContentsInformation,
@@ -129,7 +137,7 @@ def index_html(self):
         request = getattr(self, 'REQUEST', None)
         if request and 'REQUEST_METHOD' in request:
             if (request.maybe_webdav_client and
-                request['REQUEST_METHOD'] in ['PUT']):
+                    request['REQUEST_METHOD'] in ['PUT']):
                 # Very likely a WebDAV client trying to create something
                 nr = NullResource(self, 'index_html')
                 nr.__replaceable__ = REPLACEABLE
@@ -150,7 +158,8 @@ def index_html(self):
     security.declareProtected(permissions.View, 'Description')
     Description = BaseFolder.Description.im_func
 
-    security.declareProtected(permissions.ModifyPortalContent, 'setDescription')
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'setDescription')
     setDescription = BaseFolder.setDescription.im_func
 
     manage_addFolder = BaseFolder.manage_addFolder.im_func
diff --git a/Products/Archetypes/BaseContent.py b/Products/Archetypes/BaseContent.py
index 49ce295..5fbbaf7 100644
--- a/Products/Archetypes/BaseContent.py
+++ b/Products/Archetypes/BaseContent.py
@@ -16,9 +16,9 @@
 from zope.interface import implements
 
 CONTENT_MANAGE_OPTIONS = (
- {'action': 'manage_change_history_page', 'label': 'History'},
- {'action': 'view', 'label': 'View'},
- {'action': 'manage_interfaces', 'label': 'Interfaces'},
+    {'action': 'manage_change_history_page', 'label': 'History'},
+    {'action': 'view', 'label': 'View'},
+    {'action': 'manage_interfaces', 'label': 'Interfaces'},
 )
 
 
@@ -39,17 +39,20 @@ class BaseContentMixin(CatalogMultiplex,
     __dav_marshall__ = True
 
     security.declarePrivate('manage_afterAdd')
+
     def manage_afterAdd(self, item, container):
         BaseObject.manage_afterAdd(self, item, container)
 
     security.declarePrivate('manage_afterClone')
+
     def manage_afterClone(self, item):
         BaseObject.manage_afterClone(self, item)
 
     security.declarePrivate('manage_beforeDelete')
+
     def manage_beforeDelete(self, item, container):
         BaseObject.manage_beforeDelete(self, item, container)
-        #and reset the rename flag (set in Referenceable._notifyCopyOfCopyTo)
+        # and reset the rename flag (set in Referenceable._notifyCopyOfCopyTo)
         self._v_cp_refs = None
 
     def _notifyOfCopyTo(self, container, op=0):
diff --git a/Products/Archetypes/BaseFolder.py b/Products/Archetypes/BaseFolder.py
index b099ab0..7a31fdd 100644
--- a/Products/Archetypes/BaseFolder.py
+++ b/Products/Archetypes/BaseFolder.py
@@ -21,9 +21,9 @@
 from zope.interface import implements
 
 FOLDER_MANAGE_OPTIONS = (
- {'action': 'manage_main', 'label': 'Contents'},
- {'action': 'manage_access', 'label': 'Security'},
- {'action': 'manage_interfaces', 'label': 'Interfaces'},
+    {'action': 'manage_main', 'label': 'Contents'},
+    {'action': 'manage_access', 'label': 'Security'},
+    {'action': 'manage_interfaces', 'label': 'Interfaces'},
 )
 
 
@@ -43,7 +43,7 @@ class BaseFolderMixin(CatalogMultiplex,
         (permissions.ModifyPortalContent,
          ('manage_cutObjects', 'manage_pasteObjects',
           'manage_renameObject', 'manage_renameObjects',)),
-        )
+    )
     security.declareProtected('Copy or Move', 'manage_copyObjects')
 
     manage_options = FOLDER_MANAGE_OPTIONS
@@ -90,21 +90,25 @@ def _notifyOfCopyTo(self, container, op=0):
                 child._notifyOfCopyTo(self, op)
 
     security.declarePrivate('manage_afterAdd')
+
     def manage_afterAdd(self, item, container):
         BaseObject.manage_afterAdd(self, item, container)
 
     security.declarePrivate('manage_afterClone')
+
     def manage_afterClone(self, item):
         BaseObject.manage_afterClone(self, item)
 
     security.declarePrivate('manage_beforeDelete')
+
     def manage_beforeDelete(self, item, container):
         BaseObject.manage_beforeDelete(self, item, container)
-        #and reset the rename flag (set in Referenceable._notifyCopyOfCopyTo)
+        # and reset the rename flag (set in Referenceable._notifyCopyOfCopyTo)
         self._v_cp_refs = None
 
     security.declareProtected(permissions.DeleteObjects,
                               'manage_delObjects')
+
     def manage_delObjects(self, ids=None, REQUEST=None):
         """We need to enforce security."""
         if ids is None:
@@ -120,11 +124,13 @@ def manage_delObjects(self, ids=None, REQUEST=None):
 
     security.declareProtected(permissions.ListFolderContents,
                               'listFolderContents')
+
     def listFolderContents(self, contentFilter=None, suppressHiddenFiles=0):
         """Optionally you can suppress "hidden" files, or files that begin
         with a dot.
         """
-        contents = PortalFolder.listFolderContents(self, contentFilter=contentFilter)
+        contents = PortalFolder.listFolderContents(
+            self, contentFilter=contentFilter)
         if suppressHiddenFiles:
             contents = [obj for obj in contents if obj.getId()[:1] != '.']
 
@@ -132,6 +138,7 @@ def listFolderContents(self, contentFilter=None, suppressHiddenFiles=0):
 
     security.declareProtected(permissions.AccessContentsInformation,
                               'folderlistingFolderContents')
+
     def folderlistingFolderContents(self, contentFilter=None,
                                     suppressHiddenFiles=0):
         """Calls listFolderContents in protected only by ACI so that
@@ -141,6 +148,7 @@ def folderlistingFolderContents(self, contentFilter=None,
                                        suppressHiddenFiles=suppressHiddenFiles)
 
     security.declareProtected(permissions.View, 'Title')
+
     def Title(self, **kwargs):
         """We have to override Title here to handle arbitrary arguments since
         PortalFolder defines it."""
@@ -148,6 +156,7 @@ def Title(self, **kwargs):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setTitle')
+
     def setTitle(self, value, **kwargs):
         """We have to override setTitle here to handle arbitrary
         arguments since PortalFolder defines it."""
@@ -170,6 +179,7 @@ def __getitem__(self, key):
     # use instead "_at_type_subfolder" or our own type.
     security.declareProtected(permissions.AddPortalFolders,
                               'manage_addFolder')
+
     def manage_addFolder(self,
                          id,
                          title='',
@@ -220,6 +230,7 @@ def MKCOL_handler(self, id, REQUEST=None, RESPONSE=None):
         return result
 
     security.declarePrivate('manage_afterMKCOL')
+
     def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
         """After MKCOL handler.
         """
@@ -241,7 +252,8 @@ class BaseFolder(BaseFolderMixin, ExtensibleMetadata):
     """A not-so-basic Folder implementation, with Dublin Core
     Metadata included"""
 
-    implements(IBaseFolder, IBaseObject, IReferenceable, IContentish, IExtensibleMetadata)
+    implements(IBaseFolder, IBaseObject, IReferenceable,
+               IContentish, IExtensibleMetadata)
 
     schema = BaseFolderMixin.schema + ExtensibleMetadata.schema
 
@@ -255,6 +267,7 @@ def __init__(self, oid, **kwargs):
 
     security.declareProtected(permissions.View,
                               'Description')
+
     def Description(self, **kwargs):
         """We have to override Description here to handle arbitrary
         arguments since PortalFolder defines it."""
@@ -262,6 +275,7 @@ def Description(self, **kwargs):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setDescription')
+
     def setDescription(self, value, **kwargs):
         """We have to override setDescription here to handle arbitrary
         arguments since PortalFolder defines it."""
diff --git a/Products/Archetypes/BaseObject.py b/Products/Archetypes/BaseObject.py
index 4c406cb..fb27ea6 100644
--- a/Products/Archetypes/BaseObject.py
+++ b/Products/Archetypes/BaseObject.py
@@ -90,7 +90,7 @@
             label=_(u'label_short_name', default=u'Short name'),
             description=_(u'help_shortname',
                           default=u'Should not contain spaces, underscores or mixed case. '
-                                   'Short Name is part of the item\'s web address.'),
+                          'Short Name is part of the item\'s web address.'),
             visible={'view': 'invisible'}
         ),
     ),
@@ -108,7 +108,7 @@
         ),
     ),
 
-    ), marshall=RFC822Marshaller())
+), marshall=RFC822Marshaller())
 
 
 class BaseObject(Referenceable):
@@ -137,6 +137,7 @@ def __init__(self, oid, **kwargs):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'initializeArchetype')
+
     def initializeArchetype(self, **kwargs):
         """Called by the generated add* factory in types tool.
         """
@@ -154,31 +155,37 @@ def initializeArchetype(self, **kwargs):
             log_exc()
 
     security.declarePrivate('manage_afterAdd')
+
     def manage_afterAdd(self, item, container):
         __traceback_info__ = (self, item, container)
         Referenceable.manage_afterAdd(self, item, container)
         self.initializeLayers(item, container)
 
     security.declarePrivate('manage_afterClone')
+
     def manage_afterClone(self, item):
         __traceback_info__ = (self, item)
         Referenceable.manage_afterClone(self, item)
 
     security.declarePrivate('manage_beforeDelete')
+
     def manage_beforeDelete(self, item, container):
         __traceback_info__ = (self, item, container)
         self.cleanupLayers(item, container)
         Referenceable.manage_beforeDelete(self, item, container)
 
     security.declarePrivate('initializeLayers')
+
     def initializeLayers(self, item=None, container=None):
         self.Schema().initializeLayers(self, item, container)
 
     security.declarePrivate('cleanupLayers')
+
     def cleanupLayers(self, item=None, container=None):
         self.Schema().cleanupLayers(self, item, container)
 
     security.declareProtected(permissions.View, 'title_or_id')
+
     def title_or_id(self):
         """Returns the title if it is not blank and the id otherwise.
         """
@@ -189,12 +196,14 @@ def title_or_id(self):
         return self.getId()
 
     security.declareProtected(permissions.View, 'getId')
+
     def getId(self):
         """Gets the object id.
         """
         return self.id
 
     security.declareProtected(permissions.ModifyPortalContent, 'setId')
+
     def setId(self, value):
         """Sets the object id.
         """
@@ -221,6 +230,7 @@ def setId(self, value):
             self._setId(value)
 
     security.declareProtected(permissions.View, 'Type')
+
     def Type(self):
         """Dublin Core element - Object type.
 
@@ -235,12 +245,14 @@ def Type(self):
         return self.meta_type
 
     security.declareProtected(permissions.View, 'getField')
+
     def getField(self, key, wrapped=False):
         """Returns a field object.
         """
         return self.Schema().get(key)
 
     security.declareProtected(permissions.View, 'getWrappedField')
+
     def getWrappedField(self, key):
         """Gets a field by id which is explicitly wrapped.
 
@@ -249,6 +261,7 @@ def getWrappedField(self, key):
         return ExplicitAcquisitionWrapper(self.getField(key), self)
 
     security.declareProtected(permissions.View, 'getDefault')
+
     def getDefault(self, field):
         """Return the default value of a field.
         """
@@ -256,6 +269,7 @@ def getDefault(self, field):
         return field.getDefault(self)
 
     security.declareProtected(permissions.View, 'isBinary')
+
     def isBinary(self, key):
         """Return wether a field contains binary data.
         """
@@ -271,6 +285,7 @@ def isBinary(self, key):
         return 1
 
     security.declareProtected(permissions.View, 'isTransformable')
+
     def isTransformable(self, name):
         """Returns wether a field is transformable.
         """
@@ -278,6 +293,7 @@ def isTransformable(self, name):
         return isinstance(field, TextField) or not self.isBinary(name)
 
     security.declareProtected(permissions.View, 'widget')
+
     def widget(self, field_name, mode="view", field=None, **kwargs):
         """Returns the rendered widget.
         """
@@ -288,6 +304,7 @@ def widget(self, field_name, mode="view", field=None, **kwargs):
                                **kwargs)
 
     security.declareProtected(permissions.View, 'getFilename')
+
     def getFilename(self, key=None):
         """Returns the filename from a field.
         """
@@ -304,6 +321,7 @@ def getFilename(self, key=None):
         return value
 
     security.declareProtected(permissions.View, 'getContentType')
+
     def getContentType(self, key=None):
         """Returns the content type from a field.
         """
@@ -331,6 +349,7 @@ def getContentType(self, key=None):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setContentType')
+
     def setContentType(self, value, key=None):
         """Sets the content type of a field.
         """
@@ -343,6 +362,7 @@ def setContentType(self, value, key=None):
             field.setContentType(self, value)
 
     security.declareProtected(permissions.ModifyPortalContent, 'setFilename')
+
     def setFilename(self, value, key=None):
         """Sets the filename of a field.
         """
@@ -355,6 +375,7 @@ def setFilename(self, value, key=None):
             field.setFilename(self, value)
 
     security.declareProtected(permissions.View, 'getPrimaryField')
+
     def getPrimaryField(self):
         """The primary field is some object that responds to
         PUT/manage_FTPget events.
@@ -365,6 +386,7 @@ def getPrimaryField(self):
         return None
 
     security.declareProtected(permissions.View, 'get_portal_metadata')
+
     def get_portal_metadata(self, field):
         """Returns the portal_metadata for a field.
         """
@@ -384,9 +406,10 @@ def get_portal_metadata(self, field):
             policy = spec.getPolicy(None)
 
         return DisplayList(map(lambda x: (x, x), policy.allowedVocabulary())), \
-               policy.enforceVocabulary()
+            policy.enforceVocabulary()
 
     security.declareProtected(permissions.View, 'Vocabulary')
+
     def Vocabulary(self, key):
         """Returns the vocabulary for a specified field.
         """
@@ -398,7 +421,7 @@ def Vocabulary(self, key):
 
             if vocab is None:
                 vocab, enforce = field.Vocabulary(self), \
-                                 field.enforceVocabulary
+                    field.enforceVocabulary
         if vocab is None:
             vocab = DisplayList()
         return vocab, enforce
@@ -416,7 +439,7 @@ def __getitem__(self, key):
         if key not in keys and not key.startswith('_'):
             # XXX Fix this in AT 1.4
             value = getattr(aq_inner(self).aq_explicit, key, _marker) or \
-                    getattr(aq_parent(aq_inner(self)).aq_explicit, key, _marker)
+                getattr(aq_parent(aq_inner(self)).aq_explicit, key, _marker)
             if value is _marker:
                 raise KeyError, key
             else:
@@ -434,12 +457,14 @@ def __getitem__(self, key):
         return value
 
     security.declarePrivate('setDefaults')
+
     def setDefaults(self):
         """Sets the field values to the default values.
         """
         self.Schema().setDefaults(self)
 
     security.declareProtected(permissions.ModifyPortalContent, 'update')
+
     def update(self, **kwargs):
         """Changes the values of the field and reindex the object.
         """
@@ -457,6 +482,7 @@ def update(self, **kwargs):
 
     security.declareProtected(permissions.View,
                               'validate_field')
+
     def validate_field(self, name, value, errors):
         """Field's validate hook.
 
@@ -476,17 +502,20 @@ def validate_field(self, name, value, errors):
                 errors[name] = result
         return result
 
-    ## Pre/post validate hooks that will need to write errors
-    ## into the errors dict directly using errors[fieldname] = ""
+    # Pre/post validate hooks that will need to write errors
+    # into the errors dict directly using errors[fieldname] = ""
     security.declareProtected(permissions.View, 'pre_validate')
+
     def pre_validate(self, REQUEST=None, errors=None):
         pass
 
     security.declareProtected(permissions.View, 'post_validate')
+
     def post_validate(self, REQUEST=None, errors=None):
         pass
 
     security.declareProtected(permissions.View, 'validate')
+
     def validate(self, REQUEST=None, errors=None, data=None, metadata=None):
         """Validates the form data from the request.
         """
@@ -523,6 +552,7 @@ def validate(self, REQUEST=None, errors=None, data=None, metadata=None):
         return errors
 
     security.declareProtected(permissions.View, 'SearchableText')
+
     def SearchableText(self):
         """All fields marked as 'searchable' are concatenated together
         here for indexing purpose.
@@ -532,15 +562,15 @@ def SearchableText(self):
             if not field.searchable:
                 continue
             if IReferenceField.providedBy(field):
-                # waking instances is cheaper than processing a potentially 
+                # waking instances is cheaper than processing a potentially
                 # huge vocabulary for getting the title, therefore we handle
                 # reference fields seperately
-                objs=field.get(self)
+                objs = field.get(self)
                 if not isinstance(objs, (list, tuple)):
-                    objs=[objs]
-                datum=' '.join([o.Title() for o in objs])
+                    objs = [objs]
+                datum = ' '.join([o.Title() for o in objs])
                 data.append(datum)
-                    
+
             else:
                 method = field.getIndexAccessor(self)
                 try:
@@ -558,7 +588,8 @@ def SearchableText(self):
                     vocab = field.Vocabulary(self)
                     if isinstance(datum, (list, tuple)):
                         # Unmangle vocabulary: we index key AND value
-                        vocab_values = map(lambda value, vocab=vocab: vocab.getValue(value, ''), datum)
+                        vocab_values = map(
+                            lambda value, vocab=vocab: vocab.getValue(value, ''), datum)
                         datum = list(datum)
                         datum.extend(vocab_values)
                         datum = ' '.join(datum)
@@ -569,7 +600,7 @@ def SearchableText(self):
                         if isinstance(value, unicode):
                             value = value.encode('utf-8')
                         datum = "%s %s" % (datum, value, )
-    
+
                     if isinstance(datum, unicode):
                         datum = datum.encode('utf-8')
                     data.append(str(datum))
@@ -578,12 +609,14 @@ def SearchableText(self):
         return data
 
     security.declareProtected(permissions.View, 'getCharset')
+
     def getCharset(self):
         """Returns the site default charset, or utf-8.
         """
         return 'utf-8'
 
     security.declareProtected(permissions.View, 'get_size')
+
     def get_size(self):
         """Used for FTP and apparently the ZMI now too.
         """
@@ -593,6 +626,7 @@ def get_size(self):
         return size
 
     security.declarePrivate('_processForm')
+
     def _processForm(self, data=1, metadata=None, REQUEST=None, values=None):
         request = REQUEST or self.REQUEST
         if values:
@@ -617,17 +651,17 @@ def _processForm(self, data=1, metadata=None, REQUEST=None, values=None):
         form_keys = form.keys()
 
         for field in fields:
-            ## Delegate to the widget for processing of the form
-            ## element.  This means that if the widget needs _n_
-            ## fields under a naming convention it can handle this
-            ## internally.  The calling API is process_form(instance,
-            ## field, form) where instance should rarely be needed,
-            ## field is the field object and form is the dict. of
-            ## kv_pairs from the REQUEST
+            # Delegate to the widget for processing of the form
+            # element.  This means that if the widget needs _n_
+            # fields under a naming convention it can handle this
+            # internally.  The calling API is process_form(instance,
+            # field, form) where instance should rarely be needed,
+            # field is the field object and form is the dict. of
+            # kv_pairs from the REQUEST
             ##
-            ## The product of the widgets processing should be:
-            ##   (value, **kwargs) which will be passed to the mutator
-            ##   or None which will simply pass
+            # The product of the widgets processing should be:
+            # (value, **kwargs) which will be passed to the mutator
+            # or None which will simply pass
 
             if not field.writeable(self):
                 # If the field has no 'w' in mode, or the user doesn't
@@ -659,6 +693,7 @@ def _processForm(self, data=1, metadata=None, REQUEST=None, values=None):
         self.reindexObject()
 
     security.declareProtected(permissions.ModifyPortalContent, 'processForm')
+
     def processForm(self, data=1, metadata=0, REQUEST=None, values=None):
         """Processes the schema looking for data in the form.
         """
@@ -681,16 +716,19 @@ def processForm(self, data=1, metadata=0, REQUEST=None, values=None):
 
     # This method is only called once after object creation.
     security.declarePrivate('at_post_create_script')
+
     def at_post_create_script(self):
         pass
 
     # This method is called after every subsequent edit
     security.declarePrivate('at_post_edit_script')
+
     def at_post_edit_script(self):
         pass
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'markCreationFlag')
+
     def markCreationFlag(self):
         """Sets flag on the instance to indicate that the object hasn't been
         saved properly (unset in content_edit).
@@ -711,6 +749,7 @@ def markCreationFlag(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'unmarkCreationFlag')
+
     def unmarkCreationFlag(self):
         """Removes the creation flag.
         """
@@ -719,6 +758,7 @@ def unmarkCreationFlag(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'checkCreationFlag')
+
     def checkCreationFlag(self):
         """Returns True if the object has not been fully saved, False otherwise.
         """
@@ -747,6 +787,7 @@ def generateNewId(self):
         return queryUtility(IURLNormalizer).normalize(title)
 
     security.declarePrivate('_renameAfterCreation')
+
     def _renameAfterCreation(self, check_auto_id=False):
         """Renames an object like its normalized title.
         """
@@ -783,6 +824,7 @@ def _renameAfterCreation(self, check_auto_id=False):
         return False
 
     security.declarePrivate('_findUniqueId')
+
     def _findUniqueId(self, id):
         """Find a unique id in the parent folder, based on the given id, by
         appending -n, where n is a number between 1 and the constant
@@ -809,6 +851,7 @@ def _findUniqueId(self, id):
         return None
 
     security.declarePrivate('_isIDAutoGenerated')
+
     def _isIDAutoGenerated(self, id):
         """Avoid busting setDefaults if we don't have a proper acquisition
         context.
@@ -820,6 +863,7 @@ def _isIDAutoGenerated(self, id):
         return False
 
     security.declareProtected(permissions.View, 'Schemata')
+
     def Schemata(self):
         """Returns the Schemata for the Object.
         """
@@ -831,12 +875,14 @@ def Schema(self):
         return ImplicitAcquisitionWrapper(ISchema(self), self)
 
     security.declarePrivate('_isSchemaCurrent')
+
     def _isSchemaCurrent(self):
         """Determines whether the current object's schema is up to date.
         """
         return self._signature == self.Schema().signature()
 
     security.declarePrivate('_updateSchema')
+
     def _updateSchema(self, excluded_fields=None, out=None,
                       remove_instance_schemas=False):
         """Updates an object's schema when the class schema changes.
@@ -918,13 +964,15 @@ def _updateSchema(self, excluded_fields=None, out=None,
             return out
 
     security.declarePrivate('_migrateGetValue')
+
     def _migrateGetValue(self, name, new_schema=None):
         """Try to get a value from an object using a variety of methods."""
         schema = self.Schema()
         # Migrate pre-AT 1.3 schemas.
         schema = fixSchema(schema)
         # First see if the new field name is managed by the current schema
-        field = schema.get(getattr(new_schema.get(name, None), 'old_field_name', name), None)
+        field = schema.get(getattr(new_schema.get(
+            name, None), 'old_field_name', name), None)
         if field:
             # At very first try to use the BaseUnit itself
             try:
@@ -1011,6 +1059,7 @@ def _migrateGetValue(self, name, new_schema=None):
         raise ValueError, 'name = %s' % (name)
 
     security.declarePrivate('_migrateSetValue')
+
     def _migrateSetValue(self, name, value, old_schema=None, **kw):
         """Try to set an object value using a variety of methods."""
         schema = self.Schema()
@@ -1037,15 +1086,17 @@ def _migrateSetValue(self, name, value, old_schema=None, **kw):
         raise ValueError, 'name = %s, value = %s' % (name, value)
 
     security.declareProtected(permissions.View, 'isTemporary')
+
     def isTemporary(self):
         """Checks to see if we are created as temporary object by
         portal factory.
         """
         parent = aq_parent(aq_inner(self))
         return shasattr(parent, 'meta_type') and \
-               parent.meta_type == 'TempFolder'
+            parent.meta_type == 'TempFolder'
 
     security.declareProtected(permissions.View, 'getFolderWhenPortalFactory')
+
     def getFolderWhenPortalFactory(self):
         """Returns the folder where this object was created temporarily.
         """
@@ -1077,6 +1128,7 @@ def getFolderWhenPortalFactory(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'addSubObjects')
+
     def addSubObjects(self, objects, REQUEST=None):
         """Adds a dictionary of objects to a volatile attribute.
         """
@@ -1089,6 +1141,7 @@ def addSubObjects(self, objects, REQUEST=None):
                 storage[name] = aq_base(obj)
 
     security.declareProtected(permissions.View, 'getSubObject')
+
     def getSubObject(self, name, REQUEST, RESPONSE=None):
         """Gets a dictionary of objects from a volatile attribute.
         """
diff --git a/Products/Archetypes/BaseUnit.py b/Products/Archetypes/BaseUnit.py
index a2b0de0..2ca1568 100644
--- a/Products/Archetypes/BaseUnit.py
+++ b/Products/Archetypes/BaseUnit.py
@@ -42,7 +42,7 @@ def __setstate__(self, dict):
         File.__setstate__(self, dict)
 
     def update(self, data, instance, **kw):
-        #Convert from str to unicode as needed
+        # Convert from str to unicode as needed
         mimetype = kw.get('mimetype', None)
         filename = kw.get('filename', None)
         encoding = kw.get('encoding', None)
@@ -87,10 +87,10 @@ def transform(self, instance, mt, **kwargs):
         if not orig:
             return None
 
-        #on ZODB Transaction commit there is by specification
-        #no acquisition context. If it is not present, take
-        #the untransformed getRaw, this is necessary for
-        #being used with APE
+        # on ZODB Transaction commit there is by specification
+        # no acquisition context. If it is not present, take
+        # the untransformed getRaw, this is necessary for
+        # being used with APE
         # Also don't break if transform was applied with a stale instance
         # from the catalog while rebuilding the catalog
         if not getattr(instance, 'aq_parent', None) is not None:
@@ -106,9 +106,9 @@ def transform(self, instance, mt, **kwargs):
             _data = data.getData()
             instance.addSubObjects(data.getSubObjects())
             portal_encoding = kwargs.get('encoding', None) or \
-                              self.portalEncoding(instance)
+                self.portalEncoding(instance)
             encoding = data.getMetadata().get("encoding") or encoding \
-                       or portal_encoding
+                or portal_encoding
             if portal_encoding != encoding:
                 _data = unicode(_data, encoding).encode(portal_encoding)
             return _data
@@ -118,7 +118,7 @@ def transform(self, instance, mt, **kwargs):
         # FIXME: is this really the behaviour we want ?
         if not self.isBinary():
             portal_encoding = kwargs.get('encoding', None) or \
-                              self.portalEncoding(instance)
+                self.portalEncoding(instance)
             if portal_encoding != encoding:
                 orig = self.getRaw(portal_encoding)
             return orig
@@ -223,8 +223,9 @@ def _cacheExpire(self):
         if shasattr(self, '_v_transform_cache'):
             delattr(self, '_v_transform_cache')
 
-    ### index_html
+    # index_html
     security.declareProtected(permissions.View, "index_html")
+
     def index_html(self, REQUEST, RESPONSE):
         """download method"""
         filename = self.getFilename()
@@ -237,8 +238,9 @@ def index_html(self, REQUEST, RESPONSE):
         RESPONSE.write(self.getRaw(encoding=self.original_encoding))
         return ''
 
-    ### webDAV me this, webDAV me that
+    # webDAV me this, webDAV me that
     security.declareProtected(permissions.ModifyPortalContent, 'PUT')
+
     def PUT(self, REQUEST, RESPONSE):
         """Handle HTTP PUT requests"""
         self.dav__init(REQUEST, RESPONSE)
diff --git a/Products/Archetypes/CatalogMultiplex.py b/Products/Archetypes/CatalogMultiplex.py
index 6d5dbef..04ab251 100644
--- a/Products/Archetypes/CatalogMultiplex.py
+++ b/Products/Archetypes/CatalogMultiplex.py
@@ -30,6 +30,7 @@ def getCatalogs(self):
             return at.getCatalogsByType(self.meta_type)
 
     security.declareProtected(ModifyPortalContent, 'indexObject')
+
     def indexObject(self):
         if isFactoryContained(self):
             return
@@ -39,6 +40,7 @@ def indexObject(self):
             c.catalog_object(self, url)
 
     security.declareProtected(ModifyPortalContent, 'unindexObject')
+
     def unindexObject(self):
         if isFactoryContained(self):
             return
@@ -49,6 +51,7 @@ def unindexObject(self):
                 c.uncatalog_object(url)
 
     security.declareProtected(ModifyPortalContent, 'reindexObjectSecurity')
+
     def reindexObjectSecurity(self, skip_self=False):
         """update security information in all registered catalogs.
         """
@@ -59,7 +62,7 @@ def reindexObjectSecurity(self, skip_self=False):
             return
 
         catalogs = [c for c in at.getCatalogsByType(self.meta_type)
-                               if ICatalogTool.providedBy(c)]
+                    if ICatalogTool.providedBy(c)]
         path = self.__url()
 
         for catalog in catalogs:
@@ -80,9 +83,10 @@ def reindexObjectSecurity(self, skip_self=False):
 
                 # Recatalog with the same catalog uid.
                 catalog.reindexObject(ob, idxs=self._cmf_security_indexes,
-                                        update_metadata=0, uid=brain_path)
+                                      update_metadata=0, uid=brain_path)
 
     security.declareProtected(ModifyPortalContent, 'reindexObject')
+
     def reindexObject(self, idxs=None):
         """update indexes of this object in all registered catalogs.
 
diff --git a/Products/Archetypes/ClassGen.py b/Products/Archetypes/ClassGen.py
index ac16f9f..f61a66c 100644
--- a/Products/Archetypes/ClassGen.py
+++ b/Products/Archetypes/ClassGen.py
@@ -25,7 +25,7 @@
           'attr': 'mutator',
           'security': 'write_permission',
           },
-    }
+}
 
 
 class GeneratorError(Exception):
@@ -33,9 +33,10 @@ class GeneratorError(Exception):
 
 
 class Generator:
+
     def computeMethodName(self, field, mode):
         if mode not in _modes.keys():
-            raise TypeError("Unsupported Mode %s in field: %s (%s)" % \
+            raise TypeError("Unsupported Mode %s in field: %s (%s)" %
                             (field.getName(), mode))
 
         prefix = _modes[mode]['prefix']
@@ -92,11 +93,12 @@ def generatedMutator(self, value, **kw):
                           methodName,
                           method.func_defaults,
                           method.func_closure,
-                         )
+                          )
         setattr(klass, methodName, method)
 
 
 class ClassGenerator:
+
     def updateSecurity(self, klass, field, mode, methodName):
         security = _getSecurity(klass)
 
@@ -131,10 +133,10 @@ def generateClass(self, klass):
         # before we start, set meta_type, portal_type based on class
         # name, but only if they are not set yet
         if (not getattr(klass, 'meta_type', None) or
-            'meta_type' not in klass.__dict__.keys()):
+                'meta_type' not in klass.__dict__.keys()):
             klass.meta_type = klass.__name__
         if (not getattr(klass, 'portal_type', None) or
-            'portal_type' not in klass.__dict__.keys()):
+                'portal_type' not in klass.__dict__.keys()):
             klass.portal_type = klass.__name__
         klass.archetype_name = getattr(klass, 'archetype_name',
                                        self.generateName(klass))
@@ -149,7 +151,8 @@ def generateMethods(self, klass, fields):
             assert not 'm' in field.mode, 'm is an implicit mode'
 
             # Make sure we want to muck with the class for this field
-            if "c" not in field.generateMode: continue
+            if "c" not in field.generateMode:
+                continue
             type = getattr(klass, 'schema')
             for mode in field.mode:  # (r, w)
                 self.handle_mode(klass, generator, type, field, mode)
@@ -167,14 +170,14 @@ def handle_mode(self, klass, generator, type, field, mode):
 
         # Avoid name space conflicts
         if not hasattr(klass, methodName) \
-               or getattr(klass, methodName) is AT_GENERATE_METHOD:
+                or getattr(klass, methodName) is AT_GENERATE_METHOD:
             if methodName in type:
                 raise GeneratorError("There is a conflict "
                                      "between the Field(%s) and the attempt "
                                      "to generate a method of the same name on "
                                      "class %s" % (
-                    methodName,
-                    klass.__name__))
+                                         methodName,
+                                         klass.__name__))
 
             # Make a method for this klass/field/mode
             generator.makeMethod(klass, field, mode, methodName)
diff --git a/Products/Archetypes/ExtensibleMetadata.py b/Products/Archetypes/ExtensibleMetadata.py
index 70f15ce..748cf8d 100644
--- a/Products/Archetypes/ExtensibleMetadata.py
+++ b/Products/Archetypes/ExtensibleMetadata.py
@@ -66,8 +66,8 @@ class ExtensibleMetadata(Persistence.Persistent):
                         default=u'Allow comments'),
                 description=_(u'help_allow_comments',
                               default=u'If selected, users can add comments '
-                                       'to this item.')
-                ),
+                              'to this item.')
+            ),
         ),
         LinesField(
             'subject',
@@ -78,8 +78,8 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_tags', default=u'Tags'),
                 description=_(u'help_tags',
                               default=u'Tags are commonly used for ad-hoc '
-                                       'organization of content.'),
-                ),
+                              'organization of content.'),
+            ),
         ),
         TextField(
             'description',
@@ -92,7 +92,7 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_description', default=u'Description'),
                 description=_(u'help_description',
                               default=u'Used in item listings and search results.'),
-                ),
+            ),
         ),
         # Location, also known as Coverage in the DC metadata standard, but we
         # keep the term Location here for historical reasons.
@@ -104,7 +104,7 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_location', default=u'Location'),
                 description=_(u'help_location_dc',
                               default=u'The geographical location associated with the item, if applicable.'),
-                ),
+            ),
         ),
         LinesField(
             'contributors',
@@ -113,10 +113,10 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_contributors', u'Contributors'),
                 description=_(u'help_contributors',
                               default=u"The names of people that have contributed "
-                                       "to this item. Each contributor should "
-                                       "be on a separate line."),
+                              "to this item. Each contributor should "
+                              "be on a separate line."),
                 vocabulary="plone.app.vocabularies.Users"
-                ),
+            ),
         ),
         LinesField(
             'creators',
@@ -125,10 +125,10 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_creators', u'Creators'),
                 description=_(u'help_creators',
                               default=u"Persons responsible for creating the content of "
-                                       "this item. Please enter a list of user names, one "
-                                       "per line. The principal creator should come first."),
+                              "this item. Please enter a list of user names, one "
+                              "per line. The principal creator should come first."),
                 vocabulary="plone.app.vocabularies.Users"
-                ),
+            ),
         ),
         DateTimeField(
             'effectiveDate',
@@ -138,8 +138,8 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_effective_date', u'Publishing Date'),
                 description=_(u'help_effective_date',
                               default=u"The date when the item will be published. If no "
-                                       "date is selected the item will be published immediately."),
-                ),
+                              "date is selected the item will be published immediately."),
+            ),
         ),
         DateTimeField(
             'expirationDate',
@@ -149,9 +149,9 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_expiration_date', u'Expiration Date'),
                 description=_(u'help_expiration_date',
                               default=u"The date when the item expires. This will automatically "
-                                       "make the item invisible for others at the given date. "
-                                       "If no date is chosen, it will never expire."),
-                ),
+                              "make the item invisible for others at the given date. "
+                              "If no date is chosen, it will never expire."),
+            ),
         ),
         StringField(
             'language',
@@ -161,7 +161,7 @@ class ExtensibleMetadata(Persistence.Persistent):
             vocabulary='languages',
             widget=SelectWidget(
                 label=_(u'label_language', default=u'Language'),
-                ),
+            ),
         ),
         TextField(
             'rights',
@@ -172,27 +172,27 @@ class ExtensibleMetadata(Persistence.Persistent):
                 label=_(u'label_copyrights', default=u'Rights'),
                 description=_(u'help_copyrights',
                               default=u'Copyright statement or other rights information on this item.'),
-                )),
-        )) + Schema((
+            )),
+    )) + Schema((
         # XXX change this to MetadataSchema in AT 1.4
         # Currently we want to stay backward compatible without migration
         # between beta versions so creation and modification date are using the
         # standard schema which leads to AttributeStorage
         DateTimeField(
-            'creation_date',
-            accessor='created',
-            mutator='setCreationDate',
-            default_method=DateTime,
-            languageIndependent=True,
-            isMetadata=True,
-            schemata='metadata',
-            generateMode='mVc',
-            widget=DatetimeWidget(
-                label=_(u'label_creation_date', default=u'Creation Date'),
-                description=_(u'help_creation_date',
-                              default=u'Date this object was created'),
-                visible={'edit': 'invisible', 'view': 'invisible'}),
-        ),
+                'creation_date',
+                accessor='created',
+                mutator='setCreationDate',
+                default_method=DateTime,
+                languageIndependent=True,
+                isMetadata=True,
+                schemata='metadata',
+                generateMode='mVc',
+                widget=DatetimeWidget(
+                    label=_(u'label_creation_date', default=u'Creation Date'),
+                    description=_(u'help_creation_date',
+                                  default=u'Date this object was created'),
+                    visible={'edit': 'invisible', 'view': 'invisible'}),
+                ),
         DateTimeField(
             'modification_date',
             accessor='modified',
@@ -203,18 +203,19 @@ class ExtensibleMetadata(Persistence.Persistent):
             schemata='metadata',
             generateMode='mVc',
             widget=DatetimeWidget(
-                label=_(u'label_modification_date',
-                        default=u'Modification Date'),
-                description=_(u'help_modification_date',
-                              default=u'Date this content was modified last'),
-                visible={'edit': 'invisible', 'view': 'invisible'}),
+                    label=_(u'label_modification_date',
+                            default=u'Modification Date'),
+                    description=_(u'help_modification_date',
+                                  default=u'Date this content was modified last'),
+                    visible={'edit': 'invisible', 'view': 'invisible'}),
         ),
-        ))
+    ))
 
     def __init__(self):
         pass
 
     security.declarePrivate('defaultLanguage')
+
     def defaultLanguage(self):
         """Retrieve the default language"""
         tool = getToolByName(self, 'portal_languages', None)
@@ -223,6 +224,7 @@ def defaultLanguage(self):
         return config.LANGUAGE_DEFAULT
 
     security.declarePrivate('defaultRights')
+
     def defaultRights(self):
         """Retrieve the default rights"""
         mdtool = getToolByName(self, 'portal_metadata', None)
@@ -239,6 +241,7 @@ def defaultRights(self):
         return ''
 
     security.declareProtected(permissions.View, 'isDiscussable')
+
     def isDiscussable(self, encoding=None):
         log_deprecated(
             "The isDiscussable method from the ExtensibleMetadata in "
@@ -254,6 +257,7 @@ def isDiscussable(self, encoding=None):
         return dtool.isDiscussionAllowedFor(self)
 
     security.declareProtected(permissions.View, 'editIsDiscussable')
+
     def editIsDiscussable(self, encoding=None):
         log_deprecated(
             "The editIsDiscussable method from the ExtensibleMetadata in "
@@ -272,6 +276,7 @@ def editIsDiscussable(self, encoding=None):
         return default
 
     security.declareProtected(permissions.View, 'rawIsDiscussable')
+
     def rawIsDiscussable(self):
         log_deprecated(
             "The rawIsDiscussable method from the ExtensibleMetadata in "
@@ -289,6 +294,7 @@ def rawIsDiscussable(self):
         return result
 
     security.declareProtected(permissions.View, 'defaultIsDiscussable')
+
     def defaultIsDiscussable(self):
         log_deprecated(
             "The defaultIsDiscussable method from the ExtensibleMetadata in "
@@ -308,12 +314,14 @@ def defaultIsDiscussable(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'allowDiscussion')
+
     def allowDiscussion(self, allowDiscussion=None, **kw):
         pass
 
     # Vocabulary methods ######################################################
 
     security.declareProtected(permissions.View, 'languages')
+
     def languages(self):
         """Vocabulary method for the language field
         """
@@ -348,6 +356,7 @@ def languages(self):
     #  DublinCore interface query methods #####################################
 
     security.declareProtected(permissions.View, 'CreationDate')
+
     def CreationDate(self, zone=None):
         """ Dublin Core element - date resource created.
         """
@@ -358,6 +367,7 @@ def CreationDate(self, zone=None):
         return creation is None and 'Unknown' or creation.toZone(zone).ISO8601()
 
     security.declareProtected(permissions.View, 'EffectiveDate')
+
     def EffectiveDate(self, zone=None):
         """ Dublin Core element - date resource becomes effective.
         """
@@ -375,6 +385,7 @@ def _effective_date(self):
     effective_date = ComputedAttribute(_effective_date, 1)
 
     security.declareProtected(permissions.View, 'ExpirationDate')
+
     def ExpirationDate(self, zone=None):
         """Dublin Core element - date resource expires.
         """
@@ -392,6 +403,7 @@ def _expiration_date(self):
     expiration_date = ComputedAttribute(_expiration_date, 1)
 
     security.declareProtected(permissions.View, 'Date')
+
     def Date(self, zone=None):
         """
         Dublin Core element - default date
@@ -407,6 +419,7 @@ def Date(self, zone=None):
                 effective.toZone(zone).ISO8601())
 
     security.declareProtected(permissions.View, 'Format')
+
     def Format(self):
         """cmf/backward compat
         Dublin Core element - resource format
@@ -416,6 +429,7 @@ def Format(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setFormat')
+
     def setFormat(self, value):
         """cmf/backward compat: ignore setFormat"""
         self.setContentType(value)
@@ -427,6 +441,7 @@ def Identifer(self):
     #  DublinCore utility methods #############################################
 
     security.declareProtected(permissions.View, 'contentEffective')
+
     def contentEffective(self, date):
         """Is the date within the resource's effective range?
         """
@@ -437,6 +452,7 @@ def contentEffective(self, date):
         return pastEffective and beforeExpiration
 
     security.declareProtected(permissions.View, 'contentExpired')
+
     def contentExpired(self, date=None):
         """ Is the date after resource's expiration """
         if not date:
@@ -449,6 +465,7 @@ def contentExpired(self, date=None):
     #  CatalogableDublinCore methods ##########################################
 
     security.declareProtected(permissions.View, 'created')
+
     def created(self):
         """Dublin Core element - date resource created,
         returned as DateTime.
@@ -458,6 +475,7 @@ def created(self):
         return created is None and FLOOR_DATE or created
 
     security.declareProtected(permissions.View, 'modified')
+
     def modified(self):
         """Dublin Core element - date resource last modified,
         returned as DateTime.
@@ -467,6 +485,7 @@ def modified(self):
         return modified
 
     security.declareProtected(permissions.View, 'effective')
+
     def effective(self):
         """Dublin Core element - date resource becomes effective,
         returned as DateTime.
@@ -475,6 +494,7 @@ def effective(self):
         return effective is None and FLOOR_DATE or effective
 
     security.declareProtected(permissions.View, 'expires')
+
     def expires(self):
         """Dublin Core element - date resource expires,
         returned as DateTime.
@@ -504,6 +524,7 @@ def expires(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'notifyModified')
+
     def notifyModified(self):
         """
         Take appropriate action after the resource has been modified.
@@ -515,6 +536,7 @@ def notifyModified(self):
 
     security.declareProtected(permissions.ManagePortal,
                               'setModificationDate')
+
     def setModificationDate(self, modification_date=None):
         """Set the date when the resource was last modified.
         When called without an argument, sets the date to now.
@@ -527,6 +549,7 @@ def setModificationDate(self, modification_date=None):
 
     security.declareProtected(permissions.ManagePortal,
                               'setCreationDate')
+
     def setCreationDate(self, creation_date=None):
         """Set the date when the resource was created.
         When called without an argument, sets the date to now.
@@ -538,6 +561,7 @@ def setCreationDate(self, creation_date=None):
         self.getField('creation_date').set(self, created)
 
     security.declarePrivate('_datify')
+
     def _datify(self, date):
         """Try to convert something into a DateTime instance or None
         """
@@ -553,6 +577,7 @@ def _datify(self, date):
     #  DublinCore interface query methods
     #
     security.declareProtected(permissions.View, 'Publisher')
+
     def Publisher(self):
         """Dublin Core element - resource publisher
         """
@@ -560,6 +585,7 @@ def Publisher(self):
         return 'No publisher'
 
     security.declareProtected(permissions.View, 'ModificationDate')
+
     def ModificationDate(self, zone=None):
         """ Dublin Core element - date resource last modified.
         """
@@ -570,6 +596,7 @@ def ModificationDate(self, zone=None):
                 or modified.toZone(zone).ISO8601())
 
     security.declareProtected(permissions.View, 'Type')
+
     def Type(self):
         """Dublin Core element - Object type"""
         if hasattr(aq_base(self), 'getTypeInfo'):
@@ -579,6 +606,7 @@ def Type(self):
         return self.meta_type
 
     security.declareProtected(permissions.View, 'Identifier')
+
     def Identifier(self):
         """Dublin Core element - Object ID"""
         # XXX: fixme using 'portal_metadata' (we need to prepend the
@@ -586,12 +614,14 @@ def Identifier(self):
         return self.absolute_url()
 
     security.declareProtected(permissions.View, 'listContributors')
+
     def listContributors(self):
         """Dublin Core element - Contributors"""
         return self.Contributors()
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'addCreator')
+
     def addCreator(self, creator=None):
         """ Add creator to Dublin Core creators.
         """
@@ -607,6 +637,7 @@ def addCreator(self, creator=None):
             self.setCreators(curr_creators + (creator, ))
 
     security.declareProtected(permissions.View, 'listCreators')
+
     def listCreators(self):
         """ List Dublin Core Creator elements - resource authors.
         """
@@ -623,6 +654,7 @@ def listCreators(self):
         return creators.get(self)
 
     security.declareProtected(permissions.View, 'Creator')
+
     def Creator(self):
         """ Dublin Core Creator element - resource author.
         """
@@ -644,6 +676,7 @@ def content_type(self):
     #
 
     security.declareProtected(permissions.View, 'getMetadataHeaders')
+
     def getMetadataHeaders(self):
         """ Return RFC-822-style headers.
         """
@@ -669,6 +702,7 @@ def getMetadataHeaders(self):
     #
 
     security.declarePrivate('_editMetadata')
+
     def _editMetadata(self,
                       title=_marker,
                       subject=_marker,
@@ -706,7 +740,8 @@ def _editMetadata(self,
     manage_metadata = DTMLFile('zmi_metadata', config._www)
 
     security.declareProtected(permissions.ModifyPortalContent,
-                               'manage_editMetadata')
+                              'manage_editMetadata')
+
     def manage_editMetadata(self,
                             title,
                             subject,
@@ -724,13 +759,14 @@ def manage_editMetadata(self,
         self._editMetadata(title, subject, description, contributors,
                            effective_date, expiration_date,
                            format, language, rights,
-                          )
+                           )
         REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                + '/manage_metadata'
-                                + '?manage_tabs_message=Metadata+updated.')
+                                     + '/manage_metadata'
+                                     + '?manage_tabs_message=Metadata+updated.')
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'editMetadata')
+
     def editMetadata(self,
                      title='',
                      subject=(),
diff --git a/Products/Archetypes/Extensions/__init__.py b/Products/Archetypes/Extensions/__init__.py
index 081c759..f3d1be5 100644
--- a/Products/Archetypes/Extensions/__init__.py
+++ b/Products/Archetypes/Extensions/__init__.py
@@ -1 +1 @@
-#poof, you're a product
+# poof, you're a product
diff --git a/Products/Archetypes/Extensions/migrations.py b/Products/Archetypes/Extensions/migrations.py
index eb2cc60..942dba1 100644
--- a/Products/Archetypes/Extensions/migrations.py
+++ b/Products/Archetypes/Extensions/migrations.py
@@ -48,7 +48,7 @@ def fixArchetypesTool(portal, out):
     at = portal.archetype_tool
 
     if not hasattr(at, '_templates'):
-        #They come in pairs
+        # They come in pairs
         at._templates = PersistentMapping()
         at._registeredTemplates = PersistentMapping()
 
@@ -74,17 +74,20 @@ def migrateReferences(portal, out):
     if refs is not None:
         print >>out, 'migrating reference from Archetypes 1.2'
         count = 0
-        print >>out, "Old references are stored in %s, so migrating them to new style reference annotations.\n" % (TOOL_NAME)
+        print >>out, "Old references are stored in %s, so migrating them to new style reference annotations.\n" % (
+            TOOL_NAME)
         allbrains = uc()
         for brain in allbrains:
             sourceObj = brain.getObject()
             sourceUID = getattr(aq_base(sourceObj), olduididx, None)
-            if sourceUID is None: continue
+            if sourceUID is None:
+                continue
             # references migration starts
             for targetUID, relationship in refs.get(sourceUID, []):
                 # get target object
                 targetBrains = uc(**{olduididx: targetUID})
-                assert len(targetBrains) == 1, 'catalog query for OLD uid (%s) returned %d results instead of 1' % (targetUID, len(targetBrains))
+                assert len(targetBrains) == 1, 'catalog query for OLD uid (%s) returned %d results instead of 1' % (
+                    targetUID, len(targetBrains))
                 targetObj = targetBrains[0].getObject()
                 # fix empty relationship
                 if not relationship:
@@ -122,7 +125,8 @@ def migrateReferences(portal, out):
         rc.manage_catalogClear()
         for brain in refs:
             sourceObject = rc.lookupObject(brain.sourceUID)
-            if sourceObject is None: continue
+            if sourceObject is None:
+                continue
             targetObject = rc.lookupObject(brain.targetUID)
             if not targetObject:
                 print >>out, 'mirateReferences: Warning: no targetObject found for UID ', brain.targetUID
@@ -149,7 +153,7 @@ def migrateReferences(portal, out):
 
     print >>out, "Migrated References"
 
-    #Reindex for new UUIDs
+    # Reindex for new UUIDs
     uc.manage_reindexIndex()
     rc.manage_reindexIndex()
 
@@ -180,7 +184,8 @@ def migrateUIDs(portal, out):
 
         objUID = getattr(aq_base(obj), '_uid', None)
         if objUID is not None:  # continue  # not an old style AT?
-            setattr(obj, olduididx, objUID)  # this one can be part of the catalog
+            # this one can be part of the catalog
+            setattr(obj, olduididx, objUID)
             delattr(obj, '_uid')
             setattr(obj, UUID_ATTR, None)
         obj._register()  # creates a new UID
@@ -215,7 +220,8 @@ def removeOldUIDs(portal, out):
         # Get a uid for each thingie
         obj = brain.getObject()
         objUID = getattr(aq_base(obj), olduididx, None)
-        if objUID is None: continue  # not an old style AT
+        if objUID is None:
+            continue  # not an old style AT
         delattr(obj, olduididx)
         obj._updateCatalog(portal)
         count += 1
diff --git a/Products/Archetypes/Extensions/utils.py b/Products/Archetypes/Extensions/utils.py
index 8a330d8..c969f32 100644
--- a/Products/Archetypes/Extensions/utils.py
+++ b/Products/Archetypes/Extensions/utils.py
@@ -5,7 +5,7 @@
 from OFS.ObjectManager import BadRequestException
 from Products.CMFCore.ActionInformation import ActionInformation
 from Products.CMFCore.DirectoryView import addDirectoryViews, \
-     registerDirectory, manage_listAvailableDirectories
+    registerDirectory, manage_listAvailableDirectories
 from Products.CMFCore.utils import getToolByName, getPackageName
 from Products.Archetypes.config import REFERENCE_CATALOG
 from Products.Archetypes.ArchetypeTool import fixActionsForType
@@ -74,7 +74,8 @@ def install_subskin(self, out, globals=types_globals, product_skins_dir='skins')
         # directory view has already been added
         pass
 
-    fullProductSkinsPath = os.path.join(package_home(globals), product_skins_dir)
+    fullProductSkinsPath = os.path.join(
+        package_home(globals), product_skins_dir)
     files = os.listdir(fullProductSkinsPath)
     for productSkinName in files:
         # skip directories with a dot or special dirs
@@ -110,9 +111,9 @@ def install_types(self, out, types, package_name):
         # default FTI as default
         fti_meta_type = getattr(klass, '_at_fti_meta_type', None)
         if not fti_meta_type or fti_meta_type == 'simple item':
-            ## rr: explicitly catching 'simple item' because
-            ## CMF 2.0 removed the meta_type from the basic TIs :-(
-            ## seems to me, 'manage_addTypeInformation' is just broken
+            # rr: explicitly catching 'simple item' because
+            # CMF 2.0 removed the meta_type from the basic TIs :-(
+            # seems to me, 'manage_addTypeInformation' is just broken
             fti_meta_type = 'Factory-based Type Information'
         try:
             typesTool.manage_addTypeInformation(fti_meta_type,
@@ -121,9 +122,10 @@ def install_types(self, out, types, package_name):
         except ValueError:
             print "failed to add '%s'" % klass.portal_type
             print "fti_meta_type = %s" % fti_meta_type
-        ## rr: from CMF-2.0 onward typeinfo_name from the call above
-        ## is ignored and we have to do some more work
-        t, fti = _getFtiAndDataFor(typesTool, klass.portal_type, klass.__name__, package_name)
+        # rr: from CMF-2.0 onward typeinfo_name from the call above
+        # is ignored and we have to do some more work
+        t, fti = _getFtiAndDataFor(
+            typesTool, klass.portal_type, klass.__name__, package_name)
         if t and fti:
             t.manage_changeProperties(**fti)
             if 'aliases' in fti:
@@ -154,8 +156,8 @@ def _getFtiAndDataFor(tool, typename, klassname, package_name):
 def install_actions(self, out, types):
     typesTool = getToolByName(self, 'portal_types')
     for portal_type in types:
-        ## rr: XXX TODO somehow the following doesn't do anymore what
-        ## it used to do :-(
+        # rr: XXX TODO somehow the following doesn't do anymore what
+        # it used to do :-(
         fixActionsForType(portal_type, typesTool)
 
 
@@ -209,7 +211,8 @@ def install_indexes(self, out, types):
                 # to list its schema-columns to not conflict with archetypes
                 # schema
                 hasNewWayMethod = hasattr(catalog, 'zcschema')
-                hasOldWayMethod = not isArchetype and hasattr(catalog, 'schema')
+                hasOldWayMethod = not isArchetype and hasattr(
+                    catalog, 'schema')
                 notInNewWayResults = hasNewWayMethod and accessor not in catalog.zcschema()
                 notInOldWayResults = hasOldWayMethod and accessor not in catalog.schema()
                 if use_column and (notInNewWayResults or notInOldWayResults):
@@ -223,7 +226,7 @@ def install_indexes(self, out, types):
                 # add index
 
                 # if you want to add a schema field without an index
-                #if not parts[0]:
+                # if not parts[0]:
                 #    continue
 
                 for itype in parts:
@@ -237,7 +240,7 @@ def install_indexes(self, out, types):
                     else:
                         props = None
                     try:
-                        #Check for the index and add it if missing
+                        # Check for the index and add it if missing
                         catalog.addIndex(accessor, itype,
                                          extra=props)
                         catalog.manage_reindexIndex(ids=(accessor,))
@@ -294,6 +297,7 @@ def filterTypes(self, out, types, package_name):
 
     return filtered_types
 
+
 def setupEnvironment(self, out, types,
                      package_name,
                      globals=types_globals,
@@ -326,6 +330,7 @@ def setupEnvironment(self, out, types,
     install_indexes(self, out, ftypes)
     install_actions(self, out, ftypes)
 
+
 def doubleCheckDefaultTypeActions(self, ftypes):
     # rr: for some reason, AT's magic wrt adding the default type actions
     # stopped working when moving to CMF-2.0
@@ -351,7 +356,7 @@ def doubleCheckDefaultTypeActions(self, ftypes):
             fti._actions = tuple(prepend + actions)
 
 
-## The master installer
+# The master installer
 def installTypes(self, out, types, package_name,
                  globals=types_globals, product_skins_dir='skins',
                  require_dependencies=True, refresh_references=False,
@@ -363,12 +368,13 @@ def installTypes(self, out, types, package_name,
     setupEnvironment(self, out, types, package_name,
                      globals, product_skins_dir, require_dependencies,
                      install_deps)
-    ## rr: sometimes the default actions are still missing
+    # rr: sometimes the default actions are still missing
     doubleCheckDefaultTypeActions(self, ftypes)
     if refresh_references and ftypes:
         rc = getToolByName(self, REFERENCE_CATALOG)
         rc.manage_rebuildCatalog()
 
+
 def refreshReferenceCatalog(self, out, types=None, package_name=None, ftypes=None):
     """refresh the reference catalog to reindex objects after reinstalling a
     AT based product.
diff --git a/Products/Archetypes/Field.py b/Products/Archetypes/Field.py
index 9f7139f..d4b764f 100644
--- a/Products/Archetypes/Field.py
+++ b/Products/Archetypes/Field.py
@@ -205,7 +205,7 @@ class Field(DefaultLayerContainer):
                                          # are the accessor and edit accessor
         'schemata': 'default',
         'languageIndependent': False,
-        }
+    }
 
     def __init__(self, name=None, **kwargs):
         """
@@ -230,6 +230,7 @@ def __init__(self, name=None, **kwargs):
         self.registerLayer('storage', self.storage)
 
     security.declarePrivate('copy')
+
     def copy(self, name=None):
         """
         Return a copy of field instance, consisting of field name and
@@ -283,9 +284,11 @@ def _validationLayer(self):
             if len(self.validators):
                 # got a non empty list or string - create a chain
                 try:
-                    validators = ValidationChain(chainname, validators=self.validators)
+                    validators = ValidationChain(
+                        chainname, validators=self.validators)
                 except (UnknowValidatorError, FalseValidatorError), msg:
-                    log("WARNING: Disabling validation for %s: %s" % (self.getName(), msg))
+                    log("WARNING: Disabling validation for %s: %s" %
+                        (self.getName(), msg))
                     validators = ()
             else:
                 validators = ()
@@ -301,13 +304,14 @@ def _validationLayer(self):
                 # is not isEmpty
                 if not validators[0][0].name.startswith('isEmpty'):
                     validators.insertSufficient('isEmptyNoError')
-                    #validators.insertSufficient('isEmpty')
+                    # validators.insertSufficient('isEmpty')
             else:
                 validators.insertSufficient('isEmpty')
 
         self.validators = validators
 
     security.declarePublic('validate')
+
     def validate(self, value, instance, errors=None, **kwargs):
         """
         Validate passed-in value using all field validators.
@@ -350,6 +354,7 @@ def validate(self, value, instance, errors=None, **kwargs):
         return None
 
     security.declarePrivate('validate_validators')
+
     def validate_validators(self, value, instance, errors, **kwargs):
         """
         """
@@ -363,6 +368,7 @@ def validate_validators(self, value, instance, errors, **kwargs):
             return result
 
     security.declarePrivate('validate_required')
+
     def validate_required(self, instance, value, errors):
         if not value:
             request = aq_get(instance, 'REQUEST')
@@ -379,6 +385,7 @@ def validate_required(self, instance, value, errors):
         return None
 
     security.declarePrivate('validate_vocabulary')
+
     def validate_vocabulary(self, instance, value, errors):
         """Make sure value is inside the allowed values
         for a given vocabulary"""
@@ -416,8 +423,8 @@ def validate_vocabulary(self, instance, value, errors):
             if isinstance(val, Message):
                 val = translate(val, context=request)
             error = _(u'error_vocabulary',
-                default=u'Values ${val} are not allowed for vocabulary of element ${label}.',
-                mapping={'val': unicode(badvalues), 'label': label})
+                      default=u'Values ${val} are not allowed for vocabulary of element ${label}.',
+                      mapping={'val': unicode(badvalues), 'label': label})
             error = translate(error, context=request)
             errors[self.getName()] = error
         return error
@@ -440,7 +447,7 @@ def validate_content_types(self, instance, value, errors):
         elif isinstance(value, StringType):
             body = value
         elif isinstance(value, BlobWrapper) or isinstance(value, File):
-            # get data if value is an instance of BlobWrapper or 
+            # get data if value is an instance of BlobWrapper or
             # is of OFS.Image.File based
             body = value.data
 
@@ -482,6 +489,7 @@ def validate_content_types(self, instance, value, errors):
         return None
 
     security.declarePublic('Vocabulary')
+
     def Vocabulary(self, content_instance=None):
         """
         Returns a DisplayList.
@@ -531,11 +539,13 @@ def Vocabulary(self, content_instance=None):
         if not isinstance(value, DisplayList) and not value:
             factory_name = getattr(self, 'vocabulary_factory', None)
             if factory_name is not None:
-                factory = component.getUtility(schema.interfaces.IVocabularyFactory, name=factory_name)
+                factory = component.getUtility(
+                    schema.interfaces.IVocabularyFactory, name=factory_name)
                 factory_context = content_instance
                 if factory_context is None:
                     factory_context = self
-                data = [(t.value, t.title or t.token) for t in factory(factory_context)]
+                data = [(t.value, t.title or t.token)
+                        for t in factory(factory_context)]
                 if data and not isinstance(data[0][0], basestring):
                     value = IntDisplayList(data)
                 else:
@@ -552,7 +562,7 @@ def Vocabulary(self, content_instance=None):
                           'field': self}
                     value = mapply(method, *args, **kw)
             elif content_instance is not None and \
-                 IVocabulary.providedBy(value):
+                    IVocabulary.providedBy(value):
                 # Dynamic vocabulary provided by a class that
                 # implements IVocabulary
                 value = value.getDisplayList(content_instance)
@@ -578,13 +588,14 @@ def Vocabulary(self, content_instance=None):
         if content_instance:
             # Translate vocabulary
             i18n_domain = (getattr(self, 'i18n_domain', None) or
-                          getattr(self.widget, 'i18n_domain', None))
+                           getattr(self.widget, 'i18n_domain', None))
 
             return Vocabulary(value, content_instance, i18n_domain)
 
         return value
 
     security.declarePublic('checkPermission')
+
     def checkPermission(self, mode, instance):
         """
         Check whether the security context allows the given permission on
@@ -604,10 +615,11 @@ def checkPermission(self, mode, instance):
         return getSecurityManager().checkPermission(perm, instance)
 
     security.declarePublic('writeable')
+
     def writeable(self, instance, debug=False):
         if 'w' not in self.mode:
             if debug:
-                log("Tried to update %s:%s but field is not writeable." % \
+                log("Tried to update %s:%s but field is not writeable." %
                     (instance.portal_type, self.getName()))
             return False
 
@@ -627,6 +639,7 @@ def writeable(self, instance, debug=False):
         return True
 
     security.declarePublic('checkExternalEditor')
+
     def checkExternalEditor(self, instance):
         """ Checks if the user may edit this field and if
         external editor is enabled on this instance """
@@ -635,27 +648,31 @@ def checkExternalEditor(self, instance):
         sp = getattr(pp, 'site_properties', None)
         if sp is not None:
             if getattr(sp, 'ext_editor', None) \
-                   and self.checkPermission(mode='edit', instance=instance):
+                    and self.checkPermission(mode='edit', instance=instance):
                 return True
         return None
 
     security.declarePublic('getWidgetName')
+
     def getWidgetName(self):
         """Return the widget name that is configured for this field as
         a string"""
         return self.widget.getName()
 
     security.declarePublic('getName')
+
     def getName(self):
         """Return the name of this field as a string"""
         return self.__name__
 
     security.declarePublic('getType')
+
     def getType(self):
         """Return the type of this field as a string"""
         return className(self)
 
     security.declarePublic('getDefault')
+
     def getDefault(self, instance):
         """Return the default value to be used for initializing this
         field"""
@@ -671,13 +688,15 @@ def getDefault(self, instance):
                                  ' nor a callable' % (self.getName(),
                                                       instance.__class__))
         if not self.default:
-            default_adapter = component.queryAdapter(instance, IFieldDefaultProvider, name=self.__name__)
+            default_adapter = component.queryAdapter(
+                instance, IFieldDefaultProvider, name=self.__name__)
             if default_adapter is not None:
                 return default_adapter()
 
         return self.default
 
     security.declarePublic('getAccessor')
+
     def getAccessor(self, instance):
         """Return the accessor method for getting data out of this
         field"""
@@ -686,6 +705,7 @@ def getAccessor(self, instance):
         return None
 
     security.declarePublic('getEditAccessor')
+
     def getEditAccessor(self, instance):
         """Return the accessor method for getting raw data out of this
         field e.g.: for editing
@@ -695,6 +715,7 @@ def getEditAccessor(self, instance):
         return None
 
     security.declarePublic('getMutator')
+
     def getMutator(self, instance):
         """Return the mutator method used for changing the value
         of this field"""
@@ -703,12 +724,14 @@ def getMutator(self, instance):
         return None
 
     security.declarePublic('getIndexAccessor')
+
     def getIndexAccessor(self, instance):
         """Return the index accessor, i.e. the getter for an indexable
         value."""
         return getattr(instance, self.getIndexAccessorName())
 
     security.declarePublic('getIndexAccessorName')
+
     def getIndexAccessorName(self):
         """Return the index accessor's name defined by the
         'index_method' field property."""
@@ -728,6 +751,7 @@ def getIndexAccessorName(self):
             return self.index_method
 
     security.declarePrivate('toString')
+
     def toString(self):
         """Utility method for converting a Field to a string for the
         purpose of comparing fields.  This comparison is used for
@@ -748,12 +772,14 @@ def toString(self):
         return s
 
     security.declarePublic('isLanguageIndependent')
+
     def isLanguageIndependent(self, instance):
         """Get the language independed flag for i18n content
         """
         return self.languageIndependent
 
     security.declarePublic('getI18nDomain')
+
     def getI18nDomain(self):
         """ returns the internationalization domain for translation """
         pass
@@ -773,11 +799,12 @@ class ObjectField(Field):
     _properties.update({
         'type': 'object',
         'default_content_type': 'application/octet-stream',
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         __traceback_info__ = (self.getName(), instance, kwargs)
         try:
@@ -803,6 +830,7 @@ def get(self, instance, **kwargs):
             return default
 
     security.declarePrivate('getRaw')
+
     def getRaw(self, instance, **kwargs):
         if self.accessor is not None:
             accessor = self.getAccessor(instance)
@@ -811,28 +839,33 @@ def getRaw(self, instance, **kwargs):
             accessor = None
         kwargs.update({'field': self,
                        'encoding': kwargs.get('encoding', None),
-                     })
+                       })
         if accessor is None:
             args = [instance]
             return mapply(self.get, *args, **kwargs)
         return mapply(accessor, **kwargs)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         kwargs['field'] = self
-        kwargs['mimetype'] = kwargs.get('mimetype', getattr(self, 'default_content_type', 'application/octet-stream'))
+        kwargs['mimetype'] = kwargs.get('mimetype', getattr(
+            self, 'default_content_type', 'application/octet-stream'))
         # Remove acquisition wrappers
         value = aq_base(value)
         __traceback_info__ = (self.getName(), instance, value, kwargs)
-        self.getStorage(instance).set(self.getName(), instance, value, **kwargs)
+        self.getStorage(instance).set(
+            self.getName(), instance, value, **kwargs)
 
     security.declarePrivate('unset')
+
     def unset(self, instance, **kwargs):
         #kwargs['field'] = self
         __traceback_info__ = (self.getName(), instance, kwargs)
         self.getStorage(instance).unset(self.getName(), instance, **kwargs)
 
     security.declarePrivate('setStorage')
+
     def setStorage(self, instance, storage):
         if not IStorage.providedBy(storage):
             raise ObjectFieldException, "Not a valid Storage method"
@@ -845,27 +878,32 @@ def setStorage(self, instance, storage):
         self.set(instance, value)
 
     security.declarePrivate('getStorage')
+
     def getStorage(self, instance=None):
         return self.storage
 
     security.declarePublic('getStorageName')
+
     def getStorageName(self, instance=None):
         """Return the storage name that is configured for this field
         as a string"""
         return self.getStorage(instance).getName()
 
     security.declarePublic('getStorageType')
+
     def getStorageType(self, instance=None):
         """Return the type of the storage of this field as a string"""
         return className(self.getStorage(instance))
 
     security.declarePrivate('setContentType')
+
     def setContentType(self, instance, value):
         """Set mimetype in the base unit.
         """
         pass
 
     security.declarePublic('getContentType')
+
     def getContentType(self, instance, fromBaseUnit=True):
         """Return the mime type of object if known or can be guessed;
         otherwise, return default_content_type value or fallback to
@@ -900,6 +938,7 @@ def getContentType(self, instance, fromBaseUnit=True):
         return mimetype
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
 
@@ -924,13 +963,14 @@ class StringField(ObjectField):
         'type': 'string',
         'default': '',
         'default_content_type': 'text/plain',
-        })
+    })
 
     implements(IStringField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         value = ObjectField.get(self, instance, **kwargs)
         if getattr(self, 'raw', False):
@@ -938,12 +978,14 @@ def get(self, instance, **kwargs):
         return encode(value, instance, **kwargs)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         kwargs['field'] = self
         # Remove acquisition wrappers
         if not getattr(self, 'raw', False):
             value = decode(aq_base(value), instance, **kwargs)
-        self.getStorage(instance).set(self.getName(), instance, value, **kwargs)
+        self.getStorage(instance).set(
+            self.getName(), instance, value, **kwargs)
 
 
 class FileField(ObjectField):
@@ -960,11 +1002,12 @@ class FileField(ObjectField):
         'widget': FileWidget,
         'content_class': File,
         'default_content_type': 'application/octet-stream',
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('setContentType')
+
     def setContentType(self, instance, value):
         """Set mimetype in the base unit.
         """
@@ -978,6 +1021,7 @@ def setContentType(self, instance, value):
             self.set(instance, file)
 
     security.declarePublic('getContentType')
+
     def getContentType(self, instance, fromBaseUnit=True):
         file = self.get(instance)
         return getattr(file, 'content_type', self.default_content_type)
@@ -1047,7 +1091,8 @@ def _process_input(self, value, file=None, default=None, mimetype=None,
             else:
                 mimetype = getattr(file, 'content_type', None)
                 if mimetype is None:
-                    mimetype, enc = guess_content_type(filename, body, mimetype)
+                    mimetype, enc = guess_content_type(
+                        filename, body, mimetype)
         # mimetype, if coming from request can be like:
         # text/plain; charset='utf-8'
         mimetype = str(mimetype).split(';')[0].strip()
@@ -1086,17 +1131,19 @@ def _make_file(self, id, title='', file='', instance=None):
         return self.content_class(id, title, file)
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         value = ObjectField.get(self, instance, **kwargs)
         if value and not isinstance(value, self.content_class):
             value = self._wrapValue(instance, value)
         if (shasattr(value, '__of__', acquire=True)
-            and not kwargs.get('unwrapped', False)):
+                and not kwargs.get('unwrapped', False)):
             return value.__of__(instance)
         else:
             return value
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         """
         Assign input value to object. If mimetype is not specified,
@@ -1179,6 +1226,7 @@ def _wrapValue(self, instance, value, **kwargs):
         return obj
 
     security.declarePrivate('getBaseUnit')
+
     def getBaseUnit(self, instance, full=False):
         """Return the value of the field wrapped in a base unit object
         """
@@ -1203,6 +1251,7 @@ def getBaseUnit(self, instance, full=False):
         return bu
 
     security.declarePrivate('getFilename')
+
     def getFilename(self, instance, fromBaseUnit=True):
         """Get file name of underlaying file object
         """
@@ -1223,6 +1272,7 @@ def getFilename(self, instance, fromBaseUnit=True):
         return filename
 
     security.declarePrivate('setFilename')
+
     def setFilename(self, instance, filename):
         """Set file name in the base unit.
         """
@@ -1231,11 +1281,13 @@ def setFilename(self, instance, filename):
         self.set(instance, bu)
 
     security.declarePrivate('validate_required')
+
     def validate_required(self, instance, value, errors):
         value = getattr(value, 'get_size', lambda: value and str(value))()
         return ObjectField.validate_required(self, instance, value, errors)
 
     security.declareProtected(permissions.View, 'download')
+
     def download(self, instance, REQUEST=None, RESPONSE=None, no_output=False):
         """Kicks download.
 
@@ -1262,6 +1314,7 @@ def download(self, instance, REQUEST=None, RESPONSE=None, no_output=False):
         return file.index_html(REQUEST, RESPONSE)
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
         """
@@ -1272,6 +1325,7 @@ def get_size(self, instance):
         return len(str(file))
 
     security.declarePublic('getIndexAccessor')
+
     def getIndexAccessor(self, instance):
         name = self.getIndexAccessorName()
         if name in (self.edit_accessor, self.accessor):
@@ -1280,6 +1334,7 @@ def getIndexAccessor(self, instance):
             return ObjectField.getIndexAccessor(self, instance)
 
     security.declarePrivate('getIndexable')
+
     def getIndexable(self, instance):
         # XXX Naive implementation that loads all data contents into
         # memory.  To have this not happening set your field to not
@@ -1301,7 +1356,7 @@ def getIndexable(self, instance):
                 str(f),
                 mimetype=orig_mt,
                 filename=self.getFilename(instance, 0),
-                )
+            )
         except (ConflictError, KeyboardInterrupt):
             raise
         except Exception, e:
@@ -1326,17 +1381,19 @@ class TextField(FileField):
         'allowable_content_types': None,
         'primary': False,
         'content_class': BaseUnit,
-        })
+    })
 
     implements(ITextField)
 
     security = ClassSecurityInfo()
 
     security.declarePublic('defaultView')
+
     def defaultView(self):
         return self.default_output_type
 
     security.declarePrivate('setContentType')
+
     def setContentType(self, instance, value):
         """Set mimetype in the base unit.
         """
@@ -1351,6 +1408,7 @@ def setContentType(self, instance, value):
     getContentType = ObjectField.getContentType.im_func
 
     security.declarePublic('getAllowedContentTypes')
+
     def getAllowedContentTypes(self, instance):
         """ returns the list of allowed content types for this field.
             If the fields schema doesn't define any, the site's default
@@ -1448,6 +1506,7 @@ def _process_input(self, value, file=None, default=None,
         return file, str(file.getContentType()), file.getFilename()
 
     security.declarePrivate('getRaw')
+
     def getRaw(self, instance, raw=False, **kwargs):
         """
         If raw, return the base unit object, else return encoded raw data
@@ -1461,6 +1520,7 @@ def getRaw(self, instance, raw=False, **kwargs):
         return mapply(value.getRaw, *args, **kw)
 
     security.declarePrivate('get')
+
     def get(self, instance, mimetype=None, raw=False, **kwargs):
         """ If raw, return the base unit object, else return value of
         object transformed into requested mime type.
@@ -1509,12 +1569,14 @@ def get(self, instance, mimetype=None, raw=False, **kwargs):
         return data or ''
 
     security.declarePrivate('getBaseUnit')
+
     def getBaseUnit(self, instance, full=False):
         """Return the value of the field wrapped in a base unit object
         """
         return self.get(instance, raw=True)
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
         """
@@ -1528,13 +1590,14 @@ class DateTimeField(ObjectField):
     _properties.update({
         'type': 'datetime',
         'widget': CalendarWidget,
-        })
+    })
 
     implements(IDateTimeField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('validate_required')
+
     def validate_required(self, instance, value, errors):
         try:
             DateTime(value)
@@ -1547,6 +1610,7 @@ def validate_required(self, instance, value, errors):
         return ObjectField.validate_required(self, instance, result, errors)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         """
         Check if value is an actual date/time value. If not, attempt
@@ -1578,13 +1642,14 @@ class LinesField(ObjectField):
         'type': 'lines',
         'default': (),
         'widget': LinesWidget,
-        })
+    })
 
     implements(ILinesField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         """
         If passed-in value is a string, split at line breaks and
@@ -1601,6 +1666,7 @@ def set(self, instance, value, **kwargs):
         ObjectField.set(self, instance, value, **kwargs)
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         value = ObjectField.get(self, instance, **kwargs) or ()
         data = [encode(v, instance, **kwargs) for v in value]
@@ -1610,10 +1676,12 @@ def get(self, instance, **kwargs):
             return data
 
     security.declarePrivate('getRaw')
+
     def getRaw(self, instance, **kwargs):
         return self.get(instance, **kwargs)
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
         """
@@ -1632,13 +1700,14 @@ class IntegerField(ObjectField):
         'size': '10',
         'widget': IntegerWidget,
         'default': None,
-        })
+    })
 
     implements(IIntegerField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('validate_required')
+
     def validate_required(self, instance, value, errors):
         try:
             int(value)
@@ -1649,6 +1718,7 @@ def validate_required(self, instance, value, errors):
         return ObjectField.validate_required(self, instance, result, errors)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         if value == '':
             value = None
@@ -1666,13 +1736,14 @@ class FloatField(ObjectField):
     _properties.update({
         'type': 'float',
         'default': None
-        })
+    })
 
     implements(IFloatField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('validate_required')
+
     def validate_required(self, instance, value, errors):
         try:
             float(value)
@@ -1683,6 +1754,7 @@ def validate_required(self, instance, value, errors):
         return ObjectField.validate_required(self, instance, result, errors)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         """Convert passed-in value to a float. If failure, set value to
         None."""
@@ -1717,7 +1789,7 @@ class FixedPointField(ObjectField):
         'default': None,
         'widget': DecimalWidget,
         'validators': ('isDecimal'),
-        })
+    })
 
     implements(IFixedPointField)
 
@@ -1809,11 +1881,13 @@ def _to_tuple(self, instance, value):
         return value
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         value = self._to_tuple(instance, value)
         ObjectField.set(self, instance, value, **kwargs)
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         template = '%%s%%d.%%0%dd' % self.precision
         value = ObjectField.get(self, instance, **kwargs)
@@ -1862,7 +1936,7 @@ class ReferenceField(ObjectField):
         'referencesSortable': False,
         'callStorageOnSet': False,
         'index_method': '_at_edit_accessor',
-        })
+    })
 
     implements(IReferenceField)
 
@@ -1871,6 +1945,7 @@ class ReferenceField(ObjectField):
     referencesSortable = False
 
     security.declarePrivate('get')
+
     def get(self, instance, aslist=False, **kwargs):
         """get() returns the list of objects referenced under the relationship
         """
@@ -1903,6 +1978,7 @@ def get(self, instance, aslist=False, **kwargs):
         return [rd[uid] for uid in order if uid in rd.keys()]
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         """Mutator.
 
@@ -1971,9 +2047,9 @@ def set(self, instance, value, **kwargs):
             value = value,
         elif not self.multiValued and len(value) > 1:
             raise ValueError, \
-                  "Multiple values given for single valued field %r" % self
+                "Multiple values given for single valued field %r" % self
 
-        #convert objects to uids if necessary
+        # convert objects to uids if necessary
         uids = []
         for v in value:
             if isinstance(v, basestring):
@@ -2002,15 +2078,17 @@ def set(self, instance, value, **kwargs):
             if not hasattr(aq_base(instance), 'at_ordered_refs'):
                 instance.at_ordered_refs = {}
 
-            instance.at_ordered_refs[self.relationship] = tuple(filter(None, uids))
+            instance.at_ordered_refs[
+                self.relationship] = tuple(filter(None, uids))
 
         if self.callStorageOnSet:
-            #if this option is set the reference fields's values get written
-            #to the storage even if the reference field never use the storage
-            #e.g. if i want to store the reference UIDs into an SQL field
+            # if this option is set the reference fields's values get written
+            # to the storage even if the reference field never use the storage
+            # e.g. if i want to store the reference UIDs into an SQL field
             ObjectField.set(self, instance, self.getRaw(instance), **kwargs)
 
     security.declarePrivate('getRaw')
+
     def getRaw(self, instance, aslist=False, **kwargs):
         """Return the list of UIDs referenced under this fields
         relationship
@@ -2035,6 +2113,7 @@ def getRaw(self, instance, aslist=False, **kwargs):
         return [r for r in order if r in res]
 
     security.declarePublic('Vocabulary')
+
     def Vocabulary(self, content_instance=None):
         """Use vocabulary property if it's been defined."""
         if self.vocabulary or getattr(self, 'vocabulary_factory', None):
@@ -2088,7 +2167,7 @@ def _Vocabulary(self, content_instance):
 
         abs_paths = {}
         abs_path = lambda b, p=portal_base: '%s/%s' % (p, b.getPath())
-        [abs_paths.update({abs_path(b):b}) for b in brains]
+        [abs_paths.update({abs_path(b): b}) for b in brains]
 
         pc_brains = pc(path=abs_paths.keys(), **skw)
 
@@ -2114,9 +2193,9 @@ def _Vocabulary(self, content_instance):
                 if uid is None:
                     # the brain doesn't have an uid because the catalog has a
                     # staled object. THAT IS BAD!
-                    raise ReferenceException("Brain for the object at %s "\
-                        "doesn't have an UID assigned with. Please update your"\
-                        " reference catalog!" % b_path)
+                    raise ReferenceException("Brain for the object at %s "
+                                             "doesn't have an UID assigned with. Please update your"
+                                             " reference catalog!" % b_path)
                 pairs.append((uid, label(b)))
 
         if not self.required and not self.multiValued:
@@ -2128,6 +2207,7 @@ def _Vocabulary(self, content_instance):
         return DisplayList(pairs)
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
         """
@@ -2143,22 +2223,25 @@ class ComputedField(Field):
         'widget': ComputedWidget,
         'mode': 'r',
         'storage': ReadOnlyStorage(),
-        })
+    })
 
     implements(IComputedField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('set')
+
     def set(self, *ignored, **kwargs):
         pass
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         """Return the computed value."""
         return eval(self.expression, {'context': instance, 'here': instance})
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data.
 
@@ -2175,13 +2258,14 @@ class BooleanField(ObjectField):
         'default': None,
         'vocabulary': (('True', 'Yes', 'yes'), ('False', 'No', 'no')),
         'widget': BooleanWidget,
-        })
+    })
 
     implements(IBooleanField)
 
     security = ClassSecurityInfo()
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         value = super(BooleanField, self).get(instance, **kwargs)
         if value is None:
@@ -2189,6 +2273,7 @@ def get(self, instance, **kwargs):
         return bool(value)
 
     security.declarePrivate('getRaw')
+
     def getRaw(self, instance, **kwargs):
         value = super(BooleanField, self).getRaw(instance, **kwargs)
         if value is None:
@@ -2196,6 +2281,7 @@ def getRaw(self, instance, **kwargs):
         return bool(value)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         """If value is not defined or equal to 0, set field to false;
         otherwise, set to true."""
@@ -2207,6 +2293,7 @@ def set(self, instance, value, **kwargs):
         ObjectField.set(self, instance, value, **kwargs)
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
         """
@@ -2226,15 +2313,15 @@ class CMFObjectField(ObjectField):
         'widget': FileWidget,
         'storage': ObjectManagedStorage(),
         'workflowable': True,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     def _process_input(self, value, default=None, **kwargs):
         __traceback_info__ = (value, type(value))
         if not isinstance(value, basestring):
-            if ((isinstance(value, FileUpload) and value.filename != '') or \
-                (isinstance(value, FileType) and value.name != '')):
+            if ((isinstance(value, FileUpload) and value.filename != '') or
+                    (isinstance(value, FileType) and value.name != '')):
                 # OK, its a file, is it empty?
                 value.seek(-1, 2)
                 size = value.tell()
@@ -2254,6 +2341,7 @@ def _process_input(self, value, default=None, **kwargs):
         raise ObjectFieldException('Value is not File or String')
 
     security.declarePrivate('get')
+
     def get(self, instance, **kwargs):
         try:
             return self.getStorage(instance).get(self.getName(), instance, **kwargs)
@@ -2268,7 +2356,7 @@ def get(self, instance, **kwargs):
             if info is None:
                 raise ValueError('No such content type: %s' % type_name)
             if not shasattr(info, 'constructInstance'):
-                raise ValueError('Cannot construct content type: %s' % \
+                raise ValueError('Cannot construct content type: %s' %
                                  type_name)
             args = [instance, self.getName()]
             for k in ['field', 'schema']:
@@ -2276,9 +2364,10 @@ def get(self, instance, **kwargs):
             return mapply(info.constructInstance, *args, **kwargs)
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         obj = self.get(instance, **kwargs)
-        value = self._process_input(value, default=self.getDefault(instance), \
+        value = self._process_input(value, default=self.getDefault(instance),
                                     **kwargs)
         if value is None or value == '':
             # do nothing
@@ -2397,7 +2486,7 @@ class ImageField(FileField):
         'widget': ImageWidget,
         'storage': AttributeStorage(),
         'content_class': Image,
-        })
+    })
 
     implements(IImageField)
 
@@ -2406,6 +2495,7 @@ class ImageField(FileField):
     default_view = "view"
 
     security.declarePrivate('set')
+
     def set(self, instance, value, **kwargs):
         # Do we have to delete the image?
         if value == "DELETE_IMAGE" or value is None:
@@ -2444,6 +2534,7 @@ def set(self, instance, value, **kwargs):
         self.createScales(instance, value=data)
 
     security.declareProtected(permissions.View, 'getAvailableSizes')
+
     def getAvailableSizes(self, instance):
         """Get sizes
 
@@ -2464,9 +2555,12 @@ def getAvailableSizes(self, instance):
         elif sizes is None:
             return {}
         else:
-            raise TypeError, 'Wrong self.sizes has wrong type: %s' % type(sizes)
+            raise TypeError, 'Wrong self.sizes has wrong type: %s' % type(
+                sizes)
+
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'rescaleOriginal')
 
-    security.declareProtected(permissions.ModifyPortalContent, 'rescaleOriginal')
     def rescaleOriginal(self, value, **kwargs):
         """rescales the original image and sets the data
 
@@ -2486,7 +2580,7 @@ def rescaleOriginal(self, value, **kwargs):
             w = h = 0
             if self.max_size:
                 if value.width > self.max_size[0] or \
-                       value.height > self.max_size[1]:
+                        value.height > self.max_size[1]:
                     factor = min(float(self.max_size[0]) / float(value.width),
                                  float(self.max_size[1]) / float(value.height))
                     w = int(factor * value.width)
@@ -2503,6 +2597,7 @@ def rescaleOriginal(self, value, **kwargs):
         return data
 
     security.declarePrivate('createOriginal')
+
     def createOriginal(self, instance, value, **kwargs):
         """create the original image (save it)
         """
@@ -2514,6 +2609,7 @@ def createOriginal(self, instance, value, **kwargs):
         ObjectField.set(self, instance, image, **kwargs)
 
     security.declarePrivate('removeScales')
+
     def removeScales(self, instance, **kwargs):
         """Remove the scaled image
         """
@@ -2533,6 +2629,7 @@ def removeScales(self, instance, **kwargs):
                     pass
 
     security.declareProtected(permissions.ModifyPortalContent, 'createScales')
+
     def createScales(self, instance, value=_marker):
         """creates the scales and save them
         """
@@ -2591,9 +2688,10 @@ def _make_image(self, id, title='', file='', content_type='', instance=None):
         return self.content_class(id, title, file, content_type)
 
     security.declarePrivate('scale')
+
     def scale(self, data, w, h, default_format='PNG'):
         """ scale image (with material from ImageTag_Hotfix)"""
-        #make sure we have valid int's
+        # make sure we have valid int's
         size = int(w), int(h)
 
         original_file = StringIO(data)
@@ -2643,6 +2741,7 @@ def scale(self, data, w, h, default_format='PNG'):
         return thumbnail_file, target_format.lower()
 
     security.declareProtected(permissions.View, 'getSize')
+
     def getSize(self, instance, scale=None):
         """get size of scale or original
         """
@@ -2652,6 +2751,7 @@ def getSize(self, instance, scale=None):
         return img.width, img.height
 
     security.declareProtected(permissions.View, 'getScale')
+
     def getScale(self, instance, scale=None, **kwargs):
         """Get scale by name or original
         """
@@ -2670,6 +2770,7 @@ def getScale(self, instance, scale=None, **kwargs):
                 return image
 
     security.declareProtected(permissions.View, 'getScaleName')
+
     def getScaleName(self, scale=None):
         """Get the full name of the attribute for the scale
         """
@@ -2679,6 +2780,7 @@ def getScaleName(self, scale=None):
             return ''
 
     security.declarePublic('get_size')
+
     def get_size(self, instance):
         """Get size of the stored data used for get_size in BaseObject
 
@@ -2700,6 +2802,7 @@ def get_size(self, instance):
         return size
 
     security.declareProtected(permissions.View, 'tag')
+
     def tag(self, instance, scale=None, height=None, width=None, alt=None,
             css_class=None, title=None, **kwargs):
         """Create a tag including scale
@@ -2732,7 +2835,7 @@ def tag(self, instance, scale=None, height=None, width=None, alt=None,
                   'title': escape(title, quote=True),
                   'height': height,
                   'width': width,
-                 }
+                  }
 
         result = '<img src="%(src)s" alt="%(alt)s" title="%(title)s" '\
                  'height="%(height)s" width="%(width)s"' % values
diff --git a/Products/Archetypes/Layer.py b/Products/Archetypes/Layer.py
index f8994a4..7e16552 100644
--- a/Products/Archetypes/Layer.py
+++ b/Products/Archetypes/Layer.py
@@ -4,6 +4,7 @@
 from AccessControl import ClassSecurityInfo
 from zope.interface import implements
 
+
 class DefaultLayerContainer(Base):
     implements(ILayerContainer)
 
@@ -13,18 +14,22 @@ def __init__(self):
         self._layers = {}
 
     security.declarePrivate('registerLayer')
+
     def registerLayer(self, name, object):
         self._layers[name] = object
 
     security.declarePrivate('registeredLayers')
+
     def registeredLayers(self):
         return self._layers.items()
 
     security.declarePrivate('hasLayer')
+
     def hasLayer(self, name):
         return name in self._layers.keys()
 
     security.declarePrivate('getLayerImpl')
+
     def getLayerImpl(self, name):
         return self._layers[name]
 
diff --git a/Products/Archetypes/Marshall.py b/Products/Archetypes/Marshall.py
index 3d27242..d6e3733 100644
--- a/Products/Archetypes/Marshall.py
+++ b/Products/Archetypes/Marshall.py
@@ -40,7 +40,7 @@ def isheader(self, line):
         i = line.find(':')
         if i > 0:
             return line[:i]
-            #return line[:i].lower()
+            # return line[:i].lower()
         else:
             return None
 
@@ -56,7 +56,6 @@ def getheader(self, name, default=None):
 
 
 def formatRFC822Headers(headers):
-
     """ Convert the key-value pairs in 'headers' to valid RFC822-style
         headers, including adding leading whitespace to elements which
         contain newlines in order to preserve continuation-line semantics.
@@ -256,7 +255,8 @@ def marshall(self, instance, **kwargs):
             if p and hasattr(p, 'getContentType'):
                 content_type = p.getContentType(instance) or 'text/plain'
             else:
-                content_type = body and guess_content_type(body) or 'text/plain'
+                content_type = body and guess_content_type(
+                    body) or 'text/plain'
 
         headers = []
         fields = [f for f in instance.Schema().fields()
diff --git a/Products/Archetypes/OrderedBaseFolder.py b/Products/Archetypes/OrderedBaseFolder.py
index f67a829..3bafc40 100644
--- a/Products/Archetypes/OrderedBaseFolder.py
+++ b/Products/Archetypes/OrderedBaseFolder.py
@@ -24,6 +24,7 @@ class OrderedContainer(OrderSupport):
     security = ClassSecurityInfo()
 
     security.declareProtected(permissions.ModifyPortalContent, 'moveObject')
+
     def moveObject(self, id, position):
         obj_idx = self.getObjectPosition(id)
         if obj_idx == position:
@@ -37,18 +38,21 @@ def moveObject(self, id, position):
         self._objects = tuple(metadata)
 
     security.declarePrivate('getCMFObjectsSubsetIds')
+
     def getIdsSubset(self, objs):
         """Get the ids of only cmf objects (used for moveObjectsByDelta)
         """
         ttool = getToolByName(self, 'portal_types')
         cmf_meta_types = [ti.Metatype() for ti in ttool.listTypeInfo()]
         return [obj['id'] for obj in objs
-                          if obj['meta_type'] in cmf_meta_types]
+                if obj['meta_type'] in cmf_meta_types]
 
     # BBB
     getCMFObjectsSubsetIds = getIdsSubset
 
-    security.declareProtected(permissions.ModifyPortalContent, 'getObjectPosition')
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'getObjectPosition')
+
     def getObjectPosition(self, id):
         try:
             pos = OrderSupport.getObjectPosition(self, id)
@@ -67,12 +71,14 @@ class OrderedBaseFolder(BaseFolder, OrderedContainer):
     security = ClassSecurityInfo()
 
     def __init__(self, oid, **kwargs):
-        #call skinned first cause baseobject will set new defaults on
-        #those attributes anyway
+        # call skinned first cause baseobject will set new defaults on
+        # those attributes anyway
         BaseFolder.__init__(self, oid, **kwargs)
         ExtensibleMetadata.__init__(self)
 
-    security.declareProtected(permissions.ModifyPortalContent, 'manage_renameObject')
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'manage_renameObject')
+
     def manage_renameObject(self, id, new_id, REQUEST=None):
         """ rename the object """
         objidx = self.getObjectPosition(id)
diff --git a/Products/Archetypes/ReferenceEngine.py b/Products/Archetypes/ReferenceEngine.py
index 71aac4a..3c6c600 100644
--- a/Products/Archetypes/ReferenceEngine.py
+++ b/Products/Archetypes/ReferenceEngine.py
@@ -43,12 +43,12 @@
 
 
 class Reference(Referenceable, SimpleItem):
-    ## Added base level support for referencing References
-    ## They respond to the UUID protocols, but are not
-    ## catalog aware. This means that you can't move/rename
-    ## reference objects and expect them to work, but you can't
-    ## do this anyway. However they should fine the correct
-    ## events when they are added/deleted, etc
+    # Added base level support for referencing References
+    # They respond to the UUID protocols, but are not
+    # catalog aware. This means that you can't move/rename
+    # reference objects and expect them to work, but you can't
+    # do this anyway. However they should fine the correct
+    # events when they are added/deleted, etc
 
     implements(IReference)
 
@@ -60,7 +60,7 @@ class Reference(Referenceable, SimpleItem):
 
     manage_options = ((
         {'label': 'View', 'action': 'manage_view'},
-        ) + SimpleItem.manage_options)
+    ) + SimpleItem.manage_options)
 
     security.declareProtected(permissions.ManagePortal,
                               'manage_view')
@@ -113,11 +113,11 @@ def Type(self):
     ###
     # Policy hooks, subclass away
     def addHook(self, tool, sourceObject=None, targetObject=None):
-        #to reject the reference being added raise a ReferenceException
+        # to reject the reference being added raise a ReferenceException
         pass
 
     def delHook(self, tool, sourceObject=None, targetObject=None):
-        #to reject the delete raise a ReferenceException
+        # to reject the delete raise a ReferenceException
         pass
 
     ###
@@ -211,7 +211,7 @@ def __init__(self, contentType):
         self.contentType = contentType
 
     def __call__(self, *args, **kw):
-        #simulates the constructor call to the reference class in addReference
+        # simulates the constructor call to the reference class in addReference
         res = ContentReference(*args, **kw)
         res.contentType = self.contentType
 
@@ -261,6 +261,7 @@ class ReferenceBaseCatalog(PluggableCatalog):
 class IndexableObjectWrapper(object):
     """Wwrapper for object indexing
     """
+
     def __init__(self, obj):
         self._obj = obj
 
@@ -296,7 +297,7 @@ def __init__(self, id, title='', vocab_id=None, container=None):
         self._catalog = ReferenceBaseCatalog()
 
     ###
-    ## Public API
+    # Public API
     def addReference(self, source, target, relationship=None,
                      referenceClass=None, updateReferences=True, **kwargs):
         sID, sobj = self._uidFor(source)
@@ -311,7 +312,7 @@ def addReference(self, source, target, relationship=None,
             objects = self._resolveBrains(
                 self._queryFor(sID, tID, relationship))
             if objects:
-                #we want to update the existing reference
+                # we want to update the existing reference
                 existing = objects[0]
                 if existing:
                     # We can't del off self, we now need to remove it
@@ -356,23 +357,25 @@ def deleteReferences(self, object, relationship=None):
             self._deleteReference(b)
 
     security.declarePrivate('getReferences')
+
     def getReferences(self, object, relationship=None, targetObject=None,
                       objects=True):
         # return a collection of reference objects
         return self._optimizedReferences(object, relationship=relationship,
-            targetObject=targetObject, objects=objects, attribute='sourceUID')
+                                         targetObject=targetObject, objects=objects, attribute='sourceUID')
 
     security.declarePrivate('getBackReferences')
+
     def getBackReferences(self, object, relationship=None, targetObject=None,
                           objects=True):
         # return a collection of reference objects
 
         # Back refs would be anything that target this object
         return self._optimizedReferences(object, relationship=relationship,
-            targetObject=targetObject, objects=objects, attribute='targetUID')
+                                         targetObject=targetObject, objects=objects, attribute='targetUID')
 
     def _optimizedReferences(self, object, relationship=None,
-        targetObject=None, objects=True, attribute='sourceUID'):
+                             targetObject=None, objects=True, attribute='sourceUID'):
 
         sID, sobj = self._uidFor(object)
         if targetObject:
@@ -479,19 +482,23 @@ def lookupObject(self, uuid, REQUEST=None):
             return obj
 
     #####
-    ## UID register/unregister
-    security.declareProtected(permissions.ModifyPortalContent, 'registerObject')
+    # UID register/unregister
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'registerObject')
+
     def registerObject(self, object):
         self._uidFor(object)
 
-    security.declareProtected(permissions.ModifyPortalContent, 'unregisterObject')
+    security.declareProtected(
+        permissions.ModifyPortalContent, 'unregisterObject')
+
     def unregisterObject(self, object):
         self.deleteReferences(object)
         uc = getToolByName(self, UID_CATALOG)
         uc.uncatalog_object(object._getURL())
 
     ######
-    ## Private/Internal
+    # Private/Internal
     def _objectByUUID(self, uuid):
         tool = getToolByName(self, UID_CATALOG)
         brains = tool(UID=uuid)
@@ -538,7 +545,7 @@ def _uidFor(self, obj):
         else:
             uuid = obj
             obj = None
-            #and we look up the object
+            # and we look up the object
             uid_catalog = getToolByName(self, UID_CATALOG)
             brains = uid_catalog(dict(UID=uuid))
             for brain in brains:
@@ -600,14 +607,15 @@ def _catalogReferences(self, root=None, **kw):
                               apply_func=self._catalogReferencesFor,
                               apply_path=path, **kw)
 
-    security.declareProtected(permissions.ManagePortal, 'manage_catalogFoundItems')
+    security.declareProtected(permissions.ManagePortal,
+                              'manage_catalogFoundItems')
+
     def manage_catalogFoundItems(self, REQUEST, RESPONSE, URL2, URL1,
                                  obj_metatypes=None,
                                  obj_ids=None, obj_searchterm=None,
                                  obj_expr=None, obj_mtime=None,
                                  obj_mspec=None, obj_roles=None,
                                  obj_permission=None):
-
         """ Find object according to search criteria and Catalog them
         """
 
@@ -632,9 +640,11 @@ def manage_catalogFoundItems(self, REQUEST, RESPONSE, URL2, URL1,
                          'Total time: %s\n'
                          'Total CPU time: %s'
                          % (`elapse`, `c_elapse`))
-            )
+        )
+
+    security.declareProtected(
+        permissions.ManagePortal, 'manage_rebuildCatalog')
 
-    security.declareProtected(permissions.ManagePortal, 'manage_rebuildCatalog')
     def manage_rebuildCatalog(self, REQUEST=None, RESPONSE=None):
         """
         """
@@ -662,12 +672,12 @@ def manage_rebuildCatalog(self, REQUEST=None, RESPONSE=None):
 
         if RESPONSE:
             RESPONSE.redirect(
-            REQUEST.URL1 +
-            '/manage_catalogView?manage_tabs_message=' +
-            urllib.quote('Catalog Rebuilded\n'
-                         'Total time: %s\n'
-                         'Total CPU time: %s'
-                         % (`elapse`, `c_elapse`))
+                REQUEST.URL1 +
+                '/manage_catalogView?manage_tabs_message=' +
+                urllib.quote('Catalog Rebuilded\n'
+                             'Total time: %s\n'
+                             'Total CPU time: %s'
+                             % (`elapse`, `c_elapse`))
             )
 
 InitializeClass(ReferenceCatalog)
diff --git a/Products/Archetypes/Referenceable.py b/Products/Archetypes/Referenceable.py
index b9e7c82..ed5d427 100644
--- a/Products/Archetypes/Referenceable.py
+++ b/Products/Archetypes/Referenceable.py
@@ -19,14 +19,14 @@
 from AccessControl import ClassSecurityInfo
 
 ####
-## In the case of:
-## - a copy:
-##   * we want to lose refs on the new object
-##   * we want to keep refs on the orig object
-## - a cut/paste
-##   * we want to keep refs
-## - a delete:
-##   * to lose refs
+# In the case of:
+# - a copy:
+# * we want to lose refs on the new object
+# * we want to keep refs on the orig object
+# - a cut/paste
+# * we want to keep refs
+# - a delete:
+# * to lose refs
 ####
 
 
@@ -94,14 +94,15 @@ def getBRefs(self, relationship=None, targetObject=None):
             return [self._optimizedGetObject(b.sourceUID) for b in brains]
         return []
 
-    #aliases
+    # aliases
     getReferences = getRefs
     getBackReferences = getBRefs
 
     def getReferenceImpl(self, relationship=None, targetObject=None):
         # get all the reference objects for this object
         tool = getToolByName(self, config.REFERENCE_CATALOG)
-        refs = tool.getReferences(self, relationship, targetObject=targetObject)
+        refs = tool.getReferences(
+            self, relationship, targetObject=targetObject)
         if refs:
             return refs
         return []
@@ -109,7 +110,8 @@ def getReferenceImpl(self, relationship=None, targetObject=None):
     def getBackReferenceImpl(self, relationship=None, targetObject=None):
         # get all the back reference objects for this object
         tool = getToolByName(self, config.REFERENCE_CATALOG)
-        refs = tool.getBackReferences(self, relationship, targetObject=targetObject)
+        refs = tool.getBackReferences(
+            self, relationship, targetObject=targetObject)
         if refs:
             return refs
         return []
@@ -214,7 +216,7 @@ def _updateCatalog(self, container):
         self._catalogUID(container, uc=uc)
         self._catalogRefs(container, uc=uc, rc=rc)
 
-    ## OFS Hooks
+    # OFS Hooks
     def manage_afterAdd(self, item, container):
         # Get a UID
         # (Called when the object is created or moved.)
@@ -263,7 +265,7 @@ def manage_afterClone(self, item):
         uuid = IUUID(self, None)
 
         if (uuid is None or
-            len(uc(UID=uuid))):
+                len(uc(UID=uuid))):
             setattr(self, config.UUID_ATTR, None)
 
         self._register()
@@ -283,11 +285,11 @@ def manage_beforeDelete(self, item, container):
             references = rc.getReferences(self)
             back_references = rc.getBackReferences(self)
             try:
-                #First check the 'delete cascade' case
+                # First check the 'delete cascade' case
                 if references:
                     for ref in references:
                         ref.beforeSourceDeleteInformTarget()
-                #Then check the 'holding/ref count' case
+                # Then check the 'holding/ref count' case
                 if back_references:
                     for ref in back_references:
                         ref.beforeTargetDeleteInformSource()
@@ -304,7 +306,7 @@ def manage_beforeDelete(self, item, container):
         self._uncatalogUID(container)
         self._uncatalogRefs(container)
 
-    ## Catalog Helper methods
+    # Catalog Helper methods
     def _catalogUID(self, aq, uc=None):
         if not uc:
             uc = getToolByName(aq, config.UID_CATALOG)
diff --git a/Products/Archetypes/Registry.py b/Products/Archetypes/Registry.py
index a67f9be..ce2ea58 100644
--- a/Products/Archetypes/Registry.py
+++ b/Products/Archetypes/Registry.py
@@ -20,7 +20,7 @@ def __init__(self, allowed_class):
     def register(self, name, item):
         if not isinstance(item, self.__allowed_class):
             raise TypeError, "Invalid value for item: %r (should be %r)" % \
-                  (item, self.__allowed_class)
+                (item, self.__allowed_class)
         self.__registry[name] = item
 
     def unregister(self, name):
@@ -51,7 +51,8 @@ def __init__(self, klass, default_widget=None,
                  title='', description=''):
         self.id = className(klass)
         self.klass = klass
-        default_widget = default_widget or klass._properties.get('widget', None)
+        default_widget = default_widget or klass._properties.get(
+            'widget', None)
         if default_widget is None:
             raise ValueError, '%r Must have a default_widget' % klass
         if type(default_widget) not in [types.StringType, types.UnicodeType]:
@@ -170,6 +171,8 @@ def basetypes(self):
 
 fieldDescriptionRegistry = Registry(FieldDescription)
 availableFields = fieldDescriptionRegistry.items
+
+
 def registerField(klass, **kw):
     setSecurity(klass, defaultAccess='allow', objectPermission=None)
     field = FieldDescription(klass, **kw)
@@ -177,6 +180,8 @@ def registerField(klass, **kw):
 
 widgetDescriptionRegistry = Registry(WidgetDescription)
 availableWidgets = widgetDescriptionRegistry.items
+
+
 def registerWidget(klass, **kw):
     setSecurity(klass, defaultAccess='allow', objectPermission=None)
     widget = WidgetDescription(klass, **kw)
@@ -185,6 +190,8 @@ def registerWidget(klass, **kw):
 
 storageDescriptionRegistry = Registry(StorageDescription)
 availableStorages = storageDescriptionRegistry.items
+
+
 def registerStorage(klass, **kw):
     setSecurity(klass, defaultAccess=None, objectPermission=None)
     storage = StorageDescription(klass, **kw)
@@ -204,7 +211,7 @@ def items(self):
                                  module=t['module'],
                                  )
                  )
-                 for t in listTypes()]
+                for t in listTypes()]
 
     def keys(self):
         return [k for k, v in self.items()]
@@ -253,6 +260,8 @@ def values(self):
 
 validatorDescriptionRegistry = ValidatorRegistry()
 availableValidators = validatorDescriptionRegistry.items
+
+
 def registerValidator(item, name=''):
     name = name or item.name
     validatorDescriptionRegistry.register(name, item)
diff --git a/Products/Archetypes/Renderer.py b/Products/Archetypes/Renderer.py
index 4e938fd..b092c8a 100644
--- a/Products/Archetypes/Renderer.py
+++ b/Products/Archetypes/Renderer.py
@@ -28,7 +28,7 @@ def render(self, field_name, mode, widget, instance=None,
         del context
         return result
 
-    def setupContext(self, field_name, mode, widget, instance, field, \
+    def setupContext(self, field_name, mode, widget, instance, field,
                      accessor, **kwargs):
 
         # look for the context in the stack
diff --git a/Products/Archetypes/SQLMethod.py b/Products/Archetypes/SQLMethod.py
index 408b01d..a71694e 100644
--- a/Products/Archetypes/SQLMethod.py
+++ b/Products/Archetypes/SQLMethod.py
@@ -65,8 +65,8 @@ def edit(self, connection_id, arguments, template):
         context._v_query_cache = {}, Bucket()
 
     def advanced_edit(self, max_rows=1000, max_cache=100, cache_time=0,
-                        class_name='', class_file='',
-                        REQUEST=None):
+                      class_name='', class_file='',
+                      REQUEST=None):
         """Change advanced properties
 
         The arguments are:
@@ -157,7 +157,7 @@ def _get_dbc(self):
         except AttributeError:
             raise AttributeError, (
                 "The database connection <em>%s</em> cannot be found." % (
-                self.connection_id))
+                    self.connection_id))
 
         try:
             DB__ = dbc()
@@ -165,7 +165,7 @@ def _get_dbc(self):
             raise
         except:
             raise 'Database Error', (
-            '%s is not connected to a database' % self.id)
+                '%s is not connected to a database' % self.id)
 
         return dbc, DB__
 
@@ -215,7 +215,7 @@ def __call__(self, src__=0, test__=0, **kw):
         # We have two possible kw arguments:
         #   db_encoding:        The encoding used in the external database
         #   site_encoding:      The uncoding used for the site
-        #                       If not specified, we use sys.getdefaultencoding()
+        # If not specified, we use sys.getdefaultencoding()
         db_encoding = kw.get('db_encoding', None)
 
         site_encoding = kw.get('site_encoding', 'utf-8')
diff --git a/Products/Archetypes/SQLStorage.py b/Products/Archetypes/SQLStorage.py
index c971dfc..ae4e998 100644
--- a/Products/Archetypes/SQLStorage.py
+++ b/Products/Archetypes/SQLStorage.py
@@ -130,7 +130,7 @@ def _query(self, instance, query, args):
 
     def initializeInstance(self, instance, item=None, container=None):
         if (self.is_initialized(instance) or
-            getattr(instance, '_at_is_fake_instance', None)):
+                getattr(instance, '_at_is_fake_instance', None)):
             # duh, we don't need to be initialized twice
             return
         factory = getToolByName(instance, 'portal_factory')
@@ -138,7 +138,7 @@ def initializeInstance(self, instance, item=None, container=None):
             return
 
         fields = instance.Schema().fields()
-        fields = [f for f in fields if IObjectField.providedBy(f) \
+        fields = [f for f in fields if IObjectField.providedBy(f)
                   and f.getStorage().__class__ is self.__class__]
         columns = []
         args = {}
@@ -154,7 +154,7 @@ def initializeInstance(self, instance, item=None, container=None):
         args['PARENTUID'] = getattr(aq_base(parent), 'UID', lambda: None)()
         args['table'] = instance.portal_type
         args['UID'] = instance.UID()
-        #args['db_encoding']=kwargs.get('db_encoding',None)
+        # args['db_encoding']=kwargs.get('db_encoding',None)
         args['columns'] = ', ' + ', '.join(columns)
         if not self.table_exists(instance):
             self._query(instance, self.query_create, args)
@@ -220,7 +220,7 @@ def set(self, name, instance, value, **kwargs):
         args = {}
         args['table'] = instance.portal_type
         args['UID'] = instance.UID()
-        #args['db_encoding']=kwargs.get('db_encoding',None)
+        # args['db_encoding']=kwargs.get('db_encoding',None)
         field_name = '%s:%s' % (name, type)
         if default:
             if type == 'string':
@@ -235,14 +235,14 @@ def set(self, name, instance, value, **kwargs):
 
     def cleanupInstance(self, instance, item=None, container=None):
         if (self.is_cleaned(instance) or
-            getattr(instance, '_at_is_fake_instance', None)):
+                getattr(instance, '_at_is_fake_instance', None)):
             # duh, we don't need to be cleaned twice
             return
         # the object is being deleted. remove data from sql.  but
         # first, made a temporary copy of the field values in case we
         # are being moved
         fields = instance.Schema().fields()
-        fields = [f for f in fields if IObjectField.providedBy(f) \
+        fields = [f for f in fields if IObjectField.providedBy(f)
                   and f.getStorage().__class__ is self.__class__]
         temps = {}
         for f in fields:
@@ -254,7 +254,7 @@ def cleanupInstance(self, instance, item=None, container=None):
         args = {}
         args['table'] = instance.portal_type
         args['UID'] = instance.UID()
-        #args['db_encoding']=kwargs.get('db_encoding',None)
+        # args['db_encoding']=kwargs.get('db_encoding',None)
         method = SQLMethod(instance)
         method.edit(connection_id, ' '.join(args.keys()), self.query_delete)
         try:
@@ -398,7 +398,7 @@ class MySQLSQLStorage(BaseSQLStorage):
 
     def table_exists(self, instance):
         result = [r[0].lower() for r in
-                   self._query(instance, '''show tables''', {})]
+                  self._query(instance, '''show tables''', {})]
         return instance.portal_type.lower() in result
 
 
diff --git a/Products/Archetypes/SQLStorageConfig.py b/Products/Archetypes/SQLStorageConfig.py
index 86a52b4..eb164ce 100644
--- a/Products/Archetypes/SQLStorageConfig.py
+++ b/Products/Archetypes/SQLStorageConfig.py
@@ -37,8 +37,8 @@ class SQLStorageConfig (SimpleItem):
     _manage_selectConnections = DTMLFile('selectConnections', _www)
 
     security.declareProtected(ManagePortal, 'manage_selectConnections')
-    def manage_selectConnections(self, REQUEST, manage_tabs_message=None):
 
+    def manage_selectConnections(self, REQUEST, manage_tabs_message=None):
         """ Show a management screen for changing type to workflow connections.
         """
         cbt = self._conn_by_type
@@ -62,6 +62,7 @@ def manage_selectConnections(self, REQUEST, manage_tabs_message=None):
             manage_tabs_message=manage_tabs_message)
 
     security.declareProtected(ManagePortal, 'manage_changeConnections')
+
     def manage_changeConnections(self, default_conn, props=None, REQUEST=None):
         """ Changes which connectionss apply to objects of which type.
         """
@@ -82,12 +83,13 @@ def manage_changeConnections(self, default_conn, props=None, REQUEST=None):
         self.setDefaultConn(default_conn)
         if REQUEST is not None:
             return self.manage_selectConnections(REQUEST,
-                            manage_tabs_message='Changed.')
+                                                 manage_tabs_message='Changed.')
 
     #
     #   Administration methods
     #
     security.declareProtected(ManagePortal, 'setDefaultConn')
+
     def setDefaultConn(self, default_conn):
         """ Set the default conn for this tool
         """
@@ -99,17 +101,19 @@ def setDefaultConn(self, default_conn):
         self._default_conn = default_conn
 
     security.declarePrivate('getDefaultConnFor')
+
     def getDefaultConnFor(self, ob):
         """ Return the default conn, if applicable, for ob.
         """
 
         types_tool = getToolByName(self, 'portal_types', None)
         if (types_tool is not None
-            and types_tool.getTypeInfo(ob) is not None):
+                and types_tool.getTypeInfo(ob) is not None):
             return self._default_conn
         return None
 
     security.declareProtected(ManagePortal, 'getConfigurableTypes')
+
     def getConfigurableTypes(self):
         """ Get a list of types that can be configured for SQL Storage.
         """
@@ -124,6 +128,7 @@ def getConfigurableTypes(self):
         return c_types
 
     security.declareProtected(ManagePortal, 'getInstalledTypes')
+
     def getInstalledTypes(self):
         pt = getToolByName(self, 'portal_types', None)
         at = getToolByName(self, TOOL_NAME, None)
@@ -140,6 +145,7 @@ def getInstalledTypes(self):
         return installed_types
 
     security.declareProtected(ManagePortal, 'setConnForPortalTypes')
+
     def setConnForPortalTypes(self, type_names, conn):
         """ Set a conn for a specific portal type.
         """
@@ -162,6 +168,7 @@ def setConnForPortalTypes(self, type_names, conn):
                 cbt[id] = conn
 
     security.declarePrivate('getConnectionById')
+
     def getConnectionById(self, conn_id):
         """ Retrieve a given Connection.
         """
@@ -169,6 +176,7 @@ def getConnectionById(self, conn_id):
         return conn
 
     security.declarePrivate('getConnFor')
+
     def getConnFor(self, ob):
         """ Returns the conn that applies to the given object.
             If we get a string as the ob parameter, use it as
diff --git a/Products/Archetypes/Schema/Composite.py b/Products/Archetypes/Schema/Composite.py
index 3d90634..59651ae 100644
--- a/Products/Archetypes/Schema/Composite.py
+++ b/Products/Archetypes/Schema/Composite.py
@@ -2,9 +2,9 @@
 
 from Products.Archetypes.Schema import Schema
 from Products.Archetypes.interfaces.layer import ILayerContainer, \
-     ILayerRuntime
+    ILayerRuntime
 from Products.Archetypes.interfaces.schema import ICompositeSchema, \
-     IBindableSchema
+    IBindableSchema
 
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
@@ -49,6 +49,7 @@ def addSchemas(self, schemas):
             self._schemas.append(schema)
 
     security.declareProtected(View, 'getName')
+
     def getName(self):
         """Return Schemata name"""
         return '-'.join([s.getName() for s in self.getSchemas()])
@@ -60,6 +61,7 @@ def __add__(self, other):
         return c
 
     security.declareProtected(View, 'copy')
+
     def copy(self):
         """Return a deep copy"""
         c = CompositeSchema()
@@ -67,6 +69,7 @@ def copy(self):
         return c
 
     security.declareProtected(View, 'fields')
+
     def fields(self):
         """Return a list of fields"""
         result = []
@@ -75,6 +78,7 @@ def fields(self):
         return result
 
     security.declareProtected(View, 'widgets')
+
     def widgets(self):
         """Return a dictionary that contains a widget for
         each field, using the field name as key.
@@ -88,6 +92,7 @@ def widgets(self):
         return result
 
     security.declareProtected(View, 'filterFields')
+
     def filterFields(self, *predicates, **values):
         """Returns a subset of self.fields(), containing only fields that
         satisfy the given conditions.
@@ -118,6 +123,7 @@ def __setitem__(self, name, field):
         self.getSchemas()[0][name] = field
 
     security.declareProtected(ModifyPortalContent, 'addField')
+
     def addField(self, field):
         """Add a field (possibly overriding an existing one)"""
         name = field.getName()
@@ -152,6 +158,7 @@ def __getitem__(self, name):
         return self.getSchemas()[0][name]
 
     security.declareProtected(View, 'get')
+
     def get(self, name, default=None):
         """Get field by name, using a default value
         for missing
@@ -162,6 +169,7 @@ def get(self, name, default=None):
         return self.getSchemas()[0].get(name, default)
 
     security.declareProtected(View, 'has_key')
+
     def has_key(self, name):
         """Check if a field by the given name exists"""
         for s in self.getSchemas():
@@ -170,6 +178,7 @@ def has_key(self, name):
         return name in self.getSchemas()[0]
 
     security.declareProtected(View, 'keys')
+
     def keys(self, name):
         """Return the names of the fields present
         on this schema
@@ -180,6 +189,7 @@ def keys(self, name):
         return result
 
     security.declareProtected(View, 'searchable')
+
     def searchable(self):
         """Return a list containing names of all
         the fields present on this schema that are
@@ -191,6 +201,7 @@ def searchable(self):
         return result
 
     security.declareProtected(ModifyPortalContent, 'edit')
+
     def edit(self, instance, name, value):
         """Call the mutator by name on instance,
         setting the value.
@@ -199,6 +210,7 @@ def edit(self, instance, name, value):
             instance[name] = value
 
     security.declareProtected(ModifyPortalContent, 'setDefaults')
+
     def setDefaults(self, instance):
         """Only call during object initialization.
 
@@ -208,6 +220,7 @@ def setDefaults(self, instance):
             s.setDefaults(instance)
 
     security.declareProtected(ModifyPortalContent, 'updateAll')
+
     def updateAll(self, instance, **kwargs):
         """This method mutates fields in the given instance.
 
@@ -225,6 +238,7 @@ def updateAll(self, instance, **kwargs):
     allow = has_key
 
     security.declareProtected(ModifyPortalContent, 'validate')
+
     def validate(self, instance=None, REQUEST=None,
                  errors=None, data=None, metadata=None):
         """Validate the state of the entire object.
@@ -239,6 +253,7 @@ def validate(self, instance=None, REQUEST=None,
         return errors
 
     security.declarePrivate('toString')
+
     def toString(self):
         """Utility method for converting a Schema to a string for the
         purpose of comparing schema.
@@ -252,6 +267,7 @@ def toString(self):
         return result
 
     security.declarePrivate('signature')
+
     def signature(self):
         """Return an md5 sum of the the schema.
 
@@ -261,6 +277,7 @@ def signature(self):
         return md5(self.toString()).digest()
 
     security.declarePrivate('changeSchemataForField')
+
     def changeSchemataForField(self, fieldname, schemataname):
         """Change the schemata for a field """
         for s in self.getSchemas():
@@ -268,6 +285,7 @@ def changeSchemataForField(self, fieldname, schemataname):
                 s.changeSchemataForField(fieldname, schemataname)
 
     security.declarePrivate('replaceField')
+
     def replaceField(self, name, field):
         """Replace field under ``name`` with ``field``"""
         for s in self.getSchemas():
@@ -275,6 +293,7 @@ def replaceField(self, name, field):
                 s.replaceField(name, field)
 
     security.declarePrivate('initializeLayers')
+
     def initializeLayers(self, instance, item=None, container=None):
         """Layer initialization"""
         for s in self.getSchemas():
@@ -282,6 +301,7 @@ def initializeLayers(self, instance, item=None, container=None):
                 s.initializeLayers(instance, item, container)
 
     security.declarePrivate('cleanupLayers')
+
     def cleanupLayers(self, instance, item=None, container=None):
         """Layer cleaning"""
         for s in self.getSchemas():
diff --git a/Products/Archetypes/Schema/Facade.py b/Products/Archetypes/Schema/Facade.py
index 9f61209..a2236e9 100644
--- a/Products/Archetypes/Schema/Facade.py
+++ b/Products/Archetypes/Schema/Facade.py
@@ -15,31 +15,33 @@
 # Crude mapping for now. We should instantiate
 # the right widgets for some specialized fields
 # that map better.
-_field_mapping = {'CheckBoxField':BooleanField,
-                  'DateTimeField':DateTimeField,
-                  'EmailField':StringField,
-                  'FileField':FileField,
-                  'FloatField':FloatField,
-                  'IntegerField':IntegerField,
-                  'LinesField':LinesField,
-                  'LinkField':StringField,
-                  'ListField':LinesField,
-                  'ListTextAreaField':LinesField,
-                  'MethodField':StringField,
-                  'MultiCheckBoxField':LinesField,
-                  'MultiListField':LinesField,
-                  'PasswordField':StringField,
-                  'PatternField':StringField,
-                  'RadioField':StringField,
-                  'RangedIntegerField':StringField,
-                  'RawTextAreaField':StringField,
-                  'StringField':StringField,
-                  'TALESField':StringField,
-                  'TextAreaField':StringField}
+_field_mapping = {'CheckBoxField': BooleanField,
+                  'DateTimeField': DateTimeField,
+                  'EmailField': StringField,
+                  'FileField': FileField,
+                  'FloatField': FloatField,
+                  'IntegerField': IntegerField,
+                  'LinesField': LinesField,
+                  'LinkField': StringField,
+                  'ListField': LinesField,
+                  'ListTextAreaField': LinesField,
+                  'MethodField': StringField,
+                  'MultiCheckBoxField': LinesField,
+                  'MultiListField': LinesField,
+                  'PasswordField': StringField,
+                  'PatternField': StringField,
+                  'RadioField': StringField,
+                  'RangedIntegerField': StringField,
+                  'RawTextAreaField': StringField,
+                  'StringField': StringField,
+                  'TALESField': StringField,
+                  'TextAreaField': StringField}
+
 
 def getFactory(name):
     return _field_mapping.get(name)
 
+
 def fieldsFromSet(set, schema):
     fields = {}
     for element in set.getElements():
@@ -57,6 +59,7 @@ def fieldsFromSet(set, schema):
         fields[name] = field
     return fields
 
+
 def fieldNamesFromSet(set, schema):
     fields = []
     for element in set.getElements():
@@ -64,6 +67,7 @@ def fieldNamesFromSet(set, schema):
         fields.append(name)
     return fields
 
+
 class CMFMetadataFieldsDescriptor:
     """A nice descriptor that computes a set of Archetypes
     fields from a CMFMetadata Set (Formulator-based)"""
@@ -83,6 +87,7 @@ def __get__(self, obj, objtype=None):
         generateMethods(klass, fields.values())
         return fields
 
+
 class CMFMetadataFieldNamesDescriptor:
     """A nice descriptor that computes a set of Archetypes
     fields from a CMFMetadata Set (Formulator-based)"""
@@ -94,6 +99,7 @@ def __get__(self, obj, objtype=None):
         set = pm.getMetadataSet(obj.set_id)
         return fieldNamesFromSet(set, obj)
 
+
 class FacadeMetadataSchema(BasicSchema):
     """A Facade Schema, which adapts CMFMetadata 'Sets'
     to groups of Archetypes fields
@@ -120,6 +126,7 @@ def bind(self, context):
         self.context = context
 
     security.declareProtected(View, 'validate')
+
     def validate(self, instance=None, REQUEST=None,
                  errors=None, data=None, metadata=None):
         """Validate the state of the entire object.
diff --git a/Products/Archetypes/Schema/__init__.py b/Products/Archetypes/Schema/__init__.py
index a5f5a8c..dcb86ce 100644
--- a/Products/Archetypes/Schema/__init__.py
+++ b/Products/Archetypes/Schema/__init__.py
@@ -5,9 +5,9 @@
 from Products.Archetypes.Layer import DefaultLayerContainer
 from Products.Archetypes.interfaces.field import IField
 from Products.Archetypes.interfaces.layer import ILayerContainer, \
-     ILayerRuntime, ILayer
+    ILayerRuntime, ILayer
 from Products.Archetypes.interfaces.schema import ISchema, ISchemata, \
-     IManagedSchema
+    IManagedSchema
 from Products.Archetypes.utils import OrderedDict, mapply, shasattr
 from Products.Archetypes.mimetype_utils import getDefaultContentType
 from Products.Archetypes.exceptions import SchemaException
@@ -70,6 +70,7 @@ def __init__(self, name='default', fields=None):
                 self.addField(field)
 
     security.declareProtected(permissions.View, 'getName')
+
     def getName(self):
         """Returns the Schemata's name."""
         return self.__name__
@@ -88,6 +89,7 @@ def __add__(self, other):
         return c
 
     security.declareProtected(permissions.View, 'copy')
+
     def copy(self):
         """Returns a deep copy of this Schemata.
         """
@@ -97,6 +99,7 @@ def copy(self):
         return c
 
     security.declareProtected(permissions.View, 'fields')
+
     def fields(self):
         """Returns a list of my fields in order of their indices."""
         return [self._fields[name] for name in self._names]
@@ -105,6 +108,7 @@ def fields(self):
     values = fields
 
     security.declareProtected(permissions.View, 'editableFields')
+
     def editableFields(self, instance, visible_only=False):
         """Returns a list of editable fields for the given instance
         """
@@ -112,13 +116,14 @@ def editableFields(self, instance, visible_only=False):
         portal = getToolByName(instance, 'portal_url').getPortalObject()
         for field in self.fields():
             if field.writeable(instance, debug=False) and    \
-                   (not visible_only or
-                    field.widget.isVisible(instance, 'edit') != 'invisible') and \
-                  field.widget.testCondition(instance.aq_parent, portal, instance):
+                    (not visible_only or
+                        field.widget.isVisible(instance, 'edit') != 'invisible') and \
+                    field.widget.testCondition(instance.aq_parent, portal, instance):
                 ret.append(field)
         return ret
 
     security.declareProtected(permissions.View, 'viewableFields')
+
     def viewableFields(self, instance):
         """Returns a list of viewable fields for the given instance
         """
@@ -126,6 +131,7 @@ def viewableFields(self, instance):
                 if field.checkPermission('view', instance)]
 
     security.declareProtected(permissions.View, 'widgets')
+
     def widgets(self):
         """Returns a dictionary that contains a widget for
         each field, using the field name as key."""
@@ -137,6 +143,7 @@ def widgets(self):
 
     security.declareProtected(permissions.View,
                               'filterFields')
+
     def filterFields(self, *predicates, **values):
         """Returns a subset of self.fields(), containing only fields that
         satisfy the given conditions.
@@ -158,17 +165,20 @@ def filterFields(self, *predicates, **values):
 
             # predicate failed:
             failed = [pred for pred in predicates if not pred(field)]
-            if failed: continue
+            if failed:
+                continue
 
             # attribute missing:
-            missing_attrs = [attr for attr in values.keys() \
+            missing_attrs = [attr for attr in values.keys()
                              if not shasattr(field, attr)]
-            if missing_attrs: continue
+            if missing_attrs:
+                continue
 
             # attribute value unequal:
-            diff_values = [attr for attr in values.keys() \
+            diff_values = [attr for attr in values.keys()
                            if getattr(field, attr) != values[attr]]
-            if diff_values: continue
+            if diff_values:
+                continue
 
             results.append(field)
 
@@ -180,6 +190,7 @@ def __setitem__(self, name, field):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'addField')
+
     def addField(self, field):
         """Adds a given field to my dictionary of fields."""
         field = aq_base(field)
@@ -204,7 +215,7 @@ def _validateOnAdd(self, field):
                     "Tried to add '%s' as primary field "
                     "but %s already has the primary field '%s'." %
                     (name, repr(self), res.getName())
-                    )
+                )
         for pname in ('accessor', 'edit_accessor', 'mutator'):
             res = self._checkPropertyDupe(field, pname)
             if res is not False:
@@ -213,7 +224,7 @@ def _validateOnAdd(self, field):
                     "Tried to add '%s' with property '%s' set "
                     "to %s but '%s' has the same value." %
                     (name, pname, repr(value), res.getName())
-                    )
+                )
         # Do not allowed unqualified references
         if field.type in ('reference', ):
             relationship = getattr(field, 'relationship', '')
@@ -223,7 +234,7 @@ def _validateOnAdd(self, field):
                     "unsupported relationship var type in field '%s'. "
                     "The relationship qualifer must be a non empty "
                     "string." % name
-                    )
+                )
 
     def __delitem__(self, name):
         if name not in self._fields:
@@ -235,16 +246,19 @@ def __getitem__(self, name):
         return self._fields[name]
 
     security.declareProtected(permissions.View, 'get')
+
     def get(self, name, default=None):
         return self._fields.get(name, default)
 
     security.declareProtected(permissions.View, 'has_key')
+
     def has_key(self, name):
         return name in self._fields
 
     __contains__ = has_key
 
     security.declareProtected(permissions.View, 'keys')
+
     def keys(self):
         return self._names
 
@@ -257,6 +271,7 @@ def keys(self):
     updateField = addField
 
     security.declareProtected(permissions.View, 'searchable')
+
     def searchable(self):
         """Returns a list containing names of all searchable fields."""
 
@@ -303,11 +318,11 @@ class SchemaLayerContainer(DefaultLayerContainer):
 
     _properties = {
         'marshall': None
-        }
+    }
 
     def __init__(self):
         DefaultLayerContainer.__init__(self)
-        #Layer init work
+        # Layer init work
         marshall = self._props.get('marshall')
         if marshall:
             self.registerLayer('marshall', marshall)
@@ -315,6 +330,7 @@ def __init__(self):
     # ILayerRuntime
     security.declareProtected(permissions.ModifyPortalContent,
                               'initializeLayers')
+
     def initializeLayers(self, instance, item=None, container=None):
         # scan each field looking for registered layers optionally
         # call its initializeInstance method and then the
@@ -339,12 +355,13 @@ def initializeLayers(self, instance, item=None, container=None):
         if ILayerContainer.providedBy(self):
             for layer, obj in self.registeredLayers():
                 if (not called((layer, obj)) and
-                    ILayer.providedBy(obj)):
+                        ILayer.providedBy(obj)):
                     obj.initializeInstance(instance, item, container)
                     initializedLayers.append((layer, obj))
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'cleanupLayers')
+
     def cleanupLayers(self, instance, item=None, container=None):
         # scan each field looking for registered layers optionally
         # call its cleanupInstance method and then the cleanupField
@@ -370,7 +387,7 @@ def cleanupLayers(self, instance, item=None, container=None):
         if ILayerContainer.providedBy(self):
             for layer, obj in self.registeredLayers():
                 if (not queued((layer, obj)) and
-                    ILayer.providedBy(obj)):
+                        ILayer.providedBy(obj)):
                     obj.cleanupInstance(instance, item, container)
                     queuedLayers.append((layer, obj))
 
@@ -386,6 +403,7 @@ def __add__(self, other):
         return c
 
     security.declareProtected(permissions.View, 'copy')
+
     def copy(self):
         c = SchemaLayerContainer()
         for k, v in self.registeredLayers():
@@ -449,6 +467,7 @@ def __add__(self, other):
         return c
 
     security.declareProtected(permissions.View, 'copy')
+
     def copy(self):
         """Returns a deep copy of this Schema.
         """
@@ -461,20 +480,24 @@ def copy(self):
         return c
 
     security.declareProtected(permissions.ModifyPortalContent, 'edit')
+
     def edit(self, instance, name, value):
         if self.allow(name):
             instance[name] = value
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setDefaults')
+
     def setDefaults(self, instance):
         """Only call during object initialization. Sets fields to
         schema defaults
         """
-        ## TODO think about layout/vs dyn defaults
+        # TODO think about layout/vs dyn defaults
         for field in self.values():
-            if field.getName().lower() == 'id': continue
-            if field.type == "reference": continue
+            if field.getName().lower() == 'id':
+                continue
+            if field.type == "reference":
+                continue
 
             # always set defaults on writable fields
             mutator = field.getMutator(instance)
@@ -498,6 +521,7 @@ def setDefaults(self, instance):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'updateAll')
+
     def updateAll(self, instance, **kwargs):
         """This method mutates fields in the given instance.
 
@@ -527,10 +551,12 @@ def updateAll(self, instance, **kwargs):
             method(kwargs[name])
 
     security.declareProtected(permissions.View, 'allow')
+
     def allow(self, name):
         return name in self
 
     security.declareProtected(permissions.View, 'validate')
+
     def validate(self, instance=None, REQUEST=None,
                  errors=None, data=None, metadata=None):
         """Validate the state of the entire object.
@@ -589,7 +615,8 @@ def validate(self, instance=None, REQUEST=None,
             else:
                 result = None
             if result is None or result is _marker:
-                accessor = field.getEditAccessor(instance) or field.getAccessor(instance)
+                accessor = field.getEditAccessor(
+                    instance) or field.getAccessor(instance)
                 if accessor is not None:
                     value = accessor()
                 else:
@@ -613,6 +640,7 @@ def validate(self, instance=None, REQUEST=None,
     # TODO FIXME!
     security.declareProtected(permissions.View,
                               'toString')
+
     def toString(self):
         s = '%s: {' % self.__class__.__name__
         for f in self.fields():
@@ -622,6 +650,7 @@ def toString(self):
 
     security.declareProtected(permissions.View,
                               'signature')
+
     def signature(self):
         try:
             from hashlib import md5
@@ -631,6 +660,7 @@ def signature(self):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'changeSchemataForField')
+
     def changeSchemataForField(self, fieldname, schemataname):
         """ change the schemata for a field """
         field = self[fieldname]
@@ -639,6 +669,7 @@ def changeSchemataForField(self, fieldname, schemataname):
         self.addField(field)
 
     security.declareProtected(permissions.View, 'getSchemataNames')
+
     def getSchemataNames(self):
         """Return list of schemata names in order of appearing"""
         lst = []
@@ -648,6 +679,7 @@ def getSchemataNames(self):
         return lst
 
     security.declareProtected(permissions.View, 'getSchemataFields')
+
     def getSchemataFields(self, name):
         """Return list of fields belong to schema 'name'
         in order of appearing
@@ -656,6 +688,7 @@ def getSchemataFields(self, name):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'replaceField')
+
     def replaceField(self, name, field):
         if IField.providedBy(field):
             oidx = self._names.index(name)
@@ -703,6 +736,7 @@ def __add__(self, other):
         return c
 
     security.declareProtected(permissions.View, 'copy')
+
     def copy(self, factory=None):
         """Returns a deep copy of this Schema.
         """
@@ -719,12 +753,14 @@ def copy(self, factory=None):
         return c
 
     security.declareProtected(permissions.View, 'wrapped')
+
     def wrapped(self, parent):
         schema = self.copy(factory=WrappedSchema)
         return schema.__of__(parent)
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'moveField')
+
     def moveField(self, name, direction=None, pos=None, after=None, before=None):
         """Move a field
 
@@ -908,6 +944,7 @@ class ManagedSchema(Schema):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'delSchemata')
+
     def delSchemata(self, name):
         """Remove all fields belonging to schemata 'name'"""
         for f in self.fields():
@@ -916,6 +953,7 @@ def delSchemata(self, name):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'addSchemata')
+
     def addSchemata(self, name):
         """Create a new schema by adding a new field with schemata 'name' """
         from Products.Archetypes.Field import StringField
@@ -926,6 +964,7 @@ def addSchemata(self, name):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'moveSchemata')
+
     def moveSchemata(self, name, direction):
         """Move a schemata to left (direction=-1) or to right
         (direction=1)
@@ -973,6 +1012,7 @@ class MetadataSchema(Schema):
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'addField')
+
     def addField(self, field):
         """Strictly enforce the contract that metadata is stored w/o
         markup and make sure each field is marked as such for
diff --git a/Products/Archetypes/Storage/Facade.py b/Products/Archetypes/Storage/Facade.py
index 5ecf4c4..ebf0d65 100644
--- a/Products/Archetypes/Storage/Facade.py
+++ b/Products/Archetypes/Storage/Facade.py
@@ -7,6 +7,7 @@
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.Registry import registerStorage
 
+
 class FacadeMetadataStorage(StorageLayer):
     """A Facade Storage which delegates to
     CMFMetadata's Metadata Tool for actually
@@ -19,18 +20,22 @@ def __init__(self, metadata_set):
         self.metadata_set = metadata_set
 
     security.declarePrivate('getTool')
+
     def getTool(self, instance):
         return getToolByName(instance, 'portal_metadata')
 
     security.declarePrivate('initializeInstance')
+
     def initializeInstance(self, instance, item=None, container=None):
         pass
 
     security.declarePrivate('initializeField')
+
     def initializeField(self, instance, field):
         pass
 
     security.declarePrivate('get')
+
     def get(self, name, instance, **kwargs):
         field = kwargs['field']
         tool = self.getTool(instance)
@@ -39,13 +44,14 @@ def get(self, name, instance, **kwargs):
         return value
 
     security.declarePrivate('set')
+
     def set(self, name, instance, value, **kwargs):
         field = kwargs['field']
         tool = self.getTool(instance)
         mdata = tool.getMetadata(instance)
         if isinstance(value, unicode):
             value = encode(value, instance)
-        data = {field.metadata_name:value}
+        data = {field.metadata_name: value}
         # Calling _setData directly, because there's
         # *no* method for setting one field at a time,
         # and setValues takes a dict and does
@@ -54,14 +60,17 @@ def set(self, name, instance, value, **kwargs):
         mdata._setData(data, set_id=self.metadata_set)
 
     security.declarePrivate('unset')
+
     def unset(self, name, instance, **kwargs):
         pass
 
     security.declarePrivate('cleanupField')
+
     def cleanupField(self, instance, field, **kwargs):
         pass
 
     security.declarePrivate('cleanupInstance')
+
     def cleanupInstance(self, instance, item=None, container=None):
         pass
 
diff --git a/Products/Archetypes/Storage/__init__.py b/Products/Archetypes/Storage/__init__.py
index 5a547cc..7bb9fc5 100644
--- a/Products/Archetypes/Storage/__init__.py
+++ b/Products/Archetypes/Storage/__init__.py
@@ -19,7 +19,7 @@
 _marker = []
 
 
-#XXX subclass from Base?
+# XXX subclass from Base?
 class Storage:
     """Basic, abstract class for Storages. You need to implement
     at least those methods"""
@@ -29,6 +29,7 @@ class Storage:
     security = ClassSecurityInfo()
 
     security.declarePublic('getName')
+
     def getName(self):
         return self.__class__.__name__
 
@@ -39,14 +40,17 @@ def __cmp__(self, other):
         return cmp(self.getName(), other.getName())
 
     security.declarePrivate('get')
+
     def get(self, name, instance, **kwargs):
         raise NotImplementedError('%s: get' % self.getName())
 
     security.declarePrivate('set')
+
     def set(self, name, instance, value, **kwargs):
         raise NotImplementedError('%s: set' % self.getName())
 
     security.declarePrivate('unset')
+
     def unset(self, name, instance, **kwargs):
         raise NotImplementedError('%s: unset' % self.getName())
 
@@ -69,18 +73,22 @@ class StorageLayer(Storage):
     security = ClassSecurityInfo()
 
     security.declarePrivate('initializeInstance')
+
     def initializeInstance(self, instance, item=None, container=None):
         raise NotImplementedError('%s: initializeInstance' % self.getName())
 
     security.declarePrivate('cleanupInstance')
+
     def cleanupInstance(self, instance, item=None, container=None):
         raise NotImplementedError('%s: cleanupInstance' % self.getName())
 
     security.declarePrivate('initializeField')
+
     def initializeField(self, instance, field):
         raise NotImplementedError('%s: initializeField' % self.getName())
 
     security.declarePrivate('cleanupField')
+
     def cleanupField(self, instance, field):
         raise NotImplementedError('%s: cleanupField' % self.getName())
 
@@ -94,12 +102,14 @@ class AttributeStorage(Storage):
     security = ClassSecurityInfo()
 
     security.declarePrivate('get')
+
     def get(self, name, instance, **kwargs):
         if not shasattr(instance, name):
             raise AttributeError(name)
         return getattr(instance, name)
 
     security.declarePrivate('set')
+
     def set(self, name, instance, value, **kwargs):
         # Remove acquisition wrappers
         value = aq_base(value)
@@ -107,6 +117,7 @@ def set(self, name, instance, value, **kwargs):
         instance._p_changed = 1
 
     security.declarePrivate('unset')
+
     def unset(self, name, instance, **kwargs):
         try:
             delattr(aq_base(instance), name)
@@ -122,6 +133,7 @@ class ObjectManagedStorage(Storage):
     security = ClassSecurityInfo()
 
     security.declarePrivate('get')
+
     def get(self, name, instance, **kwargs):
         try:
             return instance._getOb(name)
@@ -129,6 +141,7 @@ def get(self, name, instance, **kwargs):
             raise AttributeError(msg)
 
     security.declarePrivate('set')
+
     def set(self, name, instance, value, **kwargs):
         # Remove acquisition wrappers
         value = aq_base(value)
@@ -140,6 +153,7 @@ def set(self, name, instance, value, **kwargs):
         instance._p_changed = 1
 
     security.declarePrivate('unset')
+
     def unset(self, name, instance, **kwargs):
         instance._delObject(name)
         instance._p_changed = 1
@@ -152,12 +166,14 @@ class MetadataStorage(StorageLayer):
     security = ClassSecurityInfo()
 
     security.declarePrivate('initializeInstance')
+
     def initializeInstance(self, instance, item=None, container=None):
         if not shasattr(instance, "_md"):
             instance._md = PersistentMapping()
             instance._p_changed = 1
 
     security.declarePrivate('initializeField')
+
     def initializeField(self, instance, field):
         # Check for already existing field to avoid  the reinitialization
         # (which means overwriting) of an already existing field after a
@@ -167,6 +183,7 @@ def initializeField(self, instance, field):
             self.set(field.getName(), instance, field.getDefault(instance))
 
     security.declarePrivate('get')
+
     def get(self, name, instance, **kwargs):
         base = aq_base(instance)
         try:
@@ -178,6 +195,7 @@ def get(self, name, instance, **kwargs):
         return value
 
     security.declarePrivate('set')
+
     def set(self, name, instance, value, **kwargs):
         base = aq_base(instance)
         # Remove acquisition wrappers
@@ -188,6 +206,7 @@ def set(self, name, instance, value, **kwargs):
         base._p_changed = 1
 
     security.declarePrivate('unset')
+
     def unset(self, name, instance, **kwargs):
         if not shasattr(instance, "_md"):
             log("Broken instance %s, no _md" % instance)
@@ -196,12 +215,14 @@ def unset(self, name, instance, **kwargs):
             instance._p_changed = 1
 
     security.declarePrivate('cleanupField')
+
     def cleanupField(self, instance, field, **kwargs):
         # Don't clean up the field self to avoid problems with copy/rename. The
         # python garbarage system will clean up if needed.
         pass
 
     security.declarePrivate('cleanupInstance')
+
     def cleanupInstance(self, instance, item=None, container=None):
         # Don't clean up the instance self to avoid problems with copy/rename. The
         # python garbarage system will clean up if needed.
diff --git a/Products/Archetypes/Storage/annotation.py b/Products/Archetypes/Storage/annotation.py
index ea5d022..8b2ffb2 100644
--- a/Products/Archetypes/Storage/annotation.py
+++ b/Products/Archetypes/Storage/annotation.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Acquisition import aq_base
 from AccessControl import ClassSecurityInfo
@@ -37,6 +37,7 @@
 from Products.Archetypes.utils import shasattr
 from Products.CMFCore.utils import getToolByName
 
+
 class BaseAnnotationStorage(Storage):
     """Stores data using annotations on the instance
     """
@@ -59,6 +60,7 @@ def _cleanup(self, name, instance, value, **kwargs):
         raise NotImplementedError
 
     security.declarePrivate('get')
+
     def get(self, name, instance, **kwargs):
         ann = getAnnotation(instance)
         value = ann.getSubkey(self._key, subkey=name, default=_marker)
@@ -70,6 +72,7 @@ def get(self, name, instance, **kwargs):
         return value
 
     security.declarePrivate('set')
+
     def set(self, name, instance, value, **kwargs):
         # Remove acquisition wrappers
         value = aq_base(value)
@@ -79,6 +82,7 @@ def set(self, name, instance, value, **kwargs):
             self._cleanup(name, instance, value, **kwargs)
 
     security.declarePrivate('unset')
+
     def unset(self, name, instance, **kwargs):
         ann = getAnnotation(instance)
         try:
@@ -88,6 +92,7 @@ def unset(self, name, instance, **kwargs):
 
 setSecurity(BaseAnnotationStorage)
 
+
 class AnnotationStorage(BaseAnnotationStorage):
     """Stores values as ATAnnotations on the object
     """
@@ -101,8 +106,9 @@ def _migration(self, name, instance, **kwargs):
         """
         value = getattr(aq_base(instance), name, _marker)
         if value is _marker:
-                raise AttributeError(name)
-        delattr(instance, name)  # explicit del althought set would do the job, too
+            raise AttributeError(name)
+        # explicit del althought set would do the job, too
+        delattr(instance, name)
         self.set(name, instance, value, **kwargs)
         return value
 
@@ -112,6 +118,7 @@ def _cleanup(self, name, instance, value, **kwargs):
 
 registerStorage(AnnotationStorage)
 
+
 class MetadataAnnotationStorage(BaseAnnotationStorage, StorageLayer):
     """Stores metadata as ATAnnotations on the object
     """
@@ -142,11 +149,13 @@ def _cleanup(self, name, instance, value, **kwargs):
             pass
 
     security.declarePrivate('initializeInstance')
+
     def initializeInstance(self, instance, item=None, container=None):
         # annotations are initialized on first access
         pass
 
     security.declarePrivate('initializeField')
+
     def initializeField(self, instance, field):
         # Check for already existing field to avoid  the reinitialization
         # (which means overwriting) of an already existing field after a
@@ -156,12 +165,14 @@ def initializeField(self, instance, field):
             self.set(field.getName(), instance, field.getDefault(instance))
 
     security.declarePrivate('cleanupField')
+
     def cleanupField(self, instance, field, **kwargs):
         # Don't clean up the field self to avoid problems with copy/rename. The
         # python garbarage system will clean up if needed.
         pass
 
     security.declarePrivate('cleanupInstance')
+
     def cleanupInstance(self, instance, item=None, container=None):
         # Don't clean up the instance self to avoid problems with copy/rename. The
         # python garbarage system will clean up if needed.
@@ -184,28 +195,31 @@ def migrateStorageOfType(portal, portal_type, schema):
     brains = catalog(dict(Type=portal_type))
 
     fields = [field.getName()
-        for field in schema.fields()
-        if field.storage.__class__ == AnnotationStorage
-        ]
+              for field in schema.fields()
+              if field.storage.__class__ == AnnotationStorage
+              ]
     md_fields = [field.getName()
-        for field in schema.fields()
-        if field.storage.__class__ == MetadataAnnotationStorage
-        ]
+                 for field in schema.fields()
+                 if field.storage.__class__ == MetadataAnnotationStorage
+                 ]
 
     for brain in brains:
         obj = brain.getObject()
         if obj is None:
             continue
 
-        try: state = obj._p_changed
-        except: state = 0
+        try:
+            state = obj._p_changed
+        except:
+            state = 0
 
         ann = getAnnotation(obj)
         clean_obj = aq_base(obj)
         _attr2ann(clean_obj, ann, fields)
         _meta2ann(clean_obj, ann, md_fields)
 
-        if state is None: obj._p_deactivate()
+        if state is None:
+            obj._p_deactivate()
 
 
 def _attr2ann(clean_obj, ann, fields):
diff --git a/Products/Archetypes/TemplateMixin.py b/Products/Archetypes/TemplateMixin.py
index 4fbd179..5b566a3 100644
--- a/Products/Archetypes/TemplateMixin.py
+++ b/Products/Archetypes/TemplateMixin.py
@@ -17,17 +17,17 @@
 TemplateMixinSchema = Schema((
     # TemplateMixin
     StringField('layout',
-        write_permission=permissions.ModifyPortalContent,
-        default_method="getDefaultLayout",
-        vocabulary="_voc_templates",
-        widget=SelectionWidget(label=_(u'label_template_mixin',
-                                       default=u'View template'),
-                               description=_(u'help_template_mixin',
-                                             default=u'Choose a template that will be used for viewing this item.'),
-                               visible={'view': 'hidden',
-                                        'edit': 'visible'},)
-               ),
-    ))
+                write_permission=permissions.ModifyPortalContent,
+                default_method="getDefaultLayout",
+                vocabulary="_voc_templates",
+                widget=SelectionWidget(label=_(u'label_template_mixin',
+                                               default=u'View template'),
+                                       description=_(u'help_template_mixin',
+                                                     default=u'Choose a template that will be used for viewing this item.'),
+                                       visible={'view': 'hidden',
+                                                'edit': 'visible'},)
+                ),
+))
 
 
 class TemplateMixin(Base):
@@ -40,15 +40,15 @@ class TemplateMixin(Base):
          'name': 'View',
          'action': 'string:${object_url}/',
          'permissions': (permissions.View,),
-        },
-        )
+         },
+    )
 
     aliases = {
         '(Default)': '',
         'index_html': '',
         'view': '',
         'gethtml': 'source_html',
-        }
+    }
 
     # if default_view is None TemplateMixin is using the immediate_view from
     # the type information
@@ -75,6 +75,7 @@ def _voc_templates(self):
     templates = _voc_templates
 
     security.declareProtected(permissions.View, 'getLayout')
+
     def getLayout(self, **kw):
         """Get the current layout or the default layout if the current one is None
         """
@@ -90,6 +91,7 @@ def getLayout(self, **kw):
             return self.getDefaultLayout()
 
     security.declareProtected(permissions.View, 'getDefaultLayout')
+
     def getDefaultLayout(self):
         """Get the default layout used for TemplateMixin.
 
diff --git a/Products/Archetypes/UIDCatalog.py b/Products/Archetypes/UIDCatalog.py
index 7c42c4e..9c92f3b 100644
--- a/Products/Archetypes/UIDCatalog.py
+++ b/Products/Archetypes/UIDCatalog.py
@@ -80,6 +80,7 @@ class UIDCatalogBrains(AbstractCatalogBrain):
     security = ClassSecurityInfo()
 
     security.declarePrivate('getObject')
+
     def getObject(self, REQUEST=None):
         """
         Used to resolve UIDs into real objects. This also must be
@@ -112,7 +113,7 @@ def getObject(self, REQUEST=None):
             raise
         except:
             logger.log(logging.INFO,
-                'UIDCatalogBrains getObject raised an error', exc_info=True)
+                       'UIDCatalogBrains getObject raised an error', exc_info=True)
 
 InitializeClass(UIDCatalogBrains)
 
@@ -120,6 +121,7 @@ def getObject(self, REQUEST=None):
 class IndexableObjectWrapper(object):
     """Wwrapper for object indexing
     """
+
     def __init__(self, obj):
         self._obj = obj
 
@@ -142,7 +144,7 @@ def Title(self):
 _marker = []
 
 
-#let rewrite Title indexer with plone.indexer
+# let rewrite Title indexer with plone.indexer
 @indexer(interface.Interface, IUIDCatalog)
 def Title(obj):
     title = obj.Title()
@@ -164,6 +166,7 @@ class UIDResolver(Base):
     security = ClassSecurityInfo()
 
     security.declarePrivate('catalog_object')
+
     def catalog_object(self, obj, uid=None, **kwargs):
         """Use the relative path from the portal root as uid
 
@@ -211,6 +214,7 @@ def __init__(self, id, title='', vocab_id=None, container=None):
         self._catalog = UIDBaseCatalog()
 
     security.declareProtected(ManageZCatalogEntries, 'catalog_object')
+
     def catalog_object(self, object, uid, idxs=None,
                        update_metadata=1, pghandler=None):
 
@@ -218,8 +222,10 @@ def catalog_object(self, object, uid, idxs=None,
             idxs = []
         w = object
         if not IIndexableObject.providedBy(object):
-            # This is the CMF 2.2 compatible approach, which should be used going forward
-            wrapper = component.queryMultiAdapter((object, self), IIndexableObject)
+            # This is the CMF 2.2 compatible approach, which should be used
+            # going forward
+            wrapper = component.queryMultiAdapter(
+                (object, self), IIndexableObject)
             if wrapper is not None:
                 w = wrapper
 
@@ -233,7 +239,9 @@ def _catalogObject(self, obj, path):
         url = getRelURL(self, obj.getPhysicalPath())
         self.catalog_object(obj, url)
 
-    security.declareProtected(CMFCore.permissions.ManagePortal, 'manage_rebuildCatalog')
+    security.declareProtected(
+        CMFCore.permissions.ManagePortal, 'manage_rebuildCatalog')
+
     def manage_rebuildCatalog(self, REQUEST=None, RESPONSE=None):
         """
         """
@@ -265,12 +273,12 @@ def manage_rebuildCatalog(self, REQUEST=None, RESPONSE=None):
 
         if RESPONSE:
             RESPONSE.redirect(
-            REQUEST.URL1 +
-            '/manage_catalogView?manage_tabs_message=' +
-            urllib.quote('Catalog Rebuilded\n'
-                         'Total time: %s\n'
-                         'Total CPU time: %s'
-                         % (`elapse`, `c_elapse`))
+                REQUEST.URL1 +
+                '/manage_catalogView?manage_tabs_message=' +
+                urllib.quote('Catalog Rebuilded\n'
+                             'Total time: %s\n'
+                             'Total CPU time: %s'
+                             % (`elapse`, `c_elapse`))
             )
 
 InitializeClass(UIDCatalog)
diff --git a/Products/Archetypes/VariableSchemaSupport.py b/Products/Archetypes/VariableSchemaSupport.py
index d010eca..57f0fac 100644
--- a/Products/Archetypes/VariableSchemaSupport.py
+++ b/Products/Archetypes/VariableSchemaSupport.py
@@ -57,11 +57,13 @@ def getSchema():
     security = ClassSecurityInfo()
 
     security.declareProtected(permissions.View, 'Schema')
+
     def Schema(self):
         schema = self.getAndPrepareSchema()
         return ImplicitAcquisitionWrapper(schema, self)
 
     security.declareProtected(permissions.ManagePortal, 'getAndPrepareSchema')
+
     def getAndPrepareSchema(self):
         s = self.getSchema()
 
@@ -81,10 +83,12 @@ def getAndPrepareSchema(self):
 
     # supposed to be overloaded. here the object can return its own schema
     security.declareProtected(permissions.View, 'getSchema')
+
     def getSchema(self):
         return self.schema
 
     security.declareProtected(permissions.ManagePortal, 'setSchema')
+
     def setSchema(self, schema):
         self.schema = schema
 
diff --git a/Products/Archetypes/WebDAVSupport.py b/Products/Archetypes/WebDAVSupport.py
index cc08231..ef3f492 100644
--- a/Products/Archetypes/WebDAVSupport.py
+++ b/Products/Archetypes/WebDAVSupport.py
@@ -174,7 +174,7 @@ def manage_FTPget(self, REQUEST=None, RESPONSE=None):
     # return a StreamIterator.
     assert length is not None, 'Could not figure out length of Pdata chain'
     if (issubclass(IStreamIterator, Interface) and IStreamIterator.providedBy(data)
-        or not issubclass(IStreamIterator, Interface) and IStreamIterator.IsImplementedBy(data)):
+            or not issubclass(IStreamIterator, Interface) and IStreamIterator.IsImplementedBy(data)):
         return data
     return PdataStreamIterator(data, length)
 
diff --git a/Products/Archetypes/Widget.py b/Products/Archetypes/Widget.py
index d9f9922..7c9b196 100644
--- a/Products/Archetypes/Widget.py
+++ b/Products/Archetypes/Widget.py
@@ -45,25 +45,29 @@ class TypesWidget(macrowidget, Base):
         'helper_js': (),
         'helper_css': (),
         'blurrable': False,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('getName')
+
     def getName(self):
         return self.__class__.__name__
 
     security.declarePublic('getType')
+
     def getType(self):
         """Return the type of this field as a string"""
         return className(self)
 
     security.declarePublic('bootstrap')
+
     def bootstrap(self, instance):
         """Override if your widget needs data from the instance."""
         return
 
     security.declarePublic('populateProps')
+
     def populateProps(self, field):
         """This is called when the field is created."""
         name = field.getName()
@@ -71,6 +75,7 @@ def populateProps(self, field):
             self.label = capitalize(name)
 
     security.declarePublic('isVisible')
+
     def isVisible(self, instance, mode='view'):
         """decide if a field is visible in a given mode -> 'state'
 
@@ -106,16 +111,19 @@ def isVisible(self, instance, mode='view'):
         return state
 
     security.declarePublic('setCondition')
+
     def setCondition(self, condition):
         # Set the widget expression condition.
         self.condition = condition
 
     security.declarePublic('getCondition')
+
     def getCondition(self):
         # Return the widget text condition.
         return self.condition
 
     security.declarePublic('testCondition')
+
     def testCondition(self, folder, portal, object):
         # Test the widget condition.
         try:
@@ -131,6 +139,7 @@ def testCondition(self, folder, portal, object):
             return True
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """Basic impl for form processing in a widget"""
@@ -142,6 +151,7 @@ def process_form(self, instance, field, form, empty_marker=None,
         return value, {}
 
     security.declarePublic('copy')
+
     def copy(self):
         """
         Return a copy of widget instance, consisting of field name and
@@ -152,6 +162,7 @@ def copy(self):
         return self.__class__(**properties)
 
     security.declarePublic('render_own_label')
+
     def render_own_label(self):
         """
         By default the title/description of a field is not rendered by the
@@ -171,7 +182,7 @@ class StringWidget(TypesWidget):
         'maxlength': '255',
         'blurrable': True,
         'placeholder': '',
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -187,7 +198,7 @@ class DecimalWidget(TypesWidget):
         'thousands_commas': False,
         'blurrable': True,
         'placeholder': '',
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -200,7 +211,7 @@ class IntegerWidget(TypesWidget):
         'maxlength': '255',
         'blurrable': True,
         'placeholder': '',
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -224,7 +235,7 @@ class ReferenceWidget(TypesWidget):
                               # - a dict, where
                               #   {portal_type:<combination of the items above>}
                               # destination is relative to portal root
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -245,7 +256,8 @@ def lookupDestinationsFor(self, typeinfo, tool, purl, destination_types=None):
                 if typeinfo.globalAllow():
                     searchFor.append(regType.getId())
                 elif regType.filter_content_types and regType.allowed_content_types:
-                    act_dict = dict([(act, 0) for act in regType.allowed_content_types])
+                    act_dict = dict([(act, 0)
+                                     for act in regType.allowed_content_types])
                     if typeinfo.getId() in act_dict:
                         searchFor.append(regType.getId())
 
@@ -260,6 +272,7 @@ def lookupDestinationsFor(self, typeinfo, tool, purl, destination_types=None):
         return containers
 
     security.declarePublic('addableTypes')
+
     def addableTypes(self, instance, field):
         """ Returns a list of dictionaries which maps portal_type
             to a human readable form.
@@ -317,7 +330,8 @@ def addableTypes(self, instance, field):
                         lookupDestinationsFor(_info, tool, purl,
                                               destination_types=destination_types)
                 elif option == '.':
-                    value['destinations'].append(getRelativeContentURL(instance))
+                    value['destinations'].append(
+                        getRelativeContentURL(instance))
                 else:
                     try:
                         place = getattr(aq_base(instance), option, option)
@@ -330,7 +344,8 @@ def addableTypes(self, instance, field):
                     if isinstance(place, ListType):
                         value['destinations'] = place + value['destinations']
                     else:
-                        # TODO Might as well check for type, doing it everywhere else
+                        # TODO Might as well check for type, doing it
+                        # everywhere else
                         value['destinations'].append(place)
 
             if value['destinations']:
@@ -343,7 +358,7 @@ class ComputedWidget(TypesWidget):
     _properties = TypesWidget._properties.copy()
     _properties.update({
         'macro': "widgets/computed",
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -361,11 +376,12 @@ class TextAreaWidget(TypesWidget):
         'timestamp': False,
         'maxlength': False,
         'helper_js': ('widgets/js/textcount.js',),
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """handle text formatting"""
@@ -416,7 +432,7 @@ class LinesWidget(TypesWidget):
         'macro': "widgets/lines",
         'rows': 5,
         'cols': 40,
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -425,7 +441,7 @@ class BooleanWidget(TypesWidget):
     _properties = TypesWidget._properties.copy()
     _properties.update({
         'macro': "widgets/boolean",
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -444,11 +460,12 @@ class CalendarWidget(TypesWidget):
         'helper_js': ('jscalendar/calendar_stripped.js',
                       'jscalendar/calendar-en.js'),
         'helper_css': ('jscalendar/calendar-system.css',),
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """Basic impl for form processing in a widget"""
@@ -483,6 +500,7 @@ def process_form(self, instance, field, form, empty_marker=None,
         return value, {}
 
     security.declarePublic('render_own_label')
+
     def render_own_label(self):
         return True
 
@@ -493,11 +511,12 @@ class SelectionWidget(TypesWidget):
         'format': "flex",  # possible values: flex, select, radio
         'macro': "widgets/selection",
         'blurrable': True,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('render_own_label')
+
     def render_own_label(self):
         return True
 
@@ -508,7 +527,7 @@ class LanguageWidget(TypesWidget):
         'format': "flex",  # possible values: flex, select, radio
         'macro': "widgets/languagewidget",
         'blurrable': True,
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -520,11 +539,12 @@ class MultiSelectionWidget(TypesWidget):
         'macro': "widgets/multiselection",
         'size': 5,
         'blurrable': True,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """Basic impl for form processing in a widget"""
@@ -542,6 +562,7 @@ def process_form(self, instance, field, form, empty_marker=None,
         return values, {}
 
     security.declarePublic('render_own_label')
+
     def render_own_label(self):
         return True
 
@@ -556,11 +577,12 @@ class KeywordWidget(TypesWidget):
         'roleBasedAdd': True,
         'helper_js': ('widgets/js/keywordmultiselect.js',),
         'helper_css': ('keywordwidget.css',),
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """process keywords from form where this widget has a list of
@@ -594,11 +616,12 @@ class FileWidget(TypesWidget):
     _properties.update({
         'macro': "widgets/file",
         'show_content_type': True,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """form processing that deals with binary data"""
@@ -638,11 +661,12 @@ class RichWidget(TypesWidget):
         'cols': 40,
         'format': 1,
         'allow_file_upload': True,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """complex form processing, includes handling for text
@@ -698,11 +722,12 @@ class IdWidget(TypesWidget):
         'is_autogenerated': 'isIDAutoGenerated',
         # ignore global or by-member setting for visible ids?
         'ignore_visible_ids': False,
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """the id might be hidden by the widget and not submitted"""
@@ -715,11 +740,12 @@ def process_form(self, instance, field, form, empty_marker=None,
 class RequiredIdWidget(IdWidget):
     _properties = IdWidget._properties.copy()
     _properties.update({
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """Override IdWidget.process_form to require id."""
@@ -735,11 +761,12 @@ class ImageWidget(FileWidget):
         # use this scale for the preview in the edit form, default to 'preview'
         # if this scale isn't available then use the display_threshold
         'preview_scale': 'preview',
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('process_form')
+
     def process_form(self, instance, field, form, empty_marker=None,
                      emptyReturnsMarker=False, validating=True):
         """form processing that deals with image data (and its delete case)"""
@@ -770,6 +797,7 @@ def process_form(self, instance, field, form, empty_marker=None,
         return value, {}
 
     security.declarePublic('preview_tag')
+
     def preview_tag(self, instance, field):
         """Return a tag for a preview image, or None if no preview is found."""
         img = field.get(instance)
@@ -791,11 +819,12 @@ class LabelWidget(TypesWidget):
     _properties = TypesWidget._properties.copy()
     _properties.update({
         'macro': "widgets/label",
-        })
+    })
 
     security = ClassSecurityInfo()
 
     security.declarePublic('render_own_label')
+
     def render_own_label(self):
         return True
 
@@ -809,7 +838,7 @@ class PasswordWidget(TypesWidget):
         'postback': False,
         'size': 20,
         'maxlength': '255',
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -825,7 +854,7 @@ class VisualWidget(TextAreaWidget):
         'format': 0,
         'append_only': False,  # creates a textarea you can only add to, not edit
         'divider': '\n\n<hr />\n\n',  # default divider for append only divider
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -834,7 +863,7 @@ class EpozWidget(TextAreaWidget):
     _properties = TextAreaWidget._properties.copy()
     _properties.update({
         'macro': "widgets/epoz",
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -845,7 +874,7 @@ class InAndOutWidget(ReferenceWidget):
         'macro': "widgets/inandout",
         'size': '6',
         'helper_js': ('widgets/js/inandout.js',),
-        })
+    })
 
     security = ClassSecurityInfo()
 
@@ -856,7 +885,7 @@ class PicklistWidget(TypesWidget):
         'macro': "widgets/picklist",
         'size': '6',
         'helper_js': ('widgets/js/picklist.js',),
-        })
+    })
 
     security = ClassSecurityInfo()
 
diff --git a/Products/Archetypes/__init__.py b/Products/Archetypes/__init__.py
index a6b788c..b44fdc9 100644
--- a/Products/Archetypes/__init__.py
+++ b/Products/Archetypes/__init__.py
@@ -9,19 +9,25 @@
 from Products.CMFCore import permissions
 
 ###
-## security
+# security
 ###
 # make log and log_exc public
 allow_module('Products.Archetypes.utils')
 
 ModuleSecurityInfo('Products.Archetypes.debug').declarePublic('log')
 ModuleSecurityInfo('Products.Archetypes.debug').declarePublic('log_exc')
-ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic('getAllowableContentTypes')
-ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic('getAllowedContentTypes')
-ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic('getForbiddenContentTypes')
-ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic('getDefaultContentType')
-ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declareProtected(permissions.ManagePortal, 'setForbiddenContentTypes')
-ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declareProtected(permissions.ManagePortal, 'setDefaultContentType')
+ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic(
+    'getAllowableContentTypes')
+ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic(
+    'getAllowedContentTypes')
+ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic(
+    'getForbiddenContentTypes')
+ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declarePublic(
+    'getDefaultContentType')
+ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declareProtected(
+    permissions.ManagePortal, 'setForbiddenContentTypes')
+ModuleSecurityInfo('Products.Archetypes.mimetype_utils').declareProtected(
+    permissions.ManagePortal, 'setDefaultContentType')
 
 # Import "PloneMessageFactory as _" to create messages in plone domain
 # duplicated here so we don't add a dependency on CMFPlone
@@ -70,7 +76,7 @@ def initialize(context):
             permission=permissions.AddPortalContent,
             extra_constructors=constructors,
             fti=ftis,
-            ).initialize(context)
+        ).initialize(context)
     try:
         from Products.CMFCore.FSFile import FSFile
         from Products.CMFCore.DirectoryView import registerFileExtension
diff --git a/Products/Archetypes/annotations.py b/Products/Archetypes/annotations.py
index 83084ae..4f2a9be 100644
--- a/Products/Archetypes/annotations.py
+++ b/Products/Archetypes/annotations.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from UserDict import DictMixin
 
@@ -116,7 +116,8 @@ def getSubkey(self, key, subkey, default=None):
             k = '%s-%s' % (key, subkey)
             return self.get(k, default)
         else:
-            raise TypeError('Invalid subkey type %s, must be string type' % type(subkey))
+            raise TypeError(
+                'Invalid subkey type %s, must be string type' % type(subkey))
 
     def setSubkey(self, key, value, subkey):
         """Stores data using a key and one subkey
@@ -125,7 +126,8 @@ def setSubkey(self, key, value, subkey):
             k = '%s-%s' % (key, subkey)
             self[k] = value
         else:
-            raise TypeError('Invalid subkey type %s, must be string type' % type(subkey))
+            raise TypeError(
+                'Invalid subkey type %s, must be string type' % type(subkey))
 
     def delSubkey(self, key, subkey):
         """Removes a subkey
@@ -134,7 +136,8 @@ def delSubkey(self, key, subkey):
             k = '%s-%s' % (key, subkey)
             del self[k]
         else:
-            raise TypeError('Invalid subkey type %s, must be string type' % type(subkey))
+            raise TypeError(
+                'Invalid subkey type %s, must be string type' % type(subkey))
 
     def hasSubkey(self, key, subkey):
         """Checks for the existence of a sub key
@@ -143,7 +146,8 @@ def hasSubkey(self, key, subkey):
             k = '%s-%s' % (key, subkey)
             return k in self
         else:
-            raise TypeError('Invalid subkey type %s, must be string type' % type(subkey))
+            raise TypeError(
+                'Invalid subkey type %s, must be string type' % type(subkey))
 
     def getObject(self):
         return self._obj
@@ -155,23 +159,23 @@ def getAnnotationObject(self):
             return None
 
     # DictMixin does define the following methods:
-    #def __iter__(self):
-    #def has_key(self, key):
-    #def __contains__(self, key):
-    #def iteritems(self):
-    #def iterkeys(self):
-    #def itervalues(self):
-    #def values(self):
-    #def items(self):
-    #def clear(self):
-    #def setdefault(self, key, default):
-    #def pop(self, key, *args):
-    #def popitem(self):
-    #def update(self, other):
-    #def get(self, key, default=None):
-    #def __repr__(self):
-    #def __cmp__(self, other):
-    #def __len__(self):
+    # def __iter__(self):
+    # def has_key(self, key):
+    # def __contains__(self, key):
+    # def iteritems(self):
+    # def iterkeys(self):
+    # def itervalues(self):
+    # def values(self):
+    # def items(self):
+    # def clear(self):
+    # def setdefault(self, key, default):
+    # def pop(self, key, *args):
+    # def popitem(self):
+    # def update(self, other):
+    # def get(self, key, default=None):
+    # def __repr__(self):
+    # def __cmp__(self, other):
+    # def __len__(self):
 
 InitializeClass(ATAnnotations)
 
diff --git a/Products/Archetypes/atapi.py b/Products/Archetypes/atapi.py
index 8e5435a..b026aad 100644
--- a/Products/Archetypes/atapi.py
+++ b/Products/Archetypes/atapi.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 # registering and type processing
 from Products.Archetypes.ArchetypeTool import registerType
@@ -96,4 +96,4 @@
 __all__ = tuple([export
                  for export in dir(sys.modules[__name__])
                  if export not in skipExports and not export.startswith('_')
-                ])
+                 ])
diff --git a/Products/Archetypes/athistoryaware.py b/Products/Archetypes/athistoryaware.py
index c738c76..13867ce 100644
--- a/Products/Archetypes/athistoryaware.py
+++ b/Products/Archetypes/athistoryaware.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """Archetypes history awareness"""
 __author__ = 'Martijn Pieters <mj@zopatista.com>'
 
@@ -124,6 +124,7 @@ class ATHistoryAwareMixin:
     security = ClassSecurityInfo()
 
     security.declarePrivate('_constructAnnotatedHistory')
+
     def _constructAnnotatedHistory(self, max=10):
         """Reconstruct historical revisions of archetypes objects
 
@@ -152,7 +153,8 @@ def _constructAnnotatedHistory(self, max=10):
         annotation_key_objects = {}
         isatkey = lambda k, aak=AT_ANN_KEYS: filter(k.startswith, aak)
         # Loop over max revisions of the __annotations__ object to retrieve
-        # all keys (and more importantly, their objects so we can get revisions)
+        # all keys (and more importantly, their objects so we can get
+        # revisions)
         for tid, rev in _objectRevisions(self.__annotations__, max):
             history.setdefault(tid, {})['__annotations__'] = rev
             revision = rev['object']
@@ -171,6 +173,7 @@ def _constructAnnotatedHistory(self, max=10):
         # Now we merge the annotation and object revisions into one for each
         # transaction id, and yield the results
         tids = sorted(history.iterkeys(), reverse=True)
+
         def find_revision(tids, key):
             """First revision of key in a series of tids"""
             has_revision = lambda t, h=history, k=key: k in h[t]
@@ -228,6 +231,7 @@ def find_revision(tids, key):
             yield revision
 
     security.declarePrivate('getHistories')
+
     def getHistories(self, max=10):
         """Iterate over historic revisions.
 
diff --git a/Products/Archetypes/browser/datecomponents.py b/Products/Archetypes/browser/datecomponents.py
index a8eb7f3..225a7b4 100644
--- a/Products/Archetypes/browser/datecomponents.py
+++ b/Products/Archetypes/browser/datecomponents.py
@@ -101,7 +101,8 @@ def result(self, date=None,
             min_year = int(starting_year or 1999)
         if ending_year is None:
             if future_years is None and site_props is not None:
-                future_years = site_props.getProperty('calendar_future_years_available', 5)
+                future_years = site_props.getProperty(
+                    'calendar_future_years_available', 5)
             else:
                 future_years = int(future_years or 5)
             max_year = int(future_years) + now.year()
@@ -122,7 +123,7 @@ def result(self, date=None,
         else:
             years.append({'id': '--', 'value': '0000', 'selected': None})
 
-        for x in range(min_year, max_year+1):
+        for x in range(min_year, max_year + 1):
             d = {'id': x, 'value': x, 'selected': None}
             if x == year and not default:
                 d['selected'] = 1
@@ -131,12 +132,15 @@ def result(self, date=None,
         month = date.month()
 
         if default:
-            months.append({'id': '--', 'value': '00', 'selected': 1, 'title': '--'})
+            months.append({'id': '--', 'value': '00',
+                           'selected': 1, 'title': '--'})
         else:
-            months.append({'id': '--', 'value': '00', 'selected': None, 'title': '--'})
+            months.append({'id': '--', 'value': '00',
+                           'selected': None, 'title': '--'})
 
         for x in range(1, 13):
-            d = {'id': ENGLISH_MONTH_NAMES[x], 'value': '%02d' % x, 'selected': None}
+            d = {'id': ENGLISH_MONTH_NAMES[
+                x], 'value': '%02d' % x, 'selected': None}
             if x == month and not default:
                 d['selected'] = 1
             d['title'] = month_names[x][0]
@@ -163,7 +167,7 @@ def result(self, date=None,
             hours_range = range(0, 24)
             hour_default = '00'
             hour = int(date.h_24())
-        
+
         if default:
             hours.append({'id': '--', 'value': hour_default, 'selected': 1})
         else:
diff --git a/Products/Archetypes/browser/edit.py b/Products/Archetypes/browser/edit.py
index bee7465..330de73 100644
--- a/Products/Archetypes/browser/edit.py
+++ b/Products/Archetypes/browser/edit.py
@@ -37,13 +37,13 @@ def fieldsets(self):
         return [
             key for key in schematas.keys()
             if (schematas[key].editableFields(context, visible_only=True))
-            ]
+        ]
 
     def fields(self, fieldsets):
         context = aq_inner(self.context)
         schematas = context.Schemata()
         return [f for key in fieldsets
-                  for f in schematas[key].editableFields(context)]
+                for f in schematas[key].editableFields(context)]
 
     def getTranslatedSchemaLabel(self, schema):
         label = u"label_schema_%s" % schema
diff --git a/Products/Archetypes/browser/fields.py b/Products/Archetypes/browser/fields.py
index 2456436..675868c 100644
--- a/Products/Archetypes/browser/fields.py
+++ b/Products/Archetypes/browser/fields.py
@@ -1,5 +1,6 @@
 from Products.Five.browser import BrowserView
 
+
 class DefaultFieldDecoratorView(BrowserView):
     '''Gives a possibility to kss to implement this view,
     meanwhile, allow it to be used from the templates if
diff --git a/Products/Archetypes/browser/lifecycle.py b/Products/Archetypes/browser/lifecycle.py
index e7e9123..9f4151a 100644
--- a/Products/Archetypes/browser/lifecycle.py
+++ b/Products/Archetypes/browser/lifecycle.py
@@ -7,6 +7,7 @@
 from Products.Archetypes.event import EditBegunEvent
 from Products.Archetypes.event import EditCancelledEvent
 
+
 class Lifecycle(BrowserView):
     """Helper functions to trigger lifecycle events from TTW code
     """
diff --git a/Products/Archetypes/browser/utils.py b/Products/Archetypes/browser/utils.py
index daa8113..1c9cabc 100644
--- a/Products/Archetypes/browser/utils.py
+++ b/Products/Archetypes/browser/utils.py
@@ -35,6 +35,7 @@ def translate(self, vocab, value, widget=None):
             custom_domain = getattr(widget, 'i18n_domain', None)
             if custom_domain:
                 domain = custom_domain
+
         def _(value):
             return translate(value,
                              domain=domain,
diff --git a/Products/Archetypes/config.py b/Products/Archetypes/config.py
index 512d0ed..c581205 100644
--- a/Products/Archetypes/config.py
+++ b/Products/Archetypes/config.py
@@ -6,13 +6,13 @@
 
 REGISTER_DEMO_TYPES = True  # Initialize the demo types
 DEBUG = False  # Hide debug messages
-#DEBUG = True  # See debug messages
+# DEBUG = True  # See debug messages
 
 RENAME_AFTER_CREATION_ATTEMPTS = 100
 # Try up to -100 at the end of the id when doing title-to-id renaming
 
 
-##Reference Engine bits
+# Reference Engine bits
 REFERENCE_CATALOG = "reference_catalog"
 UUID_ATTR = "_at_uid"
 REFERENCE_ANNOTATION = "at_references"
@@ -30,7 +30,7 @@
 
 # Debug security settings of Fields, Widgets and Storages?
 DEBUG_SECURITY = False
-#DEBUG_SECURITY=True
+# DEBUG_SECURITY=True
 
 # BBB constants for removed graphviz suppport
 GRAPHVIZ_BINARY = None
diff --git a/Products/Archetypes/debug.py b/Products/Archetypes/debug.py
index 8ae023f..d71d07c 100644
--- a/Products/Archetypes/debug.py
+++ b/Products/Archetypes/debug.py
@@ -13,6 +13,7 @@
 
 
 class SafeFileWrapper:
+
     def __init__(self, fp):
         self.fp = fp
 
@@ -67,13 +68,15 @@ def log(self, msg, *args, **kwargs):
 
     def log_exc(self, msg=None, *args, **kwargs):
         self.log(''.join(traceback.format_exception(*sys.exc_info())), offset=1)
-        if msg: self.log(msg, collapse=0, deep=0, *args, **kwargs)
+        if msg:
+            self.log(msg, collapse=0, deep=0, *args, **kwargs)
 
     def __call__(self, msg):
         self.log(msg)
 
 
 class NullLog(Log):
+
     def __init__(self, target):
         pass
 
@@ -134,6 +137,7 @@ def munge_message(self, msg, **kwargs):
 
 
 class ZPTLogger(ClassLog):
+
     def generateFrames(self, start=None, end=None):
         frames = inspect.stack()
         for f in frames:
@@ -144,6 +148,7 @@ def generateFrames(self, start=None, end=None):
 
 
 class ZLogger(ClassLog):
+
     def log(self, msg, *args, **kwargs):
         level = kwargs.get('level', logging.INFO)
         msg = "%s\n" % (self.munge_message(msg, **kwargs))
diff --git a/Products/Archetypes/event.py b/Products/Archetypes/event.py
index aa55cda..e70a715 100644
--- a/Products/Archetypes/event.py
+++ b/Products/Archetypes/event.py
@@ -15,31 +15,37 @@
 
 # Modification
 
+
 class ObjectInitializedEvent(ObjectModifiedEvent):
     """An object is being initialised, i.e. populated for the first time
     """
     implements(IObjectInitializedEvent)
 
+
 class WebDAVObjectInitializedEvent(ObjectInitializedEvent):
     """An object is being initialised via WebDAV
     """
     implements(IWebDAVObjectInitializedEvent)
 
+
 class ObjectEditedEvent(ObjectModifiedEvent):
     """An object is being edited, i.e. modified after the first save
     """
     implements(IObjectEditedEvent)
 
+
 class WebDAVObjectEditedEvent(ObjectEditedEvent):
     """An object is being edited via WebDAV
     """
     implements(IWebDAVObjectEditedEvent)
 
+
 class EditBegunEvent(ObjectEvent):
     """An edit operation was begun
     """
     implements(IEditBegunEvent)
 
+
 class EditCancelledEvent(ObjectEvent):
     """An edit operation was cancelled
     """
diff --git a/Products/Archetypes/examples/ATBIFolder.py b/Products/Archetypes/examples/ATBIFolder.py
index 9c1ed3c..01d69e2 100644
--- a/Products/Archetypes/examples/ATBIFolder.py
+++ b/Products/Archetypes/examples/ATBIFolder.py
@@ -4,6 +4,7 @@
 
 schema = BaseFolderSchema
 
+
 class ATBIFolder(AllowedTypesByIfaceMixin, BaseFolder):
     """A simple folder that uses AllowedTypesByIfaceMixin"""
     schema = schema
diff --git a/Products/Archetypes/examples/ComplexType.py b/Products/Archetypes/examples/ComplexType.py
index 50740c1..59774d4 100644
--- a/Products/Archetypes/examples/ComplexType.py
+++ b/Products/Archetypes/examples/ComplexType.py
@@ -19,46 +19,48 @@
 
 schema = atapi.Schema(tuple(field_instances) + (
     atapi.LinesField('selectionlinesfield1',
-               vocabulary='_get_selection_vocab',
-               enforceVocabulary=1,
-               widget=atapi.SelectionWidget(label='Selection'),
-               ),
+                     vocabulary='_get_selection_vocab',
+                     enforceVocabulary=1,
+                     widget=atapi.SelectionWidget(label='Selection'),
+                     ),
     atapi.LinesField('selectionlinesfield2',
-               vocabulary='_get_selection_vocab',
-               widget=atapi.SelectionWidget(label='Selection',i18n_domain="attesti18n"),
-               ),
+                     vocabulary='_get_selection_vocab',
+                     widget=atapi.SelectionWidget(
+                         label='Selection', i18n_domain="attesti18n"),
+                     ),
     atapi.LinesField('selectionlinesfield3',
-               vocabulary='_get_selection_vocab2',
-               widget=atapi.MultiSelectionWidget(label='MultiSelection',i18n_domain="attesti18n"),
-               ),
+                     vocabulary='_get_selection_vocab2',
+                     widget=atapi.MultiSelectionWidget(
+                         label='MultiSelection', i18n_domain="attesti18n"),
+                     ),
     atapi.TextField('textarea_appendonly',
-              widget=atapi.TextAreaWidget(label='TextArea',
-                                    append_only=1,),
-              ),
+                    widget=atapi.TextAreaWidget(label='TextArea',
+                                                append_only=1,),
+                    ),
     atapi.TextField('textarea_appendonly_timestamp',
-              widget=atapi.TextAreaWidget(label='TextArea',
-                                    append_only=1,
-                                    timestamp=1,),
-              ),
+                    widget=atapi.TextAreaWidget(label='TextArea',
+                                                append_only=1,
+                                                timestamp=1,),
+                    ),
     atapi.TextField('textarea_maxlength',
-              widget=atapi.TextAreaWidget(label='TextArea',
-                                    maxlength=20,),
-              ),
+                    widget=atapi.TextAreaWidget(label='TextArea',
+                                                maxlength=20,),
+                    ),
     atapi.TextField('richtextfield',
-              allowable_content_types=('text/plain',
-                                       'text/structured',
-                                       'text/restructured',
-                                       'text/html',
-                                       'application/msword'),
-              widget=atapi.RichWidget(label='rich'),
-              ),
+                    allowable_content_types=('text/plain',
+                                             'text/structured',
+                                             'text/restructured',
+                                             'text/html',
+                                             'application/msword'),
+                    widget=atapi.RichWidget(label='rich'),
+                    ),
     atapi.ReferenceField('referencefield',
-                   relationship='complextype',
-                   widget=atapi.ReferenceWidget(addable=1),
-                   allowed_types=('ComplexType', ),
-                   multiValued=1,
-                  ),
-    )) + atapi.ExtensibleMetadata.schema
+                         relationship='complextype',
+                         widget=atapi.ReferenceWidget(addable=1),
+                         allowed_types=('ComplexType', ),
+                         multiValued=1,
+                         ),
+)) + atapi.ExtensibleMetadata.schema
 
 
 _domain1 = MessageFactory('domain1')
@@ -77,7 +79,7 @@ def _get_selection_vocab(self):
             ('complex', u'C\xf6mpl\xe8x'),
             ('bar', _domain1(u'Bar')),
             ('hello', _domain2(u'Hello')),
-            ))
+        ))
 
     def _get_selection_vocab2(self):
         return atapi.DisplayList((
@@ -85,7 +87,7 @@ def _get_selection_vocab2(self):
             ('complex2', u'C\xf6mpl\xe8x 2'),
             ('bar2', _domain1(u'Bar 2')),
             ('hello2', _domain2(u'Hello 2')),
-            ))
+        ))
 
 
 atapi.registerType(ComplexType, PKG_NAME)
diff --git a/Products/Archetypes/examples/DDocument.py b/Products/Archetypes/examples/DDocument.py
index 2a2acd4..9b4430e 100644
--- a/Products/Archetypes/examples/DDocument.py
+++ b/Products/Archetypes/examples/DDocument.py
@@ -5,51 +5,51 @@
 
 schema = atapi.BaseSchema + atapi.Schema((
     atapi.TextField('teaser',
-              searchable=1,
-              widget=atapi.TextAreaWidget(description="""A short lead-in to the
+                    searchable=1,
+                    widget=atapi.TextAreaWidget(description="""A short lead-in to the
               article so that we might get people to read the body""",
-                                    label="Teaser",
-                                    rows=3)),
+                                                label="Teaser",
+                                                rows=3)),
 
     # Using a bare ObjetField doesn't make sense ...
-    #ObjectField('author'),
+    # ObjectField('author'),
     atapi.StringField('author'),
 
     atapi.TextField('body',
-              required=1,
-              primary=1,
-              searchable=1,
-              default_output_type='text/html',
-              allowable_content_types=('text/restructured',
-                                       'text/plain',
-                                       'text/html',
-                                       'application/msword'),
-              widget=atapi.RichWidget(),
-              ),
+                    required=1,
+                    primary=1,
+                    searchable=1,
+                    default_output_type='text/html',
+                    allowable_content_types=('text/restructured',
+                                             'text/plain',
+                                             'text/html',
+                                             'application/msword'),
+                    widget=atapi.RichWidget(),
+                    ),
 
     atapi.IntegerField("number",
-                 index="FieldIndex",
-                 default=42,
-                 validators=('isInt',),
-                 ),
+                       index="FieldIndex",
+                       default=42,
+                       validators=('isInt',),
+                       ),
 
     atapi.ImageField('image',
-               default_output_type='image/jpeg',
-               allowable_content_types=('image/*',),
-               widget=atapi.ImageWidget()),
+                     default_output_type='image/jpeg',
+                     allowable_content_types=('image/*',),
+                     widget=atapi.ImageWidget()),
 
     atapi.ReferenceField('related',
-                   relationship='related',
-                   multiValued=True,
-                   widget=atapi.ReferenceWidget(),
-                   keepReferencesOnCopy=True),
+                         relationship='related',
+                         multiValued=True,
+                         widget=atapi.ReferenceWidget(),
+                         keepReferencesOnCopy=True),
 
     atapi.ReferenceField('rel2',
-                   relationship='rel2',
-                   multiValued=True,
-                   widget=atapi.ReferenceWidget(),
-                   keepReferencesOnCopy=True),
-    ),
+                         relationship='rel2',
+                         multiValued=True,
+                         widget=atapi.ReferenceWidget(),
+                         keepReferencesOnCopy=True),
+),
 
     marshall=PrimaryFieldMarshaller()) + TemplateMixin.schema
 
diff --git a/Products/Archetypes/examples/Fact.py b/Products/Archetypes/examples/Fact.py
index 0f8df72..2183b19 100644
--- a/Products/Archetypes/examples/Fact.py
+++ b/Products/Archetypes/examples/Fact.py
@@ -24,10 +24,11 @@
 
     StringField('url',
                 widget=StringWidget(description="A URL citing the fact",
-                                  label="URL"),
+                                    label="URL"),
                 validators=('isURL',),
                 ),
-    ))
+))
+
 
 class Fact(BaseContent):
     """A quoteable fact or tidbit"""
diff --git a/Products/Archetypes/examples/RefNode.py b/Products/Archetypes/examples/RefNode.py
index 997cfc0..6c39bea 100644
--- a/Products/Archetypes/examples/RefNode.py
+++ b/Products/Archetypes/examples/RefNode.py
@@ -25,7 +25,7 @@
                    relationship="D"
                    ),
 
-    ))
+))
 
 
 class Refnode(BaseContent):
diff --git a/Products/Archetypes/examples/SimpleBTreeFolder.py b/Products/Archetypes/examples/SimpleBTreeFolder.py
index b1139d7..ab2a173 100644
--- a/Products/Archetypes/examples/SimpleBTreeFolder.py
+++ b/Products/Archetypes/examples/SimpleBTreeFolder.py
@@ -3,6 +3,7 @@
 
 schema = BaseSchema
 
+
 class SimpleBTreeFolder(BaseBTreeFolder):
     """A simple folderish archetype"""
     schema = schema
diff --git a/Products/Archetypes/examples/SimpleFile.py b/Products/Archetypes/examples/SimpleFile.py
index 15748df..13b5a6a 100644
--- a/Products/Archetypes/examples/SimpleFile.py
+++ b/Products/Archetypes/examples/SimpleFile.py
@@ -8,8 +8,9 @@
               primary=1,
               widget=FileWidget(),
               ),
-    ),
-      marshall=PrimaryFieldMarshaller())
+),
+    marshall=PrimaryFieldMarshaller())
+
 
 class SimpleFile(BaseContent):
     """An File (test) type"""
diff --git a/Products/Archetypes/examples/SimpleFolder.py b/Products/Archetypes/examples/SimpleFolder.py
index 3705436..19032ca 100644
--- a/Products/Archetypes/examples/SimpleFolder.py
+++ b/Products/Archetypes/examples/SimpleFolder.py
@@ -3,6 +3,7 @@
 
 schema = BaseSchema
 
+
 class SimpleFolder(BaseFolder):
     """A simple folderish archetype"""
     schema = schema
diff --git a/Products/Archetypes/examples/SimpleType.py b/Products/Archetypes/examples/SimpleType.py
index d2c235b..14f40e5 100644
--- a/Products/Archetypes/examples/SimpleType.py
+++ b/Products/Archetypes/examples/SimpleType.py
@@ -5,19 +5,20 @@
 
 schema = atapi.BaseSchema + atapi.Schema((
     atapi.TextField('body',
-              required=1,
-              searchable=1,
-              default_output_type='text/html',
-              allowable_content_types=('text/plain',
-                                       'text/restructured',
-                                       'text/html',
-                                       'application/msword'),
-              widget=atapi.RichWidget(description="""Enter or upload text for the Body of the document"""),
-              ),
+                    required=1,
+                    searchable=1,
+                    default_output_type='text/html',
+                    allowable_content_types=('text/plain',
+                                             'text/restructured',
+                                             'text/html',
+                                             'application/msword'),
+                    widget=atapi.RichWidget(
+                        description="""Enter or upload text for the Body of the document"""),
+                    ),
     atapi.StringField('ptype',
-              default_method='Type'
-              ),
-    ))
+                      default_method='Type'
+                      ),
+))
 
 
 class SimpleType(atapi.BaseContent):
@@ -49,6 +50,7 @@ class SimpleProtectedType(SimpleType):
         f.write_permission = TestWrite
 
     security.declareProtected(TestView, 'foo')
+
     def foo(self):
         return 'bar'
 
diff --git a/Products/Archetypes/exceptions.py b/Products/Archetypes/exceptions.py
index cfdd5f0..ac3224f 100644
--- a/Products/Archetypes/exceptions.py
+++ b/Products/Archetypes/exceptions.py
@@ -1,14 +1,18 @@
 class ObjectFieldException(Exception):
     pass
 
+
 class TextFieldException(ObjectFieldException):
     pass
 
+
 class FileFieldException(ObjectFieldException):
     pass
 
+
 class ReferenceException(Exception):
     pass
 
+
 class SchemaException(Exception):
     pass
diff --git a/Products/Archetypes/exportimport/archetypetool.py b/Products/Archetypes/exportimport/archetypetool.py
index 039ffca..bb88cd1 100644
--- a/Products/Archetypes/exportimport/archetypetool.py
+++ b/Products/Archetypes/exportimport/archetypetool.py
@@ -41,7 +41,7 @@ def _initCatalogSettings(self, node):
             if child.nodeName == 'catalogmap':
                 for type in child.getElementsByTagName('type'):
                     portaltype = type.getAttribute('portal_type')
-                    catalogs = [e.getAttribute('value') \
+                    catalogs = [e.getAttribute('value')
                                 for e in type.getElementsByTagName('catalog')]
                     already = [cat.getId() for cat in
                                self.context.getCatalogsByType(portaltype)]
diff --git a/Products/Archetypes/fieldproperty.py b/Products/Archetypes/fieldproperty.py
index 1535965..575df73 100644
--- a/Products/Archetypes/fieldproperty.py
+++ b/Products/Archetypes/fieldproperty.py
@@ -7,6 +7,7 @@
 
 from zope.site.hooks import getSite
 
+
 class ATFieldProperty(object):
     """Field properties based on Archetypes schema
 
@@ -111,6 +112,7 @@ def __set__(self, inst, value):
             value = self._set_transform(value)
         field.set(inst, value)
 
+
 class ATToolDependentFieldProperty(ATFieldProperty):
     """A version of the field property type which is able to acquire
     tools. This uses a not-very-nice acquisition hack, and is not
@@ -174,10 +176,12 @@ def __set__(self, inst, value):
             value = self._set_transform(value)
         field.set(inst.__of__(getSite()), value)
 
+
 class ATReferenceFieldProperty(ATToolDependentFieldProperty):
     """A more friendly/use-case-specific name for ATReferenceFieldProperty.
     """
 
+
 class ATDateTimeFieldProperty(ATFieldProperty):
     """A field property for DateTime fields. This takes care of converting
     to and from a Python datetime.
@@ -212,7 +216,8 @@ class ATDateTimeFieldProperty(ATFieldProperty):
     """
 
     def __init__(self, name):
-        super(ATDateTimeFieldProperty, self).__init__(name, self._zope2python_dt, self._python2zope_dt)
+        super(ATDateTimeFieldProperty, self).__init__(
+            name, self._zope2python_dt, self._python2zope_dt)
 
     def _zope2python_dt(self, zope_dt):
         if zope_dt is None:
diff --git a/Products/Archetypes/generator/widget.py b/Products/Archetypes/generator/widget.py
index 8ca85f9..97d6ea5 100644
--- a/Products/Archetypes/generator/widget.py
+++ b/Products/Archetypes/generator/widget.py
@@ -9,6 +9,7 @@
 
 
 class iwidget(Interface):
+
     def __call__(instance, context=None):
         """Returns a rendered fragment that can be included in a larger
         context when called by a renderer.
diff --git a/Products/Archetypes/interfaces/__init__.py b/Products/Archetypes/interfaces/__init__.py
index d8278db..7d08332 100644
--- a/Products/Archetypes/interfaces/__init__.py
+++ b/Products/Archetypes/interfaces/__init__.py
@@ -44,4 +44,4 @@
     "Please use the canonical interface from OFS. "
     "This alias will be removed in the next major version.",
     IOrderedContainer='OFS.interfaces:IOrderedContainer',
-    )
+)
diff --git a/Products/Archetypes/interfaces/annotations.py b/Products/Archetypes/interfaces/annotations.py
index 1b1fc98..c2c4ff5 100644
--- a/Products/Archetypes/interfaces/annotations.py
+++ b/Products/Archetypes/interfaces/annotations.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,14 +21,16 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from zope.interface import Interface
 
+
 class IATAnnotations(Interface):
     """
     """
 
+
 class IATAnnotatable(Interface):
     """
     """
diff --git a/Products/Archetypes/interfaces/athistoryaware.py b/Products/Archetypes/interfaces/athistoryaware.py
index c3c6cf9..fc254b5 100644
--- a/Products/Archetypes/interfaces/athistoryaware.py
+++ b/Products/Archetypes/interfaces/athistoryaware.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface
 
+
 class IATHistoryAware(Interface):
     """Archetypes history awareness
 
diff --git a/Products/Archetypes/interfaces/edit.py b/Products/Archetypes/interfaces/edit.py
index 870b6e0..78973ee 100644
--- a/Products/Archetypes/interfaces/edit.py
+++ b/Products/Archetypes/interfaces/edit.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface
 
+
 class IEditForm(Interface):
     """Archetypes edit form view
     """
diff --git a/Products/Archetypes/interfaces/event.py b/Products/Archetypes/interfaces/event.py
index f4225a4..d0b9e1b 100644
--- a/Products/Archetypes/interfaces/event.py
+++ b/Products/Archetypes/interfaces/event.py
@@ -6,26 +6,32 @@
 
 # Modification
 
+
 class IObjectInitializedEvent(IObjectModifiedEvent):
     """An object is being initialised, i.e. populated for the first time
     """
 
+
 class IWebDAVObjectInitializedEvent(IObjectInitializedEvent):
     """An object is being initialized via WebDAV
     """
 
+
 class IObjectEditedEvent(IObjectModifiedEvent):
     """An object is being edited, i.e. modified after the first save
     """
 
+
 class IWebDAVObjectEditedEvent(IObjectEditedEvent):
     """An object is being edited via WebDAV
     """
 
+
 class IEditBegunEvent(IObjectEvent):
     """An event signalling that editing has begun on an object
     """
 
+
 class IEditCancelledEvent(IObjectEvent):
     """An event signalling that editing was cancelled on the given object
     """
diff --git a/Products/Archetypes/interfaces/field.py b/Products/Archetypes/interfaces/field.py
index 25c5fec..6817b65 100644
--- a/Products/Archetypes/interfaces/field.py
+++ b/Products/Archetypes/interfaces/field.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface, Attribute
 
+
 class IField(Interface):
     """ Interface for fields """
 
@@ -206,12 +207,13 @@ def get_size(instance):
         lists/tuples/dicts.
         """
 
+
 class IFileField(IObjectField):
     """Interface fora fields which (may) contain a file like FileField or
     TextField
     """
 
-    #content_class = Attribute("""Class that is used to wrap the data like
+    # content_class = Attribute("""Class that is used to wrap the data like
     #                              OFS.Image.File for FileField"""
 
     # private
@@ -248,49 +250,61 @@ def download(instance):
         Writes data including file name and content type to RESPONSE
         """
 
+
 class IStringField(IField):
     """Marker interface for string fields
     """
 
+
 class ITextField(IFileField):
     """Marker interface for text fields
     """
 
+
 class IDateTimeField(IField):
     """Marker interface for date/time field
     """
 
+
 class ILinesField(IField):
     """Marker interface for lines fields
     """
 
+
 class IIntegerField(IField):
     """Marker interface for integer fields
     """
 
+
 class IFloatField(IField):
     """Marker interface for float fields
     """
 
+
 class IFixedPointField(IField):
     """Marker interface for fixed point fields
     """
 
+
 class IReferenceField(IField):
     """Marker interface for reference fields
     """
 
+
 class IComputedField(IField):
     """Marker interface for computed fields
     """
 
+
 class IBooleanField(IField):
     """Marker interface for boolean fields
     """
 
+
 class IImageField(IFileField):
     """ Marker interface for detecting an image field """
 
+
 class IFieldDefaultProvider(Interface):
     """Register a named adapter for your content type providing
     this interface, with a name that is equal to the name of a
diff --git a/Products/Archetypes/interfaces/marshall.py b/Products/Archetypes/interfaces/marshall.py
index 65684e4..c5df6db 100644
--- a/Products/Archetypes/interfaces/marshall.py
+++ b/Products/Archetypes/interfaces/marshall.py
@@ -1,5 +1,6 @@
 from Products.Archetypes.interfaces.layer import ILayer
 
+
 class IMarshall(ILayer):
     """De/Marshall data.
     """
diff --git a/Products/Archetypes/interfaces/orderedfolder.py b/Products/Archetypes/interfaces/orderedfolder.py
index 6d3523d..f976bf3 100644
--- a/Products/Archetypes/interfaces/orderedfolder.py
+++ b/Products/Archetypes/interfaces/orderedfolder.py
@@ -33,4 +33,4 @@ def move_object_to_bottom(id):
     "Please use the canonical interface from OFS. "
     "This alias will be removed in the next major version.",
     IOrderedContainer='OFS.interfaces:IOrderedContainer',
-    )
+)
diff --git a/Products/Archetypes/interfaces/referenceable.py b/Products/Archetypes/interfaces/referenceable.py
index a4c65e0..124bc7d 100644
--- a/Products/Archetypes/interfaces/referenceable.py
+++ b/Products/Archetypes/interfaces/referenceable.py
@@ -1,5 +1,6 @@
 from plone.uuid.interfaces import IUUIDAware
 
+
 class IReferenceable(IUUIDAware):
     """ Referenceable """
 
diff --git a/Products/Archetypes/interfaces/schema.py b/Products/Archetypes/interfaces/schema.py
index 02d2b62..6d51be3 100644
--- a/Products/Archetypes/interfaces/schema.py
+++ b/Products/Archetypes/interfaces/schema.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface
 
+
 class ISchemata(Interface):
     """Schemata (roughly) represents a group of fields"""
 
@@ -76,6 +77,7 @@ def searchable():
         searchable.
         """
 
+
 class ISchema(ISchemata):
     """ Schema """
 
@@ -159,6 +161,7 @@ def moveField(name, direction=None, pos=None, after=None, before=None):
 
         """
 
+
 class ICompositeSchema(ISchema):
     """A composite schema that delegates to underlying ones"""
 
@@ -168,12 +171,14 @@ def getSchemas():
     def addSchemas(schemas):
         """Append schemas to composite"""
 
+
 class IBindableSchema(ISchema):
     """A Schema that can be bound to a context object"""
 
     def bind(context):
         """Bind schema to context"""
 
+
 class IManagedSchema(ISchema):
     """A schema that can be managed (ordering schemata,
     ordering fields, moving fields between schematas)
@@ -190,6 +195,7 @@ def moveSchemata(name, direction):
         (direction=1)
         """
 
+
 class IMultiPageSchema(Interface):
     """A marker interface for schemas which have to be loaded on seperate
     HTML pages instead of beeing displayed on one page. This should only be
diff --git a/Products/Archetypes/interfaces/storage.py b/Products/Archetypes/interfaces/storage.py
index 37708b8..8c70d93 100644
--- a/Products/Archetypes/interfaces/storage.py
+++ b/Products/Archetypes/interfaces/storage.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface
 
+
 class IStorage(Interface):
     """Abstraction around the storage of field level data"""
 
@@ -14,11 +15,12 @@ def set(name, instance, value, **kwargs):
         instance"""
 
     # XXX all implementions have no 'value' argument
-    #def unset(name, instance, value, **kwargs):
+    # def unset(name, instance, value, **kwargs):
     def unset(name, instance, **kwargs):
         """unset a value under the key 'name'.
         used when changing storage for a field."""
 
+
 class ISQLStorage(IStorage):
     """ Marker interface for distinguishing ISQLStorages """
     pass
diff --git a/Products/Archetypes/interfaces/templatemixin.py b/Products/Archetypes/interfaces/templatemixin.py
index 58963b0..b58364d 100644
--- a/Products/Archetypes/interfaces/templatemixin.py
+++ b/Products/Archetypes/interfaces/templatemixin.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface, Attribute
 
+
 class ITemplateMixin(Interface):
     """Marker interface for TemplateMixin
     """
diff --git a/Products/Archetypes/interfaces/utils.py b/Products/Archetypes/interfaces/utils.py
index 2bfbe48..b7d7994 100644
--- a/Products/Archetypes/interfaces/utils.py
+++ b/Products/Archetypes/interfaces/utils.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface
 
+
 class IUtils(Interface):
     """Archetypes utils view
     """
diff --git a/Products/Archetypes/interfaces/vocabulary.py b/Products/Archetypes/interfaces/vocabulary.py
index 2fb8394..a3a50ae 100644
--- a/Products/Archetypes/interfaces/vocabulary.py
+++ b/Products/Archetypes/interfaces/vocabulary.py
@@ -1,5 +1,6 @@
 from zope.interface import Interface, Attribute
 
+
 class IVocabulary(Interface):
     """ interface for vocabularies used in fields """
 
diff --git a/Products/Archetypes/log.py b/Products/Archetypes/log.py
index cf028ae..8f9f60a 100644
--- a/Products/Archetypes/log.py
+++ b/Products/Archetypes/log.py
@@ -2,5 +2,6 @@
 
 logger = logging.getLogger('Archetypes')
 
+
 def log(message, summary='', level=logging.INFO):
     logger.log(level, '%s \n%s', summary, message)
diff --git a/Products/Archetypes/references.py b/Products/Archetypes/references.py
index 9172a14..ce33c3f 100644
--- a/Products/Archetypes/references.py
+++ b/Products/Archetypes/references.py
@@ -3,6 +3,7 @@
 
 
 class HoldingReference(Reference):
+
     def beforeTargetDeleteInformSource(self):
         raise ReferenceException, ("Can't delete target, "
                                    "its held by %s" %
@@ -10,6 +11,7 @@ def beforeTargetDeleteInformSource(self):
 
 
 class CascadeReference(Reference):
+
     def beforeSourceDeleteInformTarget(self):
         tObj = self.getTargetObject()
         parent = tObj.aq_parent
@@ -17,6 +19,8 @@ def beforeSourceDeleteInformTarget(self):
 
 
 FOLDERISH_REFERENCE = "at_folder_reference"
+
+
 class FolderishReference(Reference):
     """Used by reference folder under the covers of the folderish API"""
 
diff --git a/Products/Archetypes/tests/__init__.py b/Products/Archetypes/tests/__init__.py
index cbe18b4..8a53331 100644
--- a/Products/Archetypes/tests/__init__.py
+++ b/Products/Archetypes/tests/__init__.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,6 +21,6 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """Archetypes test package.
 """
diff --git a/Products/Archetypes/tests/attestcase.py b/Products/Archetypes/tests/attestcase.py
index e4f2899..4a771bc 100644
--- a/Products/Archetypes/tests/attestcase.py
+++ b/Products/Archetypes/tests/attestcase.py
@@ -5,11 +5,12 @@
 
 def setupSampleTypeProfile():
     profile_registry.registerProfile('Archetypes_sampletypes',
-        'Archetypes Sample Content Types',
-        'Extension profile including Archetypes sample content types',
-        'profiles/sample_types',
-        'Products.Archetypes',
-        EXTENSION)
+                                     'Archetypes Sample Content Types',
+                                     'Extension profile including Archetypes sample content types',
+                                     'profiles/sample_types',
+                                     'Products.Archetypes',
+                                     EXTENSION)
+
 
 class ATTestCaseFixture(bbb.PloneTestCaseFixture):
 
@@ -28,6 +29,7 @@ def setUpPloneSite(self, portal):
 AT_FUNCTIONAL_TESTING = FunctionalTesting(bases=(AT_FIXTURE,),
                                           name='Archetypes:Functional')
 
+
 class ATTestCase(bbb.PloneTestCase):
     """Simple AT test case
     """
diff --git a/Products/Archetypes/tests/test_annotation.py b/Products/Archetypes/tests/test_annotation.py
index 2482950..dc07ee2 100644
--- a/Products/Archetypes/tests/test_annotation.py
+++ b/Products/Archetypes/tests/test_annotation.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from Products.Archetypes.atapi import BaseSchema, Schema, StringField, \
@@ -33,18 +33,19 @@
 from Acquisition import aq_base
 
 
-class AnnDummy(Dummy): pass
+class AnnDummy(Dummy):
+    pass
 
 annschema = BaseSchema + Schema((
-     StringField('string',
-         default=u'stringdefault',
-         storage=AnnotationStorage(),
-         ),
-     StringField('meta',
-         default='metadefault',
-         storage=MetadataAnnotationStorage(),
-         ),
-    ))
+    StringField('string',
+                default=u'stringdefault',
+                storage=AnnotationStorage(),
+                ),
+    StringField('meta',
+                default='metadefault',
+                storage=MetadataAnnotationStorage(),
+                ),
+))
 
 
 def gen_anndummy():
@@ -116,7 +117,8 @@ def test_setup(self):
         field = dummy.getField('meta')
         self.assertTrue(isinstance(field.storage, MetadataAnnotationStorage))
         self.assertTrue(self.ann.hasSubkey(AT_MD_STORAGE, 'meta'))
-        self.assertEqual(self.ann.getSubkey(AT_MD_STORAGE, subkey='meta'), 'metadefault')
+        self.assertEqual(self.ann.getSubkey(
+            AT_MD_STORAGE, subkey='meta'), 'metadefault')
 
     def test_gestset(self):
         dummy = self.dummy
@@ -141,7 +143,8 @@ def test_setup(self):
         field = dummy.getField('string')
         self.assertTrue(isinstance(field.storage, AnnotationStorage))
         self.assertTrue(self.ann.hasSubkey(AT_ANN_STORAGE, 'string'))
-        self.assertEqual(self.ann.getSubkey(AT_ANN_STORAGE, subkey='string'), 'stringdefault')
+        self.assertEqual(self.ann.getSubkey(
+            AT_ANN_STORAGE, subkey='string'), 'stringdefault')
 
     def test_gestset(self):
         dummy = self.dummy
diff --git a/Products/Archetypes/tests/test_athistoryaware.py b/Products/Archetypes/tests/test_athistoryaware.py
index 17a1412..b64cffc 100644
--- a/Products/Archetypes/tests/test_athistoryaware.py
+++ b/Products/Archetypes/tests/test_athistoryaware.py
@@ -35,6 +35,7 @@ def __init__(self):
 
 
 class ATHistoryAwareTests(unittest.TestCase):
+
     def setUp(self):
         # Set up a ZODB and Application object. We can't use DemoStorage
         # as it doesn't support the history() API.
diff --git a/Products/Archetypes/tests/test_baseobject.py b/Products/Archetypes/tests/test_baseobject.py
index 6f5fbf7..063a07b 100644
--- a/Products/Archetypes/tests/test_baseobject.py
+++ b/Products/Archetypes/tests/test_baseobject.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from Products.Archetypes.tests.utils import mkDummyInContext
@@ -31,6 +31,7 @@
 
 
 class DummyDiscussionTool:
+
     def isDiscussionAllowedFor(self, content):
         return False
 
@@ -39,10 +40,10 @@ def overrideDiscussionFor(self, content, allowDiscussion):
 
 MULTIPLEFIELD_LIST = atapi.DisplayList(
     (
-    ('1', _(u'Option 1 : printemps')),
-    ('2', unicode('Option 2 : \xc3\xa9t\xc3\xa9', 'utf-8')),  # e-acute t e-acute
-    ('3', u'Option 3 : automne'),
-    ('4', _(u'option3', default=u'Option 3 : hiver')),
+        ('1', _(u'Option 1 : printemps')),
+        ('2', unicode('Option 2 : \xc3\xa9t\xc3\xa9', 'utf-8')),  # e-acute t e-acute
+        ('3', u'Option 3 : automne'),
+        ('4', _(u'option3', default=u'Option 3 : hiver')),
     ))
 
 schema = atapi.BaseSchema + atapi.Schema((
@@ -52,12 +53,12 @@ def overrideDiscussionFor(self, content, allowDiscussion):
         vocabulary=MULTIPLEFIELD_LIST,
         widget=atapi.MultiSelectionWidget(
             i18n_domain='plone',
-            ),
         ),
+    ),
     atapi.TextField(
         'TEXTFIELD',
         primary=True,
-        ),
+    ),
 ))
 
 
@@ -74,7 +75,7 @@ class BaseObjectTest(ATSiteTestCase):
     def afterSetUp(self):
         ATSiteTestCase.afterSetUp(self)
         self._dummy = mkDummyInContext(Dummy, oid='dummy', context=self.portal,
-                                      schema=schema)
+                                       schema=schema)
 
     def test_searchableText(self):
         """
@@ -91,13 +92,13 @@ def test_searchableText(self):
         # cases, which during test runs would mean they would get
         # formatted as '[[plone][some value]]' instead of 'some value'.
         self.assertEqual(searchable,
-            '1 2 Option 1 : printemps Option 2 : \xc3\xa9t\xc3\xa9')
+                         '1 2 Option 1 : printemps Option 2 : \xc3\xa9t\xc3\xa9')
 
         dummy.setMULTIPLEFIELD(['3', '4'])
         searchable = dummy.SearchableText()
 
         self.assertEqual(searchable,
-            '3 4 Option 3 : automne option3')
+                         '3 4 Option 3 : automne option3')
 
     def test_searchableTextUsesIndexMethod(self):
         """See http://dev.plone.org/archetypes/ticket/645
diff --git a/Products/Archetypes/tests/test_baseschema.py b/Products/Archetypes/tests/test_baseschema.py
index c3c84cb..c29ed85 100644
--- a/Products/Archetypes/tests/test_baseschema.py
+++ b/Products/Archetypes/tests/test_baseschema.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 
@@ -49,7 +49,8 @@ class BaseSchemaTest(ATSiteTestCase):
     def afterSetUp(self):
         ATSiteTestCase.afterSetUp(self)
         atapi.registerType(Dummy, 'Archetypes')
-        content_types, constructors, ftis = atapi.process_types(atapi.listTypes(), PKG_NAME)
+        content_types, constructors, ftis = atapi.process_types(
+            atapi.listTypes(), PKG_NAME)
         portal = self.portal
         dummy = Dummy(oid='dummy')
         # put dummy in context of portal
@@ -80,7 +81,8 @@ def test_id(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'string')
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.AttributeStorage())
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.IdWidget))
@@ -109,14 +111,15 @@ def test_title(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'string')
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.AttributeStorage())
         self.assertTrue(field.validators == ())
         self.assertTrue(isinstance(field.widget, atapi.StringWidget))
         vocab = field.Vocabulary(dummy)
         self.assertTrue(isinstance(vocab, atapi.DisplayList))
         self.assertTrue(tuple(vocab) == ())
 
-    ### Metadata Properties
+    # Metadata Properties
 
     def test_allowdiscussion(self):
         dummy = self._dummy
@@ -138,7 +141,8 @@ def test_allowdiscussion(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'boolean')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget))
 
@@ -164,7 +168,8 @@ def test_subject(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'lines')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.TagsWidget))
         vocab = field.Vocabulary(dummy)
@@ -193,7 +198,8 @@ def test_description(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'text')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.TextAreaWidget))
         vocab = field.Vocabulary(dummy)
@@ -222,7 +228,8 @@ def test_contributors(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'lines')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.AjaxSelectWidget))
         vocab = field.Vocabulary(dummy)
@@ -251,7 +258,8 @@ def test_effectivedate(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'datetime')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.DatetimeWidget))
         vocab = field.Vocabulary(dummy)
@@ -280,7 +288,8 @@ def test_expirationdate(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'datetime')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.DatetimeWidget))
         vocab = field.Vocabulary(dummy)
@@ -309,7 +318,8 @@ def test_language(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'string')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.SelectWidget))
         vocab = field.Vocabulary(dummy)
@@ -338,7 +348,8 @@ def test_rights(self):
         self.assertTrue(field.force == '')
         self.assertTrue(field.type == 'text')
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage())
+        self.assertTrue(field.getLayerImpl('storage')
+                        == atapi.MetadataStorage())
         self.assertTrue(field.validators == EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.TextAreaWidget))
         vocab = field.Vocabulary(dummy)
diff --git a/Products/Archetypes/tests/test_baseunit.py b/Products/Archetypes/tests/test_baseunit.py
index 859c992..36ffb1a 100644
--- a/Products/Archetypes/tests/test_baseunit.py
+++ b/Products/Archetypes/tests/test_baseunit.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from unittest import TestSuite, makeSuite
 
@@ -72,7 +72,8 @@ def testSame(self):
 input_files = glob.glob(os.path.join(PACKAGE_HOME, "input", "rest*.rst"))
 for f in input_files:
     fname = os.path.split(f)[1]
-    outname = os.path.join(PACKAGE_HOME, "output", '%s.out' % fname.split('.')[0])
+    outname = os.path.join(PACKAGE_HOME, "output",
+                           '%s.out' % fname.split('.')[0])
 
     class BaseUnitTestSubclass(BaseUnitTest):
         input = f
diff --git a/Products/Archetypes/tests/test_browser_utils.py b/Products/Archetypes/tests/test_browser_utils.py
index 1b7bf7d..a405136 100644
--- a/Products/Archetypes/tests/test_browser_utils.py
+++ b/Products/Archetypes/tests/test_browser_utils.py
@@ -11,7 +11,8 @@ class UtilsMethodsTests(ATSiteTestCase):
     def test_translate_vocab_with_special_chars(self):
         vocab = DisplayList((('Sp\xc3\xa9cial char key', 'Sp\xc3\xa9cial char value'),
                              ('normal_key', 'With sp\xc3\xa9cial char'), ))
-        utilsView = getMultiAdapter((self.portal, self.portal.REQUEST), name='at_utils')
+        utilsView = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='at_utils')
         # Note that due to the test setup, the result is expected to
         # be u'[[domain][translation]]'.
         self.assertEqual(utilsView.translate(vocab, value='Sp\xc3\xa9cial char key'),
@@ -28,7 +29,8 @@ def test_translate_integer_display_list(self):
         vocab = IntDisplayList(((1, 'Sp\xc3\xa9cial char value'),
                                 (2, 'two'),
                                 (3, 42), ))
-        utilsView = getMultiAdapter((self.portal, self.portal.REQUEST), name='at_utils')
+        utilsView = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='at_utils')
         self.assertEqual(utilsView.translate(vocab, value=1),
                          u'[[plone][Sp\xe9cial char value]]')
         self.assertEqual(utilsView.translate(vocab, value=2),
@@ -39,7 +41,8 @@ def test_translate_integer_display_list(self):
     def test_translate_empty(self):
         vocab = DisplayList((('one', 'One'),
                              ('two', 'Two'), ))
-        utilsView = getMultiAdapter((self.portal, self.portal.REQUEST), name='at_utils')
+        utilsView = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='at_utils')
         self.assertEqual(utilsView.translate(vocab, value=''), u'')
         self.assertEqual(utilsView.translate(vocab, value=None), u'')
         self.assertEqual(utilsView.translate(vocab, value=[]), u'')
diff --git a/Products/Archetypes/tests/test_classgen.py b/Products/Archetypes/tests/test_classgen.py
index 23d4365..fb0e319 100644
--- a/Products/Archetypes/tests/test_classgen.py
+++ b/Products/Archetypes/tests/test_classgen.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -50,43 +50,44 @@
 
 schema = atapi.BaseSchema + atapi.Schema((
     atapi.TextField('atextfield',
-              default_content_type='text/x-rst',
-              default=default_text,
-              widget=atapi.RichWidget(description="Just a text field for the testing",
-                                  label="A Text Field",
-                                  )),
+                    default_content_type='text/x-rst',
+                    default=default_text,
+                    widget=atapi.RichWidget(description="Just a text field for the testing",
+                                            label="A Text Field",
+                                            )),
 
     atapi.FileField('afilefield',
-              primary=1,
-              widget=atapi.RichWidget(description="Just a file field for the testing",
-                                  label="A File Field",
-                                  )),
+                    primary=1,
+                    widget=atapi.RichWidget(description="Just a file field for the testing",
+                                            label="A File Field",
+                                            )),
 
     atapi.FileField('anotherfilefield', widget=atapi.FileWidget),
 
     atapi.LinesField('alinesfield', widget=atapi.LinesWidget),
 
     atapi.DateTimeField('adatefield',
-                  widget=atapi.CalendarWidget(description="A date field",
-                                        label="A Date Field")),
+                        widget=atapi.CalendarWidget(description="A date field",
+                                                    label="A Date Field")),
 
     atapi.ObjectField('anobjectfield',
-                widget=atapi.StringWidget(description="An object field",
-                                    label="An Object Field"),
-                validators=('isURL',),
-                ),
+                      widget=atapi.StringWidget(description="An object field",
+                                                label="An Object Field"),
+                      validators=('isURL',),
+                      ),
 
     atapi.FixedPointField('afixedpointfield',
-                    widget=atapi.DecimalWidget(description="A fixed point field",
-                                         label="A Fixed Point Field"),
-                    ),
+                          widget=atapi.DecimalWidget(description="A fixed point field",
+                                                     label="A Fixed Point Field"),
+                          ),
     atapi.StringField('awriteonlyfield', mode="w"),
 
     atapi.StringField('areadonlyfield', mode="r"),
-    ))
+))
 
 
 class DummyDiscussionTool:
+
     def isDiscussionAllowedFor(self, content):
         return False
 
@@ -137,7 +138,7 @@ def afterSetUp(self):
 
     def test_methods(self):
         obj = self._dummy
-        #setters
+        # setters
         self.assertTrue(hasattr(obj, 'setAtextfield'))
         self.assertTrue(hasattr(obj, 'setAfilefield'))
         self.assertTrue(hasattr(obj, 'setAlinesfield'))
@@ -146,7 +147,7 @@ def test_methods(self):
         self.assertTrue(hasattr(obj, 'setAfixedpointfield'))
         self.assertTrue(hasattr(obj, 'setAwriteonlyfield'))
         self.assertTrue(not hasattr(obj, 'setAreadonlyfield'))
-        #getters
+        # getters
         self.assertTrue(hasattr(obj, 'getAtextfield'))
         self.assertTrue(hasattr(obj, 'getAfilefield'))
         self.assertTrue(hasattr(obj, 'getAlinesfield'))
@@ -155,7 +156,7 @@ def test_methods(self):
         self.assertTrue(hasattr(obj, 'getAfixedpointfield'))
         self.assertTrue(not hasattr(obj, 'getAwriteonlyfield'))
         self.assertTrue(hasattr(obj, 'getAreadonlyfield'))
-        #raw getters
+        # raw getters
         self.assertTrue(hasattr(obj, 'getRawAtextfield'))
         self.assertTrue(hasattr(obj, 'getRawAfilefield'))
         self.assertTrue(hasattr(obj, 'getRawAlinesfield'))
@@ -250,9 +251,9 @@ def makeFoo(self):
         return 'foo'
 
 foo_field = atapi.StringField('foo',
-                        accessor='makeFoo',
-                        read_permission='Modify portal content',
-                        write_permission='Modify portal content')
+                              accessor='makeFoo',
+                              read_permission='Modify portal content',
+                              write_permission='Modify portal content')
 
 
 class ClassGenSecurityTest(unittest.TestCase):
@@ -267,7 +268,7 @@ def test_security_dont_stomp_existing_decl_perm(self):
         got = SecDummy1.__ac_permissions__
         expected = (('Modify portal content',
                      ('setFoo', 'getRawFoo')),
-                     ('View', ('makeFoo',)),)
+                    ('View', ('makeFoo',)),)
         self.assertEqual(got, expected)
 
     def test_security_dont_stomp_existing_decl_public(self):
diff --git a/Products/Archetypes/tests/test_cmfessentials.py b/Products/Archetypes/tests/test_cmfessentials.py
index 8fde1e3..ca033bd 100644
--- a/Products/Archetypes/tests/test_cmfessentials.py
+++ b/Products/Archetypes/tests/test_cmfessentials.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore import permissions
@@ -46,8 +46,10 @@ def afterSetUp(self):
     def testPermissions(self):
         for content in self.demo_instances:
             self.assertTrue(checkPerm(permissions.View, content))
-            self.assertTrue(checkPerm(permissions.AccessContentsInformation, content))
-            self.assertTrue(checkPerm(permissions.ModifyPortalContent, content))
+            self.assertTrue(
+                checkPerm(permissions.AccessContentsInformation, content))
+            self.assertTrue(
+                checkPerm(permissions.ModifyPortalContent, content))
 
     def testRendering(self):
         # Attempt to call each object and make sure it presents a rendered
diff --git a/Products/Archetypes/tests/test_contenttype.py b/Products/Archetypes/tests/test_contenttype.py
index 88e9629..05c01ac 100644
--- a/Products/Archetypes/tests/test_contenttype.py
+++ b/Products/Archetypes/tests/test_contenttype.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
diff --git a/Products/Archetypes/tests/test_copying.py b/Products/Archetypes/tests/test_copying.py
index f2f9b84..c03b054 100644
--- a/Products/Archetypes/tests/test_copying.py
+++ b/Products/Archetypes/tests/test_copying.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 Unittests for a copying/cutting and pasting archetypes objects.
 """
@@ -48,12 +48,13 @@
 class CutPasteCopyPasteTests(ATSiteTestCase):
 
     def test_copy_and_paste(self):
-        ffrom = makeContent(self.folder, portal_type='SimpleFolder', id='cangucu')
+        ffrom = makeContent(
+            self.folder, portal_type='SimpleFolder', id='cangucu')
         tourist = makeContent(ffrom, portal_type='Fact', id='tourist')
         fto = makeContent(self.folder, portal_type='SimpleFolder', id='london')
         self.assertFalse('tourist' not in ffrom.contentIds())
 
-        #make sure we have _p_jar
+        # make sure we have _p_jar
         transaction.savepoint(optimistic=True)
         cb = ffrom.manage_copyObjects(ffrom.contentIds())
         fto.manage_pasteObjects(cb)
@@ -61,12 +62,13 @@ def test_copy_and_paste(self):
         self.assertFalse('tourist' not in fto.contentIds())
 
     def test_cut_and_paste(self):
-        ffrom = makeContent(self.folder, portal_type='SimpleFolder', id='cangucu')
+        ffrom = makeContent(
+            self.folder, portal_type='SimpleFolder', id='cangucu')
         tourist = makeContent(ffrom, portal_type='Fact', id='tourist')
         fto = makeContent(self.folder, portal_type='SimpleFolder', id='london')
         self.assertFalse('tourist' not in ffrom.contentIds())
 
-        #make sure we have _p_jar
+        # make sure we have _p_jar
         transaction.savepoint(optimistic=True)
         cb = ffrom.manage_cutObjects(ffrom.contentIds())
         fto.manage_pasteObjects(cb)
@@ -187,9 +189,10 @@ def test_copy_paste_sets_ownership(self):
         # Now test executable ownership and "owner" local role
         # "member" should have both.
         file_ob = member_area.copy_of_test_file
-        self.assertEqual(aq_base(file_ob.getOwner().getId()), aq_base(member).getId())
+        self.assertEqual(aq_base(file_ob.getOwner().getId()),
+                         aq_base(member).getId())
         self.assertTrue('Owner' in
-                            file_ob.get_local_roles_for_userid(TEST_USER_ID))
+                        file_ob.get_local_roles_for_userid(TEST_USER_ID))
 
     def test_copy_paste_resets_workflow(self):
         # Copy/pasting a File should reset workflow to the default state
@@ -206,14 +209,14 @@ def test_copy_paste_resets_workflow(self):
         self.assertEqual(wf_tool.getInfoFor(file, 'review_state'), def_state)
         wf_tool.doActionFor(file, 'publish')
         self.assertEqual(wf_tool.getInfoFor(file, 'review_state'),
-                                                                 'published')
+                         'published')
 
         cb = self.folder.manage_copyObjects(['test_file'])
         self.folder.manage_pasteObjects(cb)
 
         file_copy = self.folder.copy_of_test_file
         self.assertEqual(wf_tool.getInfoFor(file_copy, 'review_state'),
-                                                                   def_state)
+                         def_state)
 
     def test_cut_paste_preserves_workflow(self):
         # Cut/pasting a File should preserve workflow state
diff --git a/Products/Archetypes/tests/test_datecomponents.py b/Products/Archetypes/tests/test_datecomponents.py
index e1fdee4..963eb19 100644
--- a/Products/Archetypes/tests/test_datecomponents.py
+++ b/Products/Archetypes/tests/test_datecomponents.py
@@ -11,4 +11,4 @@ def test_suite():
                              package='Products.Archetypes',
                              test_class=ATFunctionalSiteTestCase,
                              optionflags=optionflags),
-        ])
+    ])
diff --git a/Products/Archetypes/tests/test_default_mimetypes.py b/Products/Archetypes/tests/test_default_mimetypes.py
index a17d0f5..7841a80 100644
--- a/Products/Archetypes/tests/test_default_mimetypes.py
+++ b/Products/Archetypes/tests/test_default_mimetypes.py
@@ -19,7 +19,8 @@ def test_ATDocumentDefaultType(self):
 
         self.loginAsPortalOwner()
         # we create a new document:
-        self.portal.invokeFactory('DDocument', id='testdoc', title='TestDocument')
+        self.portal.invokeFactory(
+            'DDocument', id='testdoc', title='TestDocument')
         obj = self.portal.testdoc
         # its text field should have the site wide default 'text/plain'
         textfield = obj.getField('body')
@@ -32,7 +33,8 @@ def test_ATDocumentDefaultType(self):
         setDefaultContentType(self.portal, "text/x-web-markdown")
         # while this raises no error it won't change the default, as we have
         # no properties tool nor properties sheet
-        self.assertEqual(getDefaultContentType(self.portal), 'text/x-web-markdown')
+        self.assertEqual(getDefaultContentType(
+            self.portal), 'text/x-web-markdown')
         self.portal['portal_properties'] = _orignal_pp
         if ptool is not _marker:
             _tool_interface_registry['portal_properties'] = ptool
diff --git a/Products/Archetypes/tests/test_doctests.py b/Products/Archetypes/tests/test_doctests.py
index 1d4d212..b3653c2 100644
--- a/Products/Archetypes/tests/test_doctests.py
+++ b/Products/Archetypes/tests/test_doctests.py
@@ -14,7 +14,7 @@
     'Products.Archetypes.Marshall',
     'Products.Archetypes.fieldproperty',
     'Products.Archetypes.browser.widgets',
-    )
+)
 
 DOCTEST_FILES = (
     'events.txt',
@@ -28,6 +28,7 @@
                doctest.NORMALIZE_WHITESPACE |
                doctest.REPORT_ONLY_FIRST_FAILURE)
 
+
 def test_suite():
     suite = unittest.TestSuite()
     for testmodule in DOCTEST_MODULES:
diff --git a/Products/Archetypes/tests/test_event.py b/Products/Archetypes/tests/test_event.py
index db7967b..41ae374 100644
--- a/Products/Archetypes/tests/test_event.py
+++ b/Products/Archetypes/tests/test_event.py
@@ -114,8 +114,10 @@ def testPostValidatingEvent(self):
         # validation, whilst the pre-validation works before, and may
         # short-circuit schema validation.
 
-        component.provideSubscriptionAdapter(PostValidation, adapts=(IObject2,))
-        component.provideSubscriptionAdapter(PostValidation, adapts=(IObject3,))
+        component.provideSubscriptionAdapter(
+            PostValidation, adapts=(IObject2,))
+        component.provideSubscriptionAdapter(
+            PostValidation, adapts=(IObject3,))
 
         ob = Dummy('dummy')
         directlyProvides(ob, IObject1)
@@ -141,9 +143,12 @@ def testPostValidatingEvent(self):
 
     def testInitializedAndEditedEvent(self):
 
-        component.provideHandler(created_handler, (IObject1, IObjectCreatedEvent,))
-        component.provideHandler(initialized_handler, (IObject1, IObjectInitializedEvent,))
-        component.provideHandler(edited_handler, (IObject1, IObjectEditedEvent,))
+        component.provideHandler(
+            created_handler, (IObject1, IObjectCreatedEvent,))
+        component.provideHandler(
+            initialized_handler, (IObject1, IObjectInitializedEvent,))
+        component.provideHandler(
+            edited_handler, (IObject1, IObjectEditedEvent,))
 
         ob = Dummy('dummy')
         directlyProvides(ob, IObject1)
@@ -166,5 +171,6 @@ def testInitializedAndEditedEvent(self):
 
         sm = component.getSiteManager()
         sm.unregisterHandler(created_handler, (IObject1, IObjectCreatedEvent,))
-        sm.unregisterHandler(initialized_handler, (IObject1, IObjectCreatedEvent,))
+        sm.unregisterHandler(initialized_handler,
+                             (IObject1, IObjectCreatedEvent,))
         sm.unregisterHandler(edited_handler, (IObject1, IObjectCreatedEvent,))
diff --git a/Products/Archetypes/tests/test_extensions_utils.py b/Products/Archetypes/tests/test_extensions_utils.py
index c8c3bd7..98f3834 100644
--- a/Products/Archetypes/tests/test_extensions_utils.py
+++ b/Products/Archetypes/tests/test_extensions_utils.py
@@ -20,7 +20,8 @@ def tearDown(self):
     def test_base_usage(self):
         ComplexType.schema['richtextfield'].index = 'FieldIndex'
         utils.install_indexes(self.portal, StringIO(), (ComplexType,))
-        self.assertTrue('getRichtextfield' in self.portal.portal_catalog.indexes())
+        self.assertTrue(
+            'getRichtextfield' in self.portal.portal_catalog.indexes())
 
     def test_index_method(self):
         ComplexType.schema['richtextfield'].index = 'FieldIndex'
@@ -30,21 +31,24 @@ def test_index_method(self):
 
         ComplexType.schema['richtextfield'].index_method = '_at_accessor'
         utils.install_indexes(self.portal, StringIO(), (ComplexType,))
-        self.assertTrue('getRichtextfield' in self.portal.portal_catalog.indexes())
+        self.assertTrue(
+            'getRichtextfield' in self.portal.portal_catalog.indexes())
 
         ComplexType.schema['richtextfield'].index_method = '_at_edit_accessor'
         utils.install_indexes(self.portal, StringIO(), (ComplexType,))
-        self.assertTrue('getRawRichtextfield' in self.portal.portal_catalog.indexes())
+        self.assertTrue(
+            'getRawRichtextfield' in self.portal.portal_catalog.indexes())
 
     def test_bad_index_method(self):
         ComplexType.schema['richtextfield'].index = 'FieldIndex'
         ComplexType.schema['richtextfield'].index_method = lambda x: 'yop'
         self.assertRaises(ValueError,
-                              utils.install_indexes, self.portal, StringIO(), (ComplexType,))
+                          utils.install_indexes, self.portal, StringIO(), (ComplexType,))
         ComplexType.schema['richtextfield'].index_method = lambda x: 'yop'
         self.assertRaises(ValueError,
-                              utils.install_indexes, self.portal, StringIO(), (ComplexType,))
+                          utils.install_indexes, self.portal, StringIO(), (ComplexType,))
 
-        ComplexType.schema['richtextfield'].index_method = ComplexType._get_selection_vocab
+        ComplexType.schema[
+            'richtextfield'].index_method = ComplexType._get_selection_vocab
         self.assertRaises(ValueError,
-                              utils.install_indexes, self.portal, StringIO(), (ComplexType,))
+                          utils.install_indexes, self.portal, StringIO(), (ComplexType,))
diff --git a/Products/Archetypes/tests/test_externaleditor.py b/Products/Archetypes/tests/test_externaleditor.py
index 2de3ae8..db3996b 100644
--- a/Products/Archetypes/tests/test_externaleditor.py
+++ b/Products/Archetypes/tests/test_externaleditor.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from Products.Archetypes.tests.utils import makeContent
@@ -33,7 +33,7 @@
 class ExternalEditorTest(ATSiteTestCase):
 
     def testExternalEditor(self):
-        #really a test that baseobject.__getitem__ returns something
-        #which externaleditor can use
+        # really a test that baseobject.__getitem__ returns something
+        # which externaleditor can use
         obj = makeContent(self.folder, portal_type='SimpleType', id='obj')
         self.assertTrue(IBaseUnit.providedBy(obj.body))
diff --git a/Products/Archetypes/tests/test_fields.py b/Products/Archetypes/tests/test_fields.py
index 018bd3b..fad515c 100644
--- a/Products/Archetypes/tests/test_fields.py
+++ b/Products/Archetypes/tests/test_fields.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 import os
 import PIL
@@ -62,7 +62,7 @@
     ('FixedPointField', 'fixedpointfield2'),
     ('BooleanField', 'booleanfield'),
     ('ImageField', 'imagefield'),
-    ]
+]
 
 field_instances = []
 for type, name in test_fields:
@@ -72,7 +72,8 @@
 txt_content = txt_file.read()
 img_file = open(os.path.join(PACKAGE_HOME, 'input', 'tool.gif'), 'rb')
 img_content = img_file.read()
-animated_gif_file = open(os.path.join(PACKAGE_HOME, 'input', 'animated.gif'), 'rb')
+animated_gif_file = open(os.path.join(
+    PACKAGE_HOME, 'input', 'animated.gif'), 'rb')
 animated_gif_content = animated_gif_file.read()
 pdf_file = open(os.path.join(PACKAGE_HOME, 'input', 'webdav.pdf'), 'rb')
 pdf_content = pdf_file.read()
@@ -96,7 +97,7 @@
     'fixedpointfield2': '1,5',
     'booleanfield': '1',
     'imagefield_file': img_file,
-    }
+}
 
 expected_values = {
     'objectfield': 'objectfield',
@@ -112,7 +113,7 @@
     'fixedpointfield2': '1.50',
     'booleanfield': 1,
     'imagefield': '<img src="%s/dummy/imagefield" alt="Spam" title="Spam" height="16" width="16" />' % portal_name
-    }
+}
 
 empty_values = {
     'objectfield': None,
@@ -127,11 +128,12 @@
     'fixedpointfield1': None,
     'fixedpointfield2': None,
     'booleanfield': None,
-    }
+}
 
 schema = Schema(tuple(field_instances))
 sampleDisplayList = DisplayList([('e1', 'e1'), ('element2', 'element2')])
 
+
 class sampleInterfaceVocabulary:
     implements(IVocabulary)
 
@@ -140,6 +142,7 @@ def getDisplayList(self, instance):
 
 
 class Dummy(BaseContentMixin):
+
     def Title(self):
         # required for ImageField
         return 'Spam'
@@ -159,6 +162,7 @@ def __call__(self, context):
 
 DummyVocabFactory = DummyVocabulary()
 
+
 class DummyIntVocabulary(object):
     implements(IVocabularyFactory)
 
@@ -166,11 +170,11 @@ def __call__(self, context):
         return SimpleVocabulary.fromItems([("title1", 1), ("t2", 2)])
 
 
-DummyIntVocabFactory = DummyIntVocabulary() 
+DummyIntVocabFactory = DummyIntVocabulary()
 
 
 FakeRequest = TestRequest
-#class FakeRequest:
+# class FakeRequest:
 #
 #    def __init__(self):
 #        self.other = {}
@@ -202,7 +206,7 @@ def test_processing(self):
             if isinstance(got, File):
                 got = str(got)
             self.assertEqual(got, v, 'got: %r, expected: %r, field "%s"' %
-                              (got, v, k))
+                             (got, v, k))
 
     def test_processing_fieldset(self):
         dummy = self.makeDummy()
@@ -216,7 +220,7 @@ def test_processing_fieldset(self):
             if isinstance(got, (File, Image)):
                 got = str(got)
             self.assertEqual(got, v, 'got: %r, expected: %r, field "%s"' %
-                              (got, v, k))
+                             (got, v, k))
 
     def test_image_tag(self):
         dummy = self.makeDummy()
@@ -228,11 +232,11 @@ def test_image_tag(self):
 
         image_field = dummy.getField('imagefield')
         self.assertEqual(image_field.tag(dummy),
-                          '<img src="%s/dummy/imagefield" alt="Spam" title="Spam" height="16" width="16" />' % portal_name)
+                         '<img src="%s/dummy/imagefield" alt="Spam" title="Spam" height="16" width="16" />' % portal_name)
         self.assertEqual(image_field.tag(dummy, alt=''),
-                          '<img src="%s/dummy/imagefield" alt="" title="Spam" height="16" width="16" />' % portal_name)
+                         '<img src="%s/dummy/imagefield" alt="" title="Spam" height="16" width="16" />' % portal_name)
         self.assertEqual(image_field.tag(dummy, alt='', title=''),
-                          '<img src="%s/dummy/imagefield" alt="" title="" height="16" width="16" />' % portal_name)
+                         '<img src="%s/dummy/imagefield" alt="" title="" height="16" width="16" />' % portal_name)
 
     def test_gif_format_preserved_when_scaling(self):
         dummy = self.makeDummy()
@@ -250,7 +254,8 @@ def test_dont_scale_animated_gif_when_original_is_smaller_than_scale_size(self):
 
         image_field = dummy.getField('imagefield')
 
-        scaled_image_file, img_format = image_field.scale(animated_gif_content, 100, 100)
+        scaled_image_file, img_format = image_field.scale(
+            animated_gif_content, 100, 100)
         self.assertEqual("gif", img_format)
 
         image = PIL.Image.open(scaled_image_file)
@@ -431,9 +436,11 @@ def test_factory_vocabulary(self):
         # # Vocabulary factory
         field.vocabulary = ()
         field.vocabulary_factory = 'archetypes.tests.dummyvocab'
-        getSiteManager().registerUtility(component=DummyVocabFactory, name='archetypes.tests.dummyvocab')
+        getSiteManager().registerUtility(component=DummyVocabFactory,
+                                         name='archetypes.tests.dummyvocab')
         self.assertEqual(field.Vocabulary(dummy), expected)
-        getSiteManager().unregisterUtility(component=DummyVocabFactory, name='archetypes.tests.dummyvocab')
+        getSiteManager().unregisterUtility(
+            component=DummyVocabFactory, name='archetypes.tests.dummyvocab')
 
     def test_factory_vocabulary_int(self):
         dummy = self.makeDummy()
@@ -448,9 +455,11 @@ def test_factory_vocabulary_int(self):
         # # Vocabulary factory
         field.vocabulary = ()
         field.vocabulary_factory = 'archetypes.tests.dummyintvocab'
-        getSiteManager().registerUtility(component=DummyIntVocabFactory, name='archetypes.tests.dummyintvocab')
+        getSiteManager().registerUtility(component=DummyIntVocabFactory,
+                                         name='archetypes.tests.dummyintvocab')
         self.assertEqual(field.Vocabulary(), expected)
-        getSiteManager().unregisterUtility(component=DummyIntVocabFactory, name='archetypes.tests.dummyintvocab')
+        getSiteManager().unregisterUtility(component=DummyIntVocabFactory,
+                                           name='archetypes.tests.dummyintvocab')
 
     def test_allowable_content_types_ok(self):
         dummy = self.makeDummy()
@@ -523,9 +532,11 @@ def __init__(self, context):
             def __call__(self):
                 return "Adapted"
 
-        getSiteManager().registerAdapter(factory=DefaultFor, required=(Dummy,), name=field.__name__)
+        getSiteManager().registerAdapter(factory=DefaultFor,
+                                         required=(Dummy,), name=field.__name__)
         self.assertEqual(field.getDefault(dummy), 'Adapted')
-        getSiteManager().unregisterAdapter(factory=DefaultFor, required=(Dummy,), name=field.__name__)
+        getSiteManager().unregisterAdapter(factory=DefaultFor,
+                                           required=(Dummy,), name=field.__name__)
 
     def test_encoding(self):
         # http://dev.plone.org/plone/ticket/7597
diff --git a/Products/Archetypes/tests/test_fieldvalidation.py b/Products/Archetypes/tests/test_fieldvalidation.py
index 19f6f14..445614a 100644
--- a/Products/Archetypes/tests/test_fieldvalidation.py
+++ b/Products/Archetypes/tests/test_fieldvalidation.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.attestcase import ATTestCase
 
@@ -61,7 +61,7 @@ def __call__(self, value, instance, field, *args, **kwargs):
      'value': None,  # ... but no value given
      'assertion': lambda result: result is not None},
 
-    ]
+]
 
 for req in 0, 1:  # 0 == not required, 1 == required
 
@@ -71,7 +71,7 @@ def __call__(self, value, instance, field, *args, **kwargs):
             {'field': {'required': req, 'validators': validator},
              'value': 'bass',
              'assertion': lambda result: result.find('bass') > -1}
-            )
+        )
 
     # the trombone is in the vocabulary
     settings.append(
@@ -79,7 +79,7 @@ def __call__(self, value, instance, field, *args, **kwargs):
                    'vocabulary': ('frenchhorn', 'trombone', 'trumpet')},
          'value': 'trombone',
          'assertion': lambda result: result is None}
-        )
+    )
 
     # tuba is not in vocabulary, so this must fail
     settings.append(
@@ -87,7 +87,7 @@ def __call__(self, value, instance, field, *args, **kwargs):
                    'vocabulary': ('frenchhorn', 'trombone', 'trumpet')},
          'value': 'tuba',
          'assertion': lambda result: result is not None}
-        )
+    )
 
     # tuba is not in vocabulary, so this must fail
     settings.append(
@@ -96,17 +96,18 @@ def __call__(self, value, instance, field, *args, **kwargs):
                    'vocabulary': ('frenchhorn', 'trombone', 'trumpet')},
          'value': ('tuba', 'trombone'),
          'assertion': lambda result: result is not None}
-        )
+    )
 
     # enforceVocabulary, but no vocabulary given
     settings.append(
         {'field': {'required': req, 'enforceVocabulary': 1},
          'value': 'cello',
          'assertion': lambda result: result is not None}
-        )
+    )
 
 
 class FakeType(Explicit, BaseObject):
+
     def unicodeEncode(self, v): return v  # don't
 
 
@@ -125,7 +126,7 @@ def testSettings(self):
                   (setting, result)
 
             self.assertTrue(setting['assertion'](result),
-                         setting.get('failmsg', msg))
+                            setting.get('failmsg', msg))
 
 
 class TestValidation(ATTestCase):
@@ -137,5 +138,7 @@ def testIntegerZeroInvalid(self):
         # attach a validator that never validates, so any value must fail
         field = IntegerField('integer', validators=('v3',))
 
-        self.assertTrue(field.validate(1, self.instance, errors={}) is not None)
-        self.assertTrue(field.validate(0, self.instance, errors={}) is not None)
+        self.assertTrue(field.validate(
+            1, self.instance, errors={}) is not None)
+        self.assertTrue(field.validate(
+            0, self.instance, errors={}) is not None)
diff --git a/Products/Archetypes/tests/test_file_upload.py b/Products/Archetypes/tests/test_file_upload.py
index a7b574d..14ef8e5 100644
--- a/Products/Archetypes/tests/test_file_upload.py
+++ b/Products/Archetypes/tests/test_file_upload.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 # Load fixture
 import os
diff --git a/Products/Archetypes/tests/test_filename.py b/Products/Archetypes/tests/test_filename.py
index d8cb8ee..c57ab42 100644
--- a/Products/Archetypes/tests/test_filename.py
+++ b/Products/Archetypes/tests/test_filename.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -162,6 +162,7 @@ def testFieldSetFilename(self):
 
 
 class LargeFileTest(ATSiteTestCase):
+
     def testSetFilenameOfLargeFile(self):
         """Test for https://dev.plone.org/archetypes/ticket/635
         """
@@ -175,6 +176,7 @@ def testSetFilenameOfLargeFile(self):
 
 
 class StrangeIdTest(ATSiteTestCase):
+
     def test_strangeUnallowedIds(self):
         """ Certain IDs used to give an error and are unusable
 
diff --git a/Products/Archetypes/tests/test_functional.py b/Products/Archetypes/tests/test_functional.py
index 1a106b6..4c1f2e1 100644
--- a/Products/Archetypes/tests/test_functional.py
+++ b/Products/Archetypes/tests/test_functional.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from plone.app.testing import SITE_OWNER_NAME as portal_owner
 from plone.app.testing import TEST_USER_NAME as default_user
@@ -60,7 +60,8 @@ def afterSetUp(self):
 
         # disable portal_factory as it's a nuisance here
         if hasattr(self.portal.aq_base, 'portal_factory'):
-            self.portal.portal_factory.manage_setPortalFactoryTypes(listOfTypeIds=[])
+            self.portal.portal_factory.manage_setPortalFactoryTypes(
+                listOfTypeIds=[])
 
         # error log
         from Products.SiteErrorLog.SiteErrorLog import temp_logs
@@ -103,8 +104,8 @@ def publish(self, path, basic=None, env=None, extra=None,
             extra = {}
         extra['_authenticator'] = createToken()
         return ATTestCase.publish(
-             self, path, basic, env, extra, request_method, stdin,
-             handle_errors)
+            self, path, basic, env, extra, request_method, stdin,
+            handle_errors)
 
     def test_id_change_with_non_auto_id(self):
         """Make sure Id is only set when original id is autogenerated"""
@@ -122,7 +123,7 @@ def test_id_change_with_non_auto_id(self):
         # XXX now lets test if http://plone.org/collector/4487 is present
         if "base_edit.cpt" in self.portal.portal_skins.archetypes.objectIds():
             raise AttributeError, ("test_id_change_with_non_auto_id "
-                  "is expected to fail unless  http://plone.org/collector/4487 is fixed")
+                                   "is expected to fail unless  http://plone.org/collector/4487 is fixed")
 
         self.assertTrue(auto_id in self.folder.objectIds())
         new_obj = getattr(self.folder, auto_id)
@@ -130,14 +131,18 @@ def test_id_change_with_non_auto_id(self):
         # Change the title
         obj_title = "New Title for Object"
         new_obj_path = '/%s' % new_obj.absolute_url(1)
-        self.assertTrue(new_obj.checkCreationFlag())  # object is not yet edited
+        # object is not yet edited
+        self.assertTrue(new_obj.checkCreationFlag())
 
         # Edit object
-        response = self.publish('%s/base_edit?form.submitted=1&title=%s&body=Blank' % (new_obj_path, obj_title,), self.basic_auth)
+        response = self.publish('%s/base_edit?form.submitted=1&title=%s&body=Blank' %
+                                (new_obj_path, obj_title,), self.basic_auth)
         self.assertStatusEqual(response.getStatus(), 302)  # OK
-        self.assertFalse(new_obj.checkCreationFlag())  # object is fully created
+        # object is fully created
+        self.assertFalse(new_obj.checkCreationFlag())
         self.assertEqual(new_obj.Title(), obj_title)  # title is set
-        self.assertEqual(new_obj.getId(), auto_id)  # id should not have changed
+        # id should not have changed
+        self.assertEqual(new_obj.getId(), auto_id)
 
         del DDocument._at_rename_after_creation
 
@@ -161,10 +166,10 @@ def test_id_change_with_without_marker(self):
         # XXX now lets test if http://plone.org/collector/4487 is present
         if "base_edit.cpt" in self.portal.portal_skins.archetypes.objectIds():
             raise AttributeError("test_id_change_with_without_marker is "
-                  "expected to fail unless http://plone.org/collector/4487 is "
-                  "fixed. This might also occur with chameleon cache files "
-                  "but chameleon not installed. You can find them via: "
-                  "find . -name \"*pt.py\"")
+                                 "expected to fail unless http://plone.org/collector/4487 is "
+                                 "fixed. This might also occur with chameleon cache files "
+                                 "but chameleon not installed. You can find them via: "
+                                 "find . -name \"*pt.py\"")
 
         self.assertTrue(auto_id in self.folder.objectIds())
         new_obj = getattr(self.folder, auto_id)
@@ -172,14 +177,18 @@ def test_id_change_with_without_marker(self):
         # Change the title
         obj_title = "New Title for Object"
         new_obj_path = '/%s' % new_obj.absolute_url(1)
-        self.assertTrue(new_obj.checkCreationFlag())  # object is not yet edited
+        # object is not yet edited
+        self.assertTrue(new_obj.checkCreationFlag())
 
         # Edit object
-        response = self.publish('%s/base_edit?form.submitted=1&title=%s&body=Blank' % (new_obj_path, obj_title,), self.basic_auth)
+        response = self.publish('%s/base_edit?form.submitted=1&title=%s&body=Blank' %
+                                (new_obj_path, obj_title,), self.basic_auth)
         self.assertStatusEqual(response.getStatus(), 302)  # OK
-        self.assertFalse(new_obj.checkCreationFlag())  # object is fully created
+        # object is fully created
+        self.assertFalse(new_obj.checkCreationFlag())
         self.assertEqual(new_obj.Title(), obj_title)  # title is set
-        self.assertEqual(new_obj.getId(), auto_id)  # id should not have changed
+        # id should not have changed
+        self.assertEqual(new_obj.getId(), auto_id)
 
     def test_update_schema_does_not_reset_creation_flag(self):
         # This is functional so that we get a full request and set the flag
@@ -190,7 +199,8 @@ def test_update_schema_does_not_reset_creation_flag(self):
                      self.basic_auth)
         self.assertTrue('new_doc' in self.folder.objectIds())
         new_obj = self.folder.new_doc
-        self.assertTrue(new_obj.checkCreationFlag())  # object is not yet edited
+        # object is not yet edited
+        self.assertTrue(new_obj.checkCreationFlag())
         obj_title = "New Title for Object"
         # Edit object
         self.publish('/%s/base_edit?form.submitted=1&title=%s&body=Blank' % (
@@ -199,9 +209,10 @@ def test_update_schema_does_not_reset_creation_flag(self):
         # now lets test if http://plone.org/collector/4487 is present
         if "base_edit.cpt" in self.portal.portal_skins.archetypes.objectIds():
             raise AttributeError, ("test_update_schema_does_not_reset_creation_flag "
-                  "is expected to fail unless  http://plone.org/collector/4487 is fixed")
+                                   "is expected to fail unless  http://plone.org/collector/4487 is fixed")
 
-        self.assertFalse(new_obj.checkCreationFlag())  # object is fully created
+        # object is fully created
+        self.assertFalse(new_obj.checkCreationFlag())
         # Now run the schema update
         req = self.app.REQUEST
         req.form['update_all'] = True
@@ -245,7 +256,7 @@ def test_at_download_checks_read_permission(self):
         # give it a file field with a restricted read_permission
         schema = self.portal.test.schema = self.portal.test.Schema().copy()
         from Products.Archetypes.Field import FileField
-        schema['file'] = FileField('file', read_permission = 'Manage portal')
+        schema['file'] = FileField('file', read_permission='Manage portal')
 
         res = self.publish('/plone/test/at_download/file')
         self.assertEqual(res.status, 401)
@@ -265,4 +276,5 @@ def test_webdav_btree_folder(self):
         self.assertEqual(response.getStatus(), 201)
         self.assertIn('index_html', folder.objectIds())
         self.assertEqual(folder.index_html.title_or_id(), 'index_html')
-        self.assertEqual(str(folder.index_html.body()).strip(), 'Simple BTree Folder Index')
+        self.assertEqual(str(folder.index_html.body()).strip(),
+                         'Simple BTree Folder Index')
diff --git a/Products/Archetypes/tests/test_index.py b/Products/Archetypes/tests/test_index.py
index 5a871a1..d3c8e4e 100644
--- a/Products/Archetypes/tests/test_index.py
+++ b/Products/Archetypes/tests/test_index.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 import time
 
diff --git a/Products/Archetypes/tests/test_interfaces.py b/Products/Archetypes/tests/test_interfaces.py
index 3db467a..312c13c 100644
--- a/Products/Archetypes/tests/test_interfaces.py
+++ b/Products/Archetypes/tests/test_interfaces.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 # @@ auto generating tests is bullshit. this should go somewhere more
 # easily auditable, like doctests.  DWM
@@ -50,6 +50,7 @@
 
 from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 
+
 def className(klass):
     """ get the short class name """
     # remove <>
@@ -83,27 +84,27 @@ def interfaceImplementedByInstanceOf(self, klass, interface):
         """ tests if the klass implements the interface in the right way """
         # is the class really implemented by the given interface?
         self.assertTrue(interface.implementedBy(klass),
-            'The class %s does not implement %s' % (className(klass), className(interface)))
+                        'The class %s does not implement %s' % (className(klass), className(interface)))
         # verify if the implementation is correct
         try:
             verifyClass(interface, klass)
         except (BrokenImplementation, DoesNotImplement,
-          BrokenMethodImplementation), errmsg:
+                BrokenMethodImplementation), errmsg:
             self.fail('The class %s does not implement %s correctly: \n%s'
-                % (className(klass), className(interface), errmsg))
+                      % (className(klass), className(interface), errmsg))
 
     def interfaceImplementedBy(self, instance, interface):
         """ tests if the instance implements the interface in the right way """
         # is the class really implemented by the given interface?
         self.assertTrue(interface.providedBy(instance),
-            'The instance of %s does not implement %s' % (className(instance), className(interface)))
+                        'The instance of %s does not implement %s' % (className(instance), className(interface)))
         # verify if the implementation is correct
         try:
             verifyObject(interface, instance)
         except (BrokenImplementation, DoesNotImplement,
-          BrokenMethodImplementation), errmsg:
+                BrokenMethodImplementation), errmsg:
             self.fail('The instance of %s does not implement %s correctly: \n%s'
-                % (className(instance), className(interface), errmsg))
+                      % (className(instance), className(interface), errmsg))
 
     def getImplementsOfInstanceOf(self, klass):
         """ returns the interfaces implemented by the klass (flat)"""
@@ -119,7 +120,8 @@ def doesImplementByInstanceOf(self, klass, interfaces):
             interfaces = (interfaces)
         impl = self.getImplementsOfInstanceOf(klass)
         for interface in interfaces:
-            self.assertTrue(interface in impl, 'The class %s does not implement %s' % (className(klass), className(interface)))
+            self.assertTrue(interface in impl, 'The class %s does not implement %s' % (
+                className(klass), className(interface)))
 
     def doesImplementBy(self, instance, interfaces):
         """ make shure that the klass implements at least these interfaces"""
@@ -127,7 +129,8 @@ def doesImplementBy(self, instance, interfaces):
             interfaces = (interfaces)
         impl = self.getImplementsOf(instance)
         for interface in interfaces:
-            self.assertTrue(interface in impl, 'The instance of %s does not implement %s' % (className(instance), className(interface)))
+            self.assertTrue(interface in impl, 'The instance of %s does not implement %s' % (
+                className(instance), className(interface)))
 
     def _testStuff(self):
         """ test self.klass and self.instance """
@@ -171,10 +174,10 @@ def testFieldInterface(self):
     (Marshaller, ()), (PrimaryFieldMarshaller, ()), (RFC822Marshaller, ()),
     (Schema, ()),
     (Storage, ()), (ReadOnlyStorage, ()), (StorageLayer, ()),
-        (AttributeStorage, ()), (ObjectManagedStorage, ()),
-        (MetadataStorage, ()),
+    (AttributeStorage, ()), (ObjectManagedStorage, ()),
+    (MetadataStorage, ()),
     (BaseSQLStorage, ()), (GadflySQLStorage, ()), (MySQLSQLStorage, ()),
-        (PostgreSQLStorage, ()),
+    (PostgreSQLStorage, ()),
 ]
 
 PROJECTNAME = 'Archetypes.tests'
diff --git a/Products/Archetypes/tests/test_languagevocabulary.py b/Products/Archetypes/tests/test_languagevocabulary.py
index 6afbfa6..c4d15e5 100644
--- a/Products/Archetypes/tests/test_languagevocabulary.py
+++ b/Products/Archetypes/tests/test_languagevocabulary.py
@@ -19,7 +19,8 @@ class LanguageVocabularyTest(ATSiteTestCase):
     def afterSetUp(self):
         ATSiteTestCase.afterSetUp(self)
         registerType(Dummy, 'Archetypes')
-        content_types, constructors, ftis = process_types(listTypes(), PKG_NAME)
+        content_types, constructors, ftis = process_types(
+            listTypes(), PKG_NAME)
         portal = self.portal
         dummy = Dummy(oid='dummy')
         # put dummy in context of portal
diff --git a/Products/Archetypes/tests/test_marshaller.py b/Products/Archetypes/tests/test_marshaller.py
index f3ac161..5a0c5d2 100644
--- a/Products/Archetypes/tests/test_marshaller.py
+++ b/Products/Archetypes/tests/test_marshaller.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from unittest import TestCase
 
@@ -41,7 +41,7 @@ class MarshallerTests(ATSiteTestCase):
 
     # XXX this test is fu... up the machine by eating all memory
     def XXX_test_textFieldObjectWordReplace(self):
-        #test that uploading to an existing object works
+        # test that uploading to an existing object works
         word = makeContent(self.folder, portal_type='DDocument', id='obj1')
 
         wordFilePath = os.path.join(PACKAGE_HOME, "input", "word.doc")
@@ -55,12 +55,12 @@ def XXX_test_textFieldObjectWordReplace(self):
         request.processInputs()
         word.PUT(request, request.RESPONSE)
 
-        #and we can get the stuff back
+        # and we can get the stuff back
         self.assertEqual(word.getContentType('body'), 'application/msword')
         self.assertEqual(word.getRawBody(), data)
 
     def test_textFieldObjectRSTreplace(self):
-        ## And again with an RST
+        # And again with an RST
         rst = makeContent(self.folder, portal_type='DDocument', id='obj1')
 
         rstFilePath = os.path.join(PACKAGE_HOME, "input", "rest1.rst")
@@ -74,12 +74,12 @@ def test_textFieldObjectRSTreplace(self):
         request.processInputs()
         rst.PUT(request, request.RESPONSE)
 
-        #and we can get the stuff back
+        # and we can get the stuff back
         self.assertEqual(rst.getContentType('body'), 'text/x-rst')
         self.assertEqual(rst.getRawBody().strip(), data.strip())
 
     def test_fileFieldObjectWordReplace(self):
-        #test that uploading to an existing object works
+        # test that uploading to an existing object works
         word = makeContent(self.folder, portal_type='SimpleFile', id='obj1')
 
         wordFilePath = os.path.join(PACKAGE_HOME, "input", "word.doc")
@@ -91,12 +91,12 @@ def test_fileFieldObjectWordReplace(self):
         request.processInputs()
         word.PUT(request, request.RESPONSE)
 
-        #and we can get the stuff back
+        # and we can get the stuff back
         self.assertEqual(word.getContentType('body'), 'application/msword')
         self.assertEqual(str(word.getRawBody()), data)
 
     def setupCTR(self):
-        #Modify the CTR to point to SimpleType
+        # Modify the CTR to point to SimpleType
         ctr = self.portal.content_type_registry
         if ctr.getPredicate('text'):
             # ATCT has a predict
diff --git a/Products/Archetypes/tests/test_metadata.py b/Products/Archetypes/tests/test_metadata.py
index b8a8e87..18132f1 100644
--- a/Products/Archetypes/tests/test_metadata.py
+++ b/Products/Archetypes/tests/test_metadata.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Acquisition import aq_base
 from Acquisition import aq_parent
@@ -43,27 +43,28 @@
     # (accessor, mutator, field),
     ('Title', 'setTitle',                    ''),
     ('Creator', '',                          ''),
-    ('Subject','setSubject',                 'subject'),
-    ('Description','setDescription',         'description'),
+    ('Subject', 'setSubject',                 'subject'),
+    ('Description', 'setDescription',         'description'),
     ('Publisher', '',                        ''),
-    ('Contributors','setContributors',       'contributors'),
+    ('Contributors', 'setContributors',       'contributors'),
     ('Date', '',                             ''),
     ('CreationDate', '',                     ''),
-    ('EffectiveDate','setEffectiveDate',     'effectiveDate'),
-    ('ExpirationDate','setExpirationDate',   'expirationDate'),
+    ('EffectiveDate', 'setEffectiveDate',     'effectiveDate'),
+    ('ExpirationDate', 'setExpirationDate',   'expirationDate'),
     ('ModificationDate', '',                 ''),
     ('Type', '',                             ''),
     ('Format', 'setFormat',                  ''),
     ('Identifier', '',                       ''),
-    ('Language','setLanguage',               'language'),
-    ('Rights','setRights',                   'rights'),
+    ('Language', 'setLanguage',               'language'),
+    ('Rights', 'setRights',                   'rights'),
 
     # allowDiscussion is not part of the official DC metadata set
-    ('allowDiscussion','isDiscussable','allowDiscussion'),
-  ]
+    ('allowDiscussion', 'isDiscussable', 'allowDiscussion'),
+]
 
 
 class DummyPortalMembership:
+
     def checkPermission(self, *args, **kwargs):
         return True
 
@@ -145,7 +146,8 @@ def testMutators(self):
         obj = self._dummy
         for field in fieldList:
             mutator = field[1]
-            if not mutator: continue
+            if not mutator:
+                continue
             fobj = getattr(obj, mutator, None)
             self.assertTrue(hasattr(obj, mutator),
                             'Missing mutator %s' % mutator)
@@ -157,7 +159,8 @@ def testMetaFields(self):
         obj = self._dummy
         for field in fieldList:
             meta = field[2]
-            if not meta: continue
+            if not meta:
+                continue
             md = aq_base(obj)._md
             field = aq_base(obj).Schema()[meta]
             self.assertTrue(meta in md, 'Missing field %s' % meta)
@@ -166,8 +169,8 @@ def testMetaFields(self):
             # We are checking here if the metadata
             # for a given field has been correctly initialized.
             self.assertFalse(value is _marker,
-                        'Metadata field %s has not been correctly '
-                        'initialized.' % meta)
+                             'Metadata field %s has not been correctly '
+                             'initialized.' % meta)
             self.assertTrue(field.isMetadata,
                             'isMetadata not set correctly for field %s.' % meta)
 
@@ -202,8 +205,10 @@ def testUnwrappedContext(self):
         addMetadataTo(self._parent, data='parent', time=1980)
         addMetadataTo(self._parent.dummy, data='dummy', time=2120)
 
-        compareMetadataOf(self, aq_base(self._parent), data='parent', time=1980)
-        compareMetadataOf(self, aq_base(self._parent.dummy), data='dummy', time=2120)
+        compareMetadataOf(self, aq_base(self._parent),
+                          data='parent', time=1980)
+        compareMetadataOf(self, aq_base(self._parent.dummy),
+                          data='dummy', time=2120)
 
     def testIsParent(self):
         self.assertTrue(aq_parent(self._parent) == self.portal)
@@ -234,17 +239,20 @@ def afterSetUp(self):
         # to enable overrideDiscussionFor
         self.setRoles(['Manager'])
 
-        parent = mkDummyInContext(DummyFolder, oid='parent', context=self.portal, schema=None)
+        parent = mkDummyInContext(
+            DummyFolder, oid='parent', context=self.portal, schema=None)
         self._parent = parent
 
         # create dummy
-        dummy = mkDummyInContext(Dummy, oid='dummy', context=parent, schema=None)
+        dummy = mkDummyInContext(
+            Dummy, oid='dummy', context=parent, schema=None)
         self._dummy = dummy
 
         pfield = dummy.getPrimaryField()
         # tests do need afilefield
         self.assertEqual(pfield.getName(), 'afilefield')
-        pfield.set(dummy, self.value, filename=self.filename, mimetype='text/plain')
+        pfield.set(dummy, self.value, filename=self.filename,
+                   mimetype='text/plain')
 
         self._parent.dummy = dummy
 
@@ -321,6 +329,7 @@ def testChangesOnFieldChangesObject(self):
 
 
 class TimeZoneTest(ATSiteTestCase):
+
     def _makeDummyContent(self, name):
         return mkDummyInContext(
             klass=Dummy, oid=name, context=self.portal, schema=schema)
diff --git a/Products/Archetypes/tests/test_referenceCatalog.py b/Products/Archetypes/tests/test_referenceCatalog.py
index d79be48..c13f3c2 100644
--- a/Products/Archetypes/tests/test_referenceCatalog.py
+++ b/Products/Archetypes/tests/test_referenceCatalog.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from zope import component
 from zope import interface
@@ -70,7 +70,7 @@ def getId(self):
 class ReferenceCatalogTests(ATSiteTestCase):
 
     def afterSetUp(self):
-        #register the test class as indexable with plone.indexer default
+        # register the test class as indexable with plone.indexer default
         sm = component.getSiteManager()
         sm.registerAdapter(factory=wrapper.IndexableObjectWrapper,
                            required=(interface.Interface, IZCatalog),
@@ -124,7 +124,7 @@ def test_create(self):
         self.assertTrue(ref.sourceUID == uid1)
         self.assertTrue(ref.targetUID == uid2)
 
-        #Check the metadata
+        # Check the metadata
         self.assertTrue(ref.foo == "bar")
 
         unqualified = obj.getRefs()
@@ -139,7 +139,7 @@ def test_create(self):
         # Make sure all objects have _p_oids and _p_jars
         transaction.savepoint(optimistic=True)
 
-        #Rename can't invalidate UID or references
+        # Rename can't invalidate UID or references
         self.verifyBrains()
         obj.setId('new1')
         self.verifyBrains()
@@ -158,8 +158,8 @@ def test_create(self):
 
         self.assertTrue(b[0].UID() == uid1)
 
-        #Add another reference with a different relationship (and the
-        #other direction)
+        # Add another reference with a different relationship (and the
+        # other direction)
 
         obj2.addReference(obj, 'betaRelationship', this="that")
         b = obj2.getRefs('betaRelationship')
@@ -177,7 +177,8 @@ def test_holdingref(self):
         obj1 = makeContent(self.folder, portal_type='Fact', id='obj1')
         obj2 = makeContent(self.folder, portal_type='Fact', id='obj2')
 
-        obj1.addReference(obj2, relationship="uses", referenceClass=HoldingReference)
+        obj1.addReference(obj2, relationship="uses",
+                          referenceClass=HoldingReference)
 
         self.assertTrue(obj2 in obj1.getRefs('uses'))
 
@@ -189,13 +190,14 @@ def test_holdingref(self):
         else:
             raise AssertionError("holding reference didn't hold")
 
-        #and just check to make sure its still there
+        # and just check to make sure its still there
         self.assertTrue(hasattr(self.folder, obj2.id))
 
         obj3 = makeContent(self.folder, portal_type='Fact', id='obj3')
         obj4 = makeContent(self.folder, portal_type='Fact', id='obj4')
 
-        obj3.addReference(obj4, relationship="uses", referenceClass=CascadeReference)
+        obj3.addReference(obj4, relationship="uses",
+                          referenceClass=CascadeReference)
 
         self.folder.manage_delObjects(obj3.id)
         items = self.folder.contentIds()
@@ -203,11 +205,14 @@ def test_holdingref(self):
         self.assertFalse(obj4.id in items)
 
     def test_cascaderef(self):
-        my1stfolder = makeContent(self.folder, portal_type='SimpleFolder', id='my1stfolder')
+        my1stfolder = makeContent(
+            self.folder, portal_type='SimpleFolder', id='my1stfolder')
         obj5 = makeContent(my1stfolder, portal_type='Fact', id='obj5')
-        my2ndfolder = makeContent(self.folder, portal_type='SimpleFolder', id='my2ndfolder')
+        my2ndfolder = makeContent(
+            self.folder, portal_type='SimpleFolder', id='my2ndfolder')
         obj6 = makeContent(my2ndfolder, portal_type='Fact', id='obj6')
-        obj5.addReference(obj6, relationship="uses", referenceClass=CascadeReference)
+        obj5.addReference(obj6, relationship="uses",
+                          referenceClass=CascadeReference)
         my1stfolder.manage_delObjects(['obj5'])
         items = my1stfolder.contentIds()
         self.assertFalse('obj5' in items)
@@ -224,10 +229,10 @@ def test_delete(self):
         uid1 = obj1.UID()
         uid2 = obj2.UID()
 
-        #Make a reference
+        # Make a reference
         obj1.addReference(obj2, relationship="example")
 
-        #and clean it up
+        # and clean it up
         self.folder._delObject(obj1.id)
 
         # Assert that the reference is gone, that the UID is gone and
@@ -244,7 +249,7 @@ def test_delete(self):
         assert len(sourceRefs) == 0
         assert len(targetRefs) == 0
 
-        #also make sure there is nothing in the reference Catalog
+        # also make sure there is nothing in the reference Catalog
         assert len(rc.getReferences(uid1)) == 0
         assert len(rc.getBackReferences(uid1)) == 0
         assert len(rc.getReferences(uid2)) == 0
@@ -274,17 +279,20 @@ def test_custome_metadata(self):
         # update schema
         self.app.REQUEST.form['Archetypes.Refnode'] = 1
         self.app.REQUEST.form['update_all'] = 1
-        self.portal.archetype_tool.manage_updateSchema(REQUEST=self.app.REQUEST)
+        self.portal.archetype_tool.manage_updateSchema(
+            REQUEST=self.app.REQUEST)
         del obj1
 
         # get the reference for obj1
         obj1 = rc.lookupObject(uid)
-        refs = rc.getReferences(obj1, relationship=obj1.Schema()['link'].relationship)
+        refs = rc.getReferences(obj1, relationship=obj1.Schema()[
+                                'link'].relationship)
         ref = refs[0]
         ruid2 = ref.UID()
         assert ruid == ruid2, """ref uid got reassigned"""
-        #check for the attribute
-        self.assertTrue(hasattr(ref, 'attribute1'), 'Custom attribute on reference object is lost during schema update')
+        # check for the attribute
+        self.assertTrue(hasattr(ref, 'attribute1'),
+                        'Custom attribute on reference object is lost during schema update')
         self.assertEqual(ref.attribute1, 'some_value')
 
     def test_sortable_references(self):
@@ -327,10 +335,10 @@ def test_UIDIndexer(self):
         self.folder[dext.id] = dext
         notify(ObjectCreatedEvent(dext))  # it supposed to add uuid attribute
 
-        #catalog dext instance
+        # catalog dext instance
         uc.catalog_object(dext, '/'.join(dext.getPhysicalPath()))
 
-        #check lookup
+        # check lookup
         uuid = IUUID(dext, None)
         results = uc(UID=uuid)
 
diff --git a/Products/Archetypes/tests/test_reference_optimizations.py b/Products/Archetypes/tests/test_reference_optimizations.py
index 82327be..857e8b7 100644
--- a/Products/Archetypes/tests/test_reference_optimizations.py
+++ b/Products/Archetypes/tests/test_reference_optimizations.py
@@ -9,9 +9,12 @@ class RefSpeedupTestMixin:
     def afterSetUp(self):
         self.rc = getToolByName(self.portal, 'reference_catalog')
         self.loginAsPortalOwner()
-        self.doc1 = makeContent(self.portal, portal_type='DDocument', id='doc1')
-        self.doc2 = makeContent(self.portal, portal_type='DDocument', id='doc2')
-        self.doc3 = makeContent(self.portal, portal_type='DDocument', id='doc3')
+        self.doc1 = makeContent(
+            self.portal, portal_type='DDocument', id='doc1')
+        self.doc2 = makeContent(
+            self.portal, portal_type='DDocument', id='doc2')
+        self.doc3 = makeContent(
+            self.portal, portal_type='DDocument', id='doc3')
 
 
 class TestGetReferences(RefSpeedupTestMixin, ATTestCase):
@@ -19,11 +22,13 @@ class TestGetReferences(RefSpeedupTestMixin, ATTestCase):
     def test_none(self):
         self.assertEqual(self.rc.getReferences(self.doc1), [])
         self.assertEqual(self.rc.getReferences(self.doc1, 'related'), [])
-        self.assertEqual(self.rc.getReferences(self.doc1, 'related', self.doc2), [])
+        self.assertEqual(self.rc.getReferences(
+            self.doc1, 'related', self.doc2), [])
 
         result = self.rc.getReferences(self.doc1, ['related', 'rel2'])
         self.assertEqual(result, [])
-        result = self.rc.getReferences(self.doc1, ['related', 'rel2'], self.doc2)
+        result = self.rc.getReferences(
+            self.doc1, ['related', 'rel2'], self.doc2)
         self.assertEqual(result, [])
 
         self.assertEqual(self.doc1.getReferences(), [])
@@ -46,17 +51,20 @@ def test_single(self):
         result = [r.getTargetObject() for r in result]
         self.assertEqual(set(result), set([self.doc2, self.doc3]))
 
-        result = self.rc.getReferences(self.doc1, ['related', 'rel2'], self.doc2)
+        result = self.rc.getReferences(
+            self.doc1, ['related', 'rel2'], self.doc2)
         result = [r.getTargetObject() for r in result]
         self.assertEqual(set(result), set([self.doc2]))
 
     def test_many(self):
         uids = [self.doc2.UID(), self.doc3.UID()]
         self.doc1.setRelated(uids)
-        result = [r.getTargetObject() for r in self.rc.getReferences(self.doc1)]
+        result = [r.getTargetObject()
+                  for r in self.rc.getReferences(self.doc1)]
         self.assertEqual(set(result), set([self.doc2, self.doc3]))
 
-        self.assertEqual(set(self.doc1.getReferences()), set([self.doc2, self.doc3]))
+        self.assertEqual(set(self.doc1.getReferences()),
+                         set([self.doc2, self.doc3]))
 
         self.doc1.setRel2([self.doc2.UID()])
         result = self.rc.getReferences(self.doc1, ['related', 'rel2'])
@@ -66,9 +74,11 @@ def test_many(self):
     def test_bidi(self):
         self.doc1.setRelated([self.doc2.UID()])
         self.doc2.setRelated([self.doc1.UID()])
-        result = [r.getTargetObject() for r in self.rc.getReferences(self.doc1)]
+        result = [r.getTargetObject()
+                  for r in self.rc.getReferences(self.doc1)]
         self.assertEqual(result, [self.doc2])
-        result = [r.getTargetObject() for r in self.rc.getReferences(self.doc2)]
+        result = [r.getTargetObject()
+                  for r in self.rc.getReferences(self.doc2)]
         self.assertEqual(result, [self.doc1])
 
         self.doc1.setRel2([self.doc3.UID()])
@@ -79,7 +89,8 @@ def test_bidi(self):
     def test_missing_uid_catalog_entry(self):
         self.doc1.setRelated([self.doc2.UID()])
 
-        result = [r.getTargetObject() for r in self.rc.getReferences(self.doc1)]
+        result = [r.getTargetObject()
+                  for r in self.rc.getReferences(self.doc1)]
         self.assertEqual(result, [self.doc2])
 
         # Forcefully remove the target object from the uid catalog
@@ -97,11 +108,12 @@ def test_none(self):
         self.assertEqual(self.rc.getBackReferences(self.doc1), [])
         self.assertEqual(self.rc.getBackReferences(self.doc1, 'related'), [])
         self.assertEqual(self.rc.getBackReferences(self.doc1, 'related', self.doc2),
-                          [])
+                         [])
 
         result = self.rc.getBackReferences(self.doc1, ['related', 'rel2'])
         self.assertEqual(result, [])
-        result = self.rc.getBackReferences(self.doc1, ['related', 'rel2'], self.doc2)
+        result = self.rc.getBackReferences(
+            self.doc1, ['related', 'rel2'], self.doc2)
         self.assertEqual(result, [])
 
         self.assertEqual(self.doc1.getBackReferences(), [])
@@ -123,16 +135,19 @@ def test_single(self):
         self.doc1.setRel2([self.doc3.UID()])
         result = self.rc.getBackReferences(self.doc2, ['related', 'rel2'])
         self.assertEqual(result[0].getSourceObject(), self.doc1)
-        result = self.rc.getBackReferences(self.doc2, ['related', 'rel2'], self.doc1)
+        result = self.rc.getBackReferences(
+            self.doc2, ['related', 'rel2'], self.doc1)
         self.assertEqual(result[0].getSourceObject(), self.doc1)
 
     def test_many(self):
         uids = [self.doc2.UID(), self.doc3.UID()]
         self.doc1.setRelated(uids)
 
-        result = [r.getSourceObject() for r in self.rc.getBackReferences(self.doc2)]
+        result = [r.getSourceObject()
+                  for r in self.rc.getBackReferences(self.doc2)]
         self.assertEqual(set(result), set([self.doc1]))
-        result = [r.getSourceObject() for r in self.rc.getBackReferences(self.doc3)]
+        result = [r.getSourceObject()
+                  for r in self.rc.getBackReferences(self.doc3)]
         self.assertEqual(set(result), set([self.doc1]))
 
         self.assertEqual(set(self.doc2.getBackReferences()), set([self.doc1]))
@@ -147,9 +162,11 @@ def test_bidi(self):
         self.doc1.setRelated([self.doc2.UID()])
         self.doc2.setRelated([self.doc1.UID()])
 
-        result = [r.getSourceObject() for r in self.rc.getBackReferences(self.doc1)]
+        result = [r.getSourceObject()
+                  for r in self.rc.getBackReferences(self.doc1)]
         self.assertEqual(result, [self.doc2])
-        result = [r.getSourceObject() for r in self.rc.getBackReferences(self.doc2)]
+        result = [r.getSourceObject()
+                  for r in self.rc.getBackReferences(self.doc2)]
         self.assertEqual(result, [self.doc1])
 
         self.doc2.setRel2([self.doc1.UID()])
@@ -160,7 +177,8 @@ def test_bidi(self):
     def test_missing_uid_catalog_entry(self):
         self.doc2.setRelated([self.doc1.UID()])
 
-        result = [r.getSourceObject() for r in self.rc.getBackReferences(self.doc1)]
+        result = [r.getSourceObject()
+                  for r in self.rc.getBackReferences(self.doc1)]
         self.assertEqual(result, [self.doc2])
 
         # Forcefully remove the target object from the uid catalog
@@ -190,9 +208,11 @@ def test_single_reference(self):
     def test_many_references(self):
         uids = [self.doc2.UID(), self.doc3.UID()]
         self.doc1.setRelated(uids)
-        self.assertEqual(set(self.doc1.getRelated()), set([self.doc2, self.doc3]))
+        self.assertEqual(set(self.doc1.getRelated()),
+                         set([self.doc2, self.doc3]))
         self.assertEqual(set(self.doc1.getRawRelated()), set(uids))
-        self.assertEqual(set(self.doc1.getReferences()), set([self.doc2, self.doc3]))
+        self.assertEqual(set(self.doc1.getReferences()),
+                         set([self.doc2, self.doc3]))
         self.assertEqual(self.doc1.getRelationships(), ['related'])
 
     def test_bidi_references(self):
diff --git a/Products/Archetypes/tests/test_referenceable.py b/Products/Archetypes/tests/test_referenceable.py
index 4e69949..10dbc48 100644
--- a/Products/Archetypes/tests/test_referenceable.py
+++ b/Products/Archetypes/tests/test_referenceable.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Acquisition import aq_base
 import transaction
@@ -44,14 +44,14 @@ def verifyBrains(self):
         uc = getattr(self.portal, UID_CATALOG)
         rc = getattr(self.portal, REFERENCE_CATALOG)
 
-        #Verify all UIDs resolve
+        # Verify all UIDs resolve
         uids = uc.uniqueValuesFor('UID')
         brains = uc(dict(UID=uids))
 
         uobjects = [b.getObject() for b in brains]
         self.assertFalse(None in uobjects, """bad uid resolution""")
 
-        #Verify all references resolve
+        # Verify all references resolve
         uids = rc.uniqueValuesFor('UID')
         brains = rc(dict(UID=uids))
 
@@ -169,18 +169,18 @@ def test_renamecontainerKeepsReferences(self):
     def test_renamecontainerKeepsReferences2(self):
         # test for [ 1013363 ] References break on folder rename
         folderA = makeContent(self.folder,
-                                portal_type=self.FOLDER_TYPE,
-                                title='Spam',
-                                id='folderA')
+                              portal_type=self.FOLDER_TYPE,
+                              title='Spam',
+                              id='folderA')
         objA = makeContent(folderA,
                            portal_type='SimpleType',
                            title='Eggs',
                            id='objA')
 
         folderB = makeContent(self.folder,
-                                portal_type=self.FOLDER_TYPE,
-                                title='Spam',
-                                id='folderB')
+                              portal_type=self.FOLDER_TYPE,
+                              title='Spam',
+                              id='folderB')
         objB = makeContent(folderB,
                            portal_type='SimpleType',
                            title='Eggs',
@@ -220,7 +220,8 @@ def test_UIDclash(self):
         transaction.savepoint(optimistic=True)
         self.folder.manage_renameObject(id=obj_id, new_id=new_id)
 
-        #now, make a new one with the same ID and check it gets a different UID
+        # now, make a new one with the same ID and check it gets a different
+        # UID
         doc2 = makeContent(self.folder,
                            portal_type='DDocument',
                            title='Foo',
@@ -244,7 +245,7 @@ def test_setUID_keeps_relationships(self):
         c = makeContent(self.folder, portal_type='DDocument',
                         title='Foo', id=owned_id)
 
-        #Two made up kinda refs
+        # Two made up kinda refs
         a.addReference(b, "KnowsAbout")
         b.addReference(a, "KnowsAbout")
         a.addReference(c, "Owns")
@@ -319,7 +320,7 @@ def test_relationships(self):
         c = makeContent(self.folder, portal_type='DDocument',
                         title='Foo', id=owned_id)
 
-        #Two made up kinda refs
+        # Two made up kinda refs
         a.addReference(b, "KnowsAbout")
         a.addReference(c, "Owns")
 
@@ -336,7 +337,7 @@ def test_relationships(self):
         self.assertEqual(a.getRefs(), [b])
         self.assertEqual(c.getBRefs(), [])
 
-        #test querying references using the targetObject parameter
+        # test querying references using the targetObject parameter
         d = makeContent(self.folder, portal_type='DDocument',
                         title='Foo', id=other_id)
 
@@ -344,7 +345,7 @@ def test_relationships(self):
         a.addReference(d, 'KnowsAbout')
 
         self.assertEqual(len(a.getReferenceImpl()), 3)
-        #get only refs to d
+        # get only refs to d
         self.assertEqual(len(a.getReferenceImpl(targetObject=d)), 2)
 
     def test_back_relationships(self):
@@ -399,16 +400,18 @@ def test_back_relationships(self):
 
     def test_singleReference(self):
         # If an object is referenced don't record its reference again
-        a = makeContent(self.folder, portal_type='DDocument', title='Foo', id='a')
-        b = makeContent(self.folder, portal_type='DDocument', title='Foo', id='b')
+        a = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='a')
+        b = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='b')
 
-        #Add the same ref twice
+        # Add the same ref twice
         a.addReference(b, "KnowsAbout")
         a.addReference(b, "KnowsAbout")
 
         self.assertEqual(len(a.getRefs('KnowsAbout')),  1)
 
-        #In this case its a different relationship
+        # In this case its a different relationship
         a.addReference(b, 'Flogs')
         self.assertEqual(len(a.getRefs('KnowsAbout')), 1)
         self.assertEqual(len(a.getRefs()), 2)
@@ -416,24 +419,29 @@ def test_singleReference(self):
     def test_multipleReferences(self):
         # If you provide updateReferences=False to addReference, it
         # will add, not replace the reference
-        a = makeContent(self.folder, portal_type='DDocument', title='Foo', id='a')
-        b = makeContent(self.folder, portal_type='DDocument', title='Foo', id='b')
+        a = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='a')
+        b = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='b')
 
-        #Add the same ref twice
+        # Add the same ref twice
         a.addReference(b, "KnowsAbout", updateReferences=False)
         a.addReference(b, "KnowsAbout", updateReferences=False)
 
         self.assertEqual(len(a.getRefs('KnowsAbout')),  2)
 
-        #In this case its a different relationship
+        # In this case its a different relationship
         a.addReference(b, 'Flogs')
         self.assertEqual(len(a.getRefs('KnowsAbout')), 2)
         self.assertEqual(len(a.getRefs()), 3)
 
     def test_hasRelationship(self):
-        a = makeContent(self.folder, portal_type='DDocument', title='Foo', id='a')
-        b = makeContent(self.folder, portal_type='DDocument', title='Foo', id='b')
-        c = makeContent(self.folder, portal_type='DDocument', title='Foo', id='c')
+        a = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='a')
+        b = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='b')
+        c = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='c')
 
         # Two made up kinda refs
         a.addReference(b, "KnowsAbout")
@@ -489,9 +497,12 @@ def test_reindexUIDCatalog(self):
     def test_referenceReference(self):
         # Reference a reference object for fun (no, its like RDFs
         # metamodel)
-        a = makeContent(self.folder, portal_type='DDocument', title='Foo', id='a')
-        b = makeContent(self.folder, portal_type='DDocument', title='Foo', id='b')
-        c = makeContent(self.folder, portal_type='DDocument', title='Foo', id='c')
+        a = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='a')
+        b = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='b')
+        c = makeContent(self.folder, portal_type='DDocument',
+                        title='Foo', id='c')
         a.addReference(b)
 
         ref = a._getReferenceAnnotations().objectValues()[0]
@@ -515,7 +526,7 @@ def test_referenceFieldVocab(self):
             (test124.UID(), test124.getId()),
             (test125.UID(), test125.getId()),
             (dummy.UID(), dummy.getId()),
-            ])
+        ])
 
         got = field.Vocabulary(dummy)
         self.assertEqual(got, expected)
@@ -531,7 +542,7 @@ def test_referenceFieldVocab(self):
             (test125.UID(), test125.getId()),
             (dummy.UID(), dummy.getId()),
             ('', u'label_no_reference'),
-            ])
+        ])
         self.assertEqual(field.Vocabulary(dummy), expected)
 
         field = field.copy()
@@ -542,7 +553,7 @@ def test_referenceFieldVocab(self):
             (test125.UID(), test125.getId()),
             (dummy.UID(), dummy.getId()),
             ('', u'label_no_reference'),
-            ])
+        ])
         self.assertNotEqual(field.Vocabulary(dummy), expected)
         field.vocabulary_display_path_bound = -1
         self.assertEqual(field.Vocabulary(dummy), expected)
@@ -602,7 +613,8 @@ def test_copyKeepsReferences(self):
 
         # Original object should keep references
         self.assertEqual(a.getRefs(), [b])
-        # Original non-copied object should point to both the original and the copied object
+        # Original non-copied object should point to both the original and the
+        # copied object
         self.assertEqual(b.getBRefs(), [a, copy_a])
 
     def test_copyPasteSupport(self):
@@ -677,7 +689,7 @@ def test_folderCopyPasteSupport(self):
                                  title='Destination folder',
                                  id='dst_folder')
         my_folder = makeContent(org_folder, portal_type=self.FOLDER_TYPE,
-                                                             id='my_folder')
+                                id='my_folder')
         a = makeContent(my_folder, portal_type='DDocument', id='a')
         b = makeContent(my_folder, portal_type='DDocument', id='b')
         a.addReference(b)
@@ -699,7 +711,7 @@ def test_folderCopyPasteSupport(self):
         self.assertEqual(copy_a.getRefs(), [])
         self.assertFalse(copy_a in b.getBRefs())
 
-        #The copy's uid should have changed
+        # The copy's uid should have changed
         self.assertFalse(ca_uid == a_uid)
 
         # Original object should keep references
@@ -719,7 +731,7 @@ def test_folderCutPasteSupport(self):
                                  title='Destination folder',
                                  id='dst_folder')
         my_folder = makeContent(org_folder, portal_type=self.FOLDER_TYPE,
-                                                             id='my_folder')
+                                id='my_folder')
         a = makeContent(my_folder, portal_type='DDocument', id='a')
         b = makeContent(my_folder, portal_type='DDocument', id='b')
         a.addReference(b)
@@ -740,7 +752,7 @@ def test_folderCutPasteSupport(self):
         self.assertEqual(copy_a.getRefs(), [copy_b])
         self.assertEqual(copy_b.getBRefs(), [copy_a])
 
-        #The copy's uid should have changed
+        # The copy's uid should have changed
         self.assertTrue(ca_uid == a_uid, (a_uid, ca_uid))
 
 
diff --git a/Products/Archetypes/tests/test_rename.py b/Products/Archetypes/tests/test_rename.py
index 18cf8d9..112dc72 100644
--- a/Products/Archetypes/tests/test_rename.py
+++ b/Products/Archetypes/tests/test_rename.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 
diff --git a/Products/Archetypes/tests/test_schemata.py b/Products/Archetypes/tests/test_schemata.py
index 20caa17..d4f3129 100644
--- a/Products/Archetypes/tests/test_schemata.py
+++ b/Products/Archetypes/tests/test_schemata.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 import operator
 
@@ -46,7 +46,8 @@ class SchemataTest(ATSiteTestCase):
 
     def afterSetUp(self):
         registerType(Dummy, 'Archetypes')
-        content_types, constructors, ftis = process_types(listTypes(), PKG_NAME)
+        content_types, constructors, ftis = process_types(
+            listTypes(), PKG_NAME)
         self._dummy = Dummy(oid='dummy')
 
     def test_availschemata(self):
@@ -128,7 +129,7 @@ def test_dupe_accessor_names_addField(self):
                                          accessor='getSomething',
                                          edit_accessor='editSomething',
                                          mutator='setSomething',
-                                  ),))
+                                         ),))
         field = StringField('bar',
                             accessor='getSomething',
                             edit_accessor='editThat',
@@ -183,15 +184,15 @@ def test_editableFields(self):
                 widget=StringWidget(visible={'edit': 'invisible'}),
             ),
             StringField('f2',
-                mutator='setF2',
-                write_permission=ModifyPortalContent,
-                widget=StringWidget(visible={'edit': 'hidden'}),
-            ),
+                        mutator='setF2',
+                        write_permission=ModifyPortalContent,
+                        widget=StringWidget(visible={'edit': 'hidden'}),
+                        ),
             StringField('f3',
-                mutator='setF3',
-                write_permission=ModifyPortalContent,
-                widget=StringWidget(condition='python:False',),
-            ),
+                        mutator='setF3',
+                        write_permission=ModifyPortalContent,
+                        widget=StringWidget(condition='python:False',),
+                        ),
         )
 
         for f in fields:
@@ -207,8 +208,8 @@ def dummy_mutator(instance, value):
 
         # get editable fields
         schemata = dummy.Schemata()['default']
-        editable_field_ids = [f.getName() for f in \
-            schemata.editableFields(dummy, visible_only=True)]
+        editable_field_ids = [f.getName() for f in
+                              schemata.editableFields(dummy, visible_only=True)]
 
         self.assertTrue('f1' not in editable_field_ids)
         self.assertTrue('f2' in editable_field_ids)
diff --git a/Products/Archetypes/tests/test_schemata_manipulation.py b/Products/Archetypes/tests/test_schemata_manipulation.py
index 8371984..8145455 100644
--- a/Products/Archetypes/tests/test_schemata_manipulation.py
+++ b/Products/Archetypes/tests/test_schemata_manipulation.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -35,7 +35,7 @@ class SchemataManipulationTest(ATTestCase):
 
     def afterSetUp(self):
         self.schema = ManagedSchema(
-               (StringField('a', schemata='waldi'),
+            (StringField('a', schemata='waldi'),
                 StringField('d', schemata='nasbaer'),
                 StringField('x', schemata='edgar'),
                 StringField('b', schemata='waldi'),
@@ -44,91 +44,111 @@ def afterSetUp(self):
                 StringField('c', schemata='waldi'),
                 StringField('f', schemata='nasbaer'),
                 StringField('z', schemata='edgar')
-            ))
+             ))
 
     def fields2names(self, fields):
         return [f.getName() for f in fields]
 
     def testBasic(self):
         self.assertEqual(self.fields2names(self.schema.fields()),
-                        ['a', 'd', 'x', 'b', 'e', 'y', 'c', 'f', 'z'])
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar'])
+                         ['a', 'd', 'x', 'b', 'e', 'y', 'c', 'f', 'z'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['waldi', 'nasbaer', 'edgar'])
         self.schema.addField(StringField('p', schemata='waldi'))
         self.schema.addField(StringField('hello_world', schemata='helloworld'))
-        self.schema.addField(StringField('hello_world1', schemata='helloworld1'))
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar', 'helloworld', 'helloworld1'])
+        self.schema.addField(StringField(
+            'hello_world1', schemata='helloworld1'))
+        self.assertEqual(self.schema.getSchemataNames(), [
+                         'waldi', 'nasbaer', 'edgar', 'helloworld', 'helloworld1'])
 
     def testSchemataFields(self):
         self.assertEqual(self.fields2names(self.schema.getSchemataFields('waldi')),
-                        ['a', 'b', 'c'])
+                         ['a', 'b', 'c'])
         self.assertEqual(self.fields2names(self.schema.getSchemataFields('nasbaer')),
-                        ['d', 'e', 'f'])
+                         ['d', 'e', 'f'])
         self.assertEqual(self.fields2names(self.schema.getSchemataFields('edgar')),
-                        ['x', 'y', 'z'])
+                         ['x', 'y', 'z'])
 
     def testDelField(self):
         self.schema.delField('x')
         self.schema.delField('b')
         self.schema.delField('z')
         self.assertEqual(self.fields2names(self.schema.fields()),
-                        ['a', 'd', 'e', 'y', 'c', 'f'])
+                         ['a', 'd', 'e', 'y', 'c', 'f'])
         self.schema.addField(StringField('z'))
         self.schema.addField(StringField('b'))
         self.schema.addField(StringField('x'))
         self.assertEqual(self.fields2names(self.schema.fields()),
-                        ['a', 'd', 'e', 'y', 'c', 'f', 'z', 'b', 'x'])
+                         ['a', 'd', 'e', 'y', 'c', 'f', 'z', 'b', 'x'])
         self.schema.delField('b')
         self.schema.delField('z')
         self.schema.delField('x')
         self.assertEqual(self.fields2names(self.schema.fields()),
-                        ['a', 'd', 'e', 'y', 'c', 'f'])
+                         ['a', 'd', 'e', 'y', 'c', 'f'])
 
     def testDelSchemata(self):
         self.schema.delSchemata('nasbaer')
         self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'edgar'])
         self.schema.addField(StringField('hello_world', schemata='helloworld'))
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'edgar', 'helloworld'])
+        self.assertEqual(self.schema.getSchemataNames(), [
+                         'waldi', 'edgar', 'helloworld'])
 
     def testAddSchemata(self):
         self.schema.addSchemata('otto')
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar', 'otto'])
+        self.assertEqual(self.schema.getSchemataNames(), [
+                         'waldi', 'nasbaer', 'edgar', 'otto'])
         self.assertEqual(len(self.schema.getSchemataFields('otto')), 1)
 
     def testFieldChangeSchemata(self):
         self.schema.changeSchemataForField('z', 'otto')
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar', 'otto'])
-        self.assertEqual(self.fields2names(self.schema.getSchemataFields('otto')), ['z'])
+        self.assertEqual(self.schema.getSchemataNames(), [
+                         'waldi', 'nasbaer', 'edgar', 'otto'])
+        self.assertEqual(self.fields2names(
+            self.schema.getSchemataFields('otto')), ['z'])
         self.schema.changeSchemataForField('z', 'waldi')
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['waldi', 'nasbaer', 'edgar'])
 
     def testMoveSchemata1(self):
         self.schema.moveSchemata('waldi', -1)
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['waldi', 'nasbaer', 'edgar'])
         self.schema.moveSchemata('waldi', 1)
-        self.assertEqual(self.schema.getSchemataNames(), ['nasbaer', 'waldi', 'edgar'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['nasbaer', 'waldi', 'edgar'])
         self.schema.moveSchemata('waldi', 1)
-        self.assertEqual(self.schema.getSchemataNames(), ['nasbaer', 'edgar', 'waldi'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['nasbaer', 'edgar', 'waldi'])
         self.schema.moveSchemata('waldi', 1)
-        self.assertEqual(self.schema.getSchemataNames(), ['nasbaer', 'edgar', 'waldi'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['nasbaer', 'edgar', 'waldi'])
 
     def testMoveSchemata2(self):
         self.schema.moveSchemata('edgar', 1)
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'nasbaer', 'edgar'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['waldi', 'nasbaer', 'edgar'])
         self.schema.moveSchemata('edgar', -1)
-        self.assertEqual(self.schema.getSchemataNames(), ['waldi', 'edgar', 'nasbaer'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['waldi', 'edgar', 'nasbaer'])
         self.schema.moveSchemata('edgar', -1)
-        self.assertEqual(self.schema.getSchemataNames(), ['edgar', 'waldi', 'nasbaer'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['edgar', 'waldi', 'nasbaer'])
         self.schema.moveSchemata('edgar', -1)
-        self.assertEqual(self.schema.getSchemataNames(), ['edgar', 'waldi', 'nasbaer'])
+        self.assertEqual(self.schema.getSchemataNames(),
+                         ['edgar', 'waldi', 'nasbaer'])
 
     def testMoveField(self):
-        self.assertEqual(self.fields2names(self.schema.getSchemataFields('waldi')), ['a', 'b', 'c'])
+        self.assertEqual(self.fields2names(
+            self.schema.getSchemataFields('waldi')), ['a', 'b', 'c'])
         self.schema.moveField('a', -1)
-        self.assertEqual(self.fields2names(self.schema.getSchemataFields('waldi')), ['a', 'b', 'c'])
+        self.assertEqual(self.fields2names(
+            self.schema.getSchemataFields('waldi')), ['a', 'b', 'c'])
         self.schema.moveField('a', 1)
-        self.assertEqual(self.fields2names(self.schema.getSchemataFields('waldi')), ['b', 'a', 'c'])
+        self.assertEqual(self.fields2names(
+            self.schema.getSchemataFields('waldi')), ['b', 'a', 'c'])
         self.schema.moveField('a', 1)
-        self.assertEqual(self.fields2names(self.schema.getSchemataFields('waldi')), ['b', 'c', 'a'])
+        self.assertEqual(self.fields2names(
+            self.schema.getSchemataFields('waldi')), ['b', 'c', 'a'])
 
     def testReplaceField(self):
         f1 = StringField('f1')
@@ -138,4 +158,4 @@ def testReplaceField(self):
         self.schema.replaceField('e', f2)
         self.schema.replaceField('z', f3)
         self.assertEqual(self.fields2names(self.schema.fields()),
-                        ['f1', 'd', 'x', 'b', 'f2', 'y', 'c', 'f', 'f3'])
+                         ['f1', 'd', 'x', 'b', 'f2', 'y', 'c', 'f', 'f3'])
diff --git a/Products/Archetypes/tests/test_security.py b/Products/Archetypes/tests/test_security.py
index 805faeb..0bbeff6 100644
--- a/Products/Archetypes/tests/test_security.py
+++ b/Products/Archetypes/tests/test_security.py
@@ -18,7 +18,8 @@ def afterSetUp(self):
         self.portal.invokeFactory('Folder', 'test_folder_')
         self.folder = self.portal.test_folder_
         t = self._type
-        self.portal.portal_workflow.setChainForPortalTypes((t,), ('plone_workflow',))
+        self.portal.portal_workflow.setChainForPortalTypes(
+            (t,), ('plone_workflow',))
         self.inst = inst = makeContent(self.folder, portal_type=t, id=t)
         self.object_id = t
         self.attrs = [f.getName() for f in inst.Schema().fields()
diff --git a/Products/Archetypes/tests/test_storage.py b/Products/Archetypes/tests/test_storage.py
index 5fcd1f5..99518ed 100644
--- a/Products/Archetypes/tests/test_storage.py
+++ b/Products/Archetypes/tests/test_storage.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -50,7 +50,8 @@ def test_changestorage(self):
         out = ('bla', 'bla', 'bla')
 
         self.assertEqual(str(dummy.getAtextfield()), 'sometext')
-        self.assertTrue(dummy.getAdatefield().ISO8601().startswith('2003-01-01T00:00:00'))
+        self.assertTrue(dummy.getAdatefield().ISO8601(
+        ).startswith('2003-01-01T00:00:00'))
         self.assertEqual(dummy.getAlinesfield(), out)
         self.assertEqual(dummy.getAnobjectfield(), 'someothertext')
 
@@ -58,12 +59,15 @@ def test_changestorage(self):
             if field.getName() in ['atextfield', 'adatefield', 'alinesfield', 'anobjectfield']:
                 self._old_storages[field.getName()] = field.getStorage()
                 field.setStorage(dummy, AttributeStorage())
-                self.assertEqual(field.getStorage().getName(), 'AttributeStorage')
+                self.assertEqual(field.getStorage().getName(),
+                                 'AttributeStorage')
                 field.setStorage(dummy, MetadataStorage())
-                self.assertEqual(field.getStorage().getName(), 'MetadataStorage')
+                self.assertEqual(field.getStorage().getName(),
+                                 'MetadataStorage')
 
         self.assertEqual(str(dummy.getAtextfield()), 'sometext')
-        self.assertTrue(dummy.getAdatefield().ISO8601().startswith('2003-01-01T00:00:00'))
+        self.assertTrue(dummy.getAdatefield().ISO8601(
+        ).startswith('2003-01-01T00:00:00'))
         self.assertEqual(dummy.getAlinesfield(), out)
         self.assertEqual(dummy.getAnobjectfield(), 'someothertext')
 
diff --git a/Products/Archetypes/tests/test_templatemixin.py b/Products/Archetypes/tests/test_templatemixin.py
index ed5f5ea..5cd4c34 100644
--- a/Products/Archetypes/tests/test_templatemixin.py
+++ b/Products/Archetypes/tests/test_templatemixin.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.config import TOOL_NAME
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
diff --git a/Products/Archetypes/tests/test_traverse.py b/Products/Archetypes/tests/test_traverse.py
index 9cb3443..08ee7a9 100644
--- a/Products/Archetypes/tests/test_traverse.py
+++ b/Products/Archetypes/tests/test_traverse.py
@@ -9,6 +9,7 @@
 
 
 class BaseMockField:
+
     def __init__(self, type):
         self.type = type
 
@@ -27,6 +28,7 @@ class MockField(BaseMockField, ImageField):
 
 
 class MockContext:
+
     def Schema(self):
         return self
 
@@ -35,6 +37,7 @@ def get(self, key):
 
 
 class TraverseTests(TestCase):
+
     def setUp(self):
         def fallback(self, request, name):
             return fallback_marker
@@ -50,34 +53,40 @@ def testInterface(self):
 
     def testUnknownField(self):
         traverser = ImageTraverser(MockContext(), None)
-        self.assertTrue(traverser.publishTraverse(None, "missing") is fallback_marker)
+        self.assertTrue(traverser.publishTraverse(
+            None, "missing") is fallback_marker)
 
     def testWrongFieldType(self):
         context = MockContext()
         context.field = BaseMockField("Other.Type")
         traverser = ImageTraverser(context, None)
-        self.assertTrue(traverser.publishTraverse(None, "field") is fallback_marker)
+        self.assertTrue(traverser.publishTraverse(
+            None, "field") is fallback_marker)
 
     def testCorrectFieldType(self):
         context = MockContext()
         context.field = MockField("Other.Type")
         traverser = ImageTraverser(context, None)
-        self.assertTrue(traverser.publishTraverse(None, "field") is data_marker)
+        self.assertTrue(traverser.publishTraverse(
+            None, "field") is data_marker)
 
     def testFullImage(self):
         context = MockContext()
         context.field = MockField("Products.Archetypes.Field.ImageField")
         traverser = ImageTraverser(context, None)
-        self.assertTrue(traverser.publishTraverse(None, "field") is data_marker)
+        self.assertTrue(traverser.publishTraverse(
+            None, "field") is data_marker)
 
     def testUnknownScale(self):
         context = MockContext()
         context.field = MockField("Products.Archetypes.Field.ImageField")
         traverser = ImageTraverser(context, None)
-        self.assertTrue(traverser.publishTraverse(None, "field_poster") is fallback_marker)
+        self.assertTrue(traverser.publishTraverse(
+            None, "field_poster") is fallback_marker)
 
     def testKnownScale(self):
         context = MockContext()
         context.field = MockField("Products.Archetypes.Field.ImageField")
         traverser = ImageTraverser(context, None)
-        self.assertTrue(traverser.publishTraverse(None, "field_mini") is data_marker)
+        self.assertTrue(traverser.publishTraverse(
+            None, "field_mini") is data_marker)
diff --git a/Products/Archetypes/tests/test_unicode.py b/Products/Archetypes/tests/test_unicode.py
index 374653a..da852ff 100644
--- a/Products/Archetypes/tests/test_unicode.py
+++ b/Products/Archetypes/tests/test_unicode.py
@@ -1,6 +1,6 @@
 # -*- coding: ISO-8859-1 -*-
 # XXX change encoding to UTF-8
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -23,7 +23,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -37,6 +37,7 @@
 
 
 class FakeTransformer:
+
     def __init__(self, expected):
         self.expected = expected
 
diff --git a/Products/Archetypes/tests/test_update_schema.py b/Products/Archetypes/tests/test_update_schema.py
index 4fae884..1f38d63 100644
--- a/Products/Archetypes/tests/test_update_schema.py
+++ b/Products/Archetypes/tests/test_update_schema.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 import sys
 
@@ -40,13 +40,13 @@
 textfield2 = TextField('TEXTFIELD2', default='B')
 
 schema1 = BaseSchema + Schema((
-        textfield1,
-        ))
+    textfield1,
+))
 
 schema2 = BaseSchema + Schema((
-        textfield1b,
-        textfield2,
-        ))
+    textfield1b,
+    textfield2,
+))
 
 
 class Dummy1(BaseContent):
diff --git a/Products/Archetypes/tests/test_utils.py b/Products/Archetypes/tests/test_utils.py
index f7bd656..842942a 100644
--- a/Products/Archetypes/tests/test_utils.py
+++ b/Products/Archetypes/tests/test_utils.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -22,7 +22,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -167,10 +167,14 @@ def test_cmp(self):
         ta = (1, 2, 3)
         tb = (1, 3, 2)
         td = (3, 2, 1)
-        self.assertTrue(IntDisplayList(zip(ta, ta)) == IntDisplayList(zip(ta, ta)))
-        self.assertFalse(IntDisplayList(zip(ta, ta)) == IntDisplayList(zip(ta, tb)))
-        self.assertTrue(IntDisplayList(zip(ta, ta)) == IntDisplayList(zip(td, td)))
-        self.assertTrue(IntDisplayList(zip(tb, ta)) == IntDisplayList(zip(tb, ta)))
+        self.assertTrue(IntDisplayList(zip(ta, ta)) ==
+                        IntDisplayList(zip(ta, ta)))
+        self.assertFalse(IntDisplayList(zip(ta, ta)) ==
+                         IntDisplayList(zip(ta, tb)))
+        self.assertTrue(IntDisplayList(zip(ta, ta)) ==
+                        IntDisplayList(zip(td, td)))
+        self.assertTrue(IntDisplayList(zip(tb, ta)) ==
+                        IntDisplayList(zip(tb, ta)))
         self.assertRaises(TypeError, cmp, IntDisplayList(), '')
 
     def test_slice(self):
diff --git a/Products/Archetypes/tests/test_utils2.py b/Products/Archetypes/tests/test_utils2.py
index 8278182..c1e53aa 100644
--- a/Products/Archetypes/tests/test_utils2.py
+++ b/Products/Archetypes/tests/test_utils2.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -42,20 +42,25 @@ def test_order(self):
         self.assertTrue(self.d.keys() == ['a', 'b', 'c'])
         self.assertTrue(self.d.values() == ['1', '2', '3'])
         self.assertTrue(self.d.items() == [('a', '1'), ('b', '2'), ('c', '3')])
-        self.assertTrue(self.d.reverse() == [('c', '3'), ('b', '2'), ('a', '1')])
+        self.assertTrue(self.d.reverse() == [
+                        ('c', '3'), ('b', '2'), ('a', '1')])
 
     def test_setitem(self):
         self.d['d'] = '4'
         self.assertTrue(self.d.keys() == ['a', 'b', 'c', 'd'])
         self.assertTrue(self.d.values() == ['1', '2', '3', '4'])
-        self.assertTrue(self.d.items() == [('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')])
-        self.assertTrue(self.d.reverse() == [('d', '4'), ('c', '3'), ('b', '2'), ('a', '1')])
+        self.assertTrue(self.d.items() == [
+                        ('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')])
+        self.assertTrue(self.d.reverse() == [
+                        ('d', '4'), ('c', '3'), ('b', '2'), ('a', '1')])
 
         self.d['c'] = 'C'
         self.assertTrue(self.d.keys() == ['a', 'b', 'c', 'd'])
         self.assertTrue(self.d.values() == ['1', '2', 'C', '4'])
-        self.assertTrue(self.d.items() == [('a', '1'), ('b', '2'), ('c', 'C'), ('d', '4')])
-        self.assertTrue(self.d.reverse() == [('d', '4'), ('c', 'C'), ('b', '2'), ('a', '1')])
+        self.assertTrue(self.d.items() == [
+                        ('a', '1'), ('b', '2'), ('c', 'C'), ('d', '4')])
+        self.assertTrue(self.d.reverse() == [
+                        ('d', '4'), ('c', 'C'), ('b', '2'), ('a', '1')])
 
     def test_del(self):
         del self.d['b']
@@ -78,8 +83,10 @@ def test_update(self):
         self.d.update(d2)
         self.assertTrue(self.d.keys() == ['a', 'b', 'c', 'd'])
         self.assertTrue(self.d.values() == ['1', 'B', '3', '4'])
-        self.assertTrue(self.d.items() == [('a', '1'), ('b', 'B'), ('c', '3'), ('d', '4')])
-        self.assertTrue(self.d.reverse() == [('d', '4'), ('c', '3'), ('b', 'B'), ('a', '1')])
+        self.assertTrue(self.d.items() == [
+                        ('a', '1'), ('b', 'B'), ('c', '3'), ('d', '4')])
+        self.assertTrue(self.d.reverse() == [
+                        ('d', '4'), ('c', '3'), ('b', 'B'), ('a', '1')])
 
     def test_popitem(self):
         (k, v) = self.d.popitem()
diff --git a/Products/Archetypes/tests/test_validation.py b/Products/Archetypes/tests/test_validation.py
index 72e47ff..cec86b5 100644
--- a/Products/Archetypes/tests/test_validation.py
+++ b/Products/Archetypes/tests/test_validation.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.attestcase import ATTestCase
 
@@ -29,6 +29,7 @@
 
 
 class TestValidation(ATTestCase):
+
     def test_inNumericRange(self):
         v = validationService.validatorFor('inNumericRange')
         self.assertEqual(v(10, 1, 20), 1)
@@ -49,9 +50,9 @@ def test_isSSN(self):
     def test_isUSPhoneNumber(self):
         v = validationService.validatorFor('isUSPhoneNumber')
         self.assertEqual(v('(212) 555-1212',
-                               ignore=r'[\s\(\)\-]'), 1)
+                           ignore=r'[\s\(\)\-]'), 1)
         self.assertEqual(v('2125551212',
-                               ignore=r'[\s\(\)\-]'), 1)
+                           ignore=r'[\s\(\)\-]'), 1)
 
         self.assertEqual(v('(212) 555-1212'), 1)
 
diff --git a/Products/Archetypes/tests/test_varschema.py b/Products/Archetypes/tests/test_varschema.py
index 3f7400f..0d57c87 100644
--- a/Products/Archetypes/tests/test_varschema.py
+++ b/Products/Archetypes/tests/test_varschema.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 
 from Products.Archetypes.tests.attestcase import ATTestCase
 from Products.Archetypes.atapi import BaseSchema, BaseContent, Schema, \
@@ -41,7 +41,8 @@ class VarSchemataTest(ATTestCase):
 
     def afterSetUp(self):
         registerType(Dummy, 'Archetypes')
-        content_types, constructors, ftis = process_types(listTypes(), PKG_NAME)
+        content_types, constructors, ftis = process_types(
+            listTypes(), PKG_NAME)
 
     def test_variableschema(self):
         self.folder.dummy = Dummy(oid='dummy')
@@ -49,10 +50,10 @@ def test_variableschema(self):
         dummy.setTitle('dummy1')
         self.assertEqual(dummy.Title(), 'dummy1')
 
-        #change the schema
+        # change the schema
         dummy.schema = schema1
-        #try to read an old value using the new schema
+        # try to read an old value using the new schema
         self.assertEqual(dummy.Title(), 'dummy1')
         dummy.setAdditionalField('flurb')
-        #check if we can read the new field using the new schema
+        # check if we can read the new field using the new schema
         self.assertEqual(dummy.getAdditionalField(), 'flurb')
diff --git a/Products/Archetypes/tests/test_widgets.py b/Products/Archetypes/tests/test_widgets.py
index 95027ac..e3efc21 100644
--- a/Products/Archetypes/tests/test_widgets.py
+++ b/Products/Archetypes/tests/test_widgets.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -22,7 +22,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -45,7 +45,7 @@ class WidgetTests(ATTestCase):
     def afterSetUp(self):
         # XXX messing up with global vars is bad!
         global stub_text_file, stub_text_content, \
-               stub_bin_file, stub_bin_content
+            stub_bin_file, stub_bin_content
         stub_text_file = open(os.path.join(PACKAGE_HOME, 'input', 'rest1.rst'))
         stub_text_content = stub_text_file.read()
         stub_text_file.seek(0)
@@ -121,19 +121,19 @@ def test_unicodeTestIn(self):
         # page.  The related change in unicodeTestIn speeds this up
         # from 42 to 15 seconds.
         #vocab += [str(x) for x in range(3000)]
-        #for x in range(1000, 1050):
+        # for x in range(1000, 1050):
         #    self.assertEqual(self.portal.unicodeTestIn(str(x), vocab), True)
 
     def _test_widgets(self):
         doc = makeContent(self.folder, portal_type='ComplexType', id='demodoc')
 
-        #Now render this doc in view and edit modes. If this works
-        #then we have pretty decent assurance that things are working
+        # Now render this doc in view and edit modes. If this works
+        # then we have pretty decent assurance that things are working
         view = doc.base_view()
         edit = doc.base_edit()
 
-        #No exceptions are good, parse the results more if you need to
-        #I feel fine...
+        # No exceptions are good, parse the results more if you need to
+        # I feel fine...
 
     def test_appendtextarea_widget(self):
         request = FakeRequest()
@@ -180,7 +180,8 @@ def test_appendtextarea_timestamp_widget(self):
 
         doc.Schema()[field.getName()].set(doc, mystring)
         form = {'textarea_appendonly_timestamp': mystring}
-        expectation = mystring + '\n\n' + str(DateTime()) + widget.divider + mystring, {}
+        expectation = mystring + '\n\n' + \
+            str(DateTime()) + widget.divider + mystring, {}
         results = widget.process_form(doc, field, form)
 
         # some magic (nightmares?) here for rectifying DateTime delay
@@ -273,8 +274,8 @@ def test_rich_text_widget(self):
 
         # XXX: This makes wv-1.0.3 spin.
         #form = {'richtextfield_file': stub_bin_file}
-        #request.form.update(form)
-        #doc.processForm(REQUEST=request)
+        # request.form.update(form)
+        # doc.processForm(REQUEST=request)
         #self.assertEqual(field.getContentType(doc), 'application/msword')
         #self.assertEqual(str(doc[field.getName()]), stub_bin_content)
 
@@ -418,6 +419,6 @@ def test_vocabulary_multi_selection(self):
         result = trans(vocab, ['spoon2'], widget)
         self.assertEqual(result, u'[[attesti18n][spoon2]]')
         # Combine all.
-        result = trans(vocab, ['complex2','bar2', 'spoon2'], widget)
+        result = trans(vocab, ['complex2', 'bar2', 'spoon2'], widget)
         self.assertEqual(result,
-            u'[[attesti18n][C\xf6mpl\xe8x 2]], [[domain1][Bar 2]], [[attesti18n][spoon2]]')
+                         u'[[attesti18n][C\xf6mpl\xe8x 2]], [[domain1][Bar 2]], [[attesti18n][spoon2]]')
diff --git a/Products/Archetypes/tests/utils.py b/Products/Archetypes/tests/utils.py
index 4f50818..98696aa 100644
--- a/Products/Archetypes/tests/utils.py
+++ b/Products/Archetypes/tests/utils.py
@@ -1,4 +1,4 @@
-################################################################################
+##########################################################################
 #
 # Copyright (c) 2002-2005, Benjamin Saller <bcsaller@ideasuite.com>, and
 #                              the respective authors. All rights reserved.
@@ -21,7 +21,7 @@
 # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
 # FOR A PARTICULAR PURPOSE.
 #
-################################################################################
+##########################################################################
 """
 """
 
@@ -68,6 +68,7 @@ def makeContent(container, portal_type, id='document', **kw):
 
 
 class Dummy(BaseContent):
+
     def Title(self):
         return 'title'
 
@@ -151,6 +152,8 @@ def populateFolder(folder, folder_type, doc_type):
 
 WRAPPER = '__at_is_wrapper_method__'
 ORIG_NAME = '__at_original_method_name__'
+
+
 def isWrapperMethod(meth):
     return getattr(meth, WRAPPER, False)
 
@@ -179,7 +182,10 @@ def unwrap_method(klass, name):
 
 
 from zope.publisher.browser import BrowserView
+
+
 class SimpleView(BrowserView):
+
     def __call__(self):
         return 'SimpleView simple output'
 
diff --git a/Products/Archetypes/traverse.py b/Products/Archetypes/traverse.py
index f254fbd..8c80bb7 100644
--- a/Products/Archetypes/traverse.py
+++ b/Products/Archetypes/traverse.py
@@ -6,7 +6,8 @@
 from ZPublisher.BaseRequest import DefaultPublishTraverse
 
 
-class Fallback(Exception): pass
+class Fallback(Exception):
+    pass
 
 
 class ImageTraverser(DefaultPublishTraverse):
diff --git a/Products/Archetypes/utils.py b/Products/Archetypes/utils.py
index 9c462dd..f90d3ff 100644
--- a/Products/Archetypes/utils.py
+++ b/Products/Archetypes/utils.py
@@ -51,6 +51,8 @@ def fixSchema(schema):
 
 
 security.declarePrivate('mapply')
+
+
 def mapply(method, *args, **kw):
     """ Inspect function and apply positional and keyword arguments as possible.
 
@@ -160,7 +162,7 @@ def capitalize(string):
 
 
 def findDict(listofDicts, key, value):
-    #Look at a list of dicts for one where key == value
+    # Look at a list of dicts for one where key == value
     for d in listofDicts:
         if key in d:
             if d[key] == value:
@@ -422,10 +424,10 @@ def __cmp__(self, dest):
         return cmp(self.sortedByKey()[:], dest.sortedByKey()[:])
 
     def __getitem__(self, key):
-        #Ok, this is going to pass a number
-        #which is index but not easy to get at
-        #with the data-struct, fix when we get real
-        #itor/generators
+        # Ok, this is going to pass a number
+        # which is index but not easy to get at
+        # with the data-struct, fix when we get real
+        # itor/generators
         return self._itor[key]
 
     def __getslice__(self, i1, i2):
@@ -604,6 +606,8 @@ def getValue(self, key, default=None):
 
 
 security.declarePrivate('OrderedDict')
+
+
 class OrderedDict(BaseDict):
     """A wrapper around dictionary objects that provides an ordering for
        keys() and items()."""
@@ -676,16 +680,22 @@ def shasattr(obj, attr, acquire=False):
 
 WRAPPER = '__at_is_wrapper_method__'
 ORIG_NAME = '__at_original_method_name__'
+
+
 def isWrapperMethod(meth):
     return getattr(meth, WRAPPER, False)
 
 
 security.declarePrivate('call_original')
+
+
 def call_original(self, __name__, __pattern__, *args, **kw):
     return getattr(self, __pattern__ % __name__)(*args, **kw)
 
 
 security.declarePrivate('wrap_method')
+
+
 def wrap_method(klass, name, method, pattern='__at_wrapped_%s__'):
     old_method = getattr(klass, name)
     if isWrapperMethod(old_method):
@@ -699,6 +709,8 @@ def wrap_method(klass, name, method, pattern='__at_wrapped_%s__'):
 
 
 security.declarePrivate('unwrap_method')
+
+
 def unwrap_method(klass, name):
     old_method = getattr(klass, name)
     if not isWrapperMethod(old_method):
@@ -757,6 +769,8 @@ def _getSecurity(klass, create=True):
 
 
 security.declarePrivate('mergeSecurity')
+
+
 def mergeSecurity(klass):
     # This method looks into all the base classes and tries to
     # merge the security declarations into the current class.
@@ -788,6 +802,8 @@ def mergeSecurity(klass):
 
 
 security.declarePrivate('setSecurity')
+
+
 def setSecurity(klass, defaultAccess=None, objectPermission=None):
     """Set security of classes
 
@@ -861,7 +877,6 @@ def addStatusMessage(request, message, type='info'):
 def transaction_note(note):
     """ Write human legible note """
 
-
     if type(note) == unicode:
         import unicodedata
         note = unicodedata.normalize('NFKD', note).encode('utf-8', 'ignore')
diff --git a/Products/Archetypes/uuid.py b/Products/Archetypes/uuid.py
index 3c51bf5..cbb5d08 100644
--- a/Products/Archetypes/uuid.py
+++ b/Products/Archetypes/uuid.py
@@ -8,6 +8,7 @@
 from Products.Archetypes.config import UUID_ATTR
 from Products.Archetypes.interfaces import IReferenceable
 
+
 @implementer(IUUID)
 @adapter(IReferenceable)
 def referenceableUUID(context):


