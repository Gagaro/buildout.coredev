Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-07-22T13:07:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.event/commit/f7c99ce8029cb5a0bae1e5d15b34e8d0575621da

Revert "removing dependency on p.a.contenttypes"

Files changed:
M CHANGES.rst
M plone/app/event/browser/resources/event.js
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4c1c245..447ade8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,12 +4,7 @@ Changelog
 2.0b2 (unreleased)
 ------------------
 
-- initialize events.js javascript after all patterns are initialized.
-  [garbas]
-
-- removing dependency on plone.app.contenttypes that introduce with latest
-  changes to portlets code.
-  [garbas]
+- Nothing changed yet.
 
 
 2.0b1 (2015-07-18)
diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js
index dba0649..9c0a40e 100644
--- a/plone/app/event/browser/resources/event.js
+++ b/plone/app/event/browser/resources/event.js
@@ -134,7 +134,8 @@ require([
         }
     }
 
-    function initilize_event() {
+
+    $(window).load(function () {
 
         // EDIT FORM
 
@@ -171,16 +172,5 @@ require([
         // EVENT LISTING CALENDAR POPUP
         event_listing_calendar_init($("#event_listing_calendar"));
 
-    };
-
-    // mockup-core should trigger event once it initiallized all patterns (in
-    // mockup-core) but it only sets body class once all patterns were
-    // initialized
-    var interval = setInterval(function(){
-      if ($(document.body).hasClass('patterns-loaded')) {
-        clearInterval(interval);
-        initilize_event();
-      }
-    }, 100);
- 
+    });
 });
diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py
index eb63e19..c5c7094 100644
--- a/plone/app/event/portlets/portlet_calendar.py
+++ b/plone/app/event/portlets/portlet_calendar.py
@@ -2,6 +2,8 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
+from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import RET_MODE_OBJECTS
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import expand_events
@@ -28,16 +30,7 @@
 
 try:
     from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
-    from plone.app.contenttypes.interfaces import IFolder
-    search_base_uid_source = CatalogSource(object_provides={
-        'query': [
-            ICollection.__identifier__,
-            IFolder.__identifier__
-        ],
-        'operator': 'or'
-    })
 except ImportError:
-    search_base_uid_source = CatalogSource(is_folderish=True)
     ICollection = None
 
 PLMF = MessageFactory('plonelocales')
@@ -67,7 +60,13 @@ class ICalendarPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=search_base_uid_source,
+        source=CatalogSource(object_provides={
+            'query': [
+                ISyndicatableCollection.__identifier__,
+                IFolder.__identifier__
+            ],
+            'operator': 'or'
+        }),
     )
 
 
@@ -209,7 +208,7 @@ def cal_data(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection and ICollection.providedBy(search_base):
+        if ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,
diff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py
index cca8cca..eff12c6 100644
--- a/plone/app/event/portlets/portlet_events.py
+++ b/plone/app/event/portlets/portlet_events.py
@@ -2,19 +2,20 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
+from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import expand_events
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import start_end_query
+
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import get_events
 from plone.app.event.base import localized_now
 from plone.app.event.portlets import get_calendar_url
-from plone.app.event.portlets.portlet_events import (
-    ICollection, search_base_uid_source
-)
 from plone.app.portlets import PloneMessageFactory as _
 from plone.app.portlets.portlets import base
 from plone.app.uuid.utils import uuidToObject
+from plone.app.vocabularies.catalog import CatalogSource
 from plone.memoize.compress import xhtml_compress
 from plone.portlets.interfaces import IPortletDataProvider
 from zExceptions import NotFound
@@ -24,6 +25,11 @@
 from zope.interface import implementer
 from plone.app.querystring import queryparser
 
+try:
+    from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
+except ImportError:
+    ICollection = None
+
 
 class IEventsPortlet(IPortletDataProvider):
 
@@ -55,7 +61,13 @@ class IEventsPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=search_base_uid_source,
+        source=CatalogSource(object_provides={
+            'query': [
+                ISyndicatableCollection.__identifier__,
+                IFolder.__identifier__
+            ],
+            'operator': 'or'
+        }),
     )
 
 
@@ -143,7 +155,7 @@ def events(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection and ICollection.providedBy(search_base):
+        if ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,


Repository: plone.app.event


Branch: refs/heads/master
Date: 2015-07-22T13:07:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.event/commit/195f5ac1413c4aba4e06a90f7b22fa8ecdfca51a

Merge pull request #196 from plone/revert-195-master

Revert "removing dependency on p.a.contenttypes"

Files changed:
M CHANGES.rst
M plone/app/event/browser/resources/event.js
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4c1c245..447ade8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,12 +4,7 @@ Changelog
 2.0b2 (unreleased)
 ------------------
 
-- initialize events.js javascript after all patterns are initialized.
-  [garbas]
-
-- removing dependency on plone.app.contenttypes that introduce with latest
-  changes to portlets code.
-  [garbas]
+- Nothing changed yet.
 
 
 2.0b1 (2015-07-18)
diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js
index dba0649..9c0a40e 100644
--- a/plone/app/event/browser/resources/event.js
+++ b/plone/app/event/browser/resources/event.js
@@ -134,7 +134,8 @@ require([
         }
     }
 
-    function initilize_event() {
+
+    $(window).load(function () {
 
         // EDIT FORM
 
@@ -171,16 +172,5 @@ require([
         // EVENT LISTING CALENDAR POPUP
         event_listing_calendar_init($("#event_listing_calendar"));
 
-    };
-
-    // mockup-core should trigger event once it initiallized all patterns (in
-    // mockup-core) but it only sets body class once all patterns were
-    // initialized
-    var interval = setInterval(function(){
-      if ($(document.body).hasClass('patterns-loaded')) {
-        clearInterval(interval);
-        initilize_event();
-      }
-    }, 100);
- 
+    });
 });
diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py
index eb63e19..c5c7094 100644
--- a/plone/app/event/portlets/portlet_calendar.py
+++ b/plone/app/event/portlets/portlet_calendar.py
@@ -2,6 +2,8 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
+from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import RET_MODE_OBJECTS
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import expand_events
@@ -28,16 +30,7 @@
 
 try:
     from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
-    from plone.app.contenttypes.interfaces import IFolder
-    search_base_uid_source = CatalogSource(object_provides={
-        'query': [
-            ICollection.__identifier__,
-            IFolder.__identifier__
-        ],
-        'operator': 'or'
-    })
 except ImportError:
-    search_base_uid_source = CatalogSource(is_folderish=True)
     ICollection = None
 
 PLMF = MessageFactory('plonelocales')
@@ -67,7 +60,13 @@ class ICalendarPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=search_base_uid_source,
+        source=CatalogSource(object_provides={
+            'query': [
+                ISyndicatableCollection.__identifier__,
+                IFolder.__identifier__
+            ],
+            'operator': 'or'
+        }),
     )
 
 
@@ -209,7 +208,7 @@ def cal_data(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection and ICollection.providedBy(search_base):
+        if ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,
diff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py
index cca8cca..eff12c6 100644
--- a/plone/app/event/portlets/portlet_events.py
+++ b/plone/app/event/portlets/portlet_events.py
@@ -2,19 +2,20 @@
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection
+from plone.app.contenttypes.interfaces import IFolder
 from plone.app.event.base import expand_events
 from plone.app.event.base import _prepare_range
 from plone.app.event.base import start_end_query
+
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import get_events
 from plone.app.event.base import localized_now
 from plone.app.event.portlets import get_calendar_url
-from plone.app.event.portlets.portlet_events import (
-    ICollection, search_base_uid_source
-)
 from plone.app.portlets import PloneMessageFactory as _
 from plone.app.portlets.portlets import base
 from plone.app.uuid.utils import uuidToObject
+from plone.app.vocabularies.catalog import CatalogSource
 from plone.memoize.compress import xhtml_compress
 from plone.portlets.interfaces import IPortletDataProvider
 from zExceptions import NotFound
@@ -24,6 +25,11 @@
 from zope.interface import implementer
 from plone.app.querystring import queryparser
 
+try:
+    from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa
+except ImportError:
+    ICollection = None
+
 
 class IEventsPortlet(IPortletDataProvider):
 
@@ -55,7 +61,13 @@ class IEventsPortlet(IPortletDataProvider):
                     u'called on the site root.'
         ),
         required=False,
-        source=search_base_uid_source,
+        source=CatalogSource(object_provides={
+            'query': [
+                ISyndicatableCollection.__identifier__,
+                IFolder.__identifier__
+            ],
+            'operator': 'or'
+        }),
     )
 
 
@@ -143,7 +155,7 @@ def events(self):
         events = []
         query.update(self.request.get('contentFilter', {}))
         search_base = self.search_base
-        if ICollection and ICollection.providedBy(search_base):
+        if ICollection.providedBy(search_base):
             # Whatever sorting is defined, we're overriding it.
             query = queryparser.parseFormquery(
                 search_base, search_base.query,


