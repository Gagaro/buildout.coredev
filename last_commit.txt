Repository: plone.app.users
Branch: refs/heads/1.2.x
Date: 2015-05-20T14:36:15+02:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/plone.app.users/commit/382659bfd4900ef567c0e4dbc4ea4b07b03b06e1

Fixed @@change-password to accept current password containing non-ascii chars, also new password

Files changed:
M CHANGES.rst
M plone/app/users/browser/personalpreferences.py
M plone/app/users/tests/password.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 5046c30..43aac68 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -7,6 +7,10 @@ Changelog
 - Fixed "Add new user" form when there are too many groups.
   Fixes https://github.com/plone/plone.app.users/issues/33
   [avoinea]
+- Fixed @@change-password to accept current password containing non-ascii chars
+  [sgeulette]
+- Fixed @@change-password to accept new password containing non-ascii chars
+  [sgeulette]
 
 
 1.2.1 (2014-10-21)
diff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py
index 3ef1fd0..809c433 100644
--- a/plone/app/users/browser/personalpreferences.py
+++ b/plone/app/users/browser/personalpreferences.py
@@ -430,7 +430,8 @@ def validate_password(self, action, data):
         # check if password is correct
         current_password = data.get('current_password')
         if current_password:
-            current_password = current_password.encode('ascii', 'ignore')
+            if isinstance(current_password, unicode):
+                current_password = current_password.encode('utf8')
 
             if not membertool.testCurrentPassword(current_password):
                 err_str = _(u"Incorrect value for current password")
@@ -460,6 +461,8 @@ def action_reset_passwd(self, action, data):
         membertool = getToolByName(self.context, 'portal_membership')
 
         password = data['new_password']
+        if isinstance(password, unicode):
+            password = password.encode('utf8')
 
         try:
             membertool.setPassword(password, None, REQUEST=self.request)
diff --git a/plone/app/users/tests/password.txt b/plone/app/users/tests/password.txt
index 74cc83d..8531113 100644
--- a/plone/app/users/tests/password.txt
+++ b/plone/app/users/tests/password.txt
@@ -28,11 +28,20 @@ Now we should be able to access the change password form:
     >>> self.browser.url.endswith(view_name)
     True
 
-Let's try to change the password:
+Let's try to change the password with a new one containing non-ascii chars:
 
     >>> self.browser.getControl(name='form.current_password').value = 'secret'
-    >>> self.browser.getControl(name='form.new_password').value = 'super-secret'
-    >>> self.browser.getControl(name='form.new_password_ctl').value = 'super-secret'
+    >>> self.browser.getControl(name='form.new_password').value = 'super-secrét'
+    >>> self.browser.getControl(name='form.new_password_ctl').value = 'super-secrét'
+    >>> self.browser.getControl(name="form.actions.reset_passwd").click()
+    >>> 'Password changed' in self.browser.contents
+    True
+
+Let's try to change the password with the current one containing non-ascii chars:
+
+    >>> self.browser.getControl(name='form.current_password').value = 'super-secrét'
+    >>> self.browser.getControl(name='form.new_password').value = 'super-sécrét'
+    >>> self.browser.getControl(name='form.new_password_ctl').value = 'super-sécrét'
     >>> self.browser.getControl(name="form.actions.reset_passwd").click()
     >>> 'Password changed' in self.browser.contents
     True
@@ -43,7 +52,7 @@ Okay the password has been changed, let's logout and login again with the new pa
     >>> self.browser.open('http://nohost/plone/')
     >>> self.browser.getLink('Log in').click()
     >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'super-secret'
+    >>> self.browser.getControl('Password').value = 'super-sécrét'
     >>> self.browser.getControl('Log in').click()
 
 If we are logged in the change password form is available
@@ -67,7 +76,7 @@ Check that we are given instructions on what is a valid password
 
 Let's try to change the password with an invalid password:
 
-    >>> self.browser.getControl(name='form.current_password').value = 'super-secret'
+    >>> self.browser.getControl(name='form.current_password').value = 'super-sécrét'
     >>> self.browser.getControl(name='form.new_password').value = 'dead parrot'
     >>> self.browser.getControl(name='form.new_password_ctl').value = 'dead parrot'
     >>> self.browser.getControl(name="form.actions.reset_passwd").click()
@@ -77,7 +86,7 @@ Let's try to change the password with an invalid password:
 
 Now try a valid password
 
-    >>> self.browser.getControl(name='form.current_password').value = 'super-secret'
+    >>> self.browser.getControl(name='form.current_password').value = 'super-sécrét'
     >>> self.browser.getControl(name='form.new_password').value = 'fish'
     >>> self.browser.getControl(name='form.new_password_ctl').value = 'fish'
     >>> self.browser.getControl(name="form.actions.reset_passwd").click()


Repository: plone.app.users
Branch: refs/heads/1.2.x
Date: 2015-05-20T14:36:15+02:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/plone.app.users/commit/7e259c10db0e553e23ae7003e62a691c578f11bc

Added last bootstrap

Files changed:
M bootstrap.py

diff --git a/bootstrap.py b/bootstrap.py
index 716795f..a629566 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -18,75 +18,14 @@
 use the -c option to specify an alternate configuration file.
 """
 
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
+import os
+import shutil
+import sys
+import tempfile
+
 from optparse import OptionParser
 
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
+tmpeggs = tempfile.mkdtemp()
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -96,31 +35,13 @@ def normalize_to_url(option, opt_str, value, parser):
 Simply run this script in a directory containing a buildout.cfg, using the
 Python that you want bin/buildout to use.
 
-Note that by using --setup-source and --download-base to point to
-local resources, you can keep this script from going over the network.
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
+parser.add_option("-v", "--version", help="use a specific zc.buildout version")
+
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
@@ -130,82 +51,80 @@ def normalize_to_url(option, opt_str, value, parser):
                         "extensions for you.  If you use this flag, "
                         "bootstrap and buildout will get the newest releases "
                         "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--setuptools-version",
+                  help="use a specific setuptools version")
 
-options, orig_args = parser.parse_args()
 
-args = []
+options, args = parser.parse_args()
 
-# if -c was provided, we push it back into args for buildout's main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
+######################################################################
+# load/install setuptools
+
+try:
+    if options.allow_site_packages:
+        import setuptools
+        import pkg_resources
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
 
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
+ez = {}
+exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
 
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
 
-if options.accept_buildout_test_releases:
-    args.append('buildout:accept-buildout-test-releases=true')
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
 
-try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
-    if not hasattr(pkg_resources, '_distribute'):
-        raise ImportError
-except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
-    ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
-    ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
-    import pkg_resources
-    # This does not (always?) update the default working set.  We will
-    # do it.
-    for path in sys.path:
-        if path not in pkg_resources.working_set.entries:
-            pkg_resources.working_set.add_entry(path)
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
-
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
-
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
-if find_links:
-    cmd.extend(['-f', quote(find_links)])
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
 
-if options.use_distribute:
-    setup_requirement = 'distribute'
-else:
-    setup_requirement = 'setuptools'
 ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
+
+cmd = [sys.executable, '-c',
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
 
 requirement = 'zc.buildout'
 version = options.version
@@ -215,12 +134,17 @@ def normalize_to_url(option, opt_str, value, parser):
     _final_parts = '*final-', '*final'
 
     def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
     index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
+        search_path=[setuptools_path])
     if find_links:
         index.add_find_links((find_links,))
     req = pkg_resources.Requirement.parse(requirement)
@@ -242,25 +166,24 @@ def _final_version(parsed_version):
     requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
-
-ws.add_entry(eggs_dir)
+import subprocess
+if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
 ws.require(requirement)
 import zc.buildout.buildout
-if orig_args:
-    # run buildout with commands passed to bootstrap.py, then actually bootstrap
-    zc.buildout.buildout.main(args + orig_args)
-zc.buildout.buildout.main(args + ['bootstrap'])
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)


Repository: plone.app.users
Branch: refs/heads/1.2.x
Date: 2015-06-03T11:17:33+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.users/commit/fea2bb9fcba090a28f49f0317ecb0fe0ace7b678

Merge pull request #36 from sgeulette/1.2.x

Fixed @@change-password to accept current password containing non-ascii ...

Files changed:
M CHANGES.rst
M bootstrap.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/tests/password.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 5046c30..43aac68 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -7,6 +7,10 @@ Changelog
 - Fixed "Add new user" form when there are too many groups.
   Fixes https://github.com/plone/plone.app.users/issues/33
   [avoinea]
+- Fixed @@change-password to accept current password containing non-ascii chars
+  [sgeulette]
+- Fixed @@change-password to accept new password containing non-ascii chars
+  [sgeulette]
 
 
 1.2.1 (2014-10-21)
diff --git a/bootstrap.py b/bootstrap.py
index 716795f..a629566 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -18,75 +18,14 @@
 use the -c option to specify an alternate configuration file.
 """
 
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
+import os
+import shutil
+import sys
+import tempfile
+
 from optparse import OptionParser
 
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
+tmpeggs = tempfile.mkdtemp()
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -96,31 +35,13 @@ def normalize_to_url(option, opt_str, value, parser):
 Simply run this script in a directory containing a buildout.cfg, using the
 Python that you want bin/buildout to use.
 
-Note that by using --setup-source and --download-base to point to
-local resources, you can keep this script from going over the network.
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
+parser.add_option("-v", "--version", help="use a specific zc.buildout version")
+
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
@@ -130,82 +51,80 @@ def normalize_to_url(option, opt_str, value, parser):
                         "extensions for you.  If you use this flag, "
                         "bootstrap and buildout will get the newest releases "
                         "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--setuptools-version",
+                  help="use a specific setuptools version")
 
-options, orig_args = parser.parse_args()
 
-args = []
+options, args = parser.parse_args()
 
-# if -c was provided, we push it back into args for buildout's main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
+######################################################################
+# load/install setuptools
+
+try:
+    if options.allow_site_packages:
+        import setuptools
+        import pkg_resources
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
 
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
+ez = {}
+exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
 
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
 
-if options.accept_buildout_test_releases:
-    args.append('buildout:accept-buildout-test-releases=true')
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
 
-try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
-    if not hasattr(pkg_resources, '_distribute'):
-        raise ImportError
-except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
-    ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
-    ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
-    import pkg_resources
-    # This does not (always?) update the default working set.  We will
-    # do it.
-    for path in sys.path:
-        if path not in pkg_resources.working_set.entries:
-            pkg_resources.working_set.add_entry(path)
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
-
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
-
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
-if find_links:
-    cmd.extend(['-f', quote(find_links)])
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
 
-if options.use_distribute:
-    setup_requirement = 'distribute'
-else:
-    setup_requirement = 'setuptools'
 ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
+
+cmd = [sys.executable, '-c',
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
 
 requirement = 'zc.buildout'
 version = options.version
@@ -215,12 +134,17 @@ def normalize_to_url(option, opt_str, value, parser):
     _final_parts = '*final-', '*final'
 
     def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
     index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
+        search_path=[setuptools_path])
     if find_links:
         index.add_find_links((find_links,))
     req = pkg_resources.Requirement.parse(requirement)
@@ -242,25 +166,24 @@ def _final_version(parsed_version):
     requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
-
-ws.add_entry(eggs_dir)
+import subprocess
+if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
 ws.require(requirement)
 import zc.buildout.buildout
-if orig_args:
-    # run buildout with commands passed to bootstrap.py, then actually bootstrap
-    zc.buildout.buildout.main(args + orig_args)
-zc.buildout.buildout.main(args + ['bootstrap'])
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py
index 3ef1fd0..809c433 100644
--- a/plone/app/users/browser/personalpreferences.py
+++ b/plone/app/users/browser/personalpreferences.py
@@ -430,7 +430,8 @@ def validate_password(self, action, data):
         # check if password is correct
         current_password = data.get('current_password')
         if current_password:
-            current_password = current_password.encode('ascii', 'ignore')
+            if isinstance(current_password, unicode):
+                current_password = current_password.encode('utf8')
 
             if not membertool.testCurrentPassword(current_password):
                 err_str = _(u"Incorrect value for current password")
@@ -460,6 +461,8 @@ def action_reset_passwd(self, action, data):
         membertool = getToolByName(self.context, 'portal_membership')
 
         password = data['new_password']
+        if isinstance(password, unicode):
+            password = password.encode('utf8')
 
         try:
             membertool.setPassword(password, None, REQUEST=self.request)
diff --git a/plone/app/users/tests/password.txt b/plone/app/users/tests/password.txt
index 74cc83d..8531113 100644
--- a/plone/app/users/tests/password.txt
+++ b/plone/app/users/tests/password.txt
@@ -28,11 +28,20 @@ Now we should be able to access the change password form:
     >>> self.browser.url.endswith(view_name)
     True
 
-Let's try to change the password:
+Let's try to change the password with a new one containing non-ascii chars:
 
     >>> self.browser.getControl(name='form.current_password').value = 'secret'
-    >>> self.browser.getControl(name='form.new_password').value = 'super-secret'
-    >>> self.browser.getControl(name='form.new_password_ctl').value = 'super-secret'
+    >>> self.browser.getControl(name='form.new_password').value = 'super-secrét'
+    >>> self.browser.getControl(name='form.new_password_ctl').value = 'super-secrét'
+    >>> self.browser.getControl(name="form.actions.reset_passwd").click()
+    >>> 'Password changed' in self.browser.contents
+    True
+
+Let's try to change the password with the current one containing non-ascii chars:
+
+    >>> self.browser.getControl(name='form.current_password').value = 'super-secrét'
+    >>> self.browser.getControl(name='form.new_password').value = 'super-sécrét'
+    >>> self.browser.getControl(name='form.new_password_ctl').value = 'super-sécrét'
     >>> self.browser.getControl(name="form.actions.reset_passwd").click()
     >>> 'Password changed' in self.browser.contents
     True
@@ -43,7 +52,7 @@ Okay the password has been changed, let's logout and login again with the new pa
     >>> self.browser.open('http://nohost/plone/')
     >>> self.browser.getLink('Log in').click()
     >>> self.browser.getControl('Login Name').value = 'test_user_1_'
-    >>> self.browser.getControl('Password').value = 'super-secret'
+    >>> self.browser.getControl('Password').value = 'super-sécrét'
     >>> self.browser.getControl('Log in').click()
 
 If we are logged in the change password form is available
@@ -67,7 +76,7 @@ Check that we are given instructions on what is a valid password
 
 Let's try to change the password with an invalid password:
 
-    >>> self.browser.getControl(name='form.current_password').value = 'super-secret'
+    >>> self.browser.getControl(name='form.current_password').value = 'super-sécrét'
     >>> self.browser.getControl(name='form.new_password').value = 'dead parrot'
     >>> self.browser.getControl(name='form.new_password_ctl').value = 'dead parrot'
     >>> self.browser.getControl(name="form.actions.reset_passwd").click()
@@ -77,7 +86,7 @@ Let's try to change the password with an invalid password:
 
 Now try a valid password
 
-    >>> self.browser.getControl(name='form.current_password').value = 'super-secret'
+    >>> self.browser.getControl(name='form.current_password').value = 'super-sécrét'
     >>> self.browser.getControl(name='form.new_password').value = 'fish'
     >>> self.browser.getControl(name='form.new_password_ctl').value = 'fish'
     >>> self.browser.getControl(name="form.actions.reset_passwd").click()


