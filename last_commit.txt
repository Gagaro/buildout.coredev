Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T09:32:58-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/26dae505afce8a5f737d14058f8dc60b0a4a83a3

Implmented the ability to compile LESS files through the theme editor.

Files changed:
M mockup/patterns/filemanager/js/addnew.js
M mockup/patterns/filemanager/js/customize.js
M mockup/patterns/filemanager/js/delete.js
M mockup/patterns/filemanager/js/newfolder.js
M mockup/patterns/filemanager/js/rename.js
M mockup/patterns/filemanager/js/upload.js
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/resourceregistry/js/builder.js
M mockup/patterns/resourceregistry/js/iframe.js
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/pattern.thememapper.less

diff --git a/mockup/patterns/filemanager/js/addnew.js b/mockup/patterns/filemanager/js/addnew.js
index 5c05dd6..c2f65cc 100644
--- a/mockup/patterns/filemanager/js/addnew.js
+++ b/mockup/patterns/filemanager/js/addnew.js
@@ -34,10 +34,7 @@ define([
           },
           success: function(data) {
             self.hide();
-            self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+            self.app.refreshTree();          
           }
         });
         // XXX show loading
diff --git a/mockup/patterns/filemanager/js/customize.js b/mockup/patterns/filemanager/js/customize.js
index 15a8f9c..985108f 100644
--- a/mockup/patterns/filemanager/js/customize.js
+++ b/mockup/patterns/filemanager/js/customize.js
@@ -64,10 +64,7 @@ define([
           // clear out
           self.$('input.search').attr('value', '');
           self.$results.empty();
-          self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+          self.app.refreshTree();
         }
       });
     }
diff --git a/mockup/patterns/filemanager/js/delete.js b/mockup/patterns/filemanager/js/delete.js
index 34e6649..0ba3381 100644
--- a/mockup/patterns/filemanager/js/delete.js
+++ b/mockup/patterns/filemanager/js/delete.js
@@ -29,10 +29,8 @@ define([
         },
         success: function(data) {
           self.hide();
-          self.app.$tree.tree(
-            'loadDataFromUrl',
-            self.app.options.actionUrl + '?action=dataTree'
-          );
+          self.app.refreshTree()
+          self.app.resizeEditor();
           // ugly, $tabs should have an API
           $('.nav .active .remove').click();
         }
diff --git a/mockup/patterns/filemanager/js/newfolder.js b/mockup/patterns/filemanager/js/newfolder.js
index 57e2234..337f519 100644
--- a/mockup/patterns/filemanager/js/newfolder.js
+++ b/mockup/patterns/filemanager/js/newfolder.js
@@ -34,10 +34,7 @@ define([
           },
           success: function(data) {
             self.hide();
-            self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+            self.app.refreshTree();
           }
         });
         // XXX show loading
diff --git a/mockup/patterns/filemanager/js/rename.js b/mockup/patterns/filemanager/js/rename.js
index 4624431..074ed1f 100644
--- a/mockup/patterns/filemanager/js/rename.js
+++ b/mockup/patterns/filemanager/js/rename.js
@@ -44,10 +44,7 @@ define([
           },
           success: function(data) {
             self.hide();
-            self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+            self.app.refreshTree();
             // ugly, $tabs should have an API
             $('.nav .active .remove').click();
           }
diff --git a/mockup/patterns/filemanager/js/upload.js b/mockup/patterns/filemanager/js/upload.js
index 296f305..684d10a 100644
--- a/mockup/patterns/filemanager/js/upload.js
+++ b/mockup/patterns/filemanager/js/upload.js
@@ -21,7 +21,13 @@ define([
         url: self.app.options.uploadUrl,
         success: function(response) {
           if( self.callback ) {
-            self.callback.apply(self.app, [response]);
+            if( response.status == "success" ) {  
+              self.callback.apply(self.app, [response]);
+            }
+            else
+            {
+                alert("There was a problem during the upload process");
+            }
           }
         }
       });
diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index f4985dd..60e782f 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -129,7 +129,7 @@ define([
         triggerView: new ButtonView({
           id: 'delete',
           title: _t('Delete'),
-          tooltip: _('Delete currently selected resource'),
+          tooltip: _t('Delete currently selected resource'),
           context: 'danger'
         }),
         app: self
@@ -155,7 +155,7 @@ define([
             context: 'default'
           }),
           app: self,
-          callback: self.addTreeElement
+          callback: self.refreshTree
         });
         self.views.push(uploadView);
         mainButtons.push(uploadView.triggerView);
@@ -215,54 +215,16 @@ define([
     $: function(selector){
       return this.$el.find(selector);
     },
-    addTreeElement: function(file) {
+    refreshTree: function(callback) {
       var self = this;
-
-      if( file.status !== 'success' )
-      {
-          alert('There was a problem during the upload process.');
-          return;
-      }
-
-      if( self.$tree === undefined ) {
-        return;
-      }
-
-      var node = self.getSelectedNode();
-      var path = "";
-      var name = file.name;
-
-      if( node.filename ) {
-        //We just want the selected folder, not an object in it.
-        path = node.path.substr(0, node.path.indexOf(node.filename) - 1);
-        node = self.$tree.tree('moveUp');
-      }
-      else if( node.path ){
-        path = node.path;
-      }
-
-      var options = {
-        label: name,
-        path: path + '/' + name,
-        filename: name,
-        fileType: name.substr(name.lastIndexOf('.') + 1, name.length),
-        folder: false,
-        name: name
-      };
-
-      if( node === false )
-      {
-        //If node is empty, jqtree makes the new node a root
-        node = null
-      }
-      var newNode = self.$tree.tree('appendNode', options, node);
-      self.$tree.tree('selectNode', newNode);
-      self.openFile({node: newNode});
-      //Close the upload popover
-      var upload = self.getUpload();
-      if( upload.triggerView.$el.hasClass('active') ) {
-        upload.options.triggerView.$el.click();
+      if( callback === undefined ) {
+        callback = function() {};
       }
+      self.$tree.tree('loadDataFromUrl', 
+        self.options.actionUrl + '?action=dataTree',
+        null,
+        callback
+      );
     },
     render: function(){
       var self = this;
@@ -313,6 +275,9 @@ define([
         }
         return true;
       }
+      if( event.node ) {
+        self.$tree.tree('selectNode', event.node);
+      }
       if(self.fileData[doc]) {
         $('li', self.$tabs).removeClass('active');
         var $existing = $('[data-path="' + doc + '"]');
@@ -333,20 +298,22 @@ define([
                   $item = $(this).parent().next();
                 }
                 $item.addClass('active');
-                self.openEditor($item.attr('data-path'));
+                $(this).parent().remove();
+                self.openFileByPath($item.attr('data-path'));
               } else {
+                $(this).parent().remove();
                 self.openEditor();
               }
             }
-            $(this).parent().remove();
-            self.resizeEditor();
+            else {
+              $(this).parent().remove();
+            }
           });
           $('.select', $item).click(function(e){
             e.preventDefault();
             $('li', self.$tabs).removeClass('active');
             var $li = $(this).parent();
             $li.addClass('active');
-            self.$tree.tree('selectNode', event.node);
             self.openFile({node: event.node});
           });
         }else{
@@ -364,6 +331,41 @@ define([
         });
       }
     },
+    openFileByPath: function(path) {
+      var self = this;
+      if( path === undefined || path === "" )
+      {
+       return false;
+      }
+
+      if( path.indexOf('/') === 0 )
+      {
+        path = path.substr(1,path.length);
+      }
+      
+      var folders = path.split('/');
+      var children = self.$tree.tree('getTree').children;
+
+      for( var i = 0; i < folders.length; i++ )
+      {
+        for( var z = 0; z < children.length; z++ )
+        {
+          if( children[z].name == folders[i] ) {
+            if( children[z].folder == true ) {
+              children = children[z].children;
+              break;
+            }
+            else {
+              self.$tree.tree('selectNode', children[z]);
+              self.openFile({node: children[z]});
+              return true;
+            }
+          }
+        }
+      }
+
+      return false;
+    },
     doAction: function(action, options) {
       var self = this;
       if (!options){
@@ -396,12 +398,11 @@ define([
       }
       self.ace = new TextEditor(self.$editor);
 
-      self.resizeEditor();
-
       if( self.currentPath === undefined ) {
           self.ace.setText();
           self.ace.setSyntax('text');
           self.ace.editor.clearSelection();
+          self.$tree.tree('selectNode', null);
       }
       else if( typeof self.fileData[path].info !== 'undefined' )
       {
@@ -416,6 +417,8 @@ define([
           self.ace.editor.clearSelection();
       }
 
+      self.resizeEditor();
+      self.$el.trigger("fileChange");
       self.ace.editor.on('change', function() {
         if (self.ace.editor.curOp && self.ace.editor.curOp.command.name) {
           $('[data-path="' + path + '"]').addClass("modified");
@@ -470,9 +473,9 @@ define([
     resizeEditor: function() {
         var self = this;
 
+        self.$editor = $('.editor', self.$el);
         var tab = self.$tabs.children()[0];
-
-        if( $(tab).height() < (self.$tabs.height() - 1) ) {
+        if( $(tab).outerHeight() < (self.$tabs.height() - 1) ) {
             self.$tabs.addClass('smallTabs');
             $(self.$tabs.children()).each(function() {
                 self.shrinkTab(this);
diff --git a/mockup/patterns/resourceregistry/js/builder.js b/mockup/patterns/resourceregistry/js/builder.js
index 28f1ccd..65331db 100644
--- a/mockup/patterns/resourceregistry/js/builder.js
+++ b/mockup/patterns/resourceregistry/js/builder.js
@@ -120,7 +120,7 @@ define([
       var checkFinished = function(){
         var $styles =  $('style[type="text/css"][id]', iframe.document);
         for(var i=0; i<$styles.length; i=i+1){
-          var $style = $styles.eq(i); 
+          var $style = $styles.eq(i);
           if($style.attr('id') === 'less:error-message'){
             self.addResult(_t('Error compiling less'));
             return self.finished(true);
diff --git a/mockup/patterns/resourceregistry/js/iframe.js b/mockup/patterns/resourceregistry/js/iframe.js
index 05cf90a..37c73a0 100644
--- a/mockup/patterns/resourceregistry/js/iframe.js
+++ b/mockup/patterns/resourceregistry/js/iframe.js
@@ -15,6 +15,7 @@ define([
       title: '',
       name: '',
       resources: [],
+      callback: function(){},
       configure: function(){},
       onLoad: function(){}
     },
@@ -106,4 +107,4 @@ define([
   };
 
   return window.IFrame;
-});
\ No newline at end of file
+});
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 11810c3..73c33b8 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -34,11 +34,15 @@ define([
   'translate',
   'text!mockup-patterns-thememapper-url/templates/inspector.xml',
   'mockup-patterns-filemanager',
+  'mockup-patterns-modal',
   'mockup-patterns-thememapper-url/js/rulebuilder',
   'mockup-patterns-thememapper-url/js/rulebuilderview',
+  'mockup-patterns-thememapper-url/js/lessbuilderview',
+  'mockup-patterns-resourceregistry-url/js/iframe',
   'mockup-ui-url/views/button',
-  'mockup-ui-url/views/buttongroup'
-], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, ButtonView, ButtonGroup) {
+  'mockup-ui-url/views/buttongroup',
+  'mockup-utils'
+], function($, Base, _, _t, InspectorTemplate, FileManager, Modal, RuleBuilder, RuleBuilderView, LessBuilderView, IFrame, ButtonView, ButtonGroup, utils) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
@@ -280,6 +284,8 @@ define([
     unthemedInspector: null,
     ruleBuilder: null,
     rulebuilderView: null,
+    lessUrl: null,
+    lessPaths: {},
     $fileManager: null,
     $container: null,
     $inspectorContainer: null,
@@ -292,12 +298,14 @@ define([
       }
       self.$fileManager = $('<div class="pat-filemanager"/>').appendTo(self.$el);
       self.$container = $('<div class="row"></div>').appendTo(self.$el);
+      self.$styleBox = $('<div id="styleBox"></div>').appendTo(self.$el);
       self.$inspectorContainer = $('<div id="inspectors"></div>').appendTo(self.$container);
       self.$mockupInspector = $('<div class="mockup-inspector"/>').appendTo(self.$inspectorContainer);
       self.$unthemedInspector = $('<div class="unthemed-inspector"/>').appendTo(self.$inspectorContainer);
 
       // initialize patterns now
       self.editable = (self.options.editable == "True") ? true : false;
+      self.lessUrl = (self.options.lessUrl !== undefined ) ? self.options.lessUrl : false;
 
       self.options.filemanagerConfig.uploadUrl = self.options.themeUrl;
       self.options.filemanagerConfig.theme = true;
@@ -308,6 +316,11 @@ define([
 
       self.ruleBuilder = new RuleBuilder(self, self.ruleBuilderCallback);
 
+      self.fileManager.on("fileChange", function() {
+        var node = self.fileManager.getSelectedNode();
+        self.setLessPaths(node);
+      });
+
       self.mockupInspector = new Inspector(self.$mockupInspector, {
         name: _t('HTML mockup'),
         ruleBuilder: self.ruleBuilder,
@@ -319,6 +332,10 @@ define([
         ruleBuilder: self.ruleBuilder,
         url: self.options.unthemedUrl,
       });
+      self.fileManager.$tree.bind('tree.click', function(e){
+      });
+      self.buildLessButton.$el.hide();
+
       if( !self.editable ) {
         if( self.fileManager.toolbar ) {
           var items = self.fileManager.toolbar.items;
@@ -331,6 +348,135 @@ define([
       // initially, let's hide the panels
       self.hideInspectors();
     },
+    setLessPaths: function(node) {
+      var self = this;
+
+      if( node.fileType == "less" ){
+        self.buildLessButton.$el.show();
+      }
+      else{
+        self.buildLessButton.$el.hide();
+      }
+      
+      if( node.path != "" ) {
+        var reg = new RegExp("/(.*\\.)less$", "m");
+        var path = reg.exec(node.path);
+
+        if( path === null ) {
+          self.lessPaths = {};
+          return false;
+        }
+        var lessPath = path[1] + "less";
+        var cssPath = path[1] + "css";
+
+        //file paths should be in the form of:
+        // "[directory/]filename.less"
+        self.lessPaths = {
+          'less': lessPath,
+          'save': cssPath
+        };
+
+        return true;
+      }
+      else {
+        self.lessPaths = {};
+        return false;
+      }
+    },
+    saveThemeCSS: function() {
+      var self = this.env;
+      var css = self.$styleBox.html();
+
+      if( css === "" ) {
+        //There was probably a problem during compilation
+        return false;
+      }
+
+      self.fileManager.doAction('saveFile', {
+        type: 'POST',
+        data: {
+          path: self.lessPaths['save'],
+          data: css,
+          _authenticator: utils.getAuthenticator()
+        },
+        success: function(data) {
+          self.fileManager.refreshTree(function() {
+            //We need to make sure we open the newest version
+            delete self.fileManager.fileData['/' + self.lessPaths['save']]
+            self.fileManager.openFileByPath(self.lessPaths['save'])
+          }); 
+          self.lessbuilderView.end();
+        }
+      });
+
+      window.iframe['lessc'].destroy();
+
+    },
+    showLessBuilder: function() {
+      var self = this;
+
+      if( self.lessPaths['save'] === undefined ) {
+        self.lessbuilderView.showError("Error: invalid filetype");
+        return false;
+      }
+
+      self.lessbuilderView.working();
+
+      //TODO remove hardcoded variable URL
+      var config = {
+        less: ['http://localhost:8080/Plone/less-variables.js',
+                self.lessPaths['less'],
+                self.lessUrl]
+      }
+
+      var iframe = new IFrame({
+        name: 'lessc',
+        resources: config.less,
+        callback: self.saveThemeCSS,
+        env: self,
+        configure: function(iframe){
+          iframe.window.lessErrorReporting = function(what, error, href){
+            if( error.href !== undefined )
+            {
+              self.fileManager.ace.editor.scrollToLine(error.line, true);
+              if( error.type == "Name" ) {
+                var reg = new RegExp(".*(@\\S+)\\s.*");
+                var matches = reg.exec(error.message);
+                if( matches !== null ) {
+                  var varName = matches[1];
+                  var result = self.fileManager.ace.editor.findAll(varName);
+                }
+              }
+              else {
+                //The line number is always off by 1? (and LESS indexes from 0) so -2
+                self.fileManager.ace.editor.moveCursorToPosition({row: error.line - 2, column: error.column});
+              }
+              self.lessbuilderView.showError(error);
+            }
+          };
+
+          iframe.styles = [];
+        },
+        onLoad: function(self) {
+          less.pageLoadFinished.then(
+            function() {
+              var $ = window.parent.$;
+              var iframe = window.iframe['lessc'];
+              var styles = $('style', iframe.document);
+              var styleBox = $('#styleBox');
+
+              $(styleBox).empty();
+              $(styles).each(function() {
+                styleBox.append(this.innerHTML);
+              });
+
+              iframe.options.callback();
+            }
+          );
+        }
+      });
+
+    },
     showInspectors: function(){
       var self = this;
       var $parent = self.$mockupInspector.parent();
@@ -399,7 +545,12 @@ define([
       self.previewThemeButton.on('button:click', function(){
         window.open(self.options.previewUrl);
       });
-
+      self.buildLessButton = new ButtonView({
+        id: 'buildless',
+        title: _t('Build CSS'),
+        tooltip: _t('Compile LESS file'),
+        context: 'default'
+      });
       self.helpButton = new ButtonView({
         id: 'helpbutton',
         title: _t('Help'),
@@ -413,18 +564,24 @@ define([
         triggerView: self.buildRuleButton,
         app: self
       });
+      self.lessbuilderView = new LessBuilderView({
+        triggerView: self.buildLessButton,
+        app: self
+      });
       self.buttonGroup = new ButtonGroup({
         items: [
           self.showInspectorsButton,
           self.buildRuleButton,
           self.previewThemeButton,
           self.fullscreenButton,
+          self.buildLessButton,
           self.helpButton
         ],
         id: 'mapper'
       });
       $('#toolbar .navbar', self.$el).append(self.buttonGroup.render().el);
       $('#toolbar .navbar', self.$el).append(self.rulebuilderView.render().el);
+      $('#toolbar .navbar', self.$el).append(self.lessbuilderView.render().el);
     }
   });
 
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index 5d1562d..000fdac 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -90,7 +90,6 @@
 
     .ace_editor {
         border: 1px solid #999;
-
         .info {
             width: 100%;
             height: 100%;
@@ -176,8 +175,16 @@
         }
     }
 
-    .navbar-nav > li.active a {
-        background-color: transparent;
+    .navbar-nav > li {
+        background-color: #DDD;
+
+        a {
+            background-color: transparent;
+        }
+    }
+    
+    .navbar-nav > li.active {
+        background-color: #FFF;
     }
 
     .nav.smallTabs li {
@@ -282,4 +289,11 @@
         }
     }
 
+    .errorMessage {
+        word-wrap: break-word;
+        font-size: small;
+    }
+    #styleBox {
+        display: none;
+    }
 }


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T09:37:59-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/912bf158f7c9f30cb7d12e76d10493d07ab7b626

included missing view file

Files changed:
A mockup/patterns/thememapper/js/lessbuilderview.js

diff --git a/mockup/patterns/thememapper/js/lessbuilderview.js b/mockup/patterns/thememapper/js/lessbuilderview.js
new file mode 100644
index 0000000..2e4ab22
--- /dev/null
+++ b/mockup/patterns/thememapper/js/lessbuilderview.js
@@ -0,0 +1,78 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+  'mockup-patterns-filemanager-url/js/basepopover',
+], function($, _, Backbone, PopoverView ) {
+  'use strict';
+  var lessBuilderTemplate = _.template(
+    '<div id="lessBuilder">' +
+      '<span class="message"></span>' +
+      '<span style="display: none;" class="errorMessage"></span>' +
+      '<div>' +
+        '<a id="compileBtn" class="btn btn-success" href="#">Compile</a>' +
+        '<a id="errorBtn" class="btn btn-default" href="#">Clear</a>' +
+      '</div>' +
+    '</div>'
+  );
+
+  var LessBuilderView = PopoverView.extend({
+    className: 'popover lessbuilderview',
+    title: _.template('<%= _t("LESS Builder") %>'),
+    content: lessBuilderTemplate,
+    $button: null,
+    $start: null,
+    $working: null,
+    $done: null,
+    $error: null,
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      self.$message = $('.message', this.$el);
+      self.$error = $('.errorMessage', this.$el);
+      self.$button = $('#compileBtn', this.$el);
+      self.$errorButton = $('#errorBtn', this.$el);
+      self.$button.on('click', function() {
+        self.app.showLessBuilder();
+      });
+      self.$errorButton.on('click', function() {
+        self.start();
+        self.toggle();
+      });
+      self.start();
+      return this;
+    },
+    toggle: function(button, e) {
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+    },
+    start: function() {
+      var self = this;
+      self.$button.show();
+      self.$errorButton.hide();
+      self.$message.text("Click to compile the current file");
+      self.$error.hide();
+    },
+    working: function() {
+      var self = this;
+      self.$button.hide();
+      self.$message.text("Working....");
+    },
+    end: function() {
+      var self = this;
+      self.$message.text("Compiled successfully");
+      setTimeout(self.reset.bind(self), 3000);
+    },
+    reset: function() {
+      var self = this;
+      self.start();
+      self.toggle();
+    },
+    showError: function(error) {
+      this.$message.text("");
+      this.$error.text(error).show();
+      this.$errorButton.show();
+    }
+  });
+
+  return LessBuilderView;
+});


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T10:47:35-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/7ead7da528b597ca40b48a5dce47828639b80fbe

Removed unneeded imports, correctly import less variable URL

Files changed:
M mockup/patterns/thememapper/pattern.js

diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 73c33b8..99b23ff 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -34,7 +34,6 @@ define([
   'translate',
   'text!mockup-patterns-thememapper-url/templates/inspector.xml',
   'mockup-patterns-filemanager',
-  'mockup-patterns-modal',
   'mockup-patterns-thememapper-url/js/rulebuilder',
   'mockup-patterns-thememapper-url/js/rulebuilderview',
   'mockup-patterns-thememapper-url/js/lessbuilderview',
@@ -42,7 +41,7 @@ define([
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup',
   'mockup-utils'
-], function($, Base, _, _t, InspectorTemplate, FileManager, Modal, RuleBuilder, RuleBuilderView, LessBuilderView, IFrame, ButtonView, ButtonGroup, utils) {
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, LessBuilderView, IFrame, ButtonView, ButtonGroup, utils) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
@@ -286,6 +285,7 @@ define([
     rulebuilderView: null,
     lessUrl: null,
     lessPaths: {},
+    lessVariableUrl: null,
     $fileManager: null,
     $container: null,
     $inspectorContainer: null,
@@ -306,6 +306,7 @@ define([
       // initialize patterns now
       self.editable = (self.options.editable == "True") ? true : false;
       self.lessUrl = (self.options.lessUrl !== undefined ) ? self.options.lessUrl : false;
+      self.lessVariableUrl = (self.options.lessVariables !== undefined ) ? self.options.lessVariables : false;
 
       self.options.filemanagerConfig.uploadUrl = self.options.themeUrl;
       self.options.filemanagerConfig.theme = true;
@@ -422,9 +423,8 @@ define([
 
       self.lessbuilderView.working();
 
-      //TODO remove hardcoded variable URL
       var config = {
-        less: ['http://localhost:8080/Plone/less-variables.js',
+        less: [ self.lessVariableUrl,
                 self.lessPaths['less'],
                 self.lessUrl]
       }


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T11:39:27-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/7f4a1176fee6ff8222d2d21dae0435d8ec6ea5dc

Small UI tweak to LESS builder

Files changed:
M mockup/patterns/thememapper/js/lessbuilderview.js
M mockup/patterns/thememapper/pattern.thememapper.less

diff --git a/mockup/patterns/thememapper/js/lessbuilderview.js b/mockup/patterns/thememapper/js/lessbuilderview.js
index 2e4ab22..03f4017 100644
--- a/mockup/patterns/thememapper/js/lessbuilderview.js
+++ b/mockup/patterns/thememapper/js/lessbuilderview.js
@@ -9,7 +9,7 @@ define([
     '<div id="lessBuilder">' +
       '<span class="message"></span>' +
       '<span style="display: none;" class="errorMessage"></span>' +
-      '<div>' +
+      '<div class="buttonBox">' +
         '<a id="compileBtn" class="btn btn-success" href="#">Compile</a>' +
         '<a id="errorBtn" class="btn btn-default" href="#">Clear</a>' +
       '</div>' +
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index 000fdac..056aafd 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -289,6 +289,9 @@
         }
     }
 
+    #lessBuilder .buttonBox {
+        margin-top: 10px;
+    }
     .errorMessage {
         word-wrap: break-word;
         font-size: small;


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T11:50:45-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/f7b03a147ca6bc4ef37e0015bcedff4bbebcb6b1

Thememapper will now focus on the editor after opening a file

Files changed:
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/thememapper/pattern.js

diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index 60e782f..7ccdbbe 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -501,6 +501,8 @@ define([
           self.ace.editor.resize();
           self.ace.editor.$blockScrolling = Infinity;
         }
+
+        self.ace.editor.focus();
     },
     setUploadUrl: function(path) {
       var self = this;
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 99b23ff..f7cce88 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -450,6 +450,7 @@ define([
               else {
                 //The line number is always off by 1? (and LESS indexes from 0) so -2
                 self.fileManager.ace.editor.moveCursorToPosition({row: error.line - 2, column: error.column});
+                self.fileManager.ace.editor.focus();
               }
               self.lessbuilderView.showError(error);
             }


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T12:31:00-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/16890240cb49c9de18853c2d90216888ab4b17eb

Moved showLessBuilder method into the lessbuilderview pattern

Files changed:
M mockup/patterns/thememapper/js/lessbuilderview.js
M mockup/patterns/thememapper/pattern.js

diff --git a/mockup/patterns/thememapper/js/lessbuilderview.js b/mockup/patterns/thememapper/js/lessbuilderview.js
index 03f4017..05a5c68 100644
--- a/mockup/patterns/thememapper/js/lessbuilderview.js
+++ b/mockup/patterns/thememapper/js/lessbuilderview.js
@@ -33,7 +33,7 @@ define([
       self.$button = $('#compileBtn', this.$el);
       self.$errorButton = $('#errorBtn', this.$el);
       self.$button.on('click', function() {
-        self.app.showLessBuilder();
+        self.showLessBuilder();
       });
       self.$errorButton.on('click', function() {
         self.start();
@@ -71,7 +71,72 @@ define([
       this.$message.text("");
       this.$error.text(error).show();
       this.$errorButton.show();
-    }
+    },
+    showLessBuilder: function() {
+      var self = this;
+
+      if( self.app.lessPaths['save'] === undefined ) {
+        self.showError("Error: invalid filetype");
+        return false;
+      }
+
+      self.working();
+
+      var config = {
+        less: [ self.app.lessVariableUrl,
+                self.app.lessPaths['less'],
+                self.app.lessUrl]
+      }
+
+      var iframe = new IFrame({
+        name: 'lessc',
+        resources: config.less,
+        callback: self.app.saveThemeCSS,
+        env: self.app,
+        configure: function(iframe){
+          iframe.window.lessErrorReporting = function(what, error, href){
+            if( error.href !== undefined )
+            {
+              self.app.fileManager.ace.editor.scrollToLine(error.line, true);
+              if( error.type == "Name" ) {
+                var reg = new RegExp(".*(@\\S+)\\s.*");
+                var matches = reg.exec(error.message);
+                if( matches !== null ) {
+                  var varName = matches[1];
+                  var result = self.app.fileManager.ace.editor.findAll(varName);
+                }
+              }
+              else {
+                //The line number is always off by 1? (and LESS indexes from 0) so -2
+                self.app.fileManager.ace.editor.moveCursorToPosition({row: error.line - 2, column: error.column});
+                self.app.fileManager.ace.editor.focus();
+              }
+              self.showError(error);
+            }
+          };
+
+          iframe.styles = [];
+        },
+        onLoad: function(self) {
+          less.pageLoadFinished.then(
+            function() {
+              var $ = window.parent.$;
+              var iframe = window.iframe['lessc'];
+              var styles = $('style', iframe.document);
+              var styleBox = $('#styleBox');
+
+              $(styleBox).empty();
+              $(styles).each(function() {
+                styleBox.append(this.innerHTML);
+              });
+
+              iframe.options.callback();
+            }
+          );
+        }
+      });
+
+    },
   });
 
   return LessBuilderView;
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index f7cce88..7e63c32 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -413,71 +413,6 @@ define([
       window.iframe['lessc'].destroy();
 
     },
-    showLessBuilder: function() {
-      var self = this;
-
-      if( self.lessPaths['save'] === undefined ) {
-        self.lessbuilderView.showError("Error: invalid filetype");
-        return false;
-      }
-
-      self.lessbuilderView.working();
-
-      var config = {
-        less: [ self.lessVariableUrl,
-                self.lessPaths['less'],
-                self.lessUrl]
-      }
-
-      var iframe = new IFrame({
-        name: 'lessc',
-        resources: config.less,
-        callback: self.saveThemeCSS,
-        env: self,
-        configure: function(iframe){
-          iframe.window.lessErrorReporting = function(what, error, href){
-            if( error.href !== undefined )
-            {
-              self.fileManager.ace.editor.scrollToLine(error.line, true);
-              if( error.type == "Name" ) {
-                var reg = new RegExp(".*(@\\S+)\\s.*");
-                var matches = reg.exec(error.message);
-                if( matches !== null ) {
-                  var varName = matches[1];
-                  var result = self.fileManager.ace.editor.findAll(varName);
-                }
-              }
-              else {
-                //The line number is always off by 1? (and LESS indexes from 0) so -2
-                self.fileManager.ace.editor.moveCursorToPosition({row: error.line - 2, column: error.column});
-                self.fileManager.ace.editor.focus();
-              }
-              self.lessbuilderView.showError(error);
-            }
-          };
-
-          iframe.styles = [];
-        },
-        onLoad: function(self) {
-          less.pageLoadFinished.then(
-            function() {
-              var $ = window.parent.$;
-              var iframe = window.iframe['lessc'];
-              var styles = $('style', iframe.document);
-              var styleBox = $('#styleBox');
-
-              $(styleBox).empty();
-              $(styles).each(function() {
-                styleBox.append(this.innerHTML);
-              });
-
-              iframe.options.callback();
-            }
-          );
-        }
-      });
-
-    },
     showInspectors: function(){
       var self = this;
       var $parent = self.$mockupInspector.parent();


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T12:47:43-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/2780d7a790a4e2251de987908693b6e4076b9fb7

Changed incorrect IFrame import

Files changed:
M mockup/patterns/thememapper/js/lessbuilderview.js
M mockup/patterns/thememapper/pattern.js

diff --git a/mockup/patterns/thememapper/js/lessbuilderview.js b/mockup/patterns/thememapper/js/lessbuilderview.js
index 05a5c68..80668ab 100644
--- a/mockup/patterns/thememapper/js/lessbuilderview.js
+++ b/mockup/patterns/thememapper/js/lessbuilderview.js
@@ -3,7 +3,8 @@ define([
   'underscore',
   'backbone',
   'mockup-patterns-filemanager-url/js/basepopover',
-], function($, _, Backbone, PopoverView ) {
+  'mockup-patterns-resourceregistry-url/js/iframe'
+], function($, _, Backbone, PopoverView, IFrame ) {
   'use strict';
   var lessBuilderTemplate = _.template(
     '<div id="lessBuilder">' +
@@ -114,7 +115,6 @@ define([
               self.showError(error);
             }
           };
-
           iframe.styles = [];
         },
         onLoad: function(self) {
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 7e63c32..1b8f421 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -37,11 +37,10 @@ define([
   'mockup-patterns-thememapper-url/js/rulebuilder',
   'mockup-patterns-thememapper-url/js/rulebuilderview',
   'mockup-patterns-thememapper-url/js/lessbuilderview',
-  'mockup-patterns-resourceregistry-url/js/iframe',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup',
   'mockup-utils'
-], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, LessBuilderView, IFrame, ButtonView, ButtonGroup, utils) {
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, LessBuilderView, ButtonView, ButtonGroup, utils) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);


Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T12:49:11-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/6c08675bf36d6788bcb78d7a926ffadf47e63655

Merge pull request #513 from plone/lessbuilder

Implemented LESS compiling within the thememapper

Files changed:
A mockup/patterns/thememapper/js/lessbuilderview.js
M mockup/patterns/filemanager/js/addnew.js
M mockup/patterns/filemanager/js/customize.js
M mockup/patterns/filemanager/js/delete.js
M mockup/patterns/filemanager/js/newfolder.js
M mockup/patterns/filemanager/js/rename.js
M mockup/patterns/filemanager/js/upload.js
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/resourceregistry/js/builder.js
M mockup/patterns/resourceregistry/js/iframe.js
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/pattern.thememapper.less

diff --git a/mockup/patterns/filemanager/js/addnew.js b/mockup/patterns/filemanager/js/addnew.js
index 5c05dd6..c2f65cc 100644
--- a/mockup/patterns/filemanager/js/addnew.js
+++ b/mockup/patterns/filemanager/js/addnew.js
@@ -34,10 +34,7 @@ define([
           },
           success: function(data) {
             self.hide();
-            self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+            self.app.refreshTree();          
           }
         });
         // XXX show loading
diff --git a/mockup/patterns/filemanager/js/customize.js b/mockup/patterns/filemanager/js/customize.js
index 15a8f9c..985108f 100644
--- a/mockup/patterns/filemanager/js/customize.js
+++ b/mockup/patterns/filemanager/js/customize.js
@@ -64,10 +64,7 @@ define([
           // clear out
           self.$('input.search').attr('value', '');
           self.$results.empty();
-          self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+          self.app.refreshTree();
         }
       });
     }
diff --git a/mockup/patterns/filemanager/js/delete.js b/mockup/patterns/filemanager/js/delete.js
index 34e6649..0ba3381 100644
--- a/mockup/patterns/filemanager/js/delete.js
+++ b/mockup/patterns/filemanager/js/delete.js
@@ -29,10 +29,8 @@ define([
         },
         success: function(data) {
           self.hide();
-          self.app.$tree.tree(
-            'loadDataFromUrl',
-            self.app.options.actionUrl + '?action=dataTree'
-          );
+          self.app.refreshTree()
+          self.app.resizeEditor();
           // ugly, $tabs should have an API
           $('.nav .active .remove').click();
         }
diff --git a/mockup/patterns/filemanager/js/newfolder.js b/mockup/patterns/filemanager/js/newfolder.js
index 57e2234..337f519 100644
--- a/mockup/patterns/filemanager/js/newfolder.js
+++ b/mockup/patterns/filemanager/js/newfolder.js
@@ -34,10 +34,7 @@ define([
           },
           success: function(data) {
             self.hide();
-            self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+            self.app.refreshTree();
           }
         });
         // XXX show loading
diff --git a/mockup/patterns/filemanager/js/rename.js b/mockup/patterns/filemanager/js/rename.js
index 4624431..074ed1f 100644
--- a/mockup/patterns/filemanager/js/rename.js
+++ b/mockup/patterns/filemanager/js/rename.js
@@ -44,10 +44,7 @@ define([
           },
           success: function(data) {
             self.hide();
-            self.app.$tree.tree(
-              'loadDataFromUrl',
-              self.app.options.actionUrl + '?action=dataTree'
-            );
+            self.app.refreshTree();
             // ugly, $tabs should have an API
             $('.nav .active .remove').click();
           }
diff --git a/mockup/patterns/filemanager/js/upload.js b/mockup/patterns/filemanager/js/upload.js
index 296f305..684d10a 100644
--- a/mockup/patterns/filemanager/js/upload.js
+++ b/mockup/patterns/filemanager/js/upload.js
@@ -21,7 +21,13 @@ define([
         url: self.app.options.uploadUrl,
         success: function(response) {
           if( self.callback ) {
-            self.callback.apply(self.app, [response]);
+            if( response.status == "success" ) {  
+              self.callback.apply(self.app, [response]);
+            }
+            else
+            {
+                alert("There was a problem during the upload process");
+            }
           }
         }
       });
diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index f4985dd..7ccdbbe 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -129,7 +129,7 @@ define([
         triggerView: new ButtonView({
           id: 'delete',
           title: _t('Delete'),
-          tooltip: _('Delete currently selected resource'),
+          tooltip: _t('Delete currently selected resource'),
           context: 'danger'
         }),
         app: self
@@ -155,7 +155,7 @@ define([
             context: 'default'
           }),
           app: self,
-          callback: self.addTreeElement
+          callback: self.refreshTree
         });
         self.views.push(uploadView);
         mainButtons.push(uploadView.triggerView);
@@ -215,54 +215,16 @@ define([
     $: function(selector){
       return this.$el.find(selector);
     },
-    addTreeElement: function(file) {
+    refreshTree: function(callback) {
       var self = this;
-
-      if( file.status !== 'success' )
-      {
-          alert('There was a problem during the upload process.');
-          return;
-      }
-
-      if( self.$tree === undefined ) {
-        return;
-      }
-
-      var node = self.getSelectedNode();
-      var path = "";
-      var name = file.name;
-
-      if( node.filename ) {
-        //We just want the selected folder, not an object in it.
-        path = node.path.substr(0, node.path.indexOf(node.filename) - 1);
-        node = self.$tree.tree('moveUp');
-      }
-      else if( node.path ){
-        path = node.path;
-      }
-
-      var options = {
-        label: name,
-        path: path + '/' + name,
-        filename: name,
-        fileType: name.substr(name.lastIndexOf('.') + 1, name.length),
-        folder: false,
-        name: name
-      };
-
-      if( node === false )
-      {
-        //If node is empty, jqtree makes the new node a root
-        node = null
-      }
-      var newNode = self.$tree.tree('appendNode', options, node);
-      self.$tree.tree('selectNode', newNode);
-      self.openFile({node: newNode});
-      //Close the upload popover
-      var upload = self.getUpload();
-      if( upload.triggerView.$el.hasClass('active') ) {
-        upload.options.triggerView.$el.click();
+      if( callback === undefined ) {
+        callback = function() {};
       }
+      self.$tree.tree('loadDataFromUrl', 
+        self.options.actionUrl + '?action=dataTree',
+        null,
+        callback
+      );
     },
     render: function(){
       var self = this;
@@ -313,6 +275,9 @@ define([
         }
         return true;
       }
+      if( event.node ) {
+        self.$tree.tree('selectNode', event.node);
+      }
       if(self.fileData[doc]) {
         $('li', self.$tabs).removeClass('active');
         var $existing = $('[data-path="' + doc + '"]');
@@ -333,20 +298,22 @@ define([
                   $item = $(this).parent().next();
                 }
                 $item.addClass('active');
-                self.openEditor($item.attr('data-path'));
+                $(this).parent().remove();
+                self.openFileByPath($item.attr('data-path'));
               } else {
+                $(this).parent().remove();
                 self.openEditor();
               }
             }
-            $(this).parent().remove();
-            self.resizeEditor();
+            else {
+              $(this).parent().remove();
+            }
           });
           $('.select', $item).click(function(e){
             e.preventDefault();
             $('li', self.$tabs).removeClass('active');
             var $li = $(this).parent();
             $li.addClass('active');
-            self.$tree.tree('selectNode', event.node);
             self.openFile({node: event.node});
           });
         }else{
@@ -364,6 +331,41 @@ define([
         });
       }
     },
+    openFileByPath: function(path) {
+      var self = this;
+      if( path === undefined || path === "" )
+      {
+       return false;
+      }
+
+      if( path.indexOf('/') === 0 )
+      {
+        path = path.substr(1,path.length);
+      }
+      
+      var folders = path.split('/');
+      var children = self.$tree.tree('getTree').children;
+
+      for( var i = 0; i < folders.length; i++ )
+      {
+        for( var z = 0; z < children.length; z++ )
+        {
+          if( children[z].name == folders[i] ) {
+            if( children[z].folder == true ) {
+              children = children[z].children;
+              break;
+            }
+            else {
+              self.$tree.tree('selectNode', children[z]);
+              self.openFile({node: children[z]});
+              return true;
+            }
+          }
+        }
+      }
+
+      return false;
+    },
     doAction: function(action, options) {
       var self = this;
       if (!options){
@@ -396,12 +398,11 @@ define([
       }
       self.ace = new TextEditor(self.$editor);
 
-      self.resizeEditor();
-
       if( self.currentPath === undefined ) {
           self.ace.setText();
           self.ace.setSyntax('text');
           self.ace.editor.clearSelection();
+          self.$tree.tree('selectNode', null);
       }
       else if( typeof self.fileData[path].info !== 'undefined' )
       {
@@ -416,6 +417,8 @@ define([
           self.ace.editor.clearSelection();
       }
 
+      self.resizeEditor();
+      self.$el.trigger("fileChange");
       self.ace.editor.on('change', function() {
         if (self.ace.editor.curOp && self.ace.editor.curOp.command.name) {
           $('[data-path="' + path + '"]').addClass("modified");
@@ -470,9 +473,9 @@ define([
     resizeEditor: function() {
         var self = this;
 
+        self.$editor = $('.editor', self.$el);
         var tab = self.$tabs.children()[0];
-
-        if( $(tab).height() < (self.$tabs.height() - 1) ) {
+        if( $(tab).outerHeight() < (self.$tabs.height() - 1) ) {
             self.$tabs.addClass('smallTabs');
             $(self.$tabs.children()).each(function() {
                 self.shrinkTab(this);
@@ -498,6 +501,8 @@ define([
           self.ace.editor.resize();
           self.ace.editor.$blockScrolling = Infinity;
         }
+
+        self.ace.editor.focus();
     },
     setUploadUrl: function(path) {
       var self = this;
diff --git a/mockup/patterns/resourceregistry/js/builder.js b/mockup/patterns/resourceregistry/js/builder.js
index 28f1ccd..65331db 100644
--- a/mockup/patterns/resourceregistry/js/builder.js
+++ b/mockup/patterns/resourceregistry/js/builder.js
@@ -120,7 +120,7 @@ define([
       var checkFinished = function(){
         var $styles =  $('style[type="text/css"][id]', iframe.document);
         for(var i=0; i<$styles.length; i=i+1){
-          var $style = $styles.eq(i); 
+          var $style = $styles.eq(i);
           if($style.attr('id') === 'less:error-message'){
             self.addResult(_t('Error compiling less'));
             return self.finished(true);
diff --git a/mockup/patterns/resourceregistry/js/iframe.js b/mockup/patterns/resourceregistry/js/iframe.js
index 05cf90a..37c73a0 100644
--- a/mockup/patterns/resourceregistry/js/iframe.js
+++ b/mockup/patterns/resourceregistry/js/iframe.js
@@ -15,6 +15,7 @@ define([
       title: '',
       name: '',
       resources: [],
+      callback: function(){},
       configure: function(){},
       onLoad: function(){}
     },
@@ -106,4 +107,4 @@ define([
   };
 
   return window.IFrame;
-});
\ No newline at end of file
+});
diff --git a/mockup/patterns/thememapper/js/lessbuilderview.js b/mockup/patterns/thememapper/js/lessbuilderview.js
new file mode 100644
index 0000000..80668ab
--- /dev/null
+++ b/mockup/patterns/thememapper/js/lessbuilderview.js
@@ -0,0 +1,143 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'mockup-patterns-resourceregistry-url/js/iframe'
+], function($, _, Backbone, PopoverView, IFrame ) {
+  'use strict';
+  var lessBuilderTemplate = _.template(
+    '<div id="lessBuilder">' +
+      '<span class="message"></span>' +
+      '<span style="display: none;" class="errorMessage"></span>' +
+      '<div class="buttonBox">' +
+        '<a id="compileBtn" class="btn btn-success" href="#">Compile</a>' +
+        '<a id="errorBtn" class="btn btn-default" href="#">Clear</a>' +
+      '</div>' +
+    '</div>'
+  );
+
+  var LessBuilderView = PopoverView.extend({
+    className: 'popover lessbuilderview',
+    title: _.template('<%= _t("LESS Builder") %>'),
+    content: lessBuilderTemplate,
+    $button: null,
+    $start: null,
+    $working: null,
+    $done: null,
+    $error: null,
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      self.$message = $('.message', this.$el);
+      self.$error = $('.errorMessage', this.$el);
+      self.$button = $('#compileBtn', this.$el);
+      self.$errorButton = $('#errorBtn', this.$el);
+      self.$button.on('click', function() {
+        self.showLessBuilder();
+      });
+      self.$errorButton.on('click', function() {
+        self.start();
+        self.toggle();
+      });
+      self.start();
+      return this;
+    },
+    toggle: function(button, e) {
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+    },
+    start: function() {
+      var self = this;
+      self.$button.show();
+      self.$errorButton.hide();
+      self.$message.text("Click to compile the current file");
+      self.$error.hide();
+    },
+    working: function() {
+      var self = this;
+      self.$button.hide();
+      self.$message.text("Working....");
+    },
+    end: function() {
+      var self = this;
+      self.$message.text("Compiled successfully");
+      setTimeout(self.reset.bind(self), 3000);
+    },
+    reset: function() {
+      var self = this;
+      self.start();
+      self.toggle();
+    },
+    showError: function(error) {
+      this.$message.text("");
+      this.$error.text(error).show();
+      this.$errorButton.show();
+    },
+    showLessBuilder: function() {
+      var self = this;
+
+      if( self.app.lessPaths['save'] === undefined ) {
+        self.showError("Error: invalid filetype");
+        return false;
+      }
+
+      self.working();
+
+      var config = {
+        less: [ self.app.lessVariableUrl,
+                self.app.lessPaths['less'],
+                self.app.lessUrl]
+      }
+
+      var iframe = new IFrame({
+        name: 'lessc',
+        resources: config.less,
+        callback: self.app.saveThemeCSS,
+        env: self.app,
+        configure: function(iframe){
+          iframe.window.lessErrorReporting = function(what, error, href){
+            if( error.href !== undefined )
+            {
+              self.app.fileManager.ace.editor.scrollToLine(error.line, true);
+              if( error.type == "Name" ) {
+                var reg = new RegExp(".*(@\\S+)\\s.*");
+                var matches = reg.exec(error.message);
+                if( matches !== null ) {
+                  var varName = matches[1];
+                  var result = self.app.fileManager.ace.editor.findAll(varName);
+                }
+              }
+              else {
+                //The line number is always off by 1? (and LESS indexes from 0) so -2
+                self.app.fileManager.ace.editor.moveCursorToPosition({row: error.line - 2, column: error.column});
+                self.app.fileManager.ace.editor.focus();
+              }
+              self.showError(error);
+            }
+          };
+          iframe.styles = [];
+        },
+        onLoad: function(self) {
+          less.pageLoadFinished.then(
+            function() {
+              var $ = window.parent.$;
+              var iframe = window.iframe['lessc'];
+              var styles = $('style', iframe.document);
+              var styleBox = $('#styleBox');
+
+              $(styleBox).empty();
+              $(styles).each(function() {
+                styleBox.append(this.innerHTML);
+              });
+
+              iframe.options.callback();
+            }
+          );
+        }
+      });
+
+    },
+  });
+
+  return LessBuilderView;
+});
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 11810c3..1b8f421 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -36,9 +36,11 @@ define([
   'mockup-patterns-filemanager',
   'mockup-patterns-thememapper-url/js/rulebuilder',
   'mockup-patterns-thememapper-url/js/rulebuilderview',
+  'mockup-patterns-thememapper-url/js/lessbuilderview',
   'mockup-ui-url/views/button',
-  'mockup-ui-url/views/buttongroup'
-], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, ButtonView, ButtonGroup) {
+  'mockup-ui-url/views/buttongroup',
+  'mockup-utils'
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, LessBuilderView, ButtonView, ButtonGroup, utils) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
@@ -280,6 +282,9 @@ define([
     unthemedInspector: null,
     ruleBuilder: null,
     rulebuilderView: null,
+    lessUrl: null,
+    lessPaths: {},
+    lessVariableUrl: null,
     $fileManager: null,
     $container: null,
     $inspectorContainer: null,
@@ -292,12 +297,15 @@ define([
       }
       self.$fileManager = $('<div class="pat-filemanager"/>').appendTo(self.$el);
       self.$container = $('<div class="row"></div>').appendTo(self.$el);
+      self.$styleBox = $('<div id="styleBox"></div>').appendTo(self.$el);
       self.$inspectorContainer = $('<div id="inspectors"></div>').appendTo(self.$container);
       self.$mockupInspector = $('<div class="mockup-inspector"/>').appendTo(self.$inspectorContainer);
       self.$unthemedInspector = $('<div class="unthemed-inspector"/>').appendTo(self.$inspectorContainer);
 
       // initialize patterns now
       self.editable = (self.options.editable == "True") ? true : false;
+      self.lessUrl = (self.options.lessUrl !== undefined ) ? self.options.lessUrl : false;
+      self.lessVariableUrl = (self.options.lessVariables !== undefined ) ? self.options.lessVariables : false;
 
       self.options.filemanagerConfig.uploadUrl = self.options.themeUrl;
       self.options.filemanagerConfig.theme = true;
@@ -308,6 +316,11 @@ define([
 
       self.ruleBuilder = new RuleBuilder(self, self.ruleBuilderCallback);
 
+      self.fileManager.on("fileChange", function() {
+        var node = self.fileManager.getSelectedNode();
+        self.setLessPaths(node);
+      });
+
       self.mockupInspector = new Inspector(self.$mockupInspector, {
         name: _t('HTML mockup'),
         ruleBuilder: self.ruleBuilder,
@@ -319,6 +332,10 @@ define([
         ruleBuilder: self.ruleBuilder,
         url: self.options.unthemedUrl,
       });
+      self.fileManager.$tree.bind('tree.click', function(e){
+      });
+      self.buildLessButton.$el.hide();
+
       if( !self.editable ) {
         if( self.fileManager.toolbar ) {
           var items = self.fileManager.toolbar.items;
@@ -331,6 +348,70 @@ define([
       // initially, let's hide the panels
       self.hideInspectors();
     },
+    setLessPaths: function(node) {
+      var self = this;
+
+      if( node.fileType == "less" ){
+        self.buildLessButton.$el.show();
+      }
+      else{
+        self.buildLessButton.$el.hide();
+      }
+      
+      if( node.path != "" ) {
+        var reg = new RegExp("/(.*\\.)less$", "m");
+        var path = reg.exec(node.path);
+
+        if( path === null ) {
+          self.lessPaths = {};
+          return false;
+        }
+        var lessPath = path[1] + "less";
+        var cssPath = path[1] + "css";
+
+        //file paths should be in the form of:
+        // "[directory/]filename.less"
+        self.lessPaths = {
+          'less': lessPath,
+          'save': cssPath
+        };
+
+        return true;
+      }
+      else {
+        self.lessPaths = {};
+        return false;
+      }
+    },
+    saveThemeCSS: function() {
+      var self = this.env;
+      var css = self.$styleBox.html();
+
+      if( css === "" ) {
+        //There was probably a problem during compilation
+        return false;
+      }
+
+      self.fileManager.doAction('saveFile', {
+        type: 'POST',
+        data: {
+          path: self.lessPaths['save'],
+          data: css,
+          _authenticator: utils.getAuthenticator()
+        },
+        success: function(data) {
+          self.fileManager.refreshTree(function() {
+            //We need to make sure we open the newest version
+            delete self.fileManager.fileData['/' + self.lessPaths['save']]
+            self.fileManager.openFileByPath(self.lessPaths['save'])
+          }); 
+          self.lessbuilderView.end();
+        }
+      });
+
+      window.iframe['lessc'].destroy();
+
+    },
     showInspectors: function(){
       var self = this;
       var $parent = self.$mockupInspector.parent();
@@ -399,7 +480,12 @@ define([
       self.previewThemeButton.on('button:click', function(){
         window.open(self.options.previewUrl);
       });
-
+      self.buildLessButton = new ButtonView({
+        id: 'buildless',
+        title: _t('Build CSS'),
+        tooltip: _t('Compile LESS file'),
+        context: 'default'
+      });
       self.helpButton = new ButtonView({
         id: 'helpbutton',
         title: _t('Help'),
@@ -413,18 +499,24 @@ define([
         triggerView: self.buildRuleButton,
         app: self
       });
+      self.lessbuilderView = new LessBuilderView({
+        triggerView: self.buildLessButton,
+        app: self
+      });
       self.buttonGroup = new ButtonGroup({
         items: [
           self.showInspectorsButton,
           self.buildRuleButton,
           self.previewThemeButton,
           self.fullscreenButton,
+          self.buildLessButton,
           self.helpButton
         ],
         id: 'mapper'
       });
       $('#toolbar .navbar', self.$el).append(self.buttonGroup.render().el);
       $('#toolbar .navbar', self.$el).append(self.rulebuilderView.render().el);
+      $('#toolbar .navbar', self.$el).append(self.lessbuilderView.render().el);
     }
   });
 
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index a0e1cf5..9af58da 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -90,7 +90,6 @@
 
     .ace_editor {
         border: 1px solid #999;
-
         .info {
             width: 100%;
             height: 100%;
@@ -176,8 +175,16 @@
         }
     }
 
-    .navbar-nav > li.active a {
-        background-color: transparent;
+    .navbar-nav > li {
+        background-color: #DDD;
+
+        a {
+            background-color: transparent;
+        }
+    }
+    
+    .navbar-nav > li.active {
+        background-color: #FFF;
     }
 
     .nav.smallTabs li {
@@ -282,4 +289,14 @@
         }
     }
 
+    #lessBuilder .buttonBox {
+        margin-top: 10px;
+    }
+    .errorMessage {
+        word-wrap: break-word;
+        font-size: small;
+    }
+    #styleBox {
+        display: none;
+    }
 }


