Repository: mockup


Branch: refs/heads/master
Date: 2015-09-23T23:58:44+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/mockup/commit/e7990d943174929150b1d2f9a89c63347346843b

add missing mockup/js/docs

Files changed:
A mockup/js/docs/app.js
A mockup/js/docs/navigation.js
A mockup/js/docs/page.js
A mockup/js/docs/pattern.js
A mockup/js/docs/view.js
M .gitignore

diff --git a/.gitignore b/.gitignore
index 7e4e7ad..687ae18 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,10 +4,10 @@
 bower_components/
 build/
 coverage/
-docs/
+mockup/docs/
 nixenv/
 node_modules/
 sauce_connect.log*
-test-results.xml
 stamp-bower
 stamp-npm
+test-results.xml
diff --git a/mockup/js/docs/app.js b/mockup/js/docs/app.js
new file mode 100644
index 0000000..26cfa63
--- /dev/null
+++ b/mockup/js/docs/app.js
@@ -0,0 +1,33 @@
+define([
+  'jquery',
+  'react',
+  'backbone',
+  'mockup-docs-view'
+], function($, React, Backbone, AppView) {
+  'use strict';
+
+  var App = Backbone.Router.extend({
+    routes: {
+      '*id': 'openPage',
+    },
+
+    initialize: function(options) {
+      this.options = options || {};
+      this._view = new AppView({
+        pages: this.options.pages,
+        app: this
+      });
+      React.renderComponent(this._view, document.body);
+      Backbone.history.start({ pushState: false });
+    },
+
+    openPage: function(page) {
+      if (page === null) {
+        page = this.options.defaultPage || 'index';
+      }
+      this._view.setState({ page: page });
+    }
+  });
+
+  return App;
+});
diff --git a/mockup/js/docs/navigation.js b/mockup/js/docs/navigation.js
new file mode 100644
index 0000000..0f2b4ab
--- /dev/null
+++ b/mockup/js/docs/navigation.js
@@ -0,0 +1,38 @@
+define([
+  'underscore',
+  'react',
+  'backbone'
+], function(_, React, Backbone) {
+  'use strict';
+
+  var ul = React.DOM.ul,
+      li = React.DOM.li,
+      a = React.DOM.a;
+
+  var NavView = React.createClass({
+    propTypes: {
+      position: React.PropTypes.oneOf(['left', 'right'])
+    },
+    getDefaultProps: function() {
+      return { position: 'left' };
+    },
+    render: function() {
+      var currentPage = Backbone.history.location.hash.substr(1).split('/')[0];
+      return (
+        ul({ className: 'nav navbar-nav navbar-' + this.props.position },
+          _.filter(this.props.pages, function(page) {
+            return page.id !== this.props.defaultPage && (page.position || 'left') === this.props.position;
+          }, this).map(function (page) {
+            return (
+              li({ key: page.id, className: currentPage === page.id ? 'active' : '' },
+                a({ href: '#' + page.id, alt: page.description }, page.title)
+              )
+            );
+          }, this)
+        )
+      );
+    }
+  });
+
+  return NavView;
+});
diff --git a/mockup/js/docs/page.js b/mockup/js/docs/page.js
new file mode 100644
index 0000000..7ca1bed
--- /dev/null
+++ b/mockup/js/docs/page.js
@@ -0,0 +1,136 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+  'marked',
+  'react',
+  'mockup-docs-pattern'
+], function($, _, Backbone, marked, React, pattern) {
+  'use strict';
+
+  var div = React.DOM.div,
+      a = React.DOM.a,
+      p = React.DOM.p,
+      h1 = React.DOM.h1,
+      h2 = React.DOM.h2,
+      li = React.DOM.li,
+      ul = React.DOM.ul;
+
+  var Page = React.createClass({
+    getDefaultProps: function() {
+      return {
+        title: '',
+        description: '',
+        autotoc: true,
+        text: ''
+      };
+    },
+    componentDidUpdate: function() {
+      var currentPage = Backbone.history.location.hash.substr(1).split('/');
+      if (currentPage.length > 1) {
+        $(window).scrollTop($('#' + currentPage[1]).offset().top - $('.mockup-header').outerHeight(true));
+      }
+    },
+    render: function() {
+      var page = this.props, PageText, PageContent, patternID;
+
+      if (typeof page.text === 'string' && page.text.trim().substr(0, 1) !== '<') {
+        PageText = marked(page.text);
+      } else {
+        PageText = page.text;
+      }
+
+      if (page.autotoc) {
+        var autotoc = [], autotocID,
+            $autotoc = $('<div>' + PageText + '</div>');
+
+        $autotoc.find('h1,h2').each(function(i) {
+          autotocID = 'mockup-autotoc_' + i;
+          $(this).attr('id', autotocID);
+          if ($.nodeName(this, 'h1')) {
+            autotoc.push({
+              id: autotocID,
+              title: $(this).text(),
+              submenu: []
+            });
+          } else {
+            autotoc[autotoc.length - 1].submenu.push({
+              id: autotocID,
+              title: $(this).text()
+            });
+          }
+        });
+        PageContent =
+          div({ className: 'row' }, [
+            div({ className: 'col-md-3' }, [
+              div({ className: 'mockup-autotoc hidden-print', role: 'complementary' }, [
+                ul({ className: 'nav' },
+                  autotoc.map(function(item) {
+                    return (
+                      li({ key: page.id + '/' + item.id }, [
+                        a({ href: '#' + page.id + '/' + item.id }, item.title),
+                        item.submenu ?
+                          ul({ className: 'nav' },
+                            item.submenu.map(function(subitem) {
+                              return (
+                                li({ key: page.id + '/' + subitem.id },
+                                  a({ href: '#' + page.id + '/' + subitem.id }, subitem.title)
+                                )
+                              );
+                            })
+                          ) : undefined
+                      ])
+                    );
+                  })
+                )
+              ])
+            ]),
+            div({ className: 'col-md-9', dangerouslySetInnerHTML: {__html: $autotoc.html()} })
+          ]);
+      } else if (page.patterns) {
+        if (Backbone.history.location.hash.substr(1).split('/').length > 1) {
+          patternID = Backbone.history.location.hash.substr(1).split('/')[1];
+        }
+
+        PageContent =
+          div({ className: 'row mockup-patterns' },
+            page.patterns.map(function(_pattern) {
+              return (
+                div({}, [
+                  div({ key: _pattern.id, id: _pattern.id, className: 'col-xs-12 col-sm-4 col-md-3' },
+                    a({
+                      className: patternID === _pattern.id ? 'mockup-pattern-tile active' : 'mockup-pattern-tile',
+                      href: '#' + page.id + '/' + _pattern.id
+                    }, [
+                      h2({}, _pattern.title),
+                      p({}, _pattern.description)
+                    ])
+                  ),
+                  patternID === _pattern.id ? pattern(_pattern) : ''
+                ])
+              );
+            })
+          );
+
+      } else if (typeof PageText === 'string') {
+        PageContent = div({ dangerouslySetInnerHTML: {__html: PageText} });
+      }
+
+      return  (
+        div({ className: 'mockup-content', id: 'content' }, [
+          div({ className: 'page-header' },
+            div({ className: 'container' }, [
+              h1({}, page.title),
+              p({}, page.description)
+            ])
+          ),
+          div({ className: 'container' },
+            div({ key: page.id, className: 'page-content' }, PageContent)
+          )
+        ])
+      );
+    }
+  });
+
+  return Page;
+});
diff --git a/mockup/js/docs/pattern.js b/mockup/js/docs/pattern.js
new file mode 100644
index 0000000..6e79cca
--- /dev/null
+++ b/mockup/js/docs/pattern.js
@@ -0,0 +1,168 @@
+define([
+  'underscore',
+  'marked',
+  'react',
+  'pat-registry'
+], function(_, marked, React, Registry) {
+  'use strict';
+
+  var div = React.DOM.div,
+      a = React.DOM.a,
+      h2 = React.DOM.h2,
+      tr = React.DOM.tr,
+      th = React.DOM.th,
+      td = React.DOM.td,
+      tbody = React.DOM.tbody,
+      thead = React.DOM.thead,
+      table = React.DOM.table;
+
+  var Pattern = React.createClass({
+    getDefaultProps: function() {
+      return {
+        id: '',
+        url: ''
+      };
+    },
+    getInitialState: function() {
+      return {pattern: undefined};
+    },
+    parsePattern: function(text) {
+      var option = /(.*)\((.*)\): (.*) \((.*)\)$/,
+          section = /^Options:|^Documentation:|^License:|^Example:/,
+          currentOption,
+          currentExample,
+          currentSection,
+          examples = {},
+          pattern = {};
+
+      text = text.substring(1, text.length - 1);
+      _.each(text.split('\n'), function(line, lineNumber) {
+        line = line.substring(line.indexOf('*') + 2).replace('\r', '');
+
+        if (section.exec(line) !== null) {
+          currentSection = section.exec(line)[0].toLowerCase();
+          currentSection = currentSection.substring(0, currentSection.length - 1);
+          if (currentSection === 'example') {
+            currentExample = line.substring(8).trim();
+          }
+        } else if (currentSection) {
+          if (currentSection === 'options') {
+            currentOption = option.exec(line);
+            if (currentOption) {
+              if (!pattern.options) {
+                pattern.options = {};
+              }
+              pattern.options[currentOption[1].trim()] = {
+                type: currentOption[2].trim(),
+                description: currentOption[3].trim(),
+                defaultValue: currentOption[4].trim()
+              };
+            }
+          } else if (currentExample && currentSection === 'example') {
+            if (!examples[currentExample]) {
+              examples[currentExample] = '';
+            }
+            examples[currentExample] += line + '\n';
+          } else {
+            if (!pattern[currentSection]) {
+              pattern[currentSection] = '';
+            }
+            pattern[currentSection] += line + '\n';
+          }
+        }
+      });
+      _.each(pattern, function(value, i) {
+        if (typeof value === 'string') {
+          pattern[i] = '';
+          var lines = value.split('\n'),
+          firstLineSpaces = lines[0].length - lines[0].replace(/^\s+/,'').length;
+          _.each(value.split('\n'), function(line, j) {
+            pattern[i] += line.substring(firstLineSpaces) + '\n';
+          });
+
+          pattern[i] = marked(pattern[i]);
+
+          _.each(examples, function(example, name) {
+            example = '' +
+              '<div class="mockup-pattern-example">' + example +
+              '<p><pre>' + _.escape(example) + '</pre><p>' +
+              '</div>';
+            pattern[i] = pattern[i].replace('{{ ' + name + ' }}', example);
+          });
+
+        }
+      });
+      return pattern;
+    },
+    componentWillMount: function() {
+      var self = this;
+      if (this.props.url) {
+        require([
+          'text!' + this.props.url, 'mockup-patterns-' + this.props.id
+        ], function (pattern) {
+          pattern = (/\/\*[\s\S]*?\*\//gm).exec(pattern)[0];
+          self.setState({pattern: self.parsePattern(pattern)});
+        });
+      }
+    },
+    componentDidUpdate: function() {
+      Registry.scan(this.getDOMNode());
+    },
+    render: function() {
+      if (!this.state.pattern) {
+        return div({ className: 'mockup-pattern' });
+      }
+      var documentation = this.state.pattern.documentation,
+          options = this.state.pattern.options,
+          license = this.state.pattern.license;
+
+      var render_options = [];
+      if (options) {
+        render_options = [
+          h2({}, 'Configuration'),
+          div({ className: 'table-responsive mockup-pattern-configuration' },
+            table({ className: 'table table-stripped table-condensed' }, [
+              thead({},
+                tr({}, [
+                  th({}, 'Option'),
+                  th({}, 'Type'),
+                  th({}, 'Default'),
+                  th({}, 'Description')
+                ])
+              ),
+              tbody({},
+                Object.keys(options).map(function(name) {
+                  return (
+                    tr({ key: name }, [
+                      td({}, name),
+                      td({}, options[name].type),
+                      td({}, options[name].defaultValue),
+                      td({}, options[name].description)
+                    ])
+                  );
+                })
+              )
+            ])
+          )
+        ];
+      }
+
+      var render_license = [];
+      if (license) {
+        render_license = [
+          h2({}, 'License'),
+          div({ className: 'mockup-pattern-license', dangerouslySetInnerHTML: {__html: license} })
+        ];
+      }
+
+      return (
+        div({ className: 'mockup-pattern' }, [
+          h2({}, 'Documentation'),
+          div({ className: 'mockup-pattern-documentation', dangerouslySetInnerHTML: {__html: documentation} })
+        ].concat(render_options).concat(render_license))
+      );
+    }
+  });
+
+  return Pattern;
+});
diff --git a/mockup/js/docs/view.js b/mockup/js/docs/view.js
new file mode 100644
index 0000000..1c25c7f
--- /dev/null
+++ b/mockup/js/docs/view.js
@@ -0,0 +1,101 @@
+define([
+  'underscore',
+  'react',
+  'mockup-docs-navigation',
+  'mockup-docs-page',
+  'bootstrap-collapse',
+  'bootstrap-transition'
+], function(_, React, navigation, page) {
+  'use strict';
+
+  var div = React.DOM.div,
+      a = React.DOM.a,
+      p = React.DOM.p,
+      li = React.DOM.li,
+      ul = React.DOM.ul,
+      nav = React.DOM.nav,
+      span = React.DOM.span,
+      button = React.DOM.button,
+      iframe = React.DOM.iframe,
+      header = React.DOM.header,
+      footer = React.DOM.footer;
+
+  var AppView = React.createClass({
+    propTypes: {
+      pages: React.PropTypes.array
+    },
+    getDefaultProps: function() {
+      var self = this;
+      return {
+        defaultPage: 'index',
+        pages: []
+      };
+    },
+    getInitialState: function() {
+      return {
+        page: 'index'
+      };
+    },
+    render: function() {
+      var pageID = this.state.page.split('/')[0],
+          CurrentPage = page(_.findWhere(this.props.pages, {id: pageID}));
+      return (
+        div({ className: 'wrapper page-' + pageID }, [
+          a({ href: '#content', className: 'sr-only' }, 'Skip to main content' ),
+          header({ className: 'navbar navbar-inverse navbar-fixed-top mockup-header' },
+            div({ className: 'header container' }, [
+              div({ className: 'navbar-header' }, [
+                button({ type: 'button', className: 'navbar-toggle', 'data-toggle': 'collapse', 'data-target': '#navigation' }, [
+                  span({ className: 'sr-only' }, 'Toggle navigation'),
+                  span({ className: 'icon0bar' }, ''),
+                  span({ className: 'icon0bar' }, ''),
+                  span({ className: 'icon0bar' }, '')
+                ]),
+                a({ className: 'navbar-brand', href: '#' }, 'Mockup')
+              ]),
+              nav({ className: 'collapse navbar-collapse', id: 'navigation'}, [
+                this.transferPropsTo(navigation()),
+                this.transferPropsTo(navigation({ position: 'right' }))
+              ])
+            ])
+          ),
+          CurrentPage,
+          footer({ className: 'navbar navbar-inverse mockup-footer' },
+            div({ className: 'container' }, [
+              div({ className: 'row' }, [
+                div({ className: 'col-xs-12 col-sm-6 mockup-credits' }, [
+                  p({}, ['Built by ', a({ href: 'http://plone.org' }, 'Plone'),' community.']),
+                  p({}, ['Code and documentation licensed under ', a({ href: 'http://opensource.org/licenses/BSD-3-Clause' }, 'BSD'),'.']),
+                ]),
+                div({ className: 'col-xs-12 col-sm-6' },
+                  ul({ className: 'mockup-links' }, [
+                    li({}, a({ href: 'https://github.com/plone/mockup/issues' }, 'Issues')),
+                    li({}, a({ href: 'https://github.com/plone/mockup/releases' }, 'Releases'))
+                  ])
+                )
+              ]),
+              div({ className: 'row' },
+                div({ className: 'col-xs-12 mockup-github' }, [
+                  iframe({
+                    src: 'http://ghbtns.com/github-btn.html?user=plone&amp;repo=mockup&amp;type=watch&amp;count=true',
+                    className: 'github-btn', width: '100', height: '20', title: 'Star on GitHub'
+                  }),
+                  iframe({
+                    src: 'http://ghbtns.com/github-btn.html?user=plone&amp;repo=mockup&amp;type=fork&amp;count=true',
+                    className: 'github-btn', width: '102', height: '20', title: 'Fork on GitHub'
+                  }),
+                  iframe({
+                    src: 'http://ghbtns.com/github-btn.html?user=plone&amp;type=follow&amp;count=true',
+                    className: 'github-btn', width: '130', height: '20', title: 'Follow on GitHub'
+                  })
+                ])
+              )
+            ])
+          )
+        ])
+      );
+    }
+  });
+
+  return AppView;
+});


