Repository: plone.app.viewletmanager
Branch: refs/heads/master
Date: 2015-03-30T12:40:33+07:00
Author: Jean Jordaan (jean) <jean.jordaan@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/d3f11aabd68446534bb05cb8f4db07fd23b9ea1a

Rename _uncatched_errors to _exceptions_handled_elsewhere

See https://github.com/plone/plone.app.viewletmanager/issues/5

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/manager.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 61bd5b5..f208283 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,8 @@ Changelog
 2.0.8 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Rename ``_uncatched_errors`` to ``_exceptions_handled_elsewhere``
+  [jean]
 
 
 2.0.7 (2015-03-13)
diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index b0a733f..03a462d 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -5,6 +5,7 @@
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from ZODB.POSException import ConflictError
+from ZPublisher.Publish import Retry
 from cgi import parse_qs
 from logging import getLogger
 from plone.app.viewletmanager.interfaces import IViewletManagementView
@@ -28,7 +29,10 @@
 
 class BaseOrderedViewletManager(object):
 
-    _uncatched_errors = (ConflictError, KeyboardInterrupt)
+    # Sometimes viewlets raise errors handled elsewhere -- e.g. for
+    # embedded ploneformgen forms.
+    # See https://github.com/plone/plone.app.viewletmanager/issues/5
+    _exceptions_handled_elsewhere = (ConflictError, KeyboardInterrupt, Retry)
 
     def filter(self, viewlets):
         """Filter the viewlets.
@@ -91,7 +95,7 @@ def render(self):
         if self.template:
             try:
                 return self.template(viewlets=self.viewlets)
-            except self._uncatched_errors:
+            except self._exceptions_handled_elsewhere:
                 raise
             except Exception, e:
                 trace = traceback.format_exc()
@@ -104,7 +108,7 @@ def render(self):
             for viewlet in self.viewlets:
                 try:
                     html.append(viewlet.render())
-                except self._uncatched_errors:
+                except self._exceptions_handled_elsewhere:
                     raise
                 except Exception, e:
                     name = self.__name__


Repository: plone.app.viewletmanager
Branch: refs/heads/master
Date: 2015-03-30T11:24:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/341b88059db68577cec6da8a390573abf364450d

Merge pull request #9 from jean/master

Rename _uncatched_errors to _exceptions_handled_elsewhere and add `Retry`

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/manager.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 61bd5b5..f208283 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,8 @@ Changelog
 2.0.8 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Rename ``_uncatched_errors`` to ``_exceptions_handled_elsewhere``
+  [jean]
 
 
 2.0.7 (2015-03-13)
diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index b0a733f..03a462d 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -5,6 +5,7 @@
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from ZODB.POSException import ConflictError
+from ZPublisher.Publish import Retry
 from cgi import parse_qs
 from logging import getLogger
 from plone.app.viewletmanager.interfaces import IViewletManagementView
@@ -28,7 +29,10 @@
 
 class BaseOrderedViewletManager(object):
 
-    _uncatched_errors = (ConflictError, KeyboardInterrupt)
+    # Sometimes viewlets raise errors handled elsewhere -- e.g. for
+    # embedded ploneformgen forms.
+    # See https://github.com/plone/plone.app.viewletmanager/issues/5
+    _exceptions_handled_elsewhere = (ConflictError, KeyboardInterrupt, Retry)
 
     def filter(self, viewlets):
         """Filter the viewlets.
@@ -91,7 +95,7 @@ def render(self):
         if self.template:
             try:
                 return self.template(viewlets=self.viewlets)
-            except self._uncatched_errors:
+            except self._exceptions_handled_elsewhere:
                 raise
             except Exception, e:
                 trace = traceback.format_exc()
@@ -104,7 +108,7 @@ def render(self):
             for viewlet in self.viewlets:
                 try:
                     html.append(viewlet.render())
-                except self._uncatched_errors:
+                except self._exceptions_handled_elsewhere:
                     raise
                 except Exception, e:
                     name = self.__name__


