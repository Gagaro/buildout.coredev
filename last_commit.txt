Repository: mockup


Branch: refs/heads/master
Date: 2015-07-06T00:52:04-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/5d2b4bb6d68965e925a759bdfb563e221d5029fd

Update structure pattern to have buttons be more generic and extensible
and other fixes

Files changed:
A mockup/patterns/structure/js/views/generic-popover.js
M CHANGES.rst
M mockup/js/ui/views/base.js
M mockup/js/ui/views/button.js
M mockup/js/ui/views/buttongroup.js
M mockup/js/ui/views/container.js
M mockup/js/ui/views/popover.js
M mockup/js/ui/views/toolbar.js
M mockup/js/utils.js
M mockup/patterns/sortable/pattern.js
M mockup/patterns/structure/js/collections/result.js
M mockup/patterns/structure/js/views/actionmenu.js
M mockup/patterns/structure/js/views/addmenu.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/paging.js
M mockup/patterns/structure/js/views/rearrange.js
M mockup/patterns/structure/js/views/selectionbutton.js
M mockup/patterns/structure/js/views/selectionwell.js
M mockup/patterns/structure/js/views/table.js
M mockup/patterns/structure/js/views/tablerow.js
M mockup/patterns/structure/js/views/textfilter.js
M mockup/patterns/structure/less/pattern.structure.less
M mockup/patterns/structure/pattern.js
M mockup/patterns/structure/templates/actionmenu.xml
M mockup/patterns/structure/templates/selection_button.xml
M mockup/patterns/structure/templates/table.xml
M mockup/patterns/thememapper/pattern.thememapper.less
M mockup/tests/pattern-structure-test.js
M mockup/tests/pattern-thememapper-test.js
D mockup/patterns/structure/js/views/delete.js
D mockup/patterns/structure/js/views/properties.js
D mockup/patterns/structure/js/views/rename.js
D mockup/patterns/structure/js/views/tags.js
D mockup/patterns/structure/js/views/workflow.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 6925aca..6babce0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.0.5 (unreleased)
 ------------------
 
+- Update structure pattern to have buttons be more generic and extensible
+  [vangheem]
+
 - Upgrade pickadate to 3.5.6
   [vangheem]
 
diff --git a/mockup/js/ui/views/base.js b/mockup/js/ui/views/base.js
index 49dc6ac..eeba14a 100644
--- a/mockup/js/ui/views/base.js
+++ b/mockup/js/ui/views/base.js
@@ -10,6 +10,7 @@ define([
     isUIView: true,
     eventPrefix: 'ui',
     template: null,
+    idPrefix: 'base-',
     appendInContainer: true,
     initialize: function(options) {
       this.options = options;
@@ -24,9 +25,9 @@ define([
       this.trigger('render', this);
       this.afterRender();
 
-      if (!this.$el.attr('id') && this.options.id) {
+      if (this.options.id) {
         // apply id to element
-        this.$el.attr('id', 'gen-' + this.options.id);
+        this.$el.attr('id', this.idPrefix + this.options.id);
       }
       return this;
     },
diff --git a/mockup/js/ui/views/button.js b/mockup/js/ui/views/button.js
index f22c7c7..0936cfb 100644
--- a/mockup/js/ui/views/button.js
+++ b/mockup/js/ui/views/button.js
@@ -12,6 +12,7 @@ define([
     className: 'btn',
     eventPrefix: 'button',
     context: 'default',
+    idPrefix: 'btn-',
     attributes: {
       'href': '#'
     },
diff --git a/mockup/js/ui/views/buttongroup.js b/mockup/js/ui/views/buttongroup.js
index 9563bc9..126396a 100644
--- a/mockup/js/ui/views/buttongroup.js
+++ b/mockup/js/ui/views/buttongroup.js
@@ -8,6 +8,7 @@ define([
   var ButtonGroup = ContainerView.extend({
     tagName: 'div',
     className: 'btn-group',
+    idPrefix: 'btngroup-',
     disable: function() {
       _.each(this.items, function(button) {
         button.trigger('disable');
diff --git a/mockup/js/ui/views/container.js b/mockup/js/ui/views/container.js
index be4f536..a499cd4 100644
--- a/mockup/js/ui/views/container.js
+++ b/mockup/js/ui/views/container.js
@@ -11,7 +11,12 @@ define([
     items: [],
     itemContainer: null,
     isOffsetParent: true,
+    idPrefix: 'container-',
     render: function() {
+      if (this.options.id) {
+        this.$el.attr('id', this.idPrefix + this.options.id);
+      }
+
       this.applyTemplate();
 
       this.renderItems();
@@ -25,6 +30,7 @@ define([
 
       this.afterRender();
 
+      this.$el.data('component', this);
       return this;
     },
     renderItems: function() {
diff --git a/mockup/js/ui/views/popover.js b/mockup/js/ui/views/popover.js
index 578255e..43b7a6b 100644
--- a/mockup/js/ui/views/popover.js
+++ b/mockup/js/ui/views/popover.js
@@ -16,6 +16,7 @@ define([
     content: null,
     title: null,
     triggerView: null,
+    idPrefix: 'popover-',
     triggerEvents: {
       'button:click': 'toggle'
     },
@@ -38,20 +39,27 @@ define([
     },
     initialize: function(options) {
       ContainerView.prototype.initialize.apply(this, [options]);
+      this.bindTriggerEvents();
 
       this.on('render', function() {
-        this.bindTriggerEvents();
         this.renderTitle();
         this.renderContent();
       }, this);
     },
     afterRender: function () {
     },
+    getTemplateOptions: function(){
+      return this.options;
+    },
     renderTitle: function() {
-      this.$('.popover-title').append(this.title(this.options));
+      var title = this.title;
+      if(typeof(title) === 'function'){
+        title = title(this.getTemplateOptions());
+      }
+      this.$('.popover-title').empty().append(title);
     },
     renderContent: function() {
-      this.$('.popover-content').append(this.content(this.options));
+      this.$('.popover-content').empty().append(this.content(this.getTemplateOptions()));
     },
     bindTriggerEvents: function() {
       if (this.triggerView) {
@@ -73,6 +81,14 @@ define([
       }, $el.offset());
     },
     show: function() {
+      /* hide existing */
+      $('.popover:visible').each(function(){
+        var popover = $(this).data('component');
+        if(popover){
+          popover.hide();
+        }
+      });
+
       var pos = this.getPosition();
       var $tip = this.$el, tp, placement, actualWidth, actualHeight;
 
@@ -80,7 +96,6 @@ define([
 
       $tip.css({ top: 0, left: 0 }).addClass('active');
 
-
       actualWidth = $tip[0].offsetWidth;
       actualHeight = $tip[0].offsetHeight;
 
diff --git a/mockup/js/ui/views/toolbar.js b/mockup/js/ui/views/toolbar.js
index 215d6ba..f0f9ed7 100644
--- a/mockup/js/ui/views/toolbar.js
+++ b/mockup/js/ui/views/toolbar.js
@@ -7,7 +7,8 @@ define([
 
   var Toolbar = ContainerView.extend({
     tagName: 'div',
-    className: 'navbar'
+    className: 'navbar',
+    idPrefix: 'toolbar-'
   });
 
   return Toolbar;
diff --git a/mockup/js/utils.js b/mockup/js/utils.js
index 2619bf2..786c513 100644
--- a/mockup/js/utils.js
+++ b/mockup/js/utils.js
@@ -96,7 +96,13 @@ define([
           v: term
         });
       }
-      if (self.pattern.browsing) {
+      if(options.searchPath){
+        criterias.push({
+          i: 'path',
+          o: 'plone.app.querystring.operation.string.path',
+          v: options.searchPath + '::' + self.options.pathDepth
+        });
+      }else if (self.pattern.browsing) {
         criterias.push({
           i: 'path',
           o: 'plone.app.querystring.operation.string.path',
@@ -158,10 +164,13 @@ define([
       return data;
     };
 
-    self.search = function(term, operation, value, callback, useBaseCriteria) {
+    self.search = function(term, operation, value, callback, useBaseCriteria, type) {
       if (useBaseCriteria === undefined) {
         useBaseCriteria = true;
       }
+      if(type === undefined){
+        type = 'GET';
+      }
       var criteria = [];
       if (useBaseCriteria) {
         criteria = self.options.baseCriteria.slice(0);
@@ -179,6 +188,7 @@ define([
         url: self.options.vocabularyUrl,
         dataType: 'JSON',
         data: data,
+        type: type,
         success: callback
       });
     };
diff --git a/mockup/patterns/sortable/pattern.js b/mockup/patterns/sortable/pattern.js
index 7c7487d..bacf5a2 100644
--- a/mockup/patterns/sortable/pattern.js
+++ b/mockup/patterns/sortable/pattern.js
@@ -59,6 +59,11 @@ define([
       selector: 'li',
       dragClass: 'item-dragging',
       cloneClass: 'dragging',
+      createDragItem: function(pattern, $el){
+        return $el.clone().
+          addClass(pattern.options.cloneClass).
+          css({opacity: 0.75, position: 'absolute'}).appendTo(document.body);
+      },
       drop: null // function to handle drop event
     },
     init: function() {
@@ -67,6 +72,7 @@ define([
 
       self.$el.find(self.options.selector).drag('start', function(e, dd) {
         var dragged = this;
+        var $el = $(this);
         $(dragged).addClass(self.options.dragClass);
         drop({
           tolerance: function(event, proxy, target) {
@@ -79,11 +85,8 @@ define([
             return this.contains(target, [event.pageX, event.pageY]);
           }
         });
-        start = $(this).index();
-        return $( this ).clone().
-          addClass(self.options.cloneClass).
-          css({opacity: 0.75, position: 'absolute'}).
-          appendTo(document.body);
+        start = $el.index();
+        return self.options.createDragItem(self, $el);
       })
       .drag(function(e, dd) {
         /*jshint eqeqeq:false */
diff --git a/mockup/patterns/structure/js/collections/result.js b/mockup/patterns/structure/js/collections/result.js
index 3310515..b6a74af 100644
--- a/mockup/patterns/structure/js/collections/result.js
+++ b/mockup/patterns/structure/js/collections/result.js
@@ -20,7 +20,7 @@ define([
       this.trigger('pager');
       Backbone.Paginator.requestPager.prototype.pager.apply(this, []);
     },
-    'paginator_core': {
+    paginator_core: {
       // the type of the request (GET by default)
       type: 'GET',
       // the type of reply (jsonp by default)
@@ -29,7 +29,7 @@ define([
         return this.url;
       }
     },
-    'paginator_ui': {
+    paginator_ui: {
       // the lowest page index your API allows to be accessed
       firstPage: 1,
       // which page should the paginator start from
@@ -38,7 +38,7 @@ define([
       // how many items per page should be shown
       perPage: 15
     },
-    'server_api': {
+    server_api: {
       query: function() {
         return this.queryParser();
       },
@@ -50,13 +50,16 @@ define([
         return JSON.stringify(this.queryHelper.options.attributes);
       }
     },
-    parse: function (response) {
+    parse: function (response, baseSortIdx) {
+      if(baseSortIdx === undefined){
+        baseSortIdx = 0;
+      }
       this.totalRecords = response.total;
       var results = response.results;
       // XXX manually set sort order here since backbone will otherwise
       // do arbitrary sorting?
       _.each(results, function(item, idx) {
-        item._sort = idx;
+        item._sort = idx + baseSortIdx;
       });
       return results;
     },
diff --git a/mockup/patterns/structure/js/views/actionmenu.js b/mockup/patterns/structure/js/views/actionmenu.js
index a04e1e7..d084d5e 100644
--- a/mockup/patterns/structure/js/views/actionmenu.js
+++ b/mockup/patterns/structure/js/views/actionmenu.js
@@ -3,17 +3,19 @@ define([
   'underscore',
   'backbone',
   'mockup-ui-url/views/base',
+  'mockup-patterns-structure-url/js/models/result',
   'mockup-utils',
   'text!mockup-patterns-structure-url/templates/actionmenu.xml',
   'translate',
   'bootstrap-dropdown'
-], function($, _, Backbone, BaseView, utils, ActionMenuTemplate, _t) {
+], function($, _, Backbone, BaseView, Result, utils, ActionMenuTemplate, _t) {
   'use strict';
 
   var ActionMenu = BaseView.extend({
     className: 'btn-group actionmenu',
     template: _.template(ActionMenuTemplate),
     events: {
+      'click .selectAll a': 'selectAll',
       'click .cutItem a': 'cutClicked',
       'click .copyItem a': 'copyClicked',
       'click .pasteItem a': 'pasteClicked',
@@ -34,32 +36,76 @@ define([
         this.canMove = true;
       }
     },
+    selectAll: function(e){
+      e.preventDefault();
+      var self = this;
+      var page = 1;
+      var count = 0;
+      var getPage = function(){
+        self.app.loading.show();
+        $.ajax({
+          url: self.app.collection.url,
+          type: 'GET',
+          dataType: 'json',
+          data: {
+            query: self.app.collection.queryParser({
+              searchPath: self.model.attributes.path
+            }),
+            batch: JSON.stringify({
+              page: page,
+              size: 100
+            }),
+            attributes: JSON.stringify(self.app.queryHelper.options.attributes)
+          }
+        }).done(function(data){
+          var items = self.app.collection.parse(data, count);
+          count += items.length;
+          _.each(items, function(item){
+            self.app.selectedCollection.add(new Result(item));
+          });
+          page += 1;
+          if(data.total > count){
+            getPage();
+          }else{
+            self.app.loading.hide();
+            self.app.tableView.render();
+          }
+        });
+      };
+      getPage();
+    },
+    doAction: function(buttonName, successMsg, failMsg){
+      var self = this;
+      $.ajax({
+        url: self.app.buttons.get(buttonName).options.url,
+        data: {
+          selection: JSON.stringify([self.model.attributes.UID]),
+          folder: self.model.attributes.path,
+          _authenticator: utils.getAuthenticator()
+        },
+        dataType: 'json',
+        type: 'POST'
+      }).done(function(data){
+        if(data.status === 'success'){
+          self.app.setStatus(_t(successMsg + ' "' + self.model.attributes.Title + '"'));
+          self.app.collection.pager();
+          self.app.updateButtons();
+        }else{
+          self.app.setStatus(_t('Error ' + failMsg + ' "' + self.model.attributes.Title + '"'));
+        }
+      }); 
+    },
     cutClicked: function(e) {
       e.preventDefault();
-      this.cutCopyClicked('cut');
-      this.app.collection.pager(); // reload to be able to now show paste button
+      this.doAction('cut', _t('Cut'), _t('cutting'));
     },
     copyClicked: function(e) {
       e.preventDefault();
-      this.cutCopyClicked('copy');
-      this.app.collection.pager(); // reload to be able to now show paste button
-    },
-    cutCopyClicked: function(operation) {
-      var self = this;
-      self.app.pasteOperation = operation;
-
-      self.app.pasteSelection = new Backbone.Collection();
-      self.app.pasteSelection.add(this.model);
-      self.app.setStatus(operation + ' 1 item');
-      self.app.pasteAllowed = true;
-      self.app.buttons.primary.get('paste').enable();
+      this.doAction('copy', _t('Copied'), _t('copying'));
     },
     pasteClicked: function(e) {
       e.preventDefault();
-      this.app.pasteEvent(this.app.buttons.primary.get('paste'), e, {
-        folder: this.model.attributes.path
-      });
-      this.app.collection.pager(); // reload to be able to now show paste button
+      this.doAction('paste', _t('Pasted into'), _t('Error pasting into'));
     },
     moveTopClicked: function(e) {
       e.preventDefault();
diff --git a/mockup/patterns/structure/js/views/addmenu.js b/mockup/patterns/structure/js/views/addmenu.js
index b0fbd90..c8fe9fa 100644
--- a/mockup/patterns/structure/js/views/addmenu.js
+++ b/mockup/patterns/structure/js/views/addmenu.js
@@ -102,7 +102,8 @@ define([
       self.$el.empty();
 
       self.$el.append(
-        '<a class="btn dropdown-toggle btn-success" data-toggle="dropdown" href="#">' +
+        '<a class="btn dropdown-toggle btn-default" data-toggle="dropdown" href="#">' +
+          '<span class="glyphicon glyphicon-plus"></span>' +
           self.title +
           '<span class="caret"></span>' +
         '</a>' +
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index f946426..323dd35 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -8,11 +8,7 @@ define([
   'mockup-ui-url/views/base',
   'mockup-patterns-structure-url/js/views/table',
   'mockup-patterns-structure-url/js/views/selectionwell',
-  'mockup-patterns-structure-url/js/views/tags',
-  'mockup-patterns-structure-url/js/views/properties',
-  'mockup-patterns-structure-url/js/views/workflow',
-  'mockup-patterns-structure-url/js/views/delete',
-  'mockup-patterns-structure-url/js/views/rename',
+  'mockup-patterns-structure-url/js/views/generic-popover',
   'mockup-patterns-structure-url/js/views/rearrange',
   'mockup-patterns-structure-url/js/views/selectionbutton',
   'mockup-patterns-structure-url/js/views/paging',
@@ -24,59 +20,53 @@ define([
   'mockup-patterns-structure-url/js/collections/selected',
   'mockup-utils',
   'translate',
+  'pat-logger',
   'jquery.cookie'
 ], function($, _, Backbone, Toolbar, ButtonGroup, ButtonView, BaseView,
-            TableView, SelectionWellView, TagsView, PropertiesView,
-            WorkflowView, DeleteView, RenameView, RearrangeView, SelectionButtonView,
+            TableView, SelectionWellView,
+            GenericPopover, RearrangeView, SelectionButtonView,
             PagingView, AddMenu, ColumnsView, TextFilterView, UploadView,
-            ResultCollection, SelectedCollection, utils, _t) {
+            ResultCollection, SelectedCollection, utils, _t, logger) {
   'use strict';
 
-  var DISABLE_EVENT = 'DISABLE';
+  var log = logger.getLogger('pat-structure');
 
   var AppView = BaseView.extend({
     tagName: 'div',
-    /* we setup binding here and specifically for every button so there is a
-     * way to override default click event behavior.
-     * Otherwise, if we bound all buttons to the same event, there is no way
-     * to override the event or stop bubbling it. */
-    buttonClickEvents: {
-      'cut': 'cutCopyClickEvent',
-      'copy': 'cutCopyClickEvent',
-      'paste': 'pasteEvent',
-      'tags': DISABLE_EVENT, //disable
-      'properties': DISABLE_EVENT,
-      'workflow': DISABLE_EVENT,
-      'delete': DISABLE_EVENT,
-      'rename': DISABLE_EVENT,
-      'rearrange': DISABLE_EVENT
-    },
-    buttonViewMapping: {
-      'secondary.tags': TagsView,
-      'secondary.properties': PropertiesView,
-      'secondary.workflow': WorkflowView,
-      'primary.delete': DeleteView,
-      'secondary.rename': RenameView
-    },
     status: '',
+    pasteAllowed: !!$.cookie('__cp'),
     statusType: 'warning',
-    pasteOperation: null,
-    'sort_on': 'getObjPositionInParent',
-    'sort_order': 'ascending',
+    sort_on: 'getObjPositionInParent',
+    sort_order: 'ascending',
     additionalCriterias: [],
-    pasteSelection: null,
     cookieSettingPrefix: '_fc_',
-    pasteAllowed: false,
     initialize: function(options) {
       var self = this;
       BaseView.prototype.initialize.apply(self, [options]);
-      self.setAllCookieSettings();
       self.loading = new utils.Loading();
       self.loading.show();
 
+      /* close popovers when clicking away */
+      $(document).click(function(e){
+        var $el = $(e.target);
+        if($el.is('a') || $el.parent().is('a')){
+          return;
+        }
+        var $popover = $('.popover:visible');
+        if($popover.length > 0 && !$.contains($popover[0], e.target)){
+          var popover = $popover.data('component');
+          if(popover){
+            popover.hide();
+          }
+        }
+      });
+
       self.collection = new ResultCollection([], {
         url: self.options.collectionUrl,
-        queryParser: function() {
+        queryParser: function(options) {
+          if(options === undefined){
+            options = {};
+          }
           var term = null;
           if (self.toolbar) {
             term = self.toolbar.get('filter').term;
@@ -86,15 +76,18 @@ define([
             sortOn = 'getObjPositionInParent';
           }
           return JSON.stringify({
-            criteria: self.queryHelper.getCriterias(term, {
+            criteria: self.queryHelper.getCriterias(term, $.extend({}, options, {
               additionalCriterias: self.additionalCriterias
-            }),
-            'sort_on': sortOn,
-            'sort_order': self['sort_order'] // jshint ignore:line
+            })),
+            sort_on: sortOn,
+            sort_order: self['sort_order'] // jshint ignore:line
           });
         },
         queryHelper: self.options.queryHelper
       });
+
+      self.setAllCookieSettings();
+
       self.queryHelper = self.options.queryHelper;
       self.selectedCollection = new SelectedCollection();
       self.tableView = new TableView({app: self});
@@ -110,54 +103,19 @@ define([
         app: self
       });
 
-      self.buttonViews = {};
-      _.map(self.buttonViewMapping, function(ViewClass, key) {
-        var name = key.split('.');
-        var group = name[0];
-        var buttonName = name[1];
-        self.buttonViews[key] = new ViewClass({
-          triggerView: self.buttons[group].get(buttonName),
-          app: self
-        });
-      });
-
       self.toolbar.get('selected').disable();
-      self.buttons.primary.disable();
-      self.buttons.secondary.disable();
+      self.buttons.disable();
 
-      self.selectedCollection.on('add remove reset', function(modal, collection) {
-        if (collection.length) {
-          self.toolbar.get('selected').enable();
-          self.buttons.primary.enable();
-          self.buttons.secondary.enable();
-          if (!self.pasteAllowed) {
-            self.buttons.primary.get('paste').disable();
-          }
-        } else {
-          this.toolbar.get('selected').disable();
-          self.buttons.primary.disable();
-          self.buttons.secondary.disable();
-        }
+      var timeout = 0;
+      self.selectedCollection.on('add remove reset', function(/*modal, collection*/) {
+        /* delay rendering since this can happen in batching */
+        clearTimeout(timeout);
+        timeout = setTimeout(function(){
+          self.updateButtons();
+        }, 100);
       }, self);
 
       self.collection.on('sync', function() {
-        // need to reload models inside selectedCollection so they get any
-        // updated metadata
-        if (self.selectedCollection.models.length > 0) {
-          var uids = self.getSelectedUids(self.selectedCollection);
-          self.queryHelper.search(
-            'UID', 'plone.app.querystring.operation.list.contains',
-            uids,
-            function(data) {
-              _.each(data.results, function(attributes) {
-                var item = self.selectedCollection.getByUID(attributes.UID);
-                item.attributes = attributes;
-              });
-            },
-            false
-          );
-        }
-
         if (self.contextInfoUrl) {
           $.ajax({
             url: self.getAjaxUrl(self.contextInfoUrl),
@@ -168,7 +126,7 @@ define([
             error: function(response) {
               // XXX handle error?
               if (response.status === 404) {
-                console.log('context info url not found');
+                log.info('context info url not found');
               }
             }
           });
@@ -178,6 +136,7 @@ define([
 
       self.collection.on('pager', function() {
         self.loading.show();
+        self.updateButtons();
 
         /* maintain history here */
         if(self.options.urlStructure && window.history && window.history.pushState){
@@ -227,6 +186,23 @@ define([
         });
       }
     },
+    updateButtons: function(){
+      var self = this;
+      if (self.selectedCollection.length) {
+        self.toolbar.get('selected').enable();
+        self.buttons.enable();
+      } else {
+        this.toolbar.get('selected').disable();
+        self.buttons.disable();
+      }
+
+      self.pasteAllowed = !!$.cookie('__cp');
+      if (self.pasteAllowed) {
+        self.buttons.get('paste').enable();
+      }else{
+        self.buttons.get('paste').disable();
+      }
+    },
     inQueryMode: function() {
       if (this.additionalCriterias.length > 0) {
         return true;
@@ -253,7 +229,7 @@ define([
     getAjaxUrl: function(url) {
       return url.replace('{path}', this.options.queryHelper.getCurrentPath());
     },
-    defaultButtonClickEvent: function(button) {
+    buttonClickEvent: function(button) {
       var self = this;
       var data = null, callback = null;
 
@@ -303,6 +279,7 @@ define([
     },
     ajaxSuccessResponse: function(data, callback) {
       var self = this;
+      self.selectedCollection.reset();
       if (data.status === 'success') {
         self.collection.reset();
       }
@@ -322,41 +299,8 @@ define([
         window.alert(_t('there was an error performing action'));
       }
     },
-    pasteEvent: function(button, e, data) {
-      var self = this;
-      if (data === undefined) {
-        data = {};
-      }
-      data = $.extend(true, {}, {
-        selection: JSON.stringify(self.getSelectedUids(self.pasteSelection)),
-        pasteOperation: self.pasteOperation
-      }, data);
-      self.defaultButtonClickEvent(button, data);
-    },
-    cutCopyClickEvent: function(button) {
-      var self = this;
-      var txt;
-      if (button.id === 'cut') {
-        txt = _t('cut ');
-        self.pasteOperation = 'cut';
-      } else {
-        txt = _t('copied ');
-        self.pasteOperation = 'copy';
-      }
-
-      // clone selected items
-      self.pasteSelection = new Backbone.Collection();
-      self.selectedCollection.each(function(item) {
-        self.pasteSelection.add(item);
-      });
-      txt += 'selection';
-      self.setStatus(txt);
-      self.pasteAllowed = true;
-      self.buttons.primary.get('paste').enable();
-    },
     setupButtons: function() {
       var self = this;
-      self.buttons = {};
       var items = [];
 
       var columnsBtn = new ButtonView({
@@ -377,17 +321,11 @@ define([
         collection: this.selectedCollection
       }));
 
-      if (self.options.contextInfoUrl) {
-        // only add menu if set
-        items.push(new AddMenu({
-          contextInfoUrl: self.options.contextInfoUrl,
-          app: self
-        }));
-      }
       if (self.options.rearrange) {
         var rearrangeButton = new ButtonView({
           id: 'rearrange',
           title: 'Rearrange',
+          icon: 'sort-by-attributes',
           tooltip: 'Rearrange folder contents',
           url: self.options.rearrange.url
         });
@@ -397,35 +335,12 @@ define([
         });
         items.push(rearrangeButton);
       }
-
-      _.each(_.pairs(this.options.buttonGroups), function(group) {
-        var buttons = [];
-        _.each(group[1], function(button) {
-          button = new ButtonView(button);
-          buttons.push(button);
-          // bind click events now...
-          var ev = self.buttonClickEvents[button.id];
-          if (ev !== DISABLE_EVENT) {
-            if (ev === undefined) {
-              ev = 'defaultButtonClickEvent'; // default click event
-            }
-            button.on('button:click', self[ev], self);
-          }
-        });
-        self.buttons[group[0]] = new ButtonGroup({
-          items: buttons,
-          id: group[0],
-          app: self
-        });
-        items.push(self.buttons[group[0]]);
-      });
       if (self.options.upload) {
         var uploadButton = new ButtonView({
           id: 'upload',
           title: 'Upload',
           tooltip: 'Upload files',
-          icon: 'upload',
-          context: 'success'
+          icon: 'upload'
         });
         self.uploadView = new UploadView({
           triggerView: uploadButton,
@@ -433,6 +348,39 @@ define([
         });
         items.push(uploadButton);
       }
+      if (self.options.contextInfoUrl) {
+        // only add menu if set
+        items.push(new AddMenu({
+          contextInfoUrl: self.options.contextInfoUrl,
+          app: self
+        }));
+      }
+
+      var buttons = [];
+      _.each(self.options.buttons, function(buttonOptions) {
+        try{
+          var button = new ButtonView(buttonOptions);
+          buttons.push(button);
+
+          if(button.form){
+            buttonOptions.triggerView = button;
+            buttonOptions.app = self;
+            var view = new GenericPopover(buttonOptions);
+            self.$el.append(view.el);
+          }else{
+            button.on('button:click', self.buttonClickEvent, self);
+          }
+        }catch(err){
+          log.error('Error initializing button ' + buttonOptions.title + ' ' + err);
+        }
+      });
+      self.buttons = new ButtonGroup({
+        items: buttons,
+        id: 'mainbuttons',
+        app: self
+      });
+      items.push(self.buttons);
+
       items.push(new TextFilterView({
         id: 'filter',
         app: this
@@ -462,7 +410,7 @@ define([
           }
           self.collection.pager(); // reload it all
         },
-        error: function(data) {
+        error: function() {
           self.setStatus('error moving item');
         }
       });
@@ -488,10 +436,6 @@ define([
         self.$el.append(self.uploadView.render().el);
       }
 
-      _.each(self.buttonViews, function(view) {
-        self.$el.append(view.render().el);
-      });
-
       self.$el.append(self.tableView.render().el);
       self.$el.append(self.pagingView.render().el);
 
@@ -528,6 +472,11 @@ define([
     },
     setAllCookieSettings: function() {
       this.activeColumns = this.getCookieSetting('activeColumns', this.activeColumns);
+      var perPage = this.getCookieSetting('perPage', 15);
+      if(typeof(perPage) === 'string'){
+        perPage = parseInt(perPage);
+      }
+      this.collection.howManyPer(perPage);
     }
   });
 
diff --git a/mockup/patterns/structure/js/views/delete.js b/mockup/patterns/structure/js/views/delete.js
deleted file mode 100644
index b770d4c..0000000
--- a/mockup/patterns/structure/js/views/delete.js
+++ /dev/null
@@ -1,42 +0,0 @@
-define([
-  'jquery',
-  'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover'
-], function($, _, Backbone, PopoverView) {
-  'use strict';
-
-  var DeleteView = PopoverView.extend({
-    className: 'popover delete',
-    title: _.template('<%- _t("Delete selected items") %>'),
-    content: _.template(
-      '<label><%- _t("Are you certain you want to delete the selected items") %></label>' +
-      '<button class="btn btn-block btn-danger"><%- _t("Yes") %></button>'
-    ),
-    events: {
-      'click button': 'applyButtonClicked'
-    },
-    initialize: function(options) {
-      this.app = options.app;
-      PopoverView.prototype.initialize.apply(this, [options]);
-    },
-    render: function() {
-      PopoverView.prototype.render.call(this);
-      return this;
-    },
-    applyButtonClicked: function(e) {
-      var self = this;
-      this.app.defaultButtonClickEvent(this.triggerView, {}, function(data) {
-        self.app.selectedCollection.reset();
-      });
-      this.hide();
-    }
-  });
-
-  return DeleteView;
-});
-
-
-
-
-
diff --git a/mockup/patterns/structure/js/views/generic-popover.js b/mockup/patterns/structure/js/views/generic-popover.js
new file mode 100644
index 0000000..f641767
--- /dev/null
+++ b/mockup/patterns/structure/js/views/generic-popover.js
@@ -0,0 +1,83 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+  'mockup-ui-url/views/popover',
+  'translate',
+  'pat-registry'
+], function($, _, Backbone, PopoverView, _t, registry) {
+  'use strict';
+
+  var PropertiesView = PopoverView.extend({
+    events: {
+      'click button.applyBtn': 'applyButtonClicked'
+    },
+    submitText: _t('Apply'),
+    initialize: function(options) {
+      var self = this;
+      self.app = options.app;
+      self.className = 'popover ' + options.id;
+      self.title = options.form.title || options.title;
+      self.submitText = options.form.submitText || _t('Apply');
+      self.submitContext = options.form.submitContext || 'primary';
+      self.data = {};
+
+      self.content = _.template('<form>' + options.form.template + '</form>' +
+        '<button class="btn btn-block btn-' + self.submitContext + ' applyBtn">' + self.submitText + ' </button>');
+
+      PopoverView.prototype.initialize.apply(this, [options]);
+    },
+    getTemplateOptions: function(){
+      var self = this;
+      var items = [];
+      self.app.selectedCollection.each(function(item){
+        items.push(item.toJSON());
+      });
+      return $.extend({}, true, self.options, {
+        items: items,
+        data: self.data
+      });
+    },
+    applyButtonClicked: function() {
+      var self = this;
+      var data = {};
+      _.each(self.$el.find('form').serializeArray(), function(param){
+        data[param.name] = param.value;
+      });
+      this.app.buttonClickEvent(this.triggerView, data);
+      this.hide();
+    },
+    afterRender: function(){
+      var self = this;
+      if(self.options.form.dataUrl){
+        $.ajax({
+          url: self.options.form.dataUrl,
+          dataType: 'json',
+          type: 'POST',
+          data: {
+            selection: JSON.stringify(self.app.getSelectedUids()),
+            transitions: true,
+            render: 'yes'
+          }
+        }).done(function(data){
+          self.data = data;
+          self.renderContent();
+          registry.scan(self.$el);
+        });
+      }else{
+        registry.scan(self.$el);
+      }
+    },
+    toggle: function(button, e) {
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+      var self = this;
+      if (!self.opened) {
+        return;
+      }else{
+        this.$el.replaceWith(this.render().el);
+      }
+    }
+  });
+
+  return PropertiesView;
+});
diff --git a/mockup/patterns/structure/js/views/paging.js b/mockup/patterns/structure/js/views/paging.js
index d5941ad..77b8e38 100644
--- a/mockup/patterns/structure/js/views/paging.js
+++ b/mockup/patterns/structure/js/views/paging.js
@@ -100,6 +100,7 @@ define([
       e.preventDefault();
       var per = $(e.target).text();
       this.collection.howManyPer(per);
+      this.app.setCookieSetting('perPage', per);
     }
   });
 
diff --git a/mockup/patterns/structure/js/views/properties.js b/mockup/patterns/structure/js/views/properties.js
deleted file mode 100644
index 8f55147..0000000
--- a/mockup/patterns/structure/js/views/properties.js
+++ /dev/null
@@ -1,111 +0,0 @@
-define([
-  'jquery',
-  'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover',
-  'mockup-patterns-pickadate',
-  'mockup-patterns-select2'
-], function($, _, Backbone, PopoverView, PickADate, Select2) {
-  'use strict';
-
-  var PropertiesView = PopoverView.extend({
-    className: 'popover properties',
-    title: _.template('<%- _t("Modify properties on items") %>'),
-    content: _.template(
-      '<div class="form-group">' +
-        '<label><%- _t("Publication Date") %></label>' +
-        '<input class="form-control" name="effective" />' +
-      '</div>' +
-      '<div class="form-group">' +
-        '<label><%- _t("Expiration Date") %></label>' +
-        '<input class="form-control" name="expiration" />' +
-      '</div>' +
-      '<div class="form-group">' +
-        '<label><%- _t("Copyright") %></label>' +
-        '<textarea class="form-control" name="copyright"></textarea>' +
-      '</div>' +
-      '<label><%- _t("Creators") %></label>' +
-      '<div class="form-group">' +
-        '<input name="creators" style="width: 300px" />' +
-      '</div>' +
-      '<label><%- _t("Contributors") %></label>' +
-      '<div class="form-group">' +
-        '<input name="contributors" style="width: 300px" />' +
-      '</div>' +
-      '<label><%- _t("Exclude from nav") %></label>' +
-      '<div class="radio">' +
-        '<label>' +
-          '<input type="radio" name="exclude-from-nav" value="yes" />' +
-          '<%- _t("Yes") %>' +
-        '</label>' +
-      '</div>' +
-      '<div class="radio">' +
-        '<label>' +
-          '<input type="radio" name="exclude-from-nav" value="no" />' +
-          '<%- _t("No") %>' +
-        '</label>' +
-      '</div>' +
-      '<button class="btn btn-block btn-primary"><%- _t("Apply") %></button>'
-    ),
-    events: {
-      'click button': 'applyButtonClicked'
-    },
-    initialize: function(options) {
-      this.app = options.app;
-      PopoverView.prototype.initialize.apply(this, [options]);
-    },
-    render: function() {
-      PopoverView.prototype.render.call(this);
-      this.$effective = this.$('[name="effective"]');
-      this.$expiration = this.$('[name="expiration"]');
-      this.$copyright = this.$('[name="copyright"]');
-      this.$creators = this.$('[name="creators"]');
-      this.$contributors = this.$('[name="contributors"]');
-      this.$exclude = this.$('[name="exclude-from-nav"]');
-
-      this.creatorsSelect2 = new Select2(this.$creators, {
-        multiple: true,
-        vocabularyUrl: this.app.options.usersVocabularyUrl
-      });
-      this.contributorsSelect2 = new Select2(this.$contributors, {
-        multiple: true,
-        vocabularyUrl: this.app.options.usersVocabularyUrl
-      });
-      this.effectivePickADate = new PickADate(this.$effective);
-      this.expirationPickADate = new PickADate(this.$expiration);
-      return this;
-    },
-    applyButtonClicked: function(e) {
-      var data = {
-        effectiveDate: this.effectivePickADate.$date.val(),
-        effectiveTime: this.effectivePickADate.$time.val(),
-        expirationDate: this.expirationPickADate.$date.val(),
-        expirationTime: this.expirationPickADate.$time.val(),
-        copyright: this.$copyright.val(),
-        contributors: JSON.stringify(this.$contributors.select2('data')),
-        creators: JSON.stringify(this.$creators.select2('data'))
-      };
-      if (this.$('[name="exclude-from-nav"]:checked').length > 0) {
-        data['exclude_from_nav'] = this.$('[name="exclude-from-nav"]:checked').val(); // jshint ignore:line
-      }
-      this.app.defaultButtonClickEvent(this.triggerView, data);
-      this.hide();
-    },
-    toggle: function(button, e) {
-      PopoverView.prototype.toggle.apply(this, [button, e]);
-      if (!this.opened) {
-        return;
-      }
-      this.$effective.attr('value', '');
-      this.$expiration.attr('value', '');
-      this.$copyright.html('');
-      this.$creators.select2('data', []);
-      this.$contributors.select2('data', []);
-      this.$exclude.each(function() {
-        this.checked = false;
-      });
-    }
-  });
-
-  return PropertiesView;
-});
diff --git a/mockup/patterns/structure/js/views/rearrange.js b/mockup/patterns/structure/js/views/rearrange.js
index c905287..19f3515 100644
--- a/mockup/patterns/structure/js/views/rearrange.js
+++ b/mockup/patterns/structure/js/views/rearrange.js
@@ -47,7 +47,7 @@ define([
       if (this.$reversed[0].checked) {
         data.reversed = true;
       }
-      this.app.defaultButtonClickEvent(this.triggerView, data);
+      this.app.buttonClickEvent(this.triggerView, data);
       this.hide();
     }
   });
diff --git a/mockup/patterns/structure/js/views/rename.js b/mockup/patterns/structure/js/views/rename.js
deleted file mode 100644
index 92fd330..0000000
--- a/mockup/patterns/structure/js/views/rename.js
+++ /dev/null
@@ -1,76 +0,0 @@
-define([
-  'jquery',
-  'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover',
-  'translate'
-], function($, _, Backbone, PopoverView, _t) {
-  'use strict';
-
-  var PropertiesView = PopoverView.extend({
-    className: 'popover rename',
-    title: _.template('<%- _t("Rename items") %>'),
-    content: _.template(
-      '<div class="itemstoremove"></div>' +
-      '<button class="btn btn-block btn-primary"><%= _t("Apply") %></button>'
-    ),
-    itemTemplate: _.template(
-      '<div class="item">' +
-        '<div class="form-group">' +
-          '<input name="UID" type="hidden" value="<%- UID %>" />' +
-          '<label><%- _t("Title") %></label>' +
-          '<input class="form-control" name="newtitle" value="<%= Title %>" />' +
-          '<label><%- _t("Short name") %></label>' +
-          '<input class="form-control" name="newid" value="<%= id %>" />' +
-        '</div>' +
-      '</div>'
-    ),
-    events: {
-      'click button': 'applyButtonClicked'
-    },
-    initialize: function(options) {
-      this.app = options.app;
-      PopoverView.prototype.initialize.apply(this, [options]);
-    },
-    render: function() {
-      PopoverView.prototype.render.call(this);
-      this.$items = this.$('.itemstoremove');
-      return this;
-    },
-    applyButtonClicked: function(e) {
-      var torename = [];
-      this.$items.find('.item').each(function() {
-        var $item = $(this);
-        torename.push({
-          UID: $item.find('[name="UID"]').val(),
-          newid: $item.find('[name="newid"]').val(),
-          newtitle: $item.find('[name="newtitle"]').val()
-        });
-      });
-      this.app.defaultButtonClickEvent(this.triggerView, {
-        torename: JSON.stringify(torename)
-      });
-      this.hide();
-    },
-    toggle: function(button, e) {
-      PopoverView.prototype.toggle.apply(this, [button, e]);
-      var self = this;
-      if (!self.opened) {
-        return;
-      }
-      self.$items.empty();
-      self.app.selectedCollection.each(function(item) {
-        self.$items.append(self.itemTemplate($.extend({}, true, item.toJSON(), {
-          _t: _t
-        })));
-      });
-    }
-  });
-
-  return PropertiesView;
-});
-
-
-
-
-
diff --git a/mockup/patterns/structure/js/views/selectionbutton.js b/mockup/patterns/structure/js/views/selectionbutton.js
index 81acb67..0492a30 100644
--- a/mockup/patterns/structure/js/views/selectionbutton.js
+++ b/mockup/patterns/structure/js/views/selectionbutton.js
@@ -12,13 +12,18 @@ define([
     template: tplButton,
     initialize: function(options) {
       ButtonView.prototype.initialize.apply(this, [options]);
-
+      var self = this;
+      self.timeout = 0;
       if (this.collection !== null) {
         this.collection.on('add remove reset', function() {
-          this.render();
-          if (this.collection.length === 0) {
-            this.$el.removeClass('active');
-          }
+          /* delay it */
+          clearTimeout(self.timeout);
+          self.timeout = setTimeout(function(){
+            self.render();
+            if (self.collection.length === 0) {
+              self.$el.removeClass('active');
+            }
+          }, 50);
         }, this);
       }
     },
diff --git a/mockup/patterns/structure/js/views/selectionwell.js b/mockup/patterns/structure/js/views/selectionwell.js
index 90c0b25..f5d1db7 100644
--- a/mockup/patterns/structure/js/views/selectionwell.js
+++ b/mockup/patterns/structure/js/views/selectionwell.js
@@ -24,7 +24,14 @@ define([
     },
     initialize: function(options) {
       PopoverView.prototype.initialize.apply(this, [options]);
-      this.listenTo(this.collection, 'reset all add remove', this.render);
+      var self = this;
+      var timeout = 0;
+      this.listenTo(this.collection, 'reset all add remove', function(){
+        clearTimeout(timeout);
+        timeout = setTimeout(function(){
+          self.render();
+        }, 50);
+      });
       this.options['item_template'] = _.template(ItemTemplate); // jshint ignore:line
     },
     render: function () {
diff --git a/mockup/patterns/structure/js/views/table.js b/mockup/patterns/structure/js/views/table.js
index 93a268a..340e8ba 100644
--- a/mockup/patterns/structure/js/views/table.js
+++ b/mockup/patterns/structure/js/views/table.js
@@ -46,7 +46,6 @@ define([
       var data = self.contextInfo;
       var $defaultPage = self.$('[data-id="' + data.defaultPage + '"]');
       if ($defaultPage.length > 0) {
-        $defaultPage.find('td.title').prepend('<span>*</span> ');
         $defaultPage.addClass('default-page');
       }
       /* set breadcrumb title info */
@@ -144,7 +143,9 @@ define([
       if ($(e.target).is(':checked')) {
         $('input[type="checkbox"]', this.$('tbody')).prop('checked', true).change();
       } else {
-        this.selectedCollection.remove(this.collection.models);
+        /* delaying the re-rendering is much faster in this case */
+        this.selectedCollection.remove(this.collection.models, { silent: true });
+        this.selectedCollection.trigger('remove');
       }
       this.setContextInfo();
     },
@@ -165,7 +166,17 @@ define([
       self.$el.addClass('order-support');
       var dd = new Sortable(self.$('tbody'), {
         selector: 'tr',
-        dragClass: 'structure-dragging',
+        createDragItem: function(pattern, $el){
+          var $tr = $el.clone();
+          var $table = $('<table><tbody></tbody></table>');
+          $('tbody', $table).append($tr);
+          $table.addClass('structure-dragging')
+            .css({opacity: 0.85, position: 'absolute'});
+          $table.width($el.width());
+          $table.height($el.height());
+          $table.appendTo(document.body);
+          return $table;
+        },
         drop: function($el, delta) {
           if (delta !== 0){
             self.app.moveItem($el.attr('data-id'), delta, self.subsetIds);
diff --git a/mockup/patterns/structure/js/views/tablerow.js b/mockup/patterns/structure/js/views/tablerow.js
index 89bfae5..f913e24 100644
--- a/mockup/patterns/structure/js/views/tablerow.js
+++ b/mockup/patterns/structure/js/views/tablerow.js
@@ -92,14 +92,17 @@ define([
           if ((index > lastCheckedIndex && index < thisIndex) ||
               (index < lastCheckedIndex && index > thisIndex)) {
             this.checked = checkbox.checked;
-            var model = $(this).closest('tr')[0].model;
-            var existing = selectedCollection.getByUID(model.attributes.UID);
-            if (this.checked) {
-              if (!existing) {
-                selectedCollection.add(model.clone());
+            var $tr = $(this).closest('tr.itemRow');
+            if($tr.length > 0){
+              var model = $tr[0].model;
+              var existing = selectedCollection.getByUID(model.attributes.UID);
+              if (this.checked) {
+                if (!existing) {
+                  selectedCollection.add(model.clone());
+                }
+              } else if (existing) {
+                selectedCollection.removeResult(existing);
               }
-            } else if (existing) {
-              selectedCollection.removeResult(existing);
             }
           }
         });
diff --git a/mockup/patterns/structure/js/views/tags.js b/mockup/patterns/structure/js/views/tags.js
deleted file mode 100644
index 0fa3dd0..0000000
--- a/mockup/patterns/structure/js/views/tags.js
+++ /dev/null
@@ -1,84 +0,0 @@
-define([
-  'jquery',
-  'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover',
-  'mockup-patterns-select2'
-], function($, _, Backbone, PopoverView, Select2) {
-  'use strict';
-
-  var TagsView = PopoverView.extend({
-    title: _.template('Add/Remove tags'),
-    content: _.template(
-      '<label><%- _t("Tags to remove") %></label>' +
-      '<div class="form-group">' +
-        '<select multiple class="toremove" style="width: 300px">' +
-        '</select>' +
-      '</div>' +
-      '<label><%- _t("Tags to add") %></label>' +
-      '<div class="form-group">' +
-        '<input class="toadd" style="width:300px" />' +
-      '</div>' +
-      '<button class="btn btn-block btn-primary"><%- _t("Apply") %></button>'
-    ),
-    events: {
-      'click button': 'applyButtonClicked'
-    },
-    initialize: function(options) {
-      this.app = options.app;
-      this.removeSelect2 = null;
-      this.addSelect2 = null;
-      PopoverView.prototype.initialize.apply(this, [options]);
-    },
-    render: function() {
-      PopoverView.prototype.render.call(this);
-      this.$remove = this.$('.toremove');
-      this.$add = this.$('.toadd');
-      this.$remove.select2();
-      this.addSelect2 = new Select2(this.$add, {
-        multiple: true,
-        vocabularyUrl: this.app.options.tagsVocabularyUrl
-      });
-      return this;
-    },
-    getSelect2Values: function($el) {
-      var values = [];
-      _.each($el.select2('data'), function(item) {
-        values.push(item.id);
-      });
-      return values;
-    },
-    applyButtonClicked: function(e) {
-      this.app.defaultButtonClickEvent(this.triggerView, {
-        remove: JSON.stringify(this.getSelect2Values(this.$remove)),
-        add: JSON.stringify(this.getSelect2Values(this.$add))
-      });
-      this.hide();
-    },
-    toggle: function(button, e) {
-      PopoverView.prototype.toggle.apply(this, [button, e]);
-      var self = this;
-      if (!this.opened) {
-        return;
-      }
-      // clear out
-      self.$remove.select2('destroy');
-      self.$remove.empty();
-      self.$add.select2('data', []);
-
-      self.app.selectedCollection.each(function(item) {
-        if (!item.attributes.Subject) {
-          return;
-        }
-        _.each(item.attributes.Subject, function(tag) {
-          if (self.$remove.find('[value="' + tag + '"]').length === 0) {
-            self.$remove.append('<option value="' + tag + '">' + tag + '</option>');
-          }
-        });
-      });
-      self.$remove.select2();
-    }
-  });
-
-  return TagsView;
-});
diff --git a/mockup/patterns/structure/js/views/textfilter.js b/mockup/patterns/structure/js/views/textfilter.js
index b3768f9..d5ac1e0 100644
--- a/mockup/patterns/structure/js/views/textfilter.js
+++ b/mockup/patterns/structure/js/views/textfilter.js
@@ -38,11 +38,12 @@ define([
     render: function() {
       this.$el.html(this.template({_t: _t}));
       this.button = new ButtonView({
-        title: 'Query'
+        title: _t('Query'),
+        icon: 'search'
       });
       this.popover = new PopoverView({
         triggerView: this.button,
-        title: _.template('Query'),
+        title: _.template(_t('Query')),
         content: this.popoverContent,
         placement: 'left'
       });
diff --git a/mockup/patterns/structure/js/views/workflow.js b/mockup/patterns/structure/js/views/workflow.js
deleted file mode 100644
index 1d8352c..0000000
--- a/mockup/patterns/structure/js/views/workflow.js
+++ /dev/null
@@ -1,95 +0,0 @@
-define([
-  'jquery',
-  'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover'
-], function($, _, Backbone, PopoverView) {
-  'use strict';
-
-  var WorkflowView = PopoverView.extend({
-    className: 'popover workflow',
-    title: _.template('<%- _t("Modify dates on items") %>'),
-    content: _.template(
-      '<form>' +
-        '<fieldset>' +
-          '<div class="form-group">' +
-            '<label><%- _t("Comments") %></label>' +
-            '<textarea class="form-control" rows="4"></textarea>' +
-            '<p class="help-block"><%- _t("Select the transition to be used for modifying the items state.") %></p>' +
-          '</div>' +
-          '<div class="form-group">' +
-            '<label><%- _t("Change State") %></label>' +
-            '<p class="help-block"><%- _t("Select the transition to be used for modifying the items state.") %></p>' +
-            '<select class="form-control" name="transition">' +
-            '</select>' +
-          '</div>' +
-          '<div class="checkbox">' +
-            '<label>' +
-              '<input type="checkbox" name="recurse" />' +
-              '<%- _t("Include contained items?") %></label>' +
-            '<p class="help-block">' +
-              '<%- _t("If checked, this will attempt to modify the status of all content in any selected folders and their subfolders.") %>' +
-            '</p>' +
-          '</div>' +
-        '</fieldset>' +
-      '</form>' +
-      '<button class="btn btn-block btn-primary"><%- _t("Apply") %></button>'
-    ),
-    events: {
-      'click button': 'applyButtonClicked'
-    },
-    initialize: function(options) {
-      this.app = options.app;
-      PopoverView.prototype.initialize.apply(this, [options]);
-    },
-    render: function() {
-      PopoverView.prototype.render.call(this);
-      this.$comments = this.$('textarea');
-      this.$transition = this.$('select');
-      return this;
-    },
-    applyButtonClicked: function(e) {
-      var data = {
-        comments: this.$comments.val(),
-        transition: this.$transition.val()
-      };
-      if (this.$('[name="recurse"]')[0].checked) {
-        data.recurse = 'yes';
-      }
-      this.app.defaultButtonClickEvent(this.triggerView, data);
-      this.hide();
-    },
-    toggle: function(button, e) {
-      PopoverView.prototype.toggle.apply(this, [button, e]);
-      var self = this;
-      if (!self.opened) {
-        return;
-      }
-      self.$comments.val('');
-      self.$transition.empty();
-      $.ajax({
-        url: self.triggerView.url,
-        type: 'GET',
-        data: {
-          selection: JSON.stringify(self.app.getSelectedUids()),
-          transitions: true
-        },
-        success: function(data) {
-          _.each(data.transitions, function(transition) {
-            self.$transition.append('<option value="' + transition.id + '">' + transition.title + '</option>');
-          });
-        },
-        error: function(data) {
-          // XXX error handling...
-          window.alert('error getting transition data');
-        }
-      });
-    }
-  });
-
-  return WorkflowView;
-});
-
-
-
-
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index cd42fa3..996f673 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -71,7 +71,9 @@
     .open:extend(.open all){}
 
     .btn{
-        .btn-xs();
+        .btn-sm();
+        padding: 5px 5px;
+        font-size: 13px;
     }
     table{
         margin-bottom: 0;
@@ -80,20 +82,33 @@
             td.selection{
                 width: 15px;
             }
+            td.actionmenu-container{
+                .btn{
+                    padding: 2px 4px;
+                }
+            }
         }
         .breadcrumbs-container{
             .input-group{
                 .input-group-addon{
                     padding: 2px 5px;
                 }
+                .btn{
+                    padding: 2px 4px;
+                }
 
                 display: inline-block;
                 float: left;
                 padding-right: 5px;
             }
+            .breadcrumbs{
+                font-size: 15px;
+                padding-top: 2px;
+            }
         }
     }
     .navbar {
+        min-height: inherit;
         margin-bottom: 5px;
 
         .btn-group, #selected{
@@ -120,23 +135,20 @@
     }
 
     .navbar-search{
-        margin-top: 5px;
-        input.form-control, #gen-query{
-            height: 26px;
+        input.form-control, #btn-query{
+            height: 31px;
         }
     }
     .alert.status{
         margin-bottom: 5px;
         padding: 5px;
+        color: @plone-link-color;
     }
 
     #filter{
         width: 200px;
         float: right;
     }
-    #rearrange, #gen-upload{
-        margin-left: 5px;
-    }
 
     .popover.upload{
         max-width: 650px;
@@ -146,6 +158,65 @@
         width: 500px;
     }
 
+    /* button overrides to make it look
+       more streamlined */
+    #btn-columns{
+        border-top-right-radius: 0;
+        border-bottom-right-radius: 0;
+        border-right: 0;
+    }
+    #btn-selected, #btn-rearrange, #btn-upload{
+        border-radius: 0;
+        border-right: 0;
+    }
+    .btn-group.addnew{
+        margin-left: 0;
+        .btn{
+            border-top-left-radius: 0;
+            border-bottom-left-radius: 0;
+        }
+    }
+
+    @media all and (max-width: 1200px) {
+        #filter{
+            margin-top: 5px;
+            float: left;
+        }
+        #btngroup-mainbuttons{
+            float: left;
+            width: 100%;
+            margin-left: 0;
+            margin-top: 5px;
+        }
+    }
+    @media all and (max-width: 620px) {
+        #btn-columns{
+            display:none;
+        }
+        #btn-selected{
+            border-top-left-radius: 3px;
+            border-bottom-left-radius: 3px;
+            border-left: 1px solid #cccccc;
+        }
+        table{
+            thead{
+                th{
+                    display:none;
+                }
+                th.selection, th.title, th.actions{
+                    display: table-cell;
+                }
+            }
+            tbody{
+                td{
+                    display:none;
+                }
+                td.selection, td.title, td.actionmenu-container{
+                    display: table-cell;
+                }
+            }
+        }
+    }
 }
 
 .pat-structure {
@@ -187,6 +258,10 @@
     .itemRow.folder .title a{
         color: #005580;
     }
+    .itemRow.default-page .title:before{
+        content: '*';
+        color: red;
+    }
 }
 
 .popover.selected {
@@ -225,7 +300,7 @@
     max-width: 700px;
 }
 
-.popover.rename {
+#popover-rename {
     width: 400px;
 
     .popover-content{
@@ -271,6 +346,15 @@
     cursor: move;
 }
 
-.structure-dragging{
+table.structure-dragging{
     outline: 1px dashed black;
-}
+    background-color: white;
+    .itemRow{
+        .actionmenu-container{
+            display: none;
+        } 
+        td{
+            padding: 5px;
+        }
+    }
+}
\ No newline at end of file
diff --git a/mockup/patterns/structure/pattern.js b/mockup/patterns/structure/pattern.js
index 5586023..6e9d8a0 100644
--- a/mockup/patterns/structure/pattern.js
+++ b/mockup/patterns/structure/pattern.js
@@ -2,8 +2,6 @@
  *
  * Options:
  *    vocabularyUrl(string): Url to return query results (null)
- *    tagsVocabularyUrl(string): Url to return tags query results (null)
- *    usersVocabularyUrl(string): Url to query users (null)
  *    indexOptionsUrl(string): Url to configure querystring widget with (null)
  *    upload(string): upload configuration settings(null)
  *    moveUrl(string): For supporting drag drop reordering (null)
@@ -19,8 +17,6 @@
  *         data-pat-structure="vocabularyUrl:/relateditems-test.json;
  *                             uploadUrl:/upload;
  *                             moveUrl:/moveitem;
- *                             tagsVocabularyUrl:/select2-test.json;
- *                             usersVocabularyUrl:/tests/json/users.json;
  *                             indexOptionsUrl:/tests/json/queryStringCriteria.json;
  *                             contextInfoUrl:{path}/context-info;"></div>
  *
@@ -48,8 +44,6 @@ define([
       // Example: {base: 'http://mysite.com', appended: '/folder_contents'}
       urlStructure: null,
       vocabularyUrl: null,
-      tagsVocabularyUrl: null,
-      usersVocabularyUrl: null,
       indexOptionsUrl: null, // for querystring widget
       contextInfoUrl: null, // for add new dropdown and other info
       setDefaultPageUrl: null,
@@ -84,49 +78,40 @@ define([
       rearrange: {
         properties: {
           'id': 'ID',
-          'sortable_title': 'Title',
-          'modified': 'Last Modified',
-          'created': 'Created on',
-          'effective': 'Publication Date',
-          'portal_type': 'Type'
+          'sortable_title': 'Title'
         },
         url: '/rearrange'
       },
       basePath: '/',
       moveUrl: null,
-      /*
-       * all these base buttons are required
-       */
-      buttonGroups: {
-        primary: [{
-          title: 'Cut',
-          url: '/cut'
-        },{
-          title: 'Copy',
-          url: '/copy'
-        },{
-          title: 'Paste',
-          url: '/paste'
-        },{
-          title: 'Delete',
-          url: '/delete',
-          context: 'danger',
-          icon: 'trash'
-        }],
-        secondary: [{
-          title: 'Workflow',
-          url: '/workflow'
-        },{
-          title: 'Tags',
-          url: '/tags'
-        },{
-          title: 'Properties',
-          url: '/properties'
-        },{
-          title: 'Rename',
-          url: '/rename'
-        }]
-      },
+      buttons: [],
+      demoButtons: [{
+        title: 'Cut',
+        url: '/cut'
+      },{
+        title: 'Copy',
+        url: '/copy'
+      },{
+        title: 'Paste',
+        url: '/paste'
+      },{
+        title: 'Delete',
+        url: '/delete',
+        context: 'danger',
+        icon: 'trash'
+      },{
+        title: 'Workflow',
+        url: '/workflow'
+      },{
+        title: 'Tags',
+        url: '/tags'
+      },{
+        title: 'Properties',
+        url: '/properties'
+      },{
+        title: 'Rename',
+        url: '/rename'
+      }],
       upload: {
         uploadMultiple: true,
         showTitle: true
@@ -134,6 +119,11 @@ define([
     },
     init: function() {
       var self = this;
+      if(self.options.buttons.length === 0){
+        /* XXX I know this is wonky... but this prevents
+           weird option merging issues */
+        self.options.buttons = self.options.demoButtons;
+      }
       self.browsing = true; // so all queries will be correct with QueryHelper
       self.options.collectionUrl = self.options.vocabularyUrl;
       self.options.queryHelper = new utils.QueryHelper(
diff --git a/mockup/patterns/structure/templates/actionmenu.xml b/mockup/patterns/structure/templates/actionmenu.xml
index dbcb901..a70ebfb 100644
--- a/mockup/patterns/structure/templates/actionmenu.xml
+++ b/mockup/patterns/structure/templates/actionmenu.xml
@@ -19,6 +19,9 @@
   <% if(!attributes.is_folderish && canSetDefaultPage){ %>
     <li class="set-default-page"><a href="#"><%- _t("Set as default page") %></a></li>
   <% } %>
+  <% if(attributes.is_folderish){ %>
+    <li class="selectAll"><a href="#"><%- _t("Select all contained items") %></a></li>
+  <% } %>
   <li class="openItem"><a href="#"><%- _t("Open") %></a></li>
   <li class="editItem"><a href="#"><%- _t("Edit") %></a></li>
 </ul>
diff --git a/mockup/patterns/structure/templates/selection_button.xml b/mockup/patterns/structure/templates/selection_button.xml
index bcb5257..2f92b97 100644
--- a/mockup/patterns/structure/templates/selection_button.xml
+++ b/mockup/patterns/structure/templates/selection_button.xml
@@ -1 +1 @@
-<%= title %> <span class="label<% if (length > 0) { %> label-success<% } else { %> label-default<% } %>">  <%= length %></span>
\ No newline at end of file
+<span class="glyphicon glyphicon-list"></span><%= title %> <span class="label<% if (length > 0) { %> label-success<% } else { %> label-default<% } %>">  <%= length %></span>
\ No newline at end of file
diff --git a/mockup/patterns/structure/templates/table.xml b/mockup/patterns/structure/templates/table.xml
index dfa0df9..0551af0 100644
--- a/mockup/patterns/structure/templates/table.xml
+++ b/mockup/patterns/structure/templates/table.xml
@@ -30,14 +30,14 @@
       </td>
     </tr>
     <tr>
-      <th><input type="checkbox" class="select-all" /></th>
-      <th>Title</th>
+      <th class="selection"><input type="checkbox" class="select-all" /></th>
+      <th class="title">Title</th>
       <% _.each(activeColumns, function(column){ %>
         <% if(_.has(availableColumns, column)) { %>
           <th><%- availableColumns[column] %></th>
         <% } %>
       <% }); %>
-      <th><%- _t("Actions") %></th>
+      <th class="actions"><%- _t("Actions") %></th>
     </tr>
   </thead>
   <tbody>
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index 5d1562d..a0e1cf5 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -274,7 +274,7 @@
         }
     }
 
-    #inspectors {
+    #btn-inspectors {
         clear: both;
 
         .frame-shelf-container {
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index 25817da..e113678 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -31,13 +31,14 @@ define([
   ========================== */
   describe('Structure', function() {
     beforeEach(function() {
+      // clear cookie setting
+      $.removeCookie('_fc_perPage');
+
       this.$el = $('' +
         '<div class="pat-structure" ' +
              'data-pat-structure="vocabularyUrl:/data.json;' +
                                  'uploadUrl:/upload;' +
                                  'moveUrl:/moveitem;' +
-                                 'tagsVocabularyUrl:/select2-test.json;' +
-                                 'usersVocabularyUrl:/tests/json/users.json;' +
                                  'indexOptionsUrl:/tests/json/queryStringCriteria.json;' +
                                  'contextInfoUrl:{path}/contextInfo;' +
                                  ' ">' +
@@ -146,7 +147,8 @@ define([
       var cb = this.$el.find('.itemRow td.selection input').eq(0);
       cb[0].checked = true;
       cb.trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('1');
+      this.clock.tick(500);
+      expect(this.$el.find('#btn-selected').html()).to.contain('1');
     });
 
     it('remove item from selection well', function() {
@@ -156,7 +158,7 @@ define([
       $item1[0].checked = true;
       $item1.trigger('change');
       this.$el.find('.items.popover-content a.remove').trigger('click').trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('0');
+      expect(this.$el.find('#btn-selected').html()).to.contain('0');
     });
 
     it('remove all from selection well', function() {
@@ -165,12 +167,15 @@ define([
       var $item1 = this.$el.find('.itemRow td.selection input').eq(0);
       $item1[0].checked = true;
       $item1.trigger('change');
+      this.clock.tick(1000);
       var $item2 = this.$el.find('.itemRow td.selection input').eq(1);
       $item2[0].checked = true;
       $item2.trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('2');
+      this.clock.tick(1000);
+      expect(this.$el.find('#btn-selected').html()).to.contain('2');
       this.$el.find('.popover.selected a.remove-all').trigger('click');
-      expect(this.$el.find('#selected').html()).to.contain('0');
+      this.clock.tick(1000);
+      expect(this.$el.find('#btn-selected').html()).to.contain('0');
     });
 
     it('paging', function() {
@@ -187,6 +192,8 @@ define([
     it('per page', function() {
       registry.scan(this.$el);
       this.clock.tick(1000);
+      this.$el.find('.serverhowmany15 a').trigger('click');
+      this.clock.tick(1000);
       expect(this.$el.find('.itemRow').length).to.equal(16);
       this.$el.find('.serverhowmany30 a').trigger('click');
       this.clock.tick(1000);
@@ -220,50 +227,6 @@ define([
       expect(this.$el.find('.order-support .status').html()).to.contain('rearrange');
     });
 
-    it('test copy button', function() {
-      registry.scan(this.$el);
-      var pattern = this.$el.data('patternStructure');
-      this.clock.tick(1000);
-      var $item = this.$el.find('.itemRow td.selection input').eq(0);
-      $item[0].checked = true;
-      $item.trigger('change');
-      this.$el.find('#gen-copy').trigger('click');
-      expect(pattern.view.pasteOperation).to.equal('copy');
-    });
-
-    it('test cut button', function() {
-      registry.scan(this.$el);
-      var pattern = this.$el.data('patternStructure');
-      this.clock.tick(1000);
-      var $item = this.$el.find('.itemRow td.selection input').eq(0);
-      $item[0].checked = true;
-      $item.trigger('change');
-      this.$el.find('#gen-cut').trigger('click');
-      expect(pattern.view.pasteOperation).to.equal('cut');
-    });
-
-    it('test paste button', function() {
-      registry.scan(this.$el);
-      var pattern = this.$el.data('patternStructure');
-      this.clock.tick(1000);
-      var $item = this.$el.find('.itemRow td.selection input').eq(0);
-      $item[0].checked = true;
-      $item.trigger('change');
-      this.$el.find('#gen-copy').trigger('click');
-      this.$el.find('#gen-paste').trigger('click');
-    });
-
-    it('test button updates status', function() {
-      registry.scan(this.$el);
-      var pattern = this.$el.data('patternStructure');
-      this.clock.tick(1000);
-      var $item = this.$el.find('.itemRow td.selection input').eq(0);
-      $item[0].checked = true;
-      $item.trigger('change');
-      this.$el.find('#gen-cut').trigger('click');
-      expect(this.$el.find('.order-support .status').html()).to.contain('cut');
-    });
-
     it('test select all', function() {
       registry.scan(this.$el);
       var pattern = this.$el.data('patternStructure');
@@ -271,7 +234,8 @@ define([
       var $item = this.$el.find('table th .select-all');
       $item[0].checked = true;
       $item.trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('16');
+      this.clock.tick(1000);
+      expect(this.$el.find('#btn-selected').html()).to.contain('16');
 
     });
 
@@ -283,10 +247,10 @@ define([
       var $item = this.$el.find('table th .select-all');
       $item[0].checked = true;
       $item.trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('16');
+      expect(this.$el.find('#btn-selected').html()).to.contain('16');
       $item[0].checked = false;
       $item.trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('0');
+      expect(this.$el.find('#btn-selected').html()).to.contain('0');
     });
 
     it('test current folder buttons do not show on root', function() {
@@ -316,7 +280,8 @@ define([
       var $checkbox = $('.breadcrumbs-container input[type="checkbox"]', this.$el);
       $checkbox[0].checked = true;
       $checkbox.trigger('change');
-      expect(this.$el.find('#selected').html()).to.contain('1');
+      this.clock.tick(1000);
+      expect(this.$el.find('#btn-selected').html()).to.contain('1');
     });
 
   });
diff --git a/mockup/tests/pattern-thememapper-test.js b/mockup/tests/pattern-thememapper-test.js
index 5ddbcb3..0861bbd 100644
--- a/mockup/tests/pattern-thememapper-test.js
+++ b/mockup/tests/pattern-thememapper-test.js
@@ -37,13 +37,13 @@ define([
       this.clock = sinon.useFakeTimers();
       this.clock.tick(1000);
       expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(true);
-      expect($('#mapper', this.$el).length > 0).to.be.equal(true);
-      expect($('#showinspectors', this.$el).length > 0).to.be.equal(true);
-      expect($('#buildrule', this.$el).length > 0).to.be.equal(true);
-      expect($('#previewtheme', this.$el).length > 0).to.be.equal(true);
-      expect($('#fullscreenEditor', this.$el).length > 0).to.be.equal(true);
-      expect($('#helpbutton', this.$el).length > 0).to.be.equal(true);
-      expect($('#inspectors', this.$el).length > 0).to.be.equal(true);
+      expect($('#container-mapper', this.$el).length > 0).to.be.equal(true);
+      expect($('#btn-showinspectors', this.$el).length > 0).to.be.equal(true);
+      expect($('#btn-buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('#btn-previewtheme', this.$el).length > 0).to.be.equal(true);
+      expect($('#btn-fullscreenEditor', this.$el).length > 0).to.be.equal(true);
+      expect($('#btn-helpbutton', this.$el).length > 0).to.be.equal(true);
+      expect($('#btn-inspectors', this.$el).length > 0).to.be.equal(true);
       expect($('.container', this.$el).length > 0).to.be.equal(true);
 
       //This one is added after clicking the "fullscreen" button
@@ -58,7 +58,7 @@ define([
 
       expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
       expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(false);
-      $('#fullscreenEditor', this.$el).click();
+      $('#btn-fullscreenEditor', this.$el).click();
       expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(true);
       expect($('.closeeditor', this.$el).length > 0).to.be.equal(true);
 
@@ -66,11 +66,11 @@ define([
       expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(false);
       expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
 
-      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(false);
-      $('#showinspectors', this.$el).click();
+      expect($('#btn-inspectors', this.$el).is(':visible')).to.be.equal(false);
+      $('#btn-showinspectors', this.$el).click();
       expect($('#inspectors', this.$el).is(':visible')).to.be.equal(true);
-      $('#showinspectors', this.$el).click();
-      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(false);
+      $('#btn-showinspectors', this.$el).click();
+      expect($('#btn-inspectors', this.$el).is(':visible')).to.be.equal(false);
     });
   });
 });


