Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-03-05T11:02:40+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/929af095358b744d9a8513a1bb1387f2cd65064f

Improve handling of Link types with other URL schemes than http:// and https://.

Files changed:
M docs/CHANGES.rst
M plone/app/contenttypes/browser/link_redirect_view.py
M plone/app/contenttypes/tests/test_link.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index e5495af..0dadc09 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,8 +4,8 @@ Changelog
 1.2 (unreleased)
 ----------------
 
-- For the link_redirect_view, don't modify the urls for ``mailto:``, ``tel:``,
-  ``callto:`` and ``file:`` link types but render them as-is.
+- Improve handling of Link types with other URL schemes than ``http://`` and
+  ``https://``.
   [thet]
 
 - When installing the default profile, restrict uninstalling of old types to
diff --git a/plone/app/contenttypes/browser/link_redirect_view.py b/plone/app/contenttypes/browser/link_redirect_view.py
index 0bd5ae8..adb74a1 100644
--- a/plone/app/contenttypes/browser/link_redirect_view.py
+++ b/plone/app/contenttypes/browser/link_redirect_view.py
@@ -5,14 +5,38 @@
 from plone.app.contenttypes.utils import replace_link_variables_by_paths
 
 
+# links starting with these URL scheme should not be redirected to
+NON_REDIRECTABLE_URL_SCHEMES = [
+    'mailto:',
+    'tel:',
+    'callto:',
+    'webdav:',
+    'caldav:'
+]
+
+# links starting with these URL scheme should not be resolved to paths
+NON_RESOLVABLE_URL_SCHEMES = NON_REDIRECTABLE_URL_SCHEMES + [
+    'file:',
+    'ftp:',
+]
+
+
 class LinkRedirectView(BrowserView):
 
     index = ViewPageTemplateFile('templates/link.pt')
 
+    def _url_uses_scheme(self, schemes, url=None):
+        url = url or self.context.remoteUrl
+        for scheme in schemes:
+            if url.startswith(scheme):
+                return True
+        return False
+
     def __call__(self):
         """Redirect to the Link target URL, if and only if:
          - redirect_links property is enabled in
            portal_properties/site_properties
+         - the link is of a redirectable type (no mailto:, etc)
          - AND current user doesn't have permission to edit the Link"""
         context = self.context
         ptool = getToolByName(context, 'portal_properties')
@@ -24,6 +48,8 @@ def __call__(self):
             False
         )
         can_edit = mtool.checkPermission('Modify portal content', context)
+        redirect_links = redirect_links\
+            and not self._url_uses_scheme(NON_REDIRECTABLE_URL_SCHEMES)
 
         if redirect_links and not can_edit:
             return self.request.RESPONSE.redirect(self.absolute_target_url())
@@ -33,6 +59,11 @@ def __call__(self):
     def absolute_target_url(self):
         """Compute the absolute target URL."""
         url = self.context.remoteUrl
+
+        if self._url_uses_scheme(NON_RESOLVABLE_URL_SCHEMES):
+            # For non http/https url schemes, there is no path to resolve.
+            return url
+
         if url.startswith('.'):
             # we just need to adapt ../relative/links, /absolute/ones work
             # anyway -> this requires relative links to start with ./ or
@@ -44,13 +75,6 @@ def absolute_target_url(self):
                 context_state.canonical_object_url(),
                 url
             ])
-        elif url.startswith('mailto:')\
-                or url.startswith('tel:')\
-                or url.startswith('callto:')\
-                or url.startswith('file:')\
-                or url.startswith('#'):
-            # Do nothing for html/html5 links
-            pass
         else:
             url = replace_link_variables_by_paths(self.context, url)
             if not (url.startswith('http://') or url.startswith('https://')):
diff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py
index 144069c..729b414 100644
--- a/plone/app/contenttypes/tests/test_link.py
+++ b/plone/app/contenttypes/tests/test_link.py
@@ -1,31 +1,23 @@
 # -*- coding: utf-8 -*-
-import unittest2 as unittest
-
 from Products.CMFCore.utils import getToolByName
-
-from zope.interface import alsoProvides
-from zope.component import createObject
-from zope.component import queryUtility
-from zope.component import getMultiAdapter
-from zope.event import notify
-from zope.traversing.interfaces import BeforeTraverseEvent
-
-from plone.dexterity.interfaces import IDexterityFTI
-
+from datetime import datetime
+from plone.app.contenttypes.interfaces import ILink
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
-from plone.app.testing import logout
-from plone.testing.z2 import Browser
-
-from plone.app.contenttypes.interfaces import ILink
-
-from plone.app.contenttypes.testing import (
-    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,
-    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING
-)
-
 from plone.app.testing import TEST_USER_ID, setRoles
+from plone.app.testing import logout
 from plone.app.z3cform.interfaces import IPloneFormLayer
+from plone.dexterity.interfaces import IDexterityFTI
+from plone.testing.z2 import Browser
+from zope.component import createObject
+from zope.component import getMultiAdapter
+from zope.component import queryUtility
+from zope.event import notify
+from zope.interface import alsoProvides
+from zope.traversing.interfaces import BeforeTraverseEvent
+import unittest2 as unittest
 
 
 class LinkIntegrationTest(unittest.TestCase):
@@ -165,26 +157,65 @@ def test_link_redirect_view_path_with_variable(self):
     def test_mailto_type(self):
         self.link.remoteUrl = 'mailto:stress@test.us'
         view = self._get_link_redirect_view(self.link)
+
+        logout()
         rendered = view()
         self.assertTrue('href="mailto:stress@test.us"' in rendered)
+        self._assert_response_OK()
 
     def test_tel_type(self):
         self.link.remoteUrl = 'tel:123'
         view = self._get_link_redirect_view(self.link)
+
+        logout()
         rendered = view()
         self.assertTrue('href="tel:123"' in rendered)
+        self._assert_response_OK()
 
     def test_callto_type(self):
         self.link.remoteUrl = 'callto:123'
         view = self._get_link_redirect_view(self.link)
+
+        logout()
         rendered = view()
         self.assertTrue('href="callto:123"' in rendered)
+        self._assert_response_OK()
 
-    def test_file_type(self):
-        self.link.remoteUrl = 'file:///tmp'
+    def test_webdav_type(self):
+        self.link.remoteUrl = 'webdav://web.site/resource'
         view = self._get_link_redirect_view(self.link)
+
+        logout()
+        rendered = view()
+        self.assertTrue('href="webdav://web.site/resource"' in rendered)
+        self._assert_response_OK()
+
+    def test_caldav_type(self):
+        self.link.remoteUrl = 'caldav://calendar.site/resource'
+        view = self._get_link_redirect_view(self.link)
+
+        logout()
         rendered = view()
-        self.assertTrue('href="file:///tmp"' in rendered)
+        self.assertTrue('href="caldav://calendar.site/resource"' in rendered)
+        self._assert_response_OK()
+
+    def test_file_type(self):
+        self.link.remoteUrl = 'file:///some/file/on/your/system'
+        view = self._get_link_redirect_view(self.link)
+
+        logout()
+        self.assertTrue(view())
+        self._assert_redirect(self.link.remoteUrl)
+
+    def test_ftp_type(self):
+        self.link.remoteUrl = 'ftp://thereIsNoSuchDomain.isThere{0}'.format(
+            datetime.now().isoformat()
+        )
+        view = self._get_link_redirect_view(self.link)
+
+        logout()
+        self.assertTrue(view())
+        self._assert_redirect(self.link.remoteUrl)
 
     def _publish(self, obj):
         portal_workflow = getToolByName(self.portal, "portal_workflow")
@@ -194,6 +225,9 @@ def _assert_redirect(self, url):
         self.assertEqual(self.response.status, 302)
         self.assertEqual(self.response.headers['location'], url)
 
+    def _assert_response_OK(self):
+        self.assertEqual(self.response.status, 200)
+
     def _get_link_redirect_view(self, obj):
         return getMultiAdapter((obj, self.request), name='link_redirect_view')
 


