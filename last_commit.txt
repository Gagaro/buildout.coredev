Repository: plone.dexterity


Branch: refs/heads/master
Date: 2015-09-19T20:18:48-07:00
Author: Alec Mitchell (alecpm) <alecpm@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/c096200c8fba7fed585696d8ba5fc5aece0aa382

Don't check type constraints in AddForm.update() if request provides IDeferSecurityChecks.  Refs
 #40.

Files changed:
M plone/dexterity/browser/add.py
M plone/dexterity/tests/test_views.py

diff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py
index c5d4fe6..5909fa5 100644
--- a/plone/dexterity/browser/add.py
+++ b/plone/dexterity/browser/add.py
@@ -11,6 +11,7 @@
 from plone.dexterity.utils import addContentToContainer
 from plone.dexterity.utils import getAdditionalSchemata
 from plone.z3cform import layout
+from plone.z3cform.interfaces import IDeferSecurityCheck
 from z3c.form import button
 from z3c.form import form
 from zope.component import createObject
@@ -118,12 +119,14 @@ def handleCancel(self, action):
         notify(AddCancelledEvent(self.context))
 
     def update(self):
-        allowed_ids = [fti.getId() for fti in self.context.allowedContentTypes()]
-        if self.portal_type not in allowed_ids:
-            raise ValueError(
-                'Subobject type disallowed by IConstrainTypes adapter: %s'
-                % self.portal_type
-            )
+        if not IDeferSecurityCheck.providedBy(self.request):
+            allowed_ids = [fti.getId() for fti in
+                           self.context.allowedContentTypes()]
+            if self.portal_type not in allowed_ids:
+                raise ValueError(
+                    'Subobject type disallowed by IConstrainTypes adapter: %s'
+                    % self.portal_type
+                )
         super(DefaultAddForm, self).update()
         # fire the edit begun only if no action was executed
         if len(self.actions.executedActions) == 0:
diff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py
index ce100e6..cd78d8c 100644
--- a/plone/dexterity/tests/test_views.py
+++ b/plone/dexterity/tests/test_views.py
@@ -19,6 +19,7 @@
 from plone.dexterity.interfaces import IEditFinishedEvent
 from plone.dexterity.schema import SCHEMA_CACHE
 from plone.mocktestcase import MockTestCase
+from plone.z3cform.interfaces import IDeferSecurityCheck
 from z3c.form.action import Actions
 from z3c.form.field import FieldWidgets
 from z3c.form.interfaces import IActions
@@ -390,6 +391,74 @@ def test_fires_add_begun_event(self):
         view.portal_type = fti_mock.getId()
         view.update()
 
+
+    def test_update_checks_allowed_types(self):
+
+        # Context and request
+
+        context_mock = self.create_dummy(
+            portal_type=u'testtype',
+            allowedContentTypes=lambda: [])
+        request_mock = TestRequest()
+
+        # FTI
+
+        fti_mock = self.mocker.proxy(DexterityFTI(u"testtype"))
+        self.expect(fti_mock.lookupSchema()).result(ISchema)
+        self.mocker.count(0, 100)
+        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")
+
+        self.mock_adapter(
+            FieldWidgets,
+            IWidgets,
+            (Interface, Interface, Interface)
+        )
+
+        self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))
+
+        # Form
+        self.mocker.replay()
+
+        view = DefaultAddForm(context_mock, request_mock)
+        view.portal_type = fti_mock.getId()
+        self.assertRaises(ValueError, view.update)
+
+    def test_update_ignores_type_check_if_security_check_deferred(self):
+
+        # Context and request
+
+        context_mock = self.create_dummy(
+            portal_type=u'testtype',
+            allowedContentTypes=lambda: [])
+        request_mock = TestRequest()
+        alsoProvides(request_mock, IDeferSecurityCheck)
+
+        # FTI
+
+        fti_mock = self.mocker.proxy(DexterityFTI(u"testtype"))
+        self.expect(fti_mock.lookupSchema()).result(ISchema)
+        self.mocker.count(0, 100)
+        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")
+
+        self.mock_adapter(
+            FieldWidgets,
+            IWidgets,
+            (Interface, Interface, Interface)
+        )
+
+        self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))
+
+        # Form
+        self.mocker.replay()
+
+        view = DefaultAddForm(context_mock, request_mock)
+        view.portal_type = fti_mock.getId()
+        try:
+            view.update()
+        except ValueError:
+            self.fail("Update raised Unauthorized with security checks "
+                      "deferred")
+
     def test_fires_add_cancelled_event(self):
 
         # Context and request


