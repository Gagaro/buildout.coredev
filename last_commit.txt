Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2015-07-24T14:14:07+02:00
Author: Cédric Messiant (cedricmessiant) <cedricmessiant@ecreall.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/efaab625efba421079b625ece043f40872e67dd2

Fix: Provide diff for dexterity behaviors' fields

Files changed:
M CHANGES.txt
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 1b0aa33..6dd1085 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,9 @@ Changelog
 3.0.2 (unreleased)
 ------------------
 
+- Provide diff for dexterity behaviors' fields.
+  [cedricmessiant]
+
 - Fix bug with encoding in TextDiff.
   [cedricmessiant]
 
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 2730433..1362499 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -5,6 +5,7 @@
 
 from plone.app.textfield import RichText
 from plone.autoform.base import AutoFields
+from plone.dexterity.browser.edit import DefaultEditForm
 
 from Products.CMFDiffTool.TextDiff import AsTextDiff
 from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
@@ -88,27 +89,16 @@ def _diff(self, obj1, obj2):
 
         Return: a sequence of `IDifference` objects.
         """
-        (default_schema, additional_schemata) = get_schemas(obj1)
-        diffs = self._diff_schema(obj1, obj2, default_schema, 'default')
 
-        for schema in additional_schemata:
-            diffs.extend(self._diff_schema(obj1, obj2, schema, 'metadata'))
+        diffs = []
+        for field, field_name in self._compute_fields_order(obj1):
+            if field_name not in EXCLUDED_FIELDS:
+                schema_name = '.' in field_name and \
+                    field_name.split('.')[0] or 'default'
+                diffs.append(self._diff_field(obj1, obj2, field, schema_name))
 
         return diffs
 
-    def _diff_schema(self, obj1, obj2, schema, schema_name):
-        """
-        Compute the differences between 2 objects in respect to the given
-        schema interface.
-
-        Return: a sequence of `IDifference` objects.
-        """
-        return [
-            self._diff_field(obj1, obj2, schema[name], schema_name)
-            for name in self._compute_fields_order(schema)
-            if name not in EXCLUDED_FIELDS
-        ]
-
     def _diff_field(self, obj1, obj2, field, schema_name):
         """
         Compute the differences between 2 objects in respect to the given
@@ -166,18 +156,13 @@ def _compute_diff_type(self, field, relation):
 
         return None
 
-    def _compute_fields_order(self, schema):
+    def _compute_fields_order(self, obj):
         """
-        Given a `schema` interface compute the field ordering the way
-        `plone.autoform` does, i.e taking into account `plone.directives.form`
-        ordering directives.
+        Given a content, compute the field ordering the way the edit form does.
 
-        Return: a list of field names in order.
+        Return: a list of tuples (field, field name) in order.
         """
-        auto_fields = AutoFields()
-        auto_fields.context = self.obj1 # See issue #330
-        auto_fields.schema = schema
-        auto_fields.request = getRequest()
-        auto_fields.mode = INPUT_MODE
-        auto_fields.updateFieldsFromSchemata()
-        return auto_fields.fields
+        form = DefaultEditForm(obj, getRequest())
+        form.portal_type = obj.portal_type
+        form.updateFields()
+        return [(form.fields[name].field, name) for name in form.fields]
diff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py
index 84ed01b..b4949f4 100644
--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py
+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py
@@ -85,3 +85,23 @@ def test_should_provide_inline_diff_for_file_list_field(self):
                 inline_diff = d.inline_diff()
                 self.assertTrue(inline_diff)
                 self.assertTrue(obj2.files[0].filename in inline_diff)
+
+    def test_should_provide_diff_for_behaviors_fields(self):
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj1',
+            date=date(2001, 1, 1),
+        )
+        obj1 = self.portal['obj1']
+
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj2',
+            date=date(2001, 1, 2),
+        )
+        obj2 = self.portal['obj2']
+
+        diffs = DexterityCompoundDiff(obj1, obj2, 'any')
+        fields = [d.field for d in diffs]
+        self.assertIn('title', fields)
+        self.assertIn('description', fields)


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2015-07-24T14:14:07+02:00
Author: Cédric Messiant (cedricmessiant) <cedricmessiant@ecreall.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/a3e627ec1c8a8b09ddb5d7a00ad60e421bd43590

Fix EXCLUDED_FIELDS (we now use field 'full' name)

Files changed:
M Products/CMFDiffTool/dexteritydiff.py

diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 1362499..b65fe63 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -57,7 +57,7 @@
 """
 
 # TODO: provide an easier way to exclude fields.
-EXCLUDED_FIELDS = ('modification_date', 'changeNote')
+EXCLUDED_FIELDS = ('modification_date', 'IVersionable.changeNote')
 """Names of fields not to compare."""
 
 


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2015-07-30T12:32:29+02:00
Author: Cédric Messiant (cedricmessiant) <cedricmessiant@ecreall.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/af30e6942239640787df7d693bff1b224fc04912

Fix unit tests due to diff for behavior's fields

Files changed:
M Products/CMFDiffTool/tests/testChangeSet.py

diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 8e42165..2e8ef5e 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -35,7 +35,6 @@ def setupTestObjects(self):
         self.folder.invokeFactory('Document', 'doc1', title='My Title')
         self.folder.manage_pasteObjects(
                                      self.folder.manage_copyObjects(['doc1']))
-        self.p_diff.setDiffField('Document', 'Title', 'Field Diff')
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
@@ -44,46 +43,46 @@ def setupTestFolders(self):
         self.folder.folder1.invokeFactory('Document', 'doc3', title='My Title3')
         self.folder.manage_pasteObjects(
                                   self.folder.manage_copyObjects(['folder1']))
-        self.p_diff.setDiffField('Document', 'Title', 'Field Diff')
-        self.p_diff.setDiffField('Folder', 'title', 'Field Diff')
 
     def testChangeSetUnchanged(self):
         self.setupTestObjects()
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
-        self.assertTrue(diffs[1].same)
+        self.assertEqual(len(diffs), 3)
+        self.assertTrue(diffs[0].same)
 
     def testChangeSetChanged(self):
         self.setupTestObjects()
         self.folder.copy_of_doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
-        self.failIf(diffs[1].same)
-        self.assertEqual(diffs[1].ndiff(),
+        self.assertEqual(len(diffs), 3)
+        self.failIf(diffs[0].same)
+        self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
 
     def testChangeSetFolderUnchanged(self):
         self.setupTestFolders()
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
+            self.assertEqual(len(sub_diffs), 3)
             self.assertTrue(sub_cs[0].same)
+            self.assertTrue(sub_cs[1].same)
+            self.assertTrue(sub_cs[2].same)
 
     def testChangeSetFolderChanged(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.failIf(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -95,16 +94,17 @@ def testChangeSetFolderChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocChanged(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
+        self.assertTrue(diffs[1].same)
         self.failIf(self.cs._added)
         self.failIf(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
@@ -112,22 +112,23 @@ def testChangeSetFolderDocChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
+            self.assertEqual(len(sub_diffs), 3)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
-                self.failIf(sub_diffs[1].same)
-                self.assertEqual(sub_diffs[1].ndiff(),
+                self.failIf(sub_diffs[0].same)
+                self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title1%s+ My New Title' % linesep)
             else:
-                self.assertTrue(sub_diffs[1].same)
+                self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocRemoved(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.manage_delObjects('doc1')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
+        self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
         # We only have two potentially changed objects
         self.assertEqual(len(sub_cs), 2)
@@ -135,8 +136,8 @@ def testChangeSetFolderDocRemoved(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
         self.failIf(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
 
@@ -146,16 +147,17 @@ def testChangeSetFolderDocAdded(self):
                                                          title='My Doc Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
+        self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         # The sub diffs should show no changes
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
         self.failIf(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
 
@@ -171,7 +173,7 @@ def testChangeSetFolderReordered(self):
             return
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
         self.failIf(self.cs._added)
         self.failIf(self.cs._removed)
@@ -181,8 +183,8 @@ def testChangeSetFolderReordered(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
         # XXX we need an explicit way of noting reorders
 
     def testChangeSetFolderComplex(self):
@@ -208,7 +210,7 @@ def testChangeSetFolderComplex(self):
 
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.failIf(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -221,10 +223,10 @@ def testChangeSetFolderComplex(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
+            self.assertEqual(len(sub_diffs), 3)
             if sub_cs[i].getId() == 'doc3':
-                self.failIf(sub_diffs[1].same)
-                self.assertEqual(sub_diffs[1].ndiff(),
+                self.failIf(sub_diffs[0].same)
+                self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title3%s+ My New Title' % linesep)
             else:
                 self.assertTrue(sub_diffs[1].same)


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2015-07-30T14:32:29+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/8723f986617ebc35e594a849baef8b09e7599d3c

Merge pull request #8 from plone/fix_diff_for_dexterity_behaviors-5.0

Fix diff for dexterity behaviors (Plone 5.0)

Files changed:
M CHANGES.txt
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 1b0aa33..6dd1085 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,9 @@ Changelog
 3.0.2 (unreleased)
 ------------------
 
+- Provide diff for dexterity behaviors' fields.
+  [cedricmessiant]
+
 - Fix bug with encoding in TextDiff.
   [cedricmessiant]
 
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 2730433..b65fe63 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -5,6 +5,7 @@
 
 from plone.app.textfield import RichText
 from plone.autoform.base import AutoFields
+from plone.dexterity.browser.edit import DefaultEditForm
 
 from Products.CMFDiffTool.TextDiff import AsTextDiff
 from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
@@ -56,7 +57,7 @@
 """
 
 # TODO: provide an easier way to exclude fields.
-EXCLUDED_FIELDS = ('modification_date', 'changeNote')
+EXCLUDED_FIELDS = ('modification_date', 'IVersionable.changeNote')
 """Names of fields not to compare."""
 
 
@@ -88,27 +89,16 @@ def _diff(self, obj1, obj2):
 
         Return: a sequence of `IDifference` objects.
         """
-        (default_schema, additional_schemata) = get_schemas(obj1)
-        diffs = self._diff_schema(obj1, obj2, default_schema, 'default')
 
-        for schema in additional_schemata:
-            diffs.extend(self._diff_schema(obj1, obj2, schema, 'metadata'))
+        diffs = []
+        for field, field_name in self._compute_fields_order(obj1):
+            if field_name not in EXCLUDED_FIELDS:
+                schema_name = '.' in field_name and \
+                    field_name.split('.')[0] or 'default'
+                diffs.append(self._diff_field(obj1, obj2, field, schema_name))
 
         return diffs
 
-    def _diff_schema(self, obj1, obj2, schema, schema_name):
-        """
-        Compute the differences between 2 objects in respect to the given
-        schema interface.
-
-        Return: a sequence of `IDifference` objects.
-        """
-        return [
-            self._diff_field(obj1, obj2, schema[name], schema_name)
-            for name in self._compute_fields_order(schema)
-            if name not in EXCLUDED_FIELDS
-        ]
-
     def _diff_field(self, obj1, obj2, field, schema_name):
         """
         Compute the differences between 2 objects in respect to the given
@@ -166,18 +156,13 @@ def _compute_diff_type(self, field, relation):
 
         return None
 
-    def _compute_fields_order(self, schema):
+    def _compute_fields_order(self, obj):
         """
-        Given a `schema` interface compute the field ordering the way
-        `plone.autoform` does, i.e taking into account `plone.directives.form`
-        ordering directives.
+        Given a content, compute the field ordering the way the edit form does.
 
-        Return: a list of field names in order.
+        Return: a list of tuples (field, field name) in order.
         """
-        auto_fields = AutoFields()
-        auto_fields.context = self.obj1 # See issue #330
-        auto_fields.schema = schema
-        auto_fields.request = getRequest()
-        auto_fields.mode = INPUT_MODE
-        auto_fields.updateFieldsFromSchemata()
-        return auto_fields.fields
+        form = DefaultEditForm(obj, getRequest())
+        form.portal_type = obj.portal_type
+        form.updateFields()
+        return [(form.fields[name].field, name) for name in form.fields]
diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 8e42165..2e8ef5e 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -35,7 +35,6 @@ def setupTestObjects(self):
         self.folder.invokeFactory('Document', 'doc1', title='My Title')
         self.folder.manage_pasteObjects(
                                      self.folder.manage_copyObjects(['doc1']))
-        self.p_diff.setDiffField('Document', 'Title', 'Field Diff')
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
@@ -44,46 +43,46 @@ def setupTestFolders(self):
         self.folder.folder1.invokeFactory('Document', 'doc3', title='My Title3')
         self.folder.manage_pasteObjects(
                                   self.folder.manage_copyObjects(['folder1']))
-        self.p_diff.setDiffField('Document', 'Title', 'Field Diff')
-        self.p_diff.setDiffField('Folder', 'title', 'Field Diff')
 
     def testChangeSetUnchanged(self):
         self.setupTestObjects()
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
-        self.assertTrue(diffs[1].same)
+        self.assertEqual(len(diffs), 3)
+        self.assertTrue(diffs[0].same)
 
     def testChangeSetChanged(self):
         self.setupTestObjects()
         self.folder.copy_of_doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
-        self.failIf(diffs[1].same)
-        self.assertEqual(diffs[1].ndiff(),
+        self.assertEqual(len(diffs), 3)
+        self.failIf(diffs[0].same)
+        self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
 
     def testChangeSetFolderUnchanged(self):
         self.setupTestFolders()
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
+            self.assertEqual(len(sub_diffs), 3)
             self.assertTrue(sub_cs[0].same)
+            self.assertTrue(sub_cs[1].same)
+            self.assertTrue(sub_cs[2].same)
 
     def testChangeSetFolderChanged(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.failIf(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -95,16 +94,17 @@ def testChangeSetFolderChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocChanged(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
+        self.assertTrue(diffs[1].same)
         self.failIf(self.cs._added)
         self.failIf(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
@@ -112,22 +112,23 @@ def testChangeSetFolderDocChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
+            self.assertEqual(len(sub_diffs), 3)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
-                self.failIf(sub_diffs[1].same)
-                self.assertEqual(sub_diffs[1].ndiff(),
+                self.failIf(sub_diffs[0].same)
+                self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title1%s+ My New Title' % linesep)
             else:
-                self.assertTrue(sub_diffs[1].same)
+                self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocRemoved(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.manage_delObjects('doc1')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
+        self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
         # We only have two potentially changed objects
         self.assertEqual(len(sub_cs), 2)
@@ -135,8 +136,8 @@ def testChangeSetFolderDocRemoved(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
         self.failIf(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
 
@@ -146,16 +147,17 @@ def testChangeSetFolderDocAdded(self):
                                                          title='My Doc Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
+        self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         # The sub diffs should show no changes
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
         self.failIf(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
 
@@ -171,7 +173,7 @@ def testChangeSetFolderReordered(self):
             return
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
         self.failIf(self.cs._added)
         self.failIf(self.cs._removed)
@@ -181,8 +183,8 @@ def testChangeSetFolderReordered(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
-            self.assertTrue(sub_diffs[1].same)
+            self.assertEqual(len(sub_diffs), 3)
+            self.assertTrue(sub_diffs[0].same)
         # XXX we need an explicit way of noting reorders
 
     def testChangeSetFolderComplex(self):
@@ -208,7 +210,7 @@ def testChangeSetFolderComplex(self):
 
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 1)
+        self.assertEqual(len(diffs), 2)
         self.failIf(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -221,10 +223,10 @@ def testChangeSetFolderComplex(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 2)
+            self.assertEqual(len(sub_diffs), 3)
             if sub_cs[i].getId() == 'doc3':
-                self.failIf(sub_diffs[1].same)
-                self.assertEqual(sub_diffs[1].ndiff(),
+                self.failIf(sub_diffs[0].same)
+                self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title3%s+ My New Title' % linesep)
             else:
                 self.assertTrue(sub_diffs[1].same)
diff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py
index 84ed01b..b4949f4 100644
--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py
+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py
@@ -85,3 +85,23 @@ def test_should_provide_inline_diff_for_file_list_field(self):
                 inline_diff = d.inline_diff()
                 self.assertTrue(inline_diff)
                 self.assertTrue(obj2.files[0].filename in inline_diff)
+
+    def test_should_provide_diff_for_behaviors_fields(self):
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj1',
+            date=date(2001, 1, 1),
+        )
+        obj1 = self.portal['obj1']
+
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj2',
+            date=date(2001, 1, 2),
+        )
+        obj2 = self.portal['obj2']
+
+        diffs = DexterityCompoundDiff(obj1, obj2, 'any')
+        fields = [d.field for d in diffs]
+        self.assertIn('title', fields)
+        self.assertIn('description', fields)


