Repository: plone.api


Branch: refs/heads/master
Date: 2015-09-12T01:09:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/1d29da3b2dea65d154c6773754d57a52b6c438fd

Fixed api.content.find with combination of depth and path.

Path is no longer ignored then.

Files changed:
M docs/CHANGES.rst
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index a1700ef..f0eee27 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,7 +4,9 @@ Changelog
 1.4.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fixed `api.content.find` with combination of depth and path.  Path
+  is no longer ignored then.
+  [maurits]
 
 
 1.4.5 (2015-09-09)
diff --git a/src/plone/api/content.py b/src/plone/api/content.py
index 193395c..243fe8b 100644
--- a/src/plone/api/content.py
+++ b/src/plone/api/content.py
@@ -572,10 +572,12 @@ def find(context=None, depth=None, **kwargs):
     Specifing the search depth is supported using the `depth` argument.
     >>> find(depth=1)
 
-    Using `depth` needs a context for it's path. If no context is passed, the
-    portal root is used.
+    Using `depth` needs a context for it's path. If no context and no
+    path is passed, the portal root is used.
     >>> find(context=portal, depth=1, portal_type='Document')
     - or -
+    >>> find(depth=1, path='/plone/folder', portal_type='Document')
+    - or -
     >>> find(depth=1, portal_type='Document')
 
     The path can be queried directly, too:
@@ -595,14 +597,19 @@ def find(context=None, depth=None, **kwargs):
     query.update(**kwargs)
 
     # Passing a context or depth overrides the existing path query
-    if context or depth:
+    # Save the original path to maybe restore it.
+    orig_path = query.get('path')
+    if context or depth is not None:
         query['path'] = {}
 
     # Limit search depth
     if depth is not None:
         # If we don't have a context, we'll assume the portal root.
-        if context is None:
+        if context is None and not orig_path:
             context = portal.get()
+        else:
+            # Restore the original path
+            query['path']['query'] = orig_path
         query['path']['depth'] = depth
 
     if context is not None:
diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 37d89fd..05437eb 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -754,6 +754,20 @@ def test_find_depth(self):
             context=self.portal.about, depth=0, portal_type='Document')
         self.assertEqual(len(documents), 0)
 
+        # Limit search depth with explicit path
+        documents = api.content.find(
+            path='/'.join(self.portal.about.getPhysicalPath()),
+            depth=1, portal_type='Document')
+        self.assertEqual(len(documents), 2)
+        documents = api.content.find(
+            path='/'.join(self.portal.about.getPhysicalPath()),
+            depth=0, portal_type='Document')
+        self.assertEqual(len(documents), 0)
+        documents = api.content.find(
+            path='/'.join(self.portal.events.getPhysicalPath()),
+            depth=1, portal_type='Document')
+        self.assertEqual(len(documents), 0)
+
     def test_find_interface(self):
         # Find documents by interface or it's identifier
         identifier = IContentish.__identifier__


Repository: plone.api


Branch: refs/heads/master
Date: 2015-09-12T01:40:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/0d45a5b12bd227d484064133362bdf9f3edde200

Do not crash on content.find with depth and path dict.

This is an awkward spelling, but if a call with a path dict works and
adding a depth to that calls makes it fail, then this is not nice.

Files changed:
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

diff --git a/src/plone/api/content.py b/src/plone/api/content.py
index 243fe8b..43ea912 100644
--- a/src/plone/api/content.py
+++ b/src/plone/api/content.py
@@ -596,11 +596,17 @@ def find(context=None, depth=None, **kwargs):
     query = {}
     query.update(**kwargs)
 
-    # Passing a context or depth overrides the existing path query
-    # Save the original path to maybe restore it.
+    # Save the original path to maybe restore it later.
     orig_path = query.get('path')
+    if isinstance(orig_path, dict):
+        orig_path = orig_path.get('query')
+
+    # Passing a context or depth overrides the existing path query,
+    # for now.
     if context or depth is not None:
-        query['path'] = {}
+        # Make the path a dictionary, unless it already is.
+        if not isinstance(orig_path, dict):
+            query['path'] = {}
 
     # Limit search depth
     if depth is not None:
diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 05437eb..211daba 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -797,6 +797,24 @@ def test_find_dict(self):
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 0)
 
+        # This is a bit awkward, but it is nice if this does not crash.
+        query = {
+            'depth': 2,
+            'portal_type': 'Document',
+            'path': {'query': path}
+            }
+        documents = api.content.find(**query)
+        self.assertEqual(len(documents), 2)
+
+        path = '/'.join(self.portal.events.getPhysicalPath())
+        query = {
+            'depth': 2,
+            'portal_type': 'Document',
+            'path': {'query': path}
+            }
+        documents = api.content.find(**query)
+        self.assertEqual(len(documents), 0)
+
     def test_get_state(self):
         """Test retrieving the workflow state of a content item."""
 


Repository: plone.api


Branch: refs/heads/master
Date: 2015-09-14T08:02:13+01:00
Author: Adam Forsythe-Cheasley (adamcheasley) <adam@netsight.co.uk>
Commit: https://github.com/plone/plone.api/commit/d7f585654fa0a54c26b5d5900cd2b4cdfffd45fc

Merge pull request #276 from plone/maurits-fix-content-find-path-depth

Fix content.find with both path and depth

Files changed:
M docs/CHANGES.rst
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index a1700ef..f0eee27 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -4,7 +4,9 @@ Changelog
 1.4.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fixed `api.content.find` with combination of depth and path.  Path
+  is no longer ignored then.
+  [maurits]
 
 
 1.4.5 (2015-09-09)
diff --git a/src/plone/api/content.py b/src/plone/api/content.py
index 193395c..43ea912 100644
--- a/src/plone/api/content.py
+++ b/src/plone/api/content.py
@@ -572,10 +572,12 @@ def find(context=None, depth=None, **kwargs):
     Specifing the search depth is supported using the `depth` argument.
     >>> find(depth=1)
 
-    Using `depth` needs a context for it's path. If no context is passed, the
-    portal root is used.
+    Using `depth` needs a context for it's path. If no context and no
+    path is passed, the portal root is used.
     >>> find(context=portal, depth=1, portal_type='Document')
     - or -
+    >>> find(depth=1, path='/plone/folder', portal_type='Document')
+    - or -
     >>> find(depth=1, portal_type='Document')
 
     The path can be queried directly, too:
@@ -594,15 +596,26 @@ def find(context=None, depth=None, **kwargs):
     query = {}
     query.update(**kwargs)
 
-    # Passing a context or depth overrides the existing path query
-    if context or depth:
-        query['path'] = {}
+    # Save the original path to maybe restore it later.
+    orig_path = query.get('path')
+    if isinstance(orig_path, dict):
+        orig_path = orig_path.get('query')
+
+    # Passing a context or depth overrides the existing path query,
+    # for now.
+    if context or depth is not None:
+        # Make the path a dictionary, unless it already is.
+        if not isinstance(orig_path, dict):
+            query['path'] = {}
 
     # Limit search depth
     if depth is not None:
         # If we don't have a context, we'll assume the portal root.
-        if context is None:
+        if context is None and not orig_path:
             context = portal.get()
+        else:
+            # Restore the original path
+            query['path']['query'] = orig_path
         query['path']['depth'] = depth
 
     if context is not None:
diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 37d89fd..211daba 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -754,6 +754,20 @@ def test_find_depth(self):
             context=self.portal.about, depth=0, portal_type='Document')
         self.assertEqual(len(documents), 0)
 
+        # Limit search depth with explicit path
+        documents = api.content.find(
+            path='/'.join(self.portal.about.getPhysicalPath()),
+            depth=1, portal_type='Document')
+        self.assertEqual(len(documents), 2)
+        documents = api.content.find(
+            path='/'.join(self.portal.about.getPhysicalPath()),
+            depth=0, portal_type='Document')
+        self.assertEqual(len(documents), 0)
+        documents = api.content.find(
+            path='/'.join(self.portal.events.getPhysicalPath()),
+            depth=1, portal_type='Document')
+        self.assertEqual(len(documents), 0)
+
     def test_find_interface(self):
         # Find documents by interface or it's identifier
         identifier = IContentish.__identifier__
@@ -783,6 +797,24 @@ def test_find_dict(self):
         documents = api.content.find(**query)
         self.assertEqual(len(documents), 0)
 
+        # This is a bit awkward, but it is nice if this does not crash.
+        query = {
+            'depth': 2,
+            'portal_type': 'Document',
+            'path': {'query': path}
+            }
+        documents = api.content.find(**query)
+        self.assertEqual(len(documents), 2)
+
+        path = '/'.join(self.portal.events.getPhysicalPath())
+        query = {
+            'depth': 2,
+            'portal_type': 'Document',
+            'path': {'query': path}
+            }
+        documents = api.content.find(**query)
+        self.assertEqual(len(documents), 0)
+
     def test_get_state(self):
         """Test retrieving the workflow state of a content item."""
 


