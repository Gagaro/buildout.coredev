Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2015-07-26T00:09:48-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.iterate/commit/21eadf8b21148220e6d7238f2fca5115fdaa437a

Check if object does not have iterate policy. This fixes
  iterate causing toolbar errors on portal root.

Files changed:
M CHANGES.rst
M plone/app/iterate/browser/control.py
M plone/app/iterate/tests/test_iterate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7aaf6f8..5ed5f1f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 3.1.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Handle checking if object does not have iterate policy
+  [vangheem]
 
 
 3.1.0 (2015-07-18)
diff --git a/plone/app/iterate/browser/control.py b/plone/app/iterate/browser/control.py
index 2d5a391..7e47b46 100644
--- a/plone/app/iterate/browser/control.py
+++ b/plone/app/iterate/browser/control.py
@@ -52,7 +52,10 @@ def checkin_allowed(self):
         if not IWorkingCopy.providedBy(context):
             return False
 
-        policy = ICheckinCheckoutPolicy(context)
+        policy = ICheckinCheckoutPolicy(context, None)
+        if policy is None:
+            return False
+
         original = policy.getBaseline()
         if original is None:
             return False
@@ -74,7 +77,9 @@ def checkout_allowed(self):
         if not archiver.isVersionable():
             return False
 
-        policy = ICheckinCheckoutPolicy(context)
+        policy = ICheckinCheckoutPolicy(context, None)
+        if policy is None:
+            return False
 
         if policy.getWorkingCopy() is not None:
             return False
@@ -90,6 +95,8 @@ def cancel_allowed(self):
         """Check to see if the user can cancel the checkout on the
         given working copy
         """
-        policy = ICheckinCheckoutPolicy(self.context)
+        policy = ICheckinCheckoutPolicy(self.context, None)
+        if policy is None:
+            return False
         original = policy.getBaseline()
         return original is not None
diff --git a/plone/app/iterate/tests/test_iterate.py b/plone/app/iterate/tests/test_iterate.py
index e30534e..0960485 100644
--- a/plone/app/iterate/tests/test_iterate.py
+++ b/plone/app/iterate/tests/test_iterate.py
@@ -24,19 +24,17 @@
 """
 
 from AccessControl import getSecurityManager
-
 from Products.CMFCore.utils import getToolByName
-
+from plone.app.iterate.browser.control import Control
 from plone.app.iterate.interfaces import ICheckinCheckoutPolicy
 from plone.app.iterate.testing import PLONEAPPITERATE_INTEGRATION_TESTING
-
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
-
 import unittest2 as unittest
 
+
 class TestIterations(unittest.TestCase):
 
     layer = PLONEAPPITERATE_INTEGRATION_TESTING
@@ -277,3 +275,15 @@ def test_checkinObjectLinkedInParentsRichTextField(self):
 
         # everything went right and the working copy is checked in
         self.assertEqual(subobject_uid, wc.UID())
+
+    def test_control_checkin_allowed_with_no_policy(self):
+        control = Control(self.portal, self.layer['request'])
+        self.assertFalse(control.checkin_allowed())
+
+    def test_control_checkout_allowed_with_no_policy(self):
+        control = Control(self.portal, self.layer['request'])
+        self.assertFalse(control.checkout_allowed())
+
+    def test_control_cancel_allowed_with_no_policy(self):
+        control = Control(self.portal, self.layer['request'])
+        self.assertFalse(control.cancel_allowed())


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2015-07-26T00:11:14-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.iterate/commit/3c5f24bc95770cc9096e601111a8e276c2b56160

update readme

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 5ed5f1f..cb2dba1 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 3.1.1 (unreleased)
 ------------------
 
-- Handle checking if object does not have iterate policy
+- Check if object does not have iterate policy. This fixes
+  iterate causing toolbar errors on portal root.
   [vangheem]
 
 


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2015-07-26T01:19:17-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.iterate/commit/58b0f1aebe83fe08f5fc9fcf8df5fb8fe4b2773f

Merge pull request #16 from plone/handle-no-iterate-policy

Check if object does not have iterate policy

Files changed:
M CHANGES.rst
M plone/app/iterate/browser/control.py
M plone/app/iterate/tests/test_iterate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7aaf6f8..cb2dba1 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,9 @@ Changelog
 3.1.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Check if object does not have iterate policy. This fixes
+  iterate causing toolbar errors on portal root.
+  [vangheem]
 
 
 3.1.0 (2015-07-18)
diff --git a/plone/app/iterate/browser/control.py b/plone/app/iterate/browser/control.py
index 2d5a391..7e47b46 100644
--- a/plone/app/iterate/browser/control.py
+++ b/plone/app/iterate/browser/control.py
@@ -52,7 +52,10 @@ def checkin_allowed(self):
         if not IWorkingCopy.providedBy(context):
             return False
 
-        policy = ICheckinCheckoutPolicy(context)
+        policy = ICheckinCheckoutPolicy(context, None)
+        if policy is None:
+            return False
+
         original = policy.getBaseline()
         if original is None:
             return False
@@ -74,7 +77,9 @@ def checkout_allowed(self):
         if not archiver.isVersionable():
             return False
 
-        policy = ICheckinCheckoutPolicy(context)
+        policy = ICheckinCheckoutPolicy(context, None)
+        if policy is None:
+            return False
 
         if policy.getWorkingCopy() is not None:
             return False
@@ -90,6 +95,8 @@ def cancel_allowed(self):
         """Check to see if the user can cancel the checkout on the
         given working copy
         """
-        policy = ICheckinCheckoutPolicy(self.context)
+        policy = ICheckinCheckoutPolicy(self.context, None)
+        if policy is None:
+            return False
         original = policy.getBaseline()
         return original is not None
diff --git a/plone/app/iterate/tests/test_iterate.py b/plone/app/iterate/tests/test_iterate.py
index e30534e..0960485 100644
--- a/plone/app/iterate/tests/test_iterate.py
+++ b/plone/app/iterate/tests/test_iterate.py
@@ -24,19 +24,17 @@
 """
 
 from AccessControl import getSecurityManager
-
 from Products.CMFCore.utils import getToolByName
-
+from plone.app.iterate.browser.control import Control
 from plone.app.iterate.interfaces import ICheckinCheckoutPolicy
 from plone.app.iterate.testing import PLONEAPPITERATE_INTEGRATION_TESTING
-
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
-
 import unittest2 as unittest
 
+
 class TestIterations(unittest.TestCase):
 
     layer = PLONEAPPITERATE_INTEGRATION_TESTING
@@ -277,3 +275,15 @@ def test_checkinObjectLinkedInParentsRichTextField(self):
 
         # everything went right and the working copy is checked in
         self.assertEqual(subobject_uid, wc.UID())
+
+    def test_control_checkin_allowed_with_no_policy(self):
+        control = Control(self.portal, self.layer['request'])
+        self.assertFalse(control.checkin_allowed())
+
+    def test_control_checkout_allowed_with_no_policy(self):
+        control = Control(self.portal, self.layer['request'])
+        self.assertFalse(control.checkout_allowed())
+
+    def test_control_cancel_allowed_with_no_policy(self):
+        control = Control(self.portal, self.layer['request'])
+        self.assertFalse(control.cancel_allowed())


