Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-04-30T12:57:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/2a6dc76af55030b54285bbdf5db9d4fbed7122c7

housekeeping: pep8ified, cleanup, unified redundant code in the different getTheme functions, utf8 headers, sorted imports, ...

Files changed:
A docs/CHANGES.rst
M setup.py
M src/plone/app/theming/__init__.py
M src/plone/app/theming/browser/__init__.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/mapper.py
M src/plone/app/theming/events.py
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/header.py
M src/plone/app/theming/interfaces.py
M src/plone/app/theming/plugins/__init__.py
M src/plone/app/theming/plugins/hooks.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/testing.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/upgrade.py
M src/plone/app/theming/utils.py
D docs/HISTORY.rst

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
new file mode 100644
index 0000000..05a198a
--- /dev/null
+++ b/docs/CHANGES.rst
@@ -0,0 +1,336 @@
+Changelog
+=========
+
+1.2.3 (unreleased)
+------------------
+
+- unified different getTheme functions.
+  [jensens]
+
+- pep8ified, housekeeping, cleanup
+  [jensens]
+
+- Specify i18n:domain in controlpanel.pt.
+  [vincentfretin]
+
+- pat-modal pattern has been renamed to pat-plone-modal
+  [jcbrand]
+
+- Fix load pluginSettings for the enabled theme before calling plugins for
+  onEnabled and call onEnabled plugins with correct parameters
+  [datakurre]
+
+
+1.2.2 (2015-03-22)
+------------------
+
+- Patch the ZMI only for available ZMI pages.
+  [thet]
+
+- Change deprecated import of ``zope.site.hooks.getSite`` to
+  ``zope.component.hooks.getSite``.
+  [thet]
+
+- Add an error log if the subrequest failed (probably a relative xi:include)
+  instead of silently returning None (and so having a xi:include returning
+  nothing).
+  [vincentfretin]
+
+- Fix transform to not affect the result when theming is disabled
+  [datakurre]
+
+- Integrate thememapper mockup pattern and fix theming control panel
+  to be more usable
+  [ebrehault]
+
+
+1.2.1 (2014-10-23)
+------------------
+
+- Remove DL's from portal message in templates.
+  https://github.com/plone/Products.CMFPlone/issues/153
+  [khink]
+
+- Fix "Insufficient Privileges" for "Site Administrators" on the control panel.
+  [@rpatterson]
+
+- Add IThemeAppliedEvent
+  [vangheem]
+
+- Put themes in a separate zcml file to be able to exclude them
+  [laulaz]
+
+- #14107 bot requests like /widget/oauth_login/info.txt causes
+  problems finding correct context with plone.app.theming
+  [anthonygerrard]
+
+- Added support for ++theme++ to traverse to the contents of the
+  current activated theme.
+  [bosim]
+
+
+1.2.0 (2014-03-02)
+------------------
+
+- Disable theming for manage_shutdown view.
+  [davisagli]
+
+- Fix reference to theme error template
+  [afrepues]
+
+- Add "Test Styles" button in control panel to expose, test_rendering template.
+  [runyaga]
+
+1.1.1 (2013-05-23)
+------------------
+
+- Fixed i18n issues.
+  [thomasdesvenain]
+
+- Fixed i18n issues.
+  [jianaijun]
+
+- This fixed UnicodeDecodeError when Theme Title is Non-ASCII
+  in the manifest.cfg file.
+  [jianaijun]
+
+
+1.1 (2013-04-06)
+----------------
+
+- Fixed i18n issues.
+  [vincentfretin]
+
+- Make the template theme do what it claims to do: copy styles as
+  well as scripts.
+  [smcmahon]
+
+- Change the label and description for the example theme to supply useful
+  information.
+  [smcmahon]
+
+- Upgrades from 1.0 get the combined "Theming" control panel that was added in
+  1.1a1.
+  [danjacka]
+
+
+1.1b2 (2013-01-01)
+------------------
+
+- Ensure host blacklist utilises SERVER_URL to correctly determine hostname
+  for sites hosted as sub-folders at any depth.
+  [davidjb]
+
+- Add test about plone.app.theming / plone.app.caching integration when
+  using GZIP compression for anonymous
+  (see ticket `12038 <https://dev.plone.org/ticket/12038>`_). [ebrehault]
+
+
+1.1b1 (2012-10-16)
+------------------
+
+- Add diazo.debug option, route all error_log output through
+  this so debugging can be displayed
+  [lentinj]
+
+- Make example Bootstrap-based theme use the HTML5 DOCTYPE.
+  [danjacka]
+
+- Demote ZMI patch log message to debug level.
+  [hannosch]
+
+- Upgrade to ACE 1.0 via plone.resourceeditor
+  [optilude]
+
+- Put quotes around jQuery attribute selector values to appease
+  jQuery 1.7.2.
+  [danjacka]
+
+1.1a2 (2012-08-30)
+------------------
+
+- Protect the control panel with a specific permission so it can be
+  delegated.
+  [davisagli]
+
+- Advise defining ajax_load as ``request.form.get('ajax_load')`` in
+  manifest.cfg.  For instance, the login_form has an hidden empty
+  ajax_load input, which would give an unthemed page after submitting
+  the form.
+  [maurits]
+
+- Change theme editor page templates to use main_template rather than
+  prefs_main_template to avoid inserting CSS and JavaScript too early
+  under plonetheme.classic.
+  [danjacka]
+
+1.1a1 (2012-08-08)
+------------------
+
+- Replace the stock "Themes" control panel with a renamed "Theming" control
+  panel, which incorporates the former's settings under its "Advanced" tab.
+  [optilude]
+
+- Add a full in-Plone theme authoring environment
+  [optilude, vangheem]
+
+- Update IBeforeTraverseEvent import to zope.traversing.
+  [hannosch]
+
+- On tab "Manage themes", change table header to
+  better describe what's actually listed.
+  [kleist]
+
+1.0 (2012-04-15)
+----------------
+
+* Prevent AttributeError when getRequest returns None.
+  [maurits]
+
+* Calculate subrequests against navigation root rather than portal.
+  [elro]
+
+* Supply closest context found for 404 pages.
+  [elro]
+
+* Lookup portal state with correct context.
+  [elro]
+
+1.0b9 - 2011-11-02
+------------------
+
+* Patch App.Management.Navigation to disable theming of ZMI pages.
+  [elro]
+
+1.0b8 - 2011-07-04
+------------------
+
+* Evaluate theme parameters regardless of whether there is a valid context or
+  not (e.g. when templating a 404 page).
+  [lentinj]
+
+1.0b7 - 2011-06-12
+------------------
+
+* Moved the *views* and *overrides* plugins out into a separate package
+  ``plone.app.themingplugins``. If you want to use those features, you need
+  to install that package in your buildout. Themes attempting to register
+  views or overrides in environments where ``plone.app.themingplugins`` is not
+  installed will install, but views and overrides will not take effect.
+  [optilude]
+
+1.0b6 - 2011-06-08
+------------------
+
+* Support for setting arbitrary Doctypes.
+  [elro]
+
+* Upgrade step to update plone.app.registry configuration.
+  [elro]
+
+* Fixed plugin initialization when applying a theme.
+  [maurits]
+
+* Query the resource directory using the 'currentTheme' name instead
+  of the Theme object (updating the control panel was broken).
+  [maurits]
+
+* Fix zip import (plugin initialization was broken.)
+  [elro]
+
+1.0b5 - 2011-05-29
+------------------
+
+* Make sure the control panel is never themed, by setting the X-Theme-Disabled
+  response header.
+  [optilude]
+
+* Add support for registering new views from Zope Page Templates and
+  overriding existing templates. See README for more details.
+  [optilude]
+
+1.0b4 - 2011-05-24
+------------------
+
+* Add support for ``X-Theme-Disabled`` response header.
+  [elro]
+
+* Make "Replace existing theme" checkbox default to off.
+  [elro]
+
+* Fix control panel to correctly display a newly uploaded theme.
+  [elro]
+
+* Fix zip import to work correctly when no manifest is supplied.
+  [elro]
+
+1.0b3 - 2011-05-23
+------------------
+
+* Show theme name along with title in control panel.
+  [elro]
+
+1.0b2 - 2011-05-16
+------------------
+
+* Encode internally resolved documents to support non-ascii characters
+  correctly.
+  [elro]
+
+* Fix control panel to use theme name not id.
+  [optilude]
+
+1.0b1 - 2011-04-22
+------------------
+
+* Wrap internal subrequests for css or js in style or script tags to
+  facilitate inline includes.
+  [elro]
+
+* Add ``theme.xml`` import step (see README).
+  [optilude]
+
+* Add support for ``[theme:parameters]`` section in ``manifest.cfg``, which
+  can be used to set parameters and the corresponding TALES expressions to
+  calculate them.
+  [optilude]
+
+* Add support for parameter expressions based on TALES expressions
+  [optilude]
+
+* Use plone.subrequest 1.6 features to work with IStreamIterator from
+  plone.resource.
+  [elro]
+
+* Depend on ``Products.CMFPlone`` instead of ``Plone``.
+  [elro]
+
+* Added support for uploading themes as Zip archives.
+  [optilude]
+
+* Added theme off switch: Add a query string parameter ``diazo.off=1`` to a
+  request whilst Zope is in development mode to turn off the theme.
+  [optilude]
+
+* Removed 'theme' and alternative themes support: Themes should be referenced
+  using the ``<theme />`` directive in the Diazo rules file.
+  [optilude]
+
+* Removed 'domains' support: This can be handled with the rules file syntax
+  by using the ``host`` parameter.
+  [optilude]
+
+* Removed 'notheme' support: This can be handled within the rules file syntax
+  by using the ``path`` parameter.
+  [optilude]
+
+* Added ``path`` and ``host`` as parameters to the Diazo rules file. These
+  can now be used as conditional expressions.
+  [optilude]
+
+* Removed dependency on XDV in favour of dependency on Diazo (which is the
+  new name for XDV).
+  [optilude]
+
+* Forked from collective.xdv 1.0rc11.
+  [optilude]
diff --git a/docs/HISTORY.rst b/docs/HISTORY.rst
deleted file mode 100644
index b0e022f..0000000
--- a/docs/HISTORY.rst
+++ /dev/null
@@ -1,330 +0,0 @@
-Changelog
-=========
-
-1.2.3 (unreleased)
-------------------
-
-- Specify i18n:domain in controlpanel.pt.
-  [vincentfretin]
-
-- pat-modal pattern has been renamed to pat-plone-modal
-  [jcbrand]
-
-- Fix load pluginSettings for the enabled theme before calling plugins for
-  onEnabled and call onEnabled plugins with correct parameters
-  [datakurre]
-
-
-1.2.2 (2015-03-22)
-------------------
-
-- Patch the ZMI only for available ZMI pages.
-  [thet]
-
-- Change deprecated import of ``zope.site.hooks.getSite`` to
-  ``zope.component.hooks.getSite``.
-  [thet]
-
-- Add an error log if the subrequest failed (probably a relative xi:include)
-  instead of silently returning None (and so having a xi:include returning
-  nothing).
-  [vincentfretin]
-
-- Fix transform to not affect the result when theming is disabled
-  [datakurre]
-
-- Integrate thememapper mockup pattern and fix theming control panel
-  to be more usable
-  [ebrehault]
-
-
-1.2.1 (2014-10-23)
-------------------
-
-- Remove DL's from portal message in templates.
-  https://github.com/plone/Products.CMFPlone/issues/153
-  [khink]
-
-- Fix "Insufficient Privileges" for "Site Administrators" on the control panel.
-  [@rpatterson]
-
-- Add IThemeAppliedEvent
-  [vangheem]
-
-- Put themes in a separate zcml file to be able to exclude them
-  [laulaz]
-
-- #14107 bot requests like /widget/oauth_login/info.txt causes
-  problems finding correct context with plone.app.theming
-  [anthonygerrard]
-
-- Added support for ++theme++ to traverse to the contents of the
-  current activated theme.
-  [bosim]
-
-
-1.2.0 (2014-03-02)
-------------------
-
-- Disable theming for manage_shutdown view.
-  [davisagli]
-
-- Fix reference to theme error template
-  [afrepues]
-
-- Add "Test Styles" button in control panel to expose, test_rendering template.
-  [runyaga]
-
-1.1.1 (2013-05-23)
-------------------
-
-- Fixed i18n issues.
-  [thomasdesvenain]
-
-- Fixed i18n issues.
-  [jianaijun]
-
-- This fixed UnicodeDecodeError when Theme Title is Non-ASCII
-  in the manifest.cfg file.
-  [jianaijun]
-
-
-1.1 (2013-04-06)
-----------------
-
-- Fixed i18n issues.
-  [vincentfretin]
-
-- Make the template theme do what it claims to do: copy styles as
-  well as scripts.
-  [smcmahon]
-
-- Change the label and description for the example theme to supply useful
-  information.
-  [smcmahon]
-
-- Upgrades from 1.0 get the combined "Theming" control panel that was added in
-  1.1a1.
-  [danjacka]
-
-
-1.1b2 (2013-01-01)
-------------------
-
-- Ensure host blacklist utilises SERVER_URL to correctly determine hostname
-  for sites hosted as sub-folders at any depth.
-  [davidjb]
-
-- Add test about plone.app.theming / plone.app.caching integration when
-  using GZIP compression for anonymous
-  (see ticket `12038 <https://dev.plone.org/ticket/12038>`_). [ebrehault]
-
-
-1.1b1 (2012-10-16)
-------------------
-
-- Add diazo.debug option, route all error_log output through
-  this so debugging can be displayed
-  [lentinj]
-
-- Make example Bootstrap-based theme use the HTML5 DOCTYPE.
-  [danjacka]
-
-- Demote ZMI patch log message to debug level.
-  [hannosch]
-
-- Upgrade to ACE 1.0 via plone.resourceeditor
-  [optilude]
-
-- Put quotes around jQuery attribute selector values to appease
-  jQuery 1.7.2.
-  [danjacka]
-
-1.1a2 (2012-08-30)
-------------------
-
-- Protect the control panel with a specific permission so it can be
-  delegated.
-  [davisagli]
-
-- Advise defining ajax_load as ``request.form.get('ajax_load')`` in
-  manifest.cfg.  For instance, the login_form has an hidden empty
-  ajax_load input, which would give an unthemed page after submitting
-  the form.
-  [maurits]
-
-- Change theme editor page templates to use main_template rather than
-  prefs_main_template to avoid inserting CSS and JavaScript too early
-  under plonetheme.classic.
-  [danjacka]
-
-1.1a1 (2012-08-08)
-------------------
-
-- Replace the stock "Themes" control panel with a renamed "Theming" control
-  panel, which incorporates the former's settings under its "Advanced" tab.
-  [optilude]
-
-- Add a full in-Plone theme authoring environment
-  [optilude, vangheem]
-
-- Update IBeforeTraverseEvent import to zope.traversing.
-  [hannosch]
-
-- On tab "Manage themes", change table header to
-  better describe what's actually listed.
-  [kleist]
-
-1.0 (2012-04-15)
-----------------
-
-* Prevent AttributeError when getRequest returns None.
-  [maurits]
-
-* Calculate subrequests against navigation root rather than portal.
-  [elro]
-
-* Supply closest context found for 404 pages.
-  [elro]
-
-* Lookup portal state with correct context.
-  [elro]
-
-1.0b9 - 2011-11-02
-------------------
-
-* Patch App.Management.Navigation to disable theming of ZMI pages.
-  [elro]
-
-1.0b8 - 2011-07-04
-------------------
-
-* Evaluate theme parameters regardless of whether there is a valid context or
-  not (e.g. when templating a 404 page).
-  [lentinj]
-
-1.0b7 - 2011-06-12
-------------------
-
-* Moved the *views* and *overrides* plugins out into a separate package
-  ``plone.app.themingplugins``. If you want to use those features, you need
-  to install that package in your buildout. Themes attempting to register
-  views or overrides in environments where ``plone.app.themingplugins`` is not
-  installed will install, but views and overrides will not take effect.
-  [optilude]
-
-1.0b6 - 2011-06-08
-------------------
-
-* Support for setting arbitrary Doctypes.
-  [elro]
-
-* Upgrade step to update plone.app.registry configuration.
-  [elro]
-
-* Fixed plugin initialization when applying a theme.
-  [maurits]
-
-* Query the resource directory using the 'currentTheme' name instead
-  of the Theme object (updating the control panel was broken).
-  [maurits]
-
-* Fix zip import (plugin initialization was broken.)
-  [elro]
-
-1.0b5 - 2011-05-29
-------------------
-
-* Make sure the control panel is never themed, by setting the X-Theme-Disabled
-  response header.
-  [optilude]
-
-* Add support for registering new views from Zope Page Templates and
-  overriding existing templates. See README for more details.
-  [optilude]
-
-1.0b4 - 2011-05-24
-------------------
-
-* Add support for ``X-Theme-Disabled`` response header.
-  [elro]
-
-* Make "Replace existing theme" checkbox default to off.
-  [elro]
-
-* Fix control panel to correctly display a newly uploaded theme.
-  [elro]
-
-* Fix zip import to work correctly when no manifest is supplied.
-  [elro]
-
-1.0b3 - 2011-05-23
-------------------
-
-* Show theme name along with title in control panel.
-  [elro]
-
-1.0b2 - 2011-05-16
-------------------
-
-* Encode internally resolved documents to support non-ascii characters
-  correctly.
-  [elro]
-
-* Fix control panel to use theme name not id.
-  [optilude]
-
-1.0b1 - 2011-04-22
-------------------
-
-* Wrap internal subrequests for css or js in style or script tags to
-  facilitate inline includes.
-  [elro]
-
-* Add ``theme.xml`` import step (see README).
-  [optilude]
-
-* Add support for ``[theme:parameters]`` section in ``manifest.cfg``, which
-  can be used to set parameters and the corresponding TALES expressions to
-  calculate them.
-  [optilude]
-
-* Add support for parameter expressions based on TALES expressions
-  [optilude]
-
-* Use plone.subrequest 1.6 features to work with IStreamIterator from
-  plone.resource.
-  [elro]
-
-* Depend on ``Products.CMFPlone`` instead of ``Plone``.
-  [elro]
-
-* Added support for uploading themes as Zip archives.
-  [optilude]
-
-* Added theme off switch: Add a query string parameter ``diazo.off=1`` to a
-  request whilst Zope is in development mode to turn off the theme.
-  [optilude]
-
-* Removed 'theme' and alternative themes support: Themes should be referenced
-  using the ``<theme />`` directive in the Diazo rules file.
-  [optilude]
-
-* Removed 'domains' support: This can be handled with the rules file syntax
-  by using the ``host`` parameter.
-  [optilude]
-
-* Removed 'notheme' support: This can be handled within the rules file syntax
-  by using the ``path`` parameter.
-  [optilude]
-
-* Added ``path`` and ``host`` as parameters to the Diazo rules file. These
-  can now be used as conditional expressions.
-  [optilude]
-
-* Removed dependency on XDV in favour of dependency on Diazo (which is the
-  new name for XDV).
-  [optilude]
-
-* Forked from collective.xdv 1.0rc11.
-  [optilude]
diff --git a/setup.py b/setup.py
index c14f1ef..989d72c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,51 +1,66 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 import os
 
 version = '1.2.3.dev0'
 
-setup(name='plone.app.theming',
-      version=version,
-      description="Integrates the Diazo theming engine with Plone",
-      long_description=open("README.rst").read() + "\n\n" +
-                       open(os.path.join("src", "plone", "app", "theming", "browser", "resources", "userguide.rst")).read() + "\n\n" +
-                       open(os.path.join("docs", "HISTORY.rst")).read(),
-      # Get more strings from http://www.python.org/pypi?%3Aaction=list_classifiers
-      classifiers=[
+longdescription = open("README.rst").read()
+longdescription += "\n\n"
+longdescription += open(
+    os.path.join(
+        "src",
+        "plone",
+        "app",
+        "theming",
+        "browser",
+        "resources",
+        "userguide.rst"
+    )
+).read()
+longdescription += open(os.path.join("docs", "CHANGES.rst")).read()
+
+setup(
+    name='plone.app.theming',
+    version=version,
+    description="Integrates the Diazo theming engine with Plone",
+    long_description=longdescription,
+    classifiers=[
         "Framework :: Plone",
         "Programming Language :: Python",
         "Topic :: Software Development :: Libraries :: Python Modules",
-        ],
-      keywords='plone diazo xdv deliverance theme transform xslt',
-      author='Martin Aspeli and Laurence Rowe',
-      author_email='optilude@gmail.com',
-      url='http://pypi.python.org/pypi/plone.app.theming',
-      license='GPL',
-      packages=find_packages('src'),
-      package_dir={'': 'src'},
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'diazo>=1.0.3',
-          'docutils',
-          'roman',
-          'lxml>=2.2.4',
-          'plone.app.registry>=1.0a2',
-          'plone.subrequest',
-          'plone.transformchain',
-          'plone.resource>=1.0b5',
-          'plone.resourceeditor>=2.0.0.dev',
-          'repoze.xmliter>=0.3',
-          'five.globalrequest',
-          'Products.CMFPlone',
-          'zope.traversing',
-      ],
-      extras_require={
+    ],
+    keywords='plone diazo xdv deliverance theme transform xslt',
+    author='Martin Aspeli and Laurence Rowe',
+    author_email='optilude@gmail.com',
+    url='http://pypi.python.org/pypi/plone.app.theming',
+    license='GPL',
+    packages=find_packages('src'),
+    package_dir={'': 'src'},
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'Products.CMFPlone',
+        'diazo>=1.0.3',
+        'docutils',
+        'five.globalrequest',
+        'lxml>=2.2.4',
+        'plone.app.registry>=1.0a2',
+        'plone.resource>=1.0b5',
+        'plone.resourceeditor>=2.0.0.dev',
+        'plone.subrequest',
+        'plone.transformchain',
+        'repoze.xmliter>=0.3',
+        'roman>=2.0.0',
+        'setuptools',
+        'zope.traversing',
+    ],
+    extras_require={
         'test': ['plone.app.testing'],
-      },
-      entry_points="""
-      [z3c.autoinclude.plugin]
-      target = plone
-      """,
-      )
+    },
+    entry_points="""
+    [z3c.autoinclude.plugin]
+    target = plone
+    """,
+    )
diff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py
index d9b386d..c08456a 100644
--- a/src/plone/app/theming/__init__.py
+++ b/src/plone/app/theming/__init__.py
@@ -1,12 +1,10 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError: # pragma: no cover
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+# make this a namespace packages (plone.app.theming.plugins is an
+# extensible python namespace
+__import__('pkg_resources').declare_namespace(__name__)
 
 # Some systems have a broken/missing ``roman`` module; monkey patch one in
-
+# XXX: DO we still need this?
 try:
     import roman
 except ImportError:
diff --git a/src/plone/app/theming/browser/__init__.py b/src/plone/app/theming/browser/__init__.py
index e69de29..40a96af 100644
--- a/src/plone/app/theming/browser/__init__.py
+++ b/src/plone/app/theming/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 9f1fdbf..83c3cb4 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -1,39 +1,32 @@
-import logging
-import zipfile
-
-from zope.component import getUtility
-from zope.component import getMultiAdapter
-from zope.schema.interfaces import IVocabularyFactory
-from zope.publisher.browser import BrowserView
-
-from plone.resource.utils import queryResourceDirectory
-from plone.registry.interfaces import IRegistry
-
-from plone.memoize.instance import memoize
-
-from plone.app.theming.interfaces import _
+# -*- coding: utf-8 -*-
+from AccessControl import Unauthorized
+from Products.CMFCore.utils import getToolByName
+from Products.Five.browser.decode import processInputs
+from Products.statusmessages.interfaces import IStatusMessage
+from plone.app.controlpanel.skins import ISkinsSchema
+from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.app.theming.interfaces import RULE_FILENAME
-from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import TEMPLATE_THEME
-
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+from plone.app.theming.interfaces import _
+from plone.app.theming.plugins.utils import getPluginSettings
+from plone.app.theming.plugins.utils import getPlugins
+from plone.app.theming.utils import applyTheme
+from plone.app.theming.utils import createThemeFromTemplate
 from plone.app.theming.utils import extractThemeInfo
-from plone.app.theming.utils import getZODBThemes
 from plone.app.theming.utils import getAvailableThemes
-from plone.app.theming.utils import applyTheme
 from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
-from plone.app.theming.utils import createThemeFromTemplate
-
-from plone.app.theming.plugins.utils import getPluginSettings
-from plone.app.theming.plugins.utils import getPlugins
-
-from plone.app.controlpanel.skins import ISkinsSchema
-
-from AccessControl import Unauthorized
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.decode import processInputs
-from Products.statusmessages.interfaces import IStatusMessage
+from plone.app.theming.utils import getZODBThemes
+from plone.memoize.instance import memoize
+from plone.registry.interfaces import IRegistry
+from plone.resource.utils import queryResourceDirectory
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.publisher.browser import BrowserView
+from zope.schema.interfaces import IVocabularyFactory
+import logging
+import zipfile
 
 logger = logging.getLogger('plone.app.theming')
 
@@ -52,14 +45,25 @@ def __call__(self):
         return ''
 
     def _setup(self):
-        self.settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
+        self.settings = getUtility(IRegistry).forInterface(
+            IThemeSettings,
+            False
+        )
         self.zodbThemes = getZODBThemes()
         self.availableThemes = getAvailableThemes()
-        self.selectedTheme = self.getSelectedTheme(self.availableThemes, self.settings.rules)
+        self.selectedTheme = self.getSelectedTheme(
+            self.availableThemes,
+            self.settings.rules
+        )
         self.overlay = ''
 
         self.skinsSettings = ISkinsSchema(self.context)
-        self.skinsVocabulary = getUtility(IVocabularyFactory, name='plone.app.vocabularies.Skins')(self.context)
+        self.skinsVocabulary = getUtility(
+            IVocabularyFactory,
+            name='plone.app.vocabularies.Skins'
+        )(
+            self.context
+        )
 
         # Set response header to make sure control panel is never themed
         self.request.response.setHeader('X-Theme-Disabled', '1')
@@ -68,6 +72,7 @@ def redirect(self, url):
         self.request.response.redirect(url)
 
     def update(self):
+        # XXX: complexity too high: refactoring needed
         processInputs(self.request)
         self._setup()
         self.errors = {}
@@ -87,11 +92,21 @@ def update(self):
             themeSelection = form.get('themeName', None)
 
             if themeSelection:
-                themeData = self.getThemeData(self.availableThemes, themeSelection)
+                themeData = self.getThemeData(
+                    self.availableThemes,
+                    themeSelection
+                )
                 applyTheme(themeData)
                 self.settings.enabled = True
 
-            IStatusMessage(self.request).add(_(u"Theme enabled. Note that this control panel page is never themed."))
+            IStatusMessage(
+                self.request
+            ).add(
+                _(
+                    u"Theme enabled. Note that this control panel page is "
+                    u"never themed."
+                )
+            )
             self._setup()
             return True
 
@@ -123,15 +138,16 @@ def update(self):
             for line in parameterExpressionsList:
                 try:
                     name, expression = line.split('=', 1)
-                    parameterExpressions[str(name.strip())] = \
-                                                    str(expression.strip())
+                    name = str(name.strip())
+                    expression = str(expression.strip())
+                    parameterExpressions[name] = expression
                 except ValueError:
-                    self.errors['parameterExpressions'] = \
-                                    _('error_invalid_parameter_expressions',
-                        default=u"Please ensure you enter one "
-                                u"expression per line, in the "
-                                u"format <name> = <expression>."
-                    )
+                    message = _(
+                        'error_invalid_parameter_expressions',
+                        default=u"Please ensure you enter one expression per "
+                                u"line, in the format <name> = <expression>."
+                        )
+                    self.errors['parameterExpressions'] = message
 
             themeBase = form.get('themeBase', None)
             markSpecialLinks = form.get('markSpecialLinks', None)
@@ -139,11 +155,9 @@ def update(self):
             usePopups = form.get('usePopups', None)
             iconVisibility = form.get('iconVisibility', None)
 
-            if not self.errors:
-
+            if self.errors:
                 # Trigger onDisabled() on plugins if theme was active
                 # previously and rules were changed
-
                 if self.settings.rules != rules:
                     applyTheme(None)
 
@@ -155,23 +169,26 @@ def update(self):
                 self.settings.doctype = doctype
 
                 # Theme base settings
-
                 if themeBase is not None:
                     self.skinsSettings.theme = themeBase.encode('utf-8')
                 if markSpecialLinks is not None:
                     self.skinsSettings.mark_special_links = markSpecialLinks
                 if extLinksOpenInNewWindow is not None:
-                    self.skinsSettings.ext_links_open_new_window = extLinksOpenInNewWindow
+                    self.skinsSettings.ext_links_open_new_window = \
+                        extLinksOpenInNewWindow
                 if usePopups is not None:
                     self.skinsSettings.use_popups = usePopups
                 if iconVisibility is not None:
-                    self.skinsSettings.icon_visibility = iconVisibility.encode('utf-8')
+                    self.skinsSettings.icon_visibility = \
+                        iconVisibility.encode('utf-8')
 
                 IStatusMessage(self.request).add(_(u"Changes saved"))
                 self._setup()
                 return True
             else:
-                IStatusMessage(self.request).add(_(u"There were errors"), 'error')
+                IStatusMessage(self.request).add(
+                    _(u"There were errors"), 'error'
+                )
                 self.redirectToFieldset('advanced')
                 return False
 
@@ -189,9 +206,10 @@ def update(self):
                 themeZip = zipfile.ZipFile(themeArchive)
             except (zipfile.BadZipfile, zipfile.LargeZipFile,):
                 logger.exception("Could not read zip file")
-                self.errors['themeArchive'] = _('error_invalid_zip',
-                        default=u"The uploaded file is not a valid Zip archive"
-                    )
+                self.errors['themeArchive'] = _(
+                    'error_invalid_zip',
+                    default=u"The uploaded file is not a valid Zip archive"
+                )
 
             if themeZip:
 
@@ -199,10 +217,11 @@ def update(self):
                     themeData = extractThemeInfo(themeZip, checkRules=False)
                 except (ValueError, KeyError,), e:
                     logger.warn(str(e))
-                    self.errors['themeArchive'] = _('error_no_rules_file',
-                            u"The uploaded file does not contain "
-                            u"a valid theme archive."
-                        )
+                    self.errors['themeArchive'] = _(
+                        'error_no_rules_file',
+                        u"The uploaded file does not contain a valid theme "
+                        u"archive."
+                    )
                 else:
 
                     themeContainer = getOrCreatePersistentResourceDirectory()
@@ -210,12 +229,12 @@ def update(self):
 
                     if themeExists:
                         if not replaceExisting:
-                            self.errors['themeArchive'] = \
-                                _('error_already_installed',
-                                    u"This theme is already installed. "
-                                    u"Select 'Replace existing theme' "
-                                    u"and re-upload to replace it."
-                                )
+                            self.errors['themeArchive'] = _(
+                                'error_already_installed',
+                                u"This theme is already installed. Select "
+                                u"'Replace existing theme' and re-upload to "
+                                u"replace it."
+                            )
                         else:
                             del themeContainer[themeData.__name__]
                             performImport = True
@@ -225,28 +244,46 @@ def update(self):
             if performImport:
                 themeContainer.importZip(themeZip)
 
-                themeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, themeData.__name__)
+                themeDirectory = queryResourceDirectory(
+                    THEME_RESOURCE_NAME,
+                    themeData.__name__
+                )
                 if themeDirectory is not None:
-
                     # If we don't have a rules file, use the template
-                    if themeData.rules == u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, themeData.__name__, RULE_FILENAME,):
-                        if not themeDirectory.isFile(RULE_FILENAME):
-                            templateThemeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, TEMPLATE_THEME)
-                            themeDirectory.writeFile(RULE_FILENAME, templateThemeDirectory.readFile(RULE_FILENAME))
+                    if themeData.rules == u"/++{0:s}++{1:s}/{2:s}".format(
+                        THEME_RESOURCE_NAME,
+                        themeData.__name__,
+                        RULE_FILENAME,
+                    ) and not themeDirectory.isFile(RULE_FILENAME):
+                        templateThemeDirectory = queryResourceDirectory(
+                            THEME_RESOURCE_NAME,
+                            TEMPLATE_THEME
+                        )
+                        themeDirectory.writeFile(
+                            RULE_FILENAME,
+                            templateThemeDirectory.readFile(RULE_FILENAME)
+                        )
 
-                            if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):
-                                IStatusMessage(self.request).add(
-                                        _(u"A boilerplate rules.xml was added to your theme, but no index.html file found. Update rules.xml to reference the current theme file."),
-                                        'warning',
-                                    )
+                        if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):
+                            IStatusMessage(self.request).add(
+                                _(
+                                    u"A boilerplate rules.xml was added to "
+                                    u"your theme, but no index.html file "
+                                    u"found. Update rules.xml to reference "
+                                    u"the current theme file."
+                                ),
+                                'warning',
+                            )
 
                     plugins = getPlugins()
                     pluginSettings = getPluginSettings(themeDirectory, plugins)
                     if pluginSettings is not None:
                         for name, plugin in plugins:
-                            plugin.onCreated(themeData.__name__,
-                                             pluginSettings[name],
-                                             pluginSettings)
+                            plugin.onCreated(
+                                themeData.__name__,
+                                pluginSettings[name],
+                                pluginSettings
+                            )
 
                 if enableNewTheme:
                     applyTheme(themeData)
@@ -278,7 +315,10 @@ def update(self):
             if not title:
                 self.errors['title'] = _(u"Title is required")
 
-                IStatusMessage(self.request).add(_(u"There were errors"), 'error')
+                IStatusMessage(self.request).add(
+                    _(u"There were errors"),
+                    'error'
+                )
 
                 self.renderOverlay('new-theme')
                 return True
@@ -340,7 +380,10 @@ def themeList(self):
 
             previewUrl = "++resource++plone.app.theming/defaultPreview.png"
             if theme.preview:
-                previewUrl = "++theme++%s/%s" % (theme.__name__, theme.preview,)
+                previewUrl = "++theme++{0:s}/{1:s}".format(
+                    theme.__name__,
+                    theme.preview,
+                )
 
             themes.append({
                 'name': theme.__name__,
@@ -364,4 +407,4 @@ def renderOverlay(self, overlay):
         self.overlay = overlay
 
     def authorize(self):
-        return authorize(self.context, self.request)
\ No newline at end of file
+        return authorize(self.context, self.request)
diff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py
index be26d76..3a97e53 100644
--- a/src/plone/app/theming/browser/help.py
+++ b/src/plone/app/theming/browser/help.py
@@ -6,7 +6,13 @@
 class Help(BrowserView):
 
     def __call__(self):
-        rstSource = pkg_resources.resource_string('plone.app.theming.browser', 'resources/userguide.rst')
-        parts = docutils.core.publish_parts(source=rstSource, writer_name='html')
+        rstSource = pkg_resources.resource_string(
+            'plone.app.theming.browser',
+            'resources/userguide.rst'
+        )
+        parts = docutils.core.publish_parts(
+            source=rstSource,
+            writer_name='html'
+        )
         html = parts['body_pre_docinfo'] + parts['fragment']
         return """<div class="content">%s</div>""" % html
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index 8793671..481799e 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -1,50 +1,38 @@
-import urllib
-import urlparse
-import os.path
-
-import lxml.etree
-import lxml.html
-import lxml.html.builder
-
+# -*- coding: utf-8 -*-
+from AccessControl import Unauthorized
+from Products.CMFCore.utils import _getAuthenticatedUser
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.resources import add_bundle_on_request
+from Products.Five.browser.decode import processInputs
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 from diazo.utils import quote_param
-
-from zope.component import getMultiAdapter
-from zope.component import getUtility
-
-from zope.component.hooks import getSite
-from zope.publisher.browser import BrowserView
-
-from repoze.xmliter.utils import getHTMLSerializer
-from plone.app.theming.utils import compileThemeTransform
-from plone.app.theming.utils import prepareThemeParameters
-from plone.app.theming.utils import getCurrentTheme
-
-from plone.registry.interfaces import IRegistry
-
-from plone.subrequest import subrequest
-
-from plone.resource.interfaces import IWritableResourceDirectory
-
 from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.app.theming.interfaces import RULE_FILENAME
 from plone.app.theming.interfaces import THEME_EXTENSIONS
-
-from plone.app.theming.utils import getPortal
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+from plone.app.theming.utils import compileThemeTransform
 from plone.app.theming.utils import findContext
+from plone.app.theming.utils import getCurrentTheme
+from plone.app.theming.utils import getPortal
 from plone.app.theming.utils import getThemeFromResourceDirectory
-
+from plone.app.theming.utils import prepareThemeParameters
 from plone.memoize import view
-
-from AccessControl import Unauthorized
+from plone.registry.interfaces import IRegistry
+from plone.resource.interfaces import IWritableResourceDirectory
+from plone.subrequest import subrequest
+from repoze.xmliter.utils import getHTMLSerializer
 from zExceptions import NotFound
-
-from Products.Five.browser.decode import processInputs
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.statusmessages.interfaces import IStatusMessage
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.resources import add_bundle_on_request
-from Products.CMFCore.utils import _getAuthenticatedUser
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.hooks import getSite
+from zope.publisher.browser import BrowserView
+import lxml.etree
+import lxml.html
+import lxml.html.builder
+import os.path
+import urllib
+import urlparse
 
 
 class ThemeMapper(BrowserView):
@@ -65,7 +53,8 @@ def __call__(self):
     @view.memoize
     def development(self):
         registry = getUtility(IRegistry)
-        if _getAuthenticatedUser(self.context).getUserName() == 'Anonymous User':
+        current_username = _getAuthenticatedUser(self.context).getUserName()
+        if current_username == 'Anonymous User':
             return False
         return registry.records['plone.resources.development'].value
 
@@ -83,7 +72,9 @@ def setup(self):
         self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
         self.themeBaseUrl = "%s/%s" % (self.portalUrl, self.themeBasePath,)
 
-        self.editable = IWritableResourceDirectory.providedBy(self.resourceDirectory)
+        self.editable = IWritableResourceDirectory.providedBy(
+            self.resourceDirectory
+        )
 
         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
         self.active = (settings.enabled and self.name == getCurrentTheme())
@@ -116,7 +107,9 @@ def authorize(self):
 
     def redirect(self, message):
         IStatusMessage(self.request).add(message)
-        self.request.response.redirect("%s/@@theming-controlpanel" % self.portalUrl)
+        self.request.response.redirect(
+            "{0:s}/@@theming-controlpanel".format(self.portalUrl)
+        )
 
     def findThemeFiles(self, directory, files=None, prefix=''):
         """Depth-first search of files with known extensions.
@@ -128,33 +121,33 @@ def findThemeFiles(self, directory, files=None, prefix=''):
 
         dirs = []
 
-        for f in directory.listDirectory():
-            if not f or f == RULE_FILENAME:
+        for filename in directory.listDirectory():
+            if not filename or filename == RULE_FILENAME:
                 continue
 
-            if directory.isDirectory(f):
-                dirs.append(f)
+            if directory.isDirectory(filename):
+                dirs.append(filename)
             else:
 
-                path = f
+                path = filename
                 if prefix:
-                    path = prefix + '/' + f
+                    path = prefix + '/' + filename
 
-                basename, ext = os.path.splitext(f)
+                basename, ext = os.path.splitext(filename)
                 ext = ext[1:].lower()
                 if ext in THEME_EXTENSIONS:
                     files.append({
                         'path': '/' + path,
-                        'filename': f,
+                        'filename': filename,
                         'extension': ext,
                     })
 
         # Do directories last
-        for f in dirs:
-            path = f
+        for filename in dirs:
+            path = filename
             if prefix:
-                path = prefix + '/' + f
-            self.findThemeFiles(directory[f], files=files, prefix=path)
+                path = prefix + '/' + filename
+            self.findThemeFiles(directory[filename], files=files, prefix=path)
 
         return files
 
@@ -169,12 +162,12 @@ def getFrame(self):
 
         - a query string parameter ``links`` can be set to one of ``disable``
           or ``replace``. The former will disable hyperlinks; the latter will
-          replace them with links using the ``@@themeing-controlpanel-getframe``
-          view.
+          replace them with links using the
+          ``@@themeing-controlpanel-getframe`` view.
         - a query string parameter ``forms`` can be set to one of ``disable``
           or ``replace``. The former will disable forms ; the latter will
-          replace them with links using the ``@@themeing-controlpanel-getframe``
-          view.
+          replace them with links using the
+          ``@@themeing-controlpanel-getframe`` view.
         - a query string parameter ``title`` can be set to give a new page
           title
         """
@@ -243,8 +236,10 @@ def getFrame(self):
                 context, self.request, themeInfo.parameterExpressions or {})
 
             # Fix url and path since the request gave us this view
-            params['url'] = quote_param("%s%s" % (portal_url, path,))
-            params['path'] = quote_param("%s%s" % (portal.absolute_url_path(), path,))
+            params['url'] = quote_param(''.join((portal_url, path,)))
+            params['path'] = quote_param(
+                ''.join((portal.absolute_url_path(), path,))
+            )
 
             if themeInfo.doctype:
                 serializer.doctype = themeInfo.doctype
diff --git a/src/plone/app/theming/events.py b/src/plone/app/theming/events.py
index 3250069..6cee90c 100644
--- a/src/plone/app/theming/events.py
+++ b/src/plone/app/theming/events.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
 from plone.app.theming.interfaces import IThemeAppliedEvent
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(IThemeAppliedEvent)
 class ThemeAppliedEvent(object):
-    implements(IThemeAppliedEvent)
 
     def __init__(self, theme):
-        self.theme = theme
\ No newline at end of file
+        self.theme = theme
diff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py
index 22a7577..83f8b2f 100644
--- a/src/plone/app/theming/exportimport/handler.py
+++ b/src/plone/app/theming/exportimport/handler.py
@@ -1,12 +1,11 @@
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from zope.component import getUtility
-
-from plone.registry.interfaces import IRegistry
-
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.utils import applyTheme
 from plone.app.theming.utils import getAvailableThemes
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+
 
 def importTheme(context):
     """Apply the theme with the id contained in the profile file theme.xml
@@ -21,9 +20,8 @@ def importTheme(context):
 
     tree = etree.fromstring(data)
 
+    # apply theme if given and valid
     themeName = tree.find("name")
-    themeEnabled = tree.find("enabled")
-
     if themeName is not None:
         themeName = themeName.text.strip()
         themeInfo = None
@@ -35,21 +33,26 @@ def importTheme(context):
                 break
 
         if themeInfo is None:
-            raise ValueError("Theme %s is not available" % themeName)
+            raise ValueError("Theme {0:s} is not available".format(themeName))
 
         applyTheme(themeInfo)
-        logger.info('Theme %s applied' % themeName)
+        logger.info('Theme {0:s} applied'.format(themeName))
+
+    # enable/disable theme
+    themeEnabled = tree.find("enabled")
+    if themeEnabled is None:
+        return
 
     settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
 
-    if themeEnabled is not None:
-        themeEnabled = themeEnabled.text.strip().lower()
-
-        if themeEnabled in ("y", "yes", "true", "t", "1", "on",):
-            settings.enabled = True
-            logger.info('Theme enabled')
-        elif themeEnabled in ("n", "no", "false", "f", "0", "off",):
-            settings.enabled = False
-            logger.info('Theme disabled')
-        else:
-            raise ValueError("%s is not a valid value for <enabled />" % themeEnabled)
+    themeEnabled = themeEnabled.text.strip().lower()
+    if themeEnabled in ("y", "yes", "true", "t", "1", "on",):
+        settings.enabled = True
+        logger.info('Theme enabled')
+    elif themeEnabled in ("n", "no", "false", "f", "0", "off",):
+        settings.enabled = False
+        logger.info('Theme disabled')
+    else:
+        raise ValueError(
+            "{0:s} is not a valid value for <enabled />".format(themeEnabled)
+        )
diff --git a/src/plone/app/theming/header.py b/src/plone/app/theming/header.py
index 1030152..35ba2c9 100644
--- a/src/plone/app/theming/header.py
+++ b/src/plone/app/theming/header.py
@@ -1,10 +1,12 @@
+# -*- coding: utf-8 -*-
 from plone.app.theming.utils import isThemeEnabled
 
+
 def setHeader(object, event):
     """Set a header X-Theme-Enabled in the request if theming is enabled.
 
-    This is useful for checking in things like the portal_css/portal_javascripts
-    registries.
+    This is useful for checking in things like the portal_css/portal_
+    javascripts registries.
     """
 
     request = event.request
diff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py
index 883b24a..6db0042 100644
--- a/src/plone/app/theming/interfaces.py
+++ b/src/plone/app/theming/interfaces.py
@@ -1,8 +1,9 @@
-from zope.interface import Interface, Attribute
+# -*- coding: utf-8 -*-
+from plone.resource.manifest import ManifestFormat
 from zope import schema
 from zope.i18nmessageid import MessageFactory
-
-from plone.resource.manifest import ManifestFormat
+from zope.interface import Attribute
+from zope.interface import Interface
 
 _ = MessageFactory(u"plone")
 
@@ -11,13 +12,14 @@
 DEFAULT_THEME_FILENAME = 'index.html'
 TEMPLATE_THEME = 'template'
 
-MANIFEST_FORMAT = ManifestFormat(THEME_RESOURCE_NAME,
-        keys=['title', 'description', 'rules', 'prefix', 'doctype', 'preview',
-              'enabled-bundles', 'disabled-bundles',
-              'development-css', 'production-css', 'tinymce-content-css',
-              'development-js', 'production-js'],
-        parameterSections=['parameters'],
-    )
+MANIFEST_FORMAT = ManifestFormat(
+    THEME_RESOURCE_NAME,
+    keys=['title', 'description', 'rules', 'prefix', 'doctype', 'preview',
+          'enabled-bundles', 'disabled-bundles',
+          'development-css', 'production-css', 'tinymce-content-css',
+          'development-js', 'production-js'],
+    parameterSections=['parameters'],
+)
 
 THEME_EXTENSIONS = frozenset(['html', 'htm'])
 
@@ -27,45 +29,45 @@ class ITheme(Interface):
     """
 
     __name__ = schema.TextLine(
-            title=_(u"Name"),
-        )
+        title=_(u"Name"),
+    )
 
     rules = schema.TextLine(
-            title=_(u"Path to rules"),
-        )
+        title=_(u"Path to rules"),
+    )
 
     title = schema.TextLine(
-            title=_(u"Title"),
-            required=False,
-        )
+        title=_(u"Title"),
+        required=False,
+    )
 
     description = schema.TextLine(
-            title=_(u"Description"),
-            required=False,
-        )
+        title=_(u"Description"),
+        required=False,
+    )
 
     absolutePrefix = schema.TextLine(
-            title=_(u"Absolute prefix"),
-            required=False,
-        )
+        title=_(u"Absolute prefix"),
+        required=False,
+    )
 
     parameterExpressions = schema.Dict(
-            title=_(u"Parameter expressions"),
-            key_type=schema.TextLine(),
-            value_type=schema.TextLine(),
-            required=False,
-        )
+        title=_(u"Parameter expressions"),
+        key_type=schema.TextLine(),
+        value_type=schema.TextLine(),
+        required=False,
+    )
 
     doctype = schema.ASCIILine(
-            title=_(u"Doctype"),
-            required=False,
-            default="",
-        )
+        title=_(u"Doctype"),
+        required=False,
+        default="",
+    )
 
     preview = schema.ASCIILine(
-            title=_(u"Preview image"),
-            required=False,
-        )
+        title=_(u"Preview image"),
+        required=False,
+    )
 
 
 class IThemeSettings(Interface):
@@ -73,88 +75,99 @@ class IThemeSettings(Interface):
     """
 
     enabled = schema.Bool(
-            title=_('enabled', u"Enabled"),
-            description=_('enable_theme_globally',
-                          u"Use this option to enable or disable the theme "
-                          u"globally. Note that the options will also affect "
-                          u"whether the theme is used when this option is "
-                          u'enabled.'),
-            required=True,
-            default=False,
-        )
+        title=_('enabled', u"Enabled"),
+        description=_(
+            'enable_theme_globally',
+            u"Use this option to enable or disable the theme globally. "
+            u"Note that the options will also affect whether the theme "
+            u"is used when this option is enabled."
+        ),
+        required=True,
+        default=False,
+    )
 
     currentTheme = schema.TextLine(
-            title=_('current_theme', u"Current theme"),
-            description=_('current_theme_description',
-                          u"The name of the current theme, i.e. the one "
-                          u"applied most recently."),
-            required=True,
-        )
+        title=_('current_theme', u"Current theme"),
+        description=_(
+            'current_theme_description',
+            u"The name of the current theme, i.e. the one applied most "
+            u"recently."),
+        required=True,
+    )
 
     rules = schema.TextLine(
-            title=_('rules_file', u"Rules file"),
-            description=_('rules_file_path',
-                          u"File path to the rules file"),
-            required=False,
-        )
+        title=_('rules_file', u"Rules file"),
+        description=_(
+            'rules_file_path',
+            u"File path to the rules file"
+        ),
+        required=False,
+    )
 
     absolutePrefix = schema.TextLine(
-            title=_('absolute_url_prefix', u"Absolute URL prefix"),
-            description=_('convert_relative_url',
-                 u"Convert relative URLs in the theme file to absolute paths "
-                 u"using this prefix."),
-            required=False,
-        )
+        title=_('absolute_url_prefix', u"Absolute URL prefix"),
+        description=_(
+            'convert_relative_url',
+            u"Convert relative URLs in the theme file to absolute paths "
+            u"using this prefix."
+        ),
+        required=False,
+    )
 
     readNetwork = schema.Bool(
-            title=_('readNetwork', u"Read network"),
-            description=_('network_urls_allowed',
-                          u"If enabled, network (http, https) urls are "
-                          u"allowed in the rules file and this config."),
-            required=True,
-            default=False,
-        )
+        title=_('readNetwork', u"Read network"),
+        description=_(
+            'network_urls_allowed',
+            u"If enabled, network (http, https) urls are allowed in "
+            u"the rules file and this config."
+        ),
+        required=True,
+        default=False,
+    )
 
     hostnameBlacklist = schema.List(
-            title=_('hostname_blacklist', u"Unthemed host names"),
-            description=_('hostname_blacklist_description',
-                u"If there are hostnames that you do not want to be themed, "
-                u"you can list them here. This is useful during theme "
-                u"development, so that you can compare the themed and unthemed "
-                u"sites. In some cases, you may also want to provided an "
-                u"unthemed host alias for content administrators to be able "
-                u"to use 'plain' Plone."),
-            value_type=schema.TextLine(),
-            required=False,
-            default=[u"127.0.0.1"],
-        )
+        title=_('hostname_blacklist', u"Unthemed host names"),
+        description=_(
+            'hostname_blacklist_description',
+            u"If there are hostnames that you do not want to be themed, you "
+            u"can list them here. This is useful during theme development, "
+            u"so that you can compare the themed and unthemed sites. In some "
+            u"cases, you may also want to provided an unthemed host alias for "
+            u"content administrators to be able to use 'plain' Plone."
+        ),
+        value_type=schema.TextLine(),
+        required=False,
+        default=[u"127.0.0.1"],
+    )
 
     parameterExpressions = schema.Dict(
-            title=_('parameter_expressions', u"Parameter expressions"),
-            description=_('parameter_expressions_description',
-                u"You can define parameters here, which will be passed to "
-                u"the compiled theme. In your rules file, you can refer "
-                u"to a parameter by $name. Parameters are defined using "
-                u"TALES expressions, which should evaluate to a string, "
-                u"a number, a boolean or None. Available variables are "
-                u"`context`, `request`, `portal`, `portal_state`,  and "
-                u"`context_state`."),
-            key_type=schema.ASCIILine(),
-            value_type=schema.ASCIILine(),
-            required=False,
-            default={},
-        )
+        title=_('parameter_expressions', u"Parameter expressions"),
+        description=_(
+            'parameter_expressions_description',
+            u"You can define parameters here, which will be passed to the "
+            u"compiled theme. In your rules file, you can refer to a "
+            u"parameter by $name. Parameters are defined using TALES "
+            u"expressions, which should evaluate to a string, a number, a "
+            u"boolean or None. Available variables are `context`, `request`, "
+            u"`portal`, `portal_state`,  and `context_state`."
+        ),
+        key_type=schema.ASCIILine(),
+        value_type=schema.ASCIILine(),
+        required=False,
+        default={},
+    )
 
     doctype = schema.ASCIILine(
-            title=_('doctype', u"Doctype"),
-            description=_('doctype_description',
-                u'You can specify a Doctype string which will be set on the '
-                u'output, for example "<!DOCTYPE html>". '
-                u'If left blank the default XHTML 1.0 transitional Doctype '
-                u'or that set in the Diazo theme is used.'),
-            required=False,
-            default="",
-        )
+        title=_('doctype', u"Doctype"),
+        description=_(
+            'doctype_description',
+            u'You can specify a Doctype string which will be set on the '
+            u'for example "<!DOCTYPE html>". If left blank the default XHTML '
+            u'1.0 transitional Doctype or that set in the Diazo theme is used.'
+        ),
+        required=False,
+        default="",
+    )
 
 
 class IThemingLayer(Interface):
@@ -183,10 +196,10 @@ class IThemePlugin(Interface):
     """
 
     dependencies = schema.Tuple(
-            title=_(u"Dependencies"),
-            description=_(u"Plugins on which this plugin depends"),
-            value_type=schema.ASCIILine(),
-        )
+        title=_(u"Dependencies"),
+        description=_(u"Plugins on which this plugin depends"),
+        value_type=schema.ASCIILine(),
+    )
 
     def onDiscovery(theme, settings, dependenciesSettings):
         """Called when the theme is discovered at startup time. This is
diff --git a/src/plone/app/theming/plugins/__init__.py b/src/plone/app/theming/plugins/__init__.py
index 1de0d9d..68c04af 100644
--- a/src/plone/app/theming/plugins/__init__.py
+++ b/src/plone/app/theming/plugins/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError: # pragma: no cover
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/src/plone/app/theming/plugins/hooks.py b/src/plone/app/theming/plugins/hooks.py
index b7d4b9d..8fa461f 100644
--- a/src/plone/app/theming/plugins/hooks.py
+++ b/src/plone/app/theming/plugins/hooks.py
@@ -1,25 +1,28 @@
-from plone.resource.utils import queryResourceDirectory
-from plone.resource.utils import iterDirectoriesOfType
-
+# -*- coding: utf-8 -*-
 from plone.app.theming.interfaces import THEME_RESOURCE_NAME
-
+from plone.app.theming.plugins.utils import getPluginSettings
+from plone.app.theming.plugins.utils import getPlugins
 from plone.app.theming.utils import getCurrentTheme
 from plone.app.theming.utils import isThemeEnabled
+from plone.resource.utils import iterDirectoriesOfType
+from plone.resource.utils import queryResourceDirectory
 
-from plone.app.theming.plugins.utils import getPlugins
-from plone.app.theming.plugins.utils import getPluginSettings
 
 def onStartup(event):
     """Call onDiscovery() on each plugin for each theme on startup
     """
-
     plugins = getPlugins()
 
     for themeDirectory in iterDirectoriesOfType(THEME_RESOURCE_NAME):
         pluginSettings = getPluginSettings(themeDirectory, plugins)
 
         for name, plugin in plugins:
-            plugin.onDiscovery(themeDirectory.__name__, pluginSettings[name], pluginSettings)
+            plugin.onDiscovery(
+                themeDirectory.__name__,
+                pluginSettings[name],
+                pluginSettings
+            )
+
 
 def onRequest(object, event):
     """Call onRequest() on each plugin for the eanbled theme on each request
diff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py
index 42e96ea..e110e84 100644
--- a/src/plone/app/theming/plugins/utils.py
+++ b/src/plone/app/theming/plugins/utils.py
@@ -1,52 +1,52 @@
+# -*- coding: utf-8 -*-
 from ConfigParser import SafeConfigParser
-from zope.component import getUtilitiesFor
-
-from plone.resource.manifest import MANIFEST_FILENAME
-
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.app.theming.interfaces import IThemePlugin
-
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.memoize.ram import cache
+from plone.resource.manifest import MANIFEST_FILENAME
+from zope.component import getUtilitiesFor
+
 
 def pluginsCacheKey(fun):
     return len(list(getUtilitiesFor(IThemePlugin)))
 
+
 def pluginSettingsCacheKey(fun, themeDirectory, plugins=None):
     return themeDirectory.__name__, len(plugins)
 
+
 def sortDependencies(plugins):
     """Topological sort
     """
-
     queue = []
-    waiting = {} # (n,p) -> [remaining deps]
+    waiting = {}  # (n,p) -> [remaining deps]
 
-    for n,p in plugins:
+    for n, p in plugins:
         if p.dependencies:
-            waiting[(n,p)] = list(p.dependencies)
+            waiting[(n, p)] = list(p.dependencies)
         else:
-            queue.append((n,p,))
+            queue.append((n, p))
 
     while queue:
-        n,p = queue.pop()
-        yield (n,p,)
+        n, p = queue.pop()
+        yield (n, p)
 
-        for (nw,pw,), deps in waiting.items():
+        for (nw, pw), deps in waiting.items():
             if n in deps:
                 deps.remove(n)
 
             if not deps:
-                queue.append((nw,pw,))
-                del waiting[(nw,pw,)]
+                queue.append((nw, pw))
+                del waiting[(nw, pw)]
 
     if waiting:
         raise ValueError("Could not resolve dependencies for: %s" % waiting)
 
+
 @cache(pluginsCacheKey)
 def getPlugins():
     """Get all registered plugins topologically sorted
     """
-
     plugins = []
 
     for name, plugin in getUtilitiesFor(IThemePlugin):
@@ -54,6 +54,7 @@ def getPlugins():
 
     return list(sortDependencies(plugins))
 
+
 @cache(pluginSettingsCacheKey)
 def getPluginSettings(themeDirectory, plugins=None):
     """Given an IResourceDirectory for a theme, return the settings for the
@@ -63,7 +64,6 @@ def getPluginSettings(themeDirectory, plugins=None):
     Returns a dict of dicts, with the outer dict having plugin names as keys
     and containing plugins settings (key/value pairs) as values.
     """
-
     if plugins is None:
         plugins = getPlugins()
 
@@ -72,15 +72,12 @@ def getPluginSettings(themeDirectory, plugins=None):
     if themeDirectory.isFile(MANIFEST_FILENAME):
         parser = SafeConfigParser()
         fp = themeDirectory.openFile(MANIFEST_FILENAME)
-
         try:
             parser.readfp(fp)
             for section in parser.sections():
                 manifestContents[section] = {}
-
                 for name, value in parser.items(section):
                     manifestContents[section][name] = value
-
         finally:
             try:
                 fp.close()
@@ -89,6 +86,8 @@ def getPluginSettings(themeDirectory, plugins=None):
 
     pluginSettings = {}
     for name, plugin in plugins:
-        pluginSettings[name] = manifestContents.get("%s:%s" % (THEME_RESOURCE_NAME, name), {})
-
+        pluginSettings[name] = manifestContents.get(
+            "{0:s}:{1:s}".format(THEME_RESOURCE_NAME, name),
+            {}
+        )
     return pluginSettings
diff --git a/src/plone/app/theming/testing.py b/src/plone/app/theming/testing.py
index 6f81ef8..07767f0 100644
--- a/src/plone/app/theming/testing.py
+++ b/src/plone/app/theming/testing.py
@@ -1,12 +1,10 @@
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import PLONE_FIXTURE
+# -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
-
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing import applyProfile
-
-from zope.configuration import xmlconfig
-from plone.app.testing.layers import IntegrationTesting
 from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+from zope.configuration import xmlconfig
 
 
 class Theming(PloneSandboxLayer):
@@ -15,7 +13,11 @@ class Theming(PloneSandboxLayer):
     def setUpZope(self, app, configurationContext):
         # load ZCML
         import plone.app.theming.tests
-        xmlconfig.file('configure.zcml', plone.app.theming.tests, context=configurationContext)
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.theming.tests,
+            context=configurationContext
+        )
 
         # Run the startup hook
         from plone.app.theming.plugins.hooks import onStartup
@@ -33,8 +35,16 @@ def setUpZope(self, app, configurationContext):
         # load ZCML
         import plone.app.theming.tests
         import plone.app.caching
-        xmlconfig.file('configure.zcml', plone.app.caching, context=configurationContext)
-        xmlconfig.file('configure.zcml', plone.app.theming.tests, context=configurationContext)
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.caching,
+            context=configurationContext
+        )
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.theming.tests,
+            context=configurationContext
+        )
 
         # Run the startup hook
         from plone.app.theming.plugins.hooks import onStartup
@@ -44,10 +54,21 @@ def setUpPloneSite(self, portal):
         # install into the Plone site
         applyProfile(portal, 'plone.app.caching:default')
         applyProfile(portal, 'plone.app.theming:default')
-        portal['portal_workflow'].setDefaultChain('simple_publication_workflow')
+        portal['portal_workflow'].setDefaultChain(
+            'simple_publication_workflow'
+        )
 
 THEMING_FIXTURE = Theming()
-THEMING_INTEGRATION_TESTING = IntegrationTesting(bases=(THEMING_FIXTURE,), name="Theming:Integration")
-THEMING_FUNCTIONAL_TESTING = FunctionalTesting(bases=(THEMING_FIXTURE,), name="Theming:Functional")
+THEMING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(THEMING_FIXTURE,),
+    name="Theming:Integration"
+)
+THEMING_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(THEMING_FIXTURE,),
+    name="Theming:Functional"
+)
 THEMINGWITHCACHING_FIXTURE = ThemingWithCaching()
-THEMINGWITHCACHING_TESTING = IntegrationTesting(bases=(THEMINGWITHCACHING_FIXTURE,), name="Theming:IntegrationWithCaching")
+THEMINGWITHCACHING_TESTING = IntegrationTesting(
+    bases=(THEMINGWITHCACHING_FIXTURE,),
+    name="Theming:IntegrationWithCaching"
+)
diff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py
index 768a03c..a75beab 100644
--- a/src/plone/app/theming/tests/test_utils.py
+++ b/src/plone/app/theming/tests/test_utils.py
@@ -1,6 +1,6 @@
-import unittest2 as unittest
-
+# -*- coding: utf-8 -*-
 from plone.app.theming.testing import THEMING_INTEGRATION_TESTING
+import unittest2 as unittest
 
 
 class TestIntegration(unittest.TestCase):
@@ -8,7 +8,7 @@ class TestIntegration(unittest.TestCase):
     layer = THEMING_INTEGRATION_TESTING
 
     def test_getOrCreatePersistentResourceDirectory_new(self):
-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
+        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa
 
         d = getOrCreatePersistentResourceDirectory()
         self.assertEqual(d.__name__, "theme")
@@ -16,7 +16,7 @@ def test_getOrCreatePersistentResourceDirectory_new(self):
     def test_getOrCreatePersistentResourceDirectory_exists(self):
         from zope.component import getUtility
         from plone.resource.interfaces import IResourceDirectory
-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
+        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa
 
         persistentDirectory = getUtility(IResourceDirectory, name="persistent")
         persistentDirectory.makeDirectory("theme")
@@ -36,33 +36,51 @@ def test_getAvailableThemes(self):
         self.assertEqual(theme.__name__, 'plone.app.theming.tests')
         self.assertEqual(theme.title, 'Test theme')
         self.assertEqual(theme.description, 'A theme for testing')
-        self.assertEqual(theme.rules, '/++theme++plone.app.theming.tests/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++plone.app.theming.tests')
-        self.assertEqual(theme.parameterExpressions, {'foo': "python:request.get('bar')"})
+        self.assertEqual(
+            theme.rules,
+            '/++theme++plone.app.theming.tests/rules.xml'
+        )
+        self.assertEqual(
+            theme.absolutePrefix,
+            '/++theme++plone.app.theming.tests'
+        )
+        self.assertEqual(
+            theme.parameterExpressions,
+            {'foo': "python:request.get('bar')"}
+        )
         self.assertEqual(theme.doctype, "<!DOCTYPE html>")
 
     def test_getZODBThemes(self):
         import zipfile
         import os.path
-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
+        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa
         from plone.app.theming.utils import getZODBThemes
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'default_rules.zip'))
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'default_rules.zip'
+            )
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        z = zipfile.ZipFile(f)
+            themeContainer = getOrCreatePersistentResourceDirectory()
+            themeContainer.importZip(zf)
 
-        themeContainer = getOrCreatePersistentResourceDirectory()
-        themeContainer.importZip(z)
+            zodbThemes = getZODBThemes()
 
-        zodbThemes = getZODBThemes()
+            self.assertEqual(len(zodbThemes), 1)
 
-        self.assertEqual(len(zodbThemes), 1)
-
-        self.assertEqual(zodbThemes[0].__name__, 'default_rules')
-        self.assertEqual(zodbThemes[0].rules, '/++theme++default_rules/rules.xml')
-        self.assertEqual(zodbThemes[0].absolutePrefix, '/++theme++default_rules')
-
-        f.close()
+            self.assertEqual(zodbThemes[0].__name__, 'default_rules')
+            self.assertEqual(
+                zodbThemes[0].rules,
+                '/++theme++default_rules/rules.xml'
+            )
+            self.assertEqual(
+                zodbThemes[0].absolutePrefix,
+                '/++theme++default_rules'
+            )
 
     def test_applyTheme(self):
         from zope.component import getUtility
@@ -85,7 +103,10 @@ def test_applyTheme(self):
 
         self.assertEqual(settings.rules, theme.rules)
         self.assertEqual(settings.absolutePrefix, theme.absolutePrefix)
-        self.assertEqual(settings.parameterExpressions, theme.parameterExpressions)
+        self.assertEqual(
+            settings.parameterExpressions,
+            theme.parameterExpressions
+        )
         self.assertEqual(settings.doctype, theme.doctype)
 
     def test_applyTheme_None(self):
@@ -142,7 +163,7 @@ def test_isThemeEnabled_blacklist(self):
         self.assertTrue(isThemeEnabled(request, settings))
         self.assertEqual(request.get('SERVER_URL'), 'http://nohost')
 
-        #Should pay no attention to BASE1 and only use SERVER_URL
+        # Should pay no attention to BASE1 and only use SERVER_URL
         settings.hostnameBlacklist.append('nohost')
         self.assertFalse(isThemeEnabled(request, settings))
 
@@ -154,155 +175,205 @@ def test_extractThemeInfo_default_rules(self):
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'default_rules.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'default_rules.zip'
+            )
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        self.assertEqual(theme.__name__, 'default_rules')
-        self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
+            theme = extractThemeInfo(zf)
 
-        f.close()
+            self.assertEqual(theme.__name__, 'default_rules')
+            self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
+            self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
 
     def test_extractThemeInfo_manifest_rules(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_rules.zip'))
-        z = zipfile.ZipFile(f)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_rules.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        theme = extractThemeInfo(z)
+            theme = extractThemeInfo(zf)
 
-        self.assertEqual(theme.__name__, 'manifest_rules')
-        self.assertEqual(theme.rules, 'other.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_rules')
-        self.assertEqual(theme.title, 'Test theme')
-
-        f.close()
+            self.assertEqual(theme.__name__, 'manifest_rules')
+            self.assertEqual(theme.rules, 'other.xml')
+            self.assertEqual(theme.absolutePrefix, '/++theme++manifest_rules')
+            self.assertEqual(theme.title, 'Test theme')
 
     def test_extractThemeInfo_manifest_prefix(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_prefix.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_prefix.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        self.assertEqual(theme.__name__, 'manifest_prefix')
-        self.assertEqual(theme.rules, u'/++theme++manifest_prefix/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/foo')
-        self.assertEqual(theme.title,  'Test theme')
+            theme = extractThemeInfo(zf)
 
-        f.close()
+            self.assertEqual(theme.__name__, 'manifest_prefix')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++manifest_prefix/rules.xml'
+            )
+            self.assertEqual(theme.absolutePrefix, '/foo')
+            self.assertEqual(theme.title,  'Test theme')
 
     def test_extractThemeInfo_manifest_default_rules(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_default_rules.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
-
-        self.assertEqual(theme.__name__, 'manifest_default_rules')
-        self.assertEqual(theme.rules, u'/++theme++manifest_default_rules/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_default_rules')
-        self.assertEqual(theme.title,  'Test theme')
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_default_rules.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+
+            theme = extractThemeInfo(zf)
+
+            self.assertEqual(theme.__name__, 'manifest_default_rules')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++manifest_default_rules/rules.xml'
+            )
+            self.assertEqual(
+                theme.absolutePrefix,
+                '/++theme++manifest_default_rules'
+            )
+            self.assertEqual(theme.title,  'Test theme')
 
     def test_extractThemeInfo_manifest_preview(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_preview.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
-
-        self.assertEqual(theme.__name__, 'manifest_preview')
-        self.assertEqual(theme.rules, u'/++theme++manifest_preview/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_preview')
-        self.assertEqual(theme.title,  'Test theme')
-        self.assertEqual(theme.preview,  'preview.png')
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_preview.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+
+            theme = extractThemeInfo(zf)
+
+            self.assertEqual(theme.__name__, 'manifest_preview')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++manifest_preview/rules.xml'
+            )
+            self.assertEqual(
+                theme.absolutePrefix,
+                '/++theme++manifest_preview'
+            )
+            self.assertEqual(theme.title,  'Test theme')
+            self.assertEqual(theme.preview,  'preview.png')
 
     def test_extractThemeInfo_manifest_default_rules_override(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_default_rules_override.zip'))
-        z = zipfile.ZipFile(f)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_default_rules_override.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        theme = extractThemeInfo(z)
+            theme = extractThemeInfo(zf)
 
-        self.assertEqual(theme.__name__, 'manifest_default_rules_override')
-        self.assertEqual(theme.rules, 'other.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_default_rules_override')
-        self.assertEqual(theme.title,  'Test theme')
-
-        f.close()
+            self.assertEqual(theme.__name__, 'manifest_default_rules_override')
+            self.assertEqual(theme.rules, 'other.xml')
+            self.assertEqual(
+                theme.absolutePrefix,
+                '/++theme++manifest_default_rules_override'
+            )
+            self.assertEqual(theme.title,  'Test theme')
 
     def test_extractThemeInfo_nodir(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'nodir.zip'))
-        z = zipfile.ZipFile(f)
-
-        self.assertRaises(ValueError, extractThemeInfo, z)
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'nodir.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+            self.assertRaises(ValueError, extractThemeInfo, zf)
 
     def test_extractThemeInfo_multiple_dir(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'multiple_dir.zip'))
-        z = zipfile.ZipFile(f)
-
-        self.assertRaises(ValueError, extractThemeInfo, z)
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'multiple_dir.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+            self.assertRaises(ValueError, extractThemeInfo, zf)
 
     def test_extractThemeInfo_ignores_dotfiles_resource_forks(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'ignores_dotfiles_resource_forks.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'ignores_dotfiles_resource_forks.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        self.assertEqual(theme.__name__, 'default_rules')
-        self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
+            theme = extractThemeInfo(zf)
 
-        f.close()
+            self.assertEqual(theme.__name__, 'default_rules')
+            self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
+            self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
 
     def test_extractThemeInfo_with_subdirectories(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'subdirectories.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
-
-        self.assertEqual(theme.__name__, 'subdirectories')
-        self.assertEqual(theme.rules, u'/++theme++subdirectories/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++subdirectories')
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'subdirectories.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+
+            theme = extractThemeInfo(zf)
+
+            self.assertEqual(theme.__name__, 'subdirectories')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++subdirectories/rules.xml'
+            )
+            self.assertEqual(theme.absolutePrefix, '/++theme++subdirectories')
diff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py
index e0d1b23..903e46c 100644
--- a/src/plone/app/theming/theme.py
+++ b/src/plone/app/theming/theme.py
@@ -1,27 +1,30 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from plone.app.theming.interfaces import ITheme
+from zope.interface import implementer
 
 
+@implementer(ITheme)
 class Theme(object):
     """A theme, loaded from a resource directory
     """
 
-    implements(ITheme)
-
-    def __init__(self, name, rules,
-            title=None,
-            description=None,
-            absolutePrefix=None,
-            parameterExpressions=None,
-            doctype=None,
-            preview=None,
-            enabled_bundles=[],
-            disabled_bundles=[],
-            development_css='',
-            development_js='',
-            production_css='',
-            production_js='',
-            tinymce_content_css=''
+    def __init__(
+        self,
+        name,
+        rules,
+        title=None,
+        description=None,
+        absolutePrefix=None,
+        parameterExpressions=None,
+        doctype=None,
+        preview=None,
+        enabled_bundles=[],
+        disabled_bundles=[],
+        development_css='',
+        development_js='',
+        production_css='',
+        production_js='',
+        tinymce_content_css=''
     ):
 
         self.__name__ = name
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 0073705..26dc252 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,32 +1,29 @@
-import logging
-import Globals
-
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from repoze.xmliter.utils import getHTMLSerializer
-
-from zope.interface import implements, Interface
-from zope.component import adapts
-from zope.component import queryUtility
-from zope.component.hooks import getSite
-
-from plone.registry.interfaces import IRegistry
-from plone.transformchain.interfaces import ITransform
-
 from plone.app.theming.interfaces import IThemeSettings, IThemingLayer
-
 from plone.app.theming.utils import compileThemeTransform
-from plone.app.theming.utils import prepareThemeParameters
-from plone.app.theming.utils import isThemeEnabled
 from plone.app.theming.utils import findContext
 from plone.app.theming.utils import getParser
+from plone.app.theming.utils import isThemeEnabled
+from plone.app.theming.utils import prepareThemeParameters
 from plone.app.theming.zmi import patch_zmi
+from plone.registry.interfaces import IRegistry
+from plone.transformchain.interfaces import ITransform
+from repoze.xmliter.utils import getHTMLSerializer
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.component.hooks import getSite
+from zope.interface import Interface
+from zope.interface import implementer
+import Globals
+import logging
 
 # Disable theming of ZMI
 patch_zmi()
 
 LOGGER = logging.getLogger('plone.app.theming')
 
+
 class _Cache(object):
     """Simple cache for the transform
     """
@@ -41,6 +38,7 @@ def updateTransform(self, transform):
     def updateExpressions(self, expressions):
         self.expressions = expressions
 
+
 def getCache(settings):
     # We need a persistent object to hang a _v_ attribute off for caching.
 
@@ -56,6 +54,7 @@ def getCache(settings):
         cache = caches[key] = _Cache()
     return cache
 
+
 def invalidateCache(settings, event):
     """When our settings are changed, invalidate the cache on all zeo clients
     """
@@ -64,14 +63,14 @@ def invalidateCache(settings, event):
     if hasattr(registry, '_v_plone_app_theming_caches'):
         del registry._v_plone_app_theming_caches
 
+
+@implementer(ITransform)
+@adapter(Interface, IThemingLayer)
 class ThemeTransform(object):
     """Late stage in the 8000's transform chain. When plone.app.blocks is
     used, we can benefit from lxml parsing having taken place already.
     """
 
-    implements(ITransform)
-    adapts(Interface, IThemingLayer)
-
     order = 8850
 
     def __init__(self, published, request):
@@ -105,7 +104,13 @@ def setupTransform(self, runtrace=False):
             readNetwork = settings.readNetwork
             parameterExpressions = settings.parameterExpressions
 
-            transform = compileThemeTransform(rules, absolutePrefix, readNetwork, parameterExpressions, runtrace=runtrace)
+            transform = compileThemeTransform(
+                rules,
+                absolutePrefix,
+                readNetwork,
+                parameterExpressions,
+                runtrace=runtrace
+            )
             if transform is None:
                 return None
 
@@ -132,7 +137,8 @@ def parseTree(self, result):
             return None
 
         contentEncoding = self.request.response.getHeader('Content-Encoding')
-        if contentEncoding and contentEncoding in ('zip', 'deflate', 'compress',):
+        if contentEncoding \
+           and contentEncoding in ('zip', 'deflate', 'compress',):
             return None
 
         try:
@@ -151,20 +157,20 @@ def transformIterable(self, result, encoding):
         """
         # Obtain settings. Do nothing if not found
         settings = self.getSettings()
-
         if settings is None:
             return None
-
         if not isThemeEnabled(self.request, settings):
             return None
-
         result = self.parseTree(result)
         if result is None:
             return None
 
         DevelopmentMode = Globals.DevelopmentMode
-        runtrace = (DevelopmentMode and
-            self.request.get('diazo.debug', '').lower() in ('1', 'y', 'yes', 't', 'true'))
+        diazo_debug = self.request.get('diazo.debug', '').lower()
+        runtrace = (
+            DevelopmentMode
+            and diazo_debug in ('1', 'y', 'yes', 't', 'true')
+        )
 
         try:
             etree.clear_error_log()
@@ -183,7 +189,12 @@ def transformIterable(self, result, encoding):
                 cache = getCache(settings)
 
             parameterExpressions = settings.parameterExpressions or {}
-            params = prepareThemeParameters(findContext(self.request), self.request, parameterExpressions, cache)
+            params = prepareThemeParameters(
+                findContext(self.request),
+                self.request,
+                parameterExpressions,
+                cache
+            )
 
             transformed = transform(result.tree, **params)
             error_log = transform.error_log
@@ -200,11 +211,16 @@ def transformIterable(self, result, encoding):
             from diazo.runtrace import generate_debug_html
             # Add debug information to end of body
             body = result.tree.xpath('/html/body')[0]
-            body.insert(-1, generate_debug_html(
-                findContext(self.request).portal_url() + '/++resource++diazo-debug',
-                rules=settings.rules,
-                rules_parser=getParser('rules', settings.readNetwork),
-                error_log = error_log,
-            ))
-
+            debug_url = findContext(
+                self.request
+            ).portal_url() + '/++resource++diazo-debug'
+            body.insert(
+                -1,
+                generate_debug_html(
+                    debug_url,
+                    rules=settings.rules,
+                    rules_parser=getParser('rules', settings.readNetwork),
+                    error_log=error_log,
+                )
+            )
         return result
diff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py
index 3db95d2..beb73b6 100644
--- a/src/plone/app/theming/traversal.py
+++ b/src/plone/app/theming/traversal.py
@@ -1,13 +1,12 @@
-import urllib
-
+# -*- coding: utf-8 -*-
+from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.registry.interfaces import IRegistry
 from plone.resource.traversal import ResourceTraverser
 from plone.resource.utils import queryResourceDirectory
-
+from zExceptions import NotFound
 from zope.component import getUtility
-
-from interfaces import IThemeSettings
+import urllib
 
 
 class ThemeTraverser(ResourceTraverser):
@@ -28,15 +27,13 @@ def current_theme(self):
         return settings.currentTheme
 
     def traverse(self, name, remaining):
-        type = self.name
-
         if name == '':
             name = self.current_theme()
 
         # Note: also fixes possible unicode problems
         name = urllib.quote(name)
 
-        res = queryResourceDirectory(type, name)
+        res = queryResourceDirectory(self.name, name)
         if res is not None:
             return res
 
diff --git a/src/plone/app/theming/upgrade.py b/src/plone/app/theming/upgrade.py
index 22d73ff..0d96248 100644
--- a/src/plone/app/theming/upgrade.py
+++ b/src/plone/app/theming/upgrade.py
@@ -1,13 +1,19 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 
 PROFILE_ID = "profile-plone.app.theming:default"
 
+
 def update_registry(context, logger=None):
     # Run the registry.xml step as that may have defined new attributes
     setup = getToolByName(context, 'portal_setup')
     setup.runImportStepFromProfile(PROFILE_ID, 'plone.app.registry')
 
+
 def update_controlpanel(context, logger=None):
     setup = getToolByName(context, 'portal_setup')
-    setup.runImportStepFromProfile(PROFILE_ID, 'controlpanel',
-                                   run_dependencies=False)
+    setup.runImportStepFromProfile(
+        PROFILE_ID,
+        'controlpanel',
+        run_dependencies=False
+    )
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 9c14afa..3a314b7 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -1,53 +1,41 @@
-import logging
-import Globals
-
-import pkg_resources
-
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
 from ConfigParser import SafeConfigParser
-
-from urlparse import urlsplit
-
-from lxml import etree
-
+from Products.CMFCore.interfaces import IContentish
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.CMFPlone.utils import safe_unicode
+from Products.PageTemplates.Expressions import getEngine
+from StringIO import StringIO
 from diazo.compiler import compile_theme
 from diazo.compiler import quote_param
-
-from zope.component import getUtility
-from zope.component import queryUtility
-from zope.component import queryMultiAdapter
-from zope.globalrequest import getRequest
-from zope.event import notify
-
-from plone.subrequest import subrequest
-
+from lxml import etree
+from plone.app.theming.events import ThemeAppliedEvent
+from plone.app.theming.interfaces import IThemeSettings
+from plone.app.theming.interfaces import MANIFEST_FORMAT
+from plone.app.theming.interfaces import RULE_FILENAME
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+from plone.app.theming.plugins.utils import getPluginSettings
+from plone.app.theming.plugins.utils import getPlugins
+from plone.app.theming.theme import Theme
+from plone.i18n.normalizer.interfaces import IURLNormalizer
+from plone.registry.interfaces import IRegistry
 from plone.resource.interfaces import IResourceDirectory
-from plone.resource.utils import queryResourceDirectory
-from plone.resource.utils import cloneResourceDirectory
-from plone.resource.manifest import getManifest
+from plone.resource.manifest import MANIFEST_FILENAME
 from plone.resource.manifest import extractManifestFromZipFile
 from plone.resource.manifest import getAllResources
+from plone.resource.manifest import getManifest
 from plone.resource.manifest import getZODBResources
-from plone.resource.manifest import MANIFEST_FILENAME
-
-from plone.registry.interfaces import IRegistry
-
-from plone.i18n.normalizer.interfaces import IURLNormalizer
-
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
-from plone.app.theming.interfaces import MANIFEST_FORMAT
-from plone.app.theming.interfaces import RULE_FILENAME
-from plone.app.theming.interfaces import IThemeSettings
-
-from plone.app.theming.events import ThemeAppliedEvent
-from plone.app.theming.theme import Theme
-from plone.app.theming.plugins.utils import getPlugins
-from plone.app.theming.plugins.utils import getPluginSettings
-
-from Products.PageTemplates.Expressions import getEngine
-from Products.CMFCore.interfaces import IContentish
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFPlone.utils import safe_unicode
+from plone.resource.utils import cloneResourceDirectory
+from plone.resource.utils import queryResourceDirectory
+from plone.subrequest import subrequest
+from urlparse import urlsplit
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
+from zope.event import notify
+from zope.globalrequest import getRequest
+import Globals
+import logging
+import pkg_resources
 
 LOGGER = logging.getLogger('plone.app.theming')
 
@@ -156,7 +144,9 @@ def getPortal():
     request = getRequest()
     context = findContext(request)
     portalState = queryMultiAdapter(
-        (context, request), name=u"plone_portal_state")
+        (context, request),
+        name=u"plone_portal_state"
+    )
     if portalState is None:
         return None
     return portalState.portal()
@@ -236,8 +226,8 @@ def isValidThemeDirectory(directory):
     """Determine if the given plone.resource directory is a valid theme
     directory
     """
-    return directory.isFile(MANIFEST_FILENAME) or \
-           directory.isFile(RULE_FILENAME)
+    return directory.isFile(MANIFEST_FILENAME) \
+        or directory.isFile(RULE_FILENAME)
 
 
 def extractThemeInfo(zipfile, checkRules=True):
@@ -249,128 +239,92 @@ def extractThemeInfo(zipfile, checkRules=True):
     Set checkRules=False to disable the rules check.
     """
 
-    resourceName, manifestDict = extractManifestFromZipFile(zipfile, MANIFEST_FORMAT)
-
-    rulesFile = None
-    absolutePrefix = '/++%s++%s' % (THEME_RESOURCE_NAME, resourceName)
-    title = None
-    description = None
-    parameters = {}
-    doctype = ""
-    preview = None
-    enabled_bundles = ''
-    disabled_bundles = ''
-    development_css = ''
-    production_css = ''
-    tinymce_content_css = ''
-    development_js = ''
-    production_js = ''
-
-    if manifestDict is not None:
-        rulesFile = manifestDict.get('rules', rulesFile)
-        absolutePrefix = manifestDict['prefix'] or absolutePrefix
-        title = manifestDict.get('title', None)
-        description = manifestDict.get('title', None)
-        parameters = manifestDict.get('parameters', {})
-        doctype = manifestDict.get('doctype', "")
-        preview = manifestDict.get('preview', None)
-        enabled_bundles = manifestDict.get('enabled-bundles', '')
-        disabled_bundles = manifestDict.get('disabled-bundles', '')
-        development_css = manifestDict.get('development-css', '')
-        production_css = manifestDict.get('production-css', '')
-        tinymce_content_css = manifestDict.get('tinymce-content-css', '')
-        development_js = manifestDict.get('development-js', '')
-        production_js = manifestDict.get('production-js', '')
-
-    if not rulesFile:
+    name, manifest = extractManifestFromZipFile(
+        zipfile,
+        MANIFEST_FORMAT
+    )
+    if not manifest:
+        manifest = {}
+    rules = manifest.get('rules', None)
+    if rules is None:
         if checkRules:
             try:
-                zipfile.getinfo("%s/%s" % (resourceName, RULE_FILENAME,))
+                zipfile.getinfo(
+                    "{0:s}/{1:s}".format(name, RULE_FILENAME)
+                )
             except KeyError:
                 raise ValueError("Could not find theme name and rules file")
-        rulesFile = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, resourceName, RULE_FILENAME,)
-
-    return Theme(resourceName, rulesFile,
-            title=title,
-            description=description,
-            absolutePrefix=absolutePrefix,
-            parameterExpressions=parameters,
-            doctype=doctype,
-            preview=preview,
-            enabled_bundles=enabled_bundles.split(',') if enabled_bundles else [],
-            disabled_bundles=disabled_bundles.split(',') if disabled_bundles else [],
-            development_css=development_css,
-            production_css=production_css,
-            development_js=development_js,
-            production_js=production_js,
-            tinymce_content_css=tinymce_content_css
+        rules = u"/++{0:s}++{1:s}/{0:s}".format(
+            THEME_RESOURCE_NAME,
+            name,
+            RULE_FILENAME
         )
+    return getTheme(name, manifest)
 
 
 def getTheme(name, manifest=None, resources=None):
     if manifest is None:
         if resources is None:
             resources = getAllResources(
-                MANIFEST_FORMAT, filter=isValidThemeDirectory)
+                MANIFEST_FORMAT,
+                filter=isValidThemeDirectory
+            )
         if name not in resources:
             return None
-        manifest = resources[name]
-    title = name.capitalize().replace('-', ' ').replace('.', ' ')
-    description = None
-    rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, name, RULE_FILENAME,)
-    prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME, name,)
-    params = {}
-    doctype = ""
-    preview = None
-    enabled_bundles = ''
-    disabled_bundles = ''
-    development_css = ''
-    development_js = ''
-    production_css = ''
-    production_js = ''
-    tinymce_content_css = ''
-
-    if manifest is not None:
-        title = manifest['title'] or title
-        description = manifest['description'] or description
-        rules = manifest['rules'] or rules
-        prefix = manifest['prefix'] or prefix
-        params = manifest['parameters'] or params
-        doctype = manifest['doctype'] or doctype
-        preview = manifest['preview'] or preview
-        enabled_bundles = manifest['enabled-bundles'] or ''
-        disabled_bundles = manifest['disabled-bundles'] or ''
-        development_css = manifest['development-css'] or ''
-        development_js = manifest['development-js'] or ''
-        production_css = manifest['production-css'] or ''
-        production_js = manifest['production-js'] or ''
-        tinymce_content_css = manifest['tinymce-content-css'] or ''
-
+        manifest = resources[name] or {}
+
+    title = manifest.get('title', None)
+    if title is None:
+        title = name.capitalize().replace('-', ' ').replace('.', ' ')
+    description = manifest.get('description', None)
+    rules = manifest.get('rules', None)
+    if rules is None:
+        rules = u"/++{0:s}++{1:s}/{2:s}".format(
+            THEME_RESOURCE_NAME,
+            name,
+            RULE_FILENAME,
+        )
+    prefix = manifest.get('prefix', None)
+    if prefix is None:
+        prefix = u"/++{0:s}++{1:s}".format(THEME_RESOURCE_NAME, name)
+    params = manifest.get('parameters', None) or {}
+    doctype = manifest.get('doctype', None) or ""
+    preview = manifest.get('preview', None)
+    enabled_bundles = manifest.get('enabled-bundles', None) or ''
+    enabled_bundles = enabled_bundles.split(',') if enabled_bundles else []
+    disabled_bundles = manifest.get('disabled-bundles', None) or ''
+    disabled_bundles = disabled_bundles.split(',') if disabled_bundles else []
+    development_css = manifest.get('development-css', None) or ''
+    development_js = manifest.get('development-js', None) or ''
+    production_css = manifest.get('production-css', None) or ''
+    production_js = manifest.get('production-js', None) or ''
+    tinymce_content_css = manifest.get('tinymce-content-css', None) or ''
     if isinstance(rules, str):
         rules = rules.decode('utf-8')
     if isinstance(prefix, str):
         prefix = prefix.decode('utf-8')
-    return Theme(name, rules,
-            title=title,
-            description=description,
-            absolutePrefix=prefix,
-            parameterExpressions=params,
-            doctype=doctype,
-            preview=preview,
-            enabled_bundles=enabled_bundles.split(',') if enabled_bundles else [],
-            disabled_bundles=disabled_bundles.split(',') if disabled_bundles else [],
-            development_css=development_css,
-            development_js=development_js,
-            production_css=production_css,
-            production_js=production_js,
-            tinymce_content_css=tinymce_content_css
-        )
+    return Theme(
+        name,
+        rules,
+        title=title,
+        description=description,
+        absolutePrefix=prefix,
+        parameterExpressions=params,
+        doctype=doctype,
+        preview=preview,
+        enabled_bundles=enabled_bundles,
+        disabled_bundles=disabled_bundles,
+        development_css=development_css,
+        development_js=development_js,
+        production_css=production_css,
+        production_js=production_js,
+        tinymce_content_css=tinymce_content_css
+    )
 
 
 def getAvailableThemes():
     """Get a list of all ITheme's available in resource directories.
     """
-
     resources = getAllResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)
     themes = []
     for name, manifest in resources.items():
@@ -383,60 +337,15 @@ def getAvailableThemes():
 def getThemeFromResourceDirectory(resourceDirectory):
     """Return a Theme object from a resource directory
     """
-
     name = resourceDirectory.__name__
-
-    title = name.capitalize().replace('-', ' ').replace('.', ' ')
-    description = None
-    rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, name, RULE_FILENAME,)
-    prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME, name,)
-    params = {}
-    doctype = ""
-    enabled_bundles = ''
-    disabled_bundles = ''
-    development_css = ''
-    development_js = ''
-    production_css = ''
-    production_js = ''
-    tinymce_content_css = ''
-
     if resourceDirectory.isFile(MANIFEST_FILENAME):
         manifest = getManifest(
-            resourceDirectory.openFile(MANIFEST_FILENAME), MANIFEST_FORMAT)
-
-        title = manifest['title'] or title
-        description = manifest['description'] or description
-        rules = manifest['rules'] or rules
-        prefix = manifest['prefix'] or prefix
-        params = manifest['parameters'] or params
-        doctype = manifest['doctype'] or doctype
-        enabled_bundles = manifest['enabled-bundles'] or ''
-        disabled_bundles = manifest['disabled-bundles'] or ''
-        development_css = manifest['development-css'] or ''
-        development_js = manifest['development-js'] or ''
-        production_css = manifest['production-css'] or ''
-        production_js = manifest['production-js'] or ''
-        tinymce_content_css = manifest['tinymce-content-css'] or ''
-
-    if isinstance(rules, str):
-        rules = rules.decode('utf-8')
-    if isinstance(prefix, str):
-        prefix = prefix.decode('utf-8')
+            resourceDirectory.openFile(MANIFEST_FILENAME), MANIFEST_FORMAT
+        )
+    else:
+        manifest = {}
 
-    return Theme(name, rules,
-                title=title,
-                description=description,
-                absolutePrefix=prefix,
-                parameterExpressions=params,
-                doctype=doctype,
-                enabled_bundles=enabled_bundles.split(',') if enabled_bundles else [],
-                disabled_bundles=disabled_bundles.split(',') if disabled_bundles else [],
-                development_css=development_css,
-                development_js=development_js,
-                production_css=production_css,
-                production_js=production_js,
-                tinymce_content_css=tinymce_content_css
-            )
+    return getTheme(name, manifest)
 
 
 def getZODBThemes():
@@ -484,23 +393,21 @@ def isThemeEnabled(request, settings=None):
         return False
 
     # Check for diazo.off request parameter
-    if (DevelopmentMode and
-        request.get('diazo.off', '').lower() in ('1', 'y', 'yes', 't', 'true')
-    ):
+    true_vals = ('1', 'y', 'yes', 't', 'true')
+    if (DevelopmentMode and request.get('diazo.off', '').lower() in true_vals):
         return False
 
     if settings is None:
         registry = queryUtility(IRegistry)
         if registry is None:
             return False
-
         settings = registry.forInterface(IThemeSettings, False)
 
     if not settings.enabled or not settings.rules:
         return False
 
     server_url = request.get('SERVER_URL')
-    _, host = server_url.split('://', 1)
+    proto, host = server_url.split('://', 1)
     host = host.lower()
     serverPort = request.get('SERVER_PORT')
 
@@ -624,6 +531,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):
 
     return themeName
 
+
 def getParser(type, readNetwork):
     """Set up a parser for either rules, theme or compiler
     """
@@ -640,39 +548,54 @@ def getParser(type, readNetwork):
         parser.resolvers.add(NetworkResolver())
     return parser
 
-def compileThemeTransform(rules, absolutePrefix=None, readNetwork=False, parameterExpressions=None, runtrace=False):
+
+def compileThemeTransform(
+    rules,
+    absolutePrefix=None,
+    readNetwork=False,
+    parameterExpressions=None,
+    runtrace=False
+):
     """Prepare the theme transform by compiling the rules with the given options
     """
 
     if parameterExpressions is None:
         parameterExpressions = {}
 
-    accessControl = etree.XSLTAccessControl(read_file=True, write_file=False, create_dir=False, read_network=readNetwork, write_network=False)
+    accessControl = etree.XSLTAccessControl(
+        read_file=True,
+        write_file=False,
+        create_dir=False,
+        read_network=readNetwork,
+        write_network=False
+    )
 
     if absolutePrefix:
         absolutePrefix = expandAbsolutePrefix(absolutePrefix)
-
-    params = set(parameterExpressions.keys() + ['url', 'base', 'path', 'scheme', 'host'])
-    xslParams = dict((k, '') for k in params)
-
-    compiledTheme = compile_theme(rules,
-            absolute_prefix=absolutePrefix,
-            parser=getParser('theme', readNetwork),
-            rules_parser=getParser('rules', readNetwork),
-            compiler_parser=getParser('compiler', readNetwork),
-            read_network=readNetwork,
-            access_control=accessControl,
-            update=True,
-            xsl_params=xslParams,
-            runtrace=runtrace,
-        )
+    params = set(['url', 'base', 'path', 'scheme', 'host'])
+    params.update(parameterExpressions.keys())
+    xslParams = {k: '' for k in params}
+
+    compiledTheme = compile_theme(
+        rules,
+        absolute_prefix=absolutePrefix,
+        parser=getParser('theme', readNetwork),
+        rules_parser=getParser('rules', readNetwork),
+        compiler_parser=getParser('compiler', readNetwork),
+        read_network=readNetwork,
+        access_control=accessControl,
+        update=True,
+        xsl_params=xslParams,
+        runtrace=runtrace,
+    )
 
     if not compiledTheme:
         return None
 
-    return etree.XSLT(compiledTheme,
-            access_control=accessControl,
-        )
+    return etree.XSLT(
+        compiledTheme,
+        access_control=accessControl,
+    )
 
 
 def prepareThemeParameters(context, request, parameterExpressions, cache=None):
@@ -688,32 +611,33 @@ def prepareThemeParameters(context, request, parameterExpressions, cache=None):
     parts = urlsplit(base.lower())
 
     params = dict(
-            url=quote_param(url),
-            base=quote_param(base),
-            path=quote_param(path),
-            scheme=quote_param(parts.scheme),
-            host=quote_param(parts.netloc),
-        )
+        url=quote_param(url),
+        base=quote_param(base),
+        path=quote_param(path),
+        scheme=quote_param(parts.scheme),
+        host=quote_param(parts.netloc),
+    )
 
     # Add expression-based parameters
-    if parameterExpressions:
+    if not parameterExpressions:
+        return params
 
-        # Compile and cache expressions
-        expressions = None
-        if cache is not None:
-            expressions = cache.expressions
+    # Compile and cache expressions
+    expressions = None
+    if cache is not None:
+        expressions = cache.expressions
 
-        if expressions is None:
-            expressions = {}
-            for name, expressionText in parameterExpressions.items():
-                expressions[name] = compileExpression(expressionText)
+    if expressions is None:
+        expressions = {}
+        for name, expressionText in parameterExpressions.items():
+            expressions[name] = compileExpression(expressionText)
 
-            if cache is not None:
-                cache.updateExpressions(expressions)
+        if cache is not None:
+            cache.updateExpressions(expressions)
 
-        # Execute all expressions
-        expressionContext = createExpressionContext(context, request)
-        for name, expression in expressions.items():
-            params[name] = quote_param(expression(expressionContext))
+    # Execute all expressions
+    expressionContext = createExpressionContext(context, request)
+    for name, expression in expressions.items():
+        params[name] = quote_param(expression(expressionContext))
 
     return params


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-04-30T13:35:29+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/26f0b4b88859e037e7c7ad19d11ebf0607c5e89f

accidentially kept version specifier of roman lib

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index 989d72c..83197b8 100644
--- a/setup.py
+++ b/setup.py
@@ -52,7 +52,7 @@
         'plone.subrequest',
         'plone.transformchain',
         'repoze.xmliter>=0.3',
-        'roman>=2.0.0',
+        'roman',
         'setuptools',
         'zope.traversing',
     ],


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-04-30T07:55:51-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/0e6377ea68499d3174f0919c38abe8038ece430f

Merge pull request #45 from plone/jensens-cleanup

housekeeping: pep8ified, cleanup, ...

Files changed:
A docs/CHANGES.rst
M setup.py
M src/plone/app/theming/__init__.py
M src/plone/app/theming/browser/__init__.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/mapper.py
M src/plone/app/theming/events.py
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/header.py
M src/plone/app/theming/interfaces.py
M src/plone/app/theming/plugins/__init__.py
M src/plone/app/theming/plugins/hooks.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/testing.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/upgrade.py
M src/plone/app/theming/utils.py
D docs/HISTORY.rst

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
new file mode 100644
index 0000000..05a198a
--- /dev/null
+++ b/docs/CHANGES.rst
@@ -0,0 +1,336 @@
+Changelog
+=========
+
+1.2.3 (unreleased)
+------------------
+
+- unified different getTheme functions.
+  [jensens]
+
+- pep8ified, housekeeping, cleanup
+  [jensens]
+
+- Specify i18n:domain in controlpanel.pt.
+  [vincentfretin]
+
+- pat-modal pattern has been renamed to pat-plone-modal
+  [jcbrand]
+
+- Fix load pluginSettings for the enabled theme before calling plugins for
+  onEnabled and call onEnabled plugins with correct parameters
+  [datakurre]
+
+
+1.2.2 (2015-03-22)
+------------------
+
+- Patch the ZMI only for available ZMI pages.
+  [thet]
+
+- Change deprecated import of ``zope.site.hooks.getSite`` to
+  ``zope.component.hooks.getSite``.
+  [thet]
+
+- Add an error log if the subrequest failed (probably a relative xi:include)
+  instead of silently returning None (and so having a xi:include returning
+  nothing).
+  [vincentfretin]
+
+- Fix transform to not affect the result when theming is disabled
+  [datakurre]
+
+- Integrate thememapper mockup pattern and fix theming control panel
+  to be more usable
+  [ebrehault]
+
+
+1.2.1 (2014-10-23)
+------------------
+
+- Remove DL's from portal message in templates.
+  https://github.com/plone/Products.CMFPlone/issues/153
+  [khink]
+
+- Fix "Insufficient Privileges" for "Site Administrators" on the control panel.
+  [@rpatterson]
+
+- Add IThemeAppliedEvent
+  [vangheem]
+
+- Put themes in a separate zcml file to be able to exclude them
+  [laulaz]
+
+- #14107 bot requests like /widget/oauth_login/info.txt causes
+  problems finding correct context with plone.app.theming
+  [anthonygerrard]
+
+- Added support for ++theme++ to traverse to the contents of the
+  current activated theme.
+  [bosim]
+
+
+1.2.0 (2014-03-02)
+------------------
+
+- Disable theming for manage_shutdown view.
+  [davisagli]
+
+- Fix reference to theme error template
+  [afrepues]
+
+- Add "Test Styles" button in control panel to expose, test_rendering template.
+  [runyaga]
+
+1.1.1 (2013-05-23)
+------------------
+
+- Fixed i18n issues.
+  [thomasdesvenain]
+
+- Fixed i18n issues.
+  [jianaijun]
+
+- This fixed UnicodeDecodeError when Theme Title is Non-ASCII
+  in the manifest.cfg file.
+  [jianaijun]
+
+
+1.1 (2013-04-06)
+----------------
+
+- Fixed i18n issues.
+  [vincentfretin]
+
+- Make the template theme do what it claims to do: copy styles as
+  well as scripts.
+  [smcmahon]
+
+- Change the label and description for the example theme to supply useful
+  information.
+  [smcmahon]
+
+- Upgrades from 1.0 get the combined "Theming" control panel that was added in
+  1.1a1.
+  [danjacka]
+
+
+1.1b2 (2013-01-01)
+------------------
+
+- Ensure host blacklist utilises SERVER_URL to correctly determine hostname
+  for sites hosted as sub-folders at any depth.
+  [davidjb]
+
+- Add test about plone.app.theming / plone.app.caching integration when
+  using GZIP compression for anonymous
+  (see ticket `12038 <https://dev.plone.org/ticket/12038>`_). [ebrehault]
+
+
+1.1b1 (2012-10-16)
+------------------
+
+- Add diazo.debug option, route all error_log output through
+  this so debugging can be displayed
+  [lentinj]
+
+- Make example Bootstrap-based theme use the HTML5 DOCTYPE.
+  [danjacka]
+
+- Demote ZMI patch log message to debug level.
+  [hannosch]
+
+- Upgrade to ACE 1.0 via plone.resourceeditor
+  [optilude]
+
+- Put quotes around jQuery attribute selector values to appease
+  jQuery 1.7.2.
+  [danjacka]
+
+1.1a2 (2012-08-30)
+------------------
+
+- Protect the control panel with a specific permission so it can be
+  delegated.
+  [davisagli]
+
+- Advise defining ajax_load as ``request.form.get('ajax_load')`` in
+  manifest.cfg.  For instance, the login_form has an hidden empty
+  ajax_load input, which would give an unthemed page after submitting
+  the form.
+  [maurits]
+
+- Change theme editor page templates to use main_template rather than
+  prefs_main_template to avoid inserting CSS and JavaScript too early
+  under plonetheme.classic.
+  [danjacka]
+
+1.1a1 (2012-08-08)
+------------------
+
+- Replace the stock "Themes" control panel with a renamed "Theming" control
+  panel, which incorporates the former's settings under its "Advanced" tab.
+  [optilude]
+
+- Add a full in-Plone theme authoring environment
+  [optilude, vangheem]
+
+- Update IBeforeTraverseEvent import to zope.traversing.
+  [hannosch]
+
+- On tab "Manage themes", change table header to
+  better describe what's actually listed.
+  [kleist]
+
+1.0 (2012-04-15)
+----------------
+
+* Prevent AttributeError when getRequest returns None.
+  [maurits]
+
+* Calculate subrequests against navigation root rather than portal.
+  [elro]
+
+* Supply closest context found for 404 pages.
+  [elro]
+
+* Lookup portal state with correct context.
+  [elro]
+
+1.0b9 - 2011-11-02
+------------------
+
+* Patch App.Management.Navigation to disable theming of ZMI pages.
+  [elro]
+
+1.0b8 - 2011-07-04
+------------------
+
+* Evaluate theme parameters regardless of whether there is a valid context or
+  not (e.g. when templating a 404 page).
+  [lentinj]
+
+1.0b7 - 2011-06-12
+------------------
+
+* Moved the *views* and *overrides* plugins out into a separate package
+  ``plone.app.themingplugins``. If you want to use those features, you need
+  to install that package in your buildout. Themes attempting to register
+  views or overrides in environments where ``plone.app.themingplugins`` is not
+  installed will install, but views and overrides will not take effect.
+  [optilude]
+
+1.0b6 - 2011-06-08
+------------------
+
+* Support for setting arbitrary Doctypes.
+  [elro]
+
+* Upgrade step to update plone.app.registry configuration.
+  [elro]
+
+* Fixed plugin initialization when applying a theme.
+  [maurits]
+
+* Query the resource directory using the 'currentTheme' name instead
+  of the Theme object (updating the control panel was broken).
+  [maurits]
+
+* Fix zip import (plugin initialization was broken.)
+  [elro]
+
+1.0b5 - 2011-05-29
+------------------
+
+* Make sure the control panel is never themed, by setting the X-Theme-Disabled
+  response header.
+  [optilude]
+
+* Add support for registering new views from Zope Page Templates and
+  overriding existing templates. See README for more details.
+  [optilude]
+
+1.0b4 - 2011-05-24
+------------------
+
+* Add support for ``X-Theme-Disabled`` response header.
+  [elro]
+
+* Make "Replace existing theme" checkbox default to off.
+  [elro]
+
+* Fix control panel to correctly display a newly uploaded theme.
+  [elro]
+
+* Fix zip import to work correctly when no manifest is supplied.
+  [elro]
+
+1.0b3 - 2011-05-23
+------------------
+
+* Show theme name along with title in control panel.
+  [elro]
+
+1.0b2 - 2011-05-16
+------------------
+
+* Encode internally resolved documents to support non-ascii characters
+  correctly.
+  [elro]
+
+* Fix control panel to use theme name not id.
+  [optilude]
+
+1.0b1 - 2011-04-22
+------------------
+
+* Wrap internal subrequests for css or js in style or script tags to
+  facilitate inline includes.
+  [elro]
+
+* Add ``theme.xml`` import step (see README).
+  [optilude]
+
+* Add support for ``[theme:parameters]`` section in ``manifest.cfg``, which
+  can be used to set parameters and the corresponding TALES expressions to
+  calculate them.
+  [optilude]
+
+* Add support for parameter expressions based on TALES expressions
+  [optilude]
+
+* Use plone.subrequest 1.6 features to work with IStreamIterator from
+  plone.resource.
+  [elro]
+
+* Depend on ``Products.CMFPlone`` instead of ``Plone``.
+  [elro]
+
+* Added support for uploading themes as Zip archives.
+  [optilude]
+
+* Added theme off switch: Add a query string parameter ``diazo.off=1`` to a
+  request whilst Zope is in development mode to turn off the theme.
+  [optilude]
+
+* Removed 'theme' and alternative themes support: Themes should be referenced
+  using the ``<theme />`` directive in the Diazo rules file.
+  [optilude]
+
+* Removed 'domains' support: This can be handled with the rules file syntax
+  by using the ``host`` parameter.
+  [optilude]
+
+* Removed 'notheme' support: This can be handled within the rules file syntax
+  by using the ``path`` parameter.
+  [optilude]
+
+* Added ``path`` and ``host`` as parameters to the Diazo rules file. These
+  can now be used as conditional expressions.
+  [optilude]
+
+* Removed dependency on XDV in favour of dependency on Diazo (which is the
+  new name for XDV).
+  [optilude]
+
+* Forked from collective.xdv 1.0rc11.
+  [optilude]
diff --git a/docs/HISTORY.rst b/docs/HISTORY.rst
deleted file mode 100644
index b0e022f..0000000
--- a/docs/HISTORY.rst
+++ /dev/null
@@ -1,330 +0,0 @@
-Changelog
-=========
-
-1.2.3 (unreleased)
-------------------
-
-- Specify i18n:domain in controlpanel.pt.
-  [vincentfretin]
-
-- pat-modal pattern has been renamed to pat-plone-modal
-  [jcbrand]
-
-- Fix load pluginSettings for the enabled theme before calling plugins for
-  onEnabled and call onEnabled plugins with correct parameters
-  [datakurre]
-
-
-1.2.2 (2015-03-22)
-------------------
-
-- Patch the ZMI only for available ZMI pages.
-  [thet]
-
-- Change deprecated import of ``zope.site.hooks.getSite`` to
-  ``zope.component.hooks.getSite``.
-  [thet]
-
-- Add an error log if the subrequest failed (probably a relative xi:include)
-  instead of silently returning None (and so having a xi:include returning
-  nothing).
-  [vincentfretin]
-
-- Fix transform to not affect the result when theming is disabled
-  [datakurre]
-
-- Integrate thememapper mockup pattern and fix theming control panel
-  to be more usable
-  [ebrehault]
-
-
-1.2.1 (2014-10-23)
-------------------
-
-- Remove DL's from portal message in templates.
-  https://github.com/plone/Products.CMFPlone/issues/153
-  [khink]
-
-- Fix "Insufficient Privileges" for "Site Administrators" on the control panel.
-  [@rpatterson]
-
-- Add IThemeAppliedEvent
-  [vangheem]
-
-- Put themes in a separate zcml file to be able to exclude them
-  [laulaz]
-
-- #14107 bot requests like /widget/oauth_login/info.txt causes
-  problems finding correct context with plone.app.theming
-  [anthonygerrard]
-
-- Added support for ++theme++ to traverse to the contents of the
-  current activated theme.
-  [bosim]
-
-
-1.2.0 (2014-03-02)
-------------------
-
-- Disable theming for manage_shutdown view.
-  [davisagli]
-
-- Fix reference to theme error template
-  [afrepues]
-
-- Add "Test Styles" button in control panel to expose, test_rendering template.
-  [runyaga]
-
-1.1.1 (2013-05-23)
-------------------
-
-- Fixed i18n issues.
-  [thomasdesvenain]
-
-- Fixed i18n issues.
-  [jianaijun]
-
-- This fixed UnicodeDecodeError when Theme Title is Non-ASCII
-  in the manifest.cfg file.
-  [jianaijun]
-
-
-1.1 (2013-04-06)
-----------------
-
-- Fixed i18n issues.
-  [vincentfretin]
-
-- Make the template theme do what it claims to do: copy styles as
-  well as scripts.
-  [smcmahon]
-
-- Change the label and description for the example theme to supply useful
-  information.
-  [smcmahon]
-
-- Upgrades from 1.0 get the combined "Theming" control panel that was added in
-  1.1a1.
-  [danjacka]
-
-
-1.1b2 (2013-01-01)
-------------------
-
-- Ensure host blacklist utilises SERVER_URL to correctly determine hostname
-  for sites hosted as sub-folders at any depth.
-  [davidjb]
-
-- Add test about plone.app.theming / plone.app.caching integration when
-  using GZIP compression for anonymous
-  (see ticket `12038 <https://dev.plone.org/ticket/12038>`_). [ebrehault]
-
-
-1.1b1 (2012-10-16)
-------------------
-
-- Add diazo.debug option, route all error_log output through
-  this so debugging can be displayed
-  [lentinj]
-
-- Make example Bootstrap-based theme use the HTML5 DOCTYPE.
-  [danjacka]
-
-- Demote ZMI patch log message to debug level.
-  [hannosch]
-
-- Upgrade to ACE 1.0 via plone.resourceeditor
-  [optilude]
-
-- Put quotes around jQuery attribute selector values to appease
-  jQuery 1.7.2.
-  [danjacka]
-
-1.1a2 (2012-08-30)
-------------------
-
-- Protect the control panel with a specific permission so it can be
-  delegated.
-  [davisagli]
-
-- Advise defining ajax_load as ``request.form.get('ajax_load')`` in
-  manifest.cfg.  For instance, the login_form has an hidden empty
-  ajax_load input, which would give an unthemed page after submitting
-  the form.
-  [maurits]
-
-- Change theme editor page templates to use main_template rather than
-  prefs_main_template to avoid inserting CSS and JavaScript too early
-  under plonetheme.classic.
-  [danjacka]
-
-1.1a1 (2012-08-08)
-------------------
-
-- Replace the stock "Themes" control panel with a renamed "Theming" control
-  panel, which incorporates the former's settings under its "Advanced" tab.
-  [optilude]
-
-- Add a full in-Plone theme authoring environment
-  [optilude, vangheem]
-
-- Update IBeforeTraverseEvent import to zope.traversing.
-  [hannosch]
-
-- On tab "Manage themes", change table header to
-  better describe what's actually listed.
-  [kleist]
-
-1.0 (2012-04-15)
-----------------
-
-* Prevent AttributeError when getRequest returns None.
-  [maurits]
-
-* Calculate subrequests against navigation root rather than portal.
-  [elro]
-
-* Supply closest context found for 404 pages.
-  [elro]
-
-* Lookup portal state with correct context.
-  [elro]
-
-1.0b9 - 2011-11-02
-------------------
-
-* Patch App.Management.Navigation to disable theming of ZMI pages.
-  [elro]
-
-1.0b8 - 2011-07-04
-------------------
-
-* Evaluate theme parameters regardless of whether there is a valid context or
-  not (e.g. when templating a 404 page).
-  [lentinj]
-
-1.0b7 - 2011-06-12
-------------------
-
-* Moved the *views* and *overrides* plugins out into a separate package
-  ``plone.app.themingplugins``. If you want to use those features, you need
-  to install that package in your buildout. Themes attempting to register
-  views or overrides in environments where ``plone.app.themingplugins`` is not
-  installed will install, but views and overrides will not take effect.
-  [optilude]
-
-1.0b6 - 2011-06-08
-------------------
-
-* Support for setting arbitrary Doctypes.
-  [elro]
-
-* Upgrade step to update plone.app.registry configuration.
-  [elro]
-
-* Fixed plugin initialization when applying a theme.
-  [maurits]
-
-* Query the resource directory using the 'currentTheme' name instead
-  of the Theme object (updating the control panel was broken).
-  [maurits]
-
-* Fix zip import (plugin initialization was broken.)
-  [elro]
-
-1.0b5 - 2011-05-29
-------------------
-
-* Make sure the control panel is never themed, by setting the X-Theme-Disabled
-  response header.
-  [optilude]
-
-* Add support for registering new views from Zope Page Templates and
-  overriding existing templates. See README for more details.
-  [optilude]
-
-1.0b4 - 2011-05-24
-------------------
-
-* Add support for ``X-Theme-Disabled`` response header.
-  [elro]
-
-* Make "Replace existing theme" checkbox default to off.
-  [elro]
-
-* Fix control panel to correctly display a newly uploaded theme.
-  [elro]
-
-* Fix zip import to work correctly when no manifest is supplied.
-  [elro]
-
-1.0b3 - 2011-05-23
-------------------
-
-* Show theme name along with title in control panel.
-  [elro]
-
-1.0b2 - 2011-05-16
-------------------
-
-* Encode internally resolved documents to support non-ascii characters
-  correctly.
-  [elro]
-
-* Fix control panel to use theme name not id.
-  [optilude]
-
-1.0b1 - 2011-04-22
-------------------
-
-* Wrap internal subrequests for css or js in style or script tags to
-  facilitate inline includes.
-  [elro]
-
-* Add ``theme.xml`` import step (see README).
-  [optilude]
-
-* Add support for ``[theme:parameters]`` section in ``manifest.cfg``, which
-  can be used to set parameters and the corresponding TALES expressions to
-  calculate them.
-  [optilude]
-
-* Add support for parameter expressions based on TALES expressions
-  [optilude]
-
-* Use plone.subrequest 1.6 features to work with IStreamIterator from
-  plone.resource.
-  [elro]
-
-* Depend on ``Products.CMFPlone`` instead of ``Plone``.
-  [elro]
-
-* Added support for uploading themes as Zip archives.
-  [optilude]
-
-* Added theme off switch: Add a query string parameter ``diazo.off=1`` to a
-  request whilst Zope is in development mode to turn off the theme.
-  [optilude]
-
-* Removed 'theme' and alternative themes support: Themes should be referenced
-  using the ``<theme />`` directive in the Diazo rules file.
-  [optilude]
-
-* Removed 'domains' support: This can be handled with the rules file syntax
-  by using the ``host`` parameter.
-  [optilude]
-
-* Removed 'notheme' support: This can be handled within the rules file syntax
-  by using the ``path`` parameter.
-  [optilude]
-
-* Added ``path`` and ``host`` as parameters to the Diazo rules file. These
-  can now be used as conditional expressions.
-  [optilude]
-
-* Removed dependency on XDV in favour of dependency on Diazo (which is the
-  new name for XDV).
-  [optilude]
-
-* Forked from collective.xdv 1.0rc11.
-  [optilude]
diff --git a/setup.py b/setup.py
index c14f1ef..83197b8 100644
--- a/setup.py
+++ b/setup.py
@@ -1,51 +1,66 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 import os
 
 version = '1.2.3.dev0'
 
-setup(name='plone.app.theming',
-      version=version,
-      description="Integrates the Diazo theming engine with Plone",
-      long_description=open("README.rst").read() + "\n\n" +
-                       open(os.path.join("src", "plone", "app", "theming", "browser", "resources", "userguide.rst")).read() + "\n\n" +
-                       open(os.path.join("docs", "HISTORY.rst")).read(),
-      # Get more strings from http://www.python.org/pypi?%3Aaction=list_classifiers
-      classifiers=[
+longdescription = open("README.rst").read()
+longdescription += "\n\n"
+longdescription += open(
+    os.path.join(
+        "src",
+        "plone",
+        "app",
+        "theming",
+        "browser",
+        "resources",
+        "userguide.rst"
+    )
+).read()
+longdescription += open(os.path.join("docs", "CHANGES.rst")).read()
+
+setup(
+    name='plone.app.theming',
+    version=version,
+    description="Integrates the Diazo theming engine with Plone",
+    long_description=longdescription,
+    classifiers=[
         "Framework :: Plone",
         "Programming Language :: Python",
         "Topic :: Software Development :: Libraries :: Python Modules",
-        ],
-      keywords='plone diazo xdv deliverance theme transform xslt',
-      author='Martin Aspeli and Laurence Rowe',
-      author_email='optilude@gmail.com',
-      url='http://pypi.python.org/pypi/plone.app.theming',
-      license='GPL',
-      packages=find_packages('src'),
-      package_dir={'': 'src'},
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'diazo>=1.0.3',
-          'docutils',
-          'roman',
-          'lxml>=2.2.4',
-          'plone.app.registry>=1.0a2',
-          'plone.subrequest',
-          'plone.transformchain',
-          'plone.resource>=1.0b5',
-          'plone.resourceeditor>=2.0.0.dev',
-          'repoze.xmliter>=0.3',
-          'five.globalrequest',
-          'Products.CMFPlone',
-          'zope.traversing',
-      ],
-      extras_require={
+    ],
+    keywords='plone diazo xdv deliverance theme transform xslt',
+    author='Martin Aspeli and Laurence Rowe',
+    author_email='optilude@gmail.com',
+    url='http://pypi.python.org/pypi/plone.app.theming',
+    license='GPL',
+    packages=find_packages('src'),
+    package_dir={'': 'src'},
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'Products.CMFPlone',
+        'diazo>=1.0.3',
+        'docutils',
+        'five.globalrequest',
+        'lxml>=2.2.4',
+        'plone.app.registry>=1.0a2',
+        'plone.resource>=1.0b5',
+        'plone.resourceeditor>=2.0.0.dev',
+        'plone.subrequest',
+        'plone.transformchain',
+        'repoze.xmliter>=0.3',
+        'roman',
+        'setuptools',
+        'zope.traversing',
+    ],
+    extras_require={
         'test': ['plone.app.testing'],
-      },
-      entry_points="""
-      [z3c.autoinclude.plugin]
-      target = plone
-      """,
-      )
+    },
+    entry_points="""
+    [z3c.autoinclude.plugin]
+    target = plone
+    """,
+    )
diff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py
index d9b386d..c08456a 100644
--- a/src/plone/app/theming/__init__.py
+++ b/src/plone/app/theming/__init__.py
@@ -1,12 +1,10 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError: # pragma: no cover
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+# make this a namespace packages (plone.app.theming.plugins is an
+# extensible python namespace
+__import__('pkg_resources').declare_namespace(__name__)
 
 # Some systems have a broken/missing ``roman`` module; monkey patch one in
-
+# XXX: DO we still need this?
 try:
     import roman
 except ImportError:
diff --git a/src/plone/app/theming/browser/__init__.py b/src/plone/app/theming/browser/__init__.py
index e69de29..40a96af 100644
--- a/src/plone/app/theming/browser/__init__.py
+++ b/src/plone/app/theming/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 9f1fdbf..83c3cb4 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -1,39 +1,32 @@
-import logging
-import zipfile
-
-from zope.component import getUtility
-from zope.component import getMultiAdapter
-from zope.schema.interfaces import IVocabularyFactory
-from zope.publisher.browser import BrowserView
-
-from plone.resource.utils import queryResourceDirectory
-from plone.registry.interfaces import IRegistry
-
-from plone.memoize.instance import memoize
-
-from plone.app.theming.interfaces import _
+# -*- coding: utf-8 -*-
+from AccessControl import Unauthorized
+from Products.CMFCore.utils import getToolByName
+from Products.Five.browser.decode import processInputs
+from Products.statusmessages.interfaces import IStatusMessage
+from plone.app.controlpanel.skins import ISkinsSchema
+from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.app.theming.interfaces import RULE_FILENAME
-from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import TEMPLATE_THEME
-
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+from plone.app.theming.interfaces import _
+from plone.app.theming.plugins.utils import getPluginSettings
+from plone.app.theming.plugins.utils import getPlugins
+from plone.app.theming.utils import applyTheme
+from plone.app.theming.utils import createThemeFromTemplate
 from plone.app.theming.utils import extractThemeInfo
-from plone.app.theming.utils import getZODBThemes
 from plone.app.theming.utils import getAvailableThemes
-from plone.app.theming.utils import applyTheme
 from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
-from plone.app.theming.utils import createThemeFromTemplate
-
-from plone.app.theming.plugins.utils import getPluginSettings
-from plone.app.theming.plugins.utils import getPlugins
-
-from plone.app.controlpanel.skins import ISkinsSchema
-
-from AccessControl import Unauthorized
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.decode import processInputs
-from Products.statusmessages.interfaces import IStatusMessage
+from plone.app.theming.utils import getZODBThemes
+from plone.memoize.instance import memoize
+from plone.registry.interfaces import IRegistry
+from plone.resource.utils import queryResourceDirectory
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.publisher.browser import BrowserView
+from zope.schema.interfaces import IVocabularyFactory
+import logging
+import zipfile
 
 logger = logging.getLogger('plone.app.theming')
 
@@ -52,14 +45,25 @@ def __call__(self):
         return ''
 
     def _setup(self):
-        self.settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
+        self.settings = getUtility(IRegistry).forInterface(
+            IThemeSettings,
+            False
+        )
         self.zodbThemes = getZODBThemes()
         self.availableThemes = getAvailableThemes()
-        self.selectedTheme = self.getSelectedTheme(self.availableThemes, self.settings.rules)
+        self.selectedTheme = self.getSelectedTheme(
+            self.availableThemes,
+            self.settings.rules
+        )
         self.overlay = ''
 
         self.skinsSettings = ISkinsSchema(self.context)
-        self.skinsVocabulary = getUtility(IVocabularyFactory, name='plone.app.vocabularies.Skins')(self.context)
+        self.skinsVocabulary = getUtility(
+            IVocabularyFactory,
+            name='plone.app.vocabularies.Skins'
+        )(
+            self.context
+        )
 
         # Set response header to make sure control panel is never themed
         self.request.response.setHeader('X-Theme-Disabled', '1')
@@ -68,6 +72,7 @@ def redirect(self, url):
         self.request.response.redirect(url)
 
     def update(self):
+        # XXX: complexity too high: refactoring needed
         processInputs(self.request)
         self._setup()
         self.errors = {}
@@ -87,11 +92,21 @@ def update(self):
             themeSelection = form.get('themeName', None)
 
             if themeSelection:
-                themeData = self.getThemeData(self.availableThemes, themeSelection)
+                themeData = self.getThemeData(
+                    self.availableThemes,
+                    themeSelection
+                )
                 applyTheme(themeData)
                 self.settings.enabled = True
 
-            IStatusMessage(self.request).add(_(u"Theme enabled. Note that this control panel page is never themed."))
+            IStatusMessage(
+                self.request
+            ).add(
+                _(
+                    u"Theme enabled. Note that this control panel page is "
+                    u"never themed."
+                )
+            )
             self._setup()
             return True
 
@@ -123,15 +138,16 @@ def update(self):
             for line in parameterExpressionsList:
                 try:
                     name, expression = line.split('=', 1)
-                    parameterExpressions[str(name.strip())] = \
-                                                    str(expression.strip())
+                    name = str(name.strip())
+                    expression = str(expression.strip())
+                    parameterExpressions[name] = expression
                 except ValueError:
-                    self.errors['parameterExpressions'] = \
-                                    _('error_invalid_parameter_expressions',
-                        default=u"Please ensure you enter one "
-                                u"expression per line, in the "
-                                u"format <name> = <expression>."
-                    )
+                    message = _(
+                        'error_invalid_parameter_expressions',
+                        default=u"Please ensure you enter one expression per "
+                                u"line, in the format <name> = <expression>."
+                        )
+                    self.errors['parameterExpressions'] = message
 
             themeBase = form.get('themeBase', None)
             markSpecialLinks = form.get('markSpecialLinks', None)
@@ -139,11 +155,9 @@ def update(self):
             usePopups = form.get('usePopups', None)
             iconVisibility = form.get('iconVisibility', None)
 
-            if not self.errors:
-
+            if self.errors:
                 # Trigger onDisabled() on plugins if theme was active
                 # previously and rules were changed
-
                 if self.settings.rules != rules:
                     applyTheme(None)
 
@@ -155,23 +169,26 @@ def update(self):
                 self.settings.doctype = doctype
 
                 # Theme base settings
-
                 if themeBase is not None:
                     self.skinsSettings.theme = themeBase.encode('utf-8')
                 if markSpecialLinks is not None:
                     self.skinsSettings.mark_special_links = markSpecialLinks
                 if extLinksOpenInNewWindow is not None:
-                    self.skinsSettings.ext_links_open_new_window = extLinksOpenInNewWindow
+                    self.skinsSettings.ext_links_open_new_window = \
+                        extLinksOpenInNewWindow
                 if usePopups is not None:
                     self.skinsSettings.use_popups = usePopups
                 if iconVisibility is not None:
-                    self.skinsSettings.icon_visibility = iconVisibility.encode('utf-8')
+                    self.skinsSettings.icon_visibility = \
+                        iconVisibility.encode('utf-8')
 
                 IStatusMessage(self.request).add(_(u"Changes saved"))
                 self._setup()
                 return True
             else:
-                IStatusMessage(self.request).add(_(u"There were errors"), 'error')
+                IStatusMessage(self.request).add(
+                    _(u"There were errors"), 'error'
+                )
                 self.redirectToFieldset('advanced')
                 return False
 
@@ -189,9 +206,10 @@ def update(self):
                 themeZip = zipfile.ZipFile(themeArchive)
             except (zipfile.BadZipfile, zipfile.LargeZipFile,):
                 logger.exception("Could not read zip file")
-                self.errors['themeArchive'] = _('error_invalid_zip',
-                        default=u"The uploaded file is not a valid Zip archive"
-                    )
+                self.errors['themeArchive'] = _(
+                    'error_invalid_zip',
+                    default=u"The uploaded file is not a valid Zip archive"
+                )
 
             if themeZip:
 
@@ -199,10 +217,11 @@ def update(self):
                     themeData = extractThemeInfo(themeZip, checkRules=False)
                 except (ValueError, KeyError,), e:
                     logger.warn(str(e))
-                    self.errors['themeArchive'] = _('error_no_rules_file',
-                            u"The uploaded file does not contain "
-                            u"a valid theme archive."
-                        )
+                    self.errors['themeArchive'] = _(
+                        'error_no_rules_file',
+                        u"The uploaded file does not contain a valid theme "
+                        u"archive."
+                    )
                 else:
 
                     themeContainer = getOrCreatePersistentResourceDirectory()
@@ -210,12 +229,12 @@ def update(self):
 
                     if themeExists:
                         if not replaceExisting:
-                            self.errors['themeArchive'] = \
-                                _('error_already_installed',
-                                    u"This theme is already installed. "
-                                    u"Select 'Replace existing theme' "
-                                    u"and re-upload to replace it."
-                                )
+                            self.errors['themeArchive'] = _(
+                                'error_already_installed',
+                                u"This theme is already installed. Select "
+                                u"'Replace existing theme' and re-upload to "
+                                u"replace it."
+                            )
                         else:
                             del themeContainer[themeData.__name__]
                             performImport = True
@@ -225,28 +244,46 @@ def update(self):
             if performImport:
                 themeContainer.importZip(themeZip)
 
-                themeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, themeData.__name__)
+                themeDirectory = queryResourceDirectory(
+                    THEME_RESOURCE_NAME,
+                    themeData.__name__
+                )
                 if themeDirectory is not None:
-
                     # If we don't have a rules file, use the template
-                    if themeData.rules == u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, themeData.__name__, RULE_FILENAME,):
-                        if not themeDirectory.isFile(RULE_FILENAME):
-                            templateThemeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, TEMPLATE_THEME)
-                            themeDirectory.writeFile(RULE_FILENAME, templateThemeDirectory.readFile(RULE_FILENAME))
+                    if themeData.rules == u"/++{0:s}++{1:s}/{2:s}".format(
+                        THEME_RESOURCE_NAME,
+                        themeData.__name__,
+                        RULE_FILENAME,
+                    ) and not themeDirectory.isFile(RULE_FILENAME):
+                        templateThemeDirectory = queryResourceDirectory(
+                            THEME_RESOURCE_NAME,
+                            TEMPLATE_THEME
+                        )
+                        themeDirectory.writeFile(
+                            RULE_FILENAME,
+                            templateThemeDirectory.readFile(RULE_FILENAME)
+                        )
 
-                            if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):
-                                IStatusMessage(self.request).add(
-                                        _(u"A boilerplate rules.xml was added to your theme, but no index.html file found. Update rules.xml to reference the current theme file."),
-                                        'warning',
-                                    )
+                        if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):
+                            IStatusMessage(self.request).add(
+                                _(
+                                    u"A boilerplate rules.xml was added to "
+                                    u"your theme, but no index.html file "
+                                    u"found. Update rules.xml to reference "
+                                    u"the current theme file."
+                                ),
+                                'warning',
+                            )
 
                     plugins = getPlugins()
                     pluginSettings = getPluginSettings(themeDirectory, plugins)
                     if pluginSettings is not None:
                         for name, plugin in plugins:
-                            plugin.onCreated(themeData.__name__,
-                                             pluginSettings[name],
-                                             pluginSettings)
+                            plugin.onCreated(
+                                themeData.__name__,
+                                pluginSettings[name],
+                                pluginSettings
+                            )
 
                 if enableNewTheme:
                     applyTheme(themeData)
@@ -278,7 +315,10 @@ def update(self):
             if not title:
                 self.errors['title'] = _(u"Title is required")
 
-                IStatusMessage(self.request).add(_(u"There were errors"), 'error')
+                IStatusMessage(self.request).add(
+                    _(u"There were errors"),
+                    'error'
+                )
 
                 self.renderOverlay('new-theme')
                 return True
@@ -340,7 +380,10 @@ def themeList(self):
 
             previewUrl = "++resource++plone.app.theming/defaultPreview.png"
             if theme.preview:
-                previewUrl = "++theme++%s/%s" % (theme.__name__, theme.preview,)
+                previewUrl = "++theme++{0:s}/{1:s}".format(
+                    theme.__name__,
+                    theme.preview,
+                )
 
             themes.append({
                 'name': theme.__name__,
@@ -364,4 +407,4 @@ def renderOverlay(self, overlay):
         self.overlay = overlay
 
     def authorize(self):
-        return authorize(self.context, self.request)
\ No newline at end of file
+        return authorize(self.context, self.request)
diff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py
index be26d76..3a97e53 100644
--- a/src/plone/app/theming/browser/help.py
+++ b/src/plone/app/theming/browser/help.py
@@ -6,7 +6,13 @@
 class Help(BrowserView):
 
     def __call__(self):
-        rstSource = pkg_resources.resource_string('plone.app.theming.browser', 'resources/userguide.rst')
-        parts = docutils.core.publish_parts(source=rstSource, writer_name='html')
+        rstSource = pkg_resources.resource_string(
+            'plone.app.theming.browser',
+            'resources/userguide.rst'
+        )
+        parts = docutils.core.publish_parts(
+            source=rstSource,
+            writer_name='html'
+        )
         html = parts['body_pre_docinfo'] + parts['fragment']
         return """<div class="content">%s</div>""" % html
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index 8793671..481799e 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -1,50 +1,38 @@
-import urllib
-import urlparse
-import os.path
-
-import lxml.etree
-import lxml.html
-import lxml.html.builder
-
+# -*- coding: utf-8 -*-
+from AccessControl import Unauthorized
+from Products.CMFCore.utils import _getAuthenticatedUser
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.resources import add_bundle_on_request
+from Products.Five.browser.decode import processInputs
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.statusmessages.interfaces import IStatusMessage
 from diazo.utils import quote_param
-
-from zope.component import getMultiAdapter
-from zope.component import getUtility
-
-from zope.component.hooks import getSite
-from zope.publisher.browser import BrowserView
-
-from repoze.xmliter.utils import getHTMLSerializer
-from plone.app.theming.utils import compileThemeTransform
-from plone.app.theming.utils import prepareThemeParameters
-from plone.app.theming.utils import getCurrentTheme
-
-from plone.registry.interfaces import IRegistry
-
-from plone.subrequest import subrequest
-
-from plone.resource.interfaces import IWritableResourceDirectory
-
 from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.app.theming.interfaces import RULE_FILENAME
 from plone.app.theming.interfaces import THEME_EXTENSIONS
-
-from plone.app.theming.utils import getPortal
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+from plone.app.theming.utils import compileThemeTransform
 from plone.app.theming.utils import findContext
+from plone.app.theming.utils import getCurrentTheme
+from plone.app.theming.utils import getPortal
 from plone.app.theming.utils import getThemeFromResourceDirectory
-
+from plone.app.theming.utils import prepareThemeParameters
 from plone.memoize import view
-
-from AccessControl import Unauthorized
+from plone.registry.interfaces import IRegistry
+from plone.resource.interfaces import IWritableResourceDirectory
+from plone.subrequest import subrequest
+from repoze.xmliter.utils import getHTMLSerializer
 from zExceptions import NotFound
-
-from Products.Five.browser.decode import processInputs
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.statusmessages.interfaces import IStatusMessage
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.resources import add_bundle_on_request
-from Products.CMFCore.utils import _getAuthenticatedUser
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.hooks import getSite
+from zope.publisher.browser import BrowserView
+import lxml.etree
+import lxml.html
+import lxml.html.builder
+import os.path
+import urllib
+import urlparse
 
 
 class ThemeMapper(BrowserView):
@@ -65,7 +53,8 @@ def __call__(self):
     @view.memoize
     def development(self):
         registry = getUtility(IRegistry)
-        if _getAuthenticatedUser(self.context).getUserName() == 'Anonymous User':
+        current_username = _getAuthenticatedUser(self.context).getUserName()
+        if current_username == 'Anonymous User':
             return False
         return registry.records['plone.resources.development'].value
 
@@ -83,7 +72,9 @@ def setup(self):
         self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
         self.themeBaseUrl = "%s/%s" % (self.portalUrl, self.themeBasePath,)
 
-        self.editable = IWritableResourceDirectory.providedBy(self.resourceDirectory)
+        self.editable = IWritableResourceDirectory.providedBy(
+            self.resourceDirectory
+        )
 
         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
         self.active = (settings.enabled and self.name == getCurrentTheme())
@@ -116,7 +107,9 @@ def authorize(self):
 
     def redirect(self, message):
         IStatusMessage(self.request).add(message)
-        self.request.response.redirect("%s/@@theming-controlpanel" % self.portalUrl)
+        self.request.response.redirect(
+            "{0:s}/@@theming-controlpanel".format(self.portalUrl)
+        )
 
     def findThemeFiles(self, directory, files=None, prefix=''):
         """Depth-first search of files with known extensions.
@@ -128,33 +121,33 @@ def findThemeFiles(self, directory, files=None, prefix=''):
 
         dirs = []
 
-        for f in directory.listDirectory():
-            if not f or f == RULE_FILENAME:
+        for filename in directory.listDirectory():
+            if not filename or filename == RULE_FILENAME:
                 continue
 
-            if directory.isDirectory(f):
-                dirs.append(f)
+            if directory.isDirectory(filename):
+                dirs.append(filename)
             else:
 
-                path = f
+                path = filename
                 if prefix:
-                    path = prefix + '/' + f
+                    path = prefix + '/' + filename
 
-                basename, ext = os.path.splitext(f)
+                basename, ext = os.path.splitext(filename)
                 ext = ext[1:].lower()
                 if ext in THEME_EXTENSIONS:
                     files.append({
                         'path': '/' + path,
-                        'filename': f,
+                        'filename': filename,
                         'extension': ext,
                     })
 
         # Do directories last
-        for f in dirs:
-            path = f
+        for filename in dirs:
+            path = filename
             if prefix:
-                path = prefix + '/' + f
-            self.findThemeFiles(directory[f], files=files, prefix=path)
+                path = prefix + '/' + filename
+            self.findThemeFiles(directory[filename], files=files, prefix=path)
 
         return files
 
@@ -169,12 +162,12 @@ def getFrame(self):
 
         - a query string parameter ``links`` can be set to one of ``disable``
           or ``replace``. The former will disable hyperlinks; the latter will
-          replace them with links using the ``@@themeing-controlpanel-getframe``
-          view.
+          replace them with links using the
+          ``@@themeing-controlpanel-getframe`` view.
         - a query string parameter ``forms`` can be set to one of ``disable``
           or ``replace``. The former will disable forms ; the latter will
-          replace them with links using the ``@@themeing-controlpanel-getframe``
-          view.
+          replace them with links using the
+          ``@@themeing-controlpanel-getframe`` view.
         - a query string parameter ``title`` can be set to give a new page
           title
         """
@@ -243,8 +236,10 @@ def getFrame(self):
                 context, self.request, themeInfo.parameterExpressions or {})
 
             # Fix url and path since the request gave us this view
-            params['url'] = quote_param("%s%s" % (portal_url, path,))
-            params['path'] = quote_param("%s%s" % (portal.absolute_url_path(), path,))
+            params['url'] = quote_param(''.join((portal_url, path,)))
+            params['path'] = quote_param(
+                ''.join((portal.absolute_url_path(), path,))
+            )
 
             if themeInfo.doctype:
                 serializer.doctype = themeInfo.doctype
diff --git a/src/plone/app/theming/events.py b/src/plone/app/theming/events.py
index 3250069..6cee90c 100644
--- a/src/plone/app/theming/events.py
+++ b/src/plone/app/theming/events.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
 from plone.app.theming.interfaces import IThemeAppliedEvent
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(IThemeAppliedEvent)
 class ThemeAppliedEvent(object):
-    implements(IThemeAppliedEvent)
 
     def __init__(self, theme):
-        self.theme = theme
\ No newline at end of file
+        self.theme = theme
diff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py
index 22a7577..83f8b2f 100644
--- a/src/plone/app/theming/exportimport/handler.py
+++ b/src/plone/app/theming/exportimport/handler.py
@@ -1,12 +1,11 @@
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from zope.component import getUtility
-
-from plone.registry.interfaces import IRegistry
-
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.utils import applyTheme
 from plone.app.theming.utils import getAvailableThemes
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+
 
 def importTheme(context):
     """Apply the theme with the id contained in the profile file theme.xml
@@ -21,9 +20,8 @@ def importTheme(context):
 
     tree = etree.fromstring(data)
 
+    # apply theme if given and valid
     themeName = tree.find("name")
-    themeEnabled = tree.find("enabled")
-
     if themeName is not None:
         themeName = themeName.text.strip()
         themeInfo = None
@@ -35,21 +33,26 @@ def importTheme(context):
                 break
 
         if themeInfo is None:
-            raise ValueError("Theme %s is not available" % themeName)
+            raise ValueError("Theme {0:s} is not available".format(themeName))
 
         applyTheme(themeInfo)
-        logger.info('Theme %s applied' % themeName)
+        logger.info('Theme {0:s} applied'.format(themeName))
+
+    # enable/disable theme
+    themeEnabled = tree.find("enabled")
+    if themeEnabled is None:
+        return
 
     settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
 
-    if themeEnabled is not None:
-        themeEnabled = themeEnabled.text.strip().lower()
-
-        if themeEnabled in ("y", "yes", "true", "t", "1", "on",):
-            settings.enabled = True
-            logger.info('Theme enabled')
-        elif themeEnabled in ("n", "no", "false", "f", "0", "off",):
-            settings.enabled = False
-            logger.info('Theme disabled')
-        else:
-            raise ValueError("%s is not a valid value for <enabled />" % themeEnabled)
+    themeEnabled = themeEnabled.text.strip().lower()
+    if themeEnabled in ("y", "yes", "true", "t", "1", "on",):
+        settings.enabled = True
+        logger.info('Theme enabled')
+    elif themeEnabled in ("n", "no", "false", "f", "0", "off",):
+        settings.enabled = False
+        logger.info('Theme disabled')
+    else:
+        raise ValueError(
+            "{0:s} is not a valid value for <enabled />".format(themeEnabled)
+        )
diff --git a/src/plone/app/theming/header.py b/src/plone/app/theming/header.py
index 1030152..35ba2c9 100644
--- a/src/plone/app/theming/header.py
+++ b/src/plone/app/theming/header.py
@@ -1,10 +1,12 @@
+# -*- coding: utf-8 -*-
 from plone.app.theming.utils import isThemeEnabled
 
+
 def setHeader(object, event):
     """Set a header X-Theme-Enabled in the request if theming is enabled.
 
-    This is useful for checking in things like the portal_css/portal_javascripts
-    registries.
+    This is useful for checking in things like the portal_css/portal_
+    javascripts registries.
     """
 
     request = event.request
diff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py
index 883b24a..6db0042 100644
--- a/src/plone/app/theming/interfaces.py
+++ b/src/plone/app/theming/interfaces.py
@@ -1,8 +1,9 @@
-from zope.interface import Interface, Attribute
+# -*- coding: utf-8 -*-
+from plone.resource.manifest import ManifestFormat
 from zope import schema
 from zope.i18nmessageid import MessageFactory
-
-from plone.resource.manifest import ManifestFormat
+from zope.interface import Attribute
+from zope.interface import Interface
 
 _ = MessageFactory(u"plone")
 
@@ -11,13 +12,14 @@
 DEFAULT_THEME_FILENAME = 'index.html'
 TEMPLATE_THEME = 'template'
 
-MANIFEST_FORMAT = ManifestFormat(THEME_RESOURCE_NAME,
-        keys=['title', 'description', 'rules', 'prefix', 'doctype', 'preview',
-              'enabled-bundles', 'disabled-bundles',
-              'development-css', 'production-css', 'tinymce-content-css',
-              'development-js', 'production-js'],
-        parameterSections=['parameters'],
-    )
+MANIFEST_FORMAT = ManifestFormat(
+    THEME_RESOURCE_NAME,
+    keys=['title', 'description', 'rules', 'prefix', 'doctype', 'preview',
+          'enabled-bundles', 'disabled-bundles',
+          'development-css', 'production-css', 'tinymce-content-css',
+          'development-js', 'production-js'],
+    parameterSections=['parameters'],
+)
 
 THEME_EXTENSIONS = frozenset(['html', 'htm'])
 
@@ -27,45 +29,45 @@ class ITheme(Interface):
     """
 
     __name__ = schema.TextLine(
-            title=_(u"Name"),
-        )
+        title=_(u"Name"),
+    )
 
     rules = schema.TextLine(
-            title=_(u"Path to rules"),
-        )
+        title=_(u"Path to rules"),
+    )
 
     title = schema.TextLine(
-            title=_(u"Title"),
-            required=False,
-        )
+        title=_(u"Title"),
+        required=False,
+    )
 
     description = schema.TextLine(
-            title=_(u"Description"),
-            required=False,
-        )
+        title=_(u"Description"),
+        required=False,
+    )
 
     absolutePrefix = schema.TextLine(
-            title=_(u"Absolute prefix"),
-            required=False,
-        )
+        title=_(u"Absolute prefix"),
+        required=False,
+    )
 
     parameterExpressions = schema.Dict(
-            title=_(u"Parameter expressions"),
-            key_type=schema.TextLine(),
-            value_type=schema.TextLine(),
-            required=False,
-        )
+        title=_(u"Parameter expressions"),
+        key_type=schema.TextLine(),
+        value_type=schema.TextLine(),
+        required=False,
+    )
 
     doctype = schema.ASCIILine(
-            title=_(u"Doctype"),
-            required=False,
-            default="",
-        )
+        title=_(u"Doctype"),
+        required=False,
+        default="",
+    )
 
     preview = schema.ASCIILine(
-            title=_(u"Preview image"),
-            required=False,
-        )
+        title=_(u"Preview image"),
+        required=False,
+    )
 
 
 class IThemeSettings(Interface):
@@ -73,88 +75,99 @@ class IThemeSettings(Interface):
     """
 
     enabled = schema.Bool(
-            title=_('enabled', u"Enabled"),
-            description=_('enable_theme_globally',
-                          u"Use this option to enable or disable the theme "
-                          u"globally. Note that the options will also affect "
-                          u"whether the theme is used when this option is "
-                          u'enabled.'),
-            required=True,
-            default=False,
-        )
+        title=_('enabled', u"Enabled"),
+        description=_(
+            'enable_theme_globally',
+            u"Use this option to enable or disable the theme globally. "
+            u"Note that the options will also affect whether the theme "
+            u"is used when this option is enabled."
+        ),
+        required=True,
+        default=False,
+    )
 
     currentTheme = schema.TextLine(
-            title=_('current_theme', u"Current theme"),
-            description=_('current_theme_description',
-                          u"The name of the current theme, i.e. the one "
-                          u"applied most recently."),
-            required=True,
-        )
+        title=_('current_theme', u"Current theme"),
+        description=_(
+            'current_theme_description',
+            u"The name of the current theme, i.e. the one applied most "
+            u"recently."),
+        required=True,
+    )
 
     rules = schema.TextLine(
-            title=_('rules_file', u"Rules file"),
-            description=_('rules_file_path',
-                          u"File path to the rules file"),
-            required=False,
-        )
+        title=_('rules_file', u"Rules file"),
+        description=_(
+            'rules_file_path',
+            u"File path to the rules file"
+        ),
+        required=False,
+    )
 
     absolutePrefix = schema.TextLine(
-            title=_('absolute_url_prefix', u"Absolute URL prefix"),
-            description=_('convert_relative_url',
-                 u"Convert relative URLs in the theme file to absolute paths "
-                 u"using this prefix."),
-            required=False,
-        )
+        title=_('absolute_url_prefix', u"Absolute URL prefix"),
+        description=_(
+            'convert_relative_url',
+            u"Convert relative URLs in the theme file to absolute paths "
+            u"using this prefix."
+        ),
+        required=False,
+    )
 
     readNetwork = schema.Bool(
-            title=_('readNetwork', u"Read network"),
-            description=_('network_urls_allowed',
-                          u"If enabled, network (http, https) urls are "
-                          u"allowed in the rules file and this config."),
-            required=True,
-            default=False,
-        )
+        title=_('readNetwork', u"Read network"),
+        description=_(
+            'network_urls_allowed',
+            u"If enabled, network (http, https) urls are allowed in "
+            u"the rules file and this config."
+        ),
+        required=True,
+        default=False,
+    )
 
     hostnameBlacklist = schema.List(
-            title=_('hostname_blacklist', u"Unthemed host names"),
-            description=_('hostname_blacklist_description',
-                u"If there are hostnames that you do not want to be themed, "
-                u"you can list them here. This is useful during theme "
-                u"development, so that you can compare the themed and unthemed "
-                u"sites. In some cases, you may also want to provided an "
-                u"unthemed host alias for content administrators to be able "
-                u"to use 'plain' Plone."),
-            value_type=schema.TextLine(),
-            required=False,
-            default=[u"127.0.0.1"],
-        )
+        title=_('hostname_blacklist', u"Unthemed host names"),
+        description=_(
+            'hostname_blacklist_description',
+            u"If there are hostnames that you do not want to be themed, you "
+            u"can list them here. This is useful during theme development, "
+            u"so that you can compare the themed and unthemed sites. In some "
+            u"cases, you may also want to provided an unthemed host alias for "
+            u"content administrators to be able to use 'plain' Plone."
+        ),
+        value_type=schema.TextLine(),
+        required=False,
+        default=[u"127.0.0.1"],
+    )
 
     parameterExpressions = schema.Dict(
-            title=_('parameter_expressions', u"Parameter expressions"),
-            description=_('parameter_expressions_description',
-                u"You can define parameters here, which will be passed to "
-                u"the compiled theme. In your rules file, you can refer "
-                u"to a parameter by $name. Parameters are defined using "
-                u"TALES expressions, which should evaluate to a string, "
-                u"a number, a boolean or None. Available variables are "
-                u"`context`, `request`, `portal`, `portal_state`,  and "
-                u"`context_state`."),
-            key_type=schema.ASCIILine(),
-            value_type=schema.ASCIILine(),
-            required=False,
-            default={},
-        )
+        title=_('parameter_expressions', u"Parameter expressions"),
+        description=_(
+            'parameter_expressions_description',
+            u"You can define parameters here, which will be passed to the "
+            u"compiled theme. In your rules file, you can refer to a "
+            u"parameter by $name. Parameters are defined using TALES "
+            u"expressions, which should evaluate to a string, a number, a "
+            u"boolean or None. Available variables are `context`, `request`, "
+            u"`portal`, `portal_state`,  and `context_state`."
+        ),
+        key_type=schema.ASCIILine(),
+        value_type=schema.ASCIILine(),
+        required=False,
+        default={},
+    )
 
     doctype = schema.ASCIILine(
-            title=_('doctype', u"Doctype"),
-            description=_('doctype_description',
-                u'You can specify a Doctype string which will be set on the '
-                u'output, for example "<!DOCTYPE html>". '
-                u'If left blank the default XHTML 1.0 transitional Doctype '
-                u'or that set in the Diazo theme is used.'),
-            required=False,
-            default="",
-        )
+        title=_('doctype', u"Doctype"),
+        description=_(
+            'doctype_description',
+            u'You can specify a Doctype string which will be set on the '
+            u'for example "<!DOCTYPE html>". If left blank the default XHTML '
+            u'1.0 transitional Doctype or that set in the Diazo theme is used.'
+        ),
+        required=False,
+        default="",
+    )
 
 
 class IThemingLayer(Interface):
@@ -183,10 +196,10 @@ class IThemePlugin(Interface):
     """
 
     dependencies = schema.Tuple(
-            title=_(u"Dependencies"),
-            description=_(u"Plugins on which this plugin depends"),
-            value_type=schema.ASCIILine(),
-        )
+        title=_(u"Dependencies"),
+        description=_(u"Plugins on which this plugin depends"),
+        value_type=schema.ASCIILine(),
+    )
 
     def onDiscovery(theme, settings, dependenciesSettings):
         """Called when the theme is discovered at startup time. This is
diff --git a/src/plone/app/theming/plugins/__init__.py b/src/plone/app/theming/plugins/__init__.py
index 1de0d9d..68c04af 100644
--- a/src/plone/app/theming/plugins/__init__.py
+++ b/src/plone/app/theming/plugins/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError: # pragma: no cover
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/src/plone/app/theming/plugins/hooks.py b/src/plone/app/theming/plugins/hooks.py
index b7d4b9d..8fa461f 100644
--- a/src/plone/app/theming/plugins/hooks.py
+++ b/src/plone/app/theming/plugins/hooks.py
@@ -1,25 +1,28 @@
-from plone.resource.utils import queryResourceDirectory
-from plone.resource.utils import iterDirectoriesOfType
-
+# -*- coding: utf-8 -*-
 from plone.app.theming.interfaces import THEME_RESOURCE_NAME
-
+from plone.app.theming.plugins.utils import getPluginSettings
+from plone.app.theming.plugins.utils import getPlugins
 from plone.app.theming.utils import getCurrentTheme
 from plone.app.theming.utils import isThemeEnabled
+from plone.resource.utils import iterDirectoriesOfType
+from plone.resource.utils import queryResourceDirectory
 
-from plone.app.theming.plugins.utils import getPlugins
-from plone.app.theming.plugins.utils import getPluginSettings
 
 def onStartup(event):
     """Call onDiscovery() on each plugin for each theme on startup
     """
-
     plugins = getPlugins()
 
     for themeDirectory in iterDirectoriesOfType(THEME_RESOURCE_NAME):
         pluginSettings = getPluginSettings(themeDirectory, plugins)
 
         for name, plugin in plugins:
-            plugin.onDiscovery(themeDirectory.__name__, pluginSettings[name], pluginSettings)
+            plugin.onDiscovery(
+                themeDirectory.__name__,
+                pluginSettings[name],
+                pluginSettings
+            )
+
 
 def onRequest(object, event):
     """Call onRequest() on each plugin for the eanbled theme on each request
diff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py
index 42e96ea..e110e84 100644
--- a/src/plone/app/theming/plugins/utils.py
+++ b/src/plone/app/theming/plugins/utils.py
@@ -1,52 +1,52 @@
+# -*- coding: utf-8 -*-
 from ConfigParser import SafeConfigParser
-from zope.component import getUtilitiesFor
-
-from plone.resource.manifest import MANIFEST_FILENAME
-
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.app.theming.interfaces import IThemePlugin
-
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.memoize.ram import cache
+from plone.resource.manifest import MANIFEST_FILENAME
+from zope.component import getUtilitiesFor
+
 
 def pluginsCacheKey(fun):
     return len(list(getUtilitiesFor(IThemePlugin)))
 
+
 def pluginSettingsCacheKey(fun, themeDirectory, plugins=None):
     return themeDirectory.__name__, len(plugins)
 
+
 def sortDependencies(plugins):
     """Topological sort
     """
-
     queue = []
-    waiting = {} # (n,p) -> [remaining deps]
+    waiting = {}  # (n,p) -> [remaining deps]
 
-    for n,p in plugins:
+    for n, p in plugins:
         if p.dependencies:
-            waiting[(n,p)] = list(p.dependencies)
+            waiting[(n, p)] = list(p.dependencies)
         else:
-            queue.append((n,p,))
+            queue.append((n, p))
 
     while queue:
-        n,p = queue.pop()
-        yield (n,p,)
+        n, p = queue.pop()
+        yield (n, p)
 
-        for (nw,pw,), deps in waiting.items():
+        for (nw, pw), deps in waiting.items():
             if n in deps:
                 deps.remove(n)
 
             if not deps:
-                queue.append((nw,pw,))
-                del waiting[(nw,pw,)]
+                queue.append((nw, pw))
+                del waiting[(nw, pw)]
 
     if waiting:
         raise ValueError("Could not resolve dependencies for: %s" % waiting)
 
+
 @cache(pluginsCacheKey)
 def getPlugins():
     """Get all registered plugins topologically sorted
     """
-
     plugins = []
 
     for name, plugin in getUtilitiesFor(IThemePlugin):
@@ -54,6 +54,7 @@ def getPlugins():
 
     return list(sortDependencies(plugins))
 
+
 @cache(pluginSettingsCacheKey)
 def getPluginSettings(themeDirectory, plugins=None):
     """Given an IResourceDirectory for a theme, return the settings for the
@@ -63,7 +64,6 @@ def getPluginSettings(themeDirectory, plugins=None):
     Returns a dict of dicts, with the outer dict having plugin names as keys
     and containing plugins settings (key/value pairs) as values.
     """
-
     if plugins is None:
         plugins = getPlugins()
 
@@ -72,15 +72,12 @@ def getPluginSettings(themeDirectory, plugins=None):
     if themeDirectory.isFile(MANIFEST_FILENAME):
         parser = SafeConfigParser()
         fp = themeDirectory.openFile(MANIFEST_FILENAME)
-
         try:
             parser.readfp(fp)
             for section in parser.sections():
                 manifestContents[section] = {}
-
                 for name, value in parser.items(section):
                     manifestContents[section][name] = value
-
         finally:
             try:
                 fp.close()
@@ -89,6 +86,8 @@ def getPluginSettings(themeDirectory, plugins=None):
 
     pluginSettings = {}
     for name, plugin in plugins:
-        pluginSettings[name] = manifestContents.get("%s:%s" % (THEME_RESOURCE_NAME, name), {})
-
+        pluginSettings[name] = manifestContents.get(
+            "{0:s}:{1:s}".format(THEME_RESOURCE_NAME, name),
+            {}
+        )
     return pluginSettings
diff --git a/src/plone/app/theming/testing.py b/src/plone/app/theming/testing.py
index 6f81ef8..07767f0 100644
--- a/src/plone/app/theming/testing.py
+++ b/src/plone/app/theming/testing.py
@@ -1,12 +1,10 @@
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import PLONE_FIXTURE
+# -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
-
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing import applyProfile
-
-from zope.configuration import xmlconfig
-from plone.app.testing.layers import IntegrationTesting
 from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+from zope.configuration import xmlconfig
 
 
 class Theming(PloneSandboxLayer):
@@ -15,7 +13,11 @@ class Theming(PloneSandboxLayer):
     def setUpZope(self, app, configurationContext):
         # load ZCML
         import plone.app.theming.tests
-        xmlconfig.file('configure.zcml', plone.app.theming.tests, context=configurationContext)
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.theming.tests,
+            context=configurationContext
+        )
 
         # Run the startup hook
         from plone.app.theming.plugins.hooks import onStartup
@@ -33,8 +35,16 @@ def setUpZope(self, app, configurationContext):
         # load ZCML
         import plone.app.theming.tests
         import plone.app.caching
-        xmlconfig.file('configure.zcml', plone.app.caching, context=configurationContext)
-        xmlconfig.file('configure.zcml', plone.app.theming.tests, context=configurationContext)
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.caching,
+            context=configurationContext
+        )
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.theming.tests,
+            context=configurationContext
+        )
 
         # Run the startup hook
         from plone.app.theming.plugins.hooks import onStartup
@@ -44,10 +54,21 @@ def setUpPloneSite(self, portal):
         # install into the Plone site
         applyProfile(portal, 'plone.app.caching:default')
         applyProfile(portal, 'plone.app.theming:default')
-        portal['portal_workflow'].setDefaultChain('simple_publication_workflow')
+        portal['portal_workflow'].setDefaultChain(
+            'simple_publication_workflow'
+        )
 
 THEMING_FIXTURE = Theming()
-THEMING_INTEGRATION_TESTING = IntegrationTesting(bases=(THEMING_FIXTURE,), name="Theming:Integration")
-THEMING_FUNCTIONAL_TESTING = FunctionalTesting(bases=(THEMING_FIXTURE,), name="Theming:Functional")
+THEMING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(THEMING_FIXTURE,),
+    name="Theming:Integration"
+)
+THEMING_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(THEMING_FIXTURE,),
+    name="Theming:Functional"
+)
 THEMINGWITHCACHING_FIXTURE = ThemingWithCaching()
-THEMINGWITHCACHING_TESTING = IntegrationTesting(bases=(THEMINGWITHCACHING_FIXTURE,), name="Theming:IntegrationWithCaching")
+THEMINGWITHCACHING_TESTING = IntegrationTesting(
+    bases=(THEMINGWITHCACHING_FIXTURE,),
+    name="Theming:IntegrationWithCaching"
+)
diff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py
index 768a03c..a75beab 100644
--- a/src/plone/app/theming/tests/test_utils.py
+++ b/src/plone/app/theming/tests/test_utils.py
@@ -1,6 +1,6 @@
-import unittest2 as unittest
-
+# -*- coding: utf-8 -*-
 from plone.app.theming.testing import THEMING_INTEGRATION_TESTING
+import unittest2 as unittest
 
 
 class TestIntegration(unittest.TestCase):
@@ -8,7 +8,7 @@ class TestIntegration(unittest.TestCase):
     layer = THEMING_INTEGRATION_TESTING
 
     def test_getOrCreatePersistentResourceDirectory_new(self):
-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
+        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa
 
         d = getOrCreatePersistentResourceDirectory()
         self.assertEqual(d.__name__, "theme")
@@ -16,7 +16,7 @@ def test_getOrCreatePersistentResourceDirectory_new(self):
     def test_getOrCreatePersistentResourceDirectory_exists(self):
         from zope.component import getUtility
         from plone.resource.interfaces import IResourceDirectory
-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
+        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa
 
         persistentDirectory = getUtility(IResourceDirectory, name="persistent")
         persistentDirectory.makeDirectory("theme")
@@ -36,33 +36,51 @@ def test_getAvailableThemes(self):
         self.assertEqual(theme.__name__, 'plone.app.theming.tests')
         self.assertEqual(theme.title, 'Test theme')
         self.assertEqual(theme.description, 'A theme for testing')
-        self.assertEqual(theme.rules, '/++theme++plone.app.theming.tests/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++plone.app.theming.tests')
-        self.assertEqual(theme.parameterExpressions, {'foo': "python:request.get('bar')"})
+        self.assertEqual(
+            theme.rules,
+            '/++theme++plone.app.theming.tests/rules.xml'
+        )
+        self.assertEqual(
+            theme.absolutePrefix,
+            '/++theme++plone.app.theming.tests'
+        )
+        self.assertEqual(
+            theme.parameterExpressions,
+            {'foo': "python:request.get('bar')"}
+        )
         self.assertEqual(theme.doctype, "<!DOCTYPE html>")
 
     def test_getZODBThemes(self):
         import zipfile
         import os.path
-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory
+        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa
         from plone.app.theming.utils import getZODBThemes
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'default_rules.zip'))
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'default_rules.zip'
+            )
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        z = zipfile.ZipFile(f)
+            themeContainer = getOrCreatePersistentResourceDirectory()
+            themeContainer.importZip(zf)
 
-        themeContainer = getOrCreatePersistentResourceDirectory()
-        themeContainer.importZip(z)
+            zodbThemes = getZODBThemes()
 
-        zodbThemes = getZODBThemes()
+            self.assertEqual(len(zodbThemes), 1)
 
-        self.assertEqual(len(zodbThemes), 1)
-
-        self.assertEqual(zodbThemes[0].__name__, 'default_rules')
-        self.assertEqual(zodbThemes[0].rules, '/++theme++default_rules/rules.xml')
-        self.assertEqual(zodbThemes[0].absolutePrefix, '/++theme++default_rules')
-
-        f.close()
+            self.assertEqual(zodbThemes[0].__name__, 'default_rules')
+            self.assertEqual(
+                zodbThemes[0].rules,
+                '/++theme++default_rules/rules.xml'
+            )
+            self.assertEqual(
+                zodbThemes[0].absolutePrefix,
+                '/++theme++default_rules'
+            )
 
     def test_applyTheme(self):
         from zope.component import getUtility
@@ -85,7 +103,10 @@ def test_applyTheme(self):
 
         self.assertEqual(settings.rules, theme.rules)
         self.assertEqual(settings.absolutePrefix, theme.absolutePrefix)
-        self.assertEqual(settings.parameterExpressions, theme.parameterExpressions)
+        self.assertEqual(
+            settings.parameterExpressions,
+            theme.parameterExpressions
+        )
         self.assertEqual(settings.doctype, theme.doctype)
 
     def test_applyTheme_None(self):
@@ -142,7 +163,7 @@ def test_isThemeEnabled_blacklist(self):
         self.assertTrue(isThemeEnabled(request, settings))
         self.assertEqual(request.get('SERVER_URL'), 'http://nohost')
 
-        #Should pay no attention to BASE1 and only use SERVER_URL
+        # Should pay no attention to BASE1 and only use SERVER_URL
         settings.hostnameBlacklist.append('nohost')
         self.assertFalse(isThemeEnabled(request, settings))
 
@@ -154,155 +175,205 @@ def test_extractThemeInfo_default_rules(self):
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'default_rules.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'default_rules.zip'
+            )
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        self.assertEqual(theme.__name__, 'default_rules')
-        self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
+            theme = extractThemeInfo(zf)
 
-        f.close()
+            self.assertEqual(theme.__name__, 'default_rules')
+            self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
+            self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
 
     def test_extractThemeInfo_manifest_rules(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_rules.zip'))
-        z = zipfile.ZipFile(f)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_rules.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        theme = extractThemeInfo(z)
+            theme = extractThemeInfo(zf)
 
-        self.assertEqual(theme.__name__, 'manifest_rules')
-        self.assertEqual(theme.rules, 'other.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_rules')
-        self.assertEqual(theme.title, 'Test theme')
-
-        f.close()
+            self.assertEqual(theme.__name__, 'manifest_rules')
+            self.assertEqual(theme.rules, 'other.xml')
+            self.assertEqual(theme.absolutePrefix, '/++theme++manifest_rules')
+            self.assertEqual(theme.title, 'Test theme')
 
     def test_extractThemeInfo_manifest_prefix(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_prefix.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_prefix.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        self.assertEqual(theme.__name__, 'manifest_prefix')
-        self.assertEqual(theme.rules, u'/++theme++manifest_prefix/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/foo')
-        self.assertEqual(theme.title,  'Test theme')
+            theme = extractThemeInfo(zf)
 
-        f.close()
+            self.assertEqual(theme.__name__, 'manifest_prefix')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++manifest_prefix/rules.xml'
+            )
+            self.assertEqual(theme.absolutePrefix, '/foo')
+            self.assertEqual(theme.title,  'Test theme')
 
     def test_extractThemeInfo_manifest_default_rules(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_default_rules.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
-
-        self.assertEqual(theme.__name__, 'manifest_default_rules')
-        self.assertEqual(theme.rules, u'/++theme++manifest_default_rules/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_default_rules')
-        self.assertEqual(theme.title,  'Test theme')
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_default_rules.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+
+            theme = extractThemeInfo(zf)
+
+            self.assertEqual(theme.__name__, 'manifest_default_rules')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++manifest_default_rules/rules.xml'
+            )
+            self.assertEqual(
+                theme.absolutePrefix,
+                '/++theme++manifest_default_rules'
+            )
+            self.assertEqual(theme.title,  'Test theme')
 
     def test_extractThemeInfo_manifest_preview(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_preview.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
-
-        self.assertEqual(theme.__name__, 'manifest_preview')
-        self.assertEqual(theme.rules, u'/++theme++manifest_preview/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_preview')
-        self.assertEqual(theme.title,  'Test theme')
-        self.assertEqual(theme.preview,  'preview.png')
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_preview.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+
+            theme = extractThemeInfo(zf)
+
+            self.assertEqual(theme.__name__, 'manifest_preview')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++manifest_preview/rules.xml'
+            )
+            self.assertEqual(
+                theme.absolutePrefix,
+                '/++theme++manifest_preview'
+            )
+            self.assertEqual(theme.title,  'Test theme')
+            self.assertEqual(theme.preview,  'preview.png')
 
     def test_extractThemeInfo_manifest_default_rules_override(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'manifest_default_rules_override.zip'))
-        z = zipfile.ZipFile(f)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'manifest_default_rules_override.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        theme = extractThemeInfo(z)
+            theme = extractThemeInfo(zf)
 
-        self.assertEqual(theme.__name__, 'manifest_default_rules_override')
-        self.assertEqual(theme.rules, 'other.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++manifest_default_rules_override')
-        self.assertEqual(theme.title,  'Test theme')
-
-        f.close()
+            self.assertEqual(theme.__name__, 'manifest_default_rules_override')
+            self.assertEqual(theme.rules, 'other.xml')
+            self.assertEqual(
+                theme.absolutePrefix,
+                '/++theme++manifest_default_rules_override'
+            )
+            self.assertEqual(theme.title,  'Test theme')
 
     def test_extractThemeInfo_nodir(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'nodir.zip'))
-        z = zipfile.ZipFile(f)
-
-        self.assertRaises(ValueError, extractThemeInfo, z)
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'nodir.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+            self.assertRaises(ValueError, extractThemeInfo, zf)
 
     def test_extractThemeInfo_multiple_dir(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'multiple_dir.zip'))
-        z = zipfile.ZipFile(f)
-
-        self.assertRaises(ValueError, extractThemeInfo, z)
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'multiple_dir.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+            self.assertRaises(ValueError, extractThemeInfo, zf)
 
     def test_extractThemeInfo_ignores_dotfiles_resource_forks(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'ignores_dotfiles_resource_forks.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'ignores_dotfiles_resource_forks.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
 
-        self.assertEqual(theme.__name__, 'default_rules')
-        self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
+            theme = extractThemeInfo(zf)
 
-        f.close()
+            self.assertEqual(theme.__name__, 'default_rules')
+            self.assertEqual(theme.rules, u'/++theme++default_rules/rules.xml')
+            self.assertEqual(theme.absolutePrefix, '/++theme++default_rules')
 
     def test_extractThemeInfo_with_subdirectories(self):
         import zipfile
         import os.path
         from plone.app.theming.utils import extractThemeInfo
 
-        f = open(os.path.join(os.path.dirname(__file__), 'zipfiles', 'subdirectories.zip'))
-        z = zipfile.ZipFile(f)
-
-        theme = extractThemeInfo(z)
-
-        self.assertEqual(theme.__name__, 'subdirectories')
-        self.assertEqual(theme.rules, u'/++theme++subdirectories/rules.xml')
-        self.assertEqual(theme.absolutePrefix, '/++theme++subdirectories')
-
-        f.close()
+        with open(
+            os.path.join(
+                os.path.dirname(__file__),
+                'zipfiles',
+                'subdirectories.zip')
+        ) as fp:
+            zf = zipfile.ZipFile(fp)
+
+            theme = extractThemeInfo(zf)
+
+            self.assertEqual(theme.__name__, 'subdirectories')
+            self.assertEqual(
+                theme.rules,
+                u'/++theme++subdirectories/rules.xml'
+            )
+            self.assertEqual(theme.absolutePrefix, '/++theme++subdirectories')
diff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py
index e0d1b23..903e46c 100644
--- a/src/plone/app/theming/theme.py
+++ b/src/plone/app/theming/theme.py
@@ -1,27 +1,30 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from plone.app.theming.interfaces import ITheme
+from zope.interface import implementer
 
 
+@implementer(ITheme)
 class Theme(object):
     """A theme, loaded from a resource directory
     """
 
-    implements(ITheme)
-
-    def __init__(self, name, rules,
-            title=None,
-            description=None,
-            absolutePrefix=None,
-            parameterExpressions=None,
-            doctype=None,
-            preview=None,
-            enabled_bundles=[],
-            disabled_bundles=[],
-            development_css='',
-            development_js='',
-            production_css='',
-            production_js='',
-            tinymce_content_css=''
+    def __init__(
+        self,
+        name,
+        rules,
+        title=None,
+        description=None,
+        absolutePrefix=None,
+        parameterExpressions=None,
+        doctype=None,
+        preview=None,
+        enabled_bundles=[],
+        disabled_bundles=[],
+        development_css='',
+        development_js='',
+        production_css='',
+        production_js='',
+        tinymce_content_css=''
     ):
 
         self.__name__ = name
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 0073705..26dc252 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,32 +1,29 @@
-import logging
-import Globals
-
+# -*- coding: utf-8 -*-
 from lxml import etree
-
-from repoze.xmliter.utils import getHTMLSerializer
-
-from zope.interface import implements, Interface
-from zope.component import adapts
-from zope.component import queryUtility
-from zope.component.hooks import getSite
-
-from plone.registry.interfaces import IRegistry
-from plone.transformchain.interfaces import ITransform
-
 from plone.app.theming.interfaces import IThemeSettings, IThemingLayer
-
 from plone.app.theming.utils import compileThemeTransform
-from plone.app.theming.utils import prepareThemeParameters
-from plone.app.theming.utils import isThemeEnabled
 from plone.app.theming.utils import findContext
 from plone.app.theming.utils import getParser
+from plone.app.theming.utils import isThemeEnabled
+from plone.app.theming.utils import prepareThemeParameters
 from plone.app.theming.zmi import patch_zmi
+from plone.registry.interfaces import IRegistry
+from plone.transformchain.interfaces import ITransform
+from repoze.xmliter.utils import getHTMLSerializer
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.component.hooks import getSite
+from zope.interface import Interface
+from zope.interface import implementer
+import Globals
+import logging
 
 # Disable theming of ZMI
 patch_zmi()
 
 LOGGER = logging.getLogger('plone.app.theming')
 
+
 class _Cache(object):
     """Simple cache for the transform
     """
@@ -41,6 +38,7 @@ def updateTransform(self, transform):
     def updateExpressions(self, expressions):
         self.expressions = expressions
 
+
 def getCache(settings):
     # We need a persistent object to hang a _v_ attribute off for caching.
 
@@ -56,6 +54,7 @@ def getCache(settings):
         cache = caches[key] = _Cache()
     return cache
 
+
 def invalidateCache(settings, event):
     """When our settings are changed, invalidate the cache on all zeo clients
     """
@@ -64,14 +63,14 @@ def invalidateCache(settings, event):
     if hasattr(registry, '_v_plone_app_theming_caches'):
         del registry._v_plone_app_theming_caches
 
+
+@implementer(ITransform)
+@adapter(Interface, IThemingLayer)
 class ThemeTransform(object):
     """Late stage in the 8000's transform chain. When plone.app.blocks is
     used, we can benefit from lxml parsing having taken place already.
     """
 
-    implements(ITransform)
-    adapts(Interface, IThemingLayer)
-
     order = 8850
 
     def __init__(self, published, request):
@@ -105,7 +104,13 @@ def setupTransform(self, runtrace=False):
             readNetwork = settings.readNetwork
             parameterExpressions = settings.parameterExpressions
 
-            transform = compileThemeTransform(rules, absolutePrefix, readNetwork, parameterExpressions, runtrace=runtrace)
+            transform = compileThemeTransform(
+                rules,
+                absolutePrefix,
+                readNetwork,
+                parameterExpressions,
+                runtrace=runtrace
+            )
             if transform is None:
                 return None
 
@@ -132,7 +137,8 @@ def parseTree(self, result):
             return None
 
         contentEncoding = self.request.response.getHeader('Content-Encoding')
-        if contentEncoding and contentEncoding in ('zip', 'deflate', 'compress',):
+        if contentEncoding \
+           and contentEncoding in ('zip', 'deflate', 'compress',):
             return None
 
         try:
@@ -151,20 +157,20 @@ def transformIterable(self, result, encoding):
         """
         # Obtain settings. Do nothing if not found
         settings = self.getSettings()
-
         if settings is None:
             return None
-
         if not isThemeEnabled(self.request, settings):
             return None
-
         result = self.parseTree(result)
         if result is None:
             return None
 
         DevelopmentMode = Globals.DevelopmentMode
-        runtrace = (DevelopmentMode and
-            self.request.get('diazo.debug', '').lower() in ('1', 'y', 'yes', 't', 'true'))
+        diazo_debug = self.request.get('diazo.debug', '').lower()
+        runtrace = (
+            DevelopmentMode
+            and diazo_debug in ('1', 'y', 'yes', 't', 'true')
+        )
 
         try:
             etree.clear_error_log()
@@ -183,7 +189,12 @@ def transformIterable(self, result, encoding):
                 cache = getCache(settings)
 
             parameterExpressions = settings.parameterExpressions or {}
-            params = prepareThemeParameters(findContext(self.request), self.request, parameterExpressions, cache)
+            params = prepareThemeParameters(
+                findContext(self.request),
+                self.request,
+                parameterExpressions,
+                cache
+            )
 
             transformed = transform(result.tree, **params)
             error_log = transform.error_log
@@ -200,11 +211,16 @@ def transformIterable(self, result, encoding):
             from diazo.runtrace import generate_debug_html
             # Add debug information to end of body
             body = result.tree.xpath('/html/body')[0]
-            body.insert(-1, generate_debug_html(
-                findContext(self.request).portal_url() + '/++resource++diazo-debug',
-                rules=settings.rules,
-                rules_parser=getParser('rules', settings.readNetwork),
-                error_log = error_log,
-            ))
-
+            debug_url = findContext(
+                self.request
+            ).portal_url() + '/++resource++diazo-debug'
+            body.insert(
+                -1,
+                generate_debug_html(
+                    debug_url,
+                    rules=settings.rules,
+                    rules_parser=getParser('rules', settings.readNetwork),
+                    error_log=error_log,
+                )
+            )
         return result
diff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py
index 3db95d2..beb73b6 100644
--- a/src/plone/app/theming/traversal.py
+++ b/src/plone/app/theming/traversal.py
@@ -1,13 +1,12 @@
-import urllib
-
+# -*- coding: utf-8 -*-
+from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.registry.interfaces import IRegistry
 from plone.resource.traversal import ResourceTraverser
 from plone.resource.utils import queryResourceDirectory
-
+from zExceptions import NotFound
 from zope.component import getUtility
-
-from interfaces import IThemeSettings
+import urllib
 
 
 class ThemeTraverser(ResourceTraverser):
@@ -28,15 +27,13 @@ def current_theme(self):
         return settings.currentTheme
 
     def traverse(self, name, remaining):
-        type = self.name
-
         if name == '':
             name = self.current_theme()
 
         # Note: also fixes possible unicode problems
         name = urllib.quote(name)
 
-        res = queryResourceDirectory(type, name)
+        res = queryResourceDirectory(self.name, name)
         if res is not None:
             return res
 
diff --git a/src/plone/app/theming/upgrade.py b/src/plone/app/theming/upgrade.py
index 22d73ff..0d96248 100644
--- a/src/plone/app/theming/upgrade.py
+++ b/src/plone/app/theming/upgrade.py
@@ -1,13 +1,19 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 
 PROFILE_ID = "profile-plone.app.theming:default"
 
+
 def update_registry(context, logger=None):
     # Run the registry.xml step as that may have defined new attributes
     setup = getToolByName(context, 'portal_setup')
     setup.runImportStepFromProfile(PROFILE_ID, 'plone.app.registry')
 
+
 def update_controlpanel(context, logger=None):
     setup = getToolByName(context, 'portal_setup')
-    setup.runImportStepFromProfile(PROFILE_ID, 'controlpanel',
-                                   run_dependencies=False)
+    setup.runImportStepFromProfile(
+        PROFILE_ID,
+        'controlpanel',
+        run_dependencies=False
+    )
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 9c14afa..3a314b7 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -1,53 +1,41 @@
-import logging
-import Globals
-
-import pkg_resources
-
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
 from ConfigParser import SafeConfigParser
-
-from urlparse import urlsplit
-
-from lxml import etree
-
+from Products.CMFCore.interfaces import IContentish
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.CMFPlone.utils import safe_unicode
+from Products.PageTemplates.Expressions import getEngine
+from StringIO import StringIO
 from diazo.compiler import compile_theme
 from diazo.compiler import quote_param
-
-from zope.component import getUtility
-from zope.component import queryUtility
-from zope.component import queryMultiAdapter
-from zope.globalrequest import getRequest
-from zope.event import notify
-
-from plone.subrequest import subrequest
-
+from lxml import etree
+from plone.app.theming.events import ThemeAppliedEvent
+from plone.app.theming.interfaces import IThemeSettings
+from plone.app.theming.interfaces import MANIFEST_FORMAT
+from plone.app.theming.interfaces import RULE_FILENAME
+from plone.app.theming.interfaces import THEME_RESOURCE_NAME
+from plone.app.theming.plugins.utils import getPluginSettings
+from plone.app.theming.plugins.utils import getPlugins
+from plone.app.theming.theme import Theme
+from plone.i18n.normalizer.interfaces import IURLNormalizer
+from plone.registry.interfaces import IRegistry
 from plone.resource.interfaces import IResourceDirectory
-from plone.resource.utils import queryResourceDirectory
-from plone.resource.utils import cloneResourceDirectory
-from plone.resource.manifest import getManifest
+from plone.resource.manifest import MANIFEST_FILENAME
 from plone.resource.manifest import extractManifestFromZipFile
 from plone.resource.manifest import getAllResources
+from plone.resource.manifest import getManifest
 from plone.resource.manifest import getZODBResources
-from plone.resource.manifest import MANIFEST_FILENAME
-
-from plone.registry.interfaces import IRegistry
-
-from plone.i18n.normalizer.interfaces import IURLNormalizer
-
-from plone.app.theming.interfaces import THEME_RESOURCE_NAME
-from plone.app.theming.interfaces import MANIFEST_FORMAT
-from plone.app.theming.interfaces import RULE_FILENAME
-from plone.app.theming.interfaces import IThemeSettings
-
-from plone.app.theming.events import ThemeAppliedEvent
-from plone.app.theming.theme import Theme
-from plone.app.theming.plugins.utils import getPlugins
-from plone.app.theming.plugins.utils import getPluginSettings
-
-from Products.PageTemplates.Expressions import getEngine
-from Products.CMFCore.interfaces import IContentish
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFPlone.utils import safe_unicode
+from plone.resource.utils import cloneResourceDirectory
+from plone.resource.utils import queryResourceDirectory
+from plone.subrequest import subrequest
+from urlparse import urlsplit
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
+from zope.event import notify
+from zope.globalrequest import getRequest
+import Globals
+import logging
+import pkg_resources
 
 LOGGER = logging.getLogger('plone.app.theming')
 
@@ -156,7 +144,9 @@ def getPortal():
     request = getRequest()
     context = findContext(request)
     portalState = queryMultiAdapter(
-        (context, request), name=u"plone_portal_state")
+        (context, request),
+        name=u"plone_portal_state"
+    )
     if portalState is None:
         return None
     return portalState.portal()
@@ -236,8 +226,8 @@ def isValidThemeDirectory(directory):
     """Determine if the given plone.resource directory is a valid theme
     directory
     """
-    return directory.isFile(MANIFEST_FILENAME) or \
-           directory.isFile(RULE_FILENAME)
+    return directory.isFile(MANIFEST_FILENAME) \
+        or directory.isFile(RULE_FILENAME)
 
 
 def extractThemeInfo(zipfile, checkRules=True):
@@ -249,128 +239,92 @@ def extractThemeInfo(zipfile, checkRules=True):
     Set checkRules=False to disable the rules check.
     """
 
-    resourceName, manifestDict = extractManifestFromZipFile(zipfile, MANIFEST_FORMAT)
-
-    rulesFile = None
-    absolutePrefix = '/++%s++%s' % (THEME_RESOURCE_NAME, resourceName)
-    title = None
-    description = None
-    parameters = {}
-    doctype = ""
-    preview = None
-    enabled_bundles = ''
-    disabled_bundles = ''
-    development_css = ''
-    production_css = ''
-    tinymce_content_css = ''
-    development_js = ''
-    production_js = ''
-
-    if manifestDict is not None:
-        rulesFile = manifestDict.get('rules', rulesFile)
-        absolutePrefix = manifestDict['prefix'] or absolutePrefix
-        title = manifestDict.get('title', None)
-        description = manifestDict.get('title', None)
-        parameters = manifestDict.get('parameters', {})
-        doctype = manifestDict.get('doctype', "")
-        preview = manifestDict.get('preview', None)
-        enabled_bundles = manifestDict.get('enabled-bundles', '')
-        disabled_bundles = manifestDict.get('disabled-bundles', '')
-        development_css = manifestDict.get('development-css', '')
-        production_css = manifestDict.get('production-css', '')
-        tinymce_content_css = manifestDict.get('tinymce-content-css', '')
-        development_js = manifestDict.get('development-js', '')
-        production_js = manifestDict.get('production-js', '')
-
-    if not rulesFile:
+    name, manifest = extractManifestFromZipFile(
+        zipfile,
+        MANIFEST_FORMAT
+    )
+    if not manifest:
+        manifest = {}
+    rules = manifest.get('rules', None)
+    if rules is None:
         if checkRules:
             try:
-                zipfile.getinfo("%s/%s" % (resourceName, RULE_FILENAME,))
+                zipfile.getinfo(
+                    "{0:s}/{1:s}".format(name, RULE_FILENAME)
+                )
             except KeyError:
                 raise ValueError("Could not find theme name and rules file")
-        rulesFile = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, resourceName, RULE_FILENAME,)
-
-    return Theme(resourceName, rulesFile,
-            title=title,
-            description=description,
-            absolutePrefix=absolutePrefix,
-            parameterExpressions=parameters,
-            doctype=doctype,
-            preview=preview,
-            enabled_bundles=enabled_bundles.split(',') if enabled_bundles else [],
-            disabled_bundles=disabled_bundles.split(',') if disabled_bundles else [],
-            development_css=development_css,
-            production_css=production_css,
-            development_js=development_js,
-            production_js=production_js,
-            tinymce_content_css=tinymce_content_css
+        rules = u"/++{0:s}++{1:s}/{0:s}".format(
+            THEME_RESOURCE_NAME,
+            name,
+            RULE_FILENAME
         )
+    return getTheme(name, manifest)
 
 
 def getTheme(name, manifest=None, resources=None):
     if manifest is None:
         if resources is None:
             resources = getAllResources(
-                MANIFEST_FORMAT, filter=isValidThemeDirectory)
+                MANIFEST_FORMAT,
+                filter=isValidThemeDirectory
+            )
         if name not in resources:
             return None
-        manifest = resources[name]
-    title = name.capitalize().replace('-', ' ').replace('.', ' ')
-    description = None
-    rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, name, RULE_FILENAME,)
-    prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME, name,)
-    params = {}
-    doctype = ""
-    preview = None
-    enabled_bundles = ''
-    disabled_bundles = ''
-    development_css = ''
-    development_js = ''
-    production_css = ''
-    production_js = ''
-    tinymce_content_css = ''
-
-    if manifest is not None:
-        title = manifest['title'] or title
-        description = manifest['description'] or description
-        rules = manifest['rules'] or rules
-        prefix = manifest['prefix'] or prefix
-        params = manifest['parameters'] or params
-        doctype = manifest['doctype'] or doctype
-        preview = manifest['preview'] or preview
-        enabled_bundles = manifest['enabled-bundles'] or ''
-        disabled_bundles = manifest['disabled-bundles'] or ''
-        development_css = manifest['development-css'] or ''
-        development_js = manifest['development-js'] or ''
-        production_css = manifest['production-css'] or ''
-        production_js = manifest['production-js'] or ''
-        tinymce_content_css = manifest['tinymce-content-css'] or ''
-
+        manifest = resources[name] or {}
+
+    title = manifest.get('title', None)
+    if title is None:
+        title = name.capitalize().replace('-', ' ').replace('.', ' ')
+    description = manifest.get('description', None)
+    rules = manifest.get('rules', None)
+    if rules is None:
+        rules = u"/++{0:s}++{1:s}/{2:s}".format(
+            THEME_RESOURCE_NAME,
+            name,
+            RULE_FILENAME,
+        )
+    prefix = manifest.get('prefix', None)
+    if prefix is None:
+        prefix = u"/++{0:s}++{1:s}".format(THEME_RESOURCE_NAME, name)
+    params = manifest.get('parameters', None) or {}
+    doctype = manifest.get('doctype', None) or ""
+    preview = manifest.get('preview', None)
+    enabled_bundles = manifest.get('enabled-bundles', None) or ''
+    enabled_bundles = enabled_bundles.split(',') if enabled_bundles else []
+    disabled_bundles = manifest.get('disabled-bundles', None) or ''
+    disabled_bundles = disabled_bundles.split(',') if disabled_bundles else []
+    development_css = manifest.get('development-css', None) or ''
+    development_js = manifest.get('development-js', None) or ''
+    production_css = manifest.get('production-css', None) or ''
+    production_js = manifest.get('production-js', None) or ''
+    tinymce_content_css = manifest.get('tinymce-content-css', None) or ''
     if isinstance(rules, str):
         rules = rules.decode('utf-8')
     if isinstance(prefix, str):
         prefix = prefix.decode('utf-8')
-    return Theme(name, rules,
-            title=title,
-            description=description,
-            absolutePrefix=prefix,
-            parameterExpressions=params,
-            doctype=doctype,
-            preview=preview,
-            enabled_bundles=enabled_bundles.split(',') if enabled_bundles else [],
-            disabled_bundles=disabled_bundles.split(',') if disabled_bundles else [],
-            development_css=development_css,
-            development_js=development_js,
-            production_css=production_css,
-            production_js=production_js,
-            tinymce_content_css=tinymce_content_css
-        )
+    return Theme(
+        name,
+        rules,
+        title=title,
+        description=description,
+        absolutePrefix=prefix,
+        parameterExpressions=params,
+        doctype=doctype,
+        preview=preview,
+        enabled_bundles=enabled_bundles,
+        disabled_bundles=disabled_bundles,
+        development_css=development_css,
+        development_js=development_js,
+        production_css=production_css,
+        production_js=production_js,
+        tinymce_content_css=tinymce_content_css
+    )
 
 
 def getAvailableThemes():
     """Get a list of all ITheme's available in resource directories.
     """
-
     resources = getAllResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)
     themes = []
     for name, manifest in resources.items():
@@ -383,60 +337,15 @@ def getAvailableThemes():
 def getThemeFromResourceDirectory(resourceDirectory):
     """Return a Theme object from a resource directory
     """
-
     name = resourceDirectory.__name__
-
-    title = name.capitalize().replace('-', ' ').replace('.', ' ')
-    description = None
-    rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, name, RULE_FILENAME,)
-    prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME, name,)
-    params = {}
-    doctype = ""
-    enabled_bundles = ''
-    disabled_bundles = ''
-    development_css = ''
-    development_js = ''
-    production_css = ''
-    production_js = ''
-    tinymce_content_css = ''
-
     if resourceDirectory.isFile(MANIFEST_FILENAME):
         manifest = getManifest(
-            resourceDirectory.openFile(MANIFEST_FILENAME), MANIFEST_FORMAT)
-
-        title = manifest['title'] or title
-        description = manifest['description'] or description
-        rules = manifest['rules'] or rules
-        prefix = manifest['prefix'] or prefix
-        params = manifest['parameters'] or params
-        doctype = manifest['doctype'] or doctype
-        enabled_bundles = manifest['enabled-bundles'] or ''
-        disabled_bundles = manifest['disabled-bundles'] or ''
-        development_css = manifest['development-css'] or ''
-        development_js = manifest['development-js'] or ''
-        production_css = manifest['production-css'] or ''
-        production_js = manifest['production-js'] or ''
-        tinymce_content_css = manifest['tinymce-content-css'] or ''
-
-    if isinstance(rules, str):
-        rules = rules.decode('utf-8')
-    if isinstance(prefix, str):
-        prefix = prefix.decode('utf-8')
+            resourceDirectory.openFile(MANIFEST_FILENAME), MANIFEST_FORMAT
+        )
+    else:
+        manifest = {}
 
-    return Theme(name, rules,
-                title=title,
-                description=description,
-                absolutePrefix=prefix,
-                parameterExpressions=params,
-                doctype=doctype,
-                enabled_bundles=enabled_bundles.split(',') if enabled_bundles else [],
-                disabled_bundles=disabled_bundles.split(',') if disabled_bundles else [],
-                development_css=development_css,
-                development_js=development_js,
-                production_css=production_css,
-                production_js=production_js,
-                tinymce_content_css=tinymce_content_css
-            )
+    return getTheme(name, manifest)
 
 
 def getZODBThemes():
@@ -484,23 +393,21 @@ def isThemeEnabled(request, settings=None):
         return False
 
     # Check for diazo.off request parameter
-    if (DevelopmentMode and
-        request.get('diazo.off', '').lower() in ('1', 'y', 'yes', 't', 'true')
-    ):
+    true_vals = ('1', 'y', 'yes', 't', 'true')
+    if (DevelopmentMode and request.get('diazo.off', '').lower() in true_vals):
         return False
 
     if settings is None:
         registry = queryUtility(IRegistry)
         if registry is None:
             return False
-
         settings = registry.forInterface(IThemeSettings, False)
 
     if not settings.enabled or not settings.rules:
         return False
 
     server_url = request.get('SERVER_URL')
-    _, host = server_url.split('://', 1)
+    proto, host = server_url.split('://', 1)
     host = host.lower()
     serverPort = request.get('SERVER_PORT')
 
@@ -624,6 +531,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):
 
     return themeName
 
+
 def getParser(type, readNetwork):
     """Set up a parser for either rules, theme or compiler
     """
@@ -640,39 +548,54 @@ def getParser(type, readNetwork):
         parser.resolvers.add(NetworkResolver())
     return parser
 
-def compileThemeTransform(rules, absolutePrefix=None, readNetwork=False, parameterExpressions=None, runtrace=False):
+
+def compileThemeTransform(
+    rules,
+    absolutePrefix=None,
+    readNetwork=False,
+    parameterExpressions=None,
+    runtrace=False
+):
     """Prepare the theme transform by compiling the rules with the given options
     """
 
     if parameterExpressions is None:
         parameterExpressions = {}
 
-    accessControl = etree.XSLTAccessControl(read_file=True, write_file=False, create_dir=False, read_network=readNetwork, write_network=False)
+    accessControl = etree.XSLTAccessControl(
+        read_file=True,
+        write_file=False,
+        create_dir=False,
+        read_network=readNetwork,
+        write_network=False
+    )
 
     if absolutePrefix:
         absolutePrefix = expandAbsolutePrefix(absolutePrefix)
-
-    params = set(parameterExpressions.keys() + ['url', 'base', 'path', 'scheme', 'host'])
-    xslParams = dict((k, '') for k in params)
-
-    compiledTheme = compile_theme(rules,
-            absolute_prefix=absolutePrefix,
-            parser=getParser('theme', readNetwork),
-            rules_parser=getParser('rules', readNetwork),
-            compiler_parser=getParser('compiler', readNetwork),
-            read_network=readNetwork,
-            access_control=accessControl,
-            update=True,
-            xsl_params=xslParams,
-            runtrace=runtrace,
-        )
+    params = set(['url', 'base', 'path', 'scheme', 'host'])
+    params.update(parameterExpressions.keys())
+    xslParams = {k: '' for k in params}
+
+    compiledTheme = compile_theme(
+        rules,
+        absolute_prefix=absolutePrefix,
+        parser=getParser('theme', readNetwork),
+        rules_parser=getParser('rules', readNetwork),
+        compiler_parser=getParser('compiler', readNetwork),
+        read_network=readNetwork,
+        access_control=accessControl,
+        update=True,
+        xsl_params=xslParams,
+        runtrace=runtrace,
+    )
 
     if not compiledTheme:
         return None
 
-    return etree.XSLT(compiledTheme,
-            access_control=accessControl,
-        )
+    return etree.XSLT(
+        compiledTheme,
+        access_control=accessControl,
+    )
 
 
 def prepareThemeParameters(context, request, parameterExpressions, cache=None):
@@ -688,32 +611,33 @@ def prepareThemeParameters(context, request, parameterExpressions, cache=None):
     parts = urlsplit(base.lower())
 
     params = dict(
-            url=quote_param(url),
-            base=quote_param(base),
-            path=quote_param(path),
-            scheme=quote_param(parts.scheme),
-            host=quote_param(parts.netloc),
-        )
+        url=quote_param(url),
+        base=quote_param(base),
+        path=quote_param(path),
+        scheme=quote_param(parts.scheme),
+        host=quote_param(parts.netloc),
+    )
 
     # Add expression-based parameters
-    if parameterExpressions:
+    if not parameterExpressions:
+        return params
 
-        # Compile and cache expressions
-        expressions = None
-        if cache is not None:
-            expressions = cache.expressions
+    # Compile and cache expressions
+    expressions = None
+    if cache is not None:
+        expressions = cache.expressions
 
-        if expressions is None:
-            expressions = {}
-            for name, expressionText in parameterExpressions.items():
-                expressions[name] = compileExpression(expressionText)
+    if expressions is None:
+        expressions = {}
+        for name, expressionText in parameterExpressions.items():
+            expressions[name] = compileExpression(expressionText)
 
-            if cache is not None:
-                cache.updateExpressions(expressions)
+        if cache is not None:
+            cache.updateExpressions(expressions)
 
-        # Execute all expressions
-        expressionContext = createExpressionContext(context, request)
-        for name, expression in expressions.items():
-            params[name] = quote_param(expression(expressionContext))
+    # Execute all expressions
+    expressionContext = createExpressionContext(context, request)
+    for name, expression in expressions.items():
+        params[name] = quote_param(expression(expressionContext))
 
     return params


