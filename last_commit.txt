Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-06T11:41:11+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/326e3d4cdc596bdae8ffaf6b097d5b48023450cb

cleanup: pep8 et al, docstyle, zca-decorators

Files changed:
M CHANGES.rst
M README.rst
M docs/behaviors/behavior-basics.rst
M docs/behaviors/creating-and-registering-behaviors.rst
M docs/behaviors/intro.rst
M docs/behaviors/providing-marker-interfaces.rst
M docs/behaviors/schema-only-behaviors.rst
M docs/behaviors/testing-behaviors.rst
M docs/custom-views.rst
M docs/grok/index.rst
M docs/reference/dexterity-xml.rst
M docs/reference/manipulating-content-objects.rst
M docs/reference/misc.rst
M plone/app/__init__.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/__init__.py
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/discussion.py
M plone/app/dexterity/behaviors/exclfromnav.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/id.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/behaviors/nextprevious.py
M plone/app/dexterity/behaviors/related.py
M plone/app/dexterity/browser/__init__.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/fields.py
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/overview.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/browser/utils.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/serialize.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/__init__.py
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_robot.py
M plone/app/dexterity/tests/test_upgrades.py
M plone/app/dexterity/upgrades/to1.py
M plone/app/dexterity/upgrades/to2.py
M plone/app/dexterity/upgrades/to2000.py
M plone/app/dexterity/upgrades/to2001.py
M plone/app/dexterity/upgrades/to2002.py
M plone/app/dexterity/upgrades/to2003.py
M plone/app/dexterity/upgrades/to2004.py

diff --git a/CHANGES.rst b/CHANGES.rst
index eb37398..041a077 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,9 @@ Changelog
 2.1.3 (unreleased)
 ------------------
 
+- Code and docs housekeeping: pep8 et al, zca decorators, doc style.
+  [jensens]
+
 - Ensure the default creator value is a unicode string.
   [lentinj]
 
diff --git a/README.rst b/README.rst
index 50ded0e..a1a0ab8 100644
--- a/README.rst
+++ b/README.rst
@@ -182,5 +182,6 @@ Dexterity wouldn't be possible without the hard work of a lot of people, includi
 * Andi Zeidler
 * Hector Velarde
 * Giacomo Spettoli
+* Jens Klein
 
 (Please add your name if we have neglected to.)
diff --git a/docs/behaviors/behavior-basics.rst b/docs/behaviors/behavior-basics.rst
index d304964..a4a4fef 100644
--- a/docs/behaviors/behavior-basics.rst
+++ b/docs/behaviors/behavior-basics.rst
@@ -3,32 +3,24 @@ Behavior basics
 
 **The fundamental concepts behind behaviors**
 
-Before we dive into the practical examples, we need to explain a few of
-the concepts that underpin behaviors.
+Before we dive into the practical examples, we need to explain a few of the concepts that underpin behaviors.
 
-At the most basic level, a behavior is like a ‘conditional’ adapter. For
-a Dexterity content type, the condition is, "is this behavior listed in
-the *behaviors* property in the FTI?" When a behavior is enabled for a
-particular object, it will be possible to adapt that object to the
-behavior’s interface. If the behavior is disabled, adaptation will fail.
+At the most basic level, a behavior is like a ‘conditional’ adapter.
+For a Dexterity content type, the default condition is, "is this behavior listed in the *behaviors* property in the FTI?"
+But the condition itself is an adapter, in rare cases this can be overruled.
+When a behavior is enabled for a particular object, it will be possible to adapt that object to the behavior’s interface.
+If the behavior is disabled, adaptation will fail.
 
-A behavior consist at the very least of an interface and some metadata,
-namely a title and a description. In most cases, there is also a
-*factory*, akin to an adapter factory, which will be invoked to get an
-appropriate adapter when requested. This is usually just a class that
-looks like any other adapter factory, although it will tend to be
-applicable to *Interface*, *IContentish* or a similarly broad context.
+A behavior consist at the very least of an interface and some metadata, namely a title and a description.
+In most cases, there is also a *factory*, akin to an adapter factory, which will be invoked to get an appropriate adapter when requested.
+This is usually just a class that looks like any other adapter factory, although it will tend to be applicable to *Interface*, *IContentish* or a similarly broad context.
 
-In some cases, behaviors specify a *marker interface*, which will be
-directly provided by instances for which the behavior is enabled. This
-is useful if you want to conditionally enable event handlers or view
-components, which are registered for this marker interface. Some
-behaviors have no factory. In this case, the behavior interface and the
-marker interface must be one and the same.
+Behaviors may specify a *marker interface*, which will be directly provided by instances for which the behavior is enabled.
+This is useful if you want to conditionally enable event handlers or view components, which are registered for this marker interface.
+Some behaviors have no factory. In this case, the behavior interface and the marker interface must be one and the same.
+If a factory is given a marker interface different from the behavior interface must be declared.
 
-Behaviors are registered globally, using the *<plone.behavior />* ZCML
-directive. This results in, among other things, a named utility
-providing *plone.behavior.interfaces.IBehavior* being registered. This
-utility contains various information about the behavior, such as its
-name, title, interface and (optional) marker interface. The utility name
-is the full dotted name to the behavior interface.
+Behaviors are registered globally, using the *<plone.behavior />* ZCML directive.
+This results in, among other things, a named utility providing *plone.behavior.interfaces.IBehavior* being registered.
+This utility contains various information about the behavior, such as its name, title, interface and (optional) marker interface.
+The utility name is the full dotted name to the behavior interface.
diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst
index a05d299..3237fc3 100644
--- a/docs/behaviors/creating-and-registering-behaviors.rst
+++ b/docs/behaviors/creating-and-registering-behaviors.rst
@@ -3,13 +3,11 @@ Creating and registering behaviors
 
 **How to create a basic behavior that provides form fields**
 
-The following example is based on the `collective.gtags`_ product, which
-comes with a behavior that adds a *tags* field to the “Categorization”
-fieldset, storing the actual tags in the Dublin Core *Subject* field.
+The following example is based on the `collective.gtags`_ product.
+It comes with a behavior that adds a *tags* field to the “Categorization” fieldset, storing the actual tags in the Dublin Core *Subject* field.
 
-*collective.gtags* is a standard package, with a *configure.zcml*, a
-GenericSetup profile, and a number of modules. We won’t describe those
-here, though, since we are only interested in the behavior.
+*collective.gtags* is a standard package, with a *configure.zcml*, a GenericSetup profile, and a number of modules.
+We won’t describe those here, though, since we are only interested in the behavior.
 
 First, there are a few dependencies in *setup.py*:
 
@@ -23,9 +21,8 @@ First, there are a few dependencies in *setup.py*:
               'zope.component',
           ],
 
-Next, we have *behaviors.zcml*, which is included from *configure.zcml*
-and contains all necessary configuration to set up the behaviors. It
-looks like this:
+Next, we have *behaviors.zcml*, which is included from *configure.zcml* and contains all necessary configuration to set up the behaviors.
+It looks like this:
 
 .. code-block:: xml
 
@@ -45,18 +42,14 @@ looks like this:
 
     </configure>
 
-We first include the *plone.behavior meta.zcml* file, so that we get
-access to the *<plone:behavior />* ZCML directive.
+We first include the *plone.behavior meta.zcml* file, so that we get access to the *<plone:behavior />* ZCML directive.
 
-The behavior itself is registered with the *<plone:behavior />*
-directive. We set a *title* and a *description*, and then speicfy the
-**behavior interface** with the *provides* attribute. This attribute is
-required, and is used to construct the unique name for the behavior. In
-this case, the behavior name is *collective.gtags.behaviors.ITags*, the
-full dotted name to the behavior interface. When the behavior is enabled
-for a type, it will be possible to adapt instances of that type to
-*ITags*. That adaptation will invoke the factory specified by the
-*factory* attribute.
+The behavior itself is registered with the *<plone:behavior />* directive.
+We set a *title* and a *description*, and then speicfy the **behavior interface** with the *provides* attribute.
+This attribute is required, and is used to construct the unique name for the behavior.
+In this case, the behavior name is *collective.gtags.behaviors.ITags*, the full dotted name to the behavior interface.
+When the behavior is enabled for a type, it will be possible to adapt instances of that type to *ITags*.
+That adaptation will invoke the factory specified by the *factory* attribute.
 
 The *behaviors.py* module looks like this:
 
@@ -68,21 +61,23 @@ The *behaviors.py* module looks like this:
     standard Subject field.
     """
 
+    from Products.CMFCore.interfaces import IDublinCore
     from collective.gtags import MessageFactory as _
     from collective.gtags.field import Tags
-    from plone.autoform import directives as form
+    from plone.autoform import directives
     from plone.autoform.interfaces import IFormFieldProvider
     from plone.supermodel import model
-    from Products.CMFCore.interfaces import IDublinCore
-    from zope.interface import implementer, alsoProvides
     from zope.component import adapter
+    from zope.interface import implementer
+    from zope.interface import provider
 
 
+    @provider(IFormFieldProvider)
     class ITags(model.Schema):
         """Add tags to content
         """
 
-        form.fieldset(
+        directives.fieldset(
                 'categorization',
                 label=_(u'Categorization'),
                 fields=('tags',),
@@ -95,8 +90,6 @@ The *behaviors.py* module looks like this:
                 allow_uncommon=True,
             )
 
-    alsoProvides(ITags, IFormFieldProvider)
-
 
     @implementer(ITags)
     @adapter(IDublinCore)
@@ -117,30 +110,24 @@ The *behaviors.py* module looks like this:
                 value = ()
             self.context.setSubject(tuple(value))
 
-We first define the *ITags* interface, which is also the behavior
-interface. Here, we define a single attribute, *tags*, but we could also
-have added methods and additional fields if required. Naturally, these
-need to be implemented by the behavior adapter.
-
-Since we want this behavior to provide form fields, we derive the
-behavior interface from *model.Schema* and set form hints using
-*plone.autoform.directives*. We also mark the *ITags* interface with
-*IFormFieldProvider* to signal that it should be processed for form
-fields by the standard forms. See the `Dexterity Developer Manual`_ for
-more information about setting form hints in schema interfaces.
-
-If your behavior does not provide form fields, you can just derive from
-*zope.interface.Interface* and omit the *alsoProvides()* line.
-
-Next, we write the class that implements the behavior adapter and acts
-the adapter factory. Notice how it implements the behavior interface
-(*ITags*), and adapts a broad interface *(IDublinCore*). The behavior
-cannot be enabled on types not supporting this interface. In many cases,
-you will omit the *adapter()* line, provided your behavior is generic
-enough to work on any context.
-
-The adapter is otherwise identical to any other adapter. It implements
-the interface, here by storing values in the *Subject* field.
+We first define the *ITags* interface, which is also the behavior interface.
+Here, we define a single attribute, *tags*, but we could also have added methods and additional fields if required.
+Naturally, these need to be implemented by the behavior adapter.
+
+Since we want this behavior to provide form fields, we derive the behavior interface from *model.Schema* and set form hints using
+*plone.autoform.directives*.
+We also mark the *ITags* interface with *IFormFieldProvider* to signal that it should be processed for form fields by the standard forms.
+See the `Dexterity Developer Manual`_ for more information about setting form hints in schema interfaces.
+
+If your behavior does not provide form fields, you can just derive from *zope.interface.Interface* and omit the *alsoProvides()* line.
+
+Next, we write the class that implements the behavior adapter and acts the adapter factory.
+Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*).
+The behavior cannot be enabled on types not supporting this interface.
+In many cases, you will omit the *adapter()* line, provided your behavior is generic enough to work on any context.
+
+The adapter is otherwise identical to any other adapter.
+It implements the interface, here by storing values in the *Subject* field.
 
 .. _Dexterity Developer Manual: ../index.html
 .. _collective.gtags: http://svn.plone.org/svn/collective/collective.gtags
diff --git a/docs/behaviors/intro.rst b/docs/behaviors/intro.rst
index c78c66f..d7d9303 100644
--- a/docs/behaviors/intro.rst
+++ b/docs/behaviors/intro.rst
@@ -3,44 +3,34 @@ Introduction
 
 **About this manual**
 
-*Behaviors* are re-usable bundles of functionality that can be enabled
-or disabled on a per-content type basis. Examples might include:
-
--  A set of form fields (on standard add and edit forms)
--  Enabling particular event handler
--  Enabling one or more views, viewlets or other UI components
--  Anything else which may be expressed in code via an adapter and/or
-   marker interface
-
-You would typically not write a behavior as a one-off. Behaviors are
-normally used when:
-
--  You want to share fields and functionality across multiple types
-   easily. Behaviors allow you to write a schema and associated
-   components (e.g. adapters, event handlers, views, viwelets) once and
-   re-use them easily.
--  A more experienced developer is making functionality available for
-   re-use by less experienced integrators. For example, a behavior can
-   be packaged up and release as an add-on product. Integators can then
-   install that product and use the behavior in their own types, either
-   in code or through-the-web.
-
-This manual is aimed at developers who want to write new behaviors. This
-is a slightly more advanced topic than the writing of custom content
-types, and we will assume that you are familiar with buildout, know how
-to create a custom package, understand interfaces and have a basic
-understanding of Zope’s adapter concept.
-
-Behaviors are not tied to Dexterity, but Dexterity provides behavior
-support for its types via the *behaviors* FTI property. In fact, if
-you’ve used Dexterity before, you’ve probably used some behaviors. Take
-a look at the `Dexterity Developer Manual`_ for more information about
-how to enable behaviors on a type and for a list of standard behaviors.
-
-To learn more about how behaviors are implemented, see the
-`plone.behavior`_ package. This manual should teach you everything you
-need to know to write your own behaviors, but not how to integrate them
-into another framework.
+This manual should teach you everything you need to know to write your own behaviors, but not how to integrate them into another framework.
+
+*Behaviors* are re-usable bundles of functionality that can be enabled or disabled on a per-content type basis.
+Examples might include:
+
+-  A set of form fields (on standard add and edit forms),
+-  Enabling particular event handler,
+-  Enabling one or more views, viewlets or other UI components,
+-  Anything else which may be expressed in code via an adapter and/or marker interface.
+
+You would typically not write a behavior as a one-off.
+Behaviors are normally used when:
+
+-  You want to share fields and functionality across multiple types easily.
+   Behaviors allow you to write a schema and associated components (e.g. adapters, event handlers, views, viwelets) once and re-use them easily.
+-  A more experienced developer is making functionality available for re-use by less experienced integrators.
+   For example, a behavior can be packaged up and release as an add-on product.
+   Integators can then install that product and use the behavior in their own types, either in code or through-the-web.
+
+This manual is aimed at developers who want to write new behaviors.
+This is a slightly more advanced topic than the writing of custom content types.
+It assumes you are familiar with buildout, know how to create a custom package, understand interfaces and have a basic understanding of Zope’s component architecture.
+
+Behaviors are not tied to Dexterity, but Dexterity provides behavior support for its types via the *behaviors* FTI property.
+In fact, if you’ve used Dexterity before, you’ve probably used some behaviors.
+Take a look at the `Dexterity Developer Manual`_ for more information about how to enable behaviors on a type and for a list of standard behaviors.
+
+To learn more about how behaviors in detail are implemented, see the `plone.behavior`_ package.
 
 .. _Dexterity Developer Manual: ../index.html
 .. _plone.behavior: http://pypi.python.org/pypi/plone.behavior
diff --git a/docs/behaviors/providing-marker-interfaces.rst b/docs/behaviors/providing-marker-interfaces.rst
index 0f33274..6e4ade7 100644
--- a/docs/behaviors/providing-marker-interfaces.rst
+++ b/docs/behaviors/providing-marker-interfaces.rst
@@ -3,37 +3,29 @@ Providing marker interfaces
 
 **How to use behaviors to set marker interfaces on instances of a given type.**
 
-Sometimes, it is useful for objects that provide a particular behavior
-to also provide a specific marker interface. For example, you can
-register a viewlet for a particular marker and use a behavior to enable
-that marker on all instances of a particular content type. The viewlet
-will then only show up when the behavior is enabled. The same principle
-can be applied to event handlers, views and other components.
+Sometimes, it is useful for objects that provide a particular behavior to also provide a specific marker interface.
+For example, you can register a viewlet for a particular marker and use a behavior to enable that marker on all instances of a particular content type.
+The viewlet will then only show up when the behavior is enabled.
+The same principle can be applied to event handlers, views and other components.
 
 .. note::
-    There is usually no need to use markers to enable a custom adapter since
-    a standard behavior is already a conditional adapter. However, in
-    certain cases, you may want to provide one or more adapters to an
-    interface that is not the behavior interface, e.g. to use a particular
-    extension point provided by another component. In this case, it may
-    easier to set a marker interface and provide an adapter from this
-    marker.
+    There is usually no need to use markers to enable a custom adapter since a standard behavior is already a conditional adapter.
+    However, in certain cases, you may want to provide one or more adapters to an interface that is not the behavior interface.
+    E.g. to use a particular extension point provided by another component.
+    In this case, it may easier to set a marker interface and provide an adapter from this marker.
 
 *plone.behavior’s* marker support can be used in two ways:
 
--  As the behavior interface itself. In this case, there is no behavior
-   adapter factory. The behavior interface and the marker interface are
-   one and the same.
--  As a supplement to a standard behavior adapter. In this case, a
-   factory is provided, and the behavior interface (which the behavior
-   adapter factory implements) is different to the marker interface.
+- As the behavior interface itself. In this case, there is no behavior adapter factory.
+  The behavior interface and the marker interface are one and the same.
+- As a supplement to a standard behavior adapter.
+  In this case, a factory is provided, and the behavior interface (which the behavior adapter factory implements) is different to the marker interface.
 
 Primary marker behaviors
 ------------------------
 
-In the first case, where the behavior interface and the marker interface
-are the same, you can simply use the *<plone:behavior />*directive
-without a *factory*. For example:
+In the first case, where the behavior interface and the marker interface are the same, you can simply use the *<plone:behavior />*directive without a *factory*.
+For example:
 
 .. code-block:: xml
 
@@ -43,28 +35,22 @@ without a *factory*. For example:
             provides=".behaviors.IWantAPony"
             />
 
-One could imagine a viewlet based on `plone.pony`_ registered for the
-*IWantAPony* marker interface. If the behavior is enabled for a
-particular object, *IWantAPony.providedBy(object)* would be true.
+One could imagine a viewlet based on `plone.pony`_ registered for the *IWantAPony* marker interface.
+If the behavior is enabled for a particular object, *IWantAPony.providedBy(object)* would be true.
 
 Supplementary marker behaviors
 ------------------------------
 
-In the second case, we want to provide a behavior interface with a
-behavior adapter factory as usual (e.g. with some form fields and a
-custom storage or a few methods implemented in an adapter), but we also
-need a custom marker. Here, we use both the *provides* and *marker*
-attributes to *<plone:behavior />* to reference the two interfaces, as
-well as a *factory*.
-
-To show a slightly more interesting example, here is a behavior from a
-project that lets content authors with particular permissions
-(*iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers*), nominate
-the “official” and any “unofficial” reviewers for a given content item.
-The behavior provides the necessary form fields to support this, but it
-also sets a marker interface that enables an *ILocalRoleProvider*
-adapter to automatically grant local roles to the chosen reviewers, as
-well as a custom indexer that lists the reviewers.
+In the second case, we want to provide a behavior interface with a behavior adapter factory as usual (e.g. with some form fields and a
+custom storage or a few methods implemented in an adapter), but we also need a custom marker.
+Here, we use both the *provides* and *marker* attributes to *<plone:behavior />* to reference the two interfaces, as well as a *factory*.
+
+To a more interesting example, here is a behavior from a project that lets content authors with particular permissions (*iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers*), nominate the “official” and any “unofficial” reviewers for a given content item.
+The behavior provides the necessary form fields to support this.
+It also sets a marker interface that enables
+
+- an *ILocalRoleProvider* adapter to automatically grant local roles to the chosen reviewers,
+- a custom indexer that lists the reviewers.
 
 The ZCML registration looks like this:
 
@@ -78,11 +64,10 @@ The ZCML registration looks like this:
             marker=".reviewers.IReviewersMarker"
             />
 
-Notice the use of the *AnnotationStorage* factory. This is a re-usable
-factory that can be used to easily create behaviors from schema
-interfaces that store their values in annotations. We’ll describe this
-in more detail later. We could just as easily have provided our own
-factory in this example.
+Notice the use of the *AnnotationStorage* factory.
+This is a re-usable factory that can be used to easily create behaviors from schema interfaces that store their values in annotations.
+We’ll describe this in more detail later.
+We could just as easily have provided our own factory in this example.
 
 The *reviewers.py* module contains the following:
 
@@ -95,49 +80,66 @@ The *reviewers.py* module contains the following:
     OfficialReviewer roles appropriately.
     """
 
+    from Products.ZCatalog.interfaces import IZCatalog
     from borg.localrole.interfaces import ILocalRoleProvider
     from iz.behaviors import MessageFactory as _
-    from plone.autoform import directives as form
+    from plone.autoform import directives
     from plone.autoform.interfaces import IFormFieldProvider
     from plone.formwidget.autocomplete.widget import AutocompleteMultiFieldWidget
     from plone.indexer.interfaces import IIndexer
     from plone.supermodel import model
-    from Products.ZCatalog.interfaces import IZCatalog
     from zope import schema
-    from zope.interface import alsoProvides, Interface
     from zope.component import adapter
+    from zope.interface import Interface
+    from zope.interface import provider
 
+
+    @provider(IFormFieldProvider)
     class IReviewers(model.Schema):
         """Support for specifying official and unofficial reviewers
         """
 
-        form.fieldset(
+        directives.fieldset(
                 'ownership',
                 label=_(u'Ownership'),
-                fields=('official_reviewers', 'unofficial_reviewers'),
+                fields=(
+                    'official_reviewers',
+                    'unofficial_reviewers'
+                ),
             )
 
-        form.widget(official_reviewers=AutocompleteMultiFieldWidget)
-        form.write_permission(official_reviewers='iz.EditOfficialReviewers')
+        directives.widget(official_reviewers=AutocompleteMultiFieldWidget)
+        directives.write_permission(official_reviewers='iz.EditOfficialReviewers')
         official_reviewers = schema.Tuple(
                 title=_(u'Official reviewers'),
-                description=_(u'People or groups who may review this item in an official capacity.'),
-                value_type=schema.Choice(title=_(u"Principal"), source="plone.principalsource.Principals"),
+                description=_(
+                    u'People or groups who may review this item in an official '
+                    u'capacity.'
+                ),
+                value_type=schema.Choice(
+                    title=_(u"Principal"),
+                    source="plone.principalsource.Principals"
+                ),
                 required=False,
                 missing_value=(), # important!
             )
 
-        form.widget(unofficial_reviewers=AutocompleteMultiFieldWidget)
-        form.write_permission(unofficial_reviewers='iz.EditUnofficialReviewers')
+        directives.widget(unofficial_reviewers=AutocompleteMultiFieldWidget)
+        directives.write_permission(unofficial_reviewers='iz.EditUnofficialReviewers')
         unofficial_reviewers = schema.Tuple(
                 title=_(u'Unofficial reviewers'),
-                description=_(u'People or groups who may review this item in a supplementary capacity'),
-                value_type=schema.Choice(title=_(u"Principal"), source="plone.principalsource.Principals"),
+                description=_(
+                    u'People or groups who may review this item in a supplementary '
+                    u'capacity'
+                ),
+                value_type=schema.Choice(
+                    title=_(u"Principal"),
+                    source="plone.principalsource.Principals"
+                ),
                 required=False,
                 missing_value=(), # important!
             )
 
-    alsoProvides(IReviewers, IFormFieldProvider)
 
     class IReviewersMarker(Interface):
         """Marker interface that will be provided by instances using the
@@ -145,6 +147,7 @@ The *reviewers.py* module contains the following:
         this marker.
         """
 
+
     @implementer(ILocalRoleProvider)
     @adapter(IReviewersMarker)
     class ReviewerLocalRoles(object):
@@ -204,9 +207,7 @@ The *reviewers.py* module contains the following:
             unofficial = self.reviewers.unofficial_reviewers or ()
             return tuple(set(official + unofficial))
 
-Note that the *iz.EditOfficialReviewers* and
-*iz.EditUnofficialReviewers* permissions are defined and granted
-elsewhere.
+Note that the *iz.EditOfficialReviewers* and *iz.EditUnofficialReviewers* permissions are defined and granted elsewhere.
 
 We need to register these components in *configure.zcml*:
 
@@ -216,26 +217,15 @@ We need to register these components in *configure.zcml*:
     <adapter factory=".reviewers.ReviewersIndexer" name="reviewers" />
 
 
-This is quite a complex behavior, but hopefully you can see what’s going
-on:
-
--  There is a standard schema interface, which includes form hints
-   using *plone.autoform.directives* and is marked as an *IFormFieldProvider*.
-   It uses *plone.formwidget.autocomplete* and *plone.principalsource*
-   to implement the fields.
--  We define a marker interface (*IReviewersMarker*) and register this
-   with the *marker* attribute of the *<plone:behavior />* directive.
--  We define and register an adapter from this marker to *ILocalRoles* from
-   *borg.localrole*.
--  Similarly, we register a multi-adapter to *IIndexer*, as provided by
-   *plone.indexer*.
-
-Although this behavior provides a lot of functionality, it is no more
-difficult for integrators to use than any other: they would simply list
-the behavior interface (*iz.behaviors.reviewers.IReviewers* in this
-case) in the FTI, and all this functionality comes to life. This is the
-true power of behaviors: developers can bundle up complex functionality
-into re-usable behaviors, which can then be enabled on a per-type basis
-by integrators (or the same developers in lazier moments).
+This is quite a complex behavior, but hopefully you can see what’s going on:
+
+-  There is a standard schema interface, which includes form hints using *plone.autoform.directives* and is marked as an *IFormFieldProvider*.
+   It uses *plone.formwidget.autocomplete* and *plone.principalsource* to implement the fields.
+-  We define a marker interface (*IReviewersMarker*) and register this with the *marker* attribute of the *<plone:behavior />* directive.
+-  We define and register an adapter from this marker to *ILocalRoles* from *borg.localrole*.
+-  Similarly, we register a multi-adapter to *IIndexer*, as provided by *plone.indexer*.
+
+Although this behavior provides a lot of functionality, it is no more difficult for integrators to use than any other:
+they would simply list the behavior interface (*iz.behaviors.reviewers.IReviewers* in this case) in the FTI, and all this functionality comes to life. This is the true power of behaviors: developers can bundle up complex functionality into re-usable behaviors, which can then be enabled on a per-type basis by integrators (or the same developers in lazier moments).
 
 .. _plone.pony: http://pypi.python.org/pypi/plone.pony
diff --git a/docs/behaviors/schema-only-behaviors.rst b/docs/behaviors/schema-only-behaviors.rst
index 60ff860..b8f6e84 100644
--- a/docs/behaviors/schema-only-behaviors.rst
+++ b/docs/behaviors/schema-only-behaviors.rst
@@ -3,25 +3,19 @@ Schema-only behaviors using annotations or attributes
 
 **Writing behaviors that provide schema fields**
 
-Oftentimes, we simply want a behavior to be a reusable collection of
-form fields. Integrators can then compose their types by combining
-different schemata. Writing the behavior schema is no different to
-writing any other schema interface. But how and where do we store the
-values? By default, *plone.behavior* provides two alternatives.
+Oftentimes, we simply want a behavior to be a reusable collection of form fields.
+Integrators can then compose their types by combining different schemata.
+Writing the behavior schema is no different to writing any other schema interface.
+But how and where do we store the values?
+By default, *plone.behavior* provides two alternatives.
 
 Using annotations
 -----------------
 
-Annotations, as provided by the `zope.annotation`_ package, are a
-standard means of storing of key/value pairs on objects. In the default
-implementation (so-called *attribute annotation*), the values are stored
-in a BTree on the object called *\_\_annotations\_\_*. The raw
-annotations API involves adapting the object to the *IAnnotations*
-interface, which behaves like a dictionary, and storing values under
-unique keys here. *plone.behavior* comes with a special type of factory
-that means you can simply adapt an object to its behavior interface to
-get an adapter providing this interface, on which you can get and set
-values, which are eventually stored in annotations.
+Annotations, as provided by the `zope.annotation`_ package, are a standard means of storing of key/value pairs on objects.
+In the default implementation (so-called *attribute annotation*), the values are stored in a BTree on the object called *\_\_annotations\_\_*.
+The raw annotations API involves adapting the object to the *IAnnotations* interface, which behaves like a dictionary, and storing values under unique keys here.
+*plone.behavior* comes with a special type of factory that means you can simply adapt an object to its behavior interface to get an adapter providing this interface, on which you can get and set values, which are eventually stored in annotations.
 
 We’ve already seen an example of this factory:
 
@@ -35,24 +29,18 @@ We’ve already seen an example of this factory:
             marker=".reviewers.IReviewersMarkere"
             />
 
-Here, *plone.behavior.AnnotationStorage* is a behavior factory that can
-be used by any behavior with an interface that consists entirely of
-*zope.schema* fields. It simply stores those items in object
-annotations, saving you the trouble of writing your own annotation
-storage adapter. If you adapt an object for which the behavior is
-enabled to the behavior interface, you will be able to read and write
-values off the resultant adapter as normal.
+Here, *plone.behavior.AnnotationStorage* is a behavior factory that can be used by any behavior with an interface that consists entirely of *zope.schema* fields.
+It simply stores those items in object annotations, saving you the trouble of writing your own annotation storage adapter.
+If you adapt an object for which the behavior is enabled to the behavior interface, you will be able to read and write values off the resultant adapter as normal.
 
 Storing attributes
 ------------------
 
-This approach is convenient, but there is another approach that is even
-more convenient, and, contrary to what you may think, may be more
-efficient: simply store the attributes of the schema interface directly
-on the content object.
+This approach is convenient, but there is another approach that is even more convenient, and, contrary to what you may think, may be more
+efficient:
+simply store the attributes of the schema interface directly on the content object.
 
-As an example, here’s the standard *IRelatedItems* behavior from
-*plone.app.dexerity*:
+As an example, here’s the standard *IRelatedItems* behavior from *plone.app.dexerity*:
 
 .. code-block:: xml
 
@@ -67,14 +55,16 @@ The *IRelatedItems* schema looks like this:
 
 .. code-block:: python
 
-    from plone.autoform.directives import form
     form plone.autoform.interfaces import IFormFieldProvider
+    from plone.autoform.directives import form
     from plone.formwidget.contenttree import ObjPathSourceBinder
     from plone.supermodel import model
-    from z3c.relationfield.schema import RelationChoice, RelationList
-    from zope.interface import alsoProvides
+    from z3c.relationfield.schema import RelationChoice,
+    from z3c.relationfield.schema import RelationList
+    from zope.interface import provider
 
 
+    @provider(IFormFieldProvider)
     class IRelatedItems(model.Schema):
         """Behavior interface to make a type support related items.
         """
@@ -90,48 +80,30 @@ The *IRelatedItems* schema looks like this:
             required=False,
             )
 
-    alsoProvides(IRelatedItems, IFormFieldProvider)
-
 This is a standard schema using *plone.autoform.directives*.
-However, notice the lack of a behavior factory. This is a
-directly provided “marker” interface, except that it has attributes, and
-so it is not actually a marker interface. The result is that the
-*relatedItems* attribute will be stored directly onto a content object
-when first set (usually in the add form).
+However, notice the lack of a behavior factory.
+This is a directly provided “marker” interface, except that it has attributes, and so it is not actually a marker interface.
+The result is that the *relatedItems* attribute will be stored directly onto a content object when first set (usually in the add form).
 
 This approach has a few advantages:
 
--  There is no need to write or use a separate factory, so it is a
-   little easier to use.
--  The attribute is available on the content object directly, so you can
-   write *context/relatedItems* in a TAL expression, for example. This
-   does require that it has been set at least once, though! If the
-   schema is used in the type’s add form, that will normally suffice,
-   but old instances of the same type may not have the attribute and
-   could raise an *AttributeError.*
--  If the value is going to be used frequently, and especially if it is
-   read when viewing the content object, storing it in an attribute is
-   more efficient than storing it in an annotation. (This is because the
-   *\_\_annotations\_\_* BTree is a separate persistent object which has
-   to be loaded into memory, and may push something else out of the ZODB
-   cache.)
+-  There is no need to write or use a separate factory, so it is a little easier to use.
+-  The attribute is available on the content object directly, so you can write *context/relatedItems* in a TAL expression, for example.
+   This does require that it has been set at least once, though!
+   If the schema is used in the type’s add form, that will normally suffice, but old instances of the same type may not have the attribute and could raise an *AttributeError.*
+-  If the value is going to be used frequently, and especially if it is read when viewing the content object, storing it in an attribute is more efficient than storing it in an annotation.
+   Background: This is because the *\_\_annotations\_\_* BTree is a separate persistent object which has to be loaded into memory, and may push something else out of the ZODB cache.
 
 The possible disadvantages are:
 
--  The attribute name may collide with another attribute on the object,
-   either from its class, its base schema, or another behavior. Whether
-   this is a problem in practice depends largely on whether the name is
-   likely to be unique. In most cases, it will probably be sufficiently
-   unique.
--  If the attribute stores a large value, it will increase memory usage,
-   as it will be loaded into memory each time the object is fetched from
-   the ZODB. However, you should use BLOBs or BTrees to store large
-   values anyway. Loading an object with a BLOB or BTree does not mean
-   loading the entire BLOB or Btree, so the memory overhead does not
-   occur unless the whole BLOB or BTree is actually used.
+-  The attribute name may collide with another attribute on the object, either from its class, its base schema, or another behavior.
+   Whether this is a problem in practice depends largely on whether the name is likely to be unique.
+   In most cases, it will probably be sufficiently unique.
+-  If the attribute stores a large value, it will increase memory usage, as it will be loaded into memory each time the object is fetched from the ZODB.
+   However, you should use BLOBs to store large values and BTrees to store many values anyway.
+   Loading an object with a BLOB or BTree does not mean loading the entire data, so the memory overhead does not occur unless the whole BLOB or BTree is actually used.
 
 .. note::
-    “The moral of this story? BTrees do not always make things more
-    efficient!” ~ Laurence Rowe
+    “The moral of this story? BTrees do not always make things more efficient!” ~ Laurence Rowe
 
 .. _zope.annotation: http://pypi.python.org/pypi/zope.annotation
diff --git a/docs/behaviors/testing-behaviors.rst b/docs/behaviors/testing-behaviors.rst
index 4760500..0536a93 100644
--- a/docs/behaviors/testing-behaviors.rst
+++ b/docs/behaviors/testing-behaviors.rst
@@ -3,20 +3,17 @@ Testing behaviors
 
 **How to write unit tests for behaviors**
 
-Behaviors, like any other code, should be tested. If you are writing a
-behavior with just a marker interface or schema interface, it is
-probably not necessary to test the interface. However, any actual code,
-such as a behavior adapter factory, ought to be tested.
+Behaviors, like any other code, should be tested.
+If you are writing a behavior with just a marker interface or schema interface, it is probably not necessary to test the interface.
+However, any actual code, such as a behavior adapter factory, ought to be tested.
 
-Writing a behavior integration test is not very difficult if you are
-happy to depend on Dexterity in your test. You can create a dummy type
-by instantiating a Dexterty FTI in *portal\_types* and enable your
-behavior by adding its interface name to the *behaviors* property.
+Writing a behavior integration test is not very difficult if you are happy to depend on Dexterity in your test.
+You can create a dummy type by instantiating a Dexterty FTI in *portal\_types*.
+Then enable your behavior by adding its interface name to the *behaviors* property.
 
 In many cases, however, it is better not to depend on Dexterity at all.
-It is not too difficult to mock what Dexterity does to enable behaviors
-on its types. The following example is taken from *collective.gtags* and
-tests the *ITags* behavior we saw on the first page of this manual.
+It is not too difficult to mock what Dexterity does to enable behaviors on its types.
+The following example is taken from *collective.gtags* and tests the *ITags* behavior we saw on the first page of this manual.
 
 ::
 
@@ -58,11 +55,11 @@ tests the *ITags* behavior we saw on the first page of this manual.
 
         >>> from plone.behavior.interfaces import IBehaviorAssignable
         >>> from collective.gtags.behaviors import ITags
-        >>> from zope.component import adapts
-        >>> from zope.interface import implements
-        >>> class TestingAssignable(object):
-        ...     implements(IBehaviorAssignable)
-        ...     adapts(Document)
+        >>> from zope.component import adapter
+        >>> from zope.interface import implementer
+        >>> @adapter(Document)
+        ... @implementer(IBehaviorAssignable)
+        ... class TestingAssignable(object):
         ...
         ...     enabled = [ITags]
         ...
@@ -121,46 +118,40 @@ tests the *ITags* behavior we saw on the first page of this manual.
         >>> doc.Subject() == ('Two', 'Three')
         True
 
-This test tries to prove that the behavior is correctly installed and
-works as intended on a suitable content class. It is not a true unit
-test, of course. For that, we would simply test the *Tags* adapter
-directly on a dummy context, but that is not terribly interesting, since
-all it does is convert sets to tuples.
+This test tries to prove that the behavior is correctly installed and works as intended on a suitable content class.
+It is not a true unit test, of course.
+For that, we would simply test the *Tags* adapter directly on a dummy context, but that is not terribly interesting, since all it does is convert sets to tuples.
 
-First, we configure the package. To keep the test small, we limit
-ourselves to the *behaviors.zcml* file, which in this case will suffice.
+First, we configure the package.
+To keep the test small, we limit ourselves to the *behaviors.zcml* file, which in this case will suffice.
 We still need to include a minimal set of ZCML from Five.
 
-Next, we implement an *IBehaviorAssignable*adapter. This is a low-level
-component used by *plone.behavior* to determine if a behavior is enabled
-on a particular object. Dexterity provides an implementation that checks
-the type’s FTI. Our test version is much simpler - it hardcodes the
+Next, we implement an *IBehaviorAssignable*adapter.
+This is a low-level component used by *plone.behavior* to determine if a behavior is enabled on a particular object.
+Dexterity provides an implementation that checks the type’s FTI. Our test version is much simpler - it hardcodes the
 supported behaviors.
 
-With this in place, we first check that the *IBehavior* utility has been
-correctly registered. This is essentially a test to show that we’ve used
-the *<plone:behavior />* directive as intended. We also verify that our
-schema interface is an *IFormFieldsProvider*. For a non-form behavior,
-we’d obviously omit this.
+With this in place, we first check that the *IBehavior* utility has been correctly registered.
+This is essentially a test to show that we’ve used the *<plone:behavior />* directive as intended.
+We also verify that our schema interface is an *IFormFieldsProvider*.
+For a non-form behavior, we’d obviously omit this.
 
-Finally, we test the behavior. We’ve chosen to use CMFDefault’s
-*Document* type for our test, as the behavior adapter requires an object
-providing *IDublinCore*. If we were less lazy, we’d write our own class
-and implement *IDublinCore* directly. However, in many cases, the types
-from CMFDefault are going to provide convenient test fodder.
+Finally, we test the behavior.
+We’ve chosen to use CMFDefault’s *Document* type for our test, as the behavior adapter requires an object providing *IDublinCore*.
+If we were less lazy, we’d write our own class and implement *IDublinCore* directly.
+However, in many cases, the types from CMFDefault are going to provide convenient test fodder.
 
-Obviously, if our behavior was more complex, we’d add more intricate
-tests. By the last section of the doctest, we have enough context to
-test the adapter factory.
+Obviously, if our behavior was more complex, we’d add more intricate tests.
+By the last section of the doctest, we have enough context to test the adapter factory.
 
 To run the test, we need a test suite. In *tests.py*, we have:
 
-::
+.. code-block:: python
 
+    from zope.app.testing import setup
+    from zope.testing import doctestunit
     import doctest
     import unittest
-    from zope.testing import doctestunit
-    from zope.app.testing import setup
 
     def setUp(test):
         pass
@@ -176,8 +167,8 @@ To run the test, we need a test suite. In *tests.py*, we have:
                 optionflags=doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS),
             ))
 
-This runs the *behaviors.rst* doctest from the same directory as the
-*tests.py* file. To run the test, we can use the usual test runner:
+This runs the *behaviors.rst* doctest from the same directory as the *tests.py* file.
+To run the test, we can use the usual test runner:
 
 ::
 
@@ -186,8 +177,5 @@ This runs the *behaviors.rst* doctest from the same directory as the
 A note about marker interfaces
 ------------------------------
 
-Note that marker interface support depends on code that is implemented
-in Dexterity and is non-trivial to reproduce in a test. If you need a
-marker interface in a test, set it manually with
-*zope.interface.alsoProvides*, or write an integration test with
-Dexterity content.
+Note that marker interface support depends on code that is implemented in Dexterity and is non-trivial to reproduce in a test.
+If you need a marker interface in a test, set it manually with *zope.interface.alsoProvides*, or write an integration test with Dexterity content.
diff --git a/docs/custom-views.rst b/docs/custom-views.rst
index e25516a..df21fdd 100644
--- a/docs/custom-views.rst
+++ b/docs/custom-views.rst
@@ -8,17 +8,15 @@ Simple views
 
 **Creating basic views**
 
-So far, our types have used the default views, which use the *display*
-widgets from `z3c.form`_, much like the add and edit forms use the *edit*
-widgets. This is functional, but not very attractive. Most types will
-need one or more custom view templates.
-
-Dexterity types are no different from any other content type in Plone. You
-can register a view for your schema interface, and it will be available
-on your type. If the view is named *view*, it will be the default view,
-at least if you use the standard FTI configuration. This is because the
-FTI’s ``default_view`` property is set to ``view``, and ``view`` is in the
-list of ``view_methods.``
+So far, our types have used the default views.
+They use the *display* widgets from `z3c.form`_, much like the add and edit forms use the *edit* widgets.
+This is functional, but not very attractive.
+Most types will need one or more custom view templates.
+
+Dexterity types are no different from any other content type in Plone.
+You can register a view for your schema interface, and it will be available on your type.
+If the view is named *view*, it will be the default view, at least if you use the standard FTI configuration.
+This is because the FTI’s ``default_view`` property is set to ``view``, and ``view`` is in the list of ``view_methods.``
 
 .. note::
 
@@ -69,11 +67,11 @@ Secondly add a browser view in ``program.py`` as follows:
                            path='/'.join(context.getPhysicalPath()),
                            sort_on='sortable_title')
 
-We have added ``sessions``, a helper method
-which will be used in the view.
+We have added ``sessions``, a helper method which will be used in the view.
 
-You can add any methods to the view. They will be available to the template via
-the ``view`` variable. The content object is available via ``context``.
+You can add any methods to the view.
+They will be available to the template via the ``view`` variable.
+The content object is available via ``context``.
 
 Finaly add a template in ``templates/programview.pt``:
 
@@ -135,17 +133,13 @@ Finaly add a template in ``templates/programview.pt``:
     </html>
 
 
-For the most part, this template outputs the values of the various
-fields, using the ``sessions()`` method on the view to obtain the sessions
-contained within the program.
+For the most part, this template outputs the values of the various fields, using the ``sessions()`` method on the view to obtain the sessions contained within the program.
+
+.. note::
 
-.. note:: Notice how the ``details`` *RichText* field is output as
-   ``tal:content="structure context/details/output"``.
+   Notice how the ``details`` *RichText* field is output as ``tal:content="structure context/details/output"``.
    The ``structure`` keyword ensures that the rendered HTML is not escaped.
-   The extra traversal to ``details/output`` is necessary because the
-   *RichText* field actually stores a *RichTextValue* object that
-   contains not only the raw text as entered by the user, but also a
-   MIME type (e.g. ``text/html``) and the rendered output text.
+   The extra traversal to ``details/output`` is necessary because the *RichText* field actually stores a *RichTextValue* object that contains not only the raw text as entered by the user, but also a MIME type (e.g. ``text/html``) and the rendered output text.
    *RichText* fields are covered in more detail :ref:`later in this manual <richtext-label>`.
 
 The view for ``Presenter`` is even simpler:
@@ -167,8 +161,7 @@ The view for ``Presenter`` is even simpler:
 
     </configure>
 
-The template, in ``templates/presenterview.pt``, is similar to the
-previous template:
+The template, in ``templates/presenterview.pt``, is similar to the previous template:
 
 .. code-block:: html
 
@@ -204,35 +197,34 @@ previous template:
     </body>
     </html>
 
-Obviously, these views are very basic. Much more interesting views could
-be created by putting a little more work into the templates.
+Obviously, these views are very basic.
+Much more interesting views could be created by putting a little more work into the templates.
 
-You should also realise that you can create any type of view using this
-technique. Your view does not have to be related to a particular content
-type, even. You could set the context to ``Interface``, for example, to
-make a view that’s available on all types.
+You should also realise that you can create any type of view using this technique.
+Your view does not have to be related to a particular content type, even.
+You could set the context to ``Interface``, for example, to make a view that’s available on all types.
 
 Display view
 ------------
 
 **Using display widgets in your views**
 
-In the previous section, we created a browser view. This
-kind of view is the most common, but sometimes we want to make use of
-the widgets and information in the type’s schema more directly, for
-example to invoke transforms or re-use more complex HTML.
+In the previous section, we created a browser view.
+This kind of view is the most common.
+Sometimes we want to make use of the widgets and information in the type’s schema more directly.
+For example to invoke transforms or re-use more complex HTML.
 
-To do this, you can use a *display view*. This is really just a view
-base class that knows about the schema of a type. We will use an example
-in ``session.py``, with a template in ``templates/sessionview.pt``.
+To do this, you can use a *display view*.
+This is really just a view base class that knows about the schema of a type.
+We will use an example in ``session.py``, with a template in ``templates/sessionview.pt``.
 
-.. note:: *Display view* involve the same type of overhead as add- and
-   edit-forms. If you have complex content type with many behaviors, fieldsets and
+.. note::
+   *Display view* involve the same type of overhead as add- and edit-forms.
+   If you have complex content type with many behaviors, fieldsets and
    widget hints, you may notice a slow-down. This can be a problem
    on high volume sites.
 
-The new view class is pretty much the same as before, except that we
-derive from ``plone.dexterity.browser.view.DefaultView``:
+The new view class is pretty much the same as before, except that we derive from ``plone.dexterity.browser.view.DefaultView``:
 
 .. code-block:: xml
 
@@ -259,13 +251,11 @@ derive from ``plone.dexterity.browser.view.DefaultView``:
     class SessionView(DefaultView):
         pass
 
-This gives our view a few extra properties that we can use in the
-template:
+This gives our view a few extra properties that we can use in the template:
 
 ``view.w``
     a dictionary of all the display widgets, keyed by field names.
-    For fields provided by behaviors, that is usually prefixed with the
-    behavior interface name (``IBehaviorInterface.field_name``).
+    For fields provided by behaviors, that is usually prefixed with the behavior interface name (``IBehaviorInterface.field_name``).
     For the default schema, unqualified names apply.
 
 ``view.widgets``
@@ -278,8 +268,7 @@ template:
     contains a dictionary mapping fieldset name to fieldset.
 
 ``widgets``
-     On a fieldset (group), you can access a ``widgets`` list to get widgets
-     in that fieldset.
+     On a fieldset (group), you can access a ``widgets`` list to get widgets in that fieldset.
 
 The ``w`` dict is the most commonly used.
 
@@ -311,9 +300,7 @@ The ``templates/sessionview.pt`` template contains the following:
     </body>
     </html>
 
-Notice how we use expressions like ``view/w/details/render`` (where
-``details`` is the field name) to get the rendering of a widget. Other
-properties include ``__name__``, the field name, and ``label``, the
-field title.
+Notice how we use expressions like ``view/w/details/render`` (where ``details`` is the field name) to get the rendering of a widget.
+Other properties include ``__name__``, the field name, and ``label``, the field title.
 
 .. _z3c.form: http://pypi.python.org/pypi/z3c.form
diff --git a/docs/grok/index.rst b/docs/grok/index.rst
index b16f85e..e1df19a 100644
--- a/docs/grok/index.rst
+++ b/docs/grok/index.rst
@@ -2,6 +2,11 @@
 Dexterity Developer Manual
 =======================================================
 
+.. note::
+    ``Grok`` is no longer part of Plone nor is it recommended to use Grok in Plone.
+    This part of a manual needs a complete rewrite to not use grok.
+    All grok does can be done easily with zcml and standard decorators.
+
 .. toctree::
    :maxdepth: 2
 
diff --git a/docs/reference/dexterity-xml.rst b/docs/reference/dexterity-xml.rst
index 06b844e..51a2604 100644
--- a/docs/reference/dexterity-xml.rst
+++ b/docs/reference/dexterity-xml.rst
@@ -6,20 +6,20 @@ Dexterity XML
 Introduction
 ------------
 
-The schema (structure) of a Dexterity content type may be detailed in two very
-different ways:
+The schema (structure) of a Dexterity content type may be detailed in two very different ways:
 
     * In Python as a Zope schema; or,
 
     * In XML
 
-When you are using Dexterity's through-the-web schema editor, all your work is
-being saved in the content type's Factory Type Information (FTI) as XML.
-``plone.supermodel`` dynamically translates that XML into Python objects which
-are used to display and edit your content objects.
+When you are using Dexterity's through-the-web schema editor, all your work is being saved in the content type's Factory Type Information (FTI) as XML.
+``plone.supermodel`` dynamically translates that XML into Python objects which are used to display and edit your content objects.
+
+The XML model of your content object may be exported from Dexterity and incorporated into a Python package.
+That's typically done with code like:
+
+.. code-block:: python
 
-The XML model of your content object may be exported from Dexterity and
-incorporated into a Python package. That's typically done with code like::
 
     class IExampleType(form.Schema):
 
@@ -31,25 +31,25 @@ or::
 
     IExampleType = xmlSchema("models/example_type.xml")
 
-XML models in a package may be directly edited. (Dexterity will probably also
-include a TTW XML-model editor at some point in the future.)
+XML models in a package may be directly edited.
 
-This document is a reference to the tags and attributes you may use in model
-XML files. This includes several form-control and security-control attributes
-that are not available through the TTW schema editor.
+This document is a reference to the tags and attributes you may use in model XML files.
+This includes several form-control and security-control attributes that are not available through the TTW schema editor.
 
 XML Document Structure
 ----------------------
 
-Dexterity requires that its model XML be well-formed XML, including name space
-declarations. The typical structure of a Dexterity XML document is::
+Dexterity requires that its model XML be well-formed XML, including name space declarations.
+The typical structure of a Dexterity XML document is:
+
+.. code-block:: xml
 
     <?xml version="1.0" encoding="UTF-8"?>
     <model xmlns="http://namespaces.plone.org/supermodel/schema"
            xmlns:form="http://namespaces.plone.org/supermodel/form"
            xmlns:security="http://namespaces.plone.org/supermodel/security">
         <schema>
-            <field type="zope.schema.TextLine" name="one"
+            <field type="zope.schema.TextLine" name="one">
                 <title>One</title>
                 ... More field attributes
             </field>
@@ -57,14 +57,15 @@ declarations. The typical structure of a Dexterity XML document is::
         </schema>
     </model>
 
-Only the default name space (.../supermodel/schema) is required for basic
-schema. The ``supermodel/form`` and ``supermodel/schema`` provide additional
-attributes to control form presentation and security.
+Only the default name space (.../supermodel/schema) is required for basic schema.
+The ``supermodel/form`` and ``supermodel/schema`` provide additional attributes to control form presentation and security.
 
 supermodel/schema fields
 ------------------------
 
-Most of the supermodel/schema field tag and its attributes map directly to what's available via the TTW schema editor::
+Most of the supermodel/schema field tag and its attributes map directly to what's available via the TTW schema editor:
+
+.. code-block:: xml
 
         <field name="dummy" type="zope.schema.TextLine">
           <default>abc</default>
@@ -77,13 +78,14 @@ Most of the supermodel/schema field tag and its attributes map directly to what'
           <title>Test</title>
         </field>
 
-The field ``type`` needs to be the full dotted name (as if it was being
-imported in Python) of the field type.
+The field ``type`` needs to be the full dotted name (as if it was being imported in Python) of the field type.
 
 Fieldsets
 ~~~~~~~~~
 
-It's easy to add fieldsets by surrounding embedding fields tags in a ``fieldset`` block::
+It's easy to add fieldsets by surrounding embedding fields tags in a ``fieldset`` block:
+
+.. code-block:: xml
 
       <schema>
         ...
@@ -106,7 +108,9 @@ It's easy to add fieldsets by surrounding embedding fields tags in a ``fieldset`
 Vocabularies
 ~~~~~~~~~~~~
 
-Vocabularies may be specified via dotted names using the ``source`` tag::
+Vocabularies may be specified via dotted names using the ``source`` tag:
+
+.. code-block:: xml
 
     <field name="dummy" type="zope.schema.Choice">
         <default>a</default>
@@ -124,7 +128,9 @@ Where the full Python dotted-name of a Zope vocabulary in a package::
 
     dummy_vocabulary_instance = SimpleVocabulary.fromItems([(1, 'a'), (2, 'c')])
 
-Or, a source binder::
+Or, a source binder:
+
+.. code-block:: xml
 
     <field name="dummy" type="zope.schema.Choice">
         ...
@@ -132,7 +138,9 @@ Or, a source binder::
     </field>
 
 
-With Python like::
+With Python like:
+
+.. code-block:: python
 
     from zope.schema.interfaces import IContextSourceBinder
 
@@ -154,7 +162,9 @@ Translation domains and message ids can be specified for text
 that is interpreted as unicode. This will result in deserialization
 as a zope.i18nmessageid message id rather than a basic Unicode string.
 
-Note that we need to add the i18n namespace and a domain specification::
+Note that we need to add the i18n namespace and a domain specification:
+
+.. code-block:: xml
 
     <model xmlns="http://namespaces.plone.org/supermodel/schema"
            xmlns:i18n="http://xml.zope.org/namespaces/i18n"
@@ -185,7 +195,9 @@ current schema (or a base schema). Use a fully prefixed name (e.g.
 ``'my.package.ISomeSchema'``) to refer to a field in another schema. Use an
 unprefixed name to refer to a field in the default schema for the form.
 
-Example::
+Example:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine"
            name="one"
@@ -200,7 +212,9 @@ To turn a field into a view mode or hidden field, use ``form:mode``.  The
 mode may be set for only some forms by specifying a form interface in the
 same manner as for ``form:omitted``.
 
-Example::
+Example:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine"
             name="three"
@@ -217,7 +231,9 @@ only from some forms, specify a form interface like
 ``form:omitted="z3c.form.interfaces.IForm:true"``. Multiple interface:value
 settings may be specified, separated by spaces.
 
-Examples::
+Examples:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine"
            name="one"
@@ -240,7 +256,9 @@ widget
 To set a custom widget for a field, use ``form:widget`` to give a fully
 qualified name to the field widget factory.
 
-Example::
+Example:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine"
            name="password"
@@ -257,20 +275,26 @@ give a fully qualified name for a callable. The defaultFactory callable must
 provide either plone.supermodel.interfaces.IDefaultFactory or
 zope.schema.interfaces.IContextAwareDefaultFactory.
 
-Example::
+Example:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine" name="three">
         <title>Three</title>
         <defaultFactory>plone.supermodel.tests.dummy_defaultFactory</defaultFactory>
     </field>
 
-Sample Python for the validator factory::
+Sample Python for the validator factory:
+
+.. code-block:: python
 
     @provider(IDefaultFactory)
     def dummy_defaultFactory():
         return u'something'
 
-For a callable using context::
+For a callable using context:
+
+.. code-block:: python
 
     @provider(IContextAwareDefaultFactory)
     def dummy_defaultCAFactory(context):
@@ -289,7 +313,9 @@ To set a custom validator for a field, use ``form:validator`` to give a fully
 qualified name to the field validator factory. The validator factory should be
 a class derived from one of the validators in z3c.form.validator.
 
-Example::
+Example:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine"
             name="three"
@@ -297,7 +323,9 @@ Example::
         <title>Three</title>
     </field>
 
-Sample Python for the validator factory::
+Sample Python for the validator factory:
+
+.. code-block:: python
 
     class TestValidator(z3c.form.validator.SimpleFieldValidator):
 
@@ -317,7 +345,9 @@ To set a read or write permission, use ``security:read-permission`` or
 ``security:write-permission``. The value should be the name of an
 ``IPermission`` utility.
 
-Example::
+Example:
+
+.. code-block:: xml
 
     <field type="zope.schema.TextLine"
             name="one"
diff --git a/docs/reference/manipulating-content-objects.rst b/docs/reference/manipulating-content-objects.rst
index bc7afa7..84d622b 100644
--- a/docs/reference/manipulating-content-objects.rst
+++ b/docs/reference/manipulating-content-objects.rst
@@ -1,6 +1,10 @@
 Manipulating content objects
 ============================
 
+.. note::
+    Here the low level api is shown.
+    When writing Plone Add-Ons consider using ``plone.api``, because it covers several standard cases and is a simple, future proof and stable api.
+
 **Common APIs used to manipulate Dexterity content objects**
 
 In this section, we will describe some of the more commonly used APIs
@@ -20,7 +24,7 @@ Creating a content object
 
 The simplest way to create a content item is via its factory:
 
-::
+.. code-block:: python
 
     from zope.component import createObject
     context = createObject('example.type')
@@ -28,7 +32,7 @@ The simplest way to create a content item is via its factory:
 At this point, the object is not acquisition wrapped. You can wrap it
 explicitly by calling:
 
-::
+.. code-block:: python
 
     wrapped = context.__of__(folder)
 
@@ -42,7 +46,7 @@ Plone site root.
 There is a convenience method that can be used to create a Dexterity
 object. It is mostly useful in tests:
 
-::
+.. code-block:: python
 
     from plone.dexterity.utils import createContent
     context = createContent('example.type', title=u"Foo")
@@ -60,7 +64,7 @@ container is a Dexterity container, or another container that supports a
 dict API (e.g. a *Large Plone Folder* in Plone 3 or a container based on
 *plone.folder*), you can do:
 
-::
+.. code-block:: python
 
     folder['some_id'] = context
 
@@ -71,7 +75,7 @@ If the object only supports the basic OFS API (as is the case with
 standard Plone *Folders* in Plone 3), you can use the *\_setObject()*
 method:
 
-::
+.. code-block:: python
 
     folder._setObject('some_id') = context
 
@@ -80,7 +84,7 @@ add items to containers that would not normally allow this type of
 content. Dexterity comes with a convenience function, useful in tests,
 to simulate the checks performed when content is added through the web:
 
-::
+.. code-block:: python
 
     from plone.dexterity.utils import addContentToContainer
     addContentToContainer(folder, context)
@@ -95,7 +99,7 @@ To bypass folder constraints, you can use this function and pass
 
 You can also both create and add an object in one call:
 
-::
+.. code-block:: python
 
     from plone.dexterity.utils import createContentInContainer
     createContentInContainer(folder, 'example.type', title=u"Foo")
@@ -107,7 +111,7 @@ Finally, you can use the *invokeFactory()* API, which is similar, but
 more generic in that it can be used for any type of content, not just
 Dexterity content:
 
-::
+.. code-block:: python
 
     new_id = folder.invokeFactory('example.type', 'some_id')
     context = folder['new_id']
@@ -122,7 +126,7 @@ Dexterity containers and other containers based on *plone.folder*
 support a dict-like API to obtain and manipulate items in folders. For
 example, to obtain an (acquisition-wrapped) object by name:
 
-::
+.. code-block:: python
 
     context = folder['some_id']
 
@@ -141,13 +145,13 @@ Removing items from a folder
 Again, Dexterity containers act like dictionaries, and so implement
 *\_\_delitem\_\_*:
 
-::
+.. code-block:: python
 
     del folder['some_id']
 
 The OFS API uses the *\_delObject()* function for the same purpose:
 
-::
+.. code-block:: python
 
     folder._delObject('some_id')
 
@@ -162,14 +166,14 @@ Obtaining an object’s schema interface
 A content object’s schema is an interface, i.e. an object of type
 *zope.interface.interface.InterfaceClass*.
 
-::
+.. code-block:: python
 
     from zope.app.content import queryContentType
     schema = queryContentType(context)
 
 The schema can now be inspected. For example:
 
-::
+.. code-block:: python
 
     from zope.schema import getFieldsInOrder
     fields = getFieldsInOrder(schema)
@@ -180,7 +184,7 @@ Finding an object’s behaviors
 To find all behaviors supported by an object, use the *plone.behavior*
 API:
 
-::
+.. code-block:: python
 
     from plone.behavior.interfaces import IBehaviorAssignable
     assignable = IBehaviorAssignable(context)
@@ -199,7 +203,7 @@ Getting the FTI
 
 To obtain a Dexterity FTI, look it up as a local utility:
 
-::
+.. code-block:: python
 
     from zope.component import getUtility
     from plone.dexterity.interfaces import IDexterityFTI
@@ -208,7 +212,7 @@ To obtain a Dexterity FTI, look it up as a local utility:
 The returned object provides *plone.dexterity.interfaces.IDexterityFTI*.
 To get the schema interface for the type from the FTI, you can do:
 
-::
+.. code-block:: python
 
     schema = fti.lookupSchema()
 
@@ -218,7 +222,7 @@ Getting the object’s parent folder
 A Dexterity item in a Dexterity container should have the
 *\_\_parent\_\_* property set, pointing to its containment parent:
 
-::
+.. code-block:: python
 
     folder = context.__parent__
 
@@ -227,7 +231,7 @@ not in Plone 3.x.
 
 The more general approach relies on acquisition:
 
-::
+.. code-block:: python
 
     from Acquisition import aq_inner, aq_parent
     folder = aq_parent(aq_inner(context))
@@ -243,7 +247,7 @@ Obtaining the workflow state of an object
 
 To obtain an object’s workflow state, ask the*portal\_workflow* tool:
 
-::
+.. code-block:: python
 
     from Products.CMFCore.utils import getToolByName
     portal_workflow = getToolByName(context, 'portal_workflow')
@@ -257,7 +261,7 @@ Invoking a workflow transition
 
 To invoke a transition:
 
-::
+.. code-block:: python
 
     portal_workflow.doActionFor(context, 'some_transition')
 
@@ -277,7 +281,7 @@ Objects may need to be reindexed if they are modified in code. The best
 way to reindex them is actually to send an event and let Dexterity’s
 standard event handlers take care of this:
 
-::
+.. code-block:: python
 
     from zope.lifecycleevent import modified
     modified(context)
@@ -285,14 +289,14 @@ standard event handlers take care of this:
 In tests, it is sometimes necessary to reindex explicitly. This can be
 done with:
 
-::
+.. code-block:: python
 
     context.reindexObject()
 
 You can also pass specific index names to reindex, if you don’t want to
 reindex everything:
 
-::
+.. code-block:: python
 
     context.reindexObject(idxs=['Title', 'sortable_title'])
 
@@ -310,7 +314,7 @@ Checking a permission
 
 To check a permission by its Zope 3 name:
 
-::
+.. code-block:: python
 
     from zope.security import checkPermission
     checkPermission('zope2.View', context)
@@ -321,7 +325,7 @@ in your test setup (e.g. the *afterSetUp()* method).
 
 To use the Zope 2 permission title:
 
-::
+.. code-block:: python
 
     from AccessControl import getSecurityManager
     getSecurityManager().checkPermission('View', context)
@@ -329,7 +333,7 @@ To use the Zope 2 permission title:
 Sometimes, normally in tests, you want to know which roles have a
 particular permission. To do this, use:
 
-::
+.. code-block:: python
 
     roles = [r['name'] for r in context.rolesOfPermission('View') if r['selected']]
 
@@ -341,7 +345,7 @@ Changing permissions
 Normally, permissions should be set with workflow, but in tests it is
 often useful to manipulate security directly:
 
-::
+.. code-block:: python
 
     context.manage_permission('View', roles=['Manager', 'Owner'], acquire=True)
 
diff --git a/docs/reference/misc.rst b/docs/reference/misc.rst
index 1c53ab0..69fa318 100644
--- a/docs/reference/misc.rst
+++ b/docs/reference/misc.rst
@@ -8,7 +8,7 @@ User contributed recipes
 
 To do this one can use tagged values on the schema. In this case want to hide 'introduction' and 'answers' fields:
 
-::
+.. code-block:: python
 
     from example.package.content.assessmentitem import IAssessmentItem
     from plone.autoform.interfaces import OMITTED_KEY
@@ -16,9 +16,9 @@ To do this one can use tagged values on the schema. In this case want to hide 'i
                                [(Interface, 'introduction', 'true'),
                                 (Interface, 'answers', 'true')])
 
-								
+
 This code can sit in another.package.__init__.py for example.
-								
+
 See also: `Original thread on coredev mailinglist`_
 
 .. _Original thread on coredev mailinglist: http://plone.293351.n2.nabble.com/plone-autoform-why-use-tagged-values-td7560956.html
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py
index f7697a3..a9dc8d0 100644
--- a/plone/app/dexterity/__init__.py
+++ b/plone/app/dexterity/__init__.py
@@ -1,3 +1,5 @@
+# -*- coding: utf-8 -*-
 import zope.i18nmessageid
+
 MessageFactory = zope.i18nmessageid.MessageFactory('plone.app.dexterity')
 PloneMessageFactory = zope.i18nmessageid.MessageFactory('plone')
diff --git a/plone/app/dexterity/behaviors/__init__.py b/plone/app/dexterity/behaviors/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/dexterity/behaviors/__init__.py
+++ b/plone/app/dexterity/behaviors/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py
index e28aeba..d430ccb 100644
--- a/plone/app/dexterity/behaviors/constrains.py
+++ b/plone/app/dexterity/behaviors/constrains.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 
diff --git a/plone/app/dexterity/behaviors/discussion.py b/plone/app/dexterity/behaviors/discussion.py
index c561bac..797e353 100644
--- a/plone/app/dexterity/behaviors/discussion.py
+++ b/plone/app/dexterity/behaviors/discussion.py
@@ -1,12 +1,14 @@
 # -*- coding: utf-8 -*-
-from z3c.form.interfaces import IEditForm, IAddForm
-from zope import schema
-from zope.interface import alsoProvides
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
 from plone.app.dexterity import MessageFactory as _
+from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
-from plone.autoform import directives as form
 from plone.supermodel import model
+from z3c.form.interfaces import IAddForm
+from z3c.form.interfaces import IEditForm
+from zope import schema
+from zope.interface import provider
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
 
 options = SimpleVocabulary([
@@ -15,6 +17,7 @@
 ])
 
 
+@provider(IFormFieldProvider)
 class IAllowDiscussion(model.Schema):
 
     model.fieldset(
@@ -31,9 +34,6 @@ class IAllowDiscussion(model.Schema):
         default=None,
     )
 
-    form.omitted('allow_discussion')
-    form.no_omit(IEditForm, 'allow_discussion')
-    form.no_omit(IAddForm, 'allow_discussion')
-
-
-alsoProvides(IAllowDiscussion, IFormFieldProvider)
+    directives.omitted('allow_discussion')
+    directives.no_omit(IEditForm, 'allow_discussion')
+    directives.no_omit(IAddForm, 'allow_discussion')
diff --git a/plone/app/dexterity/behaviors/exclfromnav.py b/plone/app/dexterity/behaviors/exclfromnav.py
index 75d452f..9d885c9 100644
--- a/plone/app/dexterity/behaviors/exclfromnav.py
+++ b/plone/app/dexterity/behaviors/exclfromnav.py
@@ -1,12 +1,15 @@
-from z3c.form.interfaces import IEditForm, IAddForm
-from zope.interface import alsoProvides
-from zope import schema
+# -*- coding: utf-8 -*-
+from plone.app.dexterity import MessageFactory as _
+from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
-from plone.autoform import directives as form
 from plone.supermodel import model
-from plone.app.dexterity import MessageFactory as _
+from z3c.form.interfaces import IAddForm
+from z3c.form.interfaces import IEditForm
+from zope import schema
+from zope.interface import provider
 
 
+@provider(IFormFieldProvider)
 class IExcludeFromNavigation(model.Schema):
     """Behavior interface to exclude items from navigation.
     """
@@ -30,8 +33,6 @@ class IExcludeFromNavigation(model.Schema):
         default=False
     )
 
-    form.omitted('exclude_from_nav')
-    form.no_omit(IEditForm, 'exclude_from_nav')
-    form.no_omit(IAddForm, 'exclude_from_nav')
-
-alsoProvides(IExcludeFromNavigation, IFormFieldProvider)
+    directives.omitted('exclude_from_nav')
+    directives.no_omit(IEditForm, 'exclude_from_nav')
+    directives.no_omit(IAddForm, 'exclude_from_nav')
diff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py
index 9b700bd..cb6c741 100644
--- a/plone/app/dexterity/behaviors/filename.py
+++ b/plone/app/dexterity/behaviors/filename.py
@@ -1,18 +1,19 @@
+# -*- coding: utf-8 -*-
 from Products.CMFPlone.utils import safe_hasattr
 from plone.app.content.interfaces import INameFromTitle
 from plone.rfc822.interfaces import IPrimaryFieldInfo
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import Interface
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class INameFromFileName(Interface):
     """Marker interface to enable name from filename behavior"""
 
 
+@implementer(INameFromTitle)
+@adapter(INameFromFileName)
 class NameFromFileName(object):
-    implements(INameFromTitle)
-    adapts(INameFromFileName)
 
     def __new__(cls, context):
         info = IPrimaryFieldInfo(context, None)
diff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py
index 1157fd7..2b50df2 100644
--- a/plone/app/dexterity/behaviors/id.py
+++ b/plone/app/dexterity/behaviors/id.py
@@ -1,16 +1,18 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_inner
 from Acquisition import aq_parent
-from zope import schema
-from zope.interface import alsoProvides
-from zope.container.interfaces import INameChooser
 from plone.app.dexterity import MessageFactory as _
-from plone.autoform import directives as form
+from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
 from plone.supermodel import model
+from zope import schema
+from zope.container.interfaces import INameChooser
+from zope.interface import provider
 import transaction
 
 
+@provider(IFormFieldProvider)
 class IShortName(model.Schema):
 
     model.fieldset(
@@ -24,9 +26,7 @@ class IShortName(model.Schema):
         description=_(u'This name will be displayed in the URL.'),
         required=False,
     )
-    form.write_permission(id='cmf.AddPortalContent')
-
-alsoProvides(IShortName, IFormFieldProvider)
+    directives.write_permission(id='cmf.AddPortalContent')
 
 
 class ShortName(object):
diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index d7e779b..235d375 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -5,24 +5,26 @@
 from datetime import datetime
 from plone.app.dexterity import MessageFactory as _
 from plone.app.dexterity import PloneMessageFactory as _PMF
-from plone.app.z3cform.widget import (
-    AjaxSelectFieldWidget, SelectFieldWidget, DatetimeFieldWidget)
-from plone.autoform import directives as form
+from plone.app.z3cform.widget import AjaxSelectFieldWidget
+from plone.app.z3cform.widget import DatetimeFieldWidget
+from plone.app.z3cform.widget import SelectFieldWidget
+from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
 from plone.dexterity.interfaces import IDexterityContent
+from plone.dexterity.utils import safe_unicode
 from plone.supermodel import model
-from z3c.form.interfaces import IEditForm, IAddForm
+from z3c.form.interfaces import IAddForm
+from z3c.form.interfaces import IEditForm
 from z3c.form.widget import ComputedWidgetAttribute
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.component.hooks import getSite
 from zope.interface import Invalid
-from zope.interface import alsoProvides
 from zope.interface import invariant
 from zope.interface import provider
 from zope.schema.interfaces import IContextAwareDefaultFactory
-from plone.dexterity.utils import safe_unicode
-from zope.schema.interfaces import IText, ISequence
+from zope.schema.interfaces import ISequence
+from zope.schema.interfaces import IText
 
 # Behavior interfaces to display Dublin Core metadata fields on Dexterity
 # content edit forms.
@@ -58,6 +60,7 @@ def default_language(context):
     return language
 
 
+@provider(IFormFieldProvider)
 class IBasic(model.Schema):
 
     # default fieldset
@@ -76,14 +79,15 @@ class IBasic(model.Schema):
         missing_value=u'',
     )
 
-    form.order_before(description='*')
-    form.order_before(title='*')
+    directives.order_before(description='*')
+    directives.order_before(title='*')
 
-    form.omitted('title', 'description')
-    form.no_omit(IEditForm, 'title', 'description')
-    form.no_omit(IAddForm, 'title', 'description')
+    directives.omitted('title', 'description')
+    directives.no_omit(IEditForm, 'title', 'description')
+    directives.no_omit(IAddForm, 'title', 'description')
 
 
+@provider(IFormFieldProvider)
 class ICategorization(model.Schema):
 
     # categorization fieldset
@@ -104,8 +108,11 @@ class ICategorization(model.Schema):
         required=False,
         missing_value=(),
     )
-    form.widget('subjects', AjaxSelectFieldWidget,
-                vocabulary='plone.app.vocabularies.Keywords')
+    directives.widget(
+        'subjects',
+        AjaxSelectFieldWidget,
+        vocabulary='plone.app.vocabularies.Keywords'
+    )
 
     language = schema.Choice(
         title=_PMF(u'label_language', default=u'Language'),
@@ -114,11 +121,11 @@ class ICategorization(model.Schema):
         missing_value='',
         defaultFactory=default_language,
     )
-    form.widget('language', SelectFieldWidget)
+    directives.widget('language', SelectFieldWidget)
 
-    form.omitted('subjects', 'language')
-    form.no_omit(IEditForm, 'subjects', 'language')
-    form.no_omit(IAddForm, 'subjects', 'language')
+    directives.omitted('subjects', 'language')
+    directives.no_omit(IEditForm, 'subjects', 'language')
+    directives.no_omit(IAddForm, 'subjects', 'language')
 
 
 class EffectiveAfterExpires(Invalid):
@@ -126,6 +133,7 @@ class EffectiveAfterExpires(Invalid):
                 default=u"Invalid effective or expires date")
 
 
+@provider(IFormFieldProvider)
 class IPublication(model.Schema):
     # dates fieldset
     model.fieldset(
@@ -142,7 +150,7 @@ class IPublication(model.Schema):
                     u"not show up in listings and searches until this date."),
         required=False
     )
-    form.widget('effective', DatetimeFieldWidget)
+    directives.widget('effective', DatetimeFieldWidget)
 
     expires = schema.Datetime(
         title=_PMF(u'label_expiration_date', u'Expiration Date'),
@@ -152,7 +160,7 @@ class IPublication(model.Schema):
                     u"longer be visible in listings and searches."),
         required=False
     )
-    form.widget('expires', DatetimeFieldWidget)
+    directives.widget('expires', DatetimeFieldWidget)
 
     @invariant
     def validate_start_end(data):
@@ -162,11 +170,12 @@ def validate_start_end(data):
                   default=u"Expiration date must be after publishing date.")
             )
 
-    form.omitted('effective', 'expires')
-    form.no_omit(IEditForm, 'effective', 'expires')
-    form.no_omit(IAddForm, 'effective', 'expires')
+    directives.omitted('effective', 'expires')
+    directives.no_omit(IEditForm, 'effective', 'expires')
+    directives.no_omit(IAddForm, 'effective', 'expires')
 
 
+@provider(IFormFieldProvider)
 class IOwnership(model.Schema):
 
     # ownership fieldset
@@ -191,8 +200,11 @@ class IOwnership(model.Schema):
         required=False,
         missing_value=(),
     )
-    form.widget('creators', AjaxSelectFieldWidget,
-                vocabulary='plone.app.vocabularies.Users')
+    directives.widget(
+        'creators',
+        AjaxSelectFieldWidget,
+        vocabulary='plone.app.vocabularies.Users'
+    )
 
     contributors = schema.Tuple(
         title=_PMF(u'label_contributors', u'Contributors'),
@@ -205,8 +217,11 @@ class IOwnership(model.Schema):
         required=False,
         missing_value=(),
     )
-    form.widget('contributors', AjaxSelectFieldWidget,
-                vocabulary='plone.app.vocabularies.Users')
+    directives.widget(
+        'contributors',
+        AjaxSelectFieldWidget,
+        vocabulary='plone.app.vocabularies.Users'
+    )
 
     rights = schema.Text(
         title=_PMF(u'label_copyrights', default=u'Rights'),
@@ -218,9 +233,9 @@ class IOwnership(model.Schema):
         required=False,
     )
 
-    form.omitted('creators', 'contributors', 'rights')
-    form.no_omit(IEditForm, 'creators', 'contributors', 'rights')
-    form.no_omit(IAddForm, 'creators', 'contributors', 'rights')
+    directives.omitted('creators', 'contributors', 'rights')
+    directives.no_omit(IEditForm, 'creators', 'contributors', 'rights')
+    directives.no_omit(IAddForm, 'creators', 'contributors', 'rights')
 
 
 # make sure the add form shows the default creator
@@ -228,31 +243,26 @@ def creatorsDefault(data):
     user = getSecurityManager().getUser()
     # NB: CMF users are UTF-8 encoded bytes, decode them before inserting
     return user and (safe_unicode(user.getId()),)
+
 CreatorsDefaultValue = ComputedWidgetAttribute(
     creatorsDefault,
     field=IOwnership['creators']
 )
 
 
+@provider(IFormFieldProvider)
 class IDublinCore(IOwnership, IPublication, ICategorization, IBasic):
     """ Metadata behavior providing all the DC fields
     """
     pass
 
-# Mark these interfaces as form field providers
-alsoProvides(IBasic, IFormFieldProvider)
-alsoProvides(ICategorization, IFormFieldProvider)
-alsoProvides(IPublication, IFormFieldProvider)
-alsoProvides(IOwnership, IFormFieldProvider)
-alsoProvides(IDublinCore, IFormFieldProvider)
-
 
+@adapter(IDexterityContent)
 class MetadataBase(object):
     """ This adapter uses DCFieldProperty to store metadata directly on an
         object using the standard CMF DefaultDublinCoreImpl getters and
         setters.
     """
-    adapts(IDexterityContent)
 
     def __init__(self, context):
         self.context = context
diff --git a/plone/app/dexterity/behaviors/nextprevious.py b/plone/app/dexterity/behaviors/nextprevious.py
index f969485..cfba27e 100644
--- a/plone/app/dexterity/behaviors/nextprevious.py
+++ b/plone/app/dexterity/behaviors/nextprevious.py
@@ -1,20 +1,21 @@
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.interfaces import IContentish
+from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import MessageFactory as _
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
-from plone.autoform import directives as form
+from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
 from plone.supermodel import model
 from z3c.form import widget
-from z3c.form.interfaces import IEditForm
 from z3c.form.interfaces import IAddForm
+from z3c.form.interfaces import IEditForm
 from zope import schema
+from zope.component import adapter
 from zope.interface import Interface
-from zope.interface import alsoProvides
-from zope.interface import implements
-from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import provider
 
 
 class INextPreviousEnabled(Interface):
@@ -23,6 +24,7 @@ class INextPreviousEnabled(Interface):
     """
 
 
+@provider(IFormFieldProvider)
 class INextPreviousToggle(model.Schema):
     """Behavior interface to enable next previous navigation per item.
     """
@@ -43,15 +45,13 @@ class INextPreviousToggle(model.Schema):
         default=False
     )
 
-    form.omitted('nextPreviousEnabled')
-    form.no_omit(IEditForm, 'nextPreviousEnabled')
-    form.no_omit(IAddForm, 'nextPreviousEnabled')
-
-alsoProvides(INextPreviousToggle, IFormFieldProvider)
+    directives.omitted('nextPreviousEnabled')
+    directives.no_omit(IEditForm, 'nextPreviousEnabled')
+    directives.no_omit(IAddForm, 'nextPreviousEnabled')
 
 
-def getNextPreviousParentValue(adapter):
-    context = adapter.context
+def getNextPreviousParentValue(adapter_):
+    context = adapter_.context
     nextprevious = INextPreviousProvider(context, None)
     if nextprevious is None:
         return False
@@ -122,19 +122,19 @@ def getData(self, obj):
         )
 
 
+@implementer(INextPreviousProvider)
+@adapter(INextPreviousToggle)
 class NextPreviousToggle(NextPreviousBase):
     """ adapter for acting as a next/previous provider """
-    implements(INextPreviousProvider)
-    adapts(INextPreviousToggle)
 
     @property
     def enabled(self):
         return getattr(aq_base(self.context), 'nextPreviousEnabled', False)
 
 
+@implementer(INextPreviousProvider)
+@adapter(INextPreviousEnabled)
 class NextPreviousEnabled(NextPreviousBase):
     """ adapter for acting as a next/previous provider """
-    implements(INextPreviousProvider)
-    adapts(INextPreviousEnabled)
 
     enabled = True
diff --git a/plone/app/dexterity/behaviors/related.py b/plone/app/dexterity/behaviors/related.py
index 8e0c311..bb0e5f9 100644
--- a/plone/app/dexterity/behaviors/related.py
+++ b/plone/app/dexterity/behaviors/related.py
@@ -3,12 +3,11 @@
 """
 try:
     from plone.app.relationfield.behavior import IRelatedItems  # noqa
-except:
+except ImportError:
     pass
 
-
-from zope.component import queryUtility
 from plone.behavior.interfaces import IBehavior
+from zope.component import queryUtility
 
 
 def related_items_behavior_BBB():
diff --git a/plone/app/dexterity/browser/__init__.py b/plone/app/dexterity/browser/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/dexterity/browser/__init__.py
+++ b/plone/app/dexterity/browser/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py
index 4c84b3b..d86f57f 100644
--- a/plone/app/dexterity/browser/add_type.py
+++ b/plone/app/dexterity/browser/add_type.py
@@ -1,10 +1,11 @@
-from z3c.form import form, field
-from plone.z3cform.layout import wrap_form
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-
-from plone.dexterity.fti import DexterityFTI
 from plone.app.dexterity import MessageFactory as _
 from plone.app.dexterity.interfaces import ITypeSettings
+from plone.dexterity.fti import DexterityFTI
+from plone.z3cform.layout import wrap_form
+from z3c.form import field
+from z3c.form import form
 
 
 class TypeAddForm(form.AddForm):
diff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py
index df02c52..63c759c 100644
--- a/plone/app/dexterity/browser/behaviors.py
+++ b/plone/app/dexterity/browser/behaviors.py
@@ -1,20 +1,19 @@
+# -*- coding: utf-8 -*-
 from copy import deepcopy
-from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
-from zope.component import adapts, getUtilitiesFor
+from plone.app.dexterity import MessageFactory as _
+from plone.app.dexterity.browser.layout import TypeFormLayout
+from plone.app.dexterity.interfaces import ITypeSchemaContext
+from plone.behavior.interfaces import IBehavior
+from plone.dexterity.fti import DexterityFTIModificationDescription
+from z3c.form import field, form
+from z3c.form.browser.checkbox import SingleCheckBoxFieldWidget
 from zope import schema
+from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
+from zope.component import adapter
+from zope.component import getUtilitiesFor
 from zope.i18nmessageid import MessageFactory
 from zope.lifecycleevent import modified
 
-from z3c.form import field, form
-from z3c.form.browser.checkbox import SingleCheckBoxFieldWidget
-
-from plone.behavior.interfaces import IBehavior
-from plone.app.dexterity.interfaces import ITypeSchemaContext
-from plone.app.dexterity.browser.layout import TypeFormLayout
-from plone.app.dexterity import MessageFactory as _
-
-from plone.dexterity.fti import DexterityFTIModificationDescription
-
 PMF = MessageFactory('plone')
 
 
@@ -23,8 +22,8 @@ def behaviorConfigurationModified(object, event):
     modified(object.fti, description)
 
 
+@adapter(ITypeSchemaContext)
 class BehaviorConfigurationAdapter(object):
-    adapts(ITypeSchemaContext)
 
     def __init__(self, context):
         self.__dict__['context'] = context
diff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py
index 3657f9a..ad7ab66 100644
--- a/plone/app/dexterity/browser/clone_type.py
+++ b/plone/app/dexterity/browser/clone_type.py
@@ -1,10 +1,11 @@
-from z3c.form import form, field
-from plone.z3cform.layout import wrap_form
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-
-from plone.dexterity.fti import DexterityFTI
 from plone.app.dexterity import MessageFactory as _
 from plone.app.dexterity.interfaces import ITypeSettings
+from plone.dexterity.fti import DexterityFTI
+from plone.z3cform.layout import wrap_form
+from z3c.form import form
+from z3c.form import field
 
 
 class TypeCloneForm(form.AddForm):
@@ -21,7 +22,10 @@ def create(self, data):
             del props['factory']
 
         props['title'] = data['title']
-        props['add_view_expr'] = props['add_view_expr'].replace(self.context.fti.getId(), type_id)
+        props['add_view_expr'] = props['add_view_expr'].replace(
+            self.context.fti.getId(),
+            type_id
+        )
         fti = DexterityFTI(type_id, **props)
         return fti
 
diff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py
index 655133d..20d7708 100644
--- a/plone/app/dexterity/browser/export.py
+++ b/plone/app/dexterity/browser/export.py
@@ -1,19 +1,16 @@
+# -*- coding: utf-8 -*-
 # @@types-export view for dexterity types configlet. View support for the
 # "Export" button. This is done by repurposing the GS typeinfo export and
 # removing unselected type information from its output.
-
-import time
-from StringIO import StringIO
-from zipfile import ZipFile
-from lxml import etree
-
 from Products.CMFCore.utils import getToolByName
-
 from Products.Five.browser import BrowserView
-
-from Products.GenericSetup.context import TarballExportContext, BaseContext
-
+from Products.GenericSetup.context import BaseContext
+from Products.GenericSetup.context import TarballExportContext
+from StringIO import StringIO
+from lxml import etree
 from plone.supermodel import serializeModel
+from zipfile import ZipFile
+import time
 
 
 class SelectiveZipExportContext(TarballExportContext):
diff --git a/plone/app/dexterity/browser/fields.py b/plone/app/dexterity/browser/fields.py
index 6c985f3..13409d2 100644
--- a/plone/app/dexterity/browser/fields.py
+++ b/plone/app/dexterity/browser/fields.py
@@ -1,29 +1,22 @@
-from z3c.form import button
-
-from plone.schemaeditor.browser.schema.listing import SchemaListing
-from plone.schemaeditor.browser.schema.listing import ReadOnlySchemaListing
-
-from plone.app.dexterity.browser.layout import TypeFormLayout
+# -*- coding: utf-8 -*-
 from plone.app.dexterity import MessageFactory as _
-
-try:
-    import plone.resourceeditor
-    plone.resourceeditor  # avoid PEP 8 warning
-    HAVE_RESOURCE_EDITOR = True
-except ImportError:
-    HAVE_RESOURCE_EDITOR = False
-
+from plone.app.dexterity.browser.layout import TypeFormLayout
+from plone.schemaeditor.browser.schema.listing import ReadOnlySchemaListing
+from plone.schemaeditor.browser.schema.listing import SchemaListing
+from z3c.form import button
+import pkg_resources
 
 # We want to add a Plone-specific feature to the SchemaListing
 # form from plone.schemaeditor. We'll do this by subclassing, then
 # adding the plone-specific button for the ace model editor.
 
+
 class EnhancedSchemaListing(SchemaListing):
 
     def handleModelEdit(self, action):
         self.request.response.redirect('@@modeleditor')
 
-if HAVE_RESOURCE_EDITOR:
+if pkg_resources.get_distribution('plone.resourceeditor'):
     but = button.Button("modeleditor", title=u'Edit XML Field Model')
     EnhancedSchemaListing.buttons += button.Buttons(but)
     handler = button.Handler(but, EnhancedSchemaListing.handleModelEdit)
diff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py
index 02c2a45..186361d 100644
--- a/plone/app/dexterity/browser/layout.py
+++ b/plone/app/dexterity/browser/layout.py
@@ -1,8 +1,7 @@
+# -*- coding: utf-8 -*-
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.z3cform.layout import FormWrapper
-
 from plone.app.dexterity import MessageFactory as _
-
+from plone.z3cform.layout import FormWrapper
 
 class TypeFormLayout(FormWrapper):
 
diff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py
index cfa7eaa..389f9a7 100644
--- a/plone/app/dexterity/browser/modeleditor.py
+++ b/plone/app/dexterity/browser/modeleditor.py
@@ -1,14 +1,14 @@
-import json
+# -*- coding: utf-8 -*-
+from AccessControl import Unauthorized
+from Products.Five import BrowserView
 from lxml import etree
-
+from plone.schemaeditor import SchemaEditorMessageFactory as _
+from plone.supermodel.parser import SupermodelParseError
 from zope.component import queryMultiAdapter
-from Products.Five import BrowserView
-from AccessControl import Unauthorized
-
+import json
 import plone.supermodel
-from plone.supermodel.parser import SupermodelParseError
 
-from plone.schemaeditor import SchemaEditorMessageFactory as _
+NAMESPACE = '{http://namespaces.plone.org/supermodel/schema}'
 
 
 class ModelEditorView(BrowserView):
@@ -45,16 +45,18 @@ def __call__(self):
                 })
 
             # a little more sanity checking, look at first two element levels
-            if root.tag != '{http://namespaces.plone.org/supermodel/schema}model':
+            if root.tag != NAMESPACE + 'model':
                 return json.dumps({
                     'success': False,
                     'message': _(u"Error: root tag must be 'model'")
                 })
             for element in root.getchildren():
-                if element.tag != '{http://namespaces.plone.org/supermodel/schema}schema':
+                if element.tag != NAMESPACE + 'schema':
                     return json.dumps({
                         'success': False,
-                        'message': _(u"Error: all model elements must be 'schema'")
+                        'message': _(
+                            u"Error: all model elements must be 'schema'"
+                        )
                     })
 
             # can supermodel parse it?
diff --git a/plone/app/dexterity/browser/overview.py b/plone/app/dexterity/browser/overview.py
index 62692c4..5de9880 100644
--- a/plone/app/dexterity/browser/overview.py
+++ b/plone/app/dexterity/browser/overview.py
@@ -1,10 +1,11 @@
-from z3c.form import form, field
-from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
-from zope.dottedname.resolve import resolve as resolveDottedName
+# -*- coding: utf-8 -*-
 from Products.CMFCore.interfaces import IFolderish
+from plone.app.dexterity import MessageFactory as _
 from plone.app.dexterity.browser.layout import TypeFormLayout
 from plone.app.dexterity.interfaces import ITypeSettings
-from plone.app.dexterity import MessageFactory as _
+from z3c.form import form, field
+from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
+from zope.dottedname.resolve import resolve as resolveDottedName
 
 
 class TypeOverviewForm(form.EditForm):
diff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py
index b26a7df..212594c 100644
--- a/plone/app/dexterity/browser/types.py
+++ b/plone/app/dexterity/browser/types.py
@@ -1,33 +1,31 @@
-import urllib
-
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from ZPublisher.BaseRequest import DefaultPublishTraverse
-
-from zope.interface import implements
-from zope.cachedescriptors.property import Lazy as lazy_property
-from zope.component import adapts, getAllUtilitiesRegisteredFor, getUtility
-from zope.component import ComponentLookupError
-from zope.publisher.interfaces.browser import IBrowserPublisher
-from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile \
     import ViewPageTemplateFile as FiveViewPageTemplateFile
-
-from z3c.form import field, button
-from plone.z3cform import layout
-from plone.z3cform.layout import FormWrapper
-from plone.z3cform.crud import crud
-
-from Products.CMFCore.utils import getToolByName
-
-from plone.dexterity.interfaces import IDexterityFTI
-from plone.dexterity.utils import getAdditionalSchemata
-from plone.app.dexterity.interfaces import ITypesContext, ITypeSchemaContext
+from ZPublisher.BaseRequest import DefaultPublishTraverse
+from plone.app.dexterity import MessageFactory as _
+from plone.app.dexterity.browser.utils import UTF8Property
+from plone.app.dexterity.interfaces import ITypeSchemaContext
 from plone.app.dexterity.interfaces import ITypeSettings
 from plone.app.dexterity.interfaces import ITypeStats
-from plone.app.dexterity.browser.utils import UTF8Property
+from plone.app.dexterity.interfaces import ITypesContext
+from plone.dexterity.interfaces import IDexterityFTI
+from plone.dexterity.utils import getAdditionalSchemata
 from plone.schemaeditor.browser.schema.traversal import SchemaContext
-
-from plone.app.dexterity import MessageFactory as _
+from plone.z3cform import layout
+from plone.z3cform.crud import crud
+from plone.z3cform.layout import FormWrapper
+from z3c.form import field, button
+from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
+from zope.cachedescriptors.property import Lazy as lazy_property
+from zope.component import ComponentLookupError
+from zope.component import adapter
+from zope.component import getAllUtilitiesRegisteredFor
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.publisher.interfaces.browser import IBrowserPublisher
+import urllib
 
 
 HELP = """<p>Content types show up on Plone's 'Add Item' menu and allow
@@ -100,9 +98,9 @@ class TypesEditFormWrapper(FormWrapper):
     index = FiveViewPageTemplateFile("typesformwrapper.pt")
 
 
+@adapter(IDexterityFTI)
+@implementer(ITypeSettings)
 class TypeSettingsAdapter(object):
-    implements(ITypeSettings)
-    adapts(IDexterityFTI)
 
     def __init__(self, context):
         self.context = context
@@ -153,9 +151,9 @@ def _set_filter_content_types(self, value):
         _get_filter_content_types, _set_filter_content_types)
 
 
+@adapter(IDexterityFTI)
+@implementer(ITypeStats)
 class TypeStatsAdapter(object):
-    implements(ITypeStats)
-    adapts(IDexterityFTI)
 
     def __init__(self, context):
         self.context = context
@@ -208,7 +206,10 @@ def link(self, item, field):
         (But only for types with schemata that can be edited through the web.)
         """
         if field == 'title':
-            return '%s/%s' % (self.context.absolute_url(), urllib.quote(item.__name__))
+            return '{0}/{1}'.format(
+                self.context.absolute_url(),
+                urllib.quote(item.__name__)
+            )
 
 # Create a form wrapper so the form gets layout.
 TypesListingPage = layout.wrap_form(
@@ -216,8 +217,8 @@ def link(self, item, field):
     label=_(u'Dexterity content types'))
 
 
+@implementer(ITypeSchemaContext)
 class TypeSchemaContext(SchemaContext):
-    implements(ITypeSchemaContext)
 
     fti = None
     schemaName = u''
@@ -231,15 +232,15 @@ def additionalSchemata(self):
         return getAdditionalSchemata(portal_type=self.fti.getId())
 
 
+# IBrowserPublisher tells the Zope 2 traverser to pay attention to the
+# publishTraverse and browserDefault methods.
+@implementer(ITypesContext, IBrowserPublisher)
 class TypesContext(SimpleItem):
     """This class represents the types configlet.
 
     It allows us to traverse through it to (a wrapper of) the schema
     of a particular type.
     """
-    # IBrowserPublisher tells the Zope 2 traverser to pay attention to the
-    # publishTraverse and browserDefault methods.
-    implements(ITypesContext, IBrowserPublisher)
 
     def __init__(self, context, request):
         super(TypesContext, self).__init__(context, request)
@@ -264,7 +265,9 @@ def publishTraverse(self, request, name):
             fti = getUtility(IDexterityFTI, name=name)
         except ComponentLookupError:
             return DefaultPublishTraverse(self, request).publishTraverse(
-                request, name)
+                request,
+                name
+            )
 
         schema = fti.lookupSchema()
         schema_context = TypeSchemaContext(
diff --git a/plone/app/dexterity/browser/utils.py b/plone/app/dexterity/browser/utils.py
index bda71c5..149967d 100644
--- a/plone/app/dexterity/browser/utils.py
+++ b/plone/app/dexterity/browser/utils.py
@@ -1,3 +1,6 @@
+# -*- coding: utf-8 -*-
+
+
 class UTF8Property(object):
 
     def __init__(self, name):
diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py
index 6b14406..76e1ef0 100644
--- a/plone/app/dexterity/factories.py
+++ b/plone/app/dexterity/factories.py
@@ -1,27 +1,23 @@
-import transaction
-from thread import allocate_lock
-
-from zope.component import adapts
-from zope.container.interfaces import INameChooser
-from zope.interface import implements
-
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils as ploneutils
-
-
-from plone.namedfile.file import NamedBlobImage
-from plone.namedfile.file import NamedBlobFile
 from plone.app.dexterity.interfaces import IDXFileFactory
+from plone.dexterity.utils import createContentInContainer
+from plone.namedfile.file import NamedBlobFile
+from plone.namedfile.file import NamedBlobImage
+from thread import allocate_lock
+from zope.component import adapter
+from zope.container.interfaces import INameChooser
+from zope.interface import implementer
+import transaction
 
 upload_lock = allocate_lock()
 
-from plone.dexterity.utils import createContentInContainer
-
 
+@adapter(IFolderish)
+@implementer(IDXFileFactory)
 class DXFileFactory(object):
-    implements(IDXFileFactory)
-    adapts(IFolderish)
 
     def __init__(self, context):
         self.context = context
@@ -46,19 +42,32 @@ def __call__(self, name, content_type, data):
             # This will suffice for standard p.a.contenttypes File/Image
             # and any other custom type that would have 'File' or 'Image' in
             # its type name
+            # XXX heuristics are harmful behavior, here a better implemenation
+            #     is needed
             filename = ploneutils.safe_unicode(name)
             if 'Image' in type_:
-                image = NamedBlobImage(data=data,
-                                       filename=filename,
-                                       contentType=content_type)
+                image = NamedBlobImage(
+                    data=data,
+                    filename=filename,
+                    contentType=content_type
+                )
                 obj = createContentInContainer(
-                    self.context, type_, id=newid, image=image)
+                    self.context, type_,
+                    id=newid,
+                    image=image
+                )
             else:
-                file = NamedBlobFile(data=data,
-                                     filename=filename,
-                                     contentType=content_type)
+                file = NamedBlobFile(
+                    data=data,
+                    filename=filename,
+                    contentType=content_type
+                )
                 obj = createContentInContainer(
-                    self.context, type_, id=newid, file=file)
+                    self.context,
+                    type_,
+                    id=newid,
+                    file=file
+                )
 
             obj.title = name
             obj.reindexObject()
diff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py
index 281dbc5..407310b 100644
--- a/plone/app/dexterity/interfaces.py
+++ b/plone/app/dexterity/interfaces.py
@@ -1,12 +1,13 @@
-import re
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-from zope.interface import Interface, Attribute, Invalid
-from zope.publisher.interfaces.browser import IBrowserPage
-from zope import schema
-from z3c.form import validator
-from plone.app.dexterity import MessageFactory as _
 from Products.CMFCore.utils import getToolByName
+from plone.app.dexterity import MessageFactory as _
 from plone.app.widgets.interfaces import IFileFactory
+from z3c.form import validator
+from zope import schema
+from zope.interface import Interface, Attribute, Invalid
+from zope.publisher.interfaces.browser import IBrowserPage
+import re
 
 
 class ITypesContext(IBrowserPage):
@@ -67,9 +68,11 @@ class ITypeSettings(Interface):
     filter_content_types = schema.Choice(
         title=_(u'Filter Contained Types'),
         description=_(
-            'label_filter_contained_types', default=
-            u'Items of this type can act as a folder containing other items.'
-            u'What content types should be allowed inside?'),
+            'label_filter_contained_types',
+            default=(
+                u'Items of this type can act as a folder containing other '
+                u' items. What content types should be allowed inside?')
+        ),
         values=('none', 'all', 'some'),
         default='none',
         required=True
@@ -103,7 +106,9 @@ def validate(self, value):
                           mapping={'name': value}))
 
 validator.WidgetValidatorDiscriminators(
-    TypeIdValidator, field=ITypeSettings['id'])
+    TypeIdValidator,
+    field=ITypeSettings['id']
+)
 
 
 class TypeTitleValidator(validator.SimpleFieldValidator):
@@ -122,8 +127,9 @@ def validate(self, value):
                       mapping={'name': value}))
 
 validator.WidgetValidatorDiscriminators(
-    TypeTitleValidator, field=ITypeSettings['title'])
-
+    TypeTitleValidator,
+    field=ITypeSettings['title']
+)
 
 
 class IDXFileFactory(IFileFactory):
diff --git a/plone/app/dexterity/serialize.py b/plone/app/dexterity/serialize.py
index b2070e3..a78cc57 100644
--- a/plone/app/dexterity/serialize.py
+++ b/plone/app/dexterity/serialize.py
@@ -1,8 +1,9 @@
-from zope.component import queryUtility
-from plone.supermodel.utils import syncSchema
-from plone.supermodel import serializeModel
+# -*- coding: utf-8 -*-
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import splitSchemaName
+from plone.supermodel import serializeModel
+from plone.supermodel.utils import syncSchema
+from zope.component import queryUtility
 
 
 def serializeSchemaContext(schema_context, event=None):
diff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py
index 14a6567..8acea54 100644
--- a/plone/app/dexterity/testing.py
+++ b/plone/app/dexterity/testing.py
@@ -1,9 +1,9 @@
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import PLONE_FIXTURE
-from plone.app.testing import IntegrationTesting, FunctionalTesting
-
+# -*- coding: utf-8 -*-
 from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE
-
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from plone.testing import z2
 
 
@@ -20,10 +20,16 @@ def setUpPloneSite(self, portal):
 
 
 DEXTERITY_FIXTURE = DexterityFixture()
+
 DEXTERITY_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(DEXTERITY_FIXTURE,), name="dexterity:Integration")
+    bases=(DEXTERITY_FIXTURE,),
+    name="dexterity:Integration"
+)
 DEXTERITY_FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(DEXTERITY_FIXTURE,), name="dexterity:Functional")
+    bases=(DEXTERITY_FIXTURE,),
+    name="dexterity:Functional"
+)
 DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(
-    bases=(DEXTERITY_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE,
-    z2.ZSERVER_FIXTURE), name="dexterity:Acceptance")
+    bases=(DEXTERITY_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),
+    name="dexterity:Acceptance"
+)
diff --git a/plone/app/dexterity/tests/__init__.py b/plone/app/dexterity/tests/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/dexterity/tests/__init__.py
+++ b/plone/app/dexterity/tests/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py
index 783e946..dcbd525 100644
--- a/plone/app/dexterity/tests/test_constrains.py
+++ b/plone/app/dexterity/tests/test_constrains.py
@@ -1,25 +1,19 @@
 # -*- coding: utf-8 -*-
-import unittest2 as unittest
-
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
+from plone.app.content.browser.constraintypes import IConstrainForm
+from plone.app.dexterity.behaviors import constrains
+from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
+from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
+from plone.app.testing import TEST_USER_ID
 from plone.app.testing import login
-from plone.testing.z2 import Browser
-
-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
+from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
-from plone.app.dexterity.behaviors import constrains
-from Products.CMFCore.utils import getToolByName
+from plone.testing.z2 import Browser
 from zope.interface.exceptions import Invalid
-
-from plone.app.content.browser.constraintypes import IConstrainForm
-
-from plone.app.dexterity.testing import (
-    DEXTERITY_INTEGRATION_TESTING,
-    DEXTERITY_FUNCTIONAL_TESTING
-)
-
-from plone.app.testing import TEST_USER_ID, setRoles
+import unittest2 as unittest
 
 
 def add_folder_type(portal):
@@ -171,7 +165,10 @@ def test_locallyAllowedTypesDefaultWhenMultipleAcquired(self):
         """
         self.inner_folder.invokeFactory('folder', 'deeper_folder')
         deeper_folder = self.inner_folder.deeper_folder
-        self.portal.acl_users._doAddUser('user_contributor', 'secret', ['Member'], [])
+        self.portal.acl_users._doAddUser(
+            'user_contributor', 'secret', ['Member'],
+            []
+        )
         deeper_folder.manage_addLocalRoles('user_contributor', ['Contributor'])
         login(self.portal, 'user_contributor')
         behavior = ISelectableConstrainTypes(deeper_folder)
@@ -303,8 +300,10 @@ def test_allowedContentTypesExit3(self):
 
         behavior = ISelectableConstrainTypes(self.inner_folder)
         behavior.setConstrainTypesMode(constrains.ACQUIRE)
-        self.assertEqual(self.types_id_subset,
-                          [x.getId() for x in behavior.allowedContentTypes()])
+        self.assertEquals(
+            self.types_id_subset,
+            [x.getId() for x in behavior.allowedContentTypes()]
+        )
 
     def test_allowedContentTypesExit4(self):
         """
@@ -315,8 +314,10 @@ def test_allowedContentTypesExit4(self):
         behavior.setLocallyAllowedTypes(self.types_id_subset)
         behavior.setConstrainTypesMode(constrains.ENABLED)
 
-        self.assertEqual(self.types_id_subset,
-                          [x.getId() for x in behavior.allowedContentTypes()])
+        self.assertEqual(
+            self.types_id_subset,
+            [x.getId() for x in behavior.allowedContentTypes()]
+        )
 
     def test_formschemainvariants(self):
         class Data(object):
@@ -372,15 +373,20 @@ def test_folder_restrictions_view(self):
     def test_form_save_restrictions(self):
         self.browser.open(self.folder_url)
         self.browser.getLink('Restrictions').click()
-        ctrl = lambda name: self.browser.getControl(name=name)
+
+        def ctrl(name):
+            return self.browser.getControl(name=name)
+
         self.browser.getControl("Type restrictions").value = ['1']
         ctrl("form.widgets.allowed_types:list").value = ["Document", "Folder"]
         ctrl("form.widgets.secondary_types:list").value = ["Document"]
         self.browser.getControl("Save").click()
         aspect = ISelectableConstrainTypes(self.folder)
         self.assertEqual(1, aspect.getConstrainTypesMode())
-        self.assertEqual(["Document", "Folder"],
-                          aspect.getLocallyAllowedTypes())
+        self.assertEqual(
+            ["Document", "Folder"],
+            aspect.getLocallyAllowedTypes()
+        )
         self.assertEqual(["Folder"], aspect.getImmediatelyAddableTypes())
 
     def test_form_bad_save(self):
@@ -391,10 +397,16 @@ def test_form_bad_save(self):
 
         self.browser.open(self.folder_url)
         self.browser.getLink('Restrictions').click()
-        ctrl = lambda name: self.browser.getControl(name=name)
+
+        def ctrl(name):
+            return self.browser.getControl(name=name)
+
         self.browser.getControl("Type restrictions").value = ['1']
         ctrl("form.widgets.allowed_types:list").value = ["Document"]
-        ctrl("form.widgets.secondary_types:list").value = ["Document", "Folder"]
+        ctrl("form.widgets.secondary_types:list").value = [
+            "Document",
+            "Folder"
+        ]
         self.browser.getControl("Save").click()
         self.assertEqual(constraint_before, aspect.getConstrainTypesMode())
         self.assertTrue('Error' in self.browser.contents)
diff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py
index c3cfea0..e4849e9 100644
--- a/plone/app/dexterity/tests/test_doctests.py
+++ b/plone/app/dexterity/tests/test_doctests.py
@@ -1,7 +1,8 @@
+# -*- coding: utf-8 -*-
+from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
+from plone.testing import layered
 import doctest
 import unittest
-from plone.testing import layered
-from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 
 
 tests = (
diff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py
index bb55819..cd71c96 100644
--- a/plone/app/dexterity/tests/test_export.py
+++ b/plone/app/dexterity/tests/test_export.py
@@ -1,12 +1,10 @@
 # -*- coding: utf-8 -*-
 """Test the @@types-export view."""
-
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
 from plone.app.dexterity.tests.test_constrains import add_item_type
 from xml.dom.minidom import parseString
 from xml.parsers.expat import ExpatError
 from zope.component import getMultiAdapter
-
 import StringIO
 import unittest2 as unittest
 import zipfile
diff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py
index 46ea510..bd0183f 100644
--- a/plone/app/dexterity/tests/test_import.py
+++ b/plone/app/dexterity/tests/test_import.py
@@ -1,13 +1,11 @@
 # -*- coding: utf-8 -*-
 """Test the types import."""
-
 from DateTime.DateTime import DateTime
+from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity.browser.import_types import ITypeProfileImport
 from plone.app.dexterity.browser.import_types import TypeProfileImport
 from plone.app.dexterity.browser.import_types import ZipFileImportContext
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
-from Products.CMFCore.utils import getToolByName
-
 import os.path
 import plone.namedfile
 import unittest2 as unittest
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
index 51d89ed..c60fa59 100644
--- a/plone/app/dexterity/tests/test_permissions.py
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -1,24 +1,23 @@
 # -*- coding: utf-8 -*-
-from z3c.form.interfaces import IFieldWidget
-from z3c.form.util import getSpecification
-from zope.component import provideAdapter
-from plone.app.widgets.interfaces import IWidgetsLayer
-from zope.component.globalregistry import base
+from plone.app.content.browser.vocabulary import VocabularyView
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
-from plone.app.content.browser.vocabulary import VocabularyView
+from plone.app.widgets.interfaces import IWidgetsLayer
 from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
 from plone.app.widgets.testing import TestRequest
 from plone.autoform.interfaces import WIDGETS_KEY
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from plone.dexterity.fti import DexterityFTI
+from z3c.form.interfaces import IFieldWidget
+from z3c.form.util import getSpecification
+from z3c.form.widget import FieldWidget
 from zope import schema
+from zope.component import provideAdapter
+from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
 from zope.interface import Interface
-from z3c.form.widget import FieldWidget
-from plone.dexterity.fti import DexterityFTI
-
 import json
 
 try:
@@ -198,4 +197,4 @@ def test_vocabulary_on_adapted_widget(self):
         self.request.form['name'] = 'plone.app.vocabularies.Fake'
         data = json.loads(view())
         self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
-        _disable_custom_widget(IMockSchema['adapted_widget_field'])
\ No newline at end of file
+        _disable_custom_widget(IMockSchema['adapted_widget_field'])
diff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py
index af93902..570499e 100644
--- a/plone/app/dexterity/tests/test_robot.py
+++ b/plone/app/dexterity/tests/test_robot.py
@@ -1,8 +1,7 @@
-from plone.testing import layered
-
+# -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_ACCEPTANCE_TESTING
 from plone.app.testing import ROBOT_TEST_LEVEL
-
+from plone.testing import layered
 import os
 import robotsuite
 import unittest
diff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py
index fbe9528..c5a4b18 100644
--- a/plone/app/dexterity/tests/test_upgrades.py
+++ b/plone/app/dexterity/tests/test_upgrades.py
@@ -1,5 +1,6 @@
-import unittest2 as unittest
+# -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+import unittest2 as unittest
 
 
 class TestUpgrades(unittest.TestCase):
diff --git a/plone/app/dexterity/upgrades/to1.py b/plone/app/dexterity/upgrades/to1.py
index dcbdd2f..a94b9ae 100644
--- a/plone/app/dexterity/upgrades/to1.py
+++ b/plone/app/dexterity/upgrades/to1.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 
 
diff --git a/plone/app/dexterity/upgrades/to2.py b/plone/app/dexterity/upgrades/to2.py
index d449825..511fee9 100644
--- a/plone/app/dexterity/upgrades/to2.py
+++ b/plone/app/dexterity/upgrades/to2.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 
 
diff --git a/plone/app/dexterity/upgrades/to2000.py b/plone/app/dexterity/upgrades/to2000.py
index 0835622..82efeda 100644
--- a/plone/app/dexterity/upgrades/to2000.py
+++ b/plone/app/dexterity/upgrades/to2000.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 
 
diff --git a/plone/app/dexterity/upgrades/to2001.py b/plone/app/dexterity/upgrades/to2001.py
index b4a7c3c..dc60d51 100644
--- a/plone/app/dexterity/upgrades/to2001.py
+++ b/plone/app/dexterity/upgrades/to2001.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 from plone.dexterity.interfaces import IDexterityContent
 from plone.uuid.handlers import addAttributeUUID
diff --git a/plone/app/dexterity/upgrades/to2002.py b/plone/app/dexterity/upgrades/to2002.py
index 0666712..4d4d3f3 100644
--- a/plone/app/dexterity/upgrades/to2002.py
+++ b/plone/app/dexterity/upgrades/to2002.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
 
 
diff --git a/plone/app/dexterity/upgrades/to2003.py b/plone/app/dexterity/upgrades/to2003.py
index 6fa0709..c344c13 100644
--- a/plone/app/dexterity/upgrades/to2003.py
+++ b/plone/app/dexterity/upgrades/to2003.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFCore.utils import getToolByName
 
diff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py
index 00d44a5..43d6d5d 100644
--- a/plone/app/dexterity/upgrades/to2004.py
+++ b/plone/app/dexterity/upgrades/to2004.py
@@ -1,5 +1,5 @@
+# -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-
 from plone.dexterity.interfaces import IDexterityFTI
 
 


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-06T11:41:11+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/a3f4c2ab0963225d37fe2db59e440eac128c21a7

remaining pep8 and page template formating

Files changed:
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/behaviors.pt
M plone/app/dexterity/browser/container.pt
M plone/app/dexterity/browser/default_page_warning.pt
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/item.pt
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/modeleditor.js
M plone/app/dexterity/browser/modeleditor.pt
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/overview.pt
M plone/app/dexterity/browser/tabbed_forms.pt
M plone/app/dexterity/browser/types_listing.js
M plone/app/dexterity/browser/types_listing.pt
M plone/app/dexterity/browser/typesformwrapper.pt
M plone/app/dexterity/tests/test_permissions.py

diff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py
index d430ccb..863c62b 100644
--- a/plone/app/dexterity/behaviors/constrains.py
+++ b/plone/app/dexterity/behaviors/constrains.py
@@ -67,7 +67,9 @@ def _filterByDefaults(self, types, context=None):
         """
         if context is None:
             context = self.context
-        defaults = [fti.getId() for fti in self.getDefaultAddableTypes(context)]
+        defaults = [
+            fti.getId() for fti in self.getDefaultAddableTypes(context)
+        ]
         return [x for x in types if x in defaults]
 
     def allowedContentTypes(self, context=None):
@@ -97,7 +99,8 @@ def allowedContentTypes(self, context=None):
             if not parent_constrain_adapter:
                 return default_addable
             return_tids = self._filterByDefaults(
-                parent_constrain_adapter.getLocallyAllowedTypes(context), context)
+                parent_constrain_adapter.getLocallyAllowedTypes(
+                    context), context)
             return [t for t in default_addable if t.getId() in return_tids]
         else:
             raise Exception(
@@ -131,7 +134,9 @@ def getImmediatelyAddableTypes(self, context=None):
         if context is None:
             context = self.context
         mode = self.getConstrainTypesMode()
-        default_addable = [t.getId() for t in self.getDefaultAddableTypes(context)]
+        default_addable = [
+            t.getId() for t in self.getDefaultAddableTypes(context)
+        ]
 
         if mode == DISABLED:
             return default_addable
@@ -145,7 +150,8 @@ def getImmediatelyAddableTypes(self, context=None):
             if not parent_constrain_adapter:
                 return default_addable
             return self._filterByDefaults(
-                parent_constrain_adapter.getImmediatelyAddableTypes(context), context)
+                parent_constrain_adapter.getImmediatelyAddableTypes(
+                    context), context)
         else:
             raise Exception(
                 "Wrong constraint setting. %i is an invalid value",
diff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py
index acc7933..3f660eb 100644
--- a/plone/app/dexterity/behaviors/tests/test_id.py
+++ b/plone/app/dexterity/behaviors/tests/test_id.py
@@ -19,7 +19,10 @@ def setUp(self):
 
         # prepare browser
         self.browser = z2.Browser(self.layer['app'])
-        self.browser.addHeader('Authorization', 'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
+        self.browser.addHeader(
+            'Authorization', 'Basic %s:%s'
+            % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+        )
         self.browser.open('http://nohost/plone')
 
     def test_add_item_w_id_specified(self):
@@ -40,7 +43,7 @@ def test_add_item_w_id_specified(self):
     def test_add_item_w_reserved_name(self):
         self.browser.getLink('Page').click()
         self.browser.getControl('Title').value = 'title'
-        self.browser.getControl('Short name').value = 'login'  # naughty naughty
+        self.browser.getControl('Short name').value = 'login'  # naughty
         self.browser.getControl('Save').click()
         self.assertEqual(self.browser.url, 'http://nohost/plone/login-1')
 
@@ -83,4 +86,6 @@ def test_edit_item_doesnt_rename_if_same_id(self):
         self.browser.getControl('Save').click()
         self.assertEqual(self.browser.url, 'http://nohost/plone/foo')
         # assert that object has not been modified
-        self.assertEqual(mtime, self.layer['portal'].foo.bobobase_modification_time())
+        self.assertEqual(
+            mtime, self.layer['portal'].foo.bobobase_modification_time()
+        )
diff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py
index c99b1fb..7ffff1b 100644
--- a/plone/app/dexterity/behaviors/tests/test_metadata.py
+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-
 import unittest
 
 
diff --git a/plone/app/dexterity/browser/behaviors.pt b/plone/app/dexterity/browser/behaviors.pt
index f402414..8a79437 100644
--- a/plone/app/dexterity/browser/behaviors.pt
+++ b/plone/app/dexterity/browser/behaviors.pt
@@ -1,52 +1,45 @@
 <tal:root>
-<div class="portalMessage"
-           tal:condition="view/status" tal:content="view/status">
-</div>
-
-<form action="." method="post"
-            tal:attributes="action request/getURL; enctype view/enctype">
-
-          <tal:widgets repeat="widget view/widgets/values">
-
-                <div class="field"
-                     tal:define="error widget/error;
-                                 hidden python:widget.mode == 'hidden'"
-                     tal:attributes="class python:'field' + (error and ' error' or '')">
-                  <label for=""
-                         tal:attributes="for widget/id"
-                         tal:condition="not:hidden">
-                    <span i18n:translate=""
-                          tal:content="widget/label">label</span>
-                  </label>
-
-                  <span class="fieldRequired" title="Required"
-                        tal:condition="python:widget.required and not hidden"
-                        i18n:translate="label_required"
-                        i18n:attributes="title title_required;">
-                    (Required)
-                  </span>
-
-                  <div tal:condition="error"
-		 tal:content="structure error/render">
-                    Error
-                  </div>
-
-                  <div class="widget">
-                    <input type="text" tal:replace="structure widget/render" />
-                  </div>
-
-                  <div class="formHelp"
-                    tal:define="description widget/field/description"
-                    i18n:translate=""
-                    tal:content="description"
-                    tal:condition="python:description and not hidden"
-                    >field description</div>
-
-                </div>
-
-          </tal:widgets>
-
-        <metal:actions metal:use-macro="context/@@ploneform-macros/actions"/>
-
+<div class="portalMessage" tal:condition="view/status" tal:content="view/status"></div>
+
+<form action="." method="post" tal:attributes="action request/getURL; enctype view/enctype">
+<tal:widgets repeat="widget view/widgets/values">
+
+  <div class="field"
+       tal:define="error widget/error;
+                   hidden python:widget.mode == 'hidden'"
+       tal:attributes="class python:'field' + (error and ' error' or '')">
+    <label for=""
+           tal:attributes="for widget/id"
+           tal:condition="not:hidden">
+      <span i18n:translate=""
+            tal:content="widget/label">label</span>
+    </label>
+
+    <span class="fieldRequired" title="Required"
+          tal:condition="python:widget.required and not hidden"
+          i18n:translate="label_required"
+          i18n:attributes="title title_required;">
+      (Required)
+    </span>
+
+    <div tal:condition="error" tal:content="structure error/render">
+      Error
+    </div>
+
+    <div class="widget">
+      <input type="text" tal:replace="structure widget/render" />
+    </div>
+
+    <div class="formHelp"
+      tal:define="description widget/field/description"
+      i18n:translate=""
+      tal:content="description"
+      tal:condition="python:description and not hidden"
+      >field description</div>
+
+  </div>
+
+</tal:widgets>
+<metal:actions metal:use-macro="context/@@ploneform-macros/actions"/>
 </form>
 </tal:root>
diff --git a/plone/app/dexterity/browser/container.pt b/plone/app/dexterity/browser/container.pt
index db926c3..51f2f4d 100644
--- a/plone/app/dexterity/browser/container.pt
+++ b/plone/app/dexterity/browser/container.pt
@@ -8,30 +8,30 @@
 <body>
 
 <metal:main fill-slot="content-core">
-  <metal:content-core define-macro="content-core">
+<metal:content-core define-macro="content-core">
 
-    <tal:block repeat="widget view/widgets/values">
-        <tal:block tal:condition="python:widget.__name__ not in ('IBasic.title', 'IBasic.description', 'title', 'description',)">
-            <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
-        </tal:block>
-    </tal:block>
+  <tal:block repeat="widget view/widgets/values">
+      <tal:block tal:condition="python:widget.__name__ not in ('IBasic.title', 'IBasic.description', 'title', 'description',)">
+          <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
+      </tal:block>
+  </tal:block>
 
-    <fieldset tal:repeat="group view/groups"
-              tal:attributes="id python:''.join((group.prefix, 'groups.', group.__name__)).replace('.', '-')">
-        <legend tal:content="group/label" />
-        <tal:block tal:repeat="widget group/widgets/values">
-            <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
-        </tal:block>
-    </fieldset>
+  <fieldset tal:repeat="group view/groups"
+            tal:attributes="id python:''.join((group.prefix, 'groups.', group.__name__)).replace('.', '-')">
+      <legend tal:content="group/label" />
+      <tal:block tal:repeat="widget group/widgets/values">
+          <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
+      </tal:block>
+  </fieldset>
 
-    <fieldset id="folder-listing">
-        <legend i18n:translate="" i18n:domain="plone">Contents</legend>
-        <tal:block define="view nocall:context/folder_listing; listing_macro view/macros/listing">
-            <metal:use_macro use-macro="listing_macro" />
-        </tal:block>
-    </fieldset>
+  <fieldset id="folder-listing">
+      <legend i18n:translate="" i18n:domain="plone">Contents</legend>
+      <tal:block define="view nocall:context/folder_listing; listing_macro view/macros/listing">
+          <metal:use_macro use-macro="listing_macro" />
+      </tal:block>
+  </fieldset>
 
-  </metal:content-core>
+</metal:content-core>
 </metal:main>
 
 </body>
diff --git a/plone/app/dexterity/browser/default_page_warning.pt b/plone/app/dexterity/browser/default_page_warning.pt
index c0818d0..594bb75 100644
--- a/plone/app/dexterity/browser/default_page_warning.pt
+++ b/plone/app/dexterity/browser/default_page_warning.pt
@@ -1,14 +1,14 @@
 <div class="portalMessage info" role="alertdialog" aria-labelledby="dialogTitle"
     tal:condition="context/@@plone_context_state/is_default_page|nothing">
-    <strong id="dialogTitle"
-            i18n:translate="">
-        Info
-    </strong>
-    <span i18n:translate="label_edit_default_view_container">
-        You are editing the default view of a container. If you wanted to edit the container itself,
-       <a href=""
-          i18n:name="go_here"
-          i18n:translate="label_edit_default_view_container_go_here"
-          tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/edit">go here</a>.
-    </span>
+  <strong id="dialogTitle"
+          i18n:translate="">
+      Info
+  </strong>
+  <span i18n:translate="label_edit_default_view_container">
+      You are editing the default view of a container. If you wanted to edit the container itself,
+     <a href=""
+        i18n:name="go_here"
+        i18n:translate="label_edit_default_view_container_go_here"
+        tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/edit">go here</a>.
+  </span>
 </div>
diff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py
index d96dce3..3eb2c10 100644
--- a/plone/app/dexterity/browser/import_types.py
+++ b/plone/app/dexterity/browser/import_types.py
@@ -1,9 +1,7 @@
 # -*- coding: utf-8 -*-
 """ Support for importing Dexterity types from GS zip file.
 """
-
 # XXX: need to make exceptions more specific, shorten messages
-
 from DateTime.DateTime import DateTime
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.context import BaseContext
@@ -17,15 +15,15 @@
 from z3c.form import form
 from zipfile import BadZipfile
 from zipfile import ZipFile
-from zope.interface import implementer
-from zope.interface import Invalid
 from zope.interface import Interface
+from zope.interface import Invalid
+from zope.interface import implementer
 from zope.interface import invariant
 from zope.site.hooks import getSite
-
 import os.path
 import zope.schema
 
+
 class ITypeProfileImport(Interface):
     """ Fields for a zip import form
     """
diff --git a/plone/app/dexterity/browser/item.pt b/plone/app/dexterity/browser/item.pt
index 820f544..48dd5e9 100644
--- a/plone/app/dexterity/browser/item.pt
+++ b/plone/app/dexterity/browser/item.pt
@@ -8,23 +8,23 @@
 <body>
 
 <metal:main fill-slot="content-core">
-  <metal:content-core define-macro="content-core">
+<metal:content-core define-macro="content-core">
 
-    <tal:block repeat="widget view/widgets/values">
-        <tal:block tal:condition="python:widget.__name__ not in ('IBasic.title', 'IBasic.description', 'title', 'description',)">
-            <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
-        </tal:block>
+  <tal:block repeat="widget view/widgets/values">
+    <tal:block tal:condition="python:widget.__name__ not in ('IBasic.title', 'IBasic.description', 'title', 'description',)">
+      <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
     </tal:block>
+  </tal:block>
 
-    <fieldset tal:repeat="group view/groups"
-              tal:attributes="id python:''.join((group.prefix, 'groups.', group.__name__)).replace('.', '-')">
-        <legend tal:content="group/label" />
-        <tal:block tal:repeat="widget group/widgets/values">
-            <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
-        </tal:block>
-    </fieldset>
+  <fieldset tal:repeat="group view/groups"
+            tal:attributes="id python:''.join((group.prefix, 'groups.', group.__name__)).replace('.', '-')">
+    <legend tal:content="group/label" />
+    <tal:block tal:repeat="widget group/widgets/values">
+      <tal:widget tal:replace="structure widget/@@ploneform-render-widget"/>
+    </tal:block>
+  </fieldset>
 
-  </metal:content-core>
+</metal:content-core>
 </metal:main>
 
 </body>
diff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py
index 186361d..42da0b4 100644
--- a/plone/app/dexterity/browser/layout.py
+++ b/plone/app/dexterity/browser/layout.py
@@ -3,6 +3,7 @@
 from plone.app.dexterity import MessageFactory as _
 from plone.z3cform.layout import FormWrapper
 
+
 class TypeFormLayout(FormWrapper):
 
     index = ViewPageTemplateFile('tabbed_forms.pt')
diff --git a/plone/app/dexterity/browser/modeleditor.js b/plone/app/dexterity/browser/modeleditor.js
index fb6ed7b..1d17f90 100644
--- a/plone/app/dexterity/browser/modeleditor.js
+++ b/plone/app/dexterity/browser/modeleditor.js
@@ -6,6 +6,7 @@
 /* global message strings are from jsvariables.py in CMFPlone */
 
 jQuery(function ($) {
+    "use strict";
     var editor = ace.edit("modelEditor"),
         session = editor.getSession(),
         myform = $("#saveform"),
diff --git a/plone/app/dexterity/browser/modeleditor.pt b/plone/app/dexterity/browser/modeleditor.pt
index c93a8a6..29829e5 100644
--- a/plone/app/dexterity/browser/modeleditor.pt
+++ b/plone/app/dexterity/browser/modeleditor.pt
@@ -7,87 +7,89 @@
     i18n:domain="plone">
 
 <body>
-  <metal:main fill-slot="prefs_configlet_main">
-    <tal:main-macro metal:define-macro="main">
-        <tal:comment tal:condition="python:False">
-            prefs_main_template doesn't have the style_slot
-        </tal:comment>
-        <style type="text/css"
-            tal:content="string:@import url(${portal_url}/++resource++plone.app.dexterity.modeleditor.css);"
-            />
-        <div id="page-intro">
+<metal:main fill-slot="prefs_configlet_main">
+<tal:main-macro metal:define-macro="main">
+  <tal:comment tal:condition="python:False">
+    prefs_main_template doesn't have the style_slot
+  </tal:comment>
+  <style type="text/css"
+      tal:content="string:@import url(${portal_url}/++resource++plone.app.dexterity.modeleditor.css);"
+      />
+  <div id="page-intro">
 
-            <h1 class="documentFirstHeading"
-                i18n:translate="heading_model_edit">Edit field model for
-                <span i18n:name="name" tal:content="context/Title">name</span>
-            </h1>
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_model_edit">Edit field model for
+      <span i18n:name="name" tal:content="context/Title">name</span>
+    </h1>
 
-            <p class="description" i18n:translate="description_model_edit">
-                This form allows you to directly edit the XML representation
-                of the field list. This makes it possible to add annotations for fieldsets,
-                validation and widgets. See the <a
-                href="http://developer.plone.org/reference_manuals/external/plone.app.dexterity/reference/dexterity-xml.html">Dexterity XML</a>
-                section of the <a href="http://developer.plone.org/reference_manuals/external/plone.app.dexterity">Dexterity Developer Manual</a> for details.
-            </p>
+    <p class="description" i18n:translate="description_model_edit">
+      This form allows you to directly edit the XML representation
+      of the field list. This makes it possible to add annotations for fieldsets,
+      validation and widgets. See the <a
+      href="http://developer.plone.org/reference_manuals/external/plone.app.dexterity/reference/dexterity-xml.html">Dexterity XML</a>
+      section of the <a href="http://developer.plone.org/reference_manuals/external/plone.app.dexterity">Dexterity Developer Manual</a> for details.
+    </p>
 
-            <a href=""
-                class="link-parent"
-                tal:attributes="href string:${context/absolute_url}/@@fields"
-                i18n:translate="label_back_to_schemaeditor">
-                    Back to the schema editor
-            </a>
+    <a href=""
+        class="link-parent"
+        tal:attributes="href string:${context/absolute_url}/@@fields"
+        i18n:translate="label_back_to_schemaeditor">
+            Back to the schema editor
+    </a>
 
-        </div>
+  </div>
 
-        <div id="rules-editor">
-            <div class="portalMessage info">
-              <span id="messagespan" style="display:none">
-                &nbsp;
-              </span>&nbsp;
-            </div>
+  <div id="rules-editor">
+    <div class="portalMessage info">
+      <span id="messagespan" style="display:none">
+        &nbsp;
+      </span>&nbsp;
+    </div>
 
-            <form id="saveform"
-                tal:attributes="action string:${context/absolute_url}/@@model-edit-save"
-                tal:define="authenticator context/@@authenticator/authenticator | nothing">
-                <input tal:replace="structure authenticator" />
-                <input type="hidden" id="savesource" name="source" value="" />
-                <div class="formControls">
-                    <input class="context" type="submit" name="form.button.save" value="Save" disabled="disabled" />
-                </div>
-            </form>
+    <form id="saveform"
+        tal:attributes="action string:${context/absolute_url}/@@model-edit-save"
+        tal:define="authenticator context/@@authenticator/authenticator | nothing">
+      <input tal:replace="structure authenticator" />
+      <input type="hidden" id="savesource" name="source" value="" />
+      <div class="formControls">
+        <input class="context" type="submit" name="form.button.save" value="Save" disabled="disabled" />
+      </div>
+    </form>
 
-            <div id="modelEditor" tal:content="view/modelSource" />
-        </div>
+    <div id="modelEditor" tal:content="view/modelSource" />
+  </div>
 
-    <tal:comment tal:condition="python:False">
-        prefs_main_template doesn't have the head_javascript_slot
-    </tal:comment>
-    <script>
-        // start with an editor that fits the viewport with room
-        // to show the save button.
-        jQuery(function ($) {
-            function setEditorSize () {
-                var wheight = $(window).height();
-                $("#rules-editor").height(wheight);
-                $("#modelEditor").height(wheight-80);
-            }
-            $(window).resize(function() {
-                setEditorSize();
-            });
-            setEditorSize();
-        });
-    </script>
-    <script src="++resource++plone.resourceeditor/ace/ace.js"
-        type="text/javascript"
-        charset="utf-8"
-        tal:attributes="src string:${portal_url}/++resource++plone.resourceeditor/ace/ace.js"
-        ></script>
-    <script src="++resource++plone.schemaeditor/modeleditor.js"
-        type="text/javascript"
-        charset="utf-8"
-        tal:attributes="src string:${portal_url}/++resource++plone.app.dexterity.modeleditor.js"
-        ></script>
-    </tal:main-macro>
-  </metal:main>
+  <tal:comment tal:condition="python:False">
+      prefs_main_template doesn't have the head_javascript_slot
+  </tal:comment>
+
+  <script>
+      // start with an editor that fits the viewport with room
+      // to show the save button.
+      jQuery(function ($) {
+          function setEditorSize () {
+              var wheight = $(window).height();
+              $("#rules-editor").height(wheight);
+              $("#modelEditor").height(wheight-80);
+          }
+          $(window).resize(function() {
+              setEditorSize();
+          });
+          setEditorSize();
+      });
+  </script>
+  <script src="++resource++plone.resourceeditor/ace/ace.js"
+      type="text/javascript"
+      charset="utf-8"
+      tal:attributes="src string:${portal_url}/++resource++plone.resourceeditor/ace/ace.js"
+      ></script>
+  <script src="++resource++plone.schemaeditor/modeleditor.js"
+      type="text/javascript"
+      charset="utf-8"
+      tal:attributes="src string:${portal_url}/++resource++plone.app.dexterity.modeleditor.js"
+      ></script>
+
+</tal:main-macro>
+</metal:main>
 </body>
 </html>
diff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py
index 389f9a7..0c08862 100644
--- a/plone/app/dexterity/browser/modeleditor.py
+++ b/plone/app/dexterity/browser/modeleditor.py
@@ -12,7 +12,8 @@
 
 
 class ModelEditorView(BrowserView):
-    """ editor view """
+    """Editor view.
+    """
 
     def modelSource(self):
         return self.context.fti.model_source
@@ -25,10 +26,12 @@ def authorized(context, request):
 
 
 class AjaxSaveHandler(BrowserView):
-    """ handle AJAX save posts """
+    """Handle AJAX save posts.
+    """
 
     def __call__(self):
-        """ handle AJAX save post """
+        """Handle AJAX save post.
+        """
 
         if not authorized(self.context, self.request):
             raise Unauthorized
diff --git a/plone/app/dexterity/browser/overview.pt b/plone/app/dexterity/browser/overview.pt
index 0558a9b..8aa7686 100644
--- a/plone/app/dexterity/browser/overview.pt
+++ b/plone/app/dexterity/browser/overview.pt
@@ -1,38 +1,39 @@
 <tal:form metal:use-macro="context/@@ploneform-macros/titlelessform"
-	xmlns:i18n="http://xml.zope.org/namespaces/i18n"
-	i18n:domain="plone.app.dexterity">
- <tal:fields metal:fill-slot="fields">
-	<tal:field tal:replace="structure view/widgets/title/@@ploneform-render-widget" />
-	<tal:field tal:replace="structure view/widgets/description/@@ploneform-render-widget" />
+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+    i18n:domain="plone.app.dexterity">
+<tal:fields metal:fill-slot="fields">
+  <tal:field tal:replace="structure view/widgets/title/@@ploneform-render-widget" />
+  <tal:field tal:replace="structure view/widgets/description/@@ploneform-render-widget" />
 
-    <fieldset tal:condition="python:'filter_content_types' in view.fields">
-      <legend i18n:translate="label_contained_items">Contained items</legend>
-      <tal:block tal:define="context nocall:view/widgets/filter_content_types;
-      	                     value context/value">
-	  <tal:fieldwrapper metal:use-macro="context/@@ploneform-render-widget/widget-wrapper">
-		<tal:field metal:fill-slot="widget">
-			<label>
-			  <input type="radio" value="none"
-				     tal:attributes="name context/name;
-				                     checked python:'checked' if 'none' in value else None"/>
-			  <tal:block i18n:translate="label_no_content_types">No content types</tal:block>
-			</label><br />
-			<label>
-			  <input type="radio" value="all"
-			  	     tal:attributes="name context/name;
-				                     checked python:'checked' if 'all' in value else None"/>
-			  <tal:block i18n:translate="label_all_content_types">All content types</tal:block>
-			</label><br />
-			<label>
-			  <input type="radio" value="some"
-			  	     tal:attributes="name context/name;
-				                     checked python:'checked' if 'some' in value else None"/>
-			  <tal:block i18n:translate="label_some_content_types">Some content types:</tal:block>
-			  <tal:field tal:replace="structure view/widgets/allowed_content_types/render" />
-			</label>
-		</tal:field>
-	  </tal:fieldwrapper>
-	  </tal:block>
-	</fieldset>
- </tal:fields>
+  <fieldset tal:condition="python:'filter_content_types' in view.fields">
+    <legend i18n:translate="label_contained_items">Contained items</legend>
+    <tal:block tal:define="context nocall:view/widgets/filter_content_types;
+                           value context/value">
+      <tal:fieldwrapper metal:use-macro="context/@@ploneform-render-widget/widget-wrapper">
+      <tal:field metal:fill-slot="widget">
+        <label>
+          <input type="radio" value="none"
+               tal:attributes="name context/name;
+                               checked python:'checked' if 'none' in value else None"/>
+          <tal:block i18n:translate="label_no_content_types">No content types</tal:block>
+        </label><br />
+        <label>
+          <input type="radio" value="all"
+                 tal:attributes="name context/name;
+                               checked python:'checked' if 'all' in value else None"/>
+          <tal:block i18n:translate="label_all_content_types">All content types</tal:block>
+        </label><br />
+        <label>
+          <input type="radio" value="some"
+                 tal:attributes="name context/name;
+                               checked python:'checked' if 'some' in value else None"/>
+          <tal:block i18n:translate="label_some_content_types">Some content types:</tal:block>
+          <tal:field tal:replace="structure view/widgets/allowed_content_types/render" />
+        </label>
+      </tal:field>
+      </tal:fieldwrapper>
+    </tal:block>
+  </fieldset>
+
+</tal:fields>
 </tal:form>
diff --git a/plone/app/dexterity/browser/tabbed_forms.pt b/plone/app/dexterity/browser/tabbed_forms.pt
index 4d9f5dd..7ebceab 100644
--- a/plone/app/dexterity/browser/tabbed_forms.pt
+++ b/plone/app/dexterity/browser/tabbed_forms.pt
@@ -4,28 +4,26 @@
       xmlns:i18n="http://xml.zope.org/namespaces/i18n"
       metal:use-macro="here/prefs_main_template/macros/master"
       i18n:domain="plone.z3cform">
-
 <body>
-    <metal:slot metal:fill-slot="prefs_configlet_main">
-
-        <div metal:use-macro="context/global_statusmessage/macros/portal_message">
-          Portal status message
-        </div>
+<metal:slot metal:fill-slot="prefs_configlet_main">
+  <div metal:use-macro="context/global_statusmessage/macros/portal_message">
+    Portal status message
+  </div>
 
-        <h1 class="documentFirstHeading"><tal:block tal:content="context/Title"/> (<tal:block tal:content="python:context.__name__" />)</h1>
+  <h1 class="documentFirstHeading"><tal:block tal:content="context/Title"/> (<tal:block tal:content="python:context.__name__" />)</h1>
 
-        <div class="autotabs">
-         
-          <nav class="autotoc-nav">
-            <a tal:repeat="tab view/tabs"
-               tal:attributes="href python:context.absolute_url() + '/' + tab[1];
-                               class python:'active' if tab[0] == view.label else ''"
-               tal:content="python:tab[0]" />
-          </nav>
+  <div class="autotabs">
+   
+    <nav class="autotoc-nav">
+      <a tal:repeat="tab view/tabs"
+          tal:attributes="href python:context.absolute_url() + '/' + tab[1];
+                          class python:'active' if tab[0] == view.label else ''"
+          tal:content="python:tab[0]" />
+    </nav>
 
-          <tal:block tal:replace="structure view/contents|view/render"/>
-        </div>
-    </metal:slot>
+    <tal:block tal:replace="structure view/contents|view/render"/>
+  </div>
 
+</metal:slot>
 </body>
 </html>
diff --git a/plone/app/dexterity/browser/types_listing.js b/plone/app/dexterity/browser/types_listing.js
index 1b11c1f..f1162d5 100644
--- a/plone/app/dexterity/browser/types_listing.js
+++ b/plone/app/dexterity/browser/types_listing.js
@@ -2,18 +2,18 @@ require([
     'jquery',
     'mockup-patterns-modal'
 ], function($, Modal) {
-
+    "use strict";
     $('.action').css('display', 'inline');
 
     // clone type form
     $('#crud-edit-form-buttons-clone').click(function(e) {
       var selected = $('input[id$=-widgets-select-0]:checked');
-      if (selected.length == 1) {
+      if (selected.length === 1) {
           e.preventDefault();
           $(this).removeClass('submitting');
           var type_link = $('a', selected.closest('tr'));
           var $el = $('<' + 'a href="' + type_link.attr('href') + '/@@clone"><' + '/a>').appendTo('body');
-          new Modal($el, {
+          var modal = new Modal($el, {
             actionOptions: {displayInModal: false}
           });
           $el.click();
@@ -31,7 +31,7 @@ require([
         } else {
           msg = 'Are you sure you want to delete these types?';
         }
-        if(!confirm(msg)) {
+        if(!window.confirm(msg)) {
             $(this).removeClass('submitting');
             e.preventDefault();
         }
diff --git a/plone/app/dexterity/browser/types_listing.pt b/plone/app/dexterity/browser/types_listing.pt
index 9a82b23..52b1913 100644
--- a/plone/app/dexterity/browser/types_listing.pt
+++ b/plone/app/dexterity/browser/types_listing.pt
@@ -1,43 +1,42 @@
 <tal:root>
-<script type="text/javascript"
-        tal:attributes="src context/++resource++schemaeditor.js"></script>
-<script type="text/javascript"
-        tal:attributes="src context/++resource++plone.app.dexterity.types_listing.js"></script>
+  <script type="text/javascript"
+          tal:attributes="src context/++resource++schemaeditor.js"></script>
+  <script type="text/javascript"
+          tal:attributes="src context/++resource++plone.app.dexterity.types_listing.js"></script>
 
-<div class="portalMessage info" role="alertdialog" aria-labelledby="dialogTitle"
-     tal:condition="view/status">
-  <strong id="dialogTitle"
-          i18n:translate="">
-    Info
-  </strong>
-  <span tal:content="view/status">
-    Status
-  </span>
-</div>
+  <div class="portalMessage info" role="alertdialog" aria-labelledby="dialogTitle"
+       tal:condition="view/status">
+    <strong id="dialogTitle" i18n:translate="">
+      Info
+    </strong>
+    <span tal:content="view/status">
+      Status
+    </span>
+  </div>
 
-<p class="crud-description documentDescription"
-     tal:condition="view/description"
-     tal:content="structure view/description">
-</p>
+  <p class="crud-description documentDescription"
+      tal:condition="view/description"
+      tal:content="structure view/description">
+  </p>
 
-<a class="pat-modal"
-   href="${context/absolute_url}/@@add-type">
-   <button i18n:domain="plone.app.dexterity"
-           i18n:translate="">Add New Content Type&hellip;</button>
-</a>
+  <a class="pat-modal"
+      href="${context/absolute_url}/@@add-type">
+    <button i18n:domain="plone.app.dexterity"
+            i18n:translate="">Add New Content Type&hellip;</button>
+  </a>
 
-<a class="pat-modal"
-   href="${context/absolute_url}/@@import-types">
-   <button i18n:domain="plone.app.dexterity"
-           i18n:translate="">Import Type Profiles&hellip;</button>
-</a>
+  <a class="pat-modal"
+      href="${context/absolute_url}/@@import-types">
+    <button i18n:domain="plone.app.dexterity"
+            i18n:translate="">Import Type Profiles&hellip;</button>
+  </a>
 
-<div tal:repeat="form view/subforms"
-     tal:content="structure form/render"
-     class="crud-form">
-</div>
+  <div class="crud-form"
+      tal:repeat="form view/subforms"
+      tal:content="structure form/render">
+  </div>
 
-<div class="action" tal:repeat="action view/actions/values">
-  <input type="submit" tal:replace="structure action/render" />
-</div>
+  <div class="action" tal:repeat="action view/actions/values">
+    <input type="submit" tal:replace="structure action/render" />
+  </div>
 </tal:root>
diff --git a/plone/app/dexterity/browser/typesformwrapper.pt b/plone/app/dexterity/browser/typesformwrapper.pt
index 8c0f1f9..2e4c697 100644
--- a/plone/app/dexterity/browser/typesformwrapper.pt
+++ b/plone/app/dexterity/browser/typesformwrapper.pt
@@ -6,14 +6,12 @@
       metal:use-macro="here/prefs_main_template/macros/master"
       i18n:domain="plone.app.dexterity">
 <body>
-  <metal:main fill-slot="prefs_configlet_main">
-    <tal:main-macro metal:define-macro="main">
-
-      <h1 class="documentFirstHeading" tal:content="view/label">Title</h1>
-
-      <div id="skel-contents">
-        <span tal:replace="structure view/contents" />
-      </div>
-    </tal:main-macro>
+<metal:main fill-slot="prefs_configlet_main">
+<tal:main-macro metal:define-macro="main">
+  <h1 class="documentFirstHeading" tal:content="view/label">Title</h1>
+  <div id="skel-contents">
+    <span tal:replace="structure view/contents" />
+  </div>
+</tal:main-macro>
 </metal:main>
 </html>
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
index c60fa59..7238b7d 100644
--- a/plone/app/dexterity/tests/test_permissions.py
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -66,9 +66,11 @@ class IMockSchema(Interface):
 
 
 def _enable_custom_widget(field):
-    provideAdapter(_custom_field_widget, adapts=
-                   (getSpecification(field), IWidgetsLayer),
-                   provides=IFieldWidget)
+    provideAdapter(
+        _custom_field_widget,
+        adapts=(getSpecification(field), IWidgetsLayer),
+        provides=IFieldWidget
+    )
 
 
 def _disable_custom_widget(field):


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-03-06T12:25:05+01:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/146dadf8c44958761e1707f04e77aed4237f141d

more zcml and other xml formating

Files changed:
M plone/app/dexterity/behaviors/configure.zcml
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/configure.zcml
M plone/app/dexterity/events.zcml
M plone/app/dexterity/overrides.zcml
M plone/app/dexterity/profiles/default/actions.xml
M plone/app/dexterity/profiles/default/controlpanel.xml
M plone/app/dexterity/profiles/testing/types.xml
M plone/app/dexterity/profiles/testing/types/Document.xml
M plone/app/dexterity/profiles/testing/types/Folder.xml
M plone/app/dexterity/upgrades/configure.zcml

diff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml
index 9928ae7..1dc0095 100644
--- a/plone/app/dexterity/behaviors/configure.zcml
+++ b/plone/app/dexterity/behaviors/configure.zcml
@@ -4,141 +4,141 @@
     xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone.app.dexterity">
 
-    <include package="plone.behavior" file="meta.zcml"/>
-
-    <!-- vocabularies -->
-    <include package="plone.app.vocabularies"/>
-
-    <!-- Metadata -->
-    <plone:behavior
-        title="Basic metadata"
-        description="Adds title and description fields."
-        provides=".metadata.IBasic"
-        factory=".metadata.Basic"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-    <plone:behavior
-        title="Categorization"
-        description="Adds keywords and language fields."
-        provides=".metadata.ICategorization"
-        factory=".metadata.Categorization"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-    <plone:behavior
-        title="Date range"
-        description="Adds effective date and expiration date fields."
-        provides=".metadata.IPublication"
-        factory=".metadata.Publication"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-    <plone:behavior
-        title="Ownership"
-        description="Adds creator, contributor, and rights fields."
-        provides=".metadata.IOwnership"
-        factory=".metadata.Ownership"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-    <adapter
+  <include package="plone.behavior" file="meta.zcml"/>
+
+  <!-- vocabularies -->
+  <include package="plone.app.vocabularies"/>
+
+  <!-- Metadata -->
+  <plone:behavior
+      title="Basic metadata"
+      description="Adds title and description fields."
+      provides=".metadata.IBasic"
+      factory=".metadata.Basic"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+  <plone:behavior
+      title="Categorization"
+      description="Adds keywords and language fields."
+      provides=".metadata.ICategorization"
+      factory=".metadata.Categorization"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+  <plone:behavior
+      title="Date range"
+      description="Adds effective date and expiration date fields."
+      provides=".metadata.IPublication"
+      factory=".metadata.Publication"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+  <plone:behavior
+      title="Ownership"
+      description="Adds creator, contributor, and rights fields."
+      provides=".metadata.IOwnership"
+      factory=".metadata.Ownership"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+  <adapter
       name="default"
       factory=".metadata.CreatorsDefaultValue"
       />
-    <plone:behavior
-        title="Dublin Core metadata"
-        description="Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)"
-        provides=".metadata.IDublinCore"
-        factory=".metadata.DublinCore"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <!-- Title-to-id -->
-    <plone:behavior
-        title="Name from title"
-        description="Automatically generate short URL name for content based on its initial title"
-        provides="plone.app.content.interfaces.INameFromTitle"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <!-- File-name-to-id -->
-    <plone:behavior
-        title="Name from file name"
-        description="Automatically generate short URL name for content based on its primary field file name"
-        provides=".filename.INameFromFileName"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <adapter factory=".filename.NameFromFileName" />
-
-    <!-- Navigation root -->
-    <plone:behavior
-        title="Navigation root"
-        description="Make all items of this type a navigation root"
-        provides="plone.app.layout.navigation.interfaces.INavigationRoot"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <!-- Exclude from navigation -->
-    <plone:behavior
-        title="Exclude From navigation"
-        description="Allow items to be excluded from navigation"
-        provides=".exclfromnav.IExcludeFromNavigation"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <!-- Next previous -->
-    <plone:behavior
-        title="Next previous navigation toggle"
-        description="Allow items to have next previous navigation enabled"
-        provides=".nextprevious.INextPreviousToggle"
-        for="plone.dexterity.interfaces.IDexterityContainer"
-        />
-
-    <!--Allow discussion -->
-    <plone:behavior
-        title="Allow discussion"
-        description="Allow discussion on this item"
-        provides=".discussion.IAllowDiscussion"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <adapter factory=".nextprevious.NextPreviousToggle" />
-
-    <adapter
-        factory=".nextprevious.DefaultNextPreviousEnabled"
-        name="default" />
-
-    <plone:behavior
-        title="Next previous navigation"
-        description="Enable next previous navigation for all items of this type"
-        provides=".nextprevious.INextPreviousEnabled"
-        for="plone.dexterity.interfaces.IDexterityContainer"
-        />
-
-    <adapter factory=".nextprevious.NextPreviousEnabled" />
-
-    <!-- Constrain container allowed content types -->
-    <plone:behavior
-        title="Folder Addable Constrains"
-        description="Restrict the content types that can be added to folderish content"
-        provides="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"
-        factory=".constrains.ConstrainTypesBehavior"
-        for="plone.dexterity.interfaces.IDexterityContainer"
-        />
-
-    <!-- Short name -->
-    <plone:behavior
-        title="Short name"
-        description="Gives the ability to rename an item from its edit form."
-        factory=".id.ShortName"
-        provides=".id.IShortName"
-        for="plone.dexterity.interfaces.IDexterityContent"
-        />
-
-    <!-- BBB -->
-    <configure zcml:condition="installed plone.app.relationfield">
-      <include package="plone.app.relationfield" />
-      <utility factory=".related.related_items_behavior_BBB"
-               provides="plone.behavior.interfaces.IBehavior"
-               name="plone.app.dexterity.behaviors.related.IRelatedItems"/>
-    </configure>
+  <plone:behavior
+      title="Dublin Core metadata"
+      description="Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)"
+      provides=".metadata.IDublinCore"
+      factory=".metadata.DublinCore"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <!-- Title-to-id -->
+  <plone:behavior
+      title="Name from title"
+      description="Automatically generate short URL name for content based on its initial title"
+      provides="plone.app.content.interfaces.INameFromTitle"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <!-- File-name-to-id -->
+  <plone:behavior
+      title="Name from file name"
+      description="Automatically generate short URL name for content based on its primary field file name"
+      provides=".filename.INameFromFileName"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <adapter factory=".filename.NameFromFileName" />
+
+  <!-- Navigation root -->
+  <plone:behavior
+      title="Navigation root"
+      description="Make all items of this type a navigation root"
+      provides="plone.app.layout.navigation.interfaces.INavigationRoot"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <!-- Exclude from navigation -->
+  <plone:behavior
+      title="Exclude From navigation"
+      description="Allow items to be excluded from navigation"
+      provides=".exclfromnav.IExcludeFromNavigation"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <!-- Next previous -->
+  <plone:behavior
+      title="Next previous navigation toggle"
+      description="Allow items to have next previous navigation enabled"
+      provides=".nextprevious.INextPreviousToggle"
+      for="plone.dexterity.interfaces.IDexterityContainer"
+      />
+
+  <!--Allow discussion -->
+  <plone:behavior
+      title="Allow discussion"
+      description="Allow discussion on this item"
+      provides=".discussion.IAllowDiscussion"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <adapter factory=".nextprevious.NextPreviousToggle" />
+
+  <adapter
+      factory=".nextprevious.DefaultNextPreviousEnabled"
+      name="default" />
+
+  <plone:behavior
+      title="Next previous navigation"
+      description="Enable next previous navigation for all items of this type"
+      provides=".nextprevious.INextPreviousEnabled"
+      for="plone.dexterity.interfaces.IDexterityContainer"
+      />
+
+  <adapter factory=".nextprevious.NextPreviousEnabled" />
+
+  <!-- Constrain container allowed content types -->
+  <plone:behavior
+      title="Folder Addable Constrains"
+      description="Restrict the content types that can be added to folderish content"
+      provides="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"
+      factory=".constrains.ConstrainTypesBehavior"
+      for="plone.dexterity.interfaces.IDexterityContainer"
+      />
+
+  <!-- Short name -->
+  <plone:behavior
+      title="Short name"
+      description="Gives the ability to rename an item from its edit form."
+      factory=".id.ShortName"
+      provides=".id.IShortName"
+      for="plone.dexterity.interfaces.IDexterityContent"
+      />
+
+  <!-- BBB -->
+  <configure zcml:condition="installed plone.app.relationfield">
+    <include package="plone.app.relationfield" />
+    <utility factory=".related.related_items_behavior_BBB"
+             provides="plone.behavior.interfaces.IBehavior"
+             name="plone.app.dexterity.behaviors.related.IRelatedItems"/>
+  </configure>
 
 </configure>
diff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml
index d93185e..96d53d2 100644
--- a/plone/app/dexterity/browser/configure.zcml
+++ b/plone/app/dexterity/browser/configure.zcml
@@ -4,140 +4,141 @@
     xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone.app.dexterity">
 
-    <!-- Default view for Dexterity types in Plone  4 -->
+  <!-- Default view for Dexterity types in Plone  4 -->
+  <browser:page
+      for="plone.dexterity.interfaces.IDexterityItem"
+      name="view"
+      class="plone.dexterity.browser.view.DefaultView"
+      template="item.pt"
+      permission="zope2.View"
+      />
+
+  <browser:page
+      for="plone.dexterity.interfaces.IDexterityContainer"
+      name="view"
+      class="plone.dexterity.browser.view.DefaultView"
+      template="container.pt"
+      permission="zope2.View"
+      />
+
+  <!-- warning when editing default pages -->
+  <browser:viewlet
+      name="plone.app.dexterity.defaultpagewarning"
+      view="plone.dexterity.interfaces.IDexterityEditForm"
+      template="default_page_warning.pt"
+      permission="cmf.ModifyPortalContent"
+      manager="plone.app.layout.viewlets.interfaces.IGlobalStatusMessage"
+      />
+
+  <!-- Control panel -->
+
+  <browser:page
+      name="dexterity-types"
+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+      class=".types.TypesContext"
+      permission="plone.schemaeditor.ManageSchemata"
+      allowed_interface="OFS.interfaces.IItem" />
+
+  <adapter
+      factory=".types.TypeSettingsAdapter"
+      provides="..interfaces.ITypeSettings"
+      for="plone.dexterity.interfaces.IDexterityFTI"
+      />
+
+  <adapter
+      factory=".types.TypeStatsAdapter"
+      provides="..interfaces.ITypeStats"
+      for="plone.dexterity.interfaces.IDexterityFTI"
+      />
+
+  <browser:page
+      name="edit"
+      for="plone.app.dexterity.interfaces.ITypesContext"
+      class=".types.TypesListingPage"
+      permission="plone.schemaeditor.ManageSchemata" />
+
+  <browser:page
+      name="add-type"
+      for="plone.app.dexterity.interfaces.ITypesContext"
+      class=".add_type.TypeAddFormPage"
+      permission="plone.schemaeditor.ManageSchemata"
+      />
+
+  <browser:page
+      name="import-types"
+      for="plone.app.dexterity.interfaces.ITypesContext"
+      class=".import_types.TypeProfileImportFormPage"
+      permission="plone.schemaeditor.ManageSchemata"
+      />
+
+  <browser:page
+      name="overview"
+      for="plone.app.dexterity.interfaces.ITypeSchemaContext"
+      class=".overview.TypeOverviewPage"
+      permission="plone.schemaeditor.ManageSchemata" />
+
+  <browser:page
+      name="fields"
+      for="plone.app.dexterity.interfaces.ITypeSchemaContext"
+      class=".fields.TypeFieldsPage"
+      permission="plone.schemaeditor.ManageSchemata" />
+
+  <browser:page
+      name="behaviors"
+      for="plone.app.dexterity.interfaces.ITypeSchemaContext"
+      class=".behaviors.TypeBehaviorsPage"
+      permission="plone.schemaeditor.ManageSchemata" />
+
+  <browser:page
+      name="clone"
+      for="plone.app.dexterity.interfaces.ITypeSchemaContext"
+      class=".clone_type.TypeCloneFormPage"
+      permission="plone.schemaeditor.ManageSchemata" />
+
+  <browser:page
+      name="types-export"
+      for="plone.app.dexterity.interfaces.ITypesContext"
+      class=".export.TypesExport"
+      permission="plone.schemaeditor.ManageSchemata"
+      />
+
+  <browser:page
+      name="models-export"
+      for="plone.app.dexterity.interfaces.ITypesContext"
+      class=".export.ModelsExport"
+      permission="plone.schemaeditor.ManageSchemata"
+      />
+
+  <browser:resource
+      name="plone.app.dexterity.types_listing.js"
+      file="types_listing.js"
+      />
+
+  <configure zcml:condition="installed plone.resourceeditor">
     <browser:page
-        for="plone.dexterity.interfaces.IDexterityItem"
-        name="view"
-        class="plone.dexterity.browser.view.DefaultView"
-        template="item.pt"
-        permission="zope2.View"
-        />
-
-    <browser:page
-        for="plone.dexterity.interfaces.IDexterityContainer"
-        name="view"
-        class="plone.dexterity.browser.view.DefaultView"
-        template="container.pt"
-        permission="zope2.View"
-        />
-
-    <!-- warning when editing default pages -->
-    <browser:viewlet
-        name="plone.app.dexterity.defaultpagewarning"
-        view="plone.dexterity.interfaces.IDexterityEditForm"
-        template="default_page_warning.pt"
-        permission="cmf.ModifyPortalContent"
-        manager="plone.app.layout.viewlets.interfaces.IGlobalStatusMessage"
-        />
-
-    <!-- Control panel -->
-
-    <browser:page
-        name="dexterity-types"
-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"
-        class=".types.TypesContext"
-        permission="plone.schemaeditor.ManageSchemata"
-        allowed_interface="OFS.interfaces.IItem" />
-
-    <adapter
-        factory=".types.TypeSettingsAdapter"
-        provides="..interfaces.ITypeSettings"
-        for="plone.dexterity.interfaces.IDexterityFTI"
-        />
-
-    <adapter
-        factory=".types.TypeStatsAdapter"
-        provides="..interfaces.ITypeStats"
-        for="plone.dexterity.interfaces.IDexterityFTI"
-        />
-
-    <browser:page
-        name="edit"
-        for="plone.app.dexterity.interfaces.ITypesContext"
-        class=".types.TypesListingPage"
-        permission="plone.schemaeditor.ManageSchemata" />
-
-    <browser:page
-        name="add-type"
-        for="plone.app.dexterity.interfaces.ITypesContext"
-        class=".add_type.TypeAddFormPage"
+        name="modeleditor"
+        for="plone.schemaeditor.interfaces.ISchemaContext"
+        class=".modeleditor.ModelEditorView"
         permission="plone.schemaeditor.ManageSchemata"
+        template="modeleditor.pt"
         />
 
     <browser:page
-        name="import-types"
-        for="plone.app.dexterity.interfaces.ITypesContext"
-        class=".import_types.TypeProfileImportFormPage"
+        name="model-edit-save"
+        for="plone.schemaeditor.interfaces.ISchemaContext"
+        class=".modeleditor.AjaxSaveHandler"
         permission="plone.schemaeditor.ManageSchemata"
         />
 
-    <browser:page
-        name="overview"
-        for="plone.app.dexterity.interfaces.ITypeSchemaContext"
-        class=".overview.TypeOverviewPage"
-        permission="plone.schemaeditor.ManageSchemata" />
-
-    <browser:page
-        name="fields"
-        for="plone.app.dexterity.interfaces.ITypeSchemaContext"
-        class=".fields.TypeFieldsPage"
-        permission="plone.schemaeditor.ManageSchemata" />
-
-    <browser:page
-        name="behaviors"
-        for="plone.app.dexterity.interfaces.ITypeSchemaContext"
-        class=".behaviors.TypeBehaviorsPage"
-        permission="plone.schemaeditor.ManageSchemata" />
-
-    <browser:page
-        name="clone"
-        for="plone.app.dexterity.interfaces.ITypeSchemaContext"
-        class=".clone_type.TypeCloneFormPage"
-        permission="plone.schemaeditor.ManageSchemata" />
-
-    <browser:page
-        name="types-export"
-        for="plone.app.dexterity.interfaces.ITypesContext"
-        class=".export.TypesExport"
-        permission="plone.schemaeditor.ManageSchemata"
-        />
-
-    <browser:page
-        name="models-export"
-        for="plone.app.dexterity.interfaces.ITypesContext"
-        class=".export.ModelsExport"
-        permission="plone.schemaeditor.ManageSchemata"
-        />
+    <browser:resource
+      name="plone.app.dexterity.modeleditor.css"
+      file="modeleditor.css"
+      />
 
     <browser:resource
-        name="plone.app.dexterity.types_listing.js"
-        file="types_listing.js"
-        />
+      name="plone.app.dexterity.modeleditor.js"
+      file="modeleditor.js"
+      />
+  </configure>
 
-    <configure zcml:condition="installed plone.resourceeditor">
-        <browser:page
-            name="modeleditor"
-            for="plone.schemaeditor.interfaces.ISchemaContext"
-            class=".modeleditor.ModelEditorView"
-            permission="plone.schemaeditor.ManageSchemata"
-            template="modeleditor.pt"
-            />
-
-        <browser:page
-            name="model-edit-save"
-            for="plone.schemaeditor.interfaces.ISchemaContext"
-            class=".modeleditor.AjaxSaveHandler"
-            permission="plone.schemaeditor.ManageSchemata"
-            />
-
-        <browser:resource
-          name="plone.app.dexterity.modeleditor.css"
-          file="modeleditor.css"
-          />
-
-        <browser:resource
-          name="plone.app.dexterity.modeleditor.js"
-          file="modeleditor.js"
-          />
-    </configure>
 </configure>
diff --git a/plone/app/dexterity/configure.zcml b/plone/app/dexterity/configure.zcml
index e75af3f..ff27c32 100644
--- a/plone/app/dexterity/configure.zcml
+++ b/plone/app/dexterity/configure.zcml
@@ -6,67 +6,65 @@
     xmlns:i18n="http://namespaces.zope.org/i18n"
     i18n_domain="plone.app.dexterity">
 
-    <include package="plone.app.imaging"
-             zcml:condition="installed plone.app.imaging"/>
-    <include package="plone.app.vocabularies" />
-    <include package="plone.app.z3cform" />
-    <include package="plone.app.textfield" />
-    <include package="plone.app.uuid" />
-    <include package="plone.formwidget.namedfile" />
-    <include package="plone.schemaeditor" />
-    <include zcml:condition="installed plone.directives.dexterity"
-             package="plone.directives.dexterity" />
-    <include package="plone.dexterity" />
-    <include package="plone.behavior" />
+  <include package="plone.app.imaging" zcml:condition="installed plone.app.imaging"/>
+  <include package="plone.app.vocabularies" />
+  <include package="plone.app.z3cform" />
+  <include package="plone.app.textfield" />
+  <include package="plone.app.uuid" />
+  <include package="plone.formwidget.namedfile" />
+  <include package="plone.schemaeditor" />
+  <include package="plone.directives.dexterity" zcml:condition="installed plone.directives.dexterity" />
+  <include package="plone.dexterity" />
+  <include package="plone.behavior" />
 
-    <i18n:registerTranslations directory="locales"/>
+  <i18n:registerTranslations directory="locales"/>
 
-    <genericsetup:registerProfile
-        name="default"
-        title="Dexterity Content Types"
-        description="Configures various components needed for full Dexterity support."
-        directory="profiles/default"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"
-        />
+  <genericsetup:registerProfile
+      name="default"
+      title="Dexterity Content Types"
+      description="Configures various components needed for full Dexterity support."
+      directory="profiles/default"
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+      />
 
-    <genericsetup:registerProfile
-        name="testing"
-        title="Dexterity Content Types"
-        description="Adds Dexterity-based Folder and Document types for testing."
-        directory="profiles/testing"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
-        />
+  <genericsetup:registerProfile
+      name="testing"
+      title="Dexterity Content Types"
+      description="Adds Dexterity-based Folder and Document types for testing."
+      directory="profiles/testing"
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+      />
 
-    <include package=".browser" />
-    <include package=".behaviors" />
-    <include package=".upgrades" />
+  <include package=".browser" />
+  <include package=".behaviors" />
+  <include package=".upgrades" />
 
-    <include file="events.zcml" />
+  <include file="events.zcml" />
 
-    <class class="plone.dexterity.content.DexterityContent">
-        <!-- Make Dexterity types portlet- and content rule aware -->
-        <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
-        <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />
-        <!-- Make it possible to traverse to image scales on Dexterity content -->
-        <implements interface="plone.namedfile.interfaces.IImageScaleTraversable" />
-    </class>
+  <class class="plone.dexterity.content.DexterityContent">
+    <!-- Make Dexterity types portlet- and content rule aware -->
+    <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
+    <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />
+    <!-- Make it possible to traverse to image scales on Dexterity content -->
+    <implements interface="plone.namedfile.interfaces.IImageScaleTraversable" />
+  </class>
 
-    <!-- Register GS exporter for DexterityFTI type -->
-    <adapter
-        factory="Products.CMFCore.exportimport.typeinfo.TypeInformationXMLAdapter"
-        for="plone.dexterity.interfaces.IDexterityFTI
-             Products.GenericSetup.interfaces.ISetupEnviron"
-        />
+  <!-- Register GS exporter for DexterityFTI type -->
+  <adapter
+      factory="Products.CMFCore.exportimport.typeinfo.TypeInformationXMLAdapter"
+      for="plone.dexterity.interfaces.IDexterityFTI
+           Products.GenericSetup.interfaces.ISetupEnviron"
+      />
 
-    <adapter factory=".interfaces.TypeIdValidator" />
-    <adapter factory=".interfaces.TypeTitleValidator" />
+  <adapter factory=".interfaces.TypeIdValidator" />
+  <adapter factory=".interfaces.TypeTitleValidator" />
 
-    <adapter factory=".factories.DXFileFactory" />
-    <adapter factory=".permissions.DXFieldPermissionChecker" />
-    <adapter factory=".permissions.DXAddViewFieldPermissionChecker" />
-    <adapter factory=".permissions.DXAddViewFieldPermissionChecker"
-             for="plone.z3cform.interfaces.IFormWrapper" />
+  <adapter factory=".factories.DXFileFactory" />
+  <adapter factory=".permissions.DXFieldPermissionChecker" />
+  <adapter factory=".permissions.DXAddViewFieldPermissionChecker" />
+  <adapter factory=".permissions.DXAddViewFieldPermissionChecker"
+           for="plone.z3cform.interfaces.IFormWrapper" />
 
 </configure>
diff --git a/plone/app/dexterity/events.zcml b/plone/app/dexterity/events.zcml
index ed5d085..bb43e19 100644
--- a/plone/app/dexterity/events.zcml
+++ b/plone/app/dexterity/events.zcml
@@ -2,17 +2,17 @@
     xmlns="http://namespaces.zope.org/zope"
     i18n_domain="plone.app.dexterity">
 
-    <!-- Register schema/field modify handlers -->
-    <subscriber
-        for="plone.app.dexterity.interfaces.ITypeSchemaContext
-             plone.schemaeditor.interfaces.ISchemaModifiedEvent"
-        handler=".serialize.serializeSchemaContext"
-        />
+  <!-- Register schema/field modify handlers -->
+  <subscriber
+      for="plone.app.dexterity.interfaces.ITypeSchemaContext
+           plone.schemaeditor.interfaces.ISchemaModifiedEvent"
+      handler=".serialize.serializeSchemaContext"
+      />
 
-    <subscriber
-        for=".browser.behaviors.BehaviorConfigurationAdapter
-             zope.lifecycleevent.IObjectModifiedEvent"
-        handler=".browser.behaviors.behaviorConfigurationModified"
-        />
+  <subscriber
+      for=".browser.behaviors.BehaviorConfigurationAdapter
+           zope.lifecycleevent.IObjectModifiedEvent"
+      handler=".browser.behaviors.behaviorConfigurationModified"
+      />
 
 </configure>
diff --git a/plone/app/dexterity/overrides.zcml b/plone/app/dexterity/overrides.zcml
index 4cfd770..6cbcc13 100644
--- a/plone/app/dexterity/overrides.zcml
+++ b/plone/app/dexterity/overrides.zcml
@@ -3,6 +3,6 @@
     xmlns:browser="http://namespaces.zope.org/browser"
     xmlns:zcml="http://namespaces.zope.org/zcml">
 
-    <includeOverrides package="plone.app.z3cform" file="overrides.zcml" />
+  <includeOverrides package="plone.app.z3cform" file="overrides.zcml" />
 
-</configure>
\ No newline at end of file
+</configure>
diff --git a/plone/app/dexterity/profiles/default/actions.xml b/plone/app/dexterity/profiles/default/actions.xml
index 2d3dc98..8da9e2b 100644
--- a/plone/app/dexterity/profiles/default/actions.xml
+++ b/plone/app/dexterity/profiles/default/actions.xml
@@ -1,22 +1,18 @@
 <?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="controlpanel" meta_type="CMF Action Category">
-  <object name="controlpanel_addons" meta_type="CMF Action Category">
-
-   <object name="dexterity-types" meta_type="CMF Action" i18n:domain="plone.app.dexterity">
-    <property name="title" i18n:translate="">Dexterity Content Types</property>
-    <property name="description" i18n:translate=""></property>
-    <property name="url_expr">string:${portal_url}/@@dexterity-types</property>
-    <property name="icon_expr"></property>
-    <property name="available_expr"></property>
-    <property name="permissions">
-     <element value="Manage portal"/>
-    </property>
-    <property name="visible">True</property>
-   </object>
-
+<object name="portal_actions" meta_type="Plone Actions Tool" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+  <object name="controlpanel" meta_type="CMF Action Category">
+    <object name="controlpanel_addons" meta_type="CMF Action Category">
+      <object name="dexterity-types" meta_type="CMF Action" i18n:domain="plone.app.dexterity">
+        <property name="title" i18n:translate="">Dexterity Content Types</property>
+        <property name="description" i18n:translate=""></property>
+        <property name="url_expr">string:${portal_url}/@@dexterity-types</property>
+        <property name="icon_expr"></property>
+        <property name="available_expr"></property>
+        <property name="permissions">
+          <element value="Manage portal" />
+        </property>
+        <property name="visible">True</property>
+      </object>
+    </object>
   </object>
- </object>
 </object>
diff --git a/plone/app/dexterity/profiles/default/controlpanel.xml b/plone/app/dexterity/profiles/default/controlpanel.xml
index 7325032..d7460b0 100644
--- a/plone/app/dexterity/profiles/default/controlpanel.xml
+++ b/plone/app/dexterity/profiles/default/controlpanel.xml
@@ -1,10 +1,15 @@
 <?xml version="1.0"?>
 <object name="portal_controlpanel" xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone.app.dexterity" purge="False">
- <configlet title="Dexterity Content Types" action_id="dexterity-types" appId="Plone"
-    category="Plone" condition_expr=""
-    icon_expr="string:$portal_url/document_icon.png"
-    url_expr="string:${portal_url}/@@dexterity-types" visible="True"
-    i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
+  <configlet
+      action_id="dexterity-types"
+      appId="Plone"
+      category="Plone"
+      condition_expr=""
+      icon_expr="string:$portal_url/document_icon.png"
+      title="Dexterity Content Types"
+      url_expr="string:${portal_url}/@@dexterity-types"
+      visible="True"
+      i18n:attributes="title">
+    <permission>Manage portal</permission>
+  </configlet>
 </object>
diff --git a/plone/app/dexterity/profiles/testing/types.xml b/plone/app/dexterity/profiles/testing/types.xml
index b0e4759..624b95b 100644
--- a/plone/app/dexterity/profiles/testing/types.xml
+++ b/plone/app/dexterity/profiles/testing/types.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <object meta_type="Plone Types Tool" name="portal_types">
- <object name="Document" remove="true" />
- <object meta_type="Dexterity FTI" name="Document" />
- <object name="Folder" remove="true" />
- <object meta_type="Dexterity FTI" name="Folder" />
+  <object name="Document" remove="true" />
+  <object meta_type="Dexterity FTI" name="Document" />
+  <object name="Folder" remove="true" />
+  <object meta_type="Dexterity FTI" name="Folder" />
 </object>
diff --git a/plone/app/dexterity/profiles/testing/types/Document.xml b/plone/app/dexterity/profiles/testing/types/Document.xml
index 5060051..17174d7 100644
--- a/plone/app/dexterity/profiles/testing/types/Document.xml
+++ b/plone/app/dexterity/profiles/testing/types/Document.xml
@@ -1,43 +1,42 @@
 <?xml version="1.0"?>
-<object name="Document" meta_type="Dexterity FTI" i18n:domain="plone"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <property name="title" i18n:translate="">Page</property>
- <property name="description" i18n:translate=""></property>
- <property name="icon_expr"></property>
- <property name="factory">Document</property>
- <property name="add_view_expr">string:${folder_url}/++add++Document</property>
- <property name="link_target"></property>
- <property name="global_allow">True</property>
- <property name="filter_content_types">True</property>
- <property name="allowed_content_types"/>
- <property name="allow_discussion">False</property>
- <property name="default_view">view</property>
- <property name="immediate_view"></property>
- <property name="view_methods">
-  <element value="view"/>
- </property>
- <property name="default_view_fallback">False</property>
- <property name="add_permission">cmf.AddPortalContent</property>
- <property name="klass">plone.dexterity.content.Item</property>
- <property name="behaviors">
-  <element value="plone.app.content.interfaces.INameFromTitle"/>
-  <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion"/>
-  <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"/>
-  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>
- </property>
- <property name="schema">zope.interface.Interface</property>
- <alias from="(Default)" to="(dynamic view)"/>
- <alias from="edit" to="@@edit"/>
- <alias from="sharing" to="@@sharing"/>
- <alias from="view" to="(selected layout)"/>
- <action title="View" action_id="view" category="object" condition_expr=""
-    icon_expr="" link_target="" url_expr="string:${object_url}"
-    visible="True" i18n:attributes="title">
-  <permission value="View"/>
- </action>
- <action title="Edit" action_id="edit" category="object" condition_expr=""
-    icon_expr="" link_target="" url_expr="string:${object_url}/edit"
-    visible="True" i18n:attributes="title">
-  <permission value="Modify portal content"/>
- </action>
+<object name="Document" meta_type="Dexterity FTI" i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+  <property name="title" i18n:translate="">Page</property>
+  <property name="description" i18n:translate=""></property>
+  <property name="icon_expr"></property>
+  <property name="factory">Document</property>
+  <property name="add_view_expr">string:${folder_url}/++add++Document</property>
+  <property name="link_target"></property>
+  <property name="global_allow">True</property>
+  <property name="filter_content_types">True</property>
+  <property name="allowed_content_types" />
+  <property name="allow_discussion">False</property>
+  <property name="default_view">view</property>
+  <property name="immediate_view"></property>
+  <property name="view_methods">
+    <element value="view" />
+  </property>
+  <property name="default_view_fallback">False</property>
+  <property name="add_permission">cmf.AddPortalContent</property>
+  <property name="klass">plone.dexterity.content.Item</property>
+  <property name="behaviors">
+    <element value="plone.app.content.interfaces.INameFromTitle" />
+    <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion" />
+    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation" />
+    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />
+  </property>
+  <property name="schema">zope.interface.Interface</property>
+  <alias from="(Default)" to="(dynamic view)" />
+  <alias from="edit" to="@@edit" />
+  <alias from="sharing" to="@@sharing" />
+  <alias from="view" to="(selected layout)" />
+  <action title="View" action_id="view" category="object" condition_expr=""
+      icon_expr="" link_target="" url_expr="string:${object_url}"
+      visible="True" i18n:attributes="title">
+    <permission value="View" />
+  </action>
+  <action title="Edit" action_id="edit" category="object" condition_expr=""
+      icon_expr="" link_target="" url_expr="string:${object_url}/edit"
+      visible="True" i18n:attributes="title">
+    <permission value="Modify portal content" />
+  </action>
 </object>
diff --git a/plone/app/dexterity/profiles/testing/types/Folder.xml b/plone/app/dexterity/profiles/testing/types/Folder.xml
index e8bb9de..dcd26ba 100644
--- a/plone/app/dexterity/profiles/testing/types/Folder.xml
+++ b/plone/app/dexterity/profiles/testing/types/Folder.xml
@@ -1,50 +1,48 @@
 <?xml version="1.0"?>
-<object name="Folder" meta_type="Dexterity FTI" i18n:domain="plone"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <property name="title" i18n:translate="">Folder</property>
- <property name="description" i18n:translate=""></property>
- <property name="icon_expr"></property>
- <property name="factory">Folder</property>
- <property name="add_view_expr">string:${folder_url}/++add++Folder</property>
- <property name="link_target"></property>
- <property name="immediate_view">view</property>
- <property name="global_allow">True</property>
- <property name="filter_content_types">False</property>
- <property name="allowed_content_types"/>
- <property name="allow_discussion">False</property>
- <property name="default_view">folder_listing</property>
- <property name="view_methods">
-  <element value="folder_summary_view"/>
-  <element value="folder_full_view"/>
-  <element value="folder_tabular_view"/>
-  <element value="atct_album_view"/>
-  <element value="folder_listing"/>
- </property>
- <property name="default_view_fallback">False</property>
- <property name="add_permission">cmf.AddPortalContent</property>
- <property name="klass">plone.dexterity.content.Container</property>
- <property name="behaviors">
-  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>
-  <element value="plone.app.content.interfaces.INameFromTitle"/>
-  <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion"/>
-  <element
-     value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"/>
-  <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"/>
-  <element value="plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle"/>
- </property>
- <property name="schema">zope.interface.Interface</property>
- <alias from="(Default)" to="(dynamic view)"/>
- <alias from="edit" to="@@edit"/>
- <alias from="sharing" to="@@sharing"/>
- <alias from="view" to="(selected layout)"/>
- <action title="View" action_id="view" category="object" condition_expr=""
-    icon_expr="" link_target="" url_expr="string:${object_url}"
-    visible="True" i18n:attributes="title">
-  <permission value="View"/>
- </action>
- <action title="Edit" action_id="edit" category="object" condition_expr=""
-    icon_expr="" link_target="" url_expr="string:${object_url}/edit"
-    visible="True" i18n:attributes="title">
-  <permission value="Modify portal content"/>
- </action>
+<object name="Folder" meta_type="Dexterity FTI" i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
+  <property name="title" i18n:translate="">Folder</property>
+  <property name="description" i18n:translate=""></property>
+  <property name="icon_expr"></property>
+  <property name="factory">Folder</property>
+  <property name="add_view_expr">string:${folder_url}/++add++Folder</property>
+  <property name="link_target"></property>
+  <property name="immediate_view">view</property>
+  <property name="global_allow">True</property>
+  <property name="filter_content_types">False</property>
+  <property name="allowed_content_types" />
+  <property name="allow_discussion">False</property>
+  <property name="default_view">folder_listing</property>
+  <property name="view_methods">
+    <element value="folder_summary_view" />
+    <element value="folder_full_view" />
+    <element value="folder_tabular_view" />
+    <element value="atct_album_view" />
+    <element value="folder_listing" />
+  </property>
+  <property name="default_view_fallback">False</property>
+  <property name="add_permission">cmf.AddPortalContent</property>
+  <property name="klass">plone.dexterity.content.Container</property>
+  <property name="behaviors">
+    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />
+    <element value="plone.app.content.interfaces.INameFromTitle" />
+    <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion" />
+    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation" />
+    <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes" />
+    <element value="plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle" />
+  </property>
+  <property name="schema">zope.interface.Interface</property>
+  <alias from="(Default)" to="(dynamic view)" />
+  <alias from="edit" to="@@edit" />
+  <alias from="sharing" to="@@sharing" />
+  <alias from="view" to="(selected layout)" />
+  <action title="View" action_id="view" category="object" condition_expr=""
+      icon_expr="" link_target="" url_expr="string:${object_url}"
+      visible="True" i18n:attributes="title">
+    <permission value="View" />
+  </action>
+  <action title="Edit" action_id="edit" category="object" condition_expr=""
+      icon_expr="" link_target="" url_expr="string:${object_url}/edit"
+      visible="True" i18n:attributes="title">
+    <permission value="Modify portal content" />
+  </action>
 </object>
diff --git a/plone/app/dexterity/upgrades/configure.zcml b/plone/app/dexterity/upgrades/configure.zcml
index e79a73b..cb80d4b 100644
--- a/plone/app/dexterity/upgrades/configure.zcml
+++ b/plone/app/dexterity/upgrades/configure.zcml
@@ -3,61 +3,61 @@
     xmlns:genericsetup="http://namespaces.zope.org/genericsetup">
 
   <genericsetup:upgradeStep
-    source="0.1"
-    destination="1"
-    title="Install plone.app.z3cform browser layer"
-    profile="plone.app.dexterity:default"
-    handler=".to1.install_z3cform_profile"
-    />
+      source="0.1"
+      destination="1"
+      title="Install plone.app.z3cform browser layer"
+      profile="plone.app.dexterity:default"
+      handler=".to1.install_z3cform_profile"
+      />
 
   <genericsetup:upgradeStep
-    source="1"
-    destination="5"
-    title="Unregister schemaeditor.css"
-    profile="plone.app.dexterity:default"
-    handler=".to2.remove_stylesheet"
-    />
+      source="1"
+      destination="5"
+      title="Unregister schemaeditor.css"
+      profile="plone.app.dexterity:default"
+      handler=".to2.remove_stylesheet"
+      />
 
   <!-- Dexterity 2.0 -->
 
   <genericsetup:upgradeStep
-    source="5"
-    destination="2000"
-    title="Remove overlays.css from CSS registry"
-    profile="plone.app.dexterity:default"
-    handler=".to2000.remove_overlays_css"
-    />
+      source="5"
+      destination="2000"
+      title="Remove overlays.css from CSS registry"
+      profile="plone.app.dexterity:default"
+      handler=".to2000.remove_overlays_css"
+      />
 
   <genericsetup:upgradeStep
-    source="2000"
-    destination="2001"
-    title="Add missing UUIDs to Dexterity content"
-    profile="plone.app.dexterity:default"
-    handler=".to2001.add_missing_uuids"
-    />
+      source="2000"
+      destination="2001"
+      title="Add missing UUIDs to Dexterity content"
+      profile="plone.app.dexterity:default"
+      handler=".to2001.add_missing_uuids"
+      />
 
   <genericsetup:upgradeStep
-    source="2000"
-    destination="2002"
-    title="Install JQuery Tools date picker resources"
-    profile="plone.app.dexterity:default"
-    handler=".to2002.install_datepicker_profile"
-    />
+      source="2000"
+      destination="2002"
+      title="Install JQuery Tools date picker resources"
+      profile="plone.app.dexterity:default"
+      handler=".to2002.install_datepicker_profile"
+      />
 
   <genericsetup:upgradeStep
-    source="2002"
-    destination="2003"
-    title="Make sure uninstalling products won't destroy the intid catalog"
-    profile="plone.app.dexterity:default"
-    handler=".to2003.fix_installed_products"
-    />
+      source="2002"
+      destination="2003"
+      title="Make sure uninstalling products won't destroy the intid catalog"
+      profile="plone.app.dexterity:default"
+      handler=".to2003.fix_installed_products"
+      />
 
   <genericsetup:upgradeStep
-    source="2003"
-    destination="2004"
-    title="Remove line feeds and carrige returns from the description"
-    profile="plone.app.dexterity:default"
-    handler=".to2004.remove_cr_and_lf_description"
-    />
+      source="2003"
+      destination="2004"
+      title="Remove line feeds and carrige returns from the description"
+      profile="plone.app.dexterity:default"
+      handler=".to2004.remove_cr_and_lf_description"
+      />
 
 </configure>


