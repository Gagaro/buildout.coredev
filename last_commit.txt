Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-12T02:15:10-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1e441aed21a31fd6adfab9a03ec83f7e81c85f8c

Fix issue where some filter settings would not get saved

Files changed:
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/filter.py
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 03458f1..67f46f5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0rc3 (unreleased)
 -------------------
 
+- Fix issue where some filter settings would not get saved and provide
+  correct defaults
+  [vangheem]
+
 - Better default tinymce settings
   [vangheem]
 
diff --git a/Products/CMFPlone/controlpanel/browser/filter.py b/Products/CMFPlone/controlpanel/browser/filter.py
index dbbad9e..c639c5b 100644
--- a/Products/CMFPlone/controlpanel/browser/filter.py
+++ b/Products/CMFPlone/controlpanel/browser/filter.py
@@ -8,40 +8,23 @@
 from plone.z3cform import layout
 from z3c.form import button
 from z3c.form import form
+from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
+from Products.PortalTransforms.transforms.safe_html import NASTY_TAGS
 
 
 class FilterControlPanel(AutoExtensibleForm, form.EditForm):
     id = "FilterControlPanel"
     label = _(u"HTML Filtering Settings")
-    description = ""
+    description = _(
+        'description_html_filtering',
+        default=u"HTML generation is heavily cached across Plone. "
+                u"After changing settings here, you may have to edit "
+                u"existing content to see the changes in these filter settings "
+                u"or restart your server.")
     schema = IFilterSchema
     form_name = _(u"HTML Filtering Settings")
     control_panel_view = "filter-controlpanel"
 
-    def _settransform(self, **kwargs):
-        # Cannot pass a dict to set transform parameters, it has
-        # to be separate keys and values
-        # Also the transform requires all dictionary values to be set
-        # at the same time: other values may be present but are not
-        # required.
-        safe_html = getattr(
-            getToolByName(self.context, 'portal_transforms'),
-            'safe_html',
-            None)
-        for k in ('valid_tags', 'nasty_tags'):
-            if k not in kwargs:
-                kwargs[k] = safe_html.get_parameter_value(k)
-
-        for k in list(kwargs):
-            if isinstance(kwargs[k], dict):
-                v = kwargs[k]
-                kwargs[k + '_key'] = v.keys()
-                kwargs[k + '_value'] = [str(s) for s in v.values()]
-                del kwargs[k]
-        safe_html.set_parameters(**kwargs)
-        safe_html._p_changed = True
-        safe_html.reload()
-
     def updateActions(self):  # NOQA
         """Have to override this because we only have Save, not Cancel
         """
@@ -51,6 +34,10 @@ def updateActions(self):  # NOQA
     @button.buttonAndHandler(_(u"Save"), name='save')
     def handleSave(self, action):  # NOQA
         data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+
         # Save in portal tools
         safe_html = getattr(
             getToolByName(self.context, 'portal_transforms'),
@@ -58,30 +45,49 @@ def handleSave(self, action):  # NOQA
             None)
 
         nasty_tags = data['nasty_tags']
-        if sorted(nasty_tags) != \
-                sorted(safe_html._config['nasty_tags'].keys()):
-            values = dict.fromkeys(nasty_tags, 1)
-            valid = safe_html.get_parameter_value('valid_tags')
-            for value in values:
-                if value in valid:
-                    del valid[value]
-            self._settransform(nasty_tags=values, valid_tags=valid)
+        custom_tags = data['custom_tags']
+        stripped_tags = data['stripped_tags']
+
+        valid = safe_html._config['valid_tags']
+
+        # start with removing tags that do not belong in valid tags
+        for value in nasty_tags + stripped_tags:
+            if value in valid:
+                del valid[value]
+        # add in custom tags
+        for custom in custom_tags:
+            if value not in valid:
+                valid[custom] = 1
+        # then, check if something was previously prevented but is no longer
+        for tag in set(VALID_TAGS.keys()) - set(valid.keys()):
+            if tag not in nasty_tags and tag not in stripped_tags:
+                valid[tag] = VALID_TAGS[tag]
+
+        # nasty tags are simple, just set the value here
+        nasty_value = {}
+        for tag in nasty_tags:
+            nasty_value[tag] = NASTY_TAGS.get(tag, VALID_TAGS.get(tag, 1))
+        safe_html._config['nasty_tags'] = nasty_value
 
         disable_filtering = int(data['disable_filtering'])
         if disable_filtering != safe_html._config['disable_transform']:
             safe_html._config['disable_transform'] = disable_filtering
-            safe_html._p_changed = True
-            safe_html.reload()
 
-        stripped_combinations = data['stripped_combinations']
-        if stripped_combinations != safe_html._config['stripped_combinations']:
-            safe_html._config['stripped_combinations'] = stripped_combinations
-            safe_html._p_changed = True
-            safe_html.reload()
+        for attr in ('stripped_combinations', 'class_blacklist', 'stripped_attributes',
+                     'style_whitelist'):
+            value = data[attr]
+            if value is None:
+                if attr == 'stripped_combinations':
+                    value = {}
+                else:
+                    value = []
+            if value != safe_html._config[attr]:
+                safe_html._config[attr] = value
+
+        # always reload the transform
+        safe_html._p_changed = True
+        safe_html.reload()
 
-        if errors:
-            self.status = self.formErrorsMessage
-            return
         self.applyChanges(data)
         IStatusMessage(self.request).addStatusMessage(
             _(u"Changes saved."),
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 1336fae..fd0da25 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -334,8 +334,9 @@ class IFilterSchema(Interface):
         title=_(u'Nasty tags'),
         description=_(u"These tags, and their content are completely blocked "
                       "when a page is saved or rendered."),
-        default=[u'applet', u'embed', u'object', u'script'],
+        default=[u'style', u'applet', u'script', u'meta'],
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     stripped_tags = schema.List(
@@ -344,6 +345,7 @@ class IFilterSchema(Interface):
                       "but any content is preserved."),
         default=[u'font', ],
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     custom_tags = schema.List(
@@ -352,6 +354,7 @@ class IFilterSchema(Interface):
                       "XHTML but which should be permitted."),
         default=[],
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     # class IFilterAttributesSchema(Interface):
@@ -363,6 +366,7 @@ class IFilterSchema(Interface):
         default=(u'dir lang valign halign border frame rules cellspacing '
                  'cellpadding bgcolor').split(),
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     stripped_combinations = schema.Dict(
@@ -371,9 +375,8 @@ class IFilterSchema(Interface):
                       "saving."),
         key_type=schema.TextLine(title=u"tags"),
         value_type=schema.TextLine(title=u"attributes"),
-        default={},
-        # XXX replace with value adapter
-        # default={'table th td': 'width height', 'other tags': 'other attrs'}
+        default={'table th td': 'width height'},
+        missing_value={},
         required=False)
 
     # class IFilterEditorSchema(Interface):
@@ -382,8 +385,9 @@ class IFilterSchema(Interface):
         title=_(u'Permitted properties'),
         description=_(
             u'These CSS properties are allowed in style attributes.'),
-        default=u'text-align list-style-type float text-decoration'.split(),
+        default=u'text-align list-style-type float padding-left text-decoration'.split(),
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     class_blacklist = schema.List(
@@ -391,6 +395,7 @@ class IFilterSchema(Interface):
         description=_(u'These class names are not allowed in class '
                       'attributes.'),
         default=[],
+        missing_value=[],
         value_type=schema.TextLine(),
         required=False)
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-12T02:24:34-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3fd6ddcbe4cd9ab2d3c60b2d13606204202672ba

add back object and embed as default nasty tags, tinymce uses video tags where it can and iframes. Users can still specially enable these I think

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index fd0da25..e76ca94 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -334,7 +334,7 @@ class IFilterSchema(Interface):
         title=_(u'Nasty tags'),
         description=_(u"These tags, and their content are completely blocked "
                       "when a page is saved or rendered."),
-        default=[u'style', u'applet', u'script', u'meta'],
+        default=[u'style', u'object', u'embed', u'applet', u'script', u'meta'],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-09-12T07:44:21-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3f82a5f7b1723d09fa32b530b005c695bf341575

Merge pull request #967 from plone/fix-filter-settings

Fix issue where some filter settings would not get saved

Files changed:
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/filter.py
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 03458f1..67f46f5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0rc3 (unreleased)
 -------------------
 
+- Fix issue where some filter settings would not get saved and provide
+  correct defaults
+  [vangheem]
+
 - Better default tinymce settings
   [vangheem]
 
diff --git a/Products/CMFPlone/controlpanel/browser/filter.py b/Products/CMFPlone/controlpanel/browser/filter.py
index dbbad9e..c639c5b 100644
--- a/Products/CMFPlone/controlpanel/browser/filter.py
+++ b/Products/CMFPlone/controlpanel/browser/filter.py
@@ -8,40 +8,23 @@
 from plone.z3cform import layout
 from z3c.form import button
 from z3c.form import form
+from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
+from Products.PortalTransforms.transforms.safe_html import NASTY_TAGS
 
 
 class FilterControlPanel(AutoExtensibleForm, form.EditForm):
     id = "FilterControlPanel"
     label = _(u"HTML Filtering Settings")
-    description = ""
+    description = _(
+        'description_html_filtering',
+        default=u"HTML generation is heavily cached across Plone. "
+                u"After changing settings here, you may have to edit "
+                u"existing content to see the changes in these filter settings "
+                u"or restart your server.")
     schema = IFilterSchema
     form_name = _(u"HTML Filtering Settings")
     control_panel_view = "filter-controlpanel"
 
-    def _settransform(self, **kwargs):
-        # Cannot pass a dict to set transform parameters, it has
-        # to be separate keys and values
-        # Also the transform requires all dictionary values to be set
-        # at the same time: other values may be present but are not
-        # required.
-        safe_html = getattr(
-            getToolByName(self.context, 'portal_transforms'),
-            'safe_html',
-            None)
-        for k in ('valid_tags', 'nasty_tags'):
-            if k not in kwargs:
-                kwargs[k] = safe_html.get_parameter_value(k)
-
-        for k in list(kwargs):
-            if isinstance(kwargs[k], dict):
-                v = kwargs[k]
-                kwargs[k + '_key'] = v.keys()
-                kwargs[k + '_value'] = [str(s) for s in v.values()]
-                del kwargs[k]
-        safe_html.set_parameters(**kwargs)
-        safe_html._p_changed = True
-        safe_html.reload()
-
     def updateActions(self):  # NOQA
         """Have to override this because we only have Save, not Cancel
         """
@@ -51,6 +34,10 @@ def updateActions(self):  # NOQA
     @button.buttonAndHandler(_(u"Save"), name='save')
     def handleSave(self, action):  # NOQA
         data, errors = self.extractData()
+        if errors:
+            self.status = self.formErrorsMessage
+            return
+
         # Save in portal tools
         safe_html = getattr(
             getToolByName(self.context, 'portal_transforms'),
@@ -58,30 +45,49 @@ def handleSave(self, action):  # NOQA
             None)
 
         nasty_tags = data['nasty_tags']
-        if sorted(nasty_tags) != \
-                sorted(safe_html._config['nasty_tags'].keys()):
-            values = dict.fromkeys(nasty_tags, 1)
-            valid = safe_html.get_parameter_value('valid_tags')
-            for value in values:
-                if value in valid:
-                    del valid[value]
-            self._settransform(nasty_tags=values, valid_tags=valid)
+        custom_tags = data['custom_tags']
+        stripped_tags = data['stripped_tags']
+
+        valid = safe_html._config['valid_tags']
+
+        # start with removing tags that do not belong in valid tags
+        for value in nasty_tags + stripped_tags:
+            if value in valid:
+                del valid[value]
+        # add in custom tags
+        for custom in custom_tags:
+            if value not in valid:
+                valid[custom] = 1
+        # then, check if something was previously prevented but is no longer
+        for tag in set(VALID_TAGS.keys()) - set(valid.keys()):
+            if tag not in nasty_tags and tag not in stripped_tags:
+                valid[tag] = VALID_TAGS[tag]
+
+        # nasty tags are simple, just set the value here
+        nasty_value = {}
+        for tag in nasty_tags:
+            nasty_value[tag] = NASTY_TAGS.get(tag, VALID_TAGS.get(tag, 1))
+        safe_html._config['nasty_tags'] = nasty_value
 
         disable_filtering = int(data['disable_filtering'])
         if disable_filtering != safe_html._config['disable_transform']:
             safe_html._config['disable_transform'] = disable_filtering
-            safe_html._p_changed = True
-            safe_html.reload()
 
-        stripped_combinations = data['stripped_combinations']
-        if stripped_combinations != safe_html._config['stripped_combinations']:
-            safe_html._config['stripped_combinations'] = stripped_combinations
-            safe_html._p_changed = True
-            safe_html.reload()
+        for attr in ('stripped_combinations', 'class_blacklist', 'stripped_attributes',
+                     'style_whitelist'):
+            value = data[attr]
+            if value is None:
+                if attr == 'stripped_combinations':
+                    value = {}
+                else:
+                    value = []
+            if value != safe_html._config[attr]:
+                safe_html._config[attr] = value
+
+        # always reload the transform
+        safe_html._p_changed = True
+        safe_html.reload()
 
-        if errors:
-            self.status = self.formErrorsMessage
-            return
         self.applyChanges(data)
         IStatusMessage(self.request).addStatusMessage(
             _(u"Changes saved."),
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 0b4d811..4ea01fa 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -334,8 +334,9 @@ class IFilterSchema(Interface):
         title=_(u'Nasty tags'),
         description=_(u"These tags, and their content are completely blocked "
                       "when a page is saved or rendered."),
-        default=[u'applet', u'embed', u'object', u'script'],
+        default=[u'style', u'object', u'embed', u'applet', u'script', u'meta'],
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     stripped_tags = schema.List(
@@ -344,6 +345,7 @@ class IFilterSchema(Interface):
                       "but any content is preserved."),
         default=[u'font', ],
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     custom_tags = schema.List(
@@ -352,6 +354,7 @@ class IFilterSchema(Interface):
                       "XHTML but which should be permitted."),
         default=[],
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     # class IFilterAttributesSchema(Interface):
@@ -363,6 +366,7 @@ class IFilterSchema(Interface):
         default=(u'dir lang valign halign border frame rules cellspacing '
                  'cellpadding bgcolor').split(),
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     stripped_combinations = schema.Dict(
@@ -371,9 +375,8 @@ class IFilterSchema(Interface):
                       "saving."),
         key_type=schema.TextLine(title=u"tags"),
         value_type=schema.TextLine(title=u"attributes"),
-        default={},
-        # XXX replace with value adapter
-        # default={'table th td': 'width height', 'other tags': 'other attrs'}
+        default={'table th td': 'width height'},
+        missing_value={},
         required=False)
 
     # class IFilterEditorSchema(Interface):
@@ -382,8 +385,9 @@ class IFilterSchema(Interface):
         title=_(u'Permitted properties'),
         description=_(
             u'These CSS properties are allowed in style attributes.'),
-        default=u'text-align list-style-type float text-decoration'.split(),
+        default=u'text-align list-style-type float padding-left text-decoration'.split(),
         value_type=schema.TextLine(),
+        missing_value=[],
         required=False)
 
     class_blacklist = schema.List(
@@ -391,6 +395,7 @@ class IFilterSchema(Interface):
         description=_(u'These class names are not allowed in class '
                       'attributes.'),
         default=[],
+        missing_value=[],
         value_type=schema.TextLine(),
         required=False)
 


