Repository: plone.browserlayer
Branch: refs/heads/master
Date: 2015-03-23T22:33:59+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.browserlayer/commit/093e18d073848539e56d84dbffa4d73a9d502b21

Rename files from txt to rst

Files changed:
A CHANGES.rst
A README.rst
A plone/browserlayer/README.rst
M plone/browserlayer/tests/test_doctest.py
M setup.py
D CHANGES.txt
D README.txt
D plone/browserlayer/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..cd70a4b
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,114 @@
+Changelog
+=========
+
+2.1.4 (unreleased)
+------------------
+
+- Move tests to plone.app.testing.
+  [sdelcourt,timo]
+
+
+2.1.3 (2014-02-25)
+------------------
+
+- Fix tests with diazo.
+  [davisagli]
+
+
+2.1.2 (2012-10-03)
+------------------
+
+- Add support for calling many times remove in export (ie:even when no corresponding layer is registred, remove option should not throw exception).
+  [toutpt]
+
+2.1.1 (2011-11-24)
+------------------
+
+- Added uninstall support to browserlayer.xml with the 'remove' option.
+  [maurits]
+
+- GS export xml is now repeatable. Before two consecutive exports could
+  yield differently ordered results.
+  [do3cc]
+
+
+2.1 - 2011-05-12
+----------------
+
+- Update import of BeforeTraverseEvent to come from zope.traversing instead
+  of zope.app.publication.
+  [davisagli]
+
+- Add MANIFEST.in
+  [WouterVH]
+
+
+2.0.1 - 2010-09-21
+------------------
+
+- Make sure the layers don't get applied twice if the site is traversed more
+  than once (such as in a vhosting URL).
+  [davisagli]
+
+
+2.0 - 2010-07-18
+----------------
+
+- Update license to GPL version 2 only.
+  [hannosch]
+
+- Package metadata cleanup, require Zope2 distribution.
+  [hannosch]
+
+
+1.0.1 - 2009-09-09
+------------------
+
+- Be more robust against broken layer registrations. These can occur when
+  packages with registered layers are removed.
+  [wichert]
+
+- Clarified license and copyright.
+  [hannosch]
+
+- Register ourselves for the more generic ISiteRoot from CMFCore and not
+  IPloneSiteRoot.
+  [hannosch]
+
+- Declare test dependencies in an extra.
+  [hannosch]
+
+- Specify package dependencies.
+  [hannosch]
+
+
+1.0.0 - 2008-04-20
+------------------
+
+- Unchanged from 1.0rc4
+
+
+1.0rc4 - 2008-04-13
+-------------------
+
+- Register the GenericSetup import and export steps using zcml. This means you
+  will no longer need to install this package manually.
+  [wichert]
+
+
+1.0rc3 - 2008-03-09
+-------------------
+
+- Include README.txt and HISTORY.txt in the package's long description.
+  [wichert]
+
+- Add metadata.xml to the GenericSetup profile. This fixes a deprecation
+  warning for Plone 3.1 and later.
+  [wichert]
+
+
+1.0b1 - 2007-09-23
+------------------
+
+- Initial package structure.
+  [zopeskel]
diff --git a/CHANGES.txt b/CHANGES.txt
deleted file mode 100644
index cd70a4b..0000000
--- a/CHANGES.txt
+++ /dev/null
@@ -1,114 +0,0 @@
-Changelog
-=========
-
-2.1.4 (unreleased)
-------------------
-
-- Move tests to plone.app.testing.
-  [sdelcourt,timo]
-
-
-2.1.3 (2014-02-25)
-------------------
-
-- Fix tests with diazo.
-  [davisagli]
-
-
-2.1.2 (2012-10-03)
-------------------
-
-- Add support for calling many times remove in export (ie:even when no corresponding layer is registred, remove option should not throw exception).
-  [toutpt]
-
-2.1.1 (2011-11-24)
-------------------
-
-- Added uninstall support to browserlayer.xml with the 'remove' option.
-  [maurits]
-
-- GS export xml is now repeatable. Before two consecutive exports could
-  yield differently ordered results.
-  [do3cc]
-
-
-2.1 - 2011-05-12
-----------------
-
-- Update import of BeforeTraverseEvent to come from zope.traversing instead
-  of zope.app.publication.
-  [davisagli]
-
-- Add MANIFEST.in
-  [WouterVH]
-
-
-2.0.1 - 2010-09-21
-------------------
-
-- Make sure the layers don't get applied twice if the site is traversed more
-  than once (such as in a vhosting URL).
-  [davisagli]
-
-
-2.0 - 2010-07-18
-----------------
-
-- Update license to GPL version 2 only.
-  [hannosch]
-
-- Package metadata cleanup, require Zope2 distribution.
-  [hannosch]
-
-
-1.0.1 - 2009-09-09
-------------------
-
-- Be more robust against broken layer registrations. These can occur when
-  packages with registered layers are removed.
-  [wichert]
-
-- Clarified license and copyright.
-  [hannosch]
-
-- Register ourselves for the more generic ISiteRoot from CMFCore and not
-  IPloneSiteRoot.
-  [hannosch]
-
-- Declare test dependencies in an extra.
-  [hannosch]
-
-- Specify package dependencies.
-  [hannosch]
-
-
-1.0.0 - 2008-04-20
-------------------
-
-- Unchanged from 1.0rc4
-
-
-1.0rc4 - 2008-04-13
--------------------
-
-- Register the GenericSetup import and export steps using zcml. This means you
-  will no longer need to install this package manually.
-  [wichert]
-
-
-1.0rc3 - 2008-03-09
--------------------
-
-- Include README.txt and HISTORY.txt in the package's long description.
-  [wichert]
-
-- Add metadata.xml to the GenericSetup profile. This fixes a deprecation
-  warning for Plone 3.1 and later.
-  [wichert]
-
-
-1.0b1 - 2007-09-23
-------------------
-
-- Initial package structure.
-  [zopeskel]
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..ac7ccb9
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,45 @@
+Introduction
+============
+
+This package aims to make it easier to register visual components (e.g. views
+and viewlets) so that they only show up in a Plone site where they have been
+explicitly installed.
+
+Basic usage
+-----------
+
+To use this feature, you should:
+
+- declare plone.browserlayer as a dependency, e.g. in setup.py::
+
+   install_requires=[
+         'plone.browserlayer',
+     ],
+
+- ensure that its ZCML is loaded, e.g. with an include from your own package::
+
+   <include package="plone.browserlayer" />
+
+- create a layer marker interface unique to your product::
+
+   from zope.interface import Interface
+   class IMyProductLayer(Interface):
+       """A layer specific to my product
+       """
+
+- register this with GenericSetup, in a browserlayer.xml file::
+
+   <layers>
+       <layer name="my.product"
+              interface="my.product.interfaces.IMyProductLayer" />
+   </layers>
+
+- register visual components in ZCML for this layer, e.g.::
+
+   <browser:page
+       name="my-view"
+       for="*"
+       layer=".interfaces.IMyProductLayer"
+       permission="zope.Public"
+       template="my-view.pt"
+       />
diff --git a/README.txt b/README.txt
deleted file mode 100644
index ac7ccb9..0000000
--- a/README.txt
+++ /dev/null
@@ -1,45 +0,0 @@
-Introduction
-============
-
-This package aims to make it easier to register visual components (e.g. views
-and viewlets) so that they only show up in a Plone site where they have been
-explicitly installed.
-
-Basic usage
------------
-
-To use this feature, you should:
-
-- declare plone.browserlayer as a dependency, e.g. in setup.py::
-
-   install_requires=[
-         'plone.browserlayer',
-     ],
-
-- ensure that its ZCML is loaded, e.g. with an include from your own package::
-
-   <include package="plone.browserlayer" />
-
-- create a layer marker interface unique to your product::
-
-   from zope.interface import Interface
-   class IMyProductLayer(Interface):
-       """A layer specific to my product
-       """
-
-- register this with GenericSetup, in a browserlayer.xml file::
-
-   <layers>
-       <layer name="my.product"
-              interface="my.product.interfaces.IMyProductLayer" />
-   </layers>
-
-- register visual components in ZCML for this layer, e.g.::
-
-   <browser:page
-       name="my-view"
-       for="*"
-       layer=".interfaces.IMyProductLayer"
-       permission="zope.Public"
-       template="my-view.pt"
-       />
diff --git a/plone/browserlayer/README.rst b/plone/browserlayer/README.rst
new file mode 100644
index 0000000..61d6535
--- /dev/null
+++ b/plone/browserlayer/README.rst
@@ -0,0 +1,155 @@
+plone.browserlayer tests
+------------------------
+
+In testing.zcml we have registered a view, layer-test-view, available only for
+the layer plone.browserlayer.tests.interfaces.IMyProductLayer.
+
+Before the product is installed, we cannot view this:
+
+    >>> from plone.browserlayer.tests.interfaces import IMyProductLayer
+    >>> from plone.browserlayer import utils
+    >>> IMyProductLayer in utils.registered_layers()
+    False
+
+    >>> from plone.testing import z2
+
+    >>> from plone.testing.z2 import Browser
+    >>> from Testing.ZopeTestCase import user_password
+    >>> with z2.zopeApp() as app:
+    ...     browser = Browser(app)
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    Traceback (most recent call last):
+    ...
+    HTTPError: HTTP Error 404: Not Found
+
+We can view a view registered for the default layer, though:
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
+    >>> print browser.contents
+    A standard view
+
+However, if we install the product the interface is registered in the local
+site manager. Here we use the utility method directly, though we could also
+use GenericSetup.
+
+    >>> utils.register_layer(IMyProductLayer, name='my.product')
+    >>> IMyProductLayer in utils.registered_layers()
+    True
+
+And if we now traverse over the site root and render the view, it should be
+there.
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    >>> print browser.contents
+    A local view
+
+Unlike when applying a new skin, layers installed in this way do not override
+views registered for the default layer.
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
+    >>> print browser.contents
+    A standard view
+
+It is also possible to uninstall a layer:
+
+    >>> IMyProductLayer in utils.registered_layers()
+    True
+    >>> utils.unregister_layer(name='my.product')
+    >>> IMyProductLayer in utils.registered_layers()
+    False
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    Traceback (most recent call last):
+    ...
+    HTTPError: HTTP Error 404: Not Found
+
+GenericSetup support
+--------------------
+
+Most of the time, you will be registering layers using GenericSetup. Here
+is how that looks.
+
+    >>> from Products.CMFCore.utils import getToolByName
+    >>> portal_setup = getToolByName(layer['portal'], 'portal_setup')
+
+We should be able to install our product's profile. For the purposes of
+this test, the profile is defined in tests/profiles/testing and
+registered in testing.zcml. It has a file called browserlayer.xml which
+contains::
+
+    <layers>
+        <layer name="plone.browserlayer.tests"
+               interface="plone.browserlayer.tests.interfaces.IMyProductLayer" />
+    </layers>
+
+Let's import it:
+
+    >>> IMyProductLayer in utils.registered_layers()
+    False
+    >>> _ = portal_setup.runAllImportStepsFromProfile('profile-plone.browserlayer:testing')
+    >>> import transaction
+    >>> transaction.commit()
+
+the next three lines are used because of this bug :https://dev.plone.org/ticket/11673
+
+    >>> from zope.event import notify
+    >>> from zope.traversing.interfaces import BeforeTraverseEvent
+    >>> notify(BeforeTraverseEvent(layer['portal'], layer['request']))
+
+    >>> IMyProductLayer in utils.registered_layers()
+    True
+
+And just to prove that everything still works:
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    >>> print browser.contents
+    A local view
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
+    >>> print browser.contents
+    A standard view
+
+We now also have uninstall support.  For the purposes of
+this test, the profile is defined in tests/profiles/uninstall and
+registered in testing.zcml. It has a file called browserlayer.xml which
+contains::
+
+    <layers>
+      <layer name="plone.browserlayer.tests"
+             remove="true" />
+    </layers>
+
+Note that the contents of the 'remove' option do not actually matter; as long
+as the option is not empty, we regard it as a request to remove the
+layer.  This is how most GenericSetup importers treat the 'remove' option.
+
+Also note that you do not need to specify the interface (though you
+are allowed to); the name is enough.
+
+Anyway, let's import it:
+
+    >>> IMyProductLayer in utils.registered_layers()
+    True
+    >>> _ = portal_setup.runAllImportStepsFromProfile('profile-plone.browserlayer:uninstall')
+    >>> transaction.commit()
+
+the next three lines are used because of this bug :https://dev.plone.org/ticket/11673
+
+    >>> from zope.event import notify
+    >>> from zope.traversing.interfaces import BeforeTraverseEvent
+    >>> notify(BeforeTraverseEvent(layer['portal'], layer['request']))
+
+    >>> IMyProductLayer in utils.registered_layers()
+    False
+
+And just to prove that everything still works (or fails to be found)
+as expected:
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
+    Traceback (most recent call last):
+    ...
+    HTTPError: HTTP Error 404: Not Found
+
+    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
+    >>> print browser.contents
+    A standard view
diff --git a/plone/browserlayer/README.txt b/plone/browserlayer/README.txt
deleted file mode 100644
index 61d6535..0000000
--- a/plone/browserlayer/README.txt
+++ /dev/null
@@ -1,155 +0,0 @@
-plone.browserlayer tests
-------------------------
-
-In testing.zcml we have registered a view, layer-test-view, available only for
-the layer plone.browserlayer.tests.interfaces.IMyProductLayer.
-
-Before the product is installed, we cannot view this:
-
-    >>> from plone.browserlayer.tests.interfaces import IMyProductLayer
-    >>> from plone.browserlayer import utils
-    >>> IMyProductLayer in utils.registered_layers()
-    False
-
-    >>> from plone.testing import z2
-
-    >>> from plone.testing.z2 import Browser
-    >>> from Testing.ZopeTestCase import user_password
-    >>> with z2.zopeApp() as app:
-    ...     browser = Browser(app)
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    Traceback (most recent call last):
-    ...
-    HTTPError: HTTP Error 404: Not Found
-
-We can view a view registered for the default layer, though:
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
-    >>> print browser.contents
-    A standard view
-
-However, if we install the product the interface is registered in the local
-site manager. Here we use the utility method directly, though we could also
-use GenericSetup.
-
-    >>> utils.register_layer(IMyProductLayer, name='my.product')
-    >>> IMyProductLayer in utils.registered_layers()
-    True
-
-And if we now traverse over the site root and render the view, it should be
-there.
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    >>> print browser.contents
-    A local view
-
-Unlike when applying a new skin, layers installed in this way do not override
-views registered for the default layer.
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
-    >>> print browser.contents
-    A standard view
-
-It is also possible to uninstall a layer:
-
-    >>> IMyProductLayer in utils.registered_layers()
-    True
-    >>> utils.unregister_layer(name='my.product')
-    >>> IMyProductLayer in utils.registered_layers()
-    False
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    Traceback (most recent call last):
-    ...
-    HTTPError: HTTP Error 404: Not Found
-
-GenericSetup support
---------------------
-
-Most of the time, you will be registering layers using GenericSetup. Here
-is how that looks.
-
-    >>> from Products.CMFCore.utils import getToolByName
-    >>> portal_setup = getToolByName(layer['portal'], 'portal_setup')
-
-We should be able to install our product's profile. For the purposes of
-this test, the profile is defined in tests/profiles/testing and
-registered in testing.zcml. It has a file called browserlayer.xml which
-contains::
-
-    <layers>
-        <layer name="plone.browserlayer.tests"
-               interface="plone.browserlayer.tests.interfaces.IMyProductLayer" />
-    </layers>
-
-Let's import it:
-
-    >>> IMyProductLayer in utils.registered_layers()
-    False
-    >>> _ = portal_setup.runAllImportStepsFromProfile('profile-plone.browserlayer:testing')
-    >>> import transaction
-    >>> transaction.commit()
-
-the next three lines are used because of this bug :https://dev.plone.org/ticket/11673
-
-    >>> from zope.event import notify
-    >>> from zope.traversing.interfaces import BeforeTraverseEvent
-    >>> notify(BeforeTraverseEvent(layer['portal'], layer['request']))
-
-    >>> IMyProductLayer in utils.registered_layers()
-    True
-
-And just to prove that everything still works:
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    >>> print browser.contents
-    A local view
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
-    >>> print browser.contents
-    A standard view
-
-We now also have uninstall support.  For the purposes of
-this test, the profile is defined in tests/profiles/uninstall and
-registered in testing.zcml. It has a file called browserlayer.xml which
-contains::
-
-    <layers>
-      <layer name="plone.browserlayer.tests"
-             remove="true" />
-    </layers>
-
-Note that the contents of the 'remove' option do not actually matter; as long
-as the option is not empty, we regard it as a request to remove the
-layer.  This is how most GenericSetup importers treat the 'remove' option.
-
-Also note that you do not need to specify the interface (though you
-are allowed to); the name is enough.
-
-Anyway, let's import it:
-
-    >>> IMyProductLayer in utils.registered_layers()
-    True
-    >>> _ = portal_setup.runAllImportStepsFromProfile('profile-plone.browserlayer:uninstall')
-    >>> transaction.commit()
-
-the next three lines are used because of this bug :https://dev.plone.org/ticket/11673
-
-    >>> from zope.event import notify
-    >>> from zope.traversing.interfaces import BeforeTraverseEvent
-    >>> notify(BeforeTraverseEvent(layer['portal'], layer['request']))
-
-    >>> IMyProductLayer in utils.registered_layers()
-    False
-
-And just to prove that everything still works (or fails to be found)
-as expected:
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@layer-test-view')
-    Traceback (most recent call last):
-    ...
-    HTTPError: HTTP Error 404: Not Found
-
-    >>> browser.open(layer['portal'].absolute_url() + '/@@standard-test-view')
-    >>> print browser.contents
-    A standard view
diff --git a/plone/browserlayer/tests/test_doctest.py b/plone/browserlayer/tests/test_doctest.py
index 0cbd5c4..7d2f4aa 100644
--- a/plone/browserlayer/tests/test_doctest.py
+++ b/plone/browserlayer/tests/test_doctest.py
@@ -8,7 +8,7 @@
 
 def test_suite():
     return unittest.TestSuite(
-        [layered(doctest.DocFileSuite('README.txt', package='plone.browserlayer',
+        [layered(doctest.DocFileSuite('README.rst', package='plone.browserlayer',
          optionflags=doctest.ELLIPSIS | doctest.REPORT_ONLY_FIRST_FAILURE),
          layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING)]
     )
diff --git a/setup.py b/setup.py
index bd5656f..bc8c962 100644
--- a/setup.py
+++ b/setup.py
@@ -5,8 +5,8 @@
 setup(name='plone.browserlayer',
       version=version,
       description="Browser layer management for Zope 2 applications",
-      long_description=open("README.txt").read() + "\n" + \
-                       open("CHANGES.txt").read(),
+      long_description=open("README.rst").read() + "\n" + \
+                       open("CHANGES.rst").read(),
       classifiers=[
           "Environment :: Web Environment",
           "Framework :: Plone",


