Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-06-03T13:42:12-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/c0972a8f1145dc4a6867097a73f95fa77a3d945a

Basic upload setup

Files changed:
A src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/browser/mapper.pt
M src/plone/app/theming/browser/mapper.py

diff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml
index 98d1749..ec6d2fc 100644
--- a/src/plone/app/theming/browser/configure.zcml
+++ b/src/plone/app/theming/browser/configure.zcml
@@ -45,4 +45,11 @@
         permission="plone.app.controlpanel.Themes"
         />
 
+	<browser:page
+        name="themeFileUpload"
+        for="plone.resource.interfaces.IResourceDirectory"
+        class=".themefile.FileUploadView"
+        permission="plone.app.controlpanel.Themes"
+        />
+
 </configure>
diff --git a/src/plone/app/theming/browser/mapper.pt b/src/plone/app/theming/browser/mapper.pt
index 7e1fd0e..4abfd7d 100644
--- a/src/plone/app/theming/browser/mapper.pt
+++ b/src/plone/app/theming/browser/mapper.pt
@@ -99,7 +99,8 @@
           <section id="content-core">
             <input tal:replace="structure context/@@authenticator/authenticator" />
             <div class="pat-thememapper"
-                  data-pat-thememapper='
+				data-pat-thememapper='
+					  themeUrl: ${view/resourceUrl};
                       filemanagerConfig:{"actionUrl":"${view/themeBaseUrl}/@@plone.resourceeditor.filemanager-actions"};
                       mockupUrl:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/${view/themeBasePathEncoded}/${view/defaultThemeFile}&amp;theme=off;
                       unthemedUrl:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/&amp;diazo.off=1;
@@ -110,4 +111,4 @@
       </div>
     </article>
   </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index 88bf917..313b101 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -74,6 +74,7 @@ def setup(self):
         )
         self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
         self.themeBaseUrl = '/'.join([self.portalUrl, self.themeBasePath])
+        self.resourceUrl = self.resourceDirectory.context.absolute_url()        
 
         self.editable = IWritableResourceDirectory.providedBy(
             self.resourceDirectory
diff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py
new file mode 100644
index 0000000..6b74db0
--- /dev/null
+++ b/src/plone/app/theming/browser/themefile.py
@@ -0,0 +1,135 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from Products.Five.browser import BrowserView
+from plone.app.dexterity.interfaces import IDXFileFactory
+from plone.dexterity.interfaces import IDexterityFTI
+from plone.resource.directory import PersistentResourceDirectory
+from plone.uuid.interfaces import IUUID
+import json
+import logging
+import mimetypes
+import os
+
+logger = logging.getLogger('plone')
+
+def _bool(val):
+    if val.lower() in ('t', 'true', '1', 'on'):
+        return True
+    return False
+
+
+def _tus_int(val):
+    try:
+        return int(val)
+    except:
+        return 60 * 60  # default here...
+
+
+possible_tus_options = {
+    'tmp_file_dir': str,
+    'send_file': _bool,
+    'upload_valid_duration': _tus_int
+}
+
+TUS_ENABLED = False
+if os.environ.get('TUS_ENABLED'):
+    try:
+        from tus import Tus, Zope2RequestAdapter
+        tus_settings = {}
+        for option, converter in possible_tus_options.items():
+            name = 'TUS_%s' % option.upper()
+            if name in os.environ:
+                tus_settings[option] = converter(os.environ[name])
+
+            tmp_file_dir = tus_settings.get('tmp_file_dir')
+            if tmp_file_dir is None:
+                logger.warn('You are trying to enable tus but no'
+                            'TUS_TMP_FILE_DIR environment setting is set.')
+            elif not os.path.exists(tmp_file_dir) or \
+                    not os.path.isdir(tmp_file_dir):
+                logger.warn('The TUS_TMP_FILE_DIR does not point to a valid '
+                            'directory.')
+            elif not os.access(tmp_file_dir, os.W_OK):
+                logger.warn('The TUS_TMP_FILE_DIR is not writable')
+            else:
+                TUS_ENABLED = True
+                logger.info('tus file upload support is successfully '
+                            'configured')
+    except ImportError:
+        logger.warn('TUS_ENABLED is set; however, tus python package is '
+                    'not installed')
+else:
+    try:
+        import tus
+        tus  # pyflakes
+    except ImportError:
+        pass
+    else:
+        logger.warn('You have the tus python package installed but it is '
+                    'not configured for this plone client')
+
+
+class FileUploadView(BrowserView):
+    """
+    Handle file uploads with potential
+    special handling of TUS resumable uploads
+    """
+
+    tus_uid = None
+
+    def __contains__(self, uid):
+        return self.tus_uid and self.tus_uid == uid
+
+    def __getitem__(self, uid):
+        if self.tus_uid is None:
+            self.tus_uid = uid
+            self.__doc__ = 'foobar'  # why is this necessary?
+            return self
+        else:
+            raise KeyError
+
+    def __call__(self):
+        req = self.request
+        tusrequest = False
+        if TUS_ENABLED:
+            adapter = Zope2RequestAdapter(req)
+            tus = Tus(adapter, **tus_settings)
+            if tus.valid:
+                tusrequest = True
+                tus.handle()
+                if not tus.upload_finished:
+                    return
+                else:
+                    filename = req.getHeader('FILENAME')
+                    if tus.send_file:
+                        filedata = req._file
+                        filedata.filename = filename
+                    else:
+                        filepath = req._file.read()
+                        filedata = open(filepath)
+        if not tusrequest:
+            if req.REQUEST_METHOD != 'POST':
+                return
+            filedata = self.request.form.get("file", None)
+            if filedata is None:
+                return
+            filename = filedata.filename
+        content_type = mimetypes.guess_type(filename)[0] or ""
+
+        if not filedata:
+            return
+
+        # Determine if the default file/image types are DX or AT based
+        ctr = getToolByName(self.context, 'content_type_registry')
+        type_ = ctr.findTypeName(filename.lower(), '', '') or 'File'
+
+        directory = PersistentResourceDirectory(self.context)
+
+        name = filedata.filename.encode('utf-8')
+        data = filedata.read().encode('utf-8')
+
+        directory.writeFile(name, data)
+
+        self.request.response.setHeader('Content-Type', 'application/json')
+
+        return json.dumps({'sucess':'create'})


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-06-03T13:47:34-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/f96a33b257ae83c2636dcfdf2ecfd3b896a7b74a

Removed old irrelevant code

Files changed:
M src/plone/app/theming/browser/themefile.py

diff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py
index 6b74db0..bc516de 100644
--- a/src/plone/app/theming/browser/themefile.py
+++ b/src/plone/app/theming/browser/themefile.py
@@ -1,128 +1,19 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
-from plone.app.dexterity.interfaces import IDXFileFactory
-from plone.dexterity.interfaces import IDexterityFTI
 from plone.resource.directory import PersistentResourceDirectory
-from plone.uuid.interfaces import IUUID
 import json
-import logging
-import mimetypes
-import os
-
-logger = logging.getLogger('plone')
-
-def _bool(val):
-    if val.lower() in ('t', 'true', '1', 'on'):
-        return True
-    return False
-
-
-def _tus_int(val):
-    try:
-        return int(val)
-    except:
-        return 60 * 60  # default here...
-
-
-possible_tus_options = {
-    'tmp_file_dir': str,
-    'send_file': _bool,
-    'upload_valid_duration': _tus_int
-}
-
-TUS_ENABLED = False
-if os.environ.get('TUS_ENABLED'):
-    try:
-        from tus import Tus, Zope2RequestAdapter
-        tus_settings = {}
-        for option, converter in possible_tus_options.items():
-            name = 'TUS_%s' % option.upper()
-            if name in os.environ:
-                tus_settings[option] = converter(os.environ[name])
-
-            tmp_file_dir = tus_settings.get('tmp_file_dir')
-            if tmp_file_dir is None:
-                logger.warn('You are trying to enable tus but no'
-                            'TUS_TMP_FILE_DIR environment setting is set.')
-            elif not os.path.exists(tmp_file_dir) or \
-                    not os.path.isdir(tmp_file_dir):
-                logger.warn('The TUS_TMP_FILE_DIR does not point to a valid '
-                            'directory.')
-            elif not os.access(tmp_file_dir, os.W_OK):
-                logger.warn('The TUS_TMP_FILE_DIR is not writable')
-            else:
-                TUS_ENABLED = True
-                logger.info('tus file upload support is successfully '
-                            'configured')
-    except ImportError:
-        logger.warn('TUS_ENABLED is set; however, tus python package is '
-                    'not installed')
-else:
-    try:
-        import tus
-        tus  # pyflakes
-    except ImportError:
-        pass
-    else:
-        logger.warn('You have the tus python package installed but it is '
-                    'not configured for this plone client')
-
 
 class FileUploadView(BrowserView):
     """
-    Handle file uploads with potential
-    special handling of TUS resumable uploads
+    Handle file uploads
     """
 
-    tus_uid = None
-
-    def __contains__(self, uid):
-        return self.tus_uid and self.tus_uid == uid
-
-    def __getitem__(self, uid):
-        if self.tus_uid is None:
-            self.tus_uid = uid
-            self.__doc__ = 'foobar'  # why is this necessary?
-            return self
-        else:
-            raise KeyError
-
     def __call__(self):
-        req = self.request
-        tusrequest = False
-        if TUS_ENABLED:
-            adapter = Zope2RequestAdapter(req)
-            tus = Tus(adapter, **tus_settings)
-            if tus.valid:
-                tusrequest = True
-                tus.handle()
-                if not tus.upload_finished:
-                    return
-                else:
-                    filename = req.getHeader('FILENAME')
-                    if tus.send_file:
-                        filedata = req._file
-                        filedata.filename = filename
-                    else:
-                        filepath = req._file.read()
-                        filedata = open(filepath)
-        if not tusrequest:
-            if req.REQUEST_METHOD != 'POST':
-                return
-            filedata = self.request.form.get("file", None)
-            if filedata is None:
-                return
-            filename = filedata.filename
-        content_type = mimetypes.guess_type(filename)[0] or ""
+        filedata = self.request.form.get("file", None)
 
-        if not filedata:
+        if filedata is None:
             return
 
-        # Determine if the default file/image types are DX or AT based
-        ctr = getToolByName(self.context, 'content_type_registry')
-        type_ = ctr.findTypeName(filename.lower(), '', '') or 'File'
-
         directory = PersistentResourceDirectory(self.context)
 
         name = filedata.filename.encode('utf-8')


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-06-08T14:18:58-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/5d66f37bfdf14741161f5ed99a1311adaf2d9d60

Fixed issue with uploading binary files

Files changed:
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/browser/themefile.py

diff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml
index ec6d2fc..1e15f72 100644
--- a/src/plone/app/theming/browser/configure.zcml
+++ b/src/plone/app/theming/browser/configure.zcml
@@ -47,7 +47,7 @@
 
 	<browser:page
         name="themeFileUpload"
-        for="plone.resource.interfaces.IResourceDirectory"
+        for="*"
         class=".themefile.FileUploadView"
         permission="plone.app.controlpanel.Themes"
         />
diff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py
index bc516de..7607320 100644
--- a/src/plone/app/theming/browser/themefile.py
+++ b/src/plone/app/theming/browser/themefile.py
@@ -12,15 +12,16 @@ def __call__(self):
         filedata = self.request.form.get("file", None)
 
         if filedata is None:
-            return
-
+            return json.dumps({'failure':'error'})
+        
         directory = PersistentResourceDirectory(self.context)
-
         name = filedata.filename.encode('utf-8')
-        data = filedata.read().encode('utf-8')
-
-        directory.writeFile(name, data)
+        data = filedata.read()
 
-        self.request.response.setHeader('Content-Type', 'application/json')
+        try:
+            directory.writeFile(name, data)
+            self.request.response.setHeader('Content-Type', 'application/json')
+        except:
+            return json.dumps({'failure':'error'})
 
         return json.dumps({'sucess':'create'})


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-06-09T13:41:43-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/e6419ebdedc85d1a223ae7124e0269eb7ba7c473

Fixed typo

Files changed:
M src/plone/app/theming/browser/themefile.py

diff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py
index 7607320..82af425 100644
--- a/src/plone/app/theming/browser/themefile.py
+++ b/src/plone/app/theming/browser/themefile.py
@@ -24,4 +24,4 @@ def __call__(self):
         except:
             return json.dumps({'failure':'error'})
 
-        return json.dumps({'sucess':'create'})
+        return json.dumps({'success':'create'})


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-06-09T14:15:05-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/5261c654ed043f47e9c826b7d220d24fca9d7128

Merge pull request #59 from plone/uploads

Uploads

Files changed:
A src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/browser/mapper.pt
M src/plone/app/theming/browser/mapper.py

diff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml
index 98d1749..1e15f72 100644
--- a/src/plone/app/theming/browser/configure.zcml
+++ b/src/plone/app/theming/browser/configure.zcml
@@ -45,4 +45,11 @@
         permission="plone.app.controlpanel.Themes"
         />
 
+	<browser:page
+        name="themeFileUpload"
+        for="*"
+        class=".themefile.FileUploadView"
+        permission="plone.app.controlpanel.Themes"
+        />
+
 </configure>
diff --git a/src/plone/app/theming/browser/mapper.pt b/src/plone/app/theming/browser/mapper.pt
index 7e1fd0e..4abfd7d 100644
--- a/src/plone/app/theming/browser/mapper.pt
+++ b/src/plone/app/theming/browser/mapper.pt
@@ -99,7 +99,8 @@
           <section id="content-core">
             <input tal:replace="structure context/@@authenticator/authenticator" />
             <div class="pat-thememapper"
-                  data-pat-thememapper='
+				data-pat-thememapper='
+					  themeUrl: ${view/resourceUrl};
                       filemanagerConfig:{"actionUrl":"${view/themeBaseUrl}/@@plone.resourceeditor.filemanager-actions"};
                       mockupUrl:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/${view/themeBasePathEncoded}/${view/defaultThemeFile}&amp;theme=off;
                       unthemedUrl:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/&amp;diazo.off=1;
@@ -110,4 +111,4 @@
       </div>
     </article>
   </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index 88bf917..313b101 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -74,6 +74,7 @@ def setup(self):
         )
         self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
         self.themeBaseUrl = '/'.join([self.portalUrl, self.themeBasePath])
+        self.resourceUrl = self.resourceDirectory.context.absolute_url()        
 
         self.editable = IWritableResourceDirectory.providedBy(
             self.resourceDirectory
diff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py
new file mode 100644
index 0000000..82af425
--- /dev/null
+++ b/src/plone/app/theming/browser/themefile.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+from Products.Five.browser import BrowserView
+from plone.resource.directory import PersistentResourceDirectory
+import json
+
+class FileUploadView(BrowserView):
+    """
+    Handle file uploads
+    """
+
+    def __call__(self):
+        filedata = self.request.form.get("file", None)
+
+        if filedata is None:
+            return json.dumps({'failure':'error'})
+        
+        directory = PersistentResourceDirectory(self.context)
+        name = filedata.filename.encode('utf-8')
+        data = filedata.read()
+
+        try:
+            directory.writeFile(name, data)
+            self.request.response.setHeader('Content-Type', 'application/json')
+        except:
+            return json.dumps({'failure':'error'})
+
+        return json.dumps({'success':'create'})


