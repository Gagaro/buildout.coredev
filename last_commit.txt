Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-23T12:34:24+10:00
Author: David\ Beitey (davidjb) <david@davidjb.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/275958b7b5533db5f9c9a42b5d855a5b2bc826e5

Set msg_type when sending forgotten password emails

Files changed:
M CHANGES.rst
M Products/CMFPlone/RegistrationTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 23755e0..95a0b8e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0b1 (unreleased)
 ------------------
 
+- Pass mail ``Content-Type`` to mailhost when sending forgotten password
+  emails.
+  [davidjb]
+
 - Move security control panel to CMFPlone. Fixes #216.
   [jcerjak, timo]
 
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index d2044a3..98b8152 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -370,10 +370,12 @@ def mailPassword(self, login, REQUEST, immediate=False):
         subject = message_obj['Subject']
         m_to = message_obj['To']
         m_from = message_obj['From']
+        msg_type = message_obj.get('Content-Type', 'text/plain')
         host = getToolByName(self, 'MailHost')
         try:
             host.send(mail_text, m_to, m_from, subject=subject,
-                      charset=encoding, immediate=immediate)
+                      charset=encoding, immediate=immediate,
+                      msg_type=msg_type)
         except SMTPRecipientsRefused:
             # Don't disclose email address on failure
             raise SMTPRecipientsRefused(


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-23T12:34:24+10:00
Author: David\ Beitey (davidjb) <david@davidjb.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/169c2fa0ee40116783f80624027f108e47e81e37

Pass email encoding to forgotten password email template

Files changed:
M CHANGES.rst
M Products/CMFPlone/RegistrationTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 95a0b8e..ffa1f81 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,9 @@ Changelog
 5.0b1 (unreleased)
 ------------------
 
+- Pass email encoding to forgotten password email template.
+  [davidjb]
+
 - Pass mail ``Content-Type`` to mailhost when sending forgotten password
   emails.
   [davidjb]
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index 98b8152..ec1c8f2 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -411,10 +411,11 @@ def registeredNotify(self, new_member_id):
         # Rather than have the template try to use the mailhost, we will
         # render the message ourselves and send it from here (where we
         # don't need to worry about 'UseMailHost' permissions).
+        encoding = getUtility(ISiteRoot).getProperty('email_charset', 'utf-8')
         mail_text = self.registered_notify_template(
-            self, self.REQUEST, member=member, reset=reset, email=email)
+            self, self.REQUEST, member=member, reset=reset, email=email,
+            charset=encoding)
 
-        encoding = getUtility(ISiteRoot).getProperty('email_charset', 'utf-8')
         # The mail headers are not properly encoded we need to extract
         # them and let MailHost manage the encoding.
         if isinstance(mail_text, unicode):


Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-03-23T12:34:24+10:00
Author: David\ Beitey (davidjb) <david@davidjb.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/15ed18a51dd796a72b98a18cbada8dbfd71bc0ba

Add tests for changing email encoding on registration/forgotten password emails

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/testRegistrationTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ffa1f81..ea689a4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0b1 (unreleased)
 ------------------
 
+- Add tests for configuring encoding of user registration or
+  forgotten password emails.
+  [davidjb]
+
 - Pass email encoding to forgotten password email template.
   [davidjb]
 
diff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py
index cd64b8b..5e94c25 100644
--- a/Products/CMFPlone/tests/testRegistrationTool.py
+++ b/Products/CMFPlone/tests/testRegistrationTool.py
@@ -1,7 +1,7 @@
 import unittest
 
 from email import message_from_string
-from zope.component import getSiteManager
+from zope.component import getSiteManager, getUtility
 from Products.CMFPlone.tests import PloneTestCase
 
 from AccessControl import Unauthorized
@@ -121,6 +121,8 @@ def testRegisteredNotify(self):
         self.portal.setTitle('T\xc3\xa4st Portal')
         self.portal.email_from_name = 'T\xc3\xa4st Admin'
         self.portal.email_from_address = 'bar@baz.com'
+
+        # Notify the registered user
         self.registration.registeredNotify(member_id)
         self.assertEqual(len(mails.messages), 1)
         msg = message_from_string(mails.messages[0])
@@ -135,6 +137,31 @@ def testRegisteredNotify(self):
         # And a Quoted Printable encoded body
         self.assertTrue('T=C3=A4st Admin' in msg.get_payload())
 
+    def testRegisteredNotifyEncoding(self):
+        mails = self.portal.MailHost = MockMailHost('MailHost')
+        sm = getSiteManager(self.portal)
+        sm.unregisterUtility(provided=IMailHost)
+        sm.registerUtility(mails, IMailHost)
+        # Register a user
+        self.registration.addMember(member_id, 'secret',
+                          properties={'username': member_id,
+                                      'email': 'foo@bar.com'})
+        # Set the portal email info
+        self.portal.setTitle('Test Portal')
+        self.portal.email_from_name = 'Test Admin'
+        self.portal.email_from_address = 'bar@baz.com'
+
+        # Set the portal email encoding
+        self.portal.email_charset = 'us-ascii'
+
+        # Notify the registered user
+        self.registration.registeredNotify(member_id)
+        self.assertEqual(len(mails.messages), 1)
+        msg = message_from_string(mails.messages[0])
+
+        # Ensure charset (and thus Content-Type) were set via template
+        self.assertEqual(msg['Content-Type'], 'text/plain; charset="us-ascii"')
+
     def testMailPassword(self):
         # tests email sending for password emails
         # First install a fake mailhost utility
@@ -150,6 +177,7 @@ def testMailPassword(self):
         self.portal.setTitle('T\xc3\xa4st Portal')
         self.portal.email_from_name = 'T\xc3\xa4st Admin'
         self.portal.email_from_address = 'bar@baz.com'
+
         from zope.publisher.browser import TestRequest
         self.registration.mailPassword(member_id, TestRequest())
         self.assertEqual(len(mails.messages), 1)
@@ -164,6 +192,33 @@ def testMailPassword(self):
         # And a Quoted Printable encoded body
         self.assertTrue('T=C3=A4st Porta' in msg.get_payload())
 
+    def testMailPasswordEncoding(self):
+        # tests email sending for password emails
+        # First install a fake mailhost utility
+        mails = self.portal.MailHost = MockMailHost('MailHost')
+        sm = getSiteManager(self.portal)
+        sm.unregisterUtility(provided=IMailHost)
+        sm.registerUtility(mails, IMailHost)
+        # Register a user
+        self.registration.addMember(member_id, 'secret',
+                          properties={'username': member_id,
+                                      'email': 'foo@bar.com'})
+        # Set the portal email info
+        self.portal.setTitle('Test Portal')
+        self.portal.email_from_name = 'Test Admin'
+        self.portal.email_from_address = 'bar@baz.com'
+
+        # Set the portal email encoding
+        self.portal.email_charset = 'us-ascii'
+
+        from zope.publisher.browser import TestRequest
+        self.registration.mailPassword(member_id, TestRequest())
+        self.assertEqual(len(mails.messages), 1)
+        msg = message_from_string(mails.messages[0])
+
+        # Ensure charset (and thus Content-Type) were set via template
+        self.assertEqual(msg['Content-Type'], 'text/plain; charset="us-ascii"')
+
 
 class TestPasswordGeneration(PloneTestCase.PloneTestCase):
 


