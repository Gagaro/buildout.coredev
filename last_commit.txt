Repository: Products.CMFDiffTool


Branch: refs/heads/2.1.x
Date: 2015-08-12T13:54:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/87a29172dd04090f360ff9ea37ea64fc14bb0ca9

Fixed UnicodeDecodeError in dump/ndiff.

Issue https://github.com/plone/Products.CMFPlone/issues/820

Files changed:
M CHANGES.txt
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/tests/testFieldDiff.py

diff --git a/CHANGES.txt b/CHANGES.txt
index a3368d0..152080d 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,10 @@ Changelog
 2.1.1 (unreleased)
 ------------------
 
+- Fixed UnicodeDecodeError in dump/ndiff.
+  Issue https://github.com/plone/Products.CMFPlone/issues/820
+  [maurits]
+
 - Fix: Make ``test_dexteritydiff.py`` tests works with Python 2.6.
   [jensens]
 
diff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py
index f1bd269..cb29baa 100644
--- a/Products/CMFDiffTool/FieldDiff.py
+++ b/Products/CMFDiffTool/FieldDiff.py
@@ -58,9 +58,11 @@ def ndiff(self):
 
 InitializeClass(FieldDiff)
 
+
 def dump(tag, x, lo, hi, r):
     for i in xrange(lo, hi):
-        r.append(tag +' ' + str(x[i]))
+        r.append(tag + ' %s' % x[i])
+
 
 def plain_replace(a, alo, ahi, b, blo, bhi, r):
     assert alo < ahi and blo < bhi
diff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py
index d359def..63773c7 100644
--- a/Products/CMFDiffTool/tests/testFieldDiff.py
+++ b/Products/CMFDiffTool/tests/testFieldDiff.py
@@ -5,6 +5,7 @@
 from os import linesep
 from Testing import ZopeTestCase
 from Products.CMFDiffTool.FieldDiff import FieldDiff
+from Products.CMFDiffTool.FieldDiff import dump
 
 _marker = []
 
@@ -81,6 +82,46 @@ def testDiffText(self):
         fd = FieldDiff(a, b, 'attribute')
         self.assertEqual(fd.ndiff(), expected)
 
+    def test_dump_text(self):
+        """Test dumping a diff of text."""
+        diff = []
+        dump('-', ['support'], 0, 1, diff)
+        self.assertEqual(diff, ['- support'])
+        # Try unicode, a 'u' with an umlaut.
+        diff = []
+        dump('+', [u's\xfcpport'], 0, 1, diff)
+        self.assertEqual(diff, [u'+ s\xfcpport'])
+        # Combine them.
+        diff = []
+        dump('-', ['support'], 0, 1, diff)
+        dump('+', [u's\xfcpport'], 0, 1, diff)
+        self.assertEqual(diff, ['- support', u'+ s\xfcpport'])
+
+    def test_dump_integer(self):
+        """Test dumping a diff of integers."""
+        diff = []
+        dump('-', [4], 0, 1, diff)
+        self.assertEqual(diff, ['- 4'])
+        dump('+', [42], 0, 1, diff)
+        self.assertEqual(diff, ['- 4', '+ 42'])
+
+    def test_dump_float(self):
+        """Test dumping a diff of floats."""
+        diff = []
+        dump('-', [1.1], 0, 1, diff)
+        self.assertEqual(diff, ['- 1.1'])
+        dump('+', [1.2], 0, 1, diff)
+        self.assertEqual(diff, ['- 1.1', '+ 1.2'])
+
+    def test_dump_boolean(self):
+        """Test dumping a diff of booleans."""
+        diff = []
+        dump('-', [True], 0, 1, diff)
+        self.assertEqual(diff, ['- True'])
+        dump('+', [False], 0, 1, diff)
+        self.assertEqual(diff, ['- True', '+ False'])
+
+
 def test_suite():
     import unittest
     suite = unittest.TestSuite()


Repository: Products.CMFDiffTool


Branch: refs/heads/2.1.x
Date: 2015-08-12T14:00:29+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/f7e9aae0965d8dedf80c62251db07295affaffff

Added more tests for unicode field diffs.

Files changed:
M Products/CMFDiffTool/tests/testFieldDiff.py

diff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py
index 63773c7..374d91c 100644
--- a/Products/CMFDiffTool/tests/testFieldDiff.py
+++ b/Products/CMFDiffTool/tests/testFieldDiff.py
@@ -9,16 +9,25 @@
 
 _marker = []
 
+
 class A:
     attribute = "value"
     def method(self):
         return "method value"
 
+
 class B:
     attribute = "different value"
     def method(self):
         return "different method value"
 
+
+class U:
+    attribute = u"\xfcnicode value"
+    def method(self):
+        return u"different method val\xfce"
+
+
 class TestFieldDiff(ZopeTestCase.ZopeTestCase):
     """Test the FieldDiff class"""
 
@@ -32,26 +41,38 @@ def testAttributeSame(self):
         a = A()
         fd = FieldDiff(a, a, 'attribute')
         self.failUnless(fd.same)
+        uu = U()
+        fd = FieldDiff(uu, uu, 'attribute')
+        self.failUnless(fd.same)
 
     def testMethodSame(self):
         """Test method with same value"""
         a = A()
         fd = FieldDiff(a, a, 'method')
         self.failUnless(fd.same)
+        uu = U()
+        fd = FieldDiff(uu, uu, 'method')
+        self.failUnless(fd.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
         a = A()
         b = B()
+        uu = U()
         fd = FieldDiff(a, b, 'attribute')
         self.failIf(fd.same)
+        fd = FieldDiff(a, uu, 'attribute')
+        self.failIf(fd.same)
 
     def testMethodDiff(self):
         """Test method with different value"""
         a = A()
         b = B()
+        uu = U()
         fd = FieldDiff(a, b, 'method')
         self.failIf(fd.same)
+        fd = FieldDiff(a, uu, 'method')
+        self.failIf(fd.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -59,28 +80,43 @@ def testGetLineDiffsSame(self):
         fd = FieldDiff(a, a, 'attribute')
         expected = [('equal', 0, 1, 0, 1)]
         self.assertEqual(fd.getLineDiffs(), expected)
+        uu = U()
+        fd = FieldDiff(uu, uu, 'attribute')
+        expected = [('equal', 0, 1, 0, 1)]
+        self.assertEqual(fd.getLineDiffs(), expected)
 
     def testGetLineDiffsDifferent(self):
         """test getLineDiffs() method with different value"""
         a = A()
         b = B()
+        uu = U()
         fd = FieldDiff(a, b, 'attribute')
         expected = [('replace', 0, 1, 0, 1)]
         self.assertEqual(fd.getLineDiffs(), expected)
+        fd = FieldDiff(a, uu, 'attribute')
+        expected = [('replace', 0, 1, 0, 1)]
+        self.assertEqual(fd.getLineDiffs(), expected)
 
     def testSameText(self):
         """Test text diff output with same value"""
         a = A()
         fd = FieldDiff(a, a, 'attribute')
         self.assertEqual(fd.ndiff(), '  value')
+        uu = U()
+        fd = FieldDiff(uu, uu, 'attribute')
+        self.assertEqual(fd.ndiff(), u'  \xfcnicode value')
 
     def testDiffText(self):
         """Test text diff output with different value"""
         a = A()
         b = B()
+        uu = U()
         expected = "- value%s+ different value" % linesep
         fd = FieldDiff(a, b, 'attribute')
         self.assertEqual(fd.ndiff(), expected)
+        expected = u"- value%s+ \xfcnicode value" % linesep
+        fd = FieldDiff(a, uu, 'attribute')
+        self.assertEqual(fd.ndiff(), expected)
 
     def test_dump_text(self):
         """Test dumping a diff of text."""


