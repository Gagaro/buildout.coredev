Repository: plone.app.relationfield
Branch: refs/heads/master
Date: 2015-01-26T12:50:10-06:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/408fa93b1d8b8733bcf24d15d247987de379741c

integrate plone.app.widgets

Files changed:
M plone/app/relationfield/__init__.py
M plone/app/relationfield/behavior.py
M setup.py

diff --git a/plone/app/relationfield/__init__.py b/plone/app/relationfield/__init__.py
index 27a5b35..60d502b 100644
--- a/plone/app/relationfield/__init__.py
+++ b/plone/app/relationfield/__init__.py
@@ -5,20 +5,6 @@
 import pkg_resources
 
 try:
-    pkg_resources.get_distribution('plone.formwidget.contenttree')
-except pkg_resources.DistributionNotFound:
-    HAS_CONTENTTREE = False
-else:
-    HAS_CONTENTTREE = True
-
-try:
-    pkg_resources.get_distribution('plone.app.widgets')
-except pkg_resources.DistributionNotFound:
-    HAS_WIDGETS = False
-else:
-    HAS_WIDGETS = True
-
-try:
     pkg_resources.get_distribution('plone.app.contenttypes')
 except pkg_resources.DistributionNotFound:
     HAS_CONTENTTYPES = False
diff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py
index 42cb441..c51cbd6 100644
--- a/plone/app/relationfield/behavior.py
+++ b/plone/app/relationfield/behavior.py
@@ -1,52 +1,31 @@
 # -*- coding: utf-8 -*-
-from plone.app.relationfield import HAS_CONTENTTREE
-from plone.app.relationfield import HAS_WIDGETS
 from plone.autoform.interfaces import IFormFieldProvider
 from plone.supermodel.interfaces import FIELDSETS_KEY
 from plone.supermodel.model import Fieldset
 from z3c.relationfield.schema import RelationChoice
 from z3c.relationfield.schema import RelationList
-from zope.interface import Interface
 from zope.interface import alsoProvides
+from plone.autoform import directives as form
+from plone.supermodel import model
+from plone.app.dexterity import MessageFactory as _
+from plone.app.z3cform.widget import RelatedItemsFieldWidget
 
-if HAS_CONTENTTREE and not HAS_WIDGETS:
-    from plone.formwidget.contenttree import ObjPathSourceBinder
 
-try:
-    from plone.app.dexterity import MessageFactory as _
-except ImportError:
-    def MessageFactory(messageid, default=None):
-        return unicode(default)
-    _ = MessageFactory
-
-
-class IRelatedItems(Interface):
+class IRelatedItems(model.Schema):
     """Behavior interface to make a Dexterity type support related items.
     """
 
-    if HAS_CONTENTTREE and not HAS_WIDGETS:
-
-        relatedItems = RelationList(
-            title=_(u'label_related_items', default=u'Related Items'),
-            default=[],
-            value_type=RelationChoice(
-                title=u"Related",
-                source=ObjPathSourceBinder()
-            ),
-            required=False
-        )
-
-    else:
-
-        relatedItems = RelationList(
-            title=_(u'label_related_items', default=u'Related Items'),
-            default=[],
-            value_type=RelationChoice(
-                title=u"Related",
-                vocabulary="plone.app.vocabularies.Catalog"
-            ),
-            required=False
-        )
+    relatedItems = RelationList(
+        title=_(u'label_related_items', default=u'Related Items'),
+        default=[],
+        value_type=RelationChoice(
+            title=u"Related",
+            vocabulary="plone.app.vocabularies.Catalog"
+        ),
+        required=False
+    )
+    form.widget('relatedItems', RelatedItemsFieldWidget,
+                vocabulary='plone.app.vocabularies.Catalog')
 
 fieldset = Fieldset('categorization',
                     label=_(u'Categorization'), fields=['relatedItems'])
diff --git a/setup.py b/setup.py
index 9895628..dc226ab 100644
--- a/setup.py
+++ b/setup.py
@@ -40,6 +40,7 @@
           'plone.schemaeditor>=1.3.5.dev0',
           'Products.CMFCore',
           'plone.rfc822',
+          'plone.app.z3cform>=1.1.0'
       ],
       extras_require={'test': ['plone.app.testing', 'plone.app.dexterity']},
       entry_points="""


Repository: plone.app.relationfield
Branch: refs/heads/master
Date: 2015-01-26T23:21:23-06:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/90cca5ef68a92506b262e7ff0d868bba560fb743

fix tests for widgets integration

Files changed:
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M setup.py

diff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py
index 3e7b9f0..dabd06f 100644
--- a/plone/app/relationfield/schemaeditor.py
+++ b/plone/app/relationfield/schemaeditor.py
@@ -1,6 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.app.relationfield import HAS_CONTENTTREE
-from plone.app.relationfield import HAS_WIDGETS
 from plone.schemaeditor.fields import FieldFactory
 from plone.schemaeditor.interfaces import IFieldEditFormSchema
 from plone.schemaeditor.interfaces import IFieldFactory
@@ -17,10 +15,7 @@
 
 _ = MessageFactory('plone')
 
-if HAS_CONTENTTREE and not HAS_WIDGETS:
-    from plone.formwidget.contenttree import ObjPathSourceBinder
-else:
-    from plone.app.vocabularies.catalog import CatalogSource
+from plone.app.vocabularies.catalog import CatalogSource
 
 
 class RelationFieldFactory(FieldFactory):
@@ -58,43 +53,26 @@ def _read_portal_type(self):
         field = self.field
         types = []
 
-        if HAS_CONTENTTREE and not HAS_WIDGETS:
-            filter_ = getattr(field.source, 'selectable_filter', None) or {}
-            types.extend(filter_.criteria.get('portal_type') or [])
-        else:
-            types.extend(field.source.query.get('portal_type') or [])
+        types.extend(field.source.query.get('portal_type') or [])
 
         return types
 
     def _write_portal_type(self, value):
         field = self.field
 
-        if HAS_CONTENTTREE and not HAS_WIDGETS:
-            filter_ = getattr(field.source, 'selectable_filter', None) or {}
-            if value:
-                filter_.criteria['portal_type'] = list(value)
-            elif 'portal_type' in filter_.criteria:
-                del filter_.criteria['portal_type']
-        else:
-            if value:
-                field.source.query['portal_type'] = list(value)
-            elif 'portal_type' in field.source.query:
-                del field.source.query['portal_type']
+        if value:
+            field.source.query['portal_type'] = list(value)
+        elif 'portal_type' in field.source.query:
+            del field.source.query['portal_type']
 
     portal_type = property(_read_portal_type,
                            _write_portal_type)
 
 
-if HAS_CONTENTTREE and not HAS_WIDGETS:
-    RelationChoiceFactory = RelationFieldFactory(
-        RelationChoice, _('Relation Choice'),
-        source=ObjPathSourceBinder()
-    )
-else:
-    RelationChoiceFactory = RelationFieldFactory(
-        RelationChoice, _('Relation Choice'),
-        source=CatalogSource()
-    )
+RelationChoiceFactory = RelationFieldFactory(
+    RelationChoice, _('Relation Choice'),
+    source=CatalogSource()
+)
 
 
 @adapter(interfaces.IRelationList)
@@ -112,41 +90,23 @@ def _read_portal_type(self):
         field = self.field.value_type
         types = []
 
-        if HAS_CONTENTTREE and not HAS_WIDGETS:
-            filter_ = getattr(field.source, 'selectable_filter', None) or {}
-            types.extend(filter_.criteria.get('portal_type') or [])
-        else:
-            types.extend(field.source.query.get('portal_type') or [])
+        types.extend(field.source.query.get('portal_type') or [])
 
         return set(types)
 
     def _write_portal_type(self, value):
         field = self.field.value_type
 
-        if HAS_CONTENTTREE and not HAS_WIDGETS:
-            filter_ = getattr(field.source, 'selectable_filter', None) or {}
-            if value:
-                filter_.criteria['portal_type'] = list(value)
-            elif 'portal_type' in filter_.criteria:
-                del filter_.criteria['portal_type']
-        else:
-            if value:
-                field.source.query['portal_type'] = list(value)
-            elif 'portal_type' in field.source.query:
-                del field.source.query['portal_type']
+        if value:
+            field.source.query['portal_type'] = list(value)
+        elif 'portal_type' in field.source.query:
+            del field.source.query['portal_type']
 
     portal_type = property(_read_portal_type, _write_portal_type)
 
 
-if HAS_CONTENTTREE and not HAS_WIDGETS:
-    RelationListFactory = RelationFieldFactory(
-        RelationList, _('Relation List'),
-        value_type=RelationChoice(title=_(u'Relation Choice'),
-                                  source=ObjPathSourceBinder())
-    )
-else:
-    RelationListFactory = RelationFieldFactory(
-        RelationList, _('Relation List'),
-        value_type=RelationChoice(title=_(u'Relation Choice'),
-                                  source=CatalogSource())
-    )
+RelationListFactory = RelationFieldFactory(
+    RelationList, _('Relation List'),
+    value_type=RelationChoice(title=_(u'Relation Choice'),
+                              source=CatalogSource())
+)
diff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py
index 8ffec97..557b7b6 100644
--- a/plone/app/relationfield/supermodel.py
+++ b/plone/app/relationfield/supermodel.py
@@ -1,16 +1,11 @@
 # -*- coding: utf-8 -*-
-from plone.app.relationfield import HAS_CONTENTTREE
-from plone.app.relationfield import HAS_WIDGETS
 from plone.supermodel.exportimport import BaseHandler
 from plone.supermodel.utils import valueToElement
 from z3c.relationfield.schema import RelationChoice
 from z3c.relationfield.schema import RelationList
 from zope import schema
 
-if HAS_CONTENTTREE and not HAS_WIDGETS:
-    from plone.formwidget.contenttree import ObjPathSourceBinder
-else:
-    from plone.app.vocabularies.catalog import CatalogSource
+from plone.app.vocabularies.catalog import CatalogSource
 
 
 class RelationChoiceBaseHandler(BaseHandler):
@@ -38,11 +33,7 @@ def _constructField(self, attributes):
         if 'portal_type' in attributes:
             del attributes['portal_type']
 
-        if HAS_CONTENTTREE and not HAS_WIDGETS and not portal_type:
-            attributes['source'] = ObjPathSourceBinder()
-        elif HAS_CONTENTTREE and not HAS_WIDGETS:
-            attributes['source'] = ObjPathSourceBinder(portal_type=portal_type)
-        elif not portal_type:
+        if not portal_type:
             attributes['source'] = CatalogSource()
         else:
             attributes['source'] = CatalogSource(portal_type=portal_type)
@@ -55,13 +46,8 @@ def write(self, field, name, type, elementName='field'):
                         self).write(field, name, type, elementName)
         portal_type = []
 
-        if HAS_CONTENTTREE and not HAS_WIDGETS:
-            filter_ = getattr(field.source, 'selectable_filter', None) or {}
-            portal_type.extend(
-                filter_.criteria.get('portal_type') or [])
-        else:
-            portal_type.extend(
-                field.source.query.get('portal_type') or [])
+        portal_type.extend(
+            field.source.query.get('portal_type') or [])
 
         if portal_type:
             attributeField = self.fieldAttributes['portal_type']
diff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py
index de79cdb..679e903 100644
--- a/plone/app/relationfield/tests/test_schemaeditor.py
+++ b/plone/app/relationfield/tests/test_schemaeditor.py
@@ -1,7 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.app.relationfield import HAS_CONTENTTREE
-from plone.app.relationfield import HAS_WIDGETS
-from plone.app.relationfield.testing import FUNCTIONAL_CONTENTTREE_TESTING
 from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING
 from plone.testing import layered
 import doctest
@@ -14,21 +11,12 @@
 
 def test_suite():
     suite = unittest.TestSuite()
-    if HAS_CONTENTTREE and not HAS_WIDGETS:
-        suite.addTests([
-            layered(doctest.DocFileSuite(
-                    os.path.join(os.path.pardir,
-                                 'schemaeditor_contenttree.txt'),
-                    optionflags=optionflags),
-                    FUNCTIONAL_CONTENTTREE_TESTING)
-        ])
-    elif HAS_WIDGETS:
-        suite.addTests([
-            layered(doctest.DocFileSuite(
-                    os.path.join(os.path.pardir, 'schemaeditor.txt'),
-                    optionflags=optionflags),
-                    FUNCTIONAL_WIDGETS_TESTING)
-        ])
+    suite.addTests([
+        layered(doctest.DocFileSuite(
+                os.path.join(os.path.pardir, 'schemaeditor.txt'),
+                optionflags=optionflags),
+                FUNCTIONAL_WIDGETS_TESTING)
+    ])
     return suite
 
 
diff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py
index d8eba2a..ef38074 100644
--- a/plone/app/relationfield/tests/test_supermodel.py
+++ b/plone/app/relationfield/tests/test_supermodel.py
@@ -1,7 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.app.relationfield import HAS_CONTENTTREE
-from plone.app.relationfield import HAS_WIDGETS
-from plone.app.relationfield.testing import FUNCTIONAL_CONTENTTREE_TESTING
 from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING
 from plone.testing import layered
 import doctest
@@ -14,21 +11,12 @@
 
 def test_suite():
     suite = unittest.TestSuite()
-    if HAS_CONTENTTREE and not HAS_WIDGETS:
-        suite.addTests([
-            layered(doctest.DocFileSuite(
-                    os.path.join(os.path.pardir,
-                                 'supermodel_contenttree.txt'),
-                    optionflags=optionflags),
-                    FUNCTIONAL_CONTENTTREE_TESTING)
-        ])
-    elif HAS_WIDGETS:
-        suite.addTests([
-            layered(doctest.DocFileSuite(
-                    os.path.join(os.path.pardir, 'supermodel.txt'),
-                    optionflags=optionflags),
-                    FUNCTIONAL_WIDGETS_TESTING)
-        ])
+    suite.addTests([
+        layered(doctest.DocFileSuite(
+                os.path.join(os.path.pardir, 'supermodel.txt'),
+                optionflags=optionflags),
+                FUNCTIONAL_WIDGETS_TESTING)
+    ])
     return suite
 
 
diff --git a/setup.py b/setup.py
index dc226ab..15e6562 100644
--- a/setup.py
+++ b/setup.py
@@ -40,7 +40,7 @@
           'plone.schemaeditor>=1.3.5.dev0',
           'Products.CMFCore',
           'plone.rfc822',
-          'plone.app.z3cform>=1.1.0'
+          'plone.app.z3cform>=1.1.0.dev0'
       ],
       extras_require={'test': ['plone.app.testing', 'plone.app.dexterity']},
       entry_points="""


