Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-10-01T04:39:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/af2bdc30ef6bb9d4acf36204fe010ca7ccdd3343

Pyflakes plus small pep8.

Files changed:
M Products/CMFPlone/MigrationTool.py
M Products/CMFPlone/PloneControlPanel.py
M Products/CMFPlone/Portal.py
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/TranslationServiceTool.py
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/browser/sendto.py
M Products/CMFPlone/controlpanel/bbb/mail.py
M Products/CMFPlone/controlpanel/browser/mail.py
M Products/CMFPlone/controlpanel/browser/overview.py
M Products/CMFPlone/controlpanel/browser/resourceregistry.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
M Products/CMFPlone/i18nl10n.py
M Products/CMFPlone/tests/PloneTestCase.py
M Products/CMFPlone/tests/testCutPasteSecurity.py
M Products/CMFPlone/tests/testDateTimeIntegration.py
M Products/CMFPlone/tests/testPloneView.py
M Products/CMFPlone/tests/testQuickInstallerTool.py
M Products/CMFPlone/tests/testSSOLogin.py
M Products/CMFPlone/tests/testSecurityDeclarations.py
M Products/CMFPlone/tests/testSiteAdminRole.py
M Products/CMFPlone/utils.py

diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index 6ed732c..3df7dd4 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -114,8 +114,8 @@ class MigrationTool(PloneBaseTool, UniqueObject, SimpleItem):
     toolicon = 'skins/plone_images/site_icon.png'
 
     manage_options = (
-        ({'label': 'Upgrade', 'action': '../@@plone-upgrade'}, )
-        + SimpleItem.manage_options)
+        ({'label': 'Upgrade', 'action': '../@@plone-upgrade'}, ) +
+        SimpleItem.manage_options)
 
     _needRecatalog = 0
     _needUpdateRole = 0
@@ -201,6 +201,7 @@ def coreVersions(self):
                 except pkg_resources.DistributionNotFound:
                     try:
                         import _imaging
+                        _imaging  # pyflakes
                         vars['PIL'] = 'unknown'
                     except ImportError:
                         pass
diff --git a/Products/CMFPlone/PloneControlPanel.py b/Products/CMFPlone/PloneControlPanel.py
index abe1c2e..a127414 100644
--- a/Products/CMFPlone/PloneControlPanel.py
+++ b/Products/CMFPlone/PloneControlPanel.py
@@ -1,25 +1,22 @@
 from AccessControl import ClassSecurityInfo
-from App.special_dtml import DTMLFile
 from App.class_init import InitializeClass
+from App.special_dtml import DTMLFile
 from OFS.Folder import Folder
 from OFS.PropertyManager import PropertyManager
-
-from zope.interface import implements
-from zope.i18n import translate
-from zope.i18nmessageid import Message
-
-from Products.CMFCore.Expression import Expression, createExprContext
 from Products.CMFCore.ActionInformation import ActionInformation
 from Products.CMFCore.ActionProviderBase import ActionProviderBase
+from Products.CMFCore.Expression import Expression, createExprContext
 from Products.CMFCore.permissions import ManagePortal, View
-from Products.CMFCore.utils \
-    import _checkPermission, getToolByName, UniqueObject
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import registerToolInterface
-
+from Products.CMFCore.utils import UniqueObject
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IControlPanel
-from Products.CMFPlone.log import log_deprecated
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
+from zope.i18n import translate
+from zope.i18nmessageid import Message
+from zope.interface import implements
 
 
 class PloneConfiglet(ActionInformation):
@@ -184,13 +181,13 @@ def _extractAction(self, properties, index):
         if category == '':
             category = 'object'
 
-        if type(visible) is not type(0):
+        if not isinstance(visible, int):
             try:
                 visible = int(visible)
             except ValueError:
                 visible = 0
 
-        if type(permissions) is type(''):
+        if not isinstance(permissions, basestring):
             permissions = (permissions, )
 
         return PloneConfiglet(id=id,
@@ -227,7 +224,7 @@ def addAction(self,
         a_expr = action and Expression(text=str(action)) or ''
         c_expr = condition and Expression(text=str(condition)) or ''
 
-        if type(permission) != type(()):
+        if not isinstance(permission, tuple):
             permission = permission and (str(permission), ) or ()
 
         new_actions = self._cloneActions()
@@ -281,13 +278,14 @@ def manage_editActionsForm(self, REQUEST, manage_tabs_message=None):
 
         # possible_permissions is in OFS.role.RoleManager.
         pp = self.possible_permissions()
-        return self._actions_form(self,
-                                  REQUEST,
-                                  actions=actions,
-                                  possible_permissions=pp,
-                                  management_view='Actions',
-                                  manage_tabs_message=manage_tabs_message,
-                                 )
+        return self._actions_form(
+            self,
+            REQUEST,
+            actions=actions,
+            possible_permissions=pp,
+            management_view='Actions',
+            manage_tabs_message=manage_tabs_message,
+            )
 
 InitializeClass(PloneControlPanel)
 registerToolInterface('portal_controlpanel', IControlPanel)
diff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py
index b852281..0f5ca29 100644
--- a/Products/CMFPlone/Portal.py
+++ b/Products/CMFPlone/Portal.py
@@ -1,34 +1,31 @@
-from Products.CMFCore import permissions
-from Products.CMFCore.utils import _checkPermission
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.utils import UniqueObject
-from Products.CMFCore.PortalObject import PortalObjectBase
-from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.PloneFolder import OrderedContainer
-
 from AccessControl import ClassSecurityInfo
 from AccessControl import Permissions
 from AccessControl import Unauthorized
 from Acquisition import aq_base
 from App.class_init import InitializeClass
 from ComputedAttribute import ComputedAttribute
-from webdav.NullResource import NullResource
+from plone.i18n.locales.interfaces import IMetadataLanguageAvailability
+from Products.CMFCore import permissions
 from Products.CMFCore.PortalObject import PortalObjectBase
-from Products.CMFPlone.PloneFolder import ReplaceableWrapper
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
+from Products.CMFCore.utils import UniqueObject
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces.syndication import ISyndicatable
-
-from plone.i18n.locales.interfaces import IMetadataLanguageAvailability
-from zope.interface import implements
-from zope.component import queryUtility
-from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl
 from Products.CMFPlone.permissions import AddPortalContent
 from Products.CMFPlone.permissions import AddPortalFolders
 from Products.CMFPlone.permissions import ListPortalMembers
+from Products.CMFPlone.permissions import ModifyPortalContent
 from Products.CMFPlone.permissions import ReplyToItem
 from Products.CMFPlone.permissions import View
-from Products.CMFPlone.permissions import ModifyPortalContent
+from Products.CMFPlone.PloneFolder import OrderedContainer
+from Products.CMFPlone.PloneFolder import ReplaceableWrapper
+from webdav.NullResource import NullResource
+from zope.component import queryUtility
+from zope.interface import implements
 
 
 class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
@@ -148,8 +145,8 @@ def availableLanguages(self):
         languages.sort(lambda x, y: cmp(x[1], y[1]))
         # Put language neutral at the top.
         languages.insert(0, (u'', _(u'Language neutral (site default)')))
+
         return languages
- 
     def isEffective(self, date):
         """ Override DefaultDublinCoreImpl's test, since we are always viewable.
         """
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index 7d0b713..cfcdeb5 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -1,42 +1,31 @@
-import re
-import random
-from hashlib import md5
-from email import message_from_string
-from smtplib import SMTPException, SMTPRecipientsRefused
-
-from zope.i18nmessageid import MessageFactory
-
-from Acquisition import aq_base, aq_chain
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.RegistrationTool import RegistrationTool as BaseTool
-
-from Products.CMFCore.permissions import AddPortalMember
-
-from App.class_init import InitializeClass
 from AccessControl import ClassSecurityInfo, Unauthorized
 from AccessControl import getSecurityManager
+from AccessControl.requestmethod import postonly
 from AccessControl.SecurityManagement import newSecurityManager
 from AccessControl.SecurityManagement import setSecurityManager
+from Acquisition import aq_base, aq_chain
+from App.class_init import InitializeClass
+from email import message_from_string
+from hashlib import md5
 from plone.registry.interfaces import IRegistry
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.CMFCore.permissions import AddPortalMember
+from Products.CMFCore.RegistrationTool import RegistrationTool as BaseTool
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.permissions import ManagePortal
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
 from Products.CMFPlone.PloneTool import EMAIL_RE
-from Products.CMFCore.utils import _checkPermission
-
-from Products.PluggableAuthService.permissions import SetOwnPassword
-
+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
-from Products.PluggableAuthService.interfaces.authservice \
-        import IPluggableAuthService
-
-from AccessControl.requestmethod import postonly
-from Acquisition import aq_base
+from Products.PluggableAuthService.permissions import SetOwnPassword
+from smtplib import SMTPException, SMTPRecipientsRefused
 from zope.component import getUtility
+from zope.i18nmessageid import MessageFactory
 from zope.schema import ValidationError
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.permissions import ManagePortal
-
+import random
+import re
 
 # - remove '1', 'l', and 'I' to avoid confusion
 # - remove '0', 'O', and 'Q' to avoid confusion
@@ -133,7 +122,6 @@ def _getValidEmailAddress(self, member):
         checkEmailAddress(email)
         return email
 
-
     # Get a password of the prescribed length
     #
     # For s=None, generates a random password
diff --git a/Products/CMFPlone/TranslationServiceTool.py b/Products/CMFPlone/TranslationServiceTool.py
index ab94efb..7c7e9b6 100644
--- a/Products/CMFPlone/TranslationServiceTool.py
+++ b/Products/CMFPlone/TranslationServiceTool.py
@@ -2,25 +2,26 @@
 This tool requires a translation service which supports
 the translate method and the default parameter.
 """
-from zope.i18n import translate
-from zope.interface import implements
-from zope.publisher.interfaces.browser import IBrowserRequest
 
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
 from Acquisition import aq_get
+from App.class_init import InitializeClass
+from i18nl10n import monthname_english
+from i18nl10n import monthname_msgid
+from i18nl10n import monthname_msgid_abbr
+from i18nl10n import ulocalized_time
+from i18nl10n import weekdayname_english
+from i18nl10n import weekdayname_msgid
+from i18nl10n import weekdayname_msgid_abbr
+from i18nl10n import weekdayname_msgid_short
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import UniqueObject
 from Products.CMFPlone import PloneLocalesMessageFactory as PLMF
 from Products.CMFPlone.interfaces import ITranslationServiceTool
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-
-from i18nl10n import ulocalized_time, \
-                     monthname_msgid, monthname_msgid_abbr, \
-                     weekdayname_msgid, weekdayname_msgid_abbr, \
-                     weekdayname_msgid_short, \
-                     monthname_english, weekdayname_english
+from zope.i18n import translate
+from zope.interface import implements
+from zope.publisher.interfaces.browser import IBrowserRequest
 
 
 class TranslationServiceTool(PloneBaseTool, UniqueObject, SimpleItem):
diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index ad85e53..f54e8ff 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -1,13 +1,12 @@
-from Products.CMFCore.URLTool import URLTool as BaseTool
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
-from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import ILoginSchema
 from posixpath import normpath
+from Products.CMFCore.URLTool import URLTool as BaseTool
+from Products.CMFPlone.interfaces import ILoginSchema
+from Products.CMFPlone.PloneBaseTool import PloneBaseTool
 from urlparse import urlparse, urljoin
+from zope.component import getUtility
 import re
 
 
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 606e980..09c2af5 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -12,7 +12,6 @@
 from Products.GenericSetup.upgrade import normalize_version
 from ZPublisher.BaseRequest import DefaultPublishTraverse
 from collections import OrderedDict
-from operator import itemgetter
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.authenticator import check as checkCSRF
diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py
index ae5bd2e..7dfbd62 100644
--- a/Products/CMFPlone/browser/navigation.py
+++ b/Products/CMFPlone/browser/navigation.py
@@ -13,7 +13,6 @@
 from Products.CMFPlone.browser.navtree import SitemapQueryBuilder
 from Products.CMFPlone.interfaces import IHideFromBreadcrumbs
 from Products.CMFPlone.interfaces import INavigationSchema
-from Products.CMFPlone.interfaces import ITypesSchema
 from Products.Five import BrowserView
 from zope.component import getMultiAdapter
 from zope.component import getUtility
diff --git a/Products/CMFPlone/browser/sendto.py b/Products/CMFPlone/browser/sendto.py
index 47a38aa..600b528 100644
--- a/Products/CMFPlone/browser/sendto.py
+++ b/Products/CMFPlone/browser/sendto.py
@@ -10,7 +10,6 @@
 from plone.registry.interfaces import IRegistry
 from plone.z3cform import layout
 
-from zope.component import getMultiAdapter
 from zope.component import getUtility
 
 from z3c.form import form
@@ -49,18 +48,6 @@ def handle_send(self, action):
             )
             return
 
-        portal_state = getMultiAdapter(
-            (self.context, self.request),
-            name=u'plone_portal_state'
-        )
-        site = portal_state.portal()
-
-        context_state = getMultiAdapter(
-            (self.context, self.request),
-            name=u'plone_context_state'
-        )
-        url = context_state.view_url()
-
         send_from_address = data.get('send_from_address')
         send_to_address = data.get('send_to_address')
         subject = pretty_title_or_id(self, self.context)
diff --git a/Products/CMFPlone/controlpanel/bbb/mail.py b/Products/CMFPlone/controlpanel/bbb/mail.py
index 03e4c43..e57f28a 100644
--- a/Products/CMFPlone/controlpanel/bbb/mail.py
+++ b/Products/CMFPlone/controlpanel/bbb/mail.py
@@ -1,7 +1,5 @@
-from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
-from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.utils import safe_hasattr
 from plone.registry.interfaces import IRegistry
 from zope.component import adapts
@@ -48,7 +46,7 @@ def get_smtp_userid(self):
     def set_smtp_userid(self, value):
         if safe_hasattr(self.mail_settings, 'smtp_userid'):
             self.mail_settings.smtp_userid = value
-            #SecureMailhost 1.x also uses this:
+            # SecureMailhost 1.x also uses this:
             if safe_hasattr(self.mail_settings, '_smtp_userid'):
                 self.mail_settings._smtp_userid = value
         elif safe_hasattr(self.mail_settings, 'smtp_userid'):
@@ -65,7 +63,7 @@ def set_smtp_pass(self, value):
         if value is not None:
             if safe_hasattr(self.mail_settings, 'smtp_pass'):
                 self.mail_settings.smtp_pass = value
-                #SecureMailhost 1.x also uses this:
+                # SecureMailhost 1.x also uses this:
                 if safe_hasattr(self.mail_settings, '_smtp_pass'):
                     self.mail_settings._smtp_pass = value
             elif safe_hasattr(self.mail_settings, 'smtp_pwd'):
diff --git a/Products/CMFPlone/controlpanel/browser/mail.py b/Products/CMFPlone/controlpanel/browser/mail.py
index 9263d64..acfad24 100644
--- a/Products/CMFPlone/controlpanel/browser/mail.py
+++ b/Products/CMFPlone/controlpanel/browser/mail.py
@@ -36,9 +36,9 @@ def save(self):
         if errors:
             self.status = self.formErrorsMessage
             return False
-        #keep password field
-        if (data.get('smtp_userid') is not None
-            and data.get('smtp_pass') is None):
+        # keep password field
+        if (data.get('smtp_userid') is not None and
+                data.get('smtp_pass') is None):
             del data['smtp_pass']
         self.applyChanges(data)
         return True
@@ -55,7 +55,6 @@ def handle_test_action(self, action):
         registry = getUtility(IRegistry)
         mail_settings = registry.forInterface(IMailSchema, prefix='plone')
         fromaddr = mail_settings.email_from_address
-        fromname = mail_settings.email_from_name
 
         message = ("Hi,\n\nThis is a test message sent from the Plone "
                    "'Mail settings' control panel. Your receipt of this "
diff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py
index b092331..74d0c72 100644
--- a/Products/CMFPlone/controlpanel/browser/overview.py
+++ b/Products/CMFPlone/controlpanel/browser/overview.py
@@ -10,7 +10,8 @@
 from zope.component import getUtility
 
 try:
-    import plone.app.event  # nopep8
+    import plone.app.event
+    plone.app.event  # pyflakes
     HAS_PAE = True
 except ImportError:
     HAS_PAE = False
diff --git a/Products/CMFPlone/controlpanel/browser/resourceregistry.py b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
index 8c225de..ab7475c 100644
--- a/Products/CMFPlone/controlpanel/browser/resourceregistry.py
+++ b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
@@ -60,7 +60,7 @@ def updateRecordFromDict(record, data):
             full_name = record.__prefix__ + name
             try:
                 record.__registry__[full_name] = val
-            except (AttributeError, KeyError) as ex:  # noqa
+            except (AttributeError, KeyError):
                 # upgrade record on the fly, try to at least
                 if not val:
                     continue
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
index f974d9c..d42a617 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
@@ -1,16 +1,10 @@
 # -*- coding: utf-8 -*-
 from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
-from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
-
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
 from zope.component import getMultiAdapter
-from zope.component import getUtility
-from Products.CMFPlone.interfaces import ISiteSyndicationSettings
-from Products.CMFPlone.testing import \
-    PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
-
-import unittest2 as unittest
 import transaction
+import unittest2 as unittest
 
 
 class SyndicationControlPanelFunctionalTest(unittest.TestCase):
@@ -116,4 +110,3 @@ def test_create_collection(self):
 
         self.browser.open(self.portal_url + '/collection')
         self.assertTrue('/RSS' in self.browser.contents)
-
diff --git a/Products/CMFPlone/i18nl10n.py b/Products/CMFPlone/i18nl10n.py
index 6f8b01a..c59a6f3 100644
--- a/Products/CMFPlone/i18nl10n.py
+++ b/Products/CMFPlone/i18nl10n.py
@@ -14,7 +14,6 @@
 from DateTime.interfaces import IDateTime
 
 from plone.registry.interfaces import IRegistry
-from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import log
 
 # these are taken from PTS, used for format interpolation
@@ -104,6 +103,7 @@ def get_formatstring_from_registry(msgid):
     record_name = name_root + msgid
     return registry.get(record_name, None)
 
+
 def ulocalized_time(time, long_format=None, time_only=False, context=None,
                     domain='plonelocales', request=None, target_language=None):
     """unicode aware localized time method (l10n)"""
@@ -164,7 +164,7 @@ def ulocalized_time(time, long_format=None, time_only=False, context=None,
     # 1. if our Enabled flag in the configuration registry is set,
     # the format string there should override the translation machinery
     formatstring = get_formatstring_from_registry(msgid)
-    if not formatstring is None:
+    if formatstring is not None:
         return time.strftime(formatstring)
 
     # 2. the normal case: translation machinery,
@@ -175,11 +175,11 @@ def ulocalized_time(time, long_format=None, time_only=False, context=None,
     # 3. if both failed, fall back to hardcoded ISO style
     if formatstring == msgid:
         if msgid == 'date_format_long':
-            formatstring = '%Y-%m-%d %H:%M' # 2038-01-19 03:14
+            formatstring = '%Y-%m-%d %H:%M'  # 2038-01-19 03:14
         elif msgid == 'date_format_short':
-            formatstring = '%Y-%m-%d' # 2038-01-19
+            formatstring = '%Y-%m-%d'  # 2038-01-19
         elif msgid == 'time_format':
-            formatstring = '%H:%M' # 03:14
+            formatstring = '%H:%M'  # 03:14
         else:
             formatstring = '[INTERNAL ERROR]'
         return time.strftime(formatstring)
@@ -229,6 +229,7 @@ def ulocalized_time(time, long_format=None, time_only=False, context=None,
     return translate(msgid, domain, mapping, request,
                      target_language=target_language)
 
+
 def _numbertoenglishname(number, format=None, attr='_days'):
     # returns the english name of day or month number
     # starting with Sunday == 0
diff --git a/Products/CMFPlone/tests/PloneTestCase.py b/Products/CMFPlone/tests/PloneTestCase.py
index 32f1023..dd09c15 100644
--- a/Products/CMFPlone/tests/PloneTestCase.py
+++ b/Products/CMFPlone/tests/PloneTestCase.py
@@ -9,6 +9,9 @@
 from re import match
 import transaction
 
+# We do not use these, but someone might import them.
+portal_name, default_user  # pyflakes
+
 
 class PloneTestCase(PloneTestCase):
     """This is a stub now, but in case you want to try
diff --git a/Products/CMFPlone/tests/testCutPasteSecurity.py b/Products/CMFPlone/tests/testCutPasteSecurity.py
index d562606..3c9a2f8 100644
--- a/Products/CMFPlone/tests/testCutPasteSecurity.py
+++ b/Products/CMFPlone/tests/testCutPasteSecurity.py
@@ -1,6 +1,5 @@
 from AccessControl import Unauthorized
 from Acquisition import aq_base
-from OFS.CopySupport import CopyError
 from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
 from Products.CMFCore.interfaces import IContentish
 from urllib2 import HTTPError
@@ -165,9 +164,10 @@ def testObject_pasteUncommitOnException(self):
             browser.open(self.folder['destination-folder'].absolute_url())
             try:
                 browser.getLink('Paste').click()
-            except HTTPError, msg:
-                # a HTTP 500 Server error is currently expected, unless we find a better way
-                # to abort the transaction.
+            except HTTPError:
+                # a HTTP 500 Server error is currently expected,
+                # unless we find a better way to abort the
+                # transaction.
                 pass
 
             # test if document is not moved
@@ -176,7 +176,8 @@ def testObject_pasteUncommitOnException(self):
 
         finally:
             # unregister event handler
-            getGlobalSiteManager().unregisterHandler(failingEventHandler, [IContentish, IObjectMovedEvent])
+            getGlobalSiteManager().unregisterHandler(
+                failingEventHandler, [IContentish, IObjectMovedEvent])
 
     def testFolder_pasteUncommitOnException(self):
         # register event handler
@@ -188,9 +189,10 @@ def testFolder_pasteUncommitOnException(self):
             browser.open(self.folder['destination-folder'].absolute_url())
             try:
                 browser.getLink('Paste').click()
-            except HTTPError, msg:
-                # a HTTP 500 Server error is currently expected, unless we find a better way
-                # to abort the transaction.
+            except HTTPError:
+                # a HTTP 500 Server error is currently expected,
+                # unless we find a better way to abort the
+                # transaction.
                 pass
 
             # test if document is not moved
@@ -199,4 +201,5 @@ def testFolder_pasteUncommitOnException(self):
 
         finally:
             # unregister event handler
-            getGlobalSiteManager().unregisterHandler(failingEventHandler, [IContentish, IObjectMovedEvent])
+            getGlobalSiteManager().unregisterHandler(
+                failingEventHandler, [IContentish, IObjectMovedEvent])
diff --git a/Products/CMFPlone/tests/testDateTimeIntegration.py b/Products/CMFPlone/tests/testDateTimeIntegration.py
index 613832e..1644550 100644
--- a/Products/CMFPlone/tests/testDateTimeIntegration.py
+++ b/Products/CMFPlone/tests/testDateTimeIntegration.py
@@ -10,7 +10,6 @@
 
 from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
 from DateTime import DateTime
-from time import localtime
 
 
 class DateTimeTests(PloneTestCase):
diff --git a/Products/CMFPlone/tests/testPloneView.py b/Products/CMFPlone/tests/testPloneView.py
index dc7aa92..4c2dd07 100644
--- a/Products/CMFPlone/tests/testPloneView.py
+++ b/Products/CMFPlone/tests/testPloneView.py
@@ -1,10 +1,6 @@
-from zope.component import getUtility
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone.tests import dummy
-from Products.CMFPlone.interfaces import IEditingSchema
-from plone.registry.interfaces import IRegistry
-
 from Products.CMFPlone.browser.ploneview import Plone
+from Products.CMFPlone.tests import dummy
+from Products.CMFPlone.tests import PloneTestCase
 
 
 class TestPloneView(PloneTestCase.PloneTestCase):
@@ -143,8 +139,8 @@ def testCropText(self):
         self.assertEqual(view.cropText('Hello world', 99), 'Hello world')
         self.assertEqual(view.cropText('Hello world', 10), 'Hello worl...')
         self.assertEqual(view.cropText(u'Hello world', 10), u'Hello worl...')
-        self.assertEqual(view.cropText(u'Koko\u0159\xedn', 5),
-                                       u'Koko\u0159...')
+        self.assertEqual(
+            view.cropText(u'Koko\u0159\xedn', 5), u'Koko\u0159...')
         # Test utf encoded string Kokorin with 'r' and 'i' accented
         # Must return 6 characters, because 5th character is two byte
         text = u'Koko\u0159\xedn'.encode('utf8')
diff --git a/Products/CMFPlone/tests/testQuickInstallerTool.py b/Products/CMFPlone/tests/testQuickInstallerTool.py
index 1a323f5..2b2046d 100644
--- a/Products/CMFPlone/tests/testQuickInstallerTool.py
+++ b/Products/CMFPlone/tests/testQuickInstallerTool.py
@@ -17,6 +17,7 @@ def _available(self):
     def testInstallUninstallProduct(self):
         try:
             import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
         except ImportError:
             return
         # CMFPlacefulWorkflow should be uninstalled, we install it and
diff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py
index 9af633f..c104a1f 100644
--- a/Products/CMFPlone/tests/testSSOLogin.py
+++ b/Products/CMFPlone/tests/testSSOLogin.py
@@ -3,9 +3,6 @@
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing import TEST_USER_ROLES
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import ILoginSchema
 from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
 from Products.CMFPlone.factory import addPloneSite
 import transaction
diff --git a/Products/CMFPlone/tests/testSecurityDeclarations.py b/Products/CMFPlone/tests/testSecurityDeclarations.py
index 379eb4a..584f7e2 100644
--- a/Products/CMFPlone/tests/testSecurityDeclarations.py
+++ b/Products/CMFPlone/tests/testSecurityDeclarations.py
@@ -196,7 +196,7 @@ def testCatch_ConflictErrorRaisedByRestrictedCode(self):
 
     def testCatch_ConflictErrorRaisedByPythonModule(self):
         self.app._setObject('raiseConflictError',
-                               dummy.Raiser(ConflictError))
+                            dummy.Raiser(ConflictError))
         try:
             self.check('''
 from ZODB.POSException import ConflictError
@@ -227,6 +227,7 @@ def testCatch_ParseErrorRaisedByPythonModule(self):
                       (e.__class__.__name__, e, e.__module__))
 
     from DateTime.interfaces import DateTimeError
+    DateTimeError  # pyflakes
 
     def testImport_DateTimeError(self):
         self.check('from DateTime.interfaces import DateTimeError')
@@ -249,6 +250,7 @@ def testCatch_DateTimeErrorRaisedByPythonModule(self):
                       (e.__class__.__name__, e, e.__module__))
 
     from DateTime.DateTime import SyntaxError
+    SyntaxError  # pyflakes
 
     def testImport_SyntaxError(self):
         self.check('from DateTime.interfaces import SyntaxError')
@@ -379,7 +381,7 @@ def test_sendto_script_failes(self):
         # get sendto browser view in context of folder
         try:
             sendto = self.folder.restrictedTraverse('@@sendto_form')
-            msg = sendto()
+            sendto()
             self.fail("Sendto did not throw unauthorized")
         except Unauthorized:
             pass
diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index 6c01cf9..025618b 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -212,6 +212,7 @@ def testExpectedPermissions(self):
             })
         try:
             import plone.app.iterate
+            plone.app.iterate  # pyflakes
         except ImportError:
             pass
         else:
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 5cf579e..60c51ab 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -68,9 +68,10 @@
 
 # Log methods
 from log import log
-from log import log_exc  # noqa
-from log import log_deprecated  # noqa
+from log import log_exc
+from log import log_deprecated
 
+log_exc  # pyflakes.  Keep this, as someone may import it.
 _marker = []
 
 
@@ -513,6 +514,7 @@ def webdav_enabled(obj, container):
 
 security.declarePrivate('sys')
 
+
 def _unrestricted_rename(container, id, new_id):
     """Rename a particular sub-object
 


