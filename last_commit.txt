Repository: plone.protect


Branch: refs/heads/master
Date: 2015-09-26T05:38:55-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.protect/commit/63421f894a6f68b4f750995dadd406c4d398e7aa

Revert "change pluggable auth patches to marmoset"

Files changed:
M CHANGES.rst
M plone/protect/configure.zcml
M plone/protect/monkey.py
D plone/protect/tests/testPatches.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a163246..e10e034 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,11 +4,6 @@ Changelog
 3.0.9 (unreleased)
 ------------------
 
-- patch pluggable auth with marmoset patch because
-  the patch would not apply otherwise depending on
-  somewhat-random import order
-  [vangheem]
-
 - get auto-csrf protection working on the zope root
   [vangheem]
 
diff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml
index d6f66d3..6adc474 100644
--- a/plone/protect/configure.zcml
+++ b/plone/protect/configure.zcml
@@ -60,4 +60,19 @@
         preserveOriginal="True"
         />
 
+    <monkey:patch
+        zcml:condition="installed Products.PluggableAuthService.utils.getCSRFToken"
+        description="Patch old pluggable auth to use plone mechanism"
+        class="Products.PluggableAuthService.utils"
+        original="getCSRFToken"
+        replacement=".monkey.pluggableauth__getCSRFToken"
+        />
+    <monkey:patch
+        zcml:condition="installed Products.PluggableAuthService.utils.checkCSRFToken"
+        description="Patch old pluggable auth to use plone mechanism"
+        class="Products.PluggableAuthService.utils"
+        original="checkCSRFToken"
+        replacement=".monkey.pluggableauth__checkCSRFToken"
+        />
+
 </configure>
diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py
index 06c8dae..45b2763 100644
--- a/plone/protect/monkey.py
+++ b/plone/protect/monkey.py
@@ -1,7 +1,5 @@
 from urlparse import urlparse, urljoin
 from plone.protect.auto import safeWrite
-import inspect
-from Products.PluggableAuthService import utils as pluggable_utils
 
 
 def RedirectTo__call__(self, controller_state):
@@ -53,16 +51,3 @@ def pluggableauth__checkCSRFToken(request, token='csrf_token', raises=True):
     let plone.protect do it's job
     """
     pass
-
-
-def marmoset_patch(func, replacement):
-    source = inspect.getsource(replacement)
-    exec source in func.func_globals
-    func.func_code = replacement.func_code
-
-
-# otherwise the patches do not get applied in some cases
-if hasattr(pluggable_utils, 'checkCSRFToken'):
-    marmoset_patch(pluggable_utils.checkCSRFToken, pluggableauth__checkCSRFToken)
-if hasattr(pluggable_utils, 'getCSRFToken'):
-    marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)
\ No newline at end of file
diff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py
deleted file mode 100644
index 524cba1..0000000
--- a/plone/protect/tests/testPatches.py
+++ /dev/null
@@ -1,27 +0,0 @@
-from plone.app.testing import SITE_OWNER_NAME
-from plone.app.testing import SITE_OWNER_PASSWORD
-from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
-from plone.testing.z2 import Browser
-import unittest2 as unittest
-
-
-class TestCSRF(unittest.TestCase):
-    layer = PROTECT_FUNCTIONAL_TESTING
-
-    def setUp(self):
-        self.portal = self.layer['portal']
-        self.browser = Browser(self.layer['app'])
-        self.request = self.layer['request']
-        self.browser.addHeader(
-            'Authorization', 'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
-
-    def test_change_password_on_root_does_not_throw_other_csrf_protection(self):
-        self.browser.open('%s/acl_users/users/manage_users?user_id=%s&passwd=1' % (
-            self.layer['app'].absolute_url(), SITE_OWNER_NAME))
-        self.browser.getControl(name='password').value = SITE_OWNER_PASSWORD
-        self.browser.getControl(name='confirm').value = SITE_OWNER_PASSWORD
-        self.browser.getForm().submit()
-        self.assertEquals(
-            self.browser.url,
-            '%s/acl_users/users/manage_users?manage_tabs_message=password+updated' % (
-                self.layer['app'].absolute_url()))


Repository: plone.protect


Branch: refs/heads/master
Date: 2015-09-26T05:39:11-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.protect/commit/a6cf474ed0261562221c6a1bb32f1005344dbe68

Merge pull request #19 from plone/revert-18-repatch-pluggableauth

Revert "change pluggable auth patches to marmoset"

Files changed:
M CHANGES.rst
M plone/protect/configure.zcml
M plone/protect/monkey.py
D plone/protect/tests/testPatches.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a163246..e10e034 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,11 +4,6 @@ Changelog
 3.0.9 (unreleased)
 ------------------
 
-- patch pluggable auth with marmoset patch because
-  the patch would not apply otherwise depending on
-  somewhat-random import order
-  [vangheem]
-
 - get auto-csrf protection working on the zope root
   [vangheem]
 
diff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml
index d6f66d3..6adc474 100644
--- a/plone/protect/configure.zcml
+++ b/plone/protect/configure.zcml
@@ -60,4 +60,19 @@
         preserveOriginal="True"
         />
 
+    <monkey:patch
+        zcml:condition="installed Products.PluggableAuthService.utils.getCSRFToken"
+        description="Patch old pluggable auth to use plone mechanism"
+        class="Products.PluggableAuthService.utils"
+        original="getCSRFToken"
+        replacement=".monkey.pluggableauth__getCSRFToken"
+        />
+    <monkey:patch
+        zcml:condition="installed Products.PluggableAuthService.utils.checkCSRFToken"
+        description="Patch old pluggable auth to use plone mechanism"
+        class="Products.PluggableAuthService.utils"
+        original="checkCSRFToken"
+        replacement=".monkey.pluggableauth__checkCSRFToken"
+        />
+
 </configure>
diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py
index 06c8dae..45b2763 100644
--- a/plone/protect/monkey.py
+++ b/plone/protect/monkey.py
@@ -1,7 +1,5 @@
 from urlparse import urlparse, urljoin
 from plone.protect.auto import safeWrite
-import inspect
-from Products.PluggableAuthService import utils as pluggable_utils
 
 
 def RedirectTo__call__(self, controller_state):
@@ -53,16 +51,3 @@ def pluggableauth__checkCSRFToken(request, token='csrf_token', raises=True):
     let plone.protect do it's job
     """
     pass
-
-
-def marmoset_patch(func, replacement):
-    source = inspect.getsource(replacement)
-    exec source in func.func_globals
-    func.func_code = replacement.func_code
-
-
-# otherwise the patches do not get applied in some cases
-if hasattr(pluggable_utils, 'checkCSRFToken'):
-    marmoset_patch(pluggable_utils.checkCSRFToken, pluggableauth__checkCSRFToken)
-if hasattr(pluggable_utils, 'getCSRFToken'):
-    marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)
\ No newline at end of file
diff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py
deleted file mode 100644
index 524cba1..0000000
--- a/plone/protect/tests/testPatches.py
+++ /dev/null
@@ -1,27 +0,0 @@
-from plone.app.testing import SITE_OWNER_NAME
-from plone.app.testing import SITE_OWNER_PASSWORD
-from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
-from plone.testing.z2 import Browser
-import unittest2 as unittest
-
-
-class TestCSRF(unittest.TestCase):
-    layer = PROTECT_FUNCTIONAL_TESTING
-
-    def setUp(self):
-        self.portal = self.layer['portal']
-        self.browser = Browser(self.layer['app'])
-        self.request = self.layer['request']
-        self.browser.addHeader(
-            'Authorization', 'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
-
-    def test_change_password_on_root_does_not_throw_other_csrf_protection(self):
-        self.browser.open('%s/acl_users/users/manage_users?user_id=%s&passwd=1' % (
-            self.layer['app'].absolute_url(), SITE_OWNER_NAME))
-        self.browser.getControl(name='password').value = SITE_OWNER_PASSWORD
-        self.browser.getControl(name='confirm').value = SITE_OWNER_PASSWORD
-        self.browser.getForm().submit()
-        self.assertEquals(
-            self.browser.url,
-            '%s/acl_users/users/manage_users?manage_tabs_message=password+updated' % (
-                self.layer['app'].absolute_url()))


