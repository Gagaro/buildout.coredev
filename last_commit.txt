Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2015-06-19T10:57:44-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/8d2bd65d4851d85026cd379db92188c31a43dcef

rewrite css files when saving customized files in the resource registry closes #629

Files changed:
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/resourceregistry.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6b7a3d8..264551e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,9 @@ Changelog
 5.0b3 (unreleased)
 ------------------
 
+- rewrite css files when saving customized files in the resource registry
+  [vangheem]
+
 - Update links to point to '@@overview-controlpanel'.
   Fixes https://github.com/plone/Products.CMFPlone/issues/573
   [gforcada]
diff --git a/Products/CMFPlone/controlpanel/browser/resourceregistry.py b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
index 12f4d66..69acf68 100644
--- a/Products/CMFPlone/controlpanel/browser/resourceregistry.py
+++ b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
@@ -11,11 +11,16 @@
 from zExceptions import NotFound
 from zope.component import getUtility
 import json
+import re
 from Products.CMFPlone.resources import add_bundle_on_request
 from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
 from plone.registry import field
 from plone.registry.record import Record
 from Products.statusmessages.interfaces import IStatusMessage
+import posixpath
+
+
+CSS_URL_REGEX = re.compile('url\(([^)]+)\)')
 
 
 class JSONEncoder(json.JSONEncoder):
@@ -78,9 +83,50 @@ def save_file(self, filepath, data):
         if resource_name not in self.container:
             self.container.makeDirectory(resource_name)
         folder = self.container[resource_name]
+        if '.css' in resource_filepath:
+            data = self.make_links_relative(filepath, data)
         folder.writeFile(resource_filepath, data)
         return folder[resource_filepath]
 
+    def _rewrite_url(self, css_url, asset_url):
+        """
+        Pulled from:
+        http://stackoverflow.com/questions/7469573/how-to-construct-relative-url-given-two-absolute-urls-in-python
+
+        """
+        base = urlparse(css_url)
+        target = urlparse(asset_url)
+        if base.netloc != target.netloc:
+            return asset_url
+        base_dir = '.' + posixpath.dirname(base.path)
+        target = '.' + target.path
+        return posixpath.relpath(target, start=base_dir)
+
+    def make_links_relative(self, filepath, data):
+        """
+        make sure we don't write out any full urls.
+        filepath will be something like foo/bar.css
+        and the full real url will be something like http://site-url/++plone++foo/bar.css
+
+        So we'll be everything relative the resource path.
+
+
+        """
+        site_url = self.context.absolute_url()
+        full_resource_url = '%s/++plone++%s' % (site_url, filepath)
+        for css_url in CSS_URL_REGEX.findall(data):
+            if css_url.startswith("data:"):
+                continue
+            if css_url.find("data:image") > 0:
+                continue
+
+            css_url = css_url.lstrip('url(').rstrip(')').\
+                strip('"').strip("'")
+            if css_url.startswith(site_url):
+                data = data.replace(css_url, self._rewrite_url(full_resource_url, css_url))
+
+        return data
+
     def delete_file(self, filepath):
         resource_name, resource_filepath = filepath.split('/', 1)
 
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index aa19ef2..18c42fb 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -7,6 +7,7 @@
 from Products.GenericSetup.context import SetupEnviron
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
+from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager
 from plone.subrequest import subrequest
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
 from Products.CMFPlone.resources.exportimport.resourceregistry import (
@@ -228,4 +229,43 @@ def test_be_able_to_disable_but_not_remove(self):
         self.assertEquals(len(resources) - 1,
                           len(self._get_legacy_bundle().resources))
         self.assertEquals(len(js_files),
-                          len([x.js for x in self._get_resources().values()]))
\ No newline at end of file
+                          len([x.js for x in self._get_resources().values()]))
+
+
+class TestControlPanel(PloneTestCase.PloneTestCase):
+
+    def test_save_override_file(self):
+        req = self.layer['request']
+        req.environ['PATH_INFO'] = '++plone++foo/bar.css'
+        mng = OverrideFolderManager(self.portal)
+        mng.save_file('foo/bar.css', 'foobar')
+        value = self.portal.restrictedTraverse('++plone++foo/bar.css')
+        self.assertEquals(str(value), 'foobar')
+
+    def test_override_rewrite_links(self):
+        req = self.layer['request']
+        req.environ['PATH_INFO'] = '++plone++foo/bar.css'
+        mng = OverrideFolderManager(self.portal)
+        css = """
+.foo {
+    background-image: url("%(site_url)s/foobar.css");
+}
+.bar {
+    background-image: url("%(site_url)s/++plone++foo/bar/foobar.css");
+}
+.foobar {
+    background-image: url("%(site_url)s/foo/bar/foobar.css");
+}""" % {'site_url': self.portal.absolute_url()}
+        mng.save_file('foo/bar.css', css)
+        value = self.portal.restrictedTraverse('++plone++foo/bar.css')
+        match = """
+.foo {
+    background-image: url("../foobar.css");
+}
+.bar {
+    background-image: url("bar/foobar.css");
+}
+.foobar {
+    background-image: url("../foo/bar/foobar.css");
+}"""
+        self.assertEquals(str(value), match)
\ No newline at end of file


