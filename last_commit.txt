Repository: mockup


Branch: refs/heads/master
Date: 2015-10-17T12:12:17Z
Author: JC Brand (jcbrand) <jc@opkode.com>
Commit: https://github.com/plone/mockup/commit/181e986e7b2a674af850143035a38831e46234b9

Check loadLinksWithinModal before swallowing click events.

Files changed:
M mockup/patterns/modal/pattern.js

diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js
index 3f7c4a0..b7b36fb 100644
--- a/mockup/patterns/modal/pattern.js
+++ b/mockup/patterns/modal/pattern.js
@@ -469,16 +469,6 @@ define([
 
         self.$modal
           .addClass(self.options.templateOptions.className)
-          .on('click', function(e) {
-            e.stopPropagation();
-            if ($.nodeName(e.target, 'a')) {
-              e.preventDefault();
-
-              // TODO: open links inside modal
-              // and slide modal body
-            }
-            self.$modal.trigger('modal-click');
-          })
           .on('destroy.plone-modal.patterns', function(e) {
             e.stopPropagation();
             self.hide();
@@ -489,8 +479,19 @@ define([
             self.positionModal();
           })
           .appendTo(self.$wrapperInner);
-        self.$modal.data('pattern-' + self.name, self);
 
+        if (self.options.loadLinksWithinModal) {
+          self.$modal.on('click', function(e) {
+            e.stopPropagation();
+            if ($.nodeName(e.target, 'a')) {
+              e.preventDefault();
+              // TODO: open links inside modal
+              // and slide modal body
+            }
+            self.$modal.trigger('modal-click');
+          });
+        }
+        self.$modal.data('pattern-' + self.name, self);
         self.emit('after-render');
       }
     },


Repository: mockup


Branch: refs/heads/master
Date: 2015-10-17T12:41:10Z
Author: JC Brand (jcbrand) <jc@opkode.com>
Commit: https://github.com/plone/mockup/commit/b4c360d98c2c2918a948476af940861040ed53b1

Mockup parser doesn't appear to handle booleans.

Files changed:
M mockup/patterns/modal/pattern.js

diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js
index b7b36fb..d84a220 100644
--- a/mockup/patterns/modal/pattern.js
+++ b/mockup/patterns/modal/pattern.js
@@ -500,6 +500,7 @@ define([
     },
     init: function() {
       var self = this;
+      self.options.loadLinksWithinModal = $.parseJSON(self.options.loadLinksWithinModal);
 
       self.backdrop = new Backdrop(
           self.$el.parents(self.options.backdrop),


Repository: mockup


Branch: refs/heads/master
Date: 2015-10-17T13:23:11Z
Author: JC Brand (jcbrand) <jc@opkode.com>
Commit: https://github.com/plone/mockup/commit/901851557ae874d73aeab47ccdd82741dc4f269d

Trying to figure out why options are wrong in callback

Files changed:
M mockup/patterns/modal/pattern.js

diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js
index d84a220..5070a1c 100644
--- a/mockup/patterns/modal/pattern.js
+++ b/mockup/patterns/modal/pattern.js
@@ -187,10 +187,7 @@ define([
         if (self.options.automaticallyAddButtonActions) {
           actions[self.options.buttons] = {};
         }
-
-        if (self.options.loadLinksWithinModal) {
-          actions.a = {};
-        }
+        actions.a = {};
 
         $.each(actions, function(action, options) {
           var actionKeys = _.union(_.keys(self.options.actionOptions), ['templateOptions']);
@@ -527,10 +524,10 @@ define([
           .on('click', function(e) {
             e.stopPropagation();
             e.preventDefault();
-            if (self.options.backdropOptions.closeOnClick) {
-              self.backdrop.hide();
+            if (this.options.backdropOptions.closeOnClick) {
+              this.backdrop.hide();
             }
-          });
+          }.bind(this));
       }
 
       // Router


Repository: mockup


Branch: refs/heads/master
Date: 2015-10-17T13:23:54Z
Author: JC Brand (jcbrand) <jc@opkode.com>
Commit: https://github.com/plone/mockup/commit/f8a929e58a7a4c9112e5c9a88ed3d5c9e5df114c

Don't swallow event until sure that it's required.

Files changed:
M mockup/patterns/modal/pattern.js

diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js
index 5070a1c..bdbc19f 100644
--- a/mockup/patterns/modal/pattern.js
+++ b/mockup/patterns/modal/pattern.js
@@ -522,9 +522,9 @@ define([
           .addClass(self.options.templateOptions.classWrapperName)
           .insertBefore(self.backdrop.$backdrop)
           .on('click', function(e) {
-            e.stopPropagation();
-            e.preventDefault();
             if (this.options.backdropOptions.closeOnClick) {
+              e.stopPropagation();
+              e.preventDefault();
               this.backdrop.hide();
             }
           }.bind(this));


Repository: mockup


Branch: refs/heads/master
Date: 2015-10-17T21:09:55Z
Author: JC Brand (jcbrand) <jc@opkode.com>
Commit: https://github.com/plone/mockup/commit/f3ec74fa9019a9a585e4bd7861952511efa71be8

Lazily create wrapper and backdrop.

This fixes a bug where the config of the first modal in the DOM overrides all
others in the event handler for clicks on the wrapper.

Files changed:
M mockup/patterns/modal/pattern.js
M mockup/tests/pattern-modal-test.js

diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js
index bdbc19f..3987bb4 100644
--- a/mockup/patterns/modal/pattern.js
+++ b/mockup/patterns/modal/pattern.js
@@ -499,37 +499,6 @@ define([
       var self = this;
       self.options.loadLinksWithinModal = $.parseJSON(self.options.loadLinksWithinModal);
 
-      self.backdrop = new Backdrop(
-          self.$el.parents(self.options.backdrop),
-          self.options.backdropOptions);
-
-      self.$wrapper = $('> .' + self.options.templateOptions.classWrapperName, self.backdrop.$el);
-      if (self.$wrapper.size() === 0) {
-        var zIndex = self.options.backdropOptions.zIndex !== null ? parseInt(self.options.backdropOptions.zIndex, 10) + 1 : 1041;
-        self.$wrapper = $('<div/>')
-          .hide()
-          .css({
-            'z-index': zIndex,
-            'overflow-y': 'auto',
-            'position': 'fixed',
-            'height': '100%',
-            'width': '100%',
-            'bottom': '0',
-            'left': '0',
-            'right': '0',
-            'top': '0'
-          })
-          .addClass(self.options.templateOptions.classWrapperName)
-          .insertBefore(self.backdrop.$backdrop)
-          .on('click', function(e) {
-            if (this.options.backdropOptions.closeOnClick) {
-              e.stopPropagation();
-              e.preventDefault();
-              this.backdrop.hide();
-            }
-          }.bind(this));
-      }
-
       // Router
       if (self.options.routerOptions.id !== null) {
         Router.addRoute('modal', self.options.routerOptions.id, function() {
@@ -537,12 +506,6 @@ define([
         }, self, self.options.routerOptions.pathExp, self.options.routerOptions.expReplace);
       }
 
-      self.backdrop.on('hidden', function(e) {
-        if (self.$modal !== undefined && self.$modal.hasClass(self.options.templateOptions.classActiveName)) {
-          self.hide();
-        }
-      });
-
       if (self.options.backdropOptions.closeOnEsc === true) {
         $(document).on('keydown', function(e, data) {
           if (self.$el.is('.' + self.options.templateOptions.classActiveName)) {
@@ -553,23 +516,8 @@ define([
         });
       }
 
-      self.$wrapperInner = $('> .' + self.options.templateOptions.classWrapperInnerName, self.$wrapper);
-      if (self.$wrapperInner.size() === 0) {
-        self.$wrapperInner = $('<div/>')
-          .addClass(self.options.classWrapperInnerName)
-          .css({
-            'position': 'absolute',
-            'bottom': '0',
-            'left': '0',
-            'right': '0',
-            'top': '0'
-          })
-          .appendTo(self.$wrapper);
-      }
 
-      self.loading = new utils.Loading({
-        backdrop: self.backdrop
-      });
+
 
       $(window.parent).resize(function() {
         self.positionModal();
@@ -744,32 +692,29 @@ define([
         }
         returnpos.top = absTop;
       }
-
       return returnpos;
     },
+
     modalInitialized: function() {
       var self = this;
       return self.$modal !== null && self.$modal !== undefined;
     },
-    // re-position modal at any point.
-    //
-    // Uses:
-    //  options.margin
-    //  options.width
-    //  options.height
-    //  options.position
+
     positionModal: function() {
+      /* re-position modal at any point.
+       *
+       * Uses:
+       *  options.margin
+       *  options.width
+       *  options.height
+       *  options.position
+       */
       var self = this;
-
       // modal isn't initialized
       if (!self.modalInitialized()) { return; }
-
       // clear out any previously set styling
       self.$modal.removeAttr('style');
 
-      // make sure the (inner) wrapper fills it's container
-      //self.$wrapperInner.css({height:'100%', width:'100%'});
-
       // if backdrop wrapper is set on body, then wrapper should have height of
       // the window, so we can do scrolling of inner wrapper
       if (self.$wrapper.parent().is('body')) {
@@ -798,7 +743,6 @@ define([
       var modalHeight = self.$modalDialog.outerHeight(true);
       var wrapperInnerWidth = self.$wrapperInner.width();
       var wrapperInnerHeight = self.$wrapperInner.height();
-
       var pos = self.findPosition(
         horpos, vertpos, margin, modalWidth, modalHeight,
         wrapperInnerWidth, wrapperInnerHeight
@@ -807,16 +751,71 @@ define([
         self.$modalDialog.css(key, pos[key]);
       }
     },
+
     render: function(options) {
       var self = this;
       self.emit('render');
       self.options.render.apply(self, [options]);
       self.emit('rendered');
     },
+
     show: function() {
       var self = this;
+      self.backdrop = self.createBackdrop();
       self.createModal();
     },
+
+    createBackdrop: function() {
+      var self = this,
+          backdrop = new Backdrop(
+            self.$el.parents(self.options.backdrop),
+            self.options.backdropOptions
+          ),
+          zIndex = self.options.backdropOptions.zIndex !== null ? parseInt(self.options.backdropOptions.zIndex, 10) + 1 : 1041;
+
+      self.$wrapper = $('<div/>')
+        .hide()
+        .css({
+          'z-index': zIndex,
+          'overflow-y': 'auto',
+          'position': 'fixed',
+          'height': '100%',
+          'width': '100%',
+          'bottom': '0',
+          'left': '0',
+          'right': '0',
+          'top': '0'
+        })
+        .addClass(self.options.templateOptions.classWrapperName)
+        .insertBefore(backdrop.$backdrop)
+        .on('click', function(e) {
+          if (self.options.backdropOptions.closeOnClick) {
+            e.stopPropagation();
+            e.preventDefault();
+            backdrop.hide();
+          }
+        });
+      backdrop.on('hidden', function(e) {
+        if (self.$modal !== undefined && self.$modal.hasClass(self.options.templateOptions.classActiveName)) {
+          self.hide();
+        }
+      });
+      self.loading = new utils.Loading({
+        'backdrop': backdrop
+      });
+      self.$wrapperInner = $('<div/>')
+        .addClass(self.options.classWrapperInnerName)
+        .css({
+          'position': 'absolute',
+          'bottom': '0',
+          'left': '0',
+          'right': '0',
+          'top': '0'
+        })
+        .appendTo(self.$wrapper);
+      return backdrop;
+    },
+
     _show: function() {
       var self = this;
       self.render.apply(self, [ self.options ]);
@@ -851,8 +850,7 @@ define([
       }
       if ($('.plone-modal', self.$wrapper).size() < 2) {
         self.backdrop.hide();
-        self.$wrapper.hide();
-        self.$wrapper.parent().css('overflow', 'visible');
+        self.$wrapper.remove();
         $('body').removeClass('plone-modal-open');
       }
       self.loading.hide();
@@ -864,6 +862,7 @@ define([
       $(window.parent).off('resize.plone-modal.patterns');
       self.emit('hidden');
     },
+
     redraw: function(response, options) {
       var self = this;
       self.emit('beforeDraw');
@@ -878,5 +877,4 @@ define([
   });
 
   return Modal;
-
 });
diff --git a/mockup/tests/pattern-modal-test.js b/mockup/tests/pattern-modal-test.js
index c68f477..c14c53c 100644
--- a/mockup/tests/pattern-modal-test.js
+++ b/mockup/tests/pattern-modal-test.js
@@ -74,9 +74,9 @@ define([
 
       registry.scan($el);
 
-      expect($('.plone-modal-backdrop', $el).is(':hidden')).to.be.equal(true);
+      expect($('.plone-modal-wrapper', $el).size()).to.be.equal(0);
       expect($el.hasClass('plone-backdrop-active')).to.be.equal(false);
-      expect($('.plone-modal-wrapper', $el).is(':hidden')).to.be.equal(true);
+      expect($('.plone-modal-backdrop', $el).size()).to.be.equal(0);
       expect($('.plone-modal', $el).size()).to.equal(0);
 
       $('a.pat-plone-modal', $el).click();


Repository: mockup


Branch: refs/heads/master
Date: 2015-10-18T20:19:27-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/7651832d99bd10914811c3b57106a5a14152e3fa

Merge pull request #597 from plone/modal-fix

Modal fix: configs of additional modals in a page are ignored.

Files changed:
M mockup/patterns/modal/pattern.js
M mockup/tests/pattern-modal-test.js

diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js
index 3f7c4a0..3987bb4 100644
--- a/mockup/patterns/modal/pattern.js
+++ b/mockup/patterns/modal/pattern.js
@@ -187,10 +187,7 @@ define([
         if (self.options.automaticallyAddButtonActions) {
           actions[self.options.buttons] = {};
         }
-
-        if (self.options.loadLinksWithinModal) {
-          actions.a = {};
-        }
+        actions.a = {};
 
         $.each(actions, function(action, options) {
           var actionKeys = _.union(_.keys(self.options.actionOptions), ['templateOptions']);
@@ -469,16 +466,6 @@ define([
 
         self.$modal
           .addClass(self.options.templateOptions.className)
-          .on('click', function(e) {
-            e.stopPropagation();
-            if ($.nodeName(e.target, 'a')) {
-              e.preventDefault();
-
-              // TODO: open links inside modal
-              // and slide modal body
-            }
-            self.$modal.trigger('modal-click');
-          })
           .on('destroy.plone-modal.patterns', function(e) {
             e.stopPropagation();
             self.hide();
@@ -489,8 +476,19 @@ define([
             self.positionModal();
           })
           .appendTo(self.$wrapperInner);
-        self.$modal.data('pattern-' + self.name, self);
 
+        if (self.options.loadLinksWithinModal) {
+          self.$modal.on('click', function(e) {
+            e.stopPropagation();
+            if ($.nodeName(e.target, 'a')) {
+              e.preventDefault();
+              // TODO: open links inside modal
+              // and slide modal body
+            }
+            self.$modal.trigger('modal-click');
+          });
+        }
+        self.$modal.data('pattern-' + self.name, self);
         self.emit('after-render');
       }
     },
@@ -499,37 +497,7 @@ define([
     },
     init: function() {
       var self = this;
-
-      self.backdrop = new Backdrop(
-          self.$el.parents(self.options.backdrop),
-          self.options.backdropOptions);
-
-      self.$wrapper = $('> .' + self.options.templateOptions.classWrapperName, self.backdrop.$el);
-      if (self.$wrapper.size() === 0) {
-        var zIndex = self.options.backdropOptions.zIndex !== null ? parseInt(self.options.backdropOptions.zIndex, 10) + 1 : 1041;
-        self.$wrapper = $('<div/>')
-          .hide()
-          .css({
-            'z-index': zIndex,
-            'overflow-y': 'auto',
-            'position': 'fixed',
-            'height': '100%',
-            'width': '100%',
-            'bottom': '0',
-            'left': '0',
-            'right': '0',
-            'top': '0'
-          })
-          .addClass(self.options.templateOptions.classWrapperName)
-          .insertBefore(self.backdrop.$backdrop)
-          .on('click', function(e) {
-            e.stopPropagation();
-            e.preventDefault();
-            if (self.options.backdropOptions.closeOnClick) {
-              self.backdrop.hide();
-            }
-          });
-      }
+      self.options.loadLinksWithinModal = $.parseJSON(self.options.loadLinksWithinModal);
 
       // Router
       if (self.options.routerOptions.id !== null) {
@@ -538,12 +506,6 @@ define([
         }, self, self.options.routerOptions.pathExp, self.options.routerOptions.expReplace);
       }
 
-      self.backdrop.on('hidden', function(e) {
-        if (self.$modal !== undefined && self.$modal.hasClass(self.options.templateOptions.classActiveName)) {
-          self.hide();
-        }
-      });
-
       if (self.options.backdropOptions.closeOnEsc === true) {
         $(document).on('keydown', function(e, data) {
           if (self.$el.is('.' + self.options.templateOptions.classActiveName)) {
@@ -554,23 +516,8 @@ define([
         });
       }
 
-      self.$wrapperInner = $('> .' + self.options.templateOptions.classWrapperInnerName, self.$wrapper);
-      if (self.$wrapperInner.size() === 0) {
-        self.$wrapperInner = $('<div/>')
-          .addClass(self.options.classWrapperInnerName)
-          .css({
-            'position': 'absolute',
-            'bottom': '0',
-            'left': '0',
-            'right': '0',
-            'top': '0'
-          })
-          .appendTo(self.$wrapper);
-      }
 
-      self.loading = new utils.Loading({
-        backdrop: self.backdrop
-      });
+
 
       $(window.parent).resize(function() {
         self.positionModal();
@@ -745,32 +692,29 @@ define([
         }
         returnpos.top = absTop;
       }
-
       return returnpos;
     },
+
     modalInitialized: function() {
       var self = this;
       return self.$modal !== null && self.$modal !== undefined;
     },
-    // re-position modal at any point.
-    //
-    // Uses:
-    //  options.margin
-    //  options.width
-    //  options.height
-    //  options.position
+
     positionModal: function() {
+      /* re-position modal at any point.
+       *
+       * Uses:
+       *  options.margin
+       *  options.width
+       *  options.height
+       *  options.position
+       */
       var self = this;
-
       // modal isn't initialized
       if (!self.modalInitialized()) { return; }
-
       // clear out any previously set styling
       self.$modal.removeAttr('style');
 
-      // make sure the (inner) wrapper fills it's container
-      //self.$wrapperInner.css({height:'100%', width:'100%'});
-
       // if backdrop wrapper is set on body, then wrapper should have height of
       // the window, so we can do scrolling of inner wrapper
       if (self.$wrapper.parent().is('body')) {
@@ -799,7 +743,6 @@ define([
       var modalHeight = self.$modalDialog.outerHeight(true);
       var wrapperInnerWidth = self.$wrapperInner.width();
       var wrapperInnerHeight = self.$wrapperInner.height();
-
       var pos = self.findPosition(
         horpos, vertpos, margin, modalWidth, modalHeight,
         wrapperInnerWidth, wrapperInnerHeight
@@ -808,16 +751,71 @@ define([
         self.$modalDialog.css(key, pos[key]);
       }
     },
+
     render: function(options) {
       var self = this;
       self.emit('render');
       self.options.render.apply(self, [options]);
       self.emit('rendered');
     },
+
     show: function() {
       var self = this;
+      self.backdrop = self.createBackdrop();
       self.createModal();
     },
+
+    createBackdrop: function() {
+      var self = this,
+          backdrop = new Backdrop(
+            self.$el.parents(self.options.backdrop),
+            self.options.backdropOptions
+          ),
+          zIndex = self.options.backdropOptions.zIndex !== null ? parseInt(self.options.backdropOptions.zIndex, 10) + 1 : 1041;
+
+      self.$wrapper = $('<div/>')
+        .hide()
+        .css({
+          'z-index': zIndex,
+          'overflow-y': 'auto',
+          'position': 'fixed',
+          'height': '100%',
+          'width': '100%',
+          'bottom': '0',
+          'left': '0',
+          'right': '0',
+          'top': '0'
+        })
+        .addClass(self.options.templateOptions.classWrapperName)
+        .insertBefore(backdrop.$backdrop)
+        .on('click', function(e) {
+          if (self.options.backdropOptions.closeOnClick) {
+            e.stopPropagation();
+            e.preventDefault();
+            backdrop.hide();
+          }
+        });
+      backdrop.on('hidden', function(e) {
+        if (self.$modal !== undefined && self.$modal.hasClass(self.options.templateOptions.classActiveName)) {
+          self.hide();
+        }
+      });
+      self.loading = new utils.Loading({
+        'backdrop': backdrop
+      });
+      self.$wrapperInner = $('<div/>')
+        .addClass(self.options.classWrapperInnerName)
+        .css({
+          'position': 'absolute',
+          'bottom': '0',
+          'left': '0',
+          'right': '0',
+          'top': '0'
+        })
+        .appendTo(self.$wrapper);
+      return backdrop;
+    },
+
     _show: function() {
       var self = this;
       self.render.apply(self, [ self.options ]);
@@ -852,8 +850,7 @@ define([
       }
       if ($('.plone-modal', self.$wrapper).size() < 2) {
         self.backdrop.hide();
-        self.$wrapper.hide();
-        self.$wrapper.parent().css('overflow', 'visible');
+        self.$wrapper.remove();
         $('body').removeClass('plone-modal-open');
       }
       self.loading.hide();
@@ -865,6 +862,7 @@ define([
       $(window.parent).off('resize.plone-modal.patterns');
       self.emit('hidden');
     },
+
     redraw: function(response, options) {
       var self = this;
       self.emit('beforeDraw');
@@ -879,5 +877,4 @@ define([
   });
 
   return Modal;
-
 });
diff --git a/mockup/tests/pattern-modal-test.js b/mockup/tests/pattern-modal-test.js
index c68f477..c14c53c 100644
--- a/mockup/tests/pattern-modal-test.js
+++ b/mockup/tests/pattern-modal-test.js
@@ -74,9 +74,9 @@ define([
 
       registry.scan($el);
 
-      expect($('.plone-modal-backdrop', $el).is(':hidden')).to.be.equal(true);
+      expect($('.plone-modal-wrapper', $el).size()).to.be.equal(0);
       expect($el.hasClass('plone-backdrop-active')).to.be.equal(false);
-      expect($('.plone-modal-wrapper', $el).is(':hidden')).to.be.equal(true);
+      expect($('.plone-modal-backdrop', $el).size()).to.be.equal(0);
       expect($('.plone-modal', $el).size()).to.equal(0);
 
       $('a.pat-plone-modal', $el).click();


