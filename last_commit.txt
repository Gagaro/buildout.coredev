Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-07-18T14:36:06+07:00
Author: Dylan Jay () <software@pretaweb.com>
Commit: https://github.com/plone/plone.app.layout/commit/4dbbb992d0d42d38c3f01b646e1dd1d824d3c040

add some body tags to determine permission needed and roles needed to view

Files changed:
M plone/app/layout/globals/layout.py

diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index be19a6a..617b2c7 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -22,7 +22,7 @@
 from zope.interface import alsoProvides
 from zope.interface import implements
 from zope.publisher.browser import BrowserView
-
+from AccessControl.PermissionRole import rolesForPermissionOn
 
 class LayoutPolicy(BrowserView):
     """A view that gives access to various layout related functions.
@@ -126,6 +126,9 @@ def bodyClass(self, template, view):
             - a class for every container in the tree
         - hide icons: icons-on
         - markspeciallinks: pat-markspeciallinks
+        - userrole-{} for each role the user has in this context
+        - min-view-role: role required to view context
+        - default-view: if view is the default view
         """
         context = self.context
         portal_state = getMultiAdapter(
@@ -177,6 +180,26 @@ def bodyClass(self, template, view):
         if self.icons_visible():
             body_classes.append('icons-on')
 
+        # who is allowed to view this view.
+        # HACK: there must be a less dodgy way to do this?
+        for permission,roles in getattr(view, '__ac_permissions__', tuple()):
+            body_classes.append('viewpermission-' + normalizer.normalize(permission))
+        if not getattr(view, '__ac_permissions__'):
+            # should we have this special permission if it requires none?
+            body_classes.append('viewpermission-none')
+        roles = []
+        if view is None or not getattr(view, '__ac_permissions__', tuple()):
+            roles = rolesForPermissionOn('Access contents information', context)
+        elif hasattr(view, '__roles__'):
+            roles = view.__roles__.rolesForPermissionOn(context)
+        elif hasattr(view, '__call____roles__'):
+            roles = view.__call____roles__.rolesForPermissionOn(context)
+        for role in roles:
+            body_classes.append('viewrole-' + normalizer.normalize(role))
+
+        # determine if this is the default view
+        #context.getLayout()
+
         # class for user roles
         membership = getToolByName(context, "portal_membership")
 


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-08-25T22:43:17+07:00
Author: Dylan Jay () <software@pretaweb.com>
Commit: https://github.com/plone/plone.app.layout/commit/512cb00c3f72933da18140079e0cf8386646148b

remove roles required body tags. We only need permissions for theming

Files changed:
M plone/app/layout/globals/layout.py

diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index 617b2c7..c3523b6 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -187,18 +187,6 @@ def bodyClass(self, template, view):
         if not getattr(view, '__ac_permissions__'):
             # should we have this special permission if it requires none?
             body_classes.append('viewpermission-none')
-        roles = []
-        if view is None or not getattr(view, '__ac_permissions__', tuple()):
-            roles = rolesForPermissionOn('Access contents information', context)
-        elif hasattr(view, '__roles__'):
-            roles = view.__roles__.rolesForPermissionOn(context)
-        elif hasattr(view, '__call____roles__'):
-            roles = view.__call____roles__.rolesForPermissionOn(context)
-        for role in roles:
-            body_classes.append('viewrole-' + normalizer.normalize(role))
-
-        # determine if this is the default view
-        #context.getLayout()
 
         # class for user roles
         membership = getToolByName(context, "portal_membership")


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-10T18:25:08+07:00
Author: Dylan Jay () <software@pretaweb.com>
Commit: https://github.com/plone/plone.app.layout/commit/b8b55c1670a65026e8365942c8af8bd9fa54c788

introduced frontend body tag for views with no, or just view permision.

Files changed:
M plone/app/layout/globals/layout.py

diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index c3523b6..2854433 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -180,13 +180,16 @@ def bodyClass(self, template, view):
         if self.icons_visible():
             body_classes.append('icons-on')
 
-        # who is allowed to view this view.
-        # HACK: there must be a less dodgy way to do this?
-        for permission,roles in getattr(view, '__ac_permissions__', tuple()):
-            body_classes.append('viewpermission-' + normalizer.normalize(permission))
+        # permissions required. Useful to theme frontend and backend differently
+        permissions = []
         if not getattr(view, '__ac_permissions__'):
-            # should we have this special permission if it requires none?
-            body_classes.append('viewpermission-none')
+            permissions = ['none']
+        for permission,roles in getattr(view, '__ac_permissions__', tuple()):
+            permissions.append(normalizer.normalize(permission))
+        if 'none' in permissions or 'view' in permissions:
+            body_classes.append('frontend')
+        for permission in permissions:
+            body_classes.append('viewpermission-' + permission)
 
         # class for user roles
         membership = getToolByName(context, "portal_membership")


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-10T07:28:49-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/bddc8c42c646733d5b0e356eaf6e13a6a4915aa8

Merge pull request #50 from plone/backend-tag

add some body tags to determine permission needed and roles needed to view

Files changed:
M plone/app/layout/globals/layout.py

diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index 4f564f8..ae2c3ef 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -22,7 +22,7 @@
 from zope.interface import alsoProvides
 from zope.interface import implements
 from zope.publisher.browser import BrowserView
-
+from AccessControl.PermissionRole import rolesForPermissionOn
 
 class LayoutPolicy(BrowserView):
     """A view that gives access to various layout related functions.
@@ -125,6 +125,9 @@ def bodyClass(self, template, view):
             - a class for every container in the tree
         - hide icons: icons-on
         - markspeciallinks: pat-markspeciallinks
+        - userrole-{} for each role the user has in this context
+        - min-view-role: role required to view context
+        - default-view: if view is the default view
         """
         context = self.context
         portal_state = getMultiAdapter(
@@ -176,6 +179,17 @@ def bodyClass(self, template, view):
         if self.icons_visible():
             body_classes.append('icons-on')
 
+        # permissions required. Useful to theme frontend and backend differently
+        permissions = []
+        if not getattr(view, '__ac_permissions__'):
+            permissions = ['none']
+        for permission,roles in getattr(view, '__ac_permissions__', tuple()):
+            permissions.append(normalizer.normalize(permission))
+        if 'none' in permissions or 'view' in permissions:
+            body_classes.append('frontend')
+        for permission in permissions:
+            body_classes.append('viewpermission-' + permission)
+
         # class for user roles
         membership = getToolByName(context, "portal_membership")
 


