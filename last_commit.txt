Repository: mockup


Branch: refs/heads/master
Date: 2015-06-22T10:38:51-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/298bcde28b3cab59cc5a8ca90915f524ec5a6af2

Moved rulebuilder into a separate pattern. Reimplemented rulebuilder into the thememapper

Files changed:
A mockup/patterns/thememapper/js/rulebuilder.js
A mockup/patterns/thememapper/js/rulebuilderview.js
A mockup/patterns/thememapper/templates/rulebuilder.xml
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/pattern.thememapper.less

diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index 07b4266..f4985dd 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -389,6 +389,10 @@ define([
       self.currentPath = path;
       if (self.ace !== undefined){
         self.ace.editor.destroy();
+        self.ace.editor.container.parentNode.replaceChild(
+          self.ace.editor.container.cloneNode(true),
+          self.ace.editor.container
+        );
       }
       self.ace = new TextEditor(self.$editor);
 
diff --git a/mockup/patterns/thememapper/js/rulebuilder.js b/mockup/patterns/thememapper/js/rulebuilder.js
new file mode 100644
index 0000000..68ea1ed
--- /dev/null
+++ b/mockup/patterns/thememapper/js/rulebuilder.js
@@ -0,0 +1,558 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+], function($, _, Backbone) {
+  'use strict';
+
+  var RuleBuilder = function(thememapper){
+    /**
+      * Rule builder
+      *
+      * Contains functions to build CSS and XPath selectors as well as a Diazo rule
+      * from a given node, and acts as a state machine for the rules wizard.
+      *
+      */
+
+    var self = this;
+    self.thememapper = thememapper;
+
+    self.themeInspector = null;
+    self.unthemedInspector = null;
+
+    self.active = false;
+    self.currentScope = null;
+    self.haveScrolled = false;
+
+    self.ruleType = null;
+    self.subtype = null;
+
+    self._contentElement = null;
+    self._themeElement = null;
+
+    self.rulesFilename = 'rules.xml';
+
+    self.ruleBuilderPopover = {
+      el: self.thememapper.rulebuilderView.el,
+      button: self.thememapper.rulebuilderView.triggerView.el,
+      isOpened: function() {
+        return $(this.el).is(":visible");
+      },
+      close: function() {
+        if( this.isOpened() ) {
+          if( self.active && $els.step2.is(":visible") )
+          {
+            self.end();
+          }
+          else
+          {
+            $(this.button).click();
+          }
+        }
+      },
+      load: function() {
+        if( !this.isOpened() ) {
+          $(this.button).click();
+        }
+      }
+    };
+
+    var $els = {
+      reusePanel: $('#new-rule-reuse-panel'),
+      reuseSelectors: $("#new-rule-reuse-selectors"),
+      selectTheme: $("#new-rule-select-theme"),
+      selectThemeNext: $("#new-rule-select-theme .next"),
+      selectContentNext: $("#new-rule-select-content .next"),
+      wizardSteps: $(".rule-wizard-step"),
+      selectContent: $("#new-rule-select-content"),
+      step1: $("#new-rule-step-1"),
+      step1Next: $("#new-rule-step-1 .next"),
+      step2: $("#new-rule-step-2"),
+      step2Insert: $("#new-rule-step-2 .insert"),
+      step2Copy: $("#new-rule-step-2 .copy"),
+      inspectors: self.thememapper.$inspectorContainer,
+      ruleOutput: $('#new-rule-output'),
+      themePanel: $('#inspectors .mockup-inspector'),
+      themePanelTop: $('.mockup-inspector .panel-toolbar'),
+      unthemedPanel: $('#inspectors .unthemed-inspector'),
+      unthemedPanelTop: $('.unthemed-inspector .panel-toolbar'),
+      newRuleThemeChildren: $('#new-rule-theme-children'),
+      newRuleUnthemedChildren: $('#new-rule-content-children'),
+      modifiers: $('.rule-modifier'),
+      selectors: $('.selector-info')
+    };
+
+    $els.step1Next.click(function() {
+      var ruleType = self.getSelectedType();
+      self.start(ruleType);
+    });
+
+    $els.selectThemeNext.click(function() {
+      self.themeInspector.on();
+
+      if(!$els.inspectors.is(":visible")) {
+        self.thememapper.showInspectors();
+      }
+
+      self.scrollTo($els.themePanelTop);
+      self.ruleBuilderPopover.close();
+
+      $els.themePanel.expose({
+        color: "#fff",
+        closeOnClick: false,
+        closeOnEsc: false,
+        closeSpeed: 0,
+        onLoad: function() {
+          self.scrollTo(this.getExposed());
+        },
+      });
+    });
+
+    $els.step2Copy.hide();
+    $els.step2Insert.click(function() {
+
+      var rule = $els.ruleOutput.val();
+
+      var aceEditor = self.thememapper.fileManager.ace.editor;
+      var session = aceEditor.getSession();
+
+      function findStartTag(backwards) {
+        aceEditor.find('<\\w+', {
+          backwards: backwards,
+          wrap: false,
+          wholeWord: false,
+          regExp: true
+        });
+      }
+
+      function indent(string, amount) {
+        var padding = '';
+        for(var i = 0; i < amount; ++i) {
+          padding += ' ';
+        }
+        return '\n' + padding + string.replace(/\n/g, '\n' + padding) + '\n';
+      }
+
+      //If we're already starting at the very end, go back to the beginning
+      if( session.getDocument().$lines.length == aceEditor.getSelectionRange().end.row + 1)
+      {
+        aceEditor.navigateFileStart();
+      }
+
+      // Go to the next opening tag - we want to insert before this
+      findStartTag(false);
+      if(aceEditor.getCursorPosition().row <= 1) {
+        // Probably the opening rules tag
+        findStartTag(false);
+      }
+
+      var selectionText = aceEditor.getSelectedText();
+
+      // If we didn't find anything, look for the end of the current tag
+      if(selectionText == "") {
+        aceEditor.find("(/>|</)", {
+          backwards: false,
+          wrap: false,
+          wholeWord: false,
+          regExp: true
+        });
+
+        var selectionText = aceEditor.getSelectedText();
+        if(selectionText == "") {
+          // Still nothing? Go to the end
+          aceEditor.navigateFileEnd();
+        } else {
+          // Go one past the end tag, but first figure out how far we should i
+          aceEditor.navigateDown();
+        }
+      }
+
+      var indentation = aceEditor.getSelectionRange().start.column;
+      var cursorPosition = aceEditor.getCursorPosition();
+      var newlines = rule.match(/\n/g);
+      var rows = 0;
+      if(newlines != null) {
+        rows = newlines.length;
+      }
+
+      aceEditor.gotoLine(cursorPosition.row);
+      aceEditor.insert(indent(rule, indentation));
+      aceEditor.getSelection().selectTo(cursorPosition.row + rows + 1, 0);
+      aceEditor.gotoLine(cursorPosition.row);
+      aceEditor.container.focus();
+
+      self.ruleBuilderPopover.close();
+
+      self.scrollTo(self.thememapper.fileManager.$el);
+
+      // Clear the selection now that we're done with it
+      self.unthemedInspector.save(null);
+      self.themeInspector.save(null);
+    });
+
+    $els.selectContentNext.click(function() {
+      self.unthemedInspector.on();
+      if(!$els.inspectors.is(":visible")) {
+        self.thememapper.showInspectors();
+      }
+
+      self.scrollTo($els.unthemedPanelTop);
+      self.ruleBuilderPopover.close();
+
+      $els.unthemedPanel.expose({
+        color: "#fff",
+        closeOnClick: false,
+        closeOnEsc: false,
+        closeSpeed: 0,
+        onLoad: function() {
+          self.scrollTo(this.getExposed());
+        },
+      });
+    });
+
+    $els.modifiers.change(function() {
+      self.updateRule();
+    });
+    self.end = function() {
+      self._contentElement = null;
+      self._themeElement = null;
+      self.currentScope = null;
+      self.active = false;
+      self.ruleType = null;
+      self.subtype = null;
+
+      self.callback(this);
+    };
+
+    self.start = function(ruleType) {
+      var self = this;
+
+      if( ruleType === undefined )
+      {
+        ruleType = self.getSelectedType();
+      }
+
+      self.themeInspector = self.thememapper.mockupInspector;
+      self.unthemedInspector = self.thememapper.unthemedInspector;
+
+      self._contentElement = null;
+      self._themeElement = null;
+      self.currentScope = "theme";
+
+      // Drop rules get e.g. drop:content or drop:theme,
+      // which predetermines the scope
+      var ruleSplit = ruleType.split(':');
+      if(ruleSplit.length >= 2) {
+          self.ruleType = ruleSplit[0];
+          self.subtype = ruleSplit[1];
+          self.currentScope = self.subtype;
+      } else{
+          self.ruleType = ruleType;
+          self.subtype = null;
+      }
+
+      self.active = true;
+
+      self.callback(self);
+    };
+
+    /**
+    * Build a diazo rule. 'themeChildren' and 'contentChildren' should be true or
+    * false to indicate whether a -children selector is to be used.
+    */
+    self.buildRule = function(themeChildren, contentChildren) {
+      if (self.ruleType === null) {
+        return '';
+      }
+
+      if (self.subtype !== null) {
+        if (self.subtype === 'content') {
+          return '<' + self.ruleType + '\n    ' +
+            self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
+            '\n    />';
+        } else if (self.subtype === 'theme') {
+          return '<' + self.ruleType + '\n    ' +
+            self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) +
+            '\n    />';
+        }
+
+      } else {
+        return '<' + self.ruleType + '\n    ' +
+          self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) + '\n    ' +
+          self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
+          '\n    />';
+      }
+
+      // Should never happen
+      return 'Error';
+    };
+
+    /**
+    * Return a valid (but not necessarily unique) CSS selector for the given
+    * element.
+    */
+    self.calculateCSSSelector = function(element) {
+      var selector = element.tagName.toLowerCase();
+
+      if (element.id) {
+        selector += '#' + element.id;
+      } else {
+        var classes = $(element).attr('class');
+        if(classes !== undefined) {
+          var splitClasses = classes.split(/\s+/);
+          for(var i = 0; i < splitClasses.length; i=i+1) {
+            if(splitClasses[i] !== '' && splitClasses[i].indexOf('_theming') === -1) {
+              selector += '.' + splitClasses[i];
+              break;
+            }
+          }
+        }
+      }
+
+      return selector;
+    };
+
+    /**
+    * Return a valid, unqiue CSS selector for the given element. Returns null if
+    * no reasoanble unique selector can be built.
+    */
+    self.calculateUniqueCSSSelector = function(element) {
+      var paths = [];
+      var path = null;
+
+      var parents = $(element).parents();
+      var ultimateParent = parents[parents.length - 1];
+
+      while (element && element.nodeType === 1) {
+        var selector = this.calculateCSSSelector(element);
+            paths.splice(0, 0, selector);
+            path = paths.join(' ');
+
+        // The ultimateParent constraint is necessary since
+        // this may be inside an iframe
+        if($(path, ultimateParent).length === 1) {
+          return path;
+        }
+
+        element = element.parentNode;
+      }
+
+      return null;
+    };
+
+    /**
+    * Return a valid, unique XPath selector for the given element.
+    */
+    self.calculateUniqueXPathExpression = function(element) {
+      var parents = $(element).parents();
+
+      function elementIndex(e) {
+        var siblings = $(e).siblings(e.tagName.toLowerCase());
+        if(siblings.length > 0) {
+          return '[' + ($(e).index() + 1) + ']';
+        } else {
+          return '';
+        }
+      }
+
+      var xpathString = '/' + element.tagName.toLowerCase();
+      if(element.id) {
+        return '/' + xpathString + '[@id=\'' + element.id + '\']';
+      } else {
+        xpathString += elementIndex(element);
+      }
+
+      for(var i = 0; i < parents.length; i=i+1) {
+        var p = parents[i];
+        var pString = '/' + p.tagName.toLowerCase();
+
+        if(p.id) {
+          return '/' + pString + '[@id=\'' + p.id + '\']' + xpathString;
+        } else {
+          xpathString = pString + elementIndex(p) + xpathString;
+        }
+      }
+
+      return xpathString;
+    };
+
+    /**
+    * Return a unique CSS or XPath selector, preferring a CSS one.
+    */
+    self.bestSelector = function(element) {
+      return self.calculateUniqueCSSSelector(element) ||
+             self.calculateUniqueXPathExpression(element);
+    };
+
+    self.openRuleFile = function() {
+
+      var fileManager = self.thememapper.fileManager;
+
+      var treeNodes = fileManager.$tree.tree('getTree')
+      var opened = false
+
+      _.each(treeNodes.children, function(node) {
+        if( node.name == self.rulesFilename )
+        {
+          //if it's open already, don't reopen it.
+          //That will move the cursors location
+          if( fileManager.$tabs.find('.active').data('path') != '/' + self.rulesFilename ) {
+            self.thememapper.fileManager.openFile({node: node});
+          }
+          opened = true;
+        }
+      });
+      return opened;
+    };
+
+    /**
+    * Build a Diazo selector element with the appropriate namespace.
+    */
+    self.calculateDiazoSelector = function(element, scope, children) {
+      var selectorType = scope;
+      if(children) {
+        selectorType += '-children';
+      }
+
+      var cssSelector = self.calculateUniqueCSSSelector(element);
+      if(cssSelector) {
+        return 'css:' + selectorType + '="' + cssSelector + '"';
+      } else {
+        var xpathSelector = self.calculateUniqueXPathExpression(element);
+        return selectorType + '="' + xpathSelector + '"';
+      }
+
+    };
+
+    self.select = function(element) {
+      if(this.currentScope == "theme") {
+        this._themeElement = element;
+      } else if(this.currentScope == "content") {
+        this._contentElement = element;
+      }
+    };
+
+    self.getSelectedType = function() {
+      var type = $("input[name='new-rule-type']:checked").val();
+      return type;
+    };
+
+    self.next = function() {
+        var self = this;
+        if(self.subtype !== null) {
+            // Drop rules have only one scope
+            self.currentScope = null;
+        } else {
+            // Other rules have content and theme
+            if(self.currentScope == "theme") {
+                self.currentScope = "content";
+            } else if (self.currentScope == "content") {
+                self.currentScope = null;
+            }
+        }
+        this.callback(this);
+    };
+
+    self.updateRule = function() {
+        $els.ruleOutput.val(
+            self.buildRule(
+                $els.newRuleThemeChildren.is(':checked'),
+                $els.newRuleUnthemedChildren.is(':checked')
+            )
+        );
+    };
+
+    self.scrollTo = function(selector) {
+      if( $(selector).length == 0 ) {
+        return;
+      }
+
+      $('html,body').animate({scrollTop: $(selector).offset().top}, 600);
+    };
+
+    /**
+    *   Called by the rulebuilderView. If there are selected
+    *   elements in the inspectors, we want to give the user the
+    *   option to use those.
+    */
+    self.checkSelectors = function() {
+      $('.selector-info').each(function() {
+        if( $(this).text() != "" ) {
+          $els.reusePanel.show();
+          return true;
+        }
+      });
+
+      return false;
+    };
+    self.callback = function(ruleBuilder) {
+      $els.wizardSteps.hide();
+
+      var themeFrameHighlighter = this.thememapper.mockupInspector;
+      var unthemedFrameHighlighter = this.thememapper.unthemedInspector;
+
+      if($.mask.isLoaded(true) && !self.ruleBuilderPopover.isOpened()) {
+        self.scrollTo(self.thememapper.fileManager.$el);
+        $.mask.close();
+      }
+
+      if(ruleBuilder.currentScope == 'theme') {
+        if(themeFrameHighlighter.saved != null && $els.reuseSelectors.is(":checked")) {
+          self.ruleBuilderPopover.close();
+
+          // Use saved rule
+          ruleBuilder.select(themeFrameHighlighter.saved);
+          ruleBuilder.next();
+        } else {
+          // Let the frame highlighter perform a selection
+          $els.selectTheme.show();
+          if(!self.ruleBuilderPopover.isOpened()) {
+            self.ruleBuilderPopover.load();
+          }
+        }
+
+      } else if(ruleBuilder.currentScope == 'content') {
+        if(unthemedFrameHighlighter.saved != null && $els.reuseSelectors.is(":checked")) {
+          self.ruleBuilderPopover.close();
+
+          // Use saved rule
+          ruleBuilder.select(unthemedFrameHighlighter.saved);
+          ruleBuilder.next();
+        } else {
+          // Let the frame highlighter perform a selection
+          $els.selectContent.show();
+          if(!self.ruleBuilderPopover.isOpened()) {
+            self.ruleBuilderPopover.load();
+          }
+        }
+
+      } else if(ruleBuilder.ruleType != null && ruleBuilder.currentScope == null) {
+
+        $els.wizardSteps.hide();
+        $els.step2.show();
+        self.updateRule(ruleBuilder);
+
+        if( self.openRuleFile() ) {
+          $els.step2Insert.show();
+        } else {
+          $els.step2Insert.hide();
+        }
+
+        if(!self.ruleBuilderPopover.isOpened()) {
+          self.ruleBuilderPopover.load();
+        }
+
+      } else { // end
+
+        if(self.ruleBuilderPopover.isOpened()) {
+          self.ruleBuilderPopover.close();
+        }
+
+        $els.wizardSteps.hide();
+        $els.step1.show();
+      }
+    }
+  };
+
+  return RuleBuilder;
+});
diff --git a/mockup/patterns/thememapper/js/rulebuilderview.js b/mockup/patterns/thememapper/js/rulebuilderview.js
new file mode 100644
index 0000000..d9e5958
--- /dev/null
+++ b/mockup/patterns/thememapper/js/rulebuilderview.js
@@ -0,0 +1,34 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'text!mockup-patterns-thememapper-url/templates/rulebuilder.xml',
+], function($, _, Backbone, PopoverView, RulebuilderTemplate ) {
+  'use strict';
+  var rulebuilderTemplate = _.template(RulebuilderTemplate);
+
+  var RuleBuilderView = PopoverView.extend({
+    className: 'popover rulebuilderView',
+    title: _.template('<%= _t("Rule Builder") %>'),
+    content: rulebuilderTemplate,
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      return this;
+    },
+    toggle: function(button, e) {
+      /* we need to be able to change the current default upload directory */
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+      var self = this;
+      if (!this.opened) {
+        return;
+      }else {
+        this.app.ruleBuilder.checkSelectors();
+      }
+    }
+
+  });
+
+  return RuleBuilderView;
+});
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 3b3125f..aea39bc 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -34,201 +34,19 @@ define([
   'translate',
   'text!mockup-patterns-thememapper-url/templates/inspector.xml',
   'mockup-patterns-filemanager',
+  'mockup-patterns-thememapper-url/js/rulebuilder',
+  'mockup-patterns-thememapper-url/js/rulebuilderView',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup'
-], function($, Base, _, _t, InspectorTemplate, FileManager, ButtonView, ButtonGroup) {
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, ButtonView, ButtonGroup) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
 
-
-  var RuleBuilder = function(callback){
-    /**
-      * Rule builder
-      *
-      * Contains functions to build CSS and XPath selectors as well as a Diazo rule
-      * from a given node, and acts as a state machine for the rules wizard.
-      *
-      * The callback is called whenever the state machine progresses.
-      */
-
-    var self = this;
-    self.callback = callback;
-
-    self.active = false;
-    self.currentScope = null;
-
-    self.ruleType = null;
-    self.subtype = null;
-
-    self._contentElement = null;
-    self._themeElement = null;
-
-    self.end = function() {
-      self._contentElement = null;
-      self._themeElement = null;
-      self.currentScope = null;
-      self.active = false;
-      self.ruleType = null;
-      self.subtype = null;
-
-      self.callback(this);
-    };
-
-    /**
-    * Build a diazo rule. 'themeChildren' and 'contentChildren' should be true or
-    * false to indicate whether a -children selector is to be used.
-    */
-    self.buildRule = function(themeChildren, contentChildren) {
-      if (self.ruleType === null) {
-        return '';
-      }
-
-      if (self.subtype !== null) {
-        if (self.subtype === 'content') {
-          return '<' + self.ruleType + '\n    ' +
-            self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
-            '\n    />';
-        } else if (self.subtype === 'theme') {
-          return '<' + self.ruleType + '\n    ' +
-            self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) +
-            '\n    />';
-        }
-
-      } else {
-        return '<' + self.ruleType + '\n    ' +
-          self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) + '\n    ' +
-          self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
-          '\n    />';
-      }
-
-      // Should never happen
-      return 'Error';
-    };
-
-    /**
-    * Return a valid (but not necessarily unique) CSS selector for the given
-    * element.
-    */
-    self.calculateCSSSelector = function(element) {
-      var selector = element.tagName.toLowerCase();
-
-      if (element.id) {
-        selector += '#' + element.id;
-      } else {
-        var classes = $(element).attr('class');
-        if(classes !== undefined) {
-          var splitClasses = classes.split(/\s+/);
-          for(var i = 0; i < splitClasses.length; i=i+1) {
-            if(splitClasses[i] !== '' && splitClasses[i].indexOf('_theming') === -1) {
-              selector += '.' + splitClasses[i];
-              break;
-            }
-          }
-        }
-      }
-
-      return selector;
-    };
-
-    /**
-    * Return a valid, unqiue CSS selector for the given element. Returns null if
-    * no reasoanble unique selector can be built.
-    */
-    self.calculateUniqueCSSSelector = function(element) {
-      var paths = [];
-      var path = null;
-
-      var parents = $(element).parents();
-      var ultimateParent = parents[parents.length - 1];
-
-      while (element && element.nodeType === 1) {
-        var selector = this.calculateCSSSelector(element);
-            paths.splice(0, 0, selector);
-            path = paths.join(' ');
-
-        // The ultimateParent constraint is necessary since
-        // this may be inside an iframe
-        if($(path, ultimateParent).length === 1) {
-          return path;
-        }
-
-        element = element.parentNode;
-      }
-
-      return null;
-    };
-
-    /**
-    * Return a valid, unique XPath selector for the given element.
-    */
-    self.calculateUniqueXPathExpression = function(element) {
-      var parents = $(element).parents();
-
-      function elementIndex(e) {
-        var siblings = $(e).siblings(e.tagName.toLowerCase());
-        if(siblings.length > 0) {
-          return '[' + ($(e).index() + 1) + ']';
-        } else {
-          return '';
-        }
-      }
-
-      var xpathString = '/' + element.tagName.toLowerCase();
-      if(element.id) {
-        return '/' + xpathString + '[@id="' + element.id + '"]';
-      } else {
-        xpathString += elementIndex(element);
-      }
-
-      for(var i = 0; i < parents.length; i=i+1) {
-        var p = parents[i];
-        var pString = '/' + p.tagName.toLowerCase();
-
-        if(p.id) {
-          return '/' + pString + '[@id="' + p.id + '"]' + xpathString;
-        } else {
-          xpathString = pString + elementIndex(p) + xpathString;
-        }
-      }
-
-      return xpathString;
-    };
-
-    /**
-    * Return a unique CSS or XPath selector, preferring a CSS one.
-    */
-    self.bestSelector = function(element) {
-      return self.calculateUniqueCSSSelector(element) ||
-             self.calculateUniqueXPathExpression(element);
-    };
-
-    /**
-    * Build a Diazo selector element with the appropriate namespace.
-    */
-    self.calculateDiazoSelector = function(element, scope, children) {
-      var selectorType = scope;
-      if(children) {
-        selectorType += '-children';
-      }
-
-      var cssSelector = self.calculateUniqueCSSSelector(element);
-      if(cssSelector) {
-        return 'css:' + selectorType + '="' + cssSelector + '"';
-      } else {
-        var xpathSelector = self.calculateUniqueXPathExpression(element);
-        return selectorType + '="' + xpathSelector + '"';
-      }
-
-    };
-  };
-
   var Inspector = Base.extend({
     defaults: {
       name: 'name',
       ruleBuilder: null,
-      onsave: function() {},
-      onselect: function() {},
       showReload: false
     },
     init: function() {
@@ -369,7 +187,7 @@ define([
       self.animateSelector();
       self.$selectorInfo.text(element === null ? '' : self.ruleBuilder.bestSelector(element));
 
-      this.options.onsave(this, element);
+      self.onsave(this, element);
     },
     clearOutline: function(element){
       var self = this;
@@ -380,7 +198,7 @@ define([
 
       self.currentOutline = null;
       self.$currentSelector.text('');
-      self.options.onselect(self, null);
+      self.onselect(self, null);
     },
     setOutline: function(element) {
       var self = this;
@@ -394,11 +212,10 @@ define([
       if(self.currentOutline !== null) {
         self.clearOutline(self.currentOutline);
       }
-
       self.currentOutline = element;
       self.$currentSelector.text(self.ruleBuilder.bestSelector(element));
 
-      self.options.onselect(self, element);
+      self.onselect(self, element);
     },
     animateSelector: function(highlightColor, duration) {
       var self = this;
@@ -415,6 +232,27 @@ define([
         .animate({ backgroundColor: originalBg }, animateMs, null, function () {
           self.$frameInfo.css('backgroundColor', originalBg);
         });
+    },
+    onsave: function(highlighter, node) {
+      var self = this;
+      if(node == null) {
+        self.$el.find('.frame-shelf-container').hide();
+      } else {
+        self.$el.find('.frame-shelf-container').show();
+      }
+
+      self.animateSelector(self.$el.find('.frame-info'));
+      self.$el.find('.selector-info').text(node == null? "" : self.ruleBuilder.bestSelector(node));
+
+      if(self.ruleBuilder.active) {
+        self.ruleBuilder.select(node);
+        self.ruleBuilder.next();
+      }
+
+    },
+    onselect: function(highlighter, node) {
+      var self = this;
+      self.$currentSelector.text(node == null? "" : self.ruleBuilder.bestSelector(node));
     }
   });
 
@@ -440,8 +278,11 @@ define([
     fileManager: null,
     mockupInspector: null,
     unthemedInspector: null,
+    ruleBuilder: null,
+    rulebuilderView: null,
     $fileManager: null,
     $container: null,
+    $inspectorContainer: null,
     $mockupInspector: null,
     $unthemedInspector: null,
     init: function() {
@@ -451,13 +292,11 @@ define([
       }
       self.$fileManager = $('<div class="pat-filemanager"/>').appendTo(self.$el);
       self.$container = $('<div class="row"></div>').appendTo(self.$el);
-      self.$mockupInspector = $('<div class="mockup-inspector"/>').appendTo(self.$container);
-      self.$unthemedInspector = $('<div class="unthemed-inspector"/>').appendTo(self.$container);
+      self.$inspectorContainer = $('<div id="inspectors"></div>').appendTo(self.$container);
+      self.$mockupInspector = $('<div class="mockup-inspector"/>').appendTo(self.$inspectorContainer);
+      self.$unthemedInspector = $('<div class="unthemed-inspector"/>').appendTo(self.$inspectorContainer);
 
       // initialize patterns now
-      self.ruleBuilder = new RuleBuilder(function(){
-        debugger; //callback
-      });
       self.editable = (self.options.editable == "True") ? true : false;
 
       self.options.filemanagerConfig.uploadUrl = self.options.themeUrl;
@@ -465,25 +304,28 @@ define([
       self.fileManager = new FileManager(self.$fileManager, self.options.filemanagerConfig);
       self.fileManager.setUploadUrl();
 
+      self.setupButtons();
+
+      self.ruleBuilder = new RuleBuilder(self, self.ruleBuilderCallback);
+
       self.mockupInspector = new Inspector(self.$mockupInspector, {
         name: _t('HTML mockup'),
         ruleBuilder: self.ruleBuilder,
         url: self.options.mockupUrl,
-        showReload: true
+        showReload: true,
       });
       self.unthemedInspector = new Inspector(self.$unthemedInspector, {
         name: _t('Unthemed content'),
         ruleBuilder: self.ruleBuilder,
-        url: self.options.unthemedUrl
+        url: self.options.unthemedUrl,
       });
-      self.setupButtons();
-
       if( !self.editable ) {
         var items = self.fileManager.toolbar.items;
         $(items).each(function() {
           this.disable();
         });
-      }
+      };
+
       // initially, let's hide the panels
       self.hideInspectors();
     },
@@ -496,7 +338,7 @@ define([
       self.showInspectorsButton.applyTemplate();
       $('html, body').animate({
         scrollTop: $parent.offset().top - 50
-      }, 1000);
+      }, 500);
     },
     hideInspectors: function(){
       var self = this;
@@ -565,7 +407,10 @@ define([
       self.helpButton.on('button:click', function(){
         window.open(self.options.helpUrl);
       });
-
+      self.rulebuilderView = new RuleBuilderView({
+        triggerView: self.buildRuleButton,
+        app: self
+      });
       self.buttonGroup = new ButtonGroup({
         items: [
           self.showInspectorsButton,
@@ -577,6 +422,7 @@ define([
         id: 'mapper'
       });
       $('#toolbar .navbar', self.$el).append(self.buttonGroup.render().el);
+      $('#toolbar .navbar', self.$el).append(self.rulebuilderView.render().el);
     }
   });
 
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index 915d990..08f3e84 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -16,11 +16,6 @@
         height: 600px;
     }
 
-    .mockup-inspector {
-        clear: both;
-        padding: 10px 0 10px 0;
-    }
-
     .fullscreen {
         vertical-align: top;
         display: inline-block;
@@ -99,7 +94,7 @@
         .info {
             width: 100%;
             height: 100%;
-            
+
             img {
                 max-height: 80%;
             }
@@ -189,7 +184,7 @@
         padding: 0 5px 0 5px;
         font-size: x-small;
     }
-    
+
     .upload-area {
         border: 2px dashed #ddd;
         background-color: #eee;
@@ -251,4 +246,36 @@
             display: none;
         }
     }
+
+    .rulebuilderView {
+        max-width: 500px;
+
+        .inputs {
+            border: 1px solid #999;
+            padding: 5px;
+        }
+
+        .new-rule-type-panel > div {
+            margin-top: 5px;
+        }
+
+        .formControls {
+            margin-top: 5px;
+        }
+
+        #new-rule-output {
+            margin: 5px 0 5px 0;
+            width: 100%;
+            height: 80px;
+        }
+
+        #new-rule-reuse-panel {
+            margin-top: 15px;
+        }
+    }
+
+    #inspectors {
+        clear: both;
+    }
+
 }
diff --git a/mockup/patterns/thememapper/templates/rulebuilder.xml b/mockup/patterns/thememapper/templates/rulebuilder.xml
new file mode 100644
index 0000000..6f329d6
--- /dev/null
+++ b/mockup/patterns/thememapper/templates/rulebuilder.xml
@@ -0,0 +1,110 @@
+<div class="new-rule">
+    <h1 class="documentFirstHeading">Build rule</h1>
+
+    <div id="new-rule-step-1" class="rule-wizard-step" style="display: block;">
+        <div class="documentDescription">
+            This wizard will help you build a Diazo rule by selecting relevant elements using
+            the <strong>HTML mockup</strong> and <strong>Unthemed content</strong> inspectors.
+        </div>
+
+        <form>
+            <div id="new-rule-type-panel" class="inputs">
+                <div>
+                    <input type="radio" name="new-rule-type" value="replace" id="new-rule-replace" checked="checked">
+                        <label for="new-rule-replace">
+                            <strong>Replace</strong> an element of the theme with an element from the content
+                        </label>
+                    </div>
+                    <div>
+                        <input type="radio" name="new-rule-type" value="before" id="new-rule-before">
+                            <label for="new-rule-before">
+                                Insert an element from the content <strong>before</strong> an element in the theme
+                            </label>
+                        </div>
+                        <div>
+                            <input type="radio" name="new-rule-type" value="after" id="new-rule-after">
+                                <label for="new-rule-after">
+                                    Insert an element from the content <strong>after</strong> an element in the theme
+                                </label>
+                            </div>
+                            <div>
+                                <input type="radio" name="new-rule-type" value="drop:content" id="new-rule-drop-content">
+                                    <label for="new-rule-drop-content">
+                                        <strong>Drop</strong> an element in the <strong>content</strong>
+                                    </label>
+                                </div>
+                                <div>
+                                    <input type="radio" name="new-rule-type" value="drop:theme" id="new-rule-drop-theme">
+                                        <label for="new-rule-drop-theme">
+                                            <strong>Drop</strong> an element in the <strong>theme</strong>
+                                        </label>
+                                    </div>
+                                </div>
+                                <div class="field inputs" id="new-rule-reuse-panel" style="display: none;">
+                                    <input type="checkbox" name="new-rule-reuse-selectors" value="yes" id="new-rule-reuse-selectors" checked="checked">
+                                        <label for="new-rule-reuse-selectors">
+                                            Use selected elements
+                                        </label>
+                                        <div class="formHelp">
+                                            If selected, the rule builder will use the elements you have currently selected
+                                            in the <strong>HTML mockup</strong> and/or <strong>Unthemed content</strong>
+                                            inspectors instead of prompting you to select new ones.
+                                        </div>
+                                    </div>
+                                </form>
+
+                                <div class="formControls new-rule-actions">
+                                    <input type="submit" class="allowMultiSubmit context next submitting" value="Next">
+                                        <input type="submit" class="allowMultiSubmit standalone close" value="Cancel">
+                                        </div>
+
+                                    </div>
+                                    <div id="new-rule-select-theme" class="rule-wizard-step" style="display: none;">
+                                        <div class="documentDescription">
+                                            Please select an element using the <strong>HTML mockup</strong> inspector.
+                                        </div>
+                                        <div class="formControls new-rule-actions">
+                                            <input type="submit" class="allowMultiSubmit context next" value="Ok">
+                                                <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel">
+                                                </div>
+                                            </div>
+                                            <div id="new-rule-select-content" class="rule-wizard-step" style="display: none;">
+                                                <div class="documentDescription">
+                                                    Please select an element using the <strong>Unthemed content</strong> inspector.
+                                                </div>
+                                                <div class="formControls new-rule-actions">
+                                                    <input type="submit" class="allowMultiSubmit context next submitting" value="Ok">
+                                                        <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel">
+                                                        </div>
+                                                    </div>
+                                                    <div id="new-rule-step-2" class="rule-wizard-step" style="display: none;">
+                                                        <div class="documentDescription">
+                                                            The rule can be found below. Use the checkboxes
+                                                            to further refine it.
+                                                        </div>
+                                                        <form>
+                                                            <div id="new-rule-output-panel">
+                                                                <textarea name="new-rule-output" id="new-rule-output"></textarea>
+                                                            </div>
+                                                            <div id="new-rule-selector-panel">
+                                                                <div>
+                                                                    <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children">
+                                                                        <label for="new-rule-theme-children">Apply rule to children of the matched theme node(s)</label>
+                                                                    </div>
+                                                                    <div>
+                                                                        <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children">
+                                                                            <label for="new-rule-content-children">Apply rule to children of the matched content node(s)</label>
+                                                                        </div>
+                                                                    </div>
+
+                                                                </form>
+
+                                                                <div class="formControls new-rule-actions">
+                                                                    <input type="submit" class="allowMultiSubmit context insert submitting" title="Insert rule into the rules.xml file" value="Insert">
+                                                                        <input type="submit" class="allowMultiSubmit context copy" value="Copy to clipboard" style="display: none;">
+                                                                            <input type="submit" class="allowMultiSubmit standalone close" value="Close">
+                                                                            </div>
+                                                                        </div>
+
+
+                                                                    </div>


Repository: mockup


Branch: refs/heads/master
Date: 2015-06-22T10:55:07-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/c63b1021d63fae800e99f7d4bda9709961aaf43e

Fixed HTML in rulebuilderview

Files changed:
M mockup/patterns/thememapper/templates/rulebuilder.xml

diff --git a/mockup/patterns/thememapper/templates/rulebuilder.xml b/mockup/patterns/thememapper/templates/rulebuilder.xml
index 6f329d6..7a20940 100644
--- a/mockup/patterns/thememapper/templates/rulebuilder.xml
+++ b/mockup/patterns/thememapper/templates/rulebuilder.xml
@@ -10,101 +10,101 @@
         <form>
             <div id="new-rule-type-panel" class="inputs">
                 <div>
-                    <input type="radio" name="new-rule-type" value="replace" id="new-rule-replace" checked="checked">
-                        <label for="new-rule-replace">
-                            <strong>Replace</strong> an element of the theme with an element from the content
-                        </label>
+                    <input type="radio" name="new-rule-type" value="replace" id="new-rule-replace" checked="checked" />
+                    <label for="new-rule-replace">
+                        <strong>Replace</strong> an element of the theme with an element from the content
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="before" id="new-rule-before" />
+                    <label for="new-rule-before">
+                        Insert an element from the content <strong>before</strong> an element in the theme
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="after" id="new-rule-after" />
+                    <label for="new-rule-after">
+                        Insert an element from the content <strong>after</strong> an element in the theme
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="drop:content" id="new-rule-drop-content" />
+                    <label for="new-rule-drop-content">
+                        <strong>Drop</strong> an element in the <strong>content</strong>
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="drop:theme" id="new-rule-drop-theme" />
+                    <label for="new-rule-drop-theme">
+                        <strong>Drop</strong> an element in the <strong>theme</strong>
+                    </label>
+                </div>
+            </div>
+            <div class="field inputs" id="new-rule-reuse-panel" style="display: none;">
+                <input type="checkbox" name="new-rule-reuse-selectors" value="yes" id="new-rule-reuse-selectors" checked="checked" />
+                <label for="new-rule-reuse-selectors">
+                    Use selected elements
+                </label>
+                <div class="formHelp">
+                    If selected, the rule builder will use the elements you have currently selected
+                    in the <strong>HTML mockup</strong> and/or <strong>Unthemed content</strong>
+                    inspectors instead of prompting you to select new ones.
+                </div>
+            </div>
+        </form>
+
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context next submitting" value="Next" />
+            <input type="submit" class="allowMultiSubmit standalone close" value="Cancel">
+            </div>
+
+        </div>
+        <div id="new-rule-select-theme" class="rule-wizard-step" style="display: none;">
+            <div class="documentDescription">
+                Please select an element using the <strong>HTML mockup</strong> inspector.
+            </div>
+            <div class="formControls new-rule-actions">
+                <input type="submit" class="allowMultiSubmit context next" value="Ok" />
+                <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel">
+                </div>
+            </div>
+            <div id="new-rule-select-content" class="rule-wizard-step" style="display: none;">
+                <div class="documentDescription">
+                    Please select an element using the <strong>Unthemed content</strong> inspector.
+                </div>
+                <div class="formControls new-rule-actions">
+                    <input type="submit" class="allowMultiSubmit context next submitting" value="Ok" />
+                    <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel" />
+                </div>
+            </div>
+            <div id="new-rule-step-2" class="rule-wizard-step" style="display: none;">
+                <div class="documentDescription">
+                    The rule can be found below. Use the checkboxes
+                    to further refine it.
+                </div>
+                <form>
+                    <div id="new-rule-output-panel">
+                        <textarea name="new-rule-output" id="new-rule-output"></textarea>
                     </div>
-                    <div>
-                        <input type="radio" name="new-rule-type" value="before" id="new-rule-before">
-                            <label for="new-rule-before">
-                                Insert an element from the content <strong>before</strong> an element in the theme
-                            </label>
+                    <div id="new-rule-selector-panel">
+                        <div>
+                            <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children" />
+                            <label for="new-rule-theme-children">Apply rule to children of the matched theme node(s)</label>
                         </div>
                         <div>
-                            <input type="radio" name="new-rule-type" value="after" id="new-rule-after">
-                                <label for="new-rule-after">
-                                    Insert an element from the content <strong>after</strong> an element in the theme
-                                </label>
-                            </div>
-                            <div>
-                                <input type="radio" name="new-rule-type" value="drop:content" id="new-rule-drop-content">
-                                    <label for="new-rule-drop-content">
-                                        <strong>Drop</strong> an element in the <strong>content</strong>
-                                    </label>
-                                </div>
-                                <div>
-                                    <input type="radio" name="new-rule-type" value="drop:theme" id="new-rule-drop-theme">
-                                        <label for="new-rule-drop-theme">
-                                            <strong>Drop</strong> an element in the <strong>theme</strong>
-                                        </label>
-                                    </div>
-                                </div>
-                                <div class="field inputs" id="new-rule-reuse-panel" style="display: none;">
-                                    <input type="checkbox" name="new-rule-reuse-selectors" value="yes" id="new-rule-reuse-selectors" checked="checked">
-                                        <label for="new-rule-reuse-selectors">
-                                            Use selected elements
-                                        </label>
-                                        <div class="formHelp">
-                                            If selected, the rule builder will use the elements you have currently selected
-                                            in the <strong>HTML mockup</strong> and/or <strong>Unthemed content</strong>
-                                            inspectors instead of prompting you to select new ones.
-                                        </div>
-                                    </div>
-                                </form>
-
-                                <div class="formControls new-rule-actions">
-                                    <input type="submit" class="allowMultiSubmit context next submitting" value="Next">
-                                        <input type="submit" class="allowMultiSubmit standalone close" value="Cancel">
-                                        </div>
-
-                                    </div>
-                                    <div id="new-rule-select-theme" class="rule-wizard-step" style="display: none;">
-                                        <div class="documentDescription">
-                                            Please select an element using the <strong>HTML mockup</strong> inspector.
-                                        </div>
-                                        <div class="formControls new-rule-actions">
-                                            <input type="submit" class="allowMultiSubmit context next" value="Ok">
-                                                <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel">
-                                                </div>
-                                            </div>
-                                            <div id="new-rule-select-content" class="rule-wizard-step" style="display: none;">
-                                                <div class="documentDescription">
-                                                    Please select an element using the <strong>Unthemed content</strong> inspector.
-                                                </div>
-                                                <div class="formControls new-rule-actions">
-                                                    <input type="submit" class="allowMultiSubmit context next submitting" value="Ok">
-                                                        <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel">
-                                                        </div>
-                                                    </div>
-                                                    <div id="new-rule-step-2" class="rule-wizard-step" style="display: none;">
-                                                        <div class="documentDescription">
-                                                            The rule can be found below. Use the checkboxes
-                                                            to further refine it.
-                                                        </div>
-                                                        <form>
-                                                            <div id="new-rule-output-panel">
-                                                                <textarea name="new-rule-output" id="new-rule-output"></textarea>
-                                                            </div>
-                                                            <div id="new-rule-selector-panel">
-                                                                <div>
-                                                                    <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children">
-                                                                        <label for="new-rule-theme-children">Apply rule to children of the matched theme node(s)</label>
-                                                                    </div>
-                                                                    <div>
-                                                                        <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children">
-                                                                            <label for="new-rule-content-children">Apply rule to children of the matched content node(s)</label>
-                                                                        </div>
-                                                                    </div>
+                            <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children" />
+                            <label for="new-rule-content-children">Apply rule to children of the matched content node(s)</label>
+                        </div>
+                    </div>
 
-                                                                </form>
+                </form>
 
-                                                                <div class="formControls new-rule-actions">
-                                                                    <input type="submit" class="allowMultiSubmit context insert submitting" title="Insert rule into the rules.xml file" value="Insert">
-                                                                        <input type="submit" class="allowMultiSubmit context copy" value="Copy to clipboard" style="display: none;">
-                                                                            <input type="submit" class="allowMultiSubmit standalone close" value="Close">
-                                                                            </div>
-                                                                        </div>
+                <div class="formControls new-rule-actions">
+                    <input type="submit" class="allowMultiSubmit context insert submitting" title="Insert rule into the rules.xml file" value="Insert" />
+                    <input type="submit" class="allowMultiSubmit context copy" value="Copy to clipboard" style="display: none;" />
+                    <input type="submit" class="allowMultiSubmit standalone close" value="Close" />
+                </div>
+            </div>
 
 
-                                                                    </div>
+        </div>


Repository: mockup


Branch: refs/heads/master
Date: 2015-06-22T12:33:03-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/0b76784bb2ea92d5ed92f3291895c48e27e2d1c8

Rulebuilder now correctly prompts to reuse inspector selections. Fixed rulebuilderview layout issues

Files changed:
M mockup/patterns/thememapper/js/rulebuilder.js
M mockup/patterns/thememapper/js/rulebuilderview.js
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/templates/inspector.xml
M mockup/patterns/thememapper/templates/rulebuilder.xml

diff --git a/mockup/patterns/thememapper/js/rulebuilder.js b/mockup/patterns/thememapper/js/rulebuilder.js
index 68ea1ed..bd461ae 100644
--- a/mockup/patterns/thememapper/js/rulebuilder.js
+++ b/mockup/patterns/thememapper/js/rulebuilder.js
@@ -476,14 +476,19 @@ define([
     *   option to use those.
     */
     self.checkSelectors = function() {
+      var selected = false;
       $('.selector-info').each(function() {
         if( $(this).text() != "" ) {
+          //Theres an item selected, so show the option to use it
           $els.reusePanel.show();
-          return true;
+          selected = true;
         }
       });
-
-      return false;
+      if( !selected ) {
+        //if we opened the panel previously, close it now
+        $els.reusePanel.hide();
+      }
+      return selected;
     };
     self.callback = function(ruleBuilder) {
       $els.wizardSteps.hide();
diff --git a/mockup/patterns/thememapper/js/rulebuilderview.js b/mockup/patterns/thememapper/js/rulebuilderview.js
index d9e5958..efc3553 100644
--- a/mockup/patterns/thememapper/js/rulebuilderview.js
+++ b/mockup/patterns/thememapper/js/rulebuilderview.js
@@ -18,7 +18,6 @@ define([
       return this;
     },
     toggle: function(button, e) {
-      /* we need to be able to change the current default upload directory */
       PopoverView.prototype.toggle.apply(this, [button, e]);
       var self = this;
       if (!this.opened) {
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index aea39bc..a2a3677 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -68,7 +68,7 @@ define([
 
       self.$reloadBtn = $('a.refresh', self.$el);
 
-      $('a.clear', self.$frameShelfContainer).click(function(e) {
+      $('a.clearInspector', self.$frameShelfContainer).click(function(e) {
         e.preventDefault();
         self.save(null);
       });
diff --git a/mockup/patterns/thememapper/templates/inspector.xml b/mockup/patterns/thememapper/templates/inspector.xml
index a6837dc..c4db003 100644
--- a/mockup/patterns/thememapper/templates/inspector.xml
+++ b/mockup/patterns/thememapper/templates/inspector.xml
@@ -17,7 +17,7 @@
     <div class="frame-shelf-container" style="display:none">
       <span i18n:translate="theming_mapper_shelf_label">Selected:</span>
       <span class="selector-info"></span>
-      <a class="clear" href="#clear"
+      <a class="clearInspector" href="#clearInspector"
          title="Clear selection" i18n:attributes="title">x</a>
     </div>
     <span class="current-selector"></span>
@@ -36,4 +36,4 @@
     Press <em>Esc</em> to select parent.
   </div>
 
-</div>
\ No newline at end of file
+</div>
diff --git a/mockup/patterns/thememapper/templates/rulebuilder.xml b/mockup/patterns/thememapper/templates/rulebuilder.xml
index 7a20940..9d4584f 100644
--- a/mockup/patterns/thememapper/templates/rulebuilder.xml
+++ b/mockup/patterns/thememapper/templates/rulebuilder.xml
@@ -55,56 +55,53 @@
 
         <div class="formControls new-rule-actions">
             <input type="submit" class="allowMultiSubmit context next submitting" value="Next" />
-            <input type="submit" class="allowMultiSubmit standalone close" value="Cancel">
-            </div>
+            <input type="submit" class="allowMultiSubmit standalone close" value="Cancel" />
+        </div>
 
+    </div>
+    <div id="new-rule-select-theme" class="rule-wizard-step" style="display: none;">
+        <div class="documentDescription">
+            Please select an element using the <strong>HTML mockup</strong> inspector.
         </div>
-        <div id="new-rule-select-theme" class="rule-wizard-step" style="display: none;">
-            <div class="documentDescription">
-                Please select an element using the <strong>HTML mockup</strong> inspector.
-            </div>
-            <div class="formControls new-rule-actions">
-                <input type="submit" class="allowMultiSubmit context next" value="Ok" />
-                <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel">
-                </div>
-            </div>
-            <div id="new-rule-select-content" class="rule-wizard-step" style="display: none;">
-                <div class="documentDescription">
-                    Please select an element using the <strong>Unthemed content</strong> inspector.
-                </div>
-                <div class="formControls new-rule-actions">
-                    <input type="submit" class="allowMultiSubmit context next submitting" value="Ok" />
-                    <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel" />
-                </div>
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context next" value="Ok" />
+            <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel" />
+        </div>
+    </div>
+    <div id="new-rule-select-content" class="rule-wizard-step" style="display: none;">
+        <div class="documentDescription">
+            Please select an element using the <strong>Unthemed content</strong> inspector.
+        </div>
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context next submitting" value="Ok" />
+            <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel" />
+        </div>
+    </div>
+    <div id="new-rule-step-2" class="rule-wizard-step" style="display: none;">
+        <div class="documentDescription">
+            The rule can be found below. Use the checkboxes
+            to further refine it.
+        </div>
+        <form>
+            <div id="new-rule-output-panel">
+                <textarea name="new-rule-output" id="new-rule-output"></textarea>
             </div>
-            <div id="new-rule-step-2" class="rule-wizard-step" style="display: none;">
-                <div class="documentDescription">
-                    The rule can be found below. Use the checkboxes
-                    to further refine it.
+            <div id="new-rule-selector-panel">
+                <div>
+                    <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children" />
+                    <label for="new-rule-theme-children">Apply rule to children of the matched theme node(s)</label>
                 </div>
-                <form>
-                    <div id="new-rule-output-panel">
-                        <textarea name="new-rule-output" id="new-rule-output"></textarea>
-                    </div>
-                    <div id="new-rule-selector-panel">
-                        <div>
-                            <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children" />
-                            <label for="new-rule-theme-children">Apply rule to children of the matched theme node(s)</label>
-                        </div>
-                        <div>
-                            <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children" />
-                            <label for="new-rule-content-children">Apply rule to children of the matched content node(s)</label>
-                        </div>
-                    </div>
-
-                </form>
-
-                <div class="formControls new-rule-actions">
-                    <input type="submit" class="allowMultiSubmit context insert submitting" title="Insert rule into the rules.xml file" value="Insert" />
-                    <input type="submit" class="allowMultiSubmit context copy" value="Copy to clipboard" style="display: none;" />
-                    <input type="submit" class="allowMultiSubmit standalone close" value="Close" />
+                <div>
+                    <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children" />
+                    <label for="new-rule-content-children">Apply rule to children of the matched content node(s)</label>
                 </div>
             </div>
 
-
+        </form>
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context insert submitting" title="Insert rule into the rules.xml file" value="Insert" />
+            <input type="submit" class="allowMultiSubmit context copy" value="Copy to clipboard" style="display: none;" />
+            <input type="submit" class="allowMultiSubmit standalone close" value="Close" />
         </div>
+    </div>
+</div>


Repository: mockup


Branch: refs/heads/master
Date: 2015-06-22T13:48:33-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/43d1dfdff576f9ba6cdea02e9b1746eed01237be

Fixed broken cancel buttons in rulebuilder

Files changed:
M mockup/patterns/thememapper/js/rulebuilder.js
M mockup/patterns/thememapper/pattern.thememapper.less

diff --git a/mockup/patterns/thememapper/js/rulebuilder.js b/mockup/patterns/thememapper/js/rulebuilder.js
index bd461ae..c829030 100644
--- a/mockup/patterns/thememapper/js/rulebuilder.js
+++ b/mockup/patterns/thememapper/js/rulebuilder.js
@@ -79,7 +79,8 @@ define([
       newRuleThemeChildren: $('#new-rule-theme-children'),
       newRuleUnthemedChildren: $('#new-rule-content-children'),
       modifiers: $('.rule-modifier'),
-      selectors: $('.selector-info')
+      selectors: $('.selector-info'),
+      closers: $('.new-rule .close, .new-rule .wizard-cancel')
     };
 
     $els.step1Next.click(function() {
@@ -87,6 +88,11 @@ define([
       self.start(ruleType);
     });
 
+    $els.closers.click(function() {
+      self.end();
+      self.ruleBuilderPopover.close();
+    });
+
     $els.selectThemeNext.click(function() {
       self.themeInspector.on();
 
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index 08f3e84..5d1562d 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -276,6 +276,10 @@
 
     #inspectors {
         clear: both;
+
+        .frame-shelf-container {
+            margin-right: 5px;
+        }
     }
 
 }


Repository: mockup


Branch: refs/heads/master
Date: 2015-06-23T10:44:02-05:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/f685393d1a10fb96c282a5673152781eecfaf381

Added basic tests for the thememapper pattern

Files changed:
A mockup/tests/pattern-thememapper-test.js
M mockup/patterns/thememapper/pattern.js

diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index a2a3677..11810c3 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -35,7 +35,7 @@ define([
   'text!mockup-patterns-thememapper-url/templates/inspector.xml',
   'mockup-patterns-filemanager',
   'mockup-patterns-thememapper-url/js/rulebuilder',
-  'mockup-patterns-thememapper-url/js/rulebuilderView',
+  'mockup-patterns-thememapper-url/js/rulebuilderview',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup'
 ], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, ButtonView, ButtonGroup) {
@@ -320,10 +320,12 @@ define([
         url: self.options.unthemedUrl,
       });
       if( !self.editable ) {
-        var items = self.fileManager.toolbar.items;
-        $(items).each(function() {
-          this.disable();
-        });
+        if( self.fileManager.toolbar ) {
+          var items = self.fileManager.toolbar.items;
+          $(items).each(function() {
+            this.disable();
+          });
+        }
       };
 
       // initially, let's hide the panels
diff --git a/mockup/tests/pattern-thememapper-test.js b/mockup/tests/pattern-thememapper-test.js
new file mode 100644
index 0000000..5ddbcb3
--- /dev/null
+++ b/mockup/tests/pattern-thememapper-test.js
@@ -0,0 +1,76 @@
+define([
+  'expect',
+  'sinon',
+  'jquery',
+  'pat-registry',
+  'mockup-patterns-thememapper',
+], function(expect, sinon, $, registry, RuleBuilderView ) {
+  'use strict';
+
+  window.mocha.setup('bdd');
+  $.fx.off = true;
+
+/* ==========================
+   TEST: Thememapper
+  ========================== */
+
+  describe('Thememapper', function () {
+
+    beforeEach(function() {
+      this.$el = $('' +
+        '<div>' +
+        '  <div class="pat-thememapper"' +
+        ' data-pat-thememapper=\'filemanagerConfig:{"actionUrl":"/filemanager-actions"}; ' +
+        ' themeUrl: "/theme_url";\'>'  +
+        '  </div>' +
+        '</div>').appendTo('body');
+    });
+    afterEach(function() {
+      this.$el.remove();
+    });
+
+    it('Setup components', function() {
+      expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(false);
+      // initialize pattern
+      registry.scan(this.$el);
+
+      this.clock = sinon.useFakeTimers();
+      this.clock.tick(1000);
+      expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(true);
+      expect($('#mapper', this.$el).length > 0).to.be.equal(true);
+      expect($('#showinspectors', this.$el).length > 0).to.be.equal(true);
+      expect($('#buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('#previewtheme', this.$el).length > 0).to.be.equal(true);
+      expect($('#fullscreenEditor', this.$el).length > 0).to.be.equal(true);
+      expect($('#helpbutton', this.$el).length > 0).to.be.equal(true);
+      expect($('#inspectors', this.$el).length > 0).to.be.equal(true);
+      expect($('.container', this.$el).length > 0).to.be.equal(true);
+
+      //This one is added after clicking the "fullscreen" button
+      expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
+    });
+
+    it('Test buttons', function() {
+      registry.scan(this.$el);
+
+      this.clock = sinon.useFakeTimers();
+      this.clock.tick(1000);
+
+      expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
+      expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(false);
+      $('#fullscreenEditor', this.$el).click();
+      expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(true);
+      expect($('.closeeditor', this.$el).length > 0).to.be.equal(true);
+
+      $('.closeeditor', this.$el).click();
+      expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(false);
+      expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
+
+      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(false);
+      $('#showinspectors', this.$el).click();
+      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(true);
+      $('#showinspectors', this.$el).click();
+      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(false);
+    });
+  });
+});


Repository: mockup


Branch: refs/heads/master
Date: 2015-06-23T12:33:54-04:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/75620519530cb751cad65b9c044b2e28037f9d50

Merge pull request #511 from plone/rulebuilder

Rulebuilder

Files changed:
A mockup/patterns/thememapper/js/rulebuilder.js
A mockup/patterns/thememapper/js/rulebuilderview.js
A mockup/patterns/thememapper/templates/rulebuilder.xml
A mockup/tests/pattern-thememapper-test.js
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/pattern.thememapper.less
M mockup/patterns/thememapper/templates/inspector.xml

diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index 07b4266..f4985dd 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -389,6 +389,10 @@ define([
       self.currentPath = path;
       if (self.ace !== undefined){
         self.ace.editor.destroy();
+        self.ace.editor.container.parentNode.replaceChild(
+          self.ace.editor.container.cloneNode(true),
+          self.ace.editor.container
+        );
       }
       self.ace = new TextEditor(self.$editor);
 
diff --git a/mockup/patterns/thememapper/js/rulebuilder.js b/mockup/patterns/thememapper/js/rulebuilder.js
new file mode 100644
index 0000000..c829030
--- /dev/null
+++ b/mockup/patterns/thememapper/js/rulebuilder.js
@@ -0,0 +1,569 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+], function($, _, Backbone) {
+  'use strict';
+
+  var RuleBuilder = function(thememapper){
+    /**
+      * Rule builder
+      *
+      * Contains functions to build CSS and XPath selectors as well as a Diazo rule
+      * from a given node, and acts as a state machine for the rules wizard.
+      *
+      */
+
+    var self = this;
+    self.thememapper = thememapper;
+
+    self.themeInspector = null;
+    self.unthemedInspector = null;
+
+    self.active = false;
+    self.currentScope = null;
+    self.haveScrolled = false;
+
+    self.ruleType = null;
+    self.subtype = null;
+
+    self._contentElement = null;
+    self._themeElement = null;
+
+    self.rulesFilename = 'rules.xml';
+
+    self.ruleBuilderPopover = {
+      el: self.thememapper.rulebuilderView.el,
+      button: self.thememapper.rulebuilderView.triggerView.el,
+      isOpened: function() {
+        return $(this.el).is(":visible");
+      },
+      close: function() {
+        if( this.isOpened() ) {
+          if( self.active && $els.step2.is(":visible") )
+          {
+            self.end();
+          }
+          else
+          {
+            $(this.button).click();
+          }
+        }
+      },
+      load: function() {
+        if( !this.isOpened() ) {
+          $(this.button).click();
+        }
+      }
+    };
+
+    var $els = {
+      reusePanel: $('#new-rule-reuse-panel'),
+      reuseSelectors: $("#new-rule-reuse-selectors"),
+      selectTheme: $("#new-rule-select-theme"),
+      selectThemeNext: $("#new-rule-select-theme .next"),
+      selectContentNext: $("#new-rule-select-content .next"),
+      wizardSteps: $(".rule-wizard-step"),
+      selectContent: $("#new-rule-select-content"),
+      step1: $("#new-rule-step-1"),
+      step1Next: $("#new-rule-step-1 .next"),
+      step2: $("#new-rule-step-2"),
+      step2Insert: $("#new-rule-step-2 .insert"),
+      step2Copy: $("#new-rule-step-2 .copy"),
+      inspectors: self.thememapper.$inspectorContainer,
+      ruleOutput: $('#new-rule-output'),
+      themePanel: $('#inspectors .mockup-inspector'),
+      themePanelTop: $('.mockup-inspector .panel-toolbar'),
+      unthemedPanel: $('#inspectors .unthemed-inspector'),
+      unthemedPanelTop: $('.unthemed-inspector .panel-toolbar'),
+      newRuleThemeChildren: $('#new-rule-theme-children'),
+      newRuleUnthemedChildren: $('#new-rule-content-children'),
+      modifiers: $('.rule-modifier'),
+      selectors: $('.selector-info'),
+      closers: $('.new-rule .close, .new-rule .wizard-cancel')
+    };
+
+    $els.step1Next.click(function() {
+      var ruleType = self.getSelectedType();
+      self.start(ruleType);
+    });
+
+    $els.closers.click(function() {
+      self.end();
+      self.ruleBuilderPopover.close();
+    });
+
+    $els.selectThemeNext.click(function() {
+      self.themeInspector.on();
+
+      if(!$els.inspectors.is(":visible")) {
+        self.thememapper.showInspectors();
+      }
+
+      self.scrollTo($els.themePanelTop);
+      self.ruleBuilderPopover.close();
+
+      $els.themePanel.expose({
+        color: "#fff",
+        closeOnClick: false,
+        closeOnEsc: false,
+        closeSpeed: 0,
+        onLoad: function() {
+          self.scrollTo(this.getExposed());
+        },
+      });
+    });
+
+    $els.step2Copy.hide();
+    $els.step2Insert.click(function() {
+
+      var rule = $els.ruleOutput.val();
+
+      var aceEditor = self.thememapper.fileManager.ace.editor;
+      var session = aceEditor.getSession();
+
+      function findStartTag(backwards) {
+        aceEditor.find('<\\w+', {
+          backwards: backwards,
+          wrap: false,
+          wholeWord: false,
+          regExp: true
+        });
+      }
+
+      function indent(string, amount) {
+        var padding = '';
+        for(var i = 0; i < amount; ++i) {
+          padding += ' ';
+        }
+        return '\n' + padding + string.replace(/\n/g, '\n' + padding) + '\n';
+      }
+
+      //If we're already starting at the very end, go back to the beginning
+      if( session.getDocument().$lines.length == aceEditor.getSelectionRange().end.row + 1)
+      {
+        aceEditor.navigateFileStart();
+      }
+
+      // Go to the next opening tag - we want to insert before this
+      findStartTag(false);
+      if(aceEditor.getCursorPosition().row <= 1) {
+        // Probably the opening rules tag
+        findStartTag(false);
+      }
+
+      var selectionText = aceEditor.getSelectedText();
+
+      // If we didn't find anything, look for the end of the current tag
+      if(selectionText == "") {
+        aceEditor.find("(/>|</)", {
+          backwards: false,
+          wrap: false,
+          wholeWord: false,
+          regExp: true
+        });
+
+        var selectionText = aceEditor.getSelectedText();
+        if(selectionText == "") {
+          // Still nothing? Go to the end
+          aceEditor.navigateFileEnd();
+        } else {
+          // Go one past the end tag, but first figure out how far we should i
+          aceEditor.navigateDown();
+        }
+      }
+
+      var indentation = aceEditor.getSelectionRange().start.column;
+      var cursorPosition = aceEditor.getCursorPosition();
+      var newlines = rule.match(/\n/g);
+      var rows = 0;
+      if(newlines != null) {
+        rows = newlines.length;
+      }
+
+      aceEditor.gotoLine(cursorPosition.row);
+      aceEditor.insert(indent(rule, indentation));
+      aceEditor.getSelection().selectTo(cursorPosition.row + rows + 1, 0);
+      aceEditor.gotoLine(cursorPosition.row);
+      aceEditor.container.focus();
+
+      self.ruleBuilderPopover.close();
+
+      self.scrollTo(self.thememapper.fileManager.$el);
+
+      // Clear the selection now that we're done with it
+      self.unthemedInspector.save(null);
+      self.themeInspector.save(null);
+    });
+
+    $els.selectContentNext.click(function() {
+      self.unthemedInspector.on();
+      if(!$els.inspectors.is(":visible")) {
+        self.thememapper.showInspectors();
+      }
+
+      self.scrollTo($els.unthemedPanelTop);
+      self.ruleBuilderPopover.close();
+
+      $els.unthemedPanel.expose({
+        color: "#fff",
+        closeOnClick: false,
+        closeOnEsc: false,
+        closeSpeed: 0,
+        onLoad: function() {
+          self.scrollTo(this.getExposed());
+        },
+      });
+    });
+
+    $els.modifiers.change(function() {
+      self.updateRule();
+    });
+    self.end = function() {
+      self._contentElement = null;
+      self._themeElement = null;
+      self.currentScope = null;
+      self.active = false;
+      self.ruleType = null;
+      self.subtype = null;
+
+      self.callback(this);
+    };
+
+    self.start = function(ruleType) {
+      var self = this;
+
+      if( ruleType === undefined )
+      {
+        ruleType = self.getSelectedType();
+      }
+
+      self.themeInspector = self.thememapper.mockupInspector;
+      self.unthemedInspector = self.thememapper.unthemedInspector;
+
+      self._contentElement = null;
+      self._themeElement = null;
+      self.currentScope = "theme";
+
+      // Drop rules get e.g. drop:content or drop:theme,
+      // which predetermines the scope
+      var ruleSplit = ruleType.split(':');
+      if(ruleSplit.length >= 2) {
+          self.ruleType = ruleSplit[0];
+          self.subtype = ruleSplit[1];
+          self.currentScope = self.subtype;
+      } else{
+          self.ruleType = ruleType;
+          self.subtype = null;
+      }
+
+      self.active = true;
+
+      self.callback(self);
+    };
+
+    /**
+    * Build a diazo rule. 'themeChildren' and 'contentChildren' should be true or
+    * false to indicate whether a -children selector is to be used.
+    */
+    self.buildRule = function(themeChildren, contentChildren) {
+      if (self.ruleType === null) {
+        return '';
+      }
+
+      if (self.subtype !== null) {
+        if (self.subtype === 'content') {
+          return '<' + self.ruleType + '\n    ' +
+            self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
+            '\n    />';
+        } else if (self.subtype === 'theme') {
+          return '<' + self.ruleType + '\n    ' +
+            self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) +
+            '\n    />';
+        }
+
+      } else {
+        return '<' + self.ruleType + '\n    ' +
+          self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) + '\n    ' +
+          self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
+          '\n    />';
+      }
+
+      // Should never happen
+      return 'Error';
+    };
+
+    /**
+    * Return a valid (but not necessarily unique) CSS selector for the given
+    * element.
+    */
+    self.calculateCSSSelector = function(element) {
+      var selector = element.tagName.toLowerCase();
+
+      if (element.id) {
+        selector += '#' + element.id;
+      } else {
+        var classes = $(element).attr('class');
+        if(classes !== undefined) {
+          var splitClasses = classes.split(/\s+/);
+          for(var i = 0; i < splitClasses.length; i=i+1) {
+            if(splitClasses[i] !== '' && splitClasses[i].indexOf('_theming') === -1) {
+              selector += '.' + splitClasses[i];
+              break;
+            }
+          }
+        }
+      }
+
+      return selector;
+    };
+
+    /**
+    * Return a valid, unqiue CSS selector for the given element. Returns null if
+    * no reasoanble unique selector can be built.
+    */
+    self.calculateUniqueCSSSelector = function(element) {
+      var paths = [];
+      var path = null;
+
+      var parents = $(element).parents();
+      var ultimateParent = parents[parents.length - 1];
+
+      while (element && element.nodeType === 1) {
+        var selector = this.calculateCSSSelector(element);
+            paths.splice(0, 0, selector);
+            path = paths.join(' ');
+
+        // The ultimateParent constraint is necessary since
+        // this may be inside an iframe
+        if($(path, ultimateParent).length === 1) {
+          return path;
+        }
+
+        element = element.parentNode;
+      }
+
+      return null;
+    };
+
+    /**
+    * Return a valid, unique XPath selector for the given element.
+    */
+    self.calculateUniqueXPathExpression = function(element) {
+      var parents = $(element).parents();
+
+      function elementIndex(e) {
+        var siblings = $(e).siblings(e.tagName.toLowerCase());
+        if(siblings.length > 0) {
+          return '[' + ($(e).index() + 1) + ']';
+        } else {
+          return '';
+        }
+      }
+
+      var xpathString = '/' + element.tagName.toLowerCase();
+      if(element.id) {
+        return '/' + xpathString + '[@id=\'' + element.id + '\']';
+      } else {
+        xpathString += elementIndex(element);
+      }
+
+      for(var i = 0; i < parents.length; i=i+1) {
+        var p = parents[i];
+        var pString = '/' + p.tagName.toLowerCase();
+
+        if(p.id) {
+          return '/' + pString + '[@id=\'' + p.id + '\']' + xpathString;
+        } else {
+          xpathString = pString + elementIndex(p) + xpathString;
+        }
+      }
+
+      return xpathString;
+    };
+
+    /**
+    * Return a unique CSS or XPath selector, preferring a CSS one.
+    */
+    self.bestSelector = function(element) {
+      return self.calculateUniqueCSSSelector(element) ||
+             self.calculateUniqueXPathExpression(element);
+    };
+
+    self.openRuleFile = function() {
+
+      var fileManager = self.thememapper.fileManager;
+
+      var treeNodes = fileManager.$tree.tree('getTree')
+      var opened = false
+
+      _.each(treeNodes.children, function(node) {
+        if( node.name == self.rulesFilename )
+        {
+          //if it's open already, don't reopen it.
+          //That will move the cursors location
+          if( fileManager.$tabs.find('.active').data('path') != '/' + self.rulesFilename ) {
+            self.thememapper.fileManager.openFile({node: node});
+          }
+          opened = true;
+        }
+      });
+      return opened;
+    };
+
+    /**
+    * Build a Diazo selector element with the appropriate namespace.
+    */
+    self.calculateDiazoSelector = function(element, scope, children) {
+      var selectorType = scope;
+      if(children) {
+        selectorType += '-children';
+      }
+
+      var cssSelector = self.calculateUniqueCSSSelector(element);
+      if(cssSelector) {
+        return 'css:' + selectorType + '="' + cssSelector + '"';
+      } else {
+        var xpathSelector = self.calculateUniqueXPathExpression(element);
+        return selectorType + '="' + xpathSelector + '"';
+      }
+
+    };
+
+    self.select = function(element) {
+      if(this.currentScope == "theme") {
+        this._themeElement = element;
+      } else if(this.currentScope == "content") {
+        this._contentElement = element;
+      }
+    };
+
+    self.getSelectedType = function() {
+      var type = $("input[name='new-rule-type']:checked").val();
+      return type;
+    };
+
+    self.next = function() {
+        var self = this;
+        if(self.subtype !== null) {
+            // Drop rules have only one scope
+            self.currentScope = null;
+        } else {
+            // Other rules have content and theme
+            if(self.currentScope == "theme") {
+                self.currentScope = "content";
+            } else if (self.currentScope == "content") {
+                self.currentScope = null;
+            }
+        }
+        this.callback(this);
+    };
+
+    self.updateRule = function() {
+        $els.ruleOutput.val(
+            self.buildRule(
+                $els.newRuleThemeChildren.is(':checked'),
+                $els.newRuleUnthemedChildren.is(':checked')
+            )
+        );
+    };
+
+    self.scrollTo = function(selector) {
+      if( $(selector).length == 0 ) {
+        return;
+      }
+
+      $('html,body').animate({scrollTop: $(selector).offset().top}, 600);
+    };
+
+    /**
+    *   Called by the rulebuilderView. If there are selected
+    *   elements in the inspectors, we want to give the user the
+    *   option to use those.
+    */
+    self.checkSelectors = function() {
+      var selected = false;
+      $('.selector-info').each(function() {
+        if( $(this).text() != "" ) {
+          //Theres an item selected, so show the option to use it
+          $els.reusePanel.show();
+          selected = true;
+        }
+      });
+      if( !selected ) {
+        //if we opened the panel previously, close it now
+        $els.reusePanel.hide();
+      }
+      return selected;
+    };
+    self.callback = function(ruleBuilder) {
+      $els.wizardSteps.hide();
+
+      var themeFrameHighlighter = this.thememapper.mockupInspector;
+      var unthemedFrameHighlighter = this.thememapper.unthemedInspector;
+
+      if($.mask.isLoaded(true) && !self.ruleBuilderPopover.isOpened()) {
+        self.scrollTo(self.thememapper.fileManager.$el);
+        $.mask.close();
+      }
+
+      if(ruleBuilder.currentScope == 'theme') {
+        if(themeFrameHighlighter.saved != null && $els.reuseSelectors.is(":checked")) {
+          self.ruleBuilderPopover.close();
+
+          // Use saved rule
+          ruleBuilder.select(themeFrameHighlighter.saved);
+          ruleBuilder.next();
+        } else {
+          // Let the frame highlighter perform a selection
+          $els.selectTheme.show();
+          if(!self.ruleBuilderPopover.isOpened()) {
+            self.ruleBuilderPopover.load();
+          }
+        }
+
+      } else if(ruleBuilder.currentScope == 'content') {
+        if(unthemedFrameHighlighter.saved != null && $els.reuseSelectors.is(":checked")) {
+          self.ruleBuilderPopover.close();
+
+          // Use saved rule
+          ruleBuilder.select(unthemedFrameHighlighter.saved);
+          ruleBuilder.next();
+        } else {
+          // Let the frame highlighter perform a selection
+          $els.selectContent.show();
+          if(!self.ruleBuilderPopover.isOpened()) {
+            self.ruleBuilderPopover.load();
+          }
+        }
+
+      } else if(ruleBuilder.ruleType != null && ruleBuilder.currentScope == null) {
+
+        $els.wizardSteps.hide();
+        $els.step2.show();
+        self.updateRule(ruleBuilder);
+
+        if( self.openRuleFile() ) {
+          $els.step2Insert.show();
+        } else {
+          $els.step2Insert.hide();
+        }
+
+        if(!self.ruleBuilderPopover.isOpened()) {
+          self.ruleBuilderPopover.load();
+        }
+
+      } else { // end
+
+        if(self.ruleBuilderPopover.isOpened()) {
+          self.ruleBuilderPopover.close();
+        }
+
+        $els.wizardSteps.hide();
+        $els.step1.show();
+      }
+    }
+  };
+
+  return RuleBuilder;
+});
diff --git a/mockup/patterns/thememapper/js/rulebuilderview.js b/mockup/patterns/thememapper/js/rulebuilderview.js
new file mode 100644
index 0000000..efc3553
--- /dev/null
+++ b/mockup/patterns/thememapper/js/rulebuilderview.js
@@ -0,0 +1,33 @@
+define([
+  'jquery',
+  'underscore',
+  'backbone',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'text!mockup-patterns-thememapper-url/templates/rulebuilder.xml',
+], function($, _, Backbone, PopoverView, RulebuilderTemplate ) {
+  'use strict';
+  var rulebuilderTemplate = _.template(RulebuilderTemplate);
+
+  var RuleBuilderView = PopoverView.extend({
+    className: 'popover rulebuilderView',
+    title: _.template('<%= _t("Rule Builder") %>'),
+    content: rulebuilderTemplate,
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      return this;
+    },
+    toggle: function(button, e) {
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+      var self = this;
+      if (!this.opened) {
+        return;
+      }else {
+        this.app.ruleBuilder.checkSelectors();
+      }
+    }
+
+  });
+
+  return RuleBuilderView;
+});
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 3b3125f..11810c3 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -34,201 +34,19 @@ define([
   'translate',
   'text!mockup-patterns-thememapper-url/templates/inspector.xml',
   'mockup-patterns-filemanager',
+  'mockup-patterns-thememapper-url/js/rulebuilder',
+  'mockup-patterns-thememapper-url/js/rulebuilderview',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup'
-], function($, Base, _, _t, InspectorTemplate, FileManager, ButtonView, ButtonGroup) {
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, ButtonView, ButtonGroup) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
 
-
-  var RuleBuilder = function(callback){
-    /**
-      * Rule builder
-      *
-      * Contains functions to build CSS and XPath selectors as well as a Diazo rule
-      * from a given node, and acts as a state machine for the rules wizard.
-      *
-      * The callback is called whenever the state machine progresses.
-      */
-
-    var self = this;
-    self.callback = callback;
-
-    self.active = false;
-    self.currentScope = null;
-
-    self.ruleType = null;
-    self.subtype = null;
-
-    self._contentElement = null;
-    self._themeElement = null;
-
-    self.end = function() {
-      self._contentElement = null;
-      self._themeElement = null;
-      self.currentScope = null;
-      self.active = false;
-      self.ruleType = null;
-      self.subtype = null;
-
-      self.callback(this);
-    };
-
-    /**
-    * Build a diazo rule. 'themeChildren' and 'contentChildren' should be true or
-    * false to indicate whether a -children selector is to be used.
-    */
-    self.buildRule = function(themeChildren, contentChildren) {
-      if (self.ruleType === null) {
-        return '';
-      }
-
-      if (self.subtype !== null) {
-        if (self.subtype === 'content') {
-          return '<' + self.ruleType + '\n    ' +
-            self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
-            '\n    />';
-        } else if (self.subtype === 'theme') {
-          return '<' + self.ruleType + '\n    ' +
-            self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) +
-            '\n    />';
-        }
-
-      } else {
-        return '<' + self.ruleType + '\n    ' +
-          self.calculateDiazoSelector(self._themeElement, 'theme', themeChildren) + '\n    ' +
-          self.calculateDiazoSelector(self._contentElement, 'content', contentChildren) +
-          '\n    />';
-      }
-
-      // Should never happen
-      return 'Error';
-    };
-
-    /**
-    * Return a valid (but not necessarily unique) CSS selector for the given
-    * element.
-    */
-    self.calculateCSSSelector = function(element) {
-      var selector = element.tagName.toLowerCase();
-
-      if (element.id) {
-        selector += '#' + element.id;
-      } else {
-        var classes = $(element).attr('class');
-        if(classes !== undefined) {
-          var splitClasses = classes.split(/\s+/);
-          for(var i = 0; i < splitClasses.length; i=i+1) {
-            if(splitClasses[i] !== '' && splitClasses[i].indexOf('_theming') === -1) {
-              selector += '.' + splitClasses[i];
-              break;
-            }
-          }
-        }
-      }
-
-      return selector;
-    };
-
-    /**
-    * Return a valid, unqiue CSS selector for the given element. Returns null if
-    * no reasoanble unique selector can be built.
-    */
-    self.calculateUniqueCSSSelector = function(element) {
-      var paths = [];
-      var path = null;
-
-      var parents = $(element).parents();
-      var ultimateParent = parents[parents.length - 1];
-
-      while (element && element.nodeType === 1) {
-        var selector = this.calculateCSSSelector(element);
-            paths.splice(0, 0, selector);
-            path = paths.join(' ');
-
-        // The ultimateParent constraint is necessary since
-        // this may be inside an iframe
-        if($(path, ultimateParent).length === 1) {
-          return path;
-        }
-
-        element = element.parentNode;
-      }
-
-      return null;
-    };
-
-    /**
-    * Return a valid, unique XPath selector for the given element.
-    */
-    self.calculateUniqueXPathExpression = function(element) {
-      var parents = $(element).parents();
-
-      function elementIndex(e) {
-        var siblings = $(e).siblings(e.tagName.toLowerCase());
-        if(siblings.length > 0) {
-          return '[' + ($(e).index() + 1) + ']';
-        } else {
-          return '';
-        }
-      }
-
-      var xpathString = '/' + element.tagName.toLowerCase();
-      if(element.id) {
-        return '/' + xpathString + '[@id="' + element.id + '"]';
-      } else {
-        xpathString += elementIndex(element);
-      }
-
-      for(var i = 0; i < parents.length; i=i+1) {
-        var p = parents[i];
-        var pString = '/' + p.tagName.toLowerCase();
-
-        if(p.id) {
-          return '/' + pString + '[@id="' + p.id + '"]' + xpathString;
-        } else {
-          xpathString = pString + elementIndex(p) + xpathString;
-        }
-      }
-
-      return xpathString;
-    };
-
-    /**
-    * Return a unique CSS or XPath selector, preferring a CSS one.
-    */
-    self.bestSelector = function(element) {
-      return self.calculateUniqueCSSSelector(element) ||
-             self.calculateUniqueXPathExpression(element);
-    };
-
-    /**
-    * Build a Diazo selector element with the appropriate namespace.
-    */
-    self.calculateDiazoSelector = function(element, scope, children) {
-      var selectorType = scope;
-      if(children) {
-        selectorType += '-children';
-      }
-
-      var cssSelector = self.calculateUniqueCSSSelector(element);
-      if(cssSelector) {
-        return 'css:' + selectorType + '="' + cssSelector + '"';
-      } else {
-        var xpathSelector = self.calculateUniqueXPathExpression(element);
-        return selectorType + '="' + xpathSelector + '"';
-      }
-
-    };
-  };
-
   var Inspector = Base.extend({
     defaults: {
       name: 'name',
       ruleBuilder: null,
-      onsave: function() {},
-      onselect: function() {},
       showReload: false
     },
     init: function() {
@@ -250,7 +68,7 @@ define([
 
       self.$reloadBtn = $('a.refresh', self.$el);
 
-      $('a.clear', self.$frameShelfContainer).click(function(e) {
+      $('a.clearInspector', self.$frameShelfContainer).click(function(e) {
         e.preventDefault();
         self.save(null);
       });
@@ -369,7 +187,7 @@ define([
       self.animateSelector();
       self.$selectorInfo.text(element === null ? '' : self.ruleBuilder.bestSelector(element));
 
-      this.options.onsave(this, element);
+      self.onsave(this, element);
     },
     clearOutline: function(element){
       var self = this;
@@ -380,7 +198,7 @@ define([
 
       self.currentOutline = null;
       self.$currentSelector.text('');
-      self.options.onselect(self, null);
+      self.onselect(self, null);
     },
     setOutline: function(element) {
       var self = this;
@@ -394,11 +212,10 @@ define([
       if(self.currentOutline !== null) {
         self.clearOutline(self.currentOutline);
       }
-
       self.currentOutline = element;
       self.$currentSelector.text(self.ruleBuilder.bestSelector(element));
 
-      self.options.onselect(self, element);
+      self.onselect(self, element);
     },
     animateSelector: function(highlightColor, duration) {
       var self = this;
@@ -415,6 +232,27 @@ define([
         .animate({ backgroundColor: originalBg }, animateMs, null, function () {
           self.$frameInfo.css('backgroundColor', originalBg);
         });
+    },
+    onsave: function(highlighter, node) {
+      var self = this;
+      if(node == null) {
+        self.$el.find('.frame-shelf-container').hide();
+      } else {
+        self.$el.find('.frame-shelf-container').show();
+      }
+
+      self.animateSelector(self.$el.find('.frame-info'));
+      self.$el.find('.selector-info').text(node == null? "" : self.ruleBuilder.bestSelector(node));
+
+      if(self.ruleBuilder.active) {
+        self.ruleBuilder.select(node);
+        self.ruleBuilder.next();
+      }
+
+    },
+    onselect: function(highlighter, node) {
+      var self = this;
+      self.$currentSelector.text(node == null? "" : self.ruleBuilder.bestSelector(node));
     }
   });
 
@@ -440,8 +278,11 @@ define([
     fileManager: null,
     mockupInspector: null,
     unthemedInspector: null,
+    ruleBuilder: null,
+    rulebuilderView: null,
     $fileManager: null,
     $container: null,
+    $inspectorContainer: null,
     $mockupInspector: null,
     $unthemedInspector: null,
     init: function() {
@@ -451,13 +292,11 @@ define([
       }
       self.$fileManager = $('<div class="pat-filemanager"/>').appendTo(self.$el);
       self.$container = $('<div class="row"></div>').appendTo(self.$el);
-      self.$mockupInspector = $('<div class="mockup-inspector"/>').appendTo(self.$container);
-      self.$unthemedInspector = $('<div class="unthemed-inspector"/>').appendTo(self.$container);
+      self.$inspectorContainer = $('<div id="inspectors"></div>').appendTo(self.$container);
+      self.$mockupInspector = $('<div class="mockup-inspector"/>').appendTo(self.$inspectorContainer);
+      self.$unthemedInspector = $('<div class="unthemed-inspector"/>').appendTo(self.$inspectorContainer);
 
       // initialize patterns now
-      self.ruleBuilder = new RuleBuilder(function(){
-        debugger; //callback
-      });
       self.editable = (self.options.editable == "True") ? true : false;
 
       self.options.filemanagerConfig.uploadUrl = self.options.themeUrl;
@@ -465,25 +304,30 @@ define([
       self.fileManager = new FileManager(self.$fileManager, self.options.filemanagerConfig);
       self.fileManager.setUploadUrl();
 
+      self.setupButtons();
+
+      self.ruleBuilder = new RuleBuilder(self, self.ruleBuilderCallback);
+
       self.mockupInspector = new Inspector(self.$mockupInspector, {
         name: _t('HTML mockup'),
         ruleBuilder: self.ruleBuilder,
         url: self.options.mockupUrl,
-        showReload: true
+        showReload: true,
       });
       self.unthemedInspector = new Inspector(self.$unthemedInspector, {
         name: _t('Unthemed content'),
         ruleBuilder: self.ruleBuilder,
-        url: self.options.unthemedUrl
+        url: self.options.unthemedUrl,
       });
-      self.setupButtons();
-
       if( !self.editable ) {
-        var items = self.fileManager.toolbar.items;
-        $(items).each(function() {
-          this.disable();
-        });
-      }
+        if( self.fileManager.toolbar ) {
+          var items = self.fileManager.toolbar.items;
+          $(items).each(function() {
+            this.disable();
+          });
+        }
+      };
+
       // initially, let's hide the panels
       self.hideInspectors();
     },
@@ -496,7 +340,7 @@ define([
       self.showInspectorsButton.applyTemplate();
       $('html, body').animate({
         scrollTop: $parent.offset().top - 50
-      }, 1000);
+      }, 500);
     },
     hideInspectors: function(){
       var self = this;
@@ -565,7 +409,10 @@ define([
       self.helpButton.on('button:click', function(){
         window.open(self.options.helpUrl);
       });
-
+      self.rulebuilderView = new RuleBuilderView({
+        triggerView: self.buildRuleButton,
+        app: self
+      });
       self.buttonGroup = new ButtonGroup({
         items: [
           self.showInspectorsButton,
@@ -577,6 +424,7 @@ define([
         id: 'mapper'
       });
       $('#toolbar .navbar', self.$el).append(self.buttonGroup.render().el);
+      $('#toolbar .navbar', self.$el).append(self.rulebuilderView.render().el);
     }
   });
 
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index 915d990..5d1562d 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -16,11 +16,6 @@
         height: 600px;
     }
 
-    .mockup-inspector {
-        clear: both;
-        padding: 10px 0 10px 0;
-    }
-
     .fullscreen {
         vertical-align: top;
         display: inline-block;
@@ -99,7 +94,7 @@
         .info {
             width: 100%;
             height: 100%;
-            
+
             img {
                 max-height: 80%;
             }
@@ -189,7 +184,7 @@
         padding: 0 5px 0 5px;
         font-size: x-small;
     }
-    
+
     .upload-area {
         border: 2px dashed #ddd;
         background-color: #eee;
@@ -251,4 +246,40 @@
             display: none;
         }
     }
+
+    .rulebuilderView {
+        max-width: 500px;
+
+        .inputs {
+            border: 1px solid #999;
+            padding: 5px;
+        }
+
+        .new-rule-type-panel > div {
+            margin-top: 5px;
+        }
+
+        .formControls {
+            margin-top: 5px;
+        }
+
+        #new-rule-output {
+            margin: 5px 0 5px 0;
+            width: 100%;
+            height: 80px;
+        }
+
+        #new-rule-reuse-panel {
+            margin-top: 15px;
+        }
+    }
+
+    #inspectors {
+        clear: both;
+
+        .frame-shelf-container {
+            margin-right: 5px;
+        }
+    }
+
 }
diff --git a/mockup/patterns/thememapper/templates/inspector.xml b/mockup/patterns/thememapper/templates/inspector.xml
index a6837dc..c4db003 100644
--- a/mockup/patterns/thememapper/templates/inspector.xml
+++ b/mockup/patterns/thememapper/templates/inspector.xml
@@ -17,7 +17,7 @@
     <div class="frame-shelf-container" style="display:none">
       <span i18n:translate="theming_mapper_shelf_label">Selected:</span>
       <span class="selector-info"></span>
-      <a class="clear" href="#clear"
+      <a class="clearInspector" href="#clearInspector"
          title="Clear selection" i18n:attributes="title">x</a>
     </div>
     <span class="current-selector"></span>
@@ -36,4 +36,4 @@
     Press <em>Esc</em> to select parent.
   </div>
 
-</div>
\ No newline at end of file
+</div>
diff --git a/mockup/patterns/thememapper/templates/rulebuilder.xml b/mockup/patterns/thememapper/templates/rulebuilder.xml
new file mode 100644
index 0000000..9d4584f
--- /dev/null
+++ b/mockup/patterns/thememapper/templates/rulebuilder.xml
@@ -0,0 +1,107 @@
+<div class="new-rule">
+    <h1 class="documentFirstHeading">Build rule</h1>
+
+    <div id="new-rule-step-1" class="rule-wizard-step" style="display: block;">
+        <div class="documentDescription">
+            This wizard will help you build a Diazo rule by selecting relevant elements using
+            the <strong>HTML mockup</strong> and <strong>Unthemed content</strong> inspectors.
+        </div>
+
+        <form>
+            <div id="new-rule-type-panel" class="inputs">
+                <div>
+                    <input type="radio" name="new-rule-type" value="replace" id="new-rule-replace" checked="checked" />
+                    <label for="new-rule-replace">
+                        <strong>Replace</strong> an element of the theme with an element from the content
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="before" id="new-rule-before" />
+                    <label for="new-rule-before">
+                        Insert an element from the content <strong>before</strong> an element in the theme
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="after" id="new-rule-after" />
+                    <label for="new-rule-after">
+                        Insert an element from the content <strong>after</strong> an element in the theme
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="drop:content" id="new-rule-drop-content" />
+                    <label for="new-rule-drop-content">
+                        <strong>Drop</strong> an element in the <strong>content</strong>
+                    </label>
+                </div>
+                <div>
+                    <input type="radio" name="new-rule-type" value="drop:theme" id="new-rule-drop-theme" />
+                    <label for="new-rule-drop-theme">
+                        <strong>Drop</strong> an element in the <strong>theme</strong>
+                    </label>
+                </div>
+            </div>
+            <div class="field inputs" id="new-rule-reuse-panel" style="display: none;">
+                <input type="checkbox" name="new-rule-reuse-selectors" value="yes" id="new-rule-reuse-selectors" checked="checked" />
+                <label for="new-rule-reuse-selectors">
+                    Use selected elements
+                </label>
+                <div class="formHelp">
+                    If selected, the rule builder will use the elements you have currently selected
+                    in the <strong>HTML mockup</strong> and/or <strong>Unthemed content</strong>
+                    inspectors instead of prompting you to select new ones.
+                </div>
+            </div>
+        </form>
+
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context next submitting" value="Next" />
+            <input type="submit" class="allowMultiSubmit standalone close" value="Cancel" />
+        </div>
+
+    </div>
+    <div id="new-rule-select-theme" class="rule-wizard-step" style="display: none;">
+        <div class="documentDescription">
+            Please select an element using the <strong>HTML mockup</strong> inspector.
+        </div>
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context next" value="Ok" />
+            <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel" />
+        </div>
+    </div>
+    <div id="new-rule-select-content" class="rule-wizard-step" style="display: none;">
+        <div class="documentDescription">
+            Please select an element using the <strong>Unthemed content</strong> inspector.
+        </div>
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context next submitting" value="Ok" />
+            <input type="submit" class="allowMultiSubmit standalone wizard-cancel" value="Cancel" />
+        </div>
+    </div>
+    <div id="new-rule-step-2" class="rule-wizard-step" style="display: none;">
+        <div class="documentDescription">
+            The rule can be found below. Use the checkboxes
+            to further refine it.
+        </div>
+        <form>
+            <div id="new-rule-output-panel">
+                <textarea name="new-rule-output" id="new-rule-output"></textarea>
+            </div>
+            <div id="new-rule-selector-panel">
+                <div>
+                    <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children" />
+                    <label for="new-rule-theme-children">Apply rule to children of the matched theme node(s)</label>
+                </div>
+                <div>
+                    <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children" />
+                    <label for="new-rule-content-children">Apply rule to children of the matched content node(s)</label>
+                </div>
+            </div>
+
+        </form>
+        <div class="formControls new-rule-actions">
+            <input type="submit" class="allowMultiSubmit context insert submitting" title="Insert rule into the rules.xml file" value="Insert" />
+            <input type="submit" class="allowMultiSubmit context copy" value="Copy to clipboard" style="display: none;" />
+            <input type="submit" class="allowMultiSubmit standalone close" value="Close" />
+        </div>
+    </div>
+</div>
diff --git a/mockup/tests/pattern-thememapper-test.js b/mockup/tests/pattern-thememapper-test.js
new file mode 100644
index 0000000..5ddbcb3
--- /dev/null
+++ b/mockup/tests/pattern-thememapper-test.js
@@ -0,0 +1,76 @@
+define([
+  'expect',
+  'sinon',
+  'jquery',
+  'pat-registry',
+  'mockup-patterns-thememapper',
+], function(expect, sinon, $, registry, RuleBuilderView ) {
+  'use strict';
+
+  window.mocha.setup('bdd');
+  $.fx.off = true;
+
+/* ==========================
+   TEST: Thememapper
+  ========================== */
+
+  describe('Thememapper', function () {
+
+    beforeEach(function() {
+      this.$el = $('' +
+        '<div>' +
+        '  <div class="pat-thememapper"' +
+        ' data-pat-thememapper=\'filemanagerConfig:{"actionUrl":"/filemanager-actions"}; ' +
+        ' themeUrl: "/theme_url";\'>'  +
+        '  </div>' +
+        '</div>').appendTo('body');
+    });
+    afterEach(function() {
+      this.$el.remove();
+    });
+
+    it('Setup components', function() {
+      expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(false);
+      // initialize pattern
+      registry.scan(this.$el);
+
+      this.clock = sinon.useFakeTimers();
+      this.clock.tick(1000);
+      expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(true);
+      expect($('#mapper', this.$el).length > 0).to.be.equal(true);
+      expect($('#showinspectors', this.$el).length > 0).to.be.equal(true);
+      expect($('#buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('#previewtheme', this.$el).length > 0).to.be.equal(true);
+      expect($('#fullscreenEditor', this.$el).length > 0).to.be.equal(true);
+      expect($('#helpbutton', this.$el).length > 0).to.be.equal(true);
+      expect($('#inspectors', this.$el).length > 0).to.be.equal(true);
+      expect($('.container', this.$el).length > 0).to.be.equal(true);
+
+      //This one is added after clicking the "fullscreen" button
+      expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
+    });
+
+    it('Test buttons', function() {
+      registry.scan(this.$el);
+
+      this.clock = sinon.useFakeTimers();
+      this.clock.tick(1000);
+
+      expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
+      expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(false);
+      $('#fullscreenEditor', this.$el).click();
+      expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(true);
+      expect($('.closeeditor', this.$el).length > 0).to.be.equal(true);
+
+      $('.closeeditor', this.$el).click();
+      expect($('.container', this.$el).hasClass('fullscreen')).to.be.equal(false);
+      expect($('.closeeditor', this.$el).length === 0).to.be.equal(true);
+
+      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(false);
+      $('#showinspectors', this.$el).click();
+      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(true);
+      $('#showinspectors', this.$el).click();
+      expect($('#inspectors', this.$el).is(':visible')).to.be.equal(false);
+    });
+  });
+});


