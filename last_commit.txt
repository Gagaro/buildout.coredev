Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-02T15:17:16+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/1bc48f7976000be0ff2d0e6b6cc06372cc5d2f41

add leadimage-migration

Files changed:
M plone/app/contenttypes/migration/migration.py
M plone/app/contenttypes/migration/utils.py

diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 5f28383..5ca27e5 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -23,6 +23,7 @@
 from plone.app.contenttypes.migration.utils import add_portlet
 from plone.app.contenttypes.migration.utils import copy_contentrules
 from plone.app.contenttypes.migration.utils import move_comments
+from plone.app.contenttypes.migration.utils import migrate_leadimage
 from plone.app.textfield.value import RichTextValue
 from plone.app.uuid.utils import uuidToObject
 from plone.dexterity.interfaces import IDexterityContent
@@ -296,6 +297,9 @@ def migrate_portlets(self):
     def migrate_contentrules(self):
         copy_contentrules(self.old, self.new)
 
+    def migrate_leadimage(self):
+        migrate_leadimage(self.old, self.new)
+
     def last_migrate_comments(self):
         """Migrate the plone.app.discussion comments.
            Comments were stored on the portal, get them and
@@ -336,6 +340,9 @@ def migrate_portlets(self):
     def migrate_contentrules(self):
         copy_contentrules(self.old, self.new)
 
+    def migrate_leadimage(self):
+        migrate_leadimage(self.old, self.new)
+
     def last_migrate_comments(self):
         """Migrate the plone.app.discussion comments.
            Comments were stored on the portal, get them and
diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 5eb6d15..20ae0d4 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode, safe_hasattr
 from Products.GenericSetup.context import DirectoryImportContext
 from Products.GenericSetup.utils import importObjects
 from archetypes.schemaextender.interfaces import IBrowserLayerAwareExtender
@@ -8,11 +9,13 @@
 from archetypes.schemaextender.interfaces import ISchemaModifier
 from copy import deepcopy
 from plone.app.contentrules.api import assign_rule
+from plone.app.contenttypes.behaviors.leadimage import ILeadImage
 from plone.app.contenttypes.utils import DEFAULT_TYPES
 from plone.app.discussion.conversation import ANNOTATION_KEY as DISCUSSION_KEY
 from plone.app.discussion.interfaces import IConversation
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
 from plone.dexterity.interfaces import IDexterityFTI
+from plone.namedfile.file import NamedBlobImage
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
 from zope.annotation.interfaces import IAnnotations
@@ -156,3 +159,49 @@ def copy_contentrules(source_object, target_object):
             return
         for rule_id in source_assignable:
             assign_rule(target_object, rule_id)
+
+def migrate_leadimage(source_object, target_object):
+    """ Migrate images added using collective.contentleadimage to the
+    ILeadImage-behavior of plone.app.contenttypes if it is enabled.
+    """
+    OLD_LEADIMAGE_FIELD_NAME = 'leadImage'
+    OLD_CAPTION_FIELD_NAME = 'leadImage_caption'
+    NEW_LEADIMAGE_FIELD_NAME = 'image'
+    NEW_CAPTION_FIELD_NAME = 'image_caption'
+
+    old_leadimage_field = source_object.getField(OLD_LEADIMAGE_FIELD_NAME)
+    if not old_leadimage_field:
+        # skip if old content has no field
+        return
+
+    if ILeadImage(target_object, None) is None:
+        # skip if new content does not have the LeadImage-behavior enabled
+        logger.info("Target does not have the behavior 'Lead Image' enabled. "
+                    "Could not migrate collective.leadimage fields.")
+        return
+
+    old_image = old_leadimage_field.get(source_object)
+    if not old_image:
+        # skip if image-field is empty
+        return
+
+    filename = safe_unicode(old_image.filename)
+    old_image_data = old_image.data
+    if safe_hasattr(old_image_data, 'data'):
+        # handle relstorage
+        old_image_data = old_image_data.data
+
+    # construct the new image
+    namedblobimage = NamedBlobImage(data=old_image_data,
+                                    filename=filename)
+
+    # set new field on destination object
+    setattr(target_object, NEW_LEADIMAGE_FIELD_NAME, namedblobimage)
+
+    # handle image caption field
+    caption_field = source_object.getField(OLD_CAPTION_FIELD_NAME, None)
+    if caption_field:
+        setattr(target_object,
+                (NEW_CAPTION_FIELD_NAME),
+                safe_unicode(caption_field.get(source_object)))
+    logger.info("Migrating contentlead image %s" % filename)


Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-10T11:05:27+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/bff830f89f77e16bbdccbb05def14830147a6ba6

add warning and infos when migration with collective.contentleadimage

Files changed:
M plone/app/contenttypes/migration/atct_migrator.pt
M plone/app/contenttypes/migration/browser.py

diff --git a/plone/app/contenttypes/migration/atct_migrator.pt b/plone/app/contenttypes/migration/atct_migrator.pt
index 9b21679..9bb49e9 100644
--- a/plone/app/contenttypes/migration/atct_migrator.pt
+++ b/plone/app/contenttypes/migration/atct_migrator.pt
@@ -29,7 +29,9 @@
                          linguaplone_installed helpers/linguaplone_installed;
                          object_number helpers/objects_to_be_migrated;
                          subtopics helpers/site_has_subtopics;
-                         collections_are_folderish helpers/collections_are_folderish;">
+                         collections_are_folderish helpers/collections_are_folderish;
+                         has_contentleadimage helpers/has_contentleadimage;
+                         installed_types helpers/installed_types;">
   <div class="important">
     <h2 i18n:translate="">Important</h2>
     <p i18n:translate="">Before migrating your content please read the <a href="https://github.com/plone/plone.app.contenttypes#migration">migration-section in the documentation of plone.app.contenttypes</a></p>
@@ -94,6 +96,22 @@
         <p i18n:translate="">Your site has <span tal:replace="python: len(subtopics)" /> subtopic(s). You can migrate them since you have folderish Collections but their functionality to inherit criteria will not work unless you.</p>
       </div>
     </tal:block>
+    <tal:block condition="python: has_contentleadimage"
+               tal:define="installed_with_behavior python:installed_types['installed_with_behavior'];
+                           installed_without_behavior python:installed_types['installed_without_behavior'];
+                           not_installed python:installed_types['not_installed']">
+      <div class="important">
+        <h2 i18n:translate="">Warning</h2>
+        <p i18n:translate="">
+          Your site seems to use the addon <a href="https://pypi.python.org/pypi/collective.contentleadimage/">collective.contentleadimage</a>.
+          This addons allows you to add images to any content in your site. These images will <strong>not</strong> be migrated unless you enable the behavior "Lead Image" on all those types where you want to migrate images added using collective.contentleadimage. Depending on the way you installed plone.app.contenttypes you might have to first install these types by (re-)installing plone.app.contenttypes. The old types that use leadimages are listed in the navigation-form with the comment <em>"extended fields: 'leadImage', 'leadImage_caption'"</em>
+        </p>
+        <p tal:condition="python:installed_with_behavior">These types are installed and have the image-behavior: <span tal:content="python:', '.join(installed_with_behavior)">Document, Image</span></p>
+        <p tal:condition="python:installed_without_behavior">These types are installed but do not have the behavior enabled: <span tal:content="python:', '.join(installed_without_behavior)">Link, File</span></p>
+        <p tal:condition="python:not_installed">These types are not installed yet: <span tal:content="python:', '.join(not_installed)">News Item, Folder</span></p>
+      </div>
+    </tal:block>
+
   </tal:block>
   <tal:block condition="not:object_number">
     <div class="important">
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index 91ce767..2f6191f 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -9,8 +9,14 @@
 from Products.statusmessages.interfaces import IStatusMessage
 from datetime import datetime
 from datetime import timedelta
-from plone.app.contenttypes.migration import migration
+from plone.app.contenttypes.content import Document
+from plone.app.contenttypes.content import File
+from plone.app.contenttypes.content import Folder
+from plone.app.contenttypes.content import Image
+from plone.app.contenttypes.content import Link
+from plone.app.contenttypes.content import NewsItem
 from plone.app.contenttypes.migration import dxmigration
+from plone.app.contenttypes.migration import migration
 from plone.app.contenttypes.migration.utils import HAS_MULTILINGUAL
 from plone.app.contenttypes.migration.utils import installTypeIfNeeded
 from plone.app.contenttypes.migration.utils import isSchemaExtended
@@ -31,20 +37,18 @@
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
 from zope.interface import Interface
-import logging
 
-logger = logging.getLogger(__name__)
+import logging
+import pkg_resources
 
-# Schema Extender allowed interfaces
+try:
+    pkg_resources.get_distribution('collective.contentleadimage')
+except pkg_resources.DistributionNotFound:
+    HAS_CONTENTLEADIMAGE = False
+else:
+    HAS_CONTENTLEADIMAGE = True
 
-from plone.app.contenttypes.content import (
-    Document,
-    File,
-    Folder,
-    Image,
-    Link,
-    NewsItem,
-)
+logger = logging.getLogger(__name__)
 
 PATCH_NOTIFY = [
     DexterityContent,
@@ -526,6 +530,28 @@ class FolderishCollection(Container):
             logger.warn("You are trying to migrate topic to collection. "
                 "Instead you need a type 'Collection'.")
 
+    def has_contentleadimage(self):
+        return HAS_CONTENTLEADIMAGE
+
+    def installed_types(self):
+        """Which types are already Dexterity and which are not."""
+        results = {}
+        results['installed_with_behavior'] = []
+        results['installed_without_behavior'] = []
+        results['not_installed'] = []
+        behavior = 'plone.app.contenttypes.behaviors.leadimage.ILeadImage'
+        portal_types = getToolByName(self.context, 'portal_types')
+        for type_name in DEFAULT_TYPES:
+            fti = queryUtility(IDexterityFTI, name=type_name)
+            if fti:
+                if behavior in fti.behaviors:
+                    results['installed_with_behavior'].append(type_name)
+                else:
+                    results['installed_without_behavior'].append(type_name)
+            else:
+                results['not_installed'].append(type_name)
+        return results
+
 
 class ATCTMigratorResults(BrowserView):
 


Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-10T11:38:19+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/3d4fac9fadcb25604205d80c0c4d5c4864be2d00

document migrating content with collective.contentleadimage

Files changed:
M docs/README.rst

diff --git a/docs/README.rst b/docs/README.rst
index 56b4bdb..e22e623 100644
--- a/docs/README.rst
+++ b/docs/README.rst
@@ -222,7 +222,7 @@ Since LinguaPlone does not support Dexterity you need to migrate from LinguaPlon
 Migrating from old versions of plone.app.contenttypes
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Before version 1.0a2 the content-items did not implement marker-interfaces.  They will break in newer versions since the views are now registered for these interfaces (e.g. ``plone.app.contenttypes.interfaces.IDocument``). To fix this you can call the view ``/@@fix_base_classes`` on your site-root.
+Before version 1.0a2 the content-items did not implement marker-interfaces. They will break in newer versions since the views are now registered for these interfaces (e.g. ``plone.app.contenttypes.interfaces.IDocument``). To fix this you can call the view ``/@@fix_base_classes`` on your site-root.
 
 Since plone.app.contenttypes 1.1a1, the Collection type uses the new Collection behavior and the Event type utilizes behaviors from `plone.app.event <http://pypi.python.org/pypi/plone.app.event>`_. In order to upgrade:
 
@@ -233,9 +233,17 @@ Since plone.app.contenttypes 1.1a1, the Collection type uses the new Collection
 Migrating default-content that was extended with archetypes.schemaextender
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-The migration should warn you if any of your types are extended with archetypes.schemaextender. The data contained in these fields will be lost.
+The migration-form warns you if any of your old types were extended with aditional fields using archetypes.schemaextender. The data contained in these fields will be lost during migration (with the exception of images added with collective.contentleadimage).
 
-You need to implement a custom migration for your types and dexterity-behaviors for the functionality provided by the schemaextenders. This is an advanced development task and beyond the scope of this documentation.
+To keep the data you would need to write a custom migration for your types dexterity-behaviors for the functionality provided by the schemaextenders. This is an advanced development task and beyond the scope of this documentation.
+
+
+Migrating images created with collective.contentleadimage
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+`collective.contentleadimage <https://pypi.python.org/pypi/collective.contentleadimage/>`_ was a popular addon that allows you to add images to any content in your site by extending the default types. To make sure these images are kept during migration you have to enable the behavior "Lead Image" on all those types where you want to migrate images added using collective.contentleadimage.
+
+The old types that use leadimages are listed in the navigation-form with the comment *"extended fields: 'leadImage', 'leadImage_caption'"*. The migration-form informs you which new types have the behavior enabled and which do not. Depending on the way you installed plone.app.contenttypes you might have to first install these types by (re-)installing plone.app.contenttypes.
 
 
 Migrating custom content


Repository: plone.app.contenttypes
Branch: refs/heads/master
Date: 2015-01-13T11:11:39+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/ab959ecc8b22d27adbc3eb7a38ec3852df2acd00

Merge pull request #200 from plone/leadimage

Migrate images from collective.contentleadimage

Files changed:
M docs/README.rst
M plone/app/contenttypes/migration/atct_migrator.pt
M plone/app/contenttypes/migration/browser.py
M plone/app/contenttypes/migration/migration.py
M plone/app/contenttypes/migration/utils.py

diff --git a/docs/README.rst b/docs/README.rst
index 56b4bdb..e22e623 100644
--- a/docs/README.rst
+++ b/docs/README.rst
@@ -222,7 +222,7 @@ Since LinguaPlone does not support Dexterity you need to migrate from LinguaPlon
 Migrating from old versions of plone.app.contenttypes
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Before version 1.0a2 the content-items did not implement marker-interfaces.  They will break in newer versions since the views are now registered for these interfaces (e.g. ``plone.app.contenttypes.interfaces.IDocument``). To fix this you can call the view ``/@@fix_base_classes`` on your site-root.
+Before version 1.0a2 the content-items did not implement marker-interfaces. They will break in newer versions since the views are now registered for these interfaces (e.g. ``plone.app.contenttypes.interfaces.IDocument``). To fix this you can call the view ``/@@fix_base_classes`` on your site-root.
 
 Since plone.app.contenttypes 1.1a1, the Collection type uses the new Collection behavior and the Event type utilizes behaviors from `plone.app.event <http://pypi.python.org/pypi/plone.app.event>`_. In order to upgrade:
 
@@ -233,9 +233,17 @@ Since plone.app.contenttypes 1.1a1, the Collection type uses the new Collection
 Migrating default-content that was extended with archetypes.schemaextender
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-The migration should warn you if any of your types are extended with archetypes.schemaextender. The data contained in these fields will be lost.
+The migration-form warns you if any of your old types were extended with aditional fields using archetypes.schemaextender. The data contained in these fields will be lost during migration (with the exception of images added with collective.contentleadimage).
 
-You need to implement a custom migration for your types and dexterity-behaviors for the functionality provided by the schemaextenders. This is an advanced development task and beyond the scope of this documentation.
+To keep the data you would need to write a custom migration for your types dexterity-behaviors for the functionality provided by the schemaextenders. This is an advanced development task and beyond the scope of this documentation.
+
+
+Migrating images created with collective.contentleadimage
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+`collective.contentleadimage <https://pypi.python.org/pypi/collective.contentleadimage/>`_ was a popular addon that allows you to add images to any content in your site by extending the default types. To make sure these images are kept during migration you have to enable the behavior "Lead Image" on all those types where you want to migrate images added using collective.contentleadimage.
+
+The old types that use leadimages are listed in the navigation-form with the comment *"extended fields: 'leadImage', 'leadImage_caption'"*. The migration-form informs you which new types have the behavior enabled and which do not. Depending on the way you installed plone.app.contenttypes you might have to first install these types by (re-)installing plone.app.contenttypes.
 
 
 Migrating custom content
diff --git a/plone/app/contenttypes/migration/atct_migrator.pt b/plone/app/contenttypes/migration/atct_migrator.pt
index 9b21679..9bb49e9 100644
--- a/plone/app/contenttypes/migration/atct_migrator.pt
+++ b/plone/app/contenttypes/migration/atct_migrator.pt
@@ -29,7 +29,9 @@
                          linguaplone_installed helpers/linguaplone_installed;
                          object_number helpers/objects_to_be_migrated;
                          subtopics helpers/site_has_subtopics;
-                         collections_are_folderish helpers/collections_are_folderish;">
+                         collections_are_folderish helpers/collections_are_folderish;
+                         has_contentleadimage helpers/has_contentleadimage;
+                         installed_types helpers/installed_types;">
   <div class="important">
     <h2 i18n:translate="">Important</h2>
     <p i18n:translate="">Before migrating your content please read the <a href="https://github.com/plone/plone.app.contenttypes#migration">migration-section in the documentation of plone.app.contenttypes</a></p>
@@ -94,6 +96,22 @@
         <p i18n:translate="">Your site has <span tal:replace="python: len(subtopics)" /> subtopic(s). You can migrate them since you have folderish Collections but their functionality to inherit criteria will not work unless you.</p>
       </div>
     </tal:block>
+    <tal:block condition="python: has_contentleadimage"
+               tal:define="installed_with_behavior python:installed_types['installed_with_behavior'];
+                           installed_without_behavior python:installed_types['installed_without_behavior'];
+                           not_installed python:installed_types['not_installed']">
+      <div class="important">
+        <h2 i18n:translate="">Warning</h2>
+        <p i18n:translate="">
+          Your site seems to use the addon <a href="https://pypi.python.org/pypi/collective.contentleadimage/">collective.contentleadimage</a>.
+          This addons allows you to add images to any content in your site. These images will <strong>not</strong> be migrated unless you enable the behavior "Lead Image" on all those types where you want to migrate images added using collective.contentleadimage. Depending on the way you installed plone.app.contenttypes you might have to first install these types by (re-)installing plone.app.contenttypes. The old types that use leadimages are listed in the navigation-form with the comment <em>"extended fields: 'leadImage', 'leadImage_caption'"</em>
+        </p>
+        <p tal:condition="python:installed_with_behavior">These types are installed and have the image-behavior: <span tal:content="python:', '.join(installed_with_behavior)">Document, Image</span></p>
+        <p tal:condition="python:installed_without_behavior">These types are installed but do not have the behavior enabled: <span tal:content="python:', '.join(installed_without_behavior)">Link, File</span></p>
+        <p tal:condition="python:not_installed">These types are not installed yet: <span tal:content="python:', '.join(not_installed)">News Item, Folder</span></p>
+      </div>
+    </tal:block>
+
   </tal:block>
   <tal:block condition="not:object_number">
     <div class="important">
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index 91ce767..2f6191f 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -9,8 +9,14 @@
 from Products.statusmessages.interfaces import IStatusMessage
 from datetime import datetime
 from datetime import timedelta
-from plone.app.contenttypes.migration import migration
+from plone.app.contenttypes.content import Document
+from plone.app.contenttypes.content import File
+from plone.app.contenttypes.content import Folder
+from plone.app.contenttypes.content import Image
+from plone.app.contenttypes.content import Link
+from plone.app.contenttypes.content import NewsItem
 from plone.app.contenttypes.migration import dxmigration
+from plone.app.contenttypes.migration import migration
 from plone.app.contenttypes.migration.utils import HAS_MULTILINGUAL
 from plone.app.contenttypes.migration.utils import installTypeIfNeeded
 from plone.app.contenttypes.migration.utils import isSchemaExtended
@@ -31,20 +37,18 @@
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
 from zope.interface import Interface
-import logging
 
-logger = logging.getLogger(__name__)
+import logging
+import pkg_resources
 
-# Schema Extender allowed interfaces
+try:
+    pkg_resources.get_distribution('collective.contentleadimage')
+except pkg_resources.DistributionNotFound:
+    HAS_CONTENTLEADIMAGE = False
+else:
+    HAS_CONTENTLEADIMAGE = True
 
-from plone.app.contenttypes.content import (
-    Document,
-    File,
-    Folder,
-    Image,
-    Link,
-    NewsItem,
-)
+logger = logging.getLogger(__name__)
 
 PATCH_NOTIFY = [
     DexterityContent,
@@ -526,6 +530,28 @@ class FolderishCollection(Container):
             logger.warn("You are trying to migrate topic to collection. "
                 "Instead you need a type 'Collection'.")
 
+    def has_contentleadimage(self):
+        return HAS_CONTENTLEADIMAGE
+
+    def installed_types(self):
+        """Which types are already Dexterity and which are not."""
+        results = {}
+        results['installed_with_behavior'] = []
+        results['installed_without_behavior'] = []
+        results['not_installed'] = []
+        behavior = 'plone.app.contenttypes.behaviors.leadimage.ILeadImage'
+        portal_types = getToolByName(self.context, 'portal_types')
+        for type_name in DEFAULT_TYPES:
+            fti = queryUtility(IDexterityFTI, name=type_name)
+            if fti:
+                if behavior in fti.behaviors:
+                    results['installed_with_behavior'].append(type_name)
+                else:
+                    results['installed_without_behavior'].append(type_name)
+            else:
+                results['not_installed'].append(type_name)
+        return results
+
 
 class ATCTMigratorResults(BrowserView):
 
diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 5f28383..5ca27e5 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -23,6 +23,7 @@
 from plone.app.contenttypes.migration.utils import add_portlet
 from plone.app.contenttypes.migration.utils import copy_contentrules
 from plone.app.contenttypes.migration.utils import move_comments
+from plone.app.contenttypes.migration.utils import migrate_leadimage
 from plone.app.textfield.value import RichTextValue
 from plone.app.uuid.utils import uuidToObject
 from plone.dexterity.interfaces import IDexterityContent
@@ -296,6 +297,9 @@ def migrate_portlets(self):
     def migrate_contentrules(self):
         copy_contentrules(self.old, self.new)
 
+    def migrate_leadimage(self):
+        migrate_leadimage(self.old, self.new)
+
     def last_migrate_comments(self):
         """Migrate the plone.app.discussion comments.
            Comments were stored on the portal, get them and
@@ -336,6 +340,9 @@ def migrate_portlets(self):
     def migrate_contentrules(self):
         copy_contentrules(self.old, self.new)
 
+    def migrate_leadimage(self):
+        migrate_leadimage(self.old, self.new)
+
     def last_migrate_comments(self):
         """Migrate the plone.app.discussion comments.
            Comments were stored on the portal, get them and
diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 5eb6d15..20ae0d4 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode, safe_hasattr
 from Products.GenericSetup.context import DirectoryImportContext
 from Products.GenericSetup.utils import importObjects
 from archetypes.schemaextender.interfaces import IBrowserLayerAwareExtender
@@ -8,11 +9,13 @@
 from archetypes.schemaextender.interfaces import ISchemaModifier
 from copy import deepcopy
 from plone.app.contentrules.api import assign_rule
+from plone.app.contenttypes.behaviors.leadimage import ILeadImage
 from plone.app.contenttypes.utils import DEFAULT_TYPES
 from plone.app.discussion.conversation import ANNOTATION_KEY as DISCUSSION_KEY
 from plone.app.discussion.interfaces import IConversation
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
 from plone.dexterity.interfaces import IDexterityFTI
+from plone.namedfile.file import NamedBlobImage
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
 from zope.annotation.interfaces import IAnnotations
@@ -156,3 +159,49 @@ def copy_contentrules(source_object, target_object):
             return
         for rule_id in source_assignable:
             assign_rule(target_object, rule_id)
+
+def migrate_leadimage(source_object, target_object):
+    """ Migrate images added using collective.contentleadimage to the
+    ILeadImage-behavior of plone.app.contenttypes if it is enabled.
+    """
+    OLD_LEADIMAGE_FIELD_NAME = 'leadImage'
+    OLD_CAPTION_FIELD_NAME = 'leadImage_caption'
+    NEW_LEADIMAGE_FIELD_NAME = 'image'
+    NEW_CAPTION_FIELD_NAME = 'image_caption'
+
+    old_leadimage_field = source_object.getField(OLD_LEADIMAGE_FIELD_NAME)
+    if not old_leadimage_field:
+        # skip if old content has no field
+        return
+
+    if ILeadImage(target_object, None) is None:
+        # skip if new content does not have the LeadImage-behavior enabled
+        logger.info("Target does not have the behavior 'Lead Image' enabled. "
+                    "Could not migrate collective.leadimage fields.")
+        return
+
+    old_image = old_leadimage_field.get(source_object)
+    if not old_image:
+        # skip if image-field is empty
+        return
+
+    filename = safe_unicode(old_image.filename)
+    old_image_data = old_image.data
+    if safe_hasattr(old_image_data, 'data'):
+        # handle relstorage
+        old_image_data = old_image_data.data
+
+    # construct the new image
+    namedblobimage = NamedBlobImage(data=old_image_data,
+                                    filename=filename)
+
+    # set new field on destination object
+    setattr(target_object, NEW_LEADIMAGE_FIELD_NAME, namedblobimage)
+
+    # handle image caption field
+    caption_field = source_object.getField(OLD_CAPTION_FIELD_NAME, None)
+    if caption_field:
+        setattr(target_object,
+                (NEW_CAPTION_FIELD_NAME),
+                safe_unicode(caption_field.get(source_object)))
+    logger.info("Migrating contentlead image %s" % filename)


