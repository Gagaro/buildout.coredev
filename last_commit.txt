Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2015-10-29T20:46:01+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/ae74a0e3b68fe008b679571ead7711d0d8d3c6c4

Removed superfluous white space.

Files changed:
M docs/advanced/custom-add-and-edit-forms.rst
M docs/advanced/permissions.rst
M docs/grok/advanced/permissions.rst
M plone/app/dexterity/browser/tabbed_forms.pt
M plone/app/dexterity/tests/test_import.py

diff --git a/docs/advanced/custom-add-and-edit-forms.rst b/docs/advanced/custom-add-and-edit-forms.rst
index 10f16b2..74cae40 100644
--- a/docs/advanced/custom-add-and-edit-forms.rst
+++ b/docs/advanced/custom-add-and-edit-forms.rst
@@ -40,7 +40,7 @@ This should be registered for a type schema (not a class).
 To create an edit form that is identical to the default, we could do:
 
 .. code-block:: python
-    
+
     from plone.dexterity.browser import edit
 
     class EditForm(edit.DefaultEditForm):
@@ -162,7 +162,7 @@ A custom form replicating the default would look like this:
 
     class AddView(add.DefaultAddView):
         form = AddForm
-    
+
 and be registered in ZCML like this:
 
 .. code-block:: xml
diff --git a/docs/advanced/permissions.rst b/docs/advanced/permissions.rst
index 47b9701..0fc9f58 100644
--- a/docs/advanced/permissions.rst
+++ b/docs/advanced/permissions.rst
@@ -36,7 +36,7 @@ example in a view. A permission check always checks a permission on a
 context object, since permissions can change with workflow.
 
 .. note::
-    Never make security dependent on users’ roles directly. 
+    Never make security dependent on users’ roles directly.
     Always check for a permission, and assign the permission to the appropriate role or roles.
 
 As an example,
diff --git a/docs/grok/advanced/permissions.rst b/docs/grok/advanced/permissions.rst
index 807a42e..9123126 100644
--- a/docs/grok/advanced/permissions.rst
+++ b/docs/grok/advanced/permissions.rst
@@ -36,7 +36,7 @@ example in a view. A permission check always checks a permission on a
 context object, since permissions can change with workflow.
 
 .. note::
-    Never make security dependent on users’ roles directly. 
+    Never make security dependent on users’ roles directly.
     Always check for a permission, and assign the permission to the appropriate role or roles.
 
 As an example,
diff --git a/plone/app/dexterity/browser/tabbed_forms.pt b/plone/app/dexterity/browser/tabbed_forms.pt
index 7ebceab..f7a62b6 100644
--- a/plone/app/dexterity/browser/tabbed_forms.pt
+++ b/plone/app/dexterity/browser/tabbed_forms.pt
@@ -13,7 +13,7 @@
   <h1 class="documentFirstHeading"><tal:block tal:content="context/Title"/> (<tal:block tal:content="python:context.__name__" />)</h1>
 
   <div class="autotabs">
-   
+
     <nav class="autotoc-nav">
       <a tal:repeat="tab view/tabs"
           tal:attributes="href python:context.absolute_url() + '/' + tab[1];
diff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py
index c68d01c..2e42825 100644
--- a/plone/app/dexterity/tests/test_import.py
+++ b/plone/app/dexterity/tests/test_import.py
@@ -96,6 +96,5 @@ def testSampleImportStep(self):
         )
 
 
-
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)


