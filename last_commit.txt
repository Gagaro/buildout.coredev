Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-01T01:26:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/fd1ca9f889c42e13ca8fc2a0be3c03fb416e8b5a

more cleanup after using code-analysis

Files changed:
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/mapper.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/tests/test_caching.py
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/utils.py
M src/plone/app/theming/zmi.py

diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 83c3cb4..78f45d9 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -82,7 +82,7 @@ def update(self):
             IStatusMessage(self.request).add(_(u"Changes cancelled"))
 
             portalUrl = getToolByName(self.context, 'portal_url')()
-            self.redirect("%s/plone_control_panel" % portalUrl)
+            self.redirect("{0:s}/plone_control_panel".format(portalUrl))
 
             return False
 
@@ -292,14 +292,17 @@ def update(self):
             if not self.errors:
                 portalUrl = getToolByName(self.context, 'portal_url')()
                 self.redirect(
-                    "%s/++theme++%s/@@theming-controlpanel-mapper" % (
-                        portalUrl, themeData.__name__,)
+                    "{0}/++theme++{1}/@@theming-controlpanel-mapper".format(
+                        portalUrl,
+                        themeData.__name__
                     )
+                )
                 return False
             else:
                 IStatusMessage(self.request).add(
-                        _(u"There were errors"), "error"
-                    )
+                    _(u"There were errors"),
+                    "error"
+                )
 
                 self.renderOverlay('upload')
                 return True
@@ -334,9 +337,11 @@ def update(self):
 
                 portalUrl = getToolByName(self.context, 'portal_url')()
                 self.redirect(
-                    "%s/++theme++%s/@@theming-controlpanel-mapper" % (
-                        portalUrl, name,)
+                    "{0}/++theme++{1}/@@theming-controlpanel-mapper".format(
+                        portalUrl,
+                        name
                     )
+                )
                 return False
 
         if 'form.button.DeleteSelected' in form:
@@ -390,7 +395,7 @@ def themeList(self):
                 'title': theme.title,
                 'description': theme.description,
                 'editable': theme.__name__ in zodbNames,
-                'preview': "%s/%s" % (portalUrl, previewUrl,),
+                'preview': "{0}/{1}".format(portalUrl, previewUrl),
                 'selected': theme.__name__ == self.selectedTheme,
             })
 
@@ -400,8 +405,13 @@ def themeList(self):
 
     def redirectToFieldset(self, fieldset):
         portalUrl = getToolByName(self.context, 'portal_url')()
-        self.redirect("%s/%s#fieldsetlegend-%s" % (
-            portalUrl, self.__name__, fieldset,))
+        self.redirect(
+            "{0}/{1}#fieldsetlegend-{2}".format(
+                portalUrl,
+                self.__name__,
+                fieldset
+            )
+        )
 
     def renderOverlay(self, overlay):
         self.overlay = overlay
diff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py
index 3a97e53..a7d327a 100644
--- a/src/plone/app/theming/browser/help.py
+++ b/src/plone/app/theming/browser/help.py
@@ -1,6 +1,7 @@
-import pkg_resources
+# -*- coding: utf-8 -*-
 from zope.publisher.browser import BrowserView
 import docutils.core
+import pkg_resources
 
 
 class Help(BrowserView):
@@ -15,4 +16,4 @@ def __call__(self):
             writer_name='html'
         )
         html = parts['body_pre_docinfo'] + parts['fragment']
-        return """<div class="content">%s</div>""" % html
+        return """<div class="content">{0:s}</div>""".format(html)
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index 481799e..88bf917 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -68,9 +68,12 @@ def setup(self):
         self.title = self.theme.title
 
         self.portalUrl = getToolByName(self.context, 'portal_url')()
-        self.themeBasePath = "++%s++%s" % (THEME_RESOURCE_NAME, self.name,)
+        self.themeBasePath = "++{0:s}++{1:s}".format(
+            THEME_RESOURCE_NAME,
+            self.name
+        )
         self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
-        self.themeBaseUrl = "%s/%s" % (self.portalUrl, self.themeBasePath,)
+        self.themeBaseUrl = '/'.join([self.portalUrl, self.themeBasePath])
 
         self.editable = IWritableResourceDirectory.providedBy(
             self.resourceDirectory
diff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py
index e110e84..a07b278 100644
--- a/src/plone/app/theming/plugins/utils.py
+++ b/src/plone/app/theming/plugins/utils.py
@@ -40,7 +40,9 @@ def sortDependencies(plugins):
                 del waiting[(nw, pw)]
 
     if waiting:
-        raise ValueError("Could not resolve dependencies for: %s" % waiting)
+        raise ValueError(
+            "Could not resolve dependencies for: {0:s}".format(waiting)
+        )
 
 
 @cache(pluginsCacheKey)
diff --git a/src/plone/app/theming/tests/test_caching.py b/src/plone/app/theming/tests/test_caching.py
index 3075662..6fed4d4 100644
--- a/src/plone/app/theming/tests/test_caching.py
+++ b/src/plone/app/theming/tests/test_caching.py
@@ -1,19 +1,20 @@
-import unittest2 as unittest
-from plone.testing.z2 import Browser
-from plone.app.testing import applyProfile, setRoles
-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD
-
-import cStringIO
-import gzip
-
-from zope.component import getUtility
-from zope.globalrequest import setRequest
-from plone.registry.interfaces import IRegistry
-
+# -*- coding: utf-8 -*-
 from plone.app.caching.interfaces import IPloneCacheSettings
-from plone.caching.interfaces import ICacheSettings
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.testing import applyProfile
+from plone.app.testing import setRoles
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.testing import THEMINGWITHCACHING_TESTING
+from plone.caching.interfaces import ICacheSettings
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
+from zope.component import getUtility
+from zope.globalrequest import setRequest
+import cStringIO
+import gzip
+import unittest2 as unittest
 
 
 class TestIntegration(unittest.TestCase):
@@ -143,8 +144,10 @@ def test_cache_with_GZIP_authenticated(self):
 
         browser = Browser(app)
         browser.addHeader('Accept-Encoding', 'gzip')
-        browser.addHeader('Authorization', 'Basic %s:%s' % (
-            TEST_USER_NAME, TEST_USER_PASSWORD))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0:s}:{1:s}'.format(TEST_USER_NAME, TEST_USER_PASSWORD)
+        )
         browser.open(portal['f3'].absolute_url())
         content_handler = cStringIO.StringIO(browser.contents)
         uncompressed = gzip.GzipFile(fileobj=content_handler).read()
diff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py
index 19d556b..29d9800 100644
--- a/src/plone/app/theming/tests/test_controlpanel.py
+++ b/src/plone/app/theming/tests/test_controlpanel.py
@@ -1,36 +1,11 @@
-import unittest2 as unittest
-
-from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
-from plone.testing.z2 import Browser
-
-from plone.app.testing import setRoles, TEST_USER_ID
-
-import Globals
-import os.path
-
-from lxml import etree
-
-from urllib2 import HTTPError
-
-from Products.CMFCore.Expression import Expression, getExprContext
-
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-
-from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.utils import applyTheme, getAvailableThemes
-from plone.app.theming.utils import InternalResolver, PythonResolver, resolvePythonURL
-
+# -*- coding: utf-8 -*-
+from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-
-import re
-
-from diazo.compiler import compile_theme
-
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.theming.utils import getZODBThemes, getTheme
+from plone.app.testing import setRoles
+from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
+from plone.testing.z2 import Browser
+import unittest2 as unittest
 
 
 class TestControlPanel(unittest.TestCase):
@@ -51,13 +26,17 @@ def setUp(self):
             self.browser.handleErrors = False
             self.browser.open(portal.absolute_url() + '/login_form')
             self.browser.getControl(name='__ac_name').value = TEST_USER_NAME
-            self.browser.getControl(name='__ac_password').value = TEST_USER_PASSWORD
+            self.browser.getControl(
+                name='__ac_password'
+            ).value = TEST_USER_PASSWORD
             self.browser.getControl(name='submit').click()
         finally:
             self.browser.handleErrors = handleErrors
 
     def goto_controlpanel(self):
-        self.browser.open(self.portal.absolute_url() + '/@@theming-controlpanel')
+        self.browser.open(
+            self.portal.absolute_url() + '/@@theming-controlpanel'
+        )
 
     def test_create_theme(self):
         pass
@@ -65,7 +44,8 @@ def test_create_theme(self):
     #     self.browser.getControl(name='title').value = 'Foobar'
     #     self.browser.getControl(name='description').value = 'foobar desc'
     #     self.browser.getControl(name='baseOn').value = ['template']
-    #     self.browser.getControl(name='enableImmediately:boolean:default').value = ''
+    #     self.browser.getControl(
+    #         name='enableImmediately:boolean:default').value = ''
     #     self.browser.getControl(name='form.button.CreateTheme').click()
 
     #     self.assertTrue('foobar' in [t.__name__ for t in getZODBThemes()])
diff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py
index 9e8cded..11e03dd 100644
--- a/src/plone/app/theming/tests/test_exportimport.py
+++ b/src/plone/app/theming/tests/test_exportimport.py
@@ -1,6 +1,7 @@
+# -*- coding: utf-8 -*-
+from plone.app.theming.testing import THEMING_INTEGRATION_TESTING
 import unittest2 as unittest
 
-from plone.app.theming.testing import THEMING_INTEGRATION_TESTING
 
 class TestExportImport(unittest.TestCase):
 
@@ -28,9 +29,18 @@ def readDataFile(self, name):
 
         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
 
-        self.assertEqual(settings.rules, '/++theme++plone.app.theming.tests/rules.xml')
-        self.assertEqual(settings.absolutePrefix, '/++theme++plone.app.theming.tests')
-        self.assertEqual(settings.parameterExpressions, {'foo': "python:request.get('bar')"})
+        self.assertEqual(
+            settings.rules,
+            '/++theme++plone.app.theming.tests/rules.xml'
+        )
+        self.assertEqual(
+            settings.absolutePrefix,
+            '/++theme++plone.app.theming.tests'
+        )
+        self.assertEqual(
+            settings.parameterExpressions,
+            {'foo': "python:request.get('bar')"}
+        )
 
     def test_import_no_file(self):
         from zope.component import getUtility
@@ -127,4 +137,3 @@ def readDataFile(self, name):
         importTheme(FauxContext())
 
         self.assertEqual(settings.enabled, False)
-
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 2cdd1ec..bc90e64 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,31 +1,27 @@
-import unittest2 as unittest
-
+# -*- coding: utf-8 -*-
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.Expression import getExprContext
+from Products.CMFCore.utils import getToolByName
+from diazo.compiler import compile_theme
+from lxml import etree
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import setRoles
+from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
+from plone.app.theming.utils import InternalResolver
+from plone.app.theming.utils import PythonResolver
+from plone.app.theming.utils import applyTheme
+from plone.app.theming.utils import getTheme
+from plone.app.theming.utils import resolvePythonURL
+from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
-
-from plone.app.testing import setRoles, TEST_USER_ID
-
-import Globals
-import os.path
-
-from lxml import etree
-
 from urllib2 import HTTPError
-
-from Products.CMFCore.Expression import Expression, getExprContext
-
-from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
-
-from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.utils import applyTheme, getAvailableThemes, getTheme
-from plone.app.theming.utils import InternalResolver, PythonResolver, resolvePythonURL
-
+import Globals
+import os.path
 import re
+import unittest2 as unittest
 
-from diazo.compiler import compile_theme
-
-from Products.CMFCore.utils import getToolByName
 
 class TestCase(unittest.TestCase):
 
@@ -40,13 +36,13 @@ def setUp(self):
         self.settings.enabled = False
         self.settings.rules = u'python://plone.app.theming/tests/rules.xml'
         self.settings.parameterExpressions = {
-                'stringParam': 'string:string param value',
-                'boolParam': 'python:False',
-                'contextParam' : 'context/absolute_url | string:no context',
-                'requestParam': 'request/useother | string:off',
-            }
+            'stringParam': 'string:string param value',
+            'boolParam': 'python:False',
+            'contextParam': 'context/absolute_url | string:no context',
+            'requestParam': 'request/useother | string:off',
+        }
 
-        import transaction;
+        import transaction
         transaction.commit()
 
     def tearDown(self):
@@ -78,7 +74,8 @@ def test_theme_enabled(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -100,10 +97,20 @@ def test_theme_enabled_resource_directory(self):
         self.settings.enabled = True
         theme = getTheme('plone.app.theming.tests')
         applyTheme(theme)
-        self.assertEqual(self.settings.rules, u'/++theme++plone.app.theming.tests/rules.xml')
-        self.assertEqual(self.settings.currentTheme, u"plone.app.theming.tests")
-        self.assertEqual(self.settings.doctype, u"<!DOCTYPE html>")
-        import transaction; transaction.commit()
+        self.assertEqual(
+            self.settings.rules,
+            u'/++theme++plone.app.theming.tests/rules.xml'
+        )
+        self.assertEqual(
+            self.settings.currentTheme,
+            u"plone.app.theming.tests"
+        )
+        self.assertEqual(
+            self.settings.doctype,
+            u"<!DOCTYPE html>"
+        )
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -125,7 +132,8 @@ def test_theme_enabled_query_string_off_switch(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '?diazo.off=1')
@@ -146,7 +154,8 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):
         Globals.DevelopmentMode = False
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '?diazo.off=1')
@@ -165,7 +174,8 @@ def test_theme_enabled_header_off(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '/@@header-disabled')
@@ -175,19 +185,23 @@ def test_theme_enabled_header_off(self):
         # The theme
         self.assertFalse("This is the theme" in browser.contents)
 
-
     def test_internal_resolver(self):
         compiler_parser = etree.XMLParser()
         compiler_parser.resolvers.add(InternalResolver())
-        # We can use a sub-package or a directory since tests is a python package
-        theme = resolvePythonURL(u'python://plone.app.theming.tests/theme.html')
+        # We can use a sub-package or a directory since tests is a python
+        # package
+        theme = resolvePythonURL(
+            u'python://plone.app.theming.tests/theme.html'
+        )
         rules = resolvePythonURL(u'python://plone.app.theming/tests/rules.xml')
         compile_theme(rules, theme, compiler_parser=compiler_parser)
 
     def test_python_resolver(self):
         compiler_parser = etree.XMLParser()
         compiler_parser.resolvers.add(PythonResolver())
-        theme = resolvePythonURL(u'python://plone.app.theming.tests/theme.html')
+        theme = resolvePythonURL(
+            u'python://plone.app.theming.tests/theme.html'
+        )
         rules = resolvePythonURL(u'python://plone.app.theming/tests/rules.xml')
         compile_theme(rules, theme, compiler_parser=compiler_parser)
 
@@ -196,8 +210,12 @@ def test_theme_stored_in_plone_site(self):
         portal = self.layer['portal']
 
         # We'll upload the theme files to the Plone site root
-        rules_contents = open(os.path.join(os.path.split(__file__)[0], 'localrules.xml'))
-        theme_contents = open(os.path.join(os.path.split(__file__)[0], 'theme.html'))
+        rules_contents = open(
+            os.path.join(os.path.split(__file__)[0], 'localrules.xml')
+        )
+        theme_contents = open(
+            os.path.join(os.path.split(__file__)[0], 'theme.html')
+        )
         portal.manage_addDTMLMethod('theme.html', file=theme_contents)
         portal.manage_addDTMLMethod('rules.xml', file=rules_contents)
 
@@ -205,7 +223,8 @@ def test_theme_stored_in_plone_site(self):
         self.settings.rules = u'/rules.xml'
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -224,8 +243,12 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):
         portal = self.layer['portal']
 
         # We'll upload the theme files to the Plone site root
-        rules_contents = open(os.path.join(os.path.dirname(__file__), 'localrules.xml'))
-        theme_contents = open(os.path.join(os.path.dirname(__file__), 'theme.html'))
+        rules_contents = open(
+            os.path.join(os.path.dirname(__file__), 'localrules.xml')
+        )
+        theme_contents = open(
+            os.path.join(os.path.dirname(__file__), 'theme.html')
+        )
         portal.manage_addDTMLMethod('theme.html', file=theme_contents)
         portal.manage_addDTMLMethod('rules.xml', file=rules_contents)
 
@@ -243,7 +266,10 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):
         prefix = '/'.join(portalURL.split('/')[:-1])
         suffix = portalURL.split('/')[-1]
 
-        vhostURL = "%s/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/_vh_fizz/_vh_buzz/_vh_fizzbuzz/" % (prefix,suffix)
+        vhostURL = (
+            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"
+            "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)
+        )
 
         browser = Browser(app)
         browser.open(vhostURL)
@@ -264,7 +290,8 @@ def test_absolutePrefix_disabled(self):
         self.settings.enabled = True
         self.settings.absolutePrefix = None
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -278,13 +305,16 @@ def test_absolutePrefix_enabled_uri(self):
         self.settings.enabled = True
         self.settings.absolutePrefix = u'http://example.com'
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
 
         self.assertFalse('<img src="relative.jpg" />' in browser.contents)
-        self.assertTrue('<img src="http://example.com/relative.jpg" />' in browser.contents)
+        self.assertTrue(
+            '<img src="http://example.com/relative.jpg" />' in browser.contents
+        )
 
     def test_absolutePrefix_enabled_path(self):
         app = self.layer['app']
@@ -293,13 +323,16 @@ def test_absolutePrefix_enabled_path(self):
         self.settings.enabled = True
         self.settings.absolutePrefix = u'/foo'
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
 
         self.assertFalse('<img src="relative.jpg" />' in browser.contents)
-        self.assertTrue('<img src="/plone/foo/relative.jpg" />' in browser.contents)
+        self.assertTrue(
+            '<img src="/plone/foo/relative.jpg" />' in browser.contents
+        )
 
     def test_absolutePrefix_enabled_path_vhosting(self):
         app = self.layer['app']
@@ -308,7 +341,8 @@ def test_absolutePrefix_enabled_path_vhosting(self):
         from Products.SiteAccess import VirtualHostMonster
         VirtualHostMonster.manage_addVirtualHostMonster(app, 'virtual_hosting')
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         self.settings.enabled = True
         self.settings.absolutePrefix = u'/foo'
@@ -317,15 +351,22 @@ def test_absolutePrefix_enabled_path_vhosting(self):
         prefix = '/'.join(portalURL.split('/')[:-1])
         suffix = portalURL.split('/')[-1]
 
-        vhostURL = "%s/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/_vh_fizz/_vh_buzz/_vh_fizzbuzz/" % (prefix,suffix)
+        vhostURL = (
+            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"
+            "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)
+        )
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(vhostURL)
 
         self.assertFalse('<img src="relative.jpg" />' in browser.contents)
-        self.assertTrue('<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />' in browser.contents)
+        self.assertTrue(
+            '<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />'
+            in browser.contents
+        )
 
     def test_theme_installed_invalid_config(self):
         app = self.layer['app']
@@ -334,7 +375,8 @@ def test_theme_installed_invalid_config(self):
         self.settings.enabled = True
         self.settings.rules = u"invalid"
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -354,7 +396,8 @@ def test_non_html_content(self):
 
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '/document_icon.png')
@@ -372,12 +415,15 @@ def test_non_html_content(self):
     #
     #     # Sneakily seed the cache with dodgy data
     #
-    #     otherrules = unicode(os.path.join(os.path.split(__file__)[0], 'otherrules.xml'))
+    #     otherrules = unicode(os.path.join(os.path.split(__file__)[0],
+    #                          'otherrules.xml'))
     #
     #     compiled_theme = compile_theme(otherrules)
     #     transform = etree.XSLT(compiled_theme)
     #
-    #     getCache(self.settings, portal.absolute_url()).updateTransform(transform)
+    #     getCache(
+    #         self.settings, portal.absolute_url()
+    #     ).updateTransform(transform)
     #
     #     import transaction; transaction.commit()
     #
@@ -428,14 +474,16 @@ def test_non_html_content(self):
 
     #     # only show in theme
     #     secondToLastResource = portal_css.resources[-2]
-    #     secondToLastResource.setExpression('request/HTTP_X_THEME_ENABLED | nothing')
+    #     secondToLastResource.setExpression(
+    #         'request/HTTP_X_THEME_ENABLED | nothing')
     #     secondToLastResource.setRendering('link')
     #     secondToLastResource.setEnabled(True)
     #     secondToLastResource.setConditionalcomment('')
 
     #     # only show when theme is disabled
     #     lastResource = portal_css.resources[-1]
-    #     lastResource.setExpression('not:request/HTTP_X_THEME_ENABLED | nothing')
+    #     lastResource.setExpression(
+    #         'not:request/HTTP_X_THEME_ENABLED | nothing')
     #     lastResource.setRendering('link')
     #     lastResource.setEnabled(True)
     #     lastResource.setConditionalcomment('')
@@ -486,7 +534,8 @@ def test_theme_different_path(self):
 
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -516,15 +565,16 @@ def test_theme_params(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'
+        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'  # noqa
         self.settings.parameterExpressions = {
-                'stringParam': 'string:string param value',
-                'boolParam': 'python:False',
-                'contextParam' : 'context/absolute_url | string:no context',
-                'requestParam': 'request/someParam | string:off',
-            }
+            'stringParam': 'string:string param value',
+            'boolParam': 'python:False',
+            'contextParam': 'context/absolute_url | string:no context',
+            'requestParam': 'request/someParam | string:off',
+        }
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -545,14 +595,21 @@ def test_theme_params(self):
         self.assertFalse('<script>bool param on</script>' in browser.contents)
 
         # Not present in this request
-        self.assertFalse('<script>request param on</script>' in browser.contents)
+        self.assertFalse(
+            '<script>request param on</script>' in browser.contents
+        )
 
         # Context was available for parameter expressions
-        self.assertTrue('<script id="contextParam">http://nohost/plone</script>' in browser.contents)
+        self.assertTrue(
+            '<script id="contextParam">http://nohost/plone</script>'
+            in browser.contents
+        )
 
         # ... but present with the request param on
         browser.open(portal.absolute_url() + '?someParam=on')
-        self.assertTrue('<script>request param on</script>' in browser.contents)
+        self.assertTrue(
+            '<script>request param on</script>' in browser.contents
+        )
 
     def test_theme_for_404(self):
         app = self.layer['app']
@@ -560,12 +617,13 @@ def test_theme_for_404(self):
 
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         error = None
         try:
-            browser.open('%s/404_page' % portal.absolute_url())
+            browser.open('{0:s}/404_page'.format(portal.absolute_url()))
         except HTTPError, e:
             error = e
         self.assertEqual(error.code, 404)
@@ -578,20 +636,21 @@ def test_theme_params_on_404(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'
+        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'  # noqa
         self.settings.parameterExpressions = {
-                'stringParam': 'string:string param value',
-                'boolParam': 'python:False',
-                'contextParam' : 'context/absolute_url | string:no context',
-                'requestParam': 'request/someParam | string:off',
-            }
+            'stringParam': 'string:string param value',
+            'boolParam': 'python:False',
+            'contextParam': 'context/absolute_url | string:no context',
+            'requestParam': 'request/someParam | string:off',
+        }
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         error = None
         try:
-            browser.open('%s/404_page' % portal.absolute_url())
+            browser.open('{0:s}/404_page'.format(portal.absolute_url()))
         except HTTPError, e:
             error = e
         self.assertEqual(error.code, 404)
@@ -612,10 +671,15 @@ def test_theme_params_on_404(self):
         self.assertFalse('<script>bool param on</script>' in browser.contents)
 
         # Not present in this request
-        self.assertFalse('<script>request param on</script>' in browser.contents)
+        self.assertFalse(
+            '<script>request param on</script>' in browser.contents
+        )
 
         # Context is the last found parent
-        self.assertTrue('<script id="contextParam">http://nohost/plone</script>' in browser.contents)
+        self.assertTrue(
+            '<script id="contextParam">http://nohost/plone</script>'
+            in browser.contents
+        )
 
     def test_navroot_params_on_404_widget_in_path(self):
         app = self.layer['app']
@@ -624,17 +688,20 @@ def test_navroot_params_on_404_widget_in_path(self):
 
         self.settings.enabled = True
         self.settings.parameterExpressions = {
-                'navigation_root_id': 'python:portal_state.navigation_root().getId()'
-            }
+            'navigation_root_id': 'python:portal_state.navigation_root().getId()'  # noqa
+        }
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         error = None
         try:
             browser.open(
-                    '%s/widget/oauth_login/info.txt' %
-                        portal['subfolder'].absolute_url())
+                '{0:s}/widget/oauth_login/info.txt'.format(
+                    portal['subfolder'].absolute_url()
+                )
+            )
         except HTTPError, e:
             error = e
         self.assertEqual(error.code, 404)
@@ -656,23 +723,22 @@ def test_navroot_params_on_404_widget_in_path(self):
     #     thirdLastResource.setEnabled(True)
     #     thirdLastResource.setConditionalcomment('')
 
-
     #     # only show in theme
     #     secondToLastResource = portal_css.resources[-2]
-    #     secondToLastResource.setExpression('request/HTTP_X_THEME_ENABLED | nothing')
+    #     secondToLastResource.setExpression(
+    #         'request/HTTP_X_THEME_ENABLED | nothing')
     #     secondToLastResource.setRendering('link')
     #     secondToLastResource.setEnabled(True)
     #     secondToLastResource.setConditionalcomment('')
 
-
     #     # only show when theme is disabled
     #     lastResource = portal_css.resources[-1]
-    #     lastResource.setExpression('not:request/HTTP_X_THEME_ENABLED | nothing')
+    #     lastResource.setExpression(
+    #         'not:request/HTTP_X_THEME_ENABLED | nothing')
     #     lastResource.setRendering('link')
     #     lastResource.setEnabled(True)
     #     lastResource.setConditionalcomment('')
 
-
     #     portal_css.cookResources()
 
     #     self.settings.enabled = True
@@ -682,7 +748,7 @@ def test_navroot_params_on_404_widget_in_path(self):
     #     browser = Browser(app)
 
     #     try:
-    #         browser.open('%s/404_page' % portal.absolute_url())
+    #         browser.open('{0:s}/404_page'.format(portal.absolute_url()))
     #     except HTTPError, e:
     #         error = e
     #     self.assertEqual(error.code, 404)
@@ -720,7 +786,8 @@ def test_includes(self):
         self.settings.rules = u'python://plone.app.theming/tests/includes.xml'
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
 
@@ -745,7 +812,8 @@ def test_css_js_includes(self):
 
         self.settings.enabled = True
         self.settings.rules = u'/++theme++plone.app.theming.tests/css-js.xml'
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -767,7 +835,8 @@ def test_non_ascii_includes(self):
 
         self.settings.enabled = True
         self.settings.rules = u'/++theme++plone.app.theming.tests/nonascii.xml'
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -781,7 +850,8 @@ def test_theme_enabled_query_string_debug_switch(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '?diazo.debug=1')
diff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py
index 903e46c..56d8738 100644
--- a/src/plone/app/theming/theme.py
+++ b/src/plone/app/theming/theme.py
@@ -44,4 +44,4 @@ def __init__(
         self.development_css = development_css
 
     def __repr__(self):
-        return '<Theme "%s">' % self.__name__
+        return '<Theme "{0:s}">'.format(self.__name__)
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 26dc252..5ac54a6 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from lxml import etree
-from plone.app.theming.interfaces import IThemeSettings, IThemingLayer
+from plone.app.theming.interfaces import IThemeSettings
+from plone.app.theming.interfaces import IThemingLayer
 from plone.app.theming.utils import compileThemeTransform
 from plone.app.theming.utils import findContext
 from plone.app.theming.utils import getParser
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 3a314b7..a7cf691 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -104,11 +104,14 @@ def resolve(self, system_url, public_id, context):
             if len(context_path) == 0:
                 system_url = '/' + system_url
             else:
-                system_url = '/%s/%s' % ('/'.join(context_path), system_url)
+                system_url = '/{0:s}/{1:s}'.format(
+                    '/'.join(context_path),
+                    system_url
+                )
 
         response = subrequest(system_url, root=root)
         if response.status != 200:
-            LOGGER.error("Couldn't resolve %s", system_url)
+            LOGGER.error("Couldn't resolve {0:s}".format(system_url))
             return None
         result = response.getBody()
         content_type = response.headers.get('content-type')
@@ -412,7 +415,7 @@ def isThemeEnabled(request, settings=None):
     serverPort = request.get('SERVER_PORT')
 
     for hostname in settings.hostnameBlacklist or ():
-        if host == hostname or host == "%s:%s" % (hostname, serverPort):
+        if host == hostname or host == ':'.join((hostname, serverPort)):
             return False
 
     return True
@@ -492,7 +495,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):
 
     source = queryResourceDirectory(THEME_RESOURCE_NAME, baseOn)
     if source is None:
-        raise KeyError("Theme %s not found" % baseOn)
+        raise KeyError("Theme {0:s} not found".format(baseOn))
 
     themeName = getUtility(IURLNormalizer).normalize(title)
     if isinstance(themeName, unicode):
@@ -501,9 +504,9 @@ def createThemeFromTemplate(title, description, baseOn='template'):
     resources = getOrCreatePersistentResourceDirectory()
     if themeName in resources:
         idx = 1
-        while "%s-%d" % (themeName, idx,) in resources:
+        while '-'.join((themeName, idx)) in resources:
             idx += 1
-        themeName = "%s-%d" % (themeName, idx,)
+        themeName = '-'.join((themeName, idx))
 
     resources.makeDirectory(themeName)
     target = resources[themeName]
diff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py
index 4d768a9..6510c02 100644
--- a/src/plone/app/theming/zmi.py
+++ b/src/plone/app/theming/zmi.py
@@ -1,7 +1,7 @@
-import logging
-
+# -*- coding: utf-8 -*-
 from App.special_dtml import DTMLFile
 from zope.globalrequest import getRequest
+import logging
 
 LOGGER = logging.getLogger('plone.app.theming')
 


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-04-30T23:10:54-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/71906492d1ad1c441c7e11fd91ae9ca0adfad2f7

Merge pull request #48 from plone/jensens-code-analyis

more cleanup after using code-analysis

Files changed:
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/mapper.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/tests/test_caching.py
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/utils.py
M src/plone/app/theming/zmi.py

diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 83c3cb4..78f45d9 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -82,7 +82,7 @@ def update(self):
             IStatusMessage(self.request).add(_(u"Changes cancelled"))
 
             portalUrl = getToolByName(self.context, 'portal_url')()
-            self.redirect("%s/plone_control_panel" % portalUrl)
+            self.redirect("{0:s}/plone_control_panel".format(portalUrl))
 
             return False
 
@@ -292,14 +292,17 @@ def update(self):
             if not self.errors:
                 portalUrl = getToolByName(self.context, 'portal_url')()
                 self.redirect(
-                    "%s/++theme++%s/@@theming-controlpanel-mapper" % (
-                        portalUrl, themeData.__name__,)
+                    "{0}/++theme++{1}/@@theming-controlpanel-mapper".format(
+                        portalUrl,
+                        themeData.__name__
                     )
+                )
                 return False
             else:
                 IStatusMessage(self.request).add(
-                        _(u"There were errors"), "error"
-                    )
+                    _(u"There were errors"),
+                    "error"
+                )
 
                 self.renderOverlay('upload')
                 return True
@@ -334,9 +337,11 @@ def update(self):
 
                 portalUrl = getToolByName(self.context, 'portal_url')()
                 self.redirect(
-                    "%s/++theme++%s/@@theming-controlpanel-mapper" % (
-                        portalUrl, name,)
+                    "{0}/++theme++{1}/@@theming-controlpanel-mapper".format(
+                        portalUrl,
+                        name
                     )
+                )
                 return False
 
         if 'form.button.DeleteSelected' in form:
@@ -390,7 +395,7 @@ def themeList(self):
                 'title': theme.title,
                 'description': theme.description,
                 'editable': theme.__name__ in zodbNames,
-                'preview': "%s/%s" % (portalUrl, previewUrl,),
+                'preview': "{0}/{1}".format(portalUrl, previewUrl),
                 'selected': theme.__name__ == self.selectedTheme,
             })
 
@@ -400,8 +405,13 @@ def themeList(self):
 
     def redirectToFieldset(self, fieldset):
         portalUrl = getToolByName(self.context, 'portal_url')()
-        self.redirect("%s/%s#fieldsetlegend-%s" % (
-            portalUrl, self.__name__, fieldset,))
+        self.redirect(
+            "{0}/{1}#fieldsetlegend-{2}".format(
+                portalUrl,
+                self.__name__,
+                fieldset
+            )
+        )
 
     def renderOverlay(self, overlay):
         self.overlay = overlay
diff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py
index 3a97e53..a7d327a 100644
--- a/src/plone/app/theming/browser/help.py
+++ b/src/plone/app/theming/browser/help.py
@@ -1,6 +1,7 @@
-import pkg_resources
+# -*- coding: utf-8 -*-
 from zope.publisher.browser import BrowserView
 import docutils.core
+import pkg_resources
 
 
 class Help(BrowserView):
@@ -15,4 +16,4 @@ def __call__(self):
             writer_name='html'
         )
         html = parts['body_pre_docinfo'] + parts['fragment']
-        return """<div class="content">%s</div>""" % html
+        return """<div class="content">{0:s}</div>""".format(html)
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index 481799e..88bf917 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -68,9 +68,12 @@ def setup(self):
         self.title = self.theme.title
 
         self.portalUrl = getToolByName(self.context, 'portal_url')()
-        self.themeBasePath = "++%s++%s" % (THEME_RESOURCE_NAME, self.name,)
+        self.themeBasePath = "++{0:s}++{1:s}".format(
+            THEME_RESOURCE_NAME,
+            self.name
+        )
         self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
-        self.themeBaseUrl = "%s/%s" % (self.portalUrl, self.themeBasePath,)
+        self.themeBaseUrl = '/'.join([self.portalUrl, self.themeBasePath])
 
         self.editable = IWritableResourceDirectory.providedBy(
             self.resourceDirectory
diff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py
index e110e84..a07b278 100644
--- a/src/plone/app/theming/plugins/utils.py
+++ b/src/plone/app/theming/plugins/utils.py
@@ -40,7 +40,9 @@ def sortDependencies(plugins):
                 del waiting[(nw, pw)]
 
     if waiting:
-        raise ValueError("Could not resolve dependencies for: %s" % waiting)
+        raise ValueError(
+            "Could not resolve dependencies for: {0:s}".format(waiting)
+        )
 
 
 @cache(pluginsCacheKey)
diff --git a/src/plone/app/theming/tests/test_caching.py b/src/plone/app/theming/tests/test_caching.py
index 3075662..6fed4d4 100644
--- a/src/plone/app/theming/tests/test_caching.py
+++ b/src/plone/app/theming/tests/test_caching.py
@@ -1,19 +1,20 @@
-import unittest2 as unittest
-from plone.testing.z2 import Browser
-from plone.app.testing import applyProfile, setRoles
-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD
-
-import cStringIO
-import gzip
-
-from zope.component import getUtility
-from zope.globalrequest import setRequest
-from plone.registry.interfaces import IRegistry
-
+# -*- coding: utf-8 -*-
 from plone.app.caching.interfaces import IPloneCacheSettings
-from plone.caching.interfaces import ICacheSettings
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.testing import applyProfile
+from plone.app.testing import setRoles
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.testing import THEMINGWITHCACHING_TESTING
+from plone.caching.interfaces import ICacheSettings
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
+from zope.component import getUtility
+from zope.globalrequest import setRequest
+import cStringIO
+import gzip
+import unittest2 as unittest
 
 
 class TestIntegration(unittest.TestCase):
@@ -143,8 +144,10 @@ def test_cache_with_GZIP_authenticated(self):
 
         browser = Browser(app)
         browser.addHeader('Accept-Encoding', 'gzip')
-        browser.addHeader('Authorization', 'Basic %s:%s' % (
-            TEST_USER_NAME, TEST_USER_PASSWORD))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0:s}:{1:s}'.format(TEST_USER_NAME, TEST_USER_PASSWORD)
+        )
         browser.open(portal['f3'].absolute_url())
         content_handler = cStringIO.StringIO(browser.contents)
         uncompressed = gzip.GzipFile(fileobj=content_handler).read()
diff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py
index 19d556b..29d9800 100644
--- a/src/plone/app/theming/tests/test_controlpanel.py
+++ b/src/plone/app/theming/tests/test_controlpanel.py
@@ -1,36 +1,11 @@
-import unittest2 as unittest
-
-from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
-from plone.testing.z2 import Browser
-
-from plone.app.testing import setRoles, TEST_USER_ID
-
-import Globals
-import os.path
-
-from lxml import etree
-
-from urllib2 import HTTPError
-
-from Products.CMFCore.Expression import Expression, getExprContext
-
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-
-from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.utils import applyTheme, getAvailableThemes
-from plone.app.theming.utils import InternalResolver, PythonResolver, resolvePythonURL
-
+# -*- coding: utf-8 -*-
+from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-
-import re
-
-from diazo.compiler import compile_theme
-
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.theming.utils import getZODBThemes, getTheme
+from plone.app.testing import setRoles
+from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
+from plone.testing.z2 import Browser
+import unittest2 as unittest
 
 
 class TestControlPanel(unittest.TestCase):
@@ -51,13 +26,17 @@ def setUp(self):
             self.browser.handleErrors = False
             self.browser.open(portal.absolute_url() + '/login_form')
             self.browser.getControl(name='__ac_name').value = TEST_USER_NAME
-            self.browser.getControl(name='__ac_password').value = TEST_USER_PASSWORD
+            self.browser.getControl(
+                name='__ac_password'
+            ).value = TEST_USER_PASSWORD
             self.browser.getControl(name='submit').click()
         finally:
             self.browser.handleErrors = handleErrors
 
     def goto_controlpanel(self):
-        self.browser.open(self.portal.absolute_url() + '/@@theming-controlpanel')
+        self.browser.open(
+            self.portal.absolute_url() + '/@@theming-controlpanel'
+        )
 
     def test_create_theme(self):
         pass
@@ -65,7 +44,8 @@ def test_create_theme(self):
     #     self.browser.getControl(name='title').value = 'Foobar'
     #     self.browser.getControl(name='description').value = 'foobar desc'
     #     self.browser.getControl(name='baseOn').value = ['template']
-    #     self.browser.getControl(name='enableImmediately:boolean:default').value = ''
+    #     self.browser.getControl(
+    #         name='enableImmediately:boolean:default').value = ''
     #     self.browser.getControl(name='form.button.CreateTheme').click()
 
     #     self.assertTrue('foobar' in [t.__name__ for t in getZODBThemes()])
diff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py
index 9e8cded..11e03dd 100644
--- a/src/plone/app/theming/tests/test_exportimport.py
+++ b/src/plone/app/theming/tests/test_exportimport.py
@@ -1,6 +1,7 @@
+# -*- coding: utf-8 -*-
+from plone.app.theming.testing import THEMING_INTEGRATION_TESTING
 import unittest2 as unittest
 
-from plone.app.theming.testing import THEMING_INTEGRATION_TESTING
 
 class TestExportImport(unittest.TestCase):
 
@@ -28,9 +29,18 @@ def readDataFile(self, name):
 
         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)
 
-        self.assertEqual(settings.rules, '/++theme++plone.app.theming.tests/rules.xml')
-        self.assertEqual(settings.absolutePrefix, '/++theme++plone.app.theming.tests')
-        self.assertEqual(settings.parameterExpressions, {'foo': "python:request.get('bar')"})
+        self.assertEqual(
+            settings.rules,
+            '/++theme++plone.app.theming.tests/rules.xml'
+        )
+        self.assertEqual(
+            settings.absolutePrefix,
+            '/++theme++plone.app.theming.tests'
+        )
+        self.assertEqual(
+            settings.parameterExpressions,
+            {'foo': "python:request.get('bar')"}
+        )
 
     def test_import_no_file(self):
         from zope.component import getUtility
@@ -127,4 +137,3 @@ def readDataFile(self, name):
         importTheme(FauxContext())
 
         self.assertEqual(settings.enabled, False)
-
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 2cdd1ec..bc90e64 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,31 +1,27 @@
-import unittest2 as unittest
-
+# -*- coding: utf-8 -*-
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.Expression import getExprContext
+from Products.CMFCore.utils import getToolByName
+from diazo.compiler import compile_theme
+from lxml import etree
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import setRoles
+from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
+from plone.app.theming.utils import InternalResolver
+from plone.app.theming.utils import PythonResolver
+from plone.app.theming.utils import applyTheme
+from plone.app.theming.utils import getTheme
+from plone.app.theming.utils import resolvePythonURL
+from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
-
-from plone.app.testing import setRoles, TEST_USER_ID
-
-import Globals
-import os.path
-
-from lxml import etree
-
 from urllib2 import HTTPError
-
-from Products.CMFCore.Expression import Expression, getExprContext
-
-from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
-
-from plone.app.theming.interfaces import IThemeSettings
-from plone.app.theming.utils import applyTheme, getAvailableThemes, getTheme
-from plone.app.theming.utils import InternalResolver, PythonResolver, resolvePythonURL
-
+import Globals
+import os.path
 import re
+import unittest2 as unittest
 
-from diazo.compiler import compile_theme
-
-from Products.CMFCore.utils import getToolByName
 
 class TestCase(unittest.TestCase):
 
@@ -40,13 +36,13 @@ def setUp(self):
         self.settings.enabled = False
         self.settings.rules = u'python://plone.app.theming/tests/rules.xml'
         self.settings.parameterExpressions = {
-                'stringParam': 'string:string param value',
-                'boolParam': 'python:False',
-                'contextParam' : 'context/absolute_url | string:no context',
-                'requestParam': 'request/useother | string:off',
-            }
+            'stringParam': 'string:string param value',
+            'boolParam': 'python:False',
+            'contextParam': 'context/absolute_url | string:no context',
+            'requestParam': 'request/useother | string:off',
+        }
 
-        import transaction;
+        import transaction
         transaction.commit()
 
     def tearDown(self):
@@ -78,7 +74,8 @@ def test_theme_enabled(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -100,10 +97,20 @@ def test_theme_enabled_resource_directory(self):
         self.settings.enabled = True
         theme = getTheme('plone.app.theming.tests')
         applyTheme(theme)
-        self.assertEqual(self.settings.rules, u'/++theme++plone.app.theming.tests/rules.xml')
-        self.assertEqual(self.settings.currentTheme, u"plone.app.theming.tests")
-        self.assertEqual(self.settings.doctype, u"<!DOCTYPE html>")
-        import transaction; transaction.commit()
+        self.assertEqual(
+            self.settings.rules,
+            u'/++theme++plone.app.theming.tests/rules.xml'
+        )
+        self.assertEqual(
+            self.settings.currentTheme,
+            u"plone.app.theming.tests"
+        )
+        self.assertEqual(
+            self.settings.doctype,
+            u"<!DOCTYPE html>"
+        )
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -125,7 +132,8 @@ def test_theme_enabled_query_string_off_switch(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '?diazo.off=1')
@@ -146,7 +154,8 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):
         Globals.DevelopmentMode = False
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '?diazo.off=1')
@@ -165,7 +174,8 @@ def test_theme_enabled_header_off(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '/@@header-disabled')
@@ -175,19 +185,23 @@ def test_theme_enabled_header_off(self):
         # The theme
         self.assertFalse("This is the theme" in browser.contents)
 
-
     def test_internal_resolver(self):
         compiler_parser = etree.XMLParser()
         compiler_parser.resolvers.add(InternalResolver())
-        # We can use a sub-package or a directory since tests is a python package
-        theme = resolvePythonURL(u'python://plone.app.theming.tests/theme.html')
+        # We can use a sub-package or a directory since tests is a python
+        # package
+        theme = resolvePythonURL(
+            u'python://plone.app.theming.tests/theme.html'
+        )
         rules = resolvePythonURL(u'python://plone.app.theming/tests/rules.xml')
         compile_theme(rules, theme, compiler_parser=compiler_parser)
 
     def test_python_resolver(self):
         compiler_parser = etree.XMLParser()
         compiler_parser.resolvers.add(PythonResolver())
-        theme = resolvePythonURL(u'python://plone.app.theming.tests/theme.html')
+        theme = resolvePythonURL(
+            u'python://plone.app.theming.tests/theme.html'
+        )
         rules = resolvePythonURL(u'python://plone.app.theming/tests/rules.xml')
         compile_theme(rules, theme, compiler_parser=compiler_parser)
 
@@ -196,8 +210,12 @@ def test_theme_stored_in_plone_site(self):
         portal = self.layer['portal']
 
         # We'll upload the theme files to the Plone site root
-        rules_contents = open(os.path.join(os.path.split(__file__)[0], 'localrules.xml'))
-        theme_contents = open(os.path.join(os.path.split(__file__)[0], 'theme.html'))
+        rules_contents = open(
+            os.path.join(os.path.split(__file__)[0], 'localrules.xml')
+        )
+        theme_contents = open(
+            os.path.join(os.path.split(__file__)[0], 'theme.html')
+        )
         portal.manage_addDTMLMethod('theme.html', file=theme_contents)
         portal.manage_addDTMLMethod('rules.xml', file=rules_contents)
 
@@ -205,7 +223,8 @@ def test_theme_stored_in_plone_site(self):
         self.settings.rules = u'/rules.xml'
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -224,8 +243,12 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):
         portal = self.layer['portal']
 
         # We'll upload the theme files to the Plone site root
-        rules_contents = open(os.path.join(os.path.dirname(__file__), 'localrules.xml'))
-        theme_contents = open(os.path.join(os.path.dirname(__file__), 'theme.html'))
+        rules_contents = open(
+            os.path.join(os.path.dirname(__file__), 'localrules.xml')
+        )
+        theme_contents = open(
+            os.path.join(os.path.dirname(__file__), 'theme.html')
+        )
         portal.manage_addDTMLMethod('theme.html', file=theme_contents)
         portal.manage_addDTMLMethod('rules.xml', file=rules_contents)
 
@@ -243,7 +266,10 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):
         prefix = '/'.join(portalURL.split('/')[:-1])
         suffix = portalURL.split('/')[-1]
 
-        vhostURL = "%s/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/_vh_fizz/_vh_buzz/_vh_fizzbuzz/" % (prefix,suffix)
+        vhostURL = (
+            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"
+            "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)
+        )
 
         browser = Browser(app)
         browser.open(vhostURL)
@@ -264,7 +290,8 @@ def test_absolutePrefix_disabled(self):
         self.settings.enabled = True
         self.settings.absolutePrefix = None
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -278,13 +305,16 @@ def test_absolutePrefix_enabled_uri(self):
         self.settings.enabled = True
         self.settings.absolutePrefix = u'http://example.com'
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
 
         self.assertFalse('<img src="relative.jpg" />' in browser.contents)
-        self.assertTrue('<img src="http://example.com/relative.jpg" />' in browser.contents)
+        self.assertTrue(
+            '<img src="http://example.com/relative.jpg" />' in browser.contents
+        )
 
     def test_absolutePrefix_enabled_path(self):
         app = self.layer['app']
@@ -293,13 +323,16 @@ def test_absolutePrefix_enabled_path(self):
         self.settings.enabled = True
         self.settings.absolutePrefix = u'/foo'
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
 
         self.assertFalse('<img src="relative.jpg" />' in browser.contents)
-        self.assertTrue('<img src="/plone/foo/relative.jpg" />' in browser.contents)
+        self.assertTrue(
+            '<img src="/plone/foo/relative.jpg" />' in browser.contents
+        )
 
     def test_absolutePrefix_enabled_path_vhosting(self):
         app = self.layer['app']
@@ -308,7 +341,8 @@ def test_absolutePrefix_enabled_path_vhosting(self):
         from Products.SiteAccess import VirtualHostMonster
         VirtualHostMonster.manage_addVirtualHostMonster(app, 'virtual_hosting')
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         self.settings.enabled = True
         self.settings.absolutePrefix = u'/foo'
@@ -317,15 +351,22 @@ def test_absolutePrefix_enabled_path_vhosting(self):
         prefix = '/'.join(portalURL.split('/')[:-1])
         suffix = portalURL.split('/')[-1]
 
-        vhostURL = "%s/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/_vh_fizz/_vh_buzz/_vh_fizzbuzz/" % (prefix,suffix)
+        vhostURL = (
+            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"
+            "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)
+        )
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(vhostURL)
 
         self.assertFalse('<img src="relative.jpg" />' in browser.contents)
-        self.assertTrue('<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />' in browser.contents)
+        self.assertTrue(
+            '<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />'
+            in browser.contents
+        )
 
     def test_theme_installed_invalid_config(self):
         app = self.layer['app']
@@ -334,7 +375,8 @@ def test_theme_installed_invalid_config(self):
         self.settings.enabled = True
         self.settings.rules = u"invalid"
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -354,7 +396,8 @@ def test_non_html_content(self):
 
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '/document_icon.png')
@@ -372,12 +415,15 @@ def test_non_html_content(self):
     #
     #     # Sneakily seed the cache with dodgy data
     #
-    #     otherrules = unicode(os.path.join(os.path.split(__file__)[0], 'otherrules.xml'))
+    #     otherrules = unicode(os.path.join(os.path.split(__file__)[0],
+    #                          'otherrules.xml'))
     #
     #     compiled_theme = compile_theme(otherrules)
     #     transform = etree.XSLT(compiled_theme)
     #
-    #     getCache(self.settings, portal.absolute_url()).updateTransform(transform)
+    #     getCache(
+    #         self.settings, portal.absolute_url()
+    #     ).updateTransform(transform)
     #
     #     import transaction; transaction.commit()
     #
@@ -428,14 +474,16 @@ def test_non_html_content(self):
 
     #     # only show in theme
     #     secondToLastResource = portal_css.resources[-2]
-    #     secondToLastResource.setExpression('request/HTTP_X_THEME_ENABLED | nothing')
+    #     secondToLastResource.setExpression(
+    #         'request/HTTP_X_THEME_ENABLED | nothing')
     #     secondToLastResource.setRendering('link')
     #     secondToLastResource.setEnabled(True)
     #     secondToLastResource.setConditionalcomment('')
 
     #     # only show when theme is disabled
     #     lastResource = portal_css.resources[-1]
-    #     lastResource.setExpression('not:request/HTTP_X_THEME_ENABLED | nothing')
+    #     lastResource.setExpression(
+    #         'not:request/HTTP_X_THEME_ENABLED | nothing')
     #     lastResource.setRendering('link')
     #     lastResource.setEnabled(True)
     #     lastResource.setConditionalcomment('')
@@ -486,7 +534,8 @@ def test_theme_different_path(self):
 
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -516,15 +565,16 @@ def test_theme_params(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'
+        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'  # noqa
         self.settings.parameterExpressions = {
-                'stringParam': 'string:string param value',
-                'boolParam': 'python:False',
-                'contextParam' : 'context/absolute_url | string:no context',
-                'requestParam': 'request/someParam | string:off',
-            }
+            'stringParam': 'string:string param value',
+            'boolParam': 'python:False',
+            'contextParam': 'context/absolute_url | string:no context',
+            'requestParam': 'request/someParam | string:off',
+        }
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -545,14 +595,21 @@ def test_theme_params(self):
         self.assertFalse('<script>bool param on</script>' in browser.contents)
 
         # Not present in this request
-        self.assertFalse('<script>request param on</script>' in browser.contents)
+        self.assertFalse(
+            '<script>request param on</script>' in browser.contents
+        )
 
         # Context was available for parameter expressions
-        self.assertTrue('<script id="contextParam">http://nohost/plone</script>' in browser.contents)
+        self.assertTrue(
+            '<script id="contextParam">http://nohost/plone</script>'
+            in browser.contents
+        )
 
         # ... but present with the request param on
         browser.open(portal.absolute_url() + '?someParam=on')
-        self.assertTrue('<script>request param on</script>' in browser.contents)
+        self.assertTrue(
+            '<script>request param on</script>' in browser.contents
+        )
 
     def test_theme_for_404(self):
         app = self.layer['app']
@@ -560,12 +617,13 @@ def test_theme_for_404(self):
 
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         error = None
         try:
-            browser.open('%s/404_page' % portal.absolute_url())
+            browser.open('{0:s}/404_page'.format(portal.absolute_url()))
         except HTTPError, e:
             error = e
         self.assertEqual(error.code, 404)
@@ -578,20 +636,21 @@ def test_theme_params_on_404(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'
+        self.settings.rules = u'python://plone.app.theming/tests/paramrules.xml'  # noqa
         self.settings.parameterExpressions = {
-                'stringParam': 'string:string param value',
-                'boolParam': 'python:False',
-                'contextParam' : 'context/absolute_url | string:no context',
-                'requestParam': 'request/someParam | string:off',
-            }
+            'stringParam': 'string:string param value',
+            'boolParam': 'python:False',
+            'contextParam': 'context/absolute_url | string:no context',
+            'requestParam': 'request/someParam | string:off',
+        }
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         error = None
         try:
-            browser.open('%s/404_page' % portal.absolute_url())
+            browser.open('{0:s}/404_page'.format(portal.absolute_url()))
         except HTTPError, e:
             error = e
         self.assertEqual(error.code, 404)
@@ -612,10 +671,15 @@ def test_theme_params_on_404(self):
         self.assertFalse('<script>bool param on</script>' in browser.contents)
 
         # Not present in this request
-        self.assertFalse('<script>request param on</script>' in browser.contents)
+        self.assertFalse(
+            '<script>request param on</script>' in browser.contents
+        )
 
         # Context is the last found parent
-        self.assertTrue('<script id="contextParam">http://nohost/plone</script>' in browser.contents)
+        self.assertTrue(
+            '<script id="contextParam">http://nohost/plone</script>'
+            in browser.contents
+        )
 
     def test_navroot_params_on_404_widget_in_path(self):
         app = self.layer['app']
@@ -624,17 +688,20 @@ def test_navroot_params_on_404_widget_in_path(self):
 
         self.settings.enabled = True
         self.settings.parameterExpressions = {
-                'navigation_root_id': 'python:portal_state.navigation_root().getId()'
-            }
+            'navigation_root_id': 'python:portal_state.navigation_root().getId()'  # noqa
+        }
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         error = None
         try:
             browser.open(
-                    '%s/widget/oauth_login/info.txt' %
-                        portal['subfolder'].absolute_url())
+                '{0:s}/widget/oauth_login/info.txt'.format(
+                    portal['subfolder'].absolute_url()
+                )
+            )
         except HTTPError, e:
             error = e
         self.assertEqual(error.code, 404)
@@ -656,23 +723,22 @@ def test_navroot_params_on_404_widget_in_path(self):
     #     thirdLastResource.setEnabled(True)
     #     thirdLastResource.setConditionalcomment('')
 
-
     #     # only show in theme
     #     secondToLastResource = portal_css.resources[-2]
-    #     secondToLastResource.setExpression('request/HTTP_X_THEME_ENABLED | nothing')
+    #     secondToLastResource.setExpression(
+    #         'request/HTTP_X_THEME_ENABLED | nothing')
     #     secondToLastResource.setRendering('link')
     #     secondToLastResource.setEnabled(True)
     #     secondToLastResource.setConditionalcomment('')
 
-
     #     # only show when theme is disabled
     #     lastResource = portal_css.resources[-1]
-    #     lastResource.setExpression('not:request/HTTP_X_THEME_ENABLED | nothing')
+    #     lastResource.setExpression(
+    #         'not:request/HTTP_X_THEME_ENABLED | nothing')
     #     lastResource.setRendering('link')
     #     lastResource.setEnabled(True)
     #     lastResource.setConditionalcomment('')
 
-
     #     portal_css.cookResources()
 
     #     self.settings.enabled = True
@@ -682,7 +748,7 @@ def test_navroot_params_on_404_widget_in_path(self):
     #     browser = Browser(app)
 
     #     try:
-    #         browser.open('%s/404_page' % portal.absolute_url())
+    #         browser.open('{0:s}/404_page'.format(portal.absolute_url()))
     #     except HTTPError, e:
     #         error = e
     #     self.assertEqual(error.code, 404)
@@ -720,7 +786,8 @@ def test_includes(self):
         self.settings.rules = u'python://plone.app.theming/tests/includes.xml'
         self.settings.enabled = True
 
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
 
@@ -745,7 +812,8 @@ def test_css_js_includes(self):
 
         self.settings.enabled = True
         self.settings.rules = u'/++theme++plone.app.theming.tests/css-js.xml'
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -767,7 +835,8 @@ def test_non_ascii_includes(self):
 
         self.settings.enabled = True
         self.settings.rules = u'/++theme++plone.app.theming.tests/nonascii.xml'
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url())
@@ -781,7 +850,8 @@ def test_theme_enabled_query_string_debug_switch(self):
         portal = self.layer['portal']
 
         self.settings.enabled = True
-        import transaction; transaction.commit()
+        import transaction
+        transaction.commit()
 
         browser = Browser(app)
         browser.open(portal.absolute_url() + '?diazo.debug=1')
diff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py
index 903e46c..56d8738 100644
--- a/src/plone/app/theming/theme.py
+++ b/src/plone/app/theming/theme.py
@@ -44,4 +44,4 @@ def __init__(
         self.development_css = development_css
 
     def __repr__(self):
-        return '<Theme "%s">' % self.__name__
+        return '<Theme "{0:s}">'.format(self.__name__)
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 26dc252..5ac54a6 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from lxml import etree
-from plone.app.theming.interfaces import IThemeSettings, IThemingLayer
+from plone.app.theming.interfaces import IThemeSettings
+from plone.app.theming.interfaces import IThemingLayer
 from plone.app.theming.utils import compileThemeTransform
 from plone.app.theming.utils import findContext
 from plone.app.theming.utils import getParser
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 3a314b7..a7cf691 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -104,11 +104,14 @@ def resolve(self, system_url, public_id, context):
             if len(context_path) == 0:
                 system_url = '/' + system_url
             else:
-                system_url = '/%s/%s' % ('/'.join(context_path), system_url)
+                system_url = '/{0:s}/{1:s}'.format(
+                    '/'.join(context_path),
+                    system_url
+                )
 
         response = subrequest(system_url, root=root)
         if response.status != 200:
-            LOGGER.error("Couldn't resolve %s", system_url)
+            LOGGER.error("Couldn't resolve {0:s}".format(system_url))
             return None
         result = response.getBody()
         content_type = response.headers.get('content-type')
@@ -412,7 +415,7 @@ def isThemeEnabled(request, settings=None):
     serverPort = request.get('SERVER_PORT')
 
     for hostname in settings.hostnameBlacklist or ():
-        if host == hostname or host == "%s:%s" % (hostname, serverPort):
+        if host == hostname or host == ':'.join((hostname, serverPort)):
             return False
 
     return True
@@ -492,7 +495,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):
 
     source = queryResourceDirectory(THEME_RESOURCE_NAME, baseOn)
     if source is None:
-        raise KeyError("Theme %s not found" % baseOn)
+        raise KeyError("Theme {0:s} not found".format(baseOn))
 
     themeName = getUtility(IURLNormalizer).normalize(title)
     if isinstance(themeName, unicode):
@@ -501,9 +504,9 @@ def createThemeFromTemplate(title, description, baseOn='template'):
     resources = getOrCreatePersistentResourceDirectory()
     if themeName in resources:
         idx = 1
-        while "%s-%d" % (themeName, idx,) in resources:
+        while '-'.join((themeName, idx)) in resources:
             idx += 1
-        themeName = "%s-%d" % (themeName, idx,)
+        themeName = '-'.join((themeName, idx))
 
     resources.makeDirectory(themeName)
     target = resources[themeName]
diff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py
index 4d768a9..6510c02 100644
--- a/src/plone/app/theming/zmi.py
+++ b/src/plone/app/theming/zmi.py
@@ -1,7 +1,7 @@
-import logging
-
+# -*- coding: utf-8 -*-
 from App.special_dtml import DTMLFile
 from zope.globalrequest import getRequest
+import logging
 
 LOGGER = logging.getLogger('plone.app.theming')
 


