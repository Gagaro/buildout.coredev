Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-01-26T12:48:47-06:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/5acbea6c3c1a599cc8376f739c19f5ae3a3597a0

integrate plone.app.widgets

Files changed:
A plone/app/dexterity/factories.py
A plone/app/dexterity/permissions.py
A plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/configure.zcml
M plone/app/dexterity/interfaces.py
M setup.py

diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index 4114b4e..fececbf 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -5,6 +5,8 @@
 from datetime import datetime
 from plone.app.dexterity import MessageFactory as _
 from plone.app.dexterity import PloneMessageFactory as _PMF
+from plone.app.z3cform.widget import (
+    AjaxSelectFieldWidget, SelectFieldWidget, DatetimeFieldWidget)
 from plone.autoform import directives as form
 from plone.autoform.interfaces import IFormFieldProvider
 from plone.dexterity.interfaces import IDexterityContent
@@ -101,6 +103,8 @@ class ICategorization(model.Schema):
         required=False,
         missing_value=(),
     )
+    form.widget('subjects', AjaxSelectFieldWidget,
+                vocabulary='plone.app.vocabularies.Keywords')
 
     language = schema.Choice(
         title=_PMF(u'label_language', default=u'Language'),
@@ -109,6 +113,7 @@ class ICategorization(model.Schema):
         missing_value='',
         defaultFactory=default_language,
     )
+    form.widget('language', SelectFieldWidget)
 
     form.omitted('subjects', 'language')
     form.no_omit(IEditForm, 'subjects', 'language')
@@ -136,6 +141,7 @@ class IPublication(model.Schema):
                     u"not show up in listings and searches until this date."),
         required=False
     )
+    form.widget('effective', DatetimeFieldWidget)
 
     expires = schema.Datetime(
         title=_PMF(u'label_expiration_date', u'Expiration Date'),
@@ -145,6 +151,7 @@ class IPublication(model.Schema):
                     u"longer be visible in listings and searches."),
         required=False
     )
+    form.widget('expires', DatetimeFieldWidget)
 
     @invariant
     def validate_start_end(data):
@@ -183,6 +190,8 @@ class IOwnership(model.Schema):
         required=False,
         missing_value=(),
     )
+    form.widget('creators', AjaxSelectFieldWidget,
+                vocabulary='plone.app.vocabularies.Users')
 
     contributors = schema.Tuple(
         title=_PMF(u'label_contributors', u'Contributors'),
@@ -195,6 +204,8 @@ class IOwnership(model.Schema):
         required=False,
         missing_value=(),
     )
+    form.widget('contributors', AjaxSelectFieldWidget,
+                vocabulary='plone.app.vocabularies.Users')
 
     rights = schema.Text(
         title=_PMF(u'label_copyrights', default=u'Rights'),
diff --git a/plone/app/dexterity/configure.zcml b/plone/app/dexterity/configure.zcml
index cbbb3bb..e75af3f 100644
--- a/plone/app/dexterity/configure.zcml
+++ b/plone/app/dexterity/configure.zcml
@@ -63,4 +63,10 @@
     <adapter factory=".interfaces.TypeIdValidator" />
     <adapter factory=".interfaces.TypeTitleValidator" />
 
+    <adapter factory=".factories.DXFileFactory" />
+    <adapter factory=".permissions.DXFieldPermissionChecker" />
+    <adapter factory=".permissions.DXAddViewFieldPermissionChecker" />
+    <adapter factory=".permissions.DXAddViewFieldPermissionChecker"
+             for="plone.z3cform.interfaces.IFormWrapper" />
+
 </configure>
diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py
new file mode 100644
index 0000000..f1bf7e9
--- /dev/null
+++ b/plone/app/dexterity/factories.py
@@ -0,0 +1,70 @@
+import transaction
+from thread import allocate_lock
+
+from zope.component import adapts
+from zope.container.interfaces import INameChooser
+from zope.interface import implements
+
+from Products.CMFCore.utils import getToolByName
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFPlone import utils as ploneutils
+
+
+from plone.namedfile.file import NamedBlobImage
+from plone.namedfile.file import NamedBlobFile
+from plone.app.widgets.interfaces import IDXFileFactory
+
+upload_lock = allocate_lock()
+
+from plone.dexterity.utils import createContentInContainer
+
+
+class DXFileFactory(object):
+    implements(IDXFileFactory)
+    adapts(IFolderish)
+
+    def __init__(self, context):
+        self.context = context
+
+    def __call__(self, name, content_type, data):
+        ctr = getToolByName(self.context, 'content_type_registry')
+        type_ = ctr.findTypeName(name.lower(), '', '') or 'File'
+
+        name = name.decode("utf8")
+
+        chooser = INameChooser(self.context)
+
+        # otherwise I get ZPublisher.Conflict ConflictErrors
+        # when uploading multiple files
+        upload_lock.acquire()
+
+        newid = chooser.chooseName(name, self.context.aq_parent)
+        try:
+            transaction.begin()
+
+            # Try to determine which kind of NamedBlob we need
+            # This will suffice for standard p.a.contenttypes File/Image
+            # and any other custom type that would have 'File' or 'Image' in
+            # its type name
+            filename = ploneutils.safe_unicode(name)
+            if 'Image' in type_:
+                image = NamedBlobImage(data=data,
+                                       filename=filename,
+                                       contentType=content_type)
+                obj = createContentInContainer(
+                    self.context, type_, id=newid, image=image)
+            else:
+                file = NamedBlobFile(data=data,
+                                     filename=filename,
+                                     contentType=content_type)
+                obj = createContentInContainer(
+                    self.context, type_, id=newid, file=file)
+
+            obj.title = name
+            obj.reindexObject()
+            transaction.commit()
+
+        finally:
+            upload_lock.release()
+
+        return obj
diff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py
index 91c0a07..281dbc5 100644
--- a/plone/app/dexterity/interfaces.py
+++ b/plone/app/dexterity/interfaces.py
@@ -6,6 +6,7 @@
 from z3c.form import validator
 from plone.app.dexterity import MessageFactory as _
 from Products.CMFCore.utils import getToolByName
+from plone.app.widgets.interfaces import IFileFactory
 
 
 class ITypesContext(IBrowserPage):
@@ -122,3 +123,9 @@ def validate(self, value):
 
 validator.WidgetValidatorDiscriminators(
     TypeTitleValidator, field=ITypeSettings['title'])
+
+
+
+class IDXFileFactory(IFileFactory):
+    """ adapter factory for DX types
+    """
diff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py
new file mode 100644
index 0000000..8ede354
--- /dev/null
+++ b/plone/app/dexterity/permissions.py
@@ -0,0 +1,102 @@
+# -*- coding: utf-8 -*-
+from AccessControl import getSecurityManager
+from plone.app.widgets.interfaces import IFieldPermissionChecker
+from plone.app.widgets.interfaces import IWidgetsLayer
+from plone.autoform.interfaces import WIDGETS_KEY
+from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from plone.autoform.utils import resolveDottedName
+from plone.dexterity.interfaces import IDexterityContent
+from plone.dexterity.utils import iterSchemata, getAdditionalSchemata
+from plone.supermodel.utils import mergedTaggedValueDict
+from z3c.form.interfaces import IAddForm
+from z3c.form.interfaces import IFieldWidget
+from zope.component import adapts
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
+from zope.interface import implements
+from zope.publisher.browser import TestRequest
+from zope.security.interfaces import IPermission
+
+
+class MockRequest(TestRequest):
+    implements(IWidgetsLayer)
+
+
+class DXFieldPermissionChecker(object):
+    """
+    """
+
+    implements(IFieldPermissionChecker)
+    adapts(IDexterityContent)
+
+    DEFAULT_PERMISSION = 'Modify portal content'
+
+    def __init__(self, context):
+        self.context = context
+        self._request = MockRequest()
+
+    def _get_schemata(self):
+        return iterSchemata(self.context)
+
+    def validate(self, field_name, vocabulary_name=None):
+        context = self.context
+        checker = getSecurityManager().checkPermission
+        schemata = self._get_schemata()
+        for schema in schemata:
+            if field_name in schema:
+                # If a vocabulary name was specified and it does not
+                # match the vocabulary name for the field or widget,
+                # fail.
+                field = schema[field_name]
+                if vocabulary_name and (
+                   vocabulary_name != getattr(field, 'vocabulary', None) and
+                   vocabulary_name != getattr(field, 'vocabularyName', None)):
+                    # Determine the widget to check for vocabulary there
+                    widgets = mergedTaggedValueDict(schema, WIDGETS_KEY)
+                    widget = widgets.get(field_name)
+                    if widget:
+                        widget = (isinstance(widget, basestring) and
+                                  resolveDottedName(widget) or widget)
+                        widget = widget and widget(field, self._request)
+                    else:
+                        widget = queryMultiAdapter((field, self._request),
+                                                   IFieldWidget)
+                    if getattr(widget, 'vocabulary', None) != vocabulary_name:
+                        return False
+                # Create mapping of all schema permissions
+                permissions = mergedTaggedValueDict(schema,
+                                                    WRITE_PERMISSIONS_KEY)
+                permission_name = permissions.get(field_name, None)
+                if permission_name is not None:
+                    permission = queryUtility(IPermission,
+                                              name=permission_name)
+                    if permission:
+                        return checker(permission.title, context)
+
+                # If the field is in the schema, but no permission is
+                # specified, fall back to the default edit permission
+                return checker(self.DEFAULT_PERMISSION, context)
+        else:
+            raise AttributeError('No such field: {0}'.format(field_name))
+
+
+class DXAddViewFieldPermissionChecker(DXFieldPermissionChecker):
+    """Permission checker for when we just have an add view"""
+
+    adapts(IAddForm)
+
+    def __init__(self, view):
+        self.context = view.context
+        # This may fail for views that aren't DefaultAddForm or
+        # DefaultAddView sub-classes, but they can register their own
+        # more specific adapters, if needed.
+        self.fti = getattr(view, 'fti', None)
+        if self.fti is None:
+            self.fti = view.ti
+        self._request = view.request
+
+    def _get_schemata(self):
+        fti = self.fti
+        yield fti.lookupSchema()
+        for schema in getAdditionalSchemata(portal_type=fti.getId()):
+            yield schema
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
new file mode 100644
index 0000000..47c79ee
--- /dev/null
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -0,0 +1,182 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import login
+from plone.app.testing import setRoles
+from plone.app.content.browser.vocabulary import VocabularyView
+from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
+from plone.app.widgets.testing import TestRequest
+from plone.autoform.interfaces import WIDGETS_KEY
+from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from zope import schema
+from zope.globalrequest import setRequest
+from zope.interface import Interface
+from z3c.form.widget import FieldWidget
+from plone.dexterity.fti import DexterityFTI
+
+import json
+
+try:
+    import unittest2 as unittest
+except ImportError:  # pragma: nocover
+    import unittest  # pragma: nocover
+    assert unittest  # pragma: nocover
+
+
+def add_mock_fti(portal):
+    # Fake DX Type
+    fti = DexterityFTI('dx_mock')
+    portal.portal_types._setObject('dx_mock', fti)
+    fti.klass = 'plone.dexterity.content.Item'
+    fti.schema = 'plone.app.widgets.tests.test_dx.IMockSchema'
+    fti.filter_content_types = False
+    fti.behaviors = ('plone.app.dexterity.behaviors.metadata.IBasic',)
+
+
+def _custom_field_widget(field, request):
+    from plone.app.z3cform.widget import AjaxSelectWidget
+    widget = FieldWidget(field, AjaxSelectWidget(request))
+    widget.vocabulary = 'plone.app.vocabularies.PortalTypes'
+    return widget
+
+
+class IMockSchema(Interface):
+    allowed_field = schema.Choice(
+        vocabulary='plone.app.vocabularies.PortalTypes')
+    disallowed_field = schema.Choice(
+        vocabulary='plone.app.vocabularies.PortalTypes')
+    default_field = schema.Choice(
+        vocabulary='plone.app.vocabularies.PortalTypes')
+    custom_widget_field = schema.TextLine()
+    adapted_widget_field = schema.TextLine()
+
+IMockSchema.setTaggedValue(WRITE_PERMISSIONS_KEY, {
+    'allowed_field': u'zope2.View',
+    'disallowed_field': u'zope2.ViewManagementScreens',
+    'custom_widget_field': u'zope2.View',
+    'adapted_widget_field': u'zope2.View',
+})
+IMockSchema.setTaggedValue(WIDGETS_KEY, {
+    'custom_widget_field': _custom_field_widget,
+})
+
+
+class DexterityVocabularyPermissionTests(unittest.TestCase):
+
+    layer = PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
+        setRequest(self.request)
+        self.portal = self.layer['portal']
+
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+        add_mock_fti(self.portal)
+        self.portal.invokeFactory('dx_mock', 'test_dx')
+
+        self.portal.test_dx.manage_permission('View',
+                                              ('Anonymous',),
+                                              acquire=False)
+        self.portal.test_dx.manage_permission('View management screens',
+                                              (),
+                                              acquire=False)
+        self.portal.test_dx.manage_permission('Modify portal content',
+                                              ('Editor', 'Manager',
+                                               'Site Adiminstrator'),
+                                              acquire=False)
+
+    def test_vocabulary_field_allowed(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'allowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+    def test_vocabulary_field_wrong_vocabulary_disallowed(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.Fake',
+            'field': 'allowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_field_disallowed(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'disallowed_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_field_default_permission(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'default_field',
+        })
+        # If the field is does not have a security declaration, the
+        # default edit permission is tested (Modify portal content)
+        setRoles(self.portal, TEST_USER_ID, ['Member'])
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+        setRoles(self.portal, TEST_USER_ID, ['Editor'])
+        # Now access should be allowed, but the vocabulary does not exist
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+    def test_vocabulary_field_default_permission_wrong_vocab(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.Fake',
+            'field': 'default_field',
+        })
+        setRoles(self.portal, TEST_USER_ID, ['Editor'])
+        # Now access should be allowed, but the vocabulary does not exist
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_missing_field(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'missing_field',
+        })
+        setRoles(self.portal, TEST_USER_ID, ['Member'])
+        with self.assertRaises(AttributeError):
+            view()
+
+    def test_vocabulary_on_widget(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'custom_widget_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+        self.request.form['name'] = 'plone.app.vocabularies.Fake'
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+
+    def test_vocabulary_on_adapted_widget(self):
+        view = VocabularyView(self.portal.test_dx, self.request)
+        self.request.form.update({
+            'name': 'plone.app.vocabularies.PortalTypes',
+            'field': 'adapted_widget_field',
+        })
+        data = json.loads(view())
+        self.assertEquals(len(data['results']),
+                          len(self.portal.portal_types.objectIds()))
+
+        self.request.form['name'] = 'plone.app.vocabularies.Fake'
+        data = json.loads(view())
+        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
diff --git a/setup.py b/setup.py
index dd04666..e48716c 100644
--- a/setup.py
+++ b/setup.py
@@ -59,6 +59,7 @@
           'zope.schema',
           'zope.publisher',
           'z3c.form>=3.0.0a1',
+          'plone.app.z3cform>=1.1.0'
       ],
       extras_require={
           'test': [


Repository: plone.app.dexterity
Branch: refs/heads/master
Date: 2015-01-26T23:20:46-06:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/8d9abc2fe89d3eb603e00fef1bf29001be0b9595

fix tests for widgets

Files changed:
M plone/app/dexterity/factories.py
M plone/app/dexterity/tests/test_permissions.py
M setup.py

diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py
index f1bf7e9..6b14406 100644
--- a/plone/app/dexterity/factories.py
+++ b/plone/app/dexterity/factories.py
@@ -12,7 +12,7 @@
 
 from plone.namedfile.file import NamedBlobImage
 from plone.namedfile.file import NamedBlobFile
-from plone.app.widgets.interfaces import IDXFileFactory
+from plone.app.dexterity.interfaces import IDXFileFactory
 
 upload_lock = allocate_lock()
 
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
index 47c79ee..51d89ed 100644
--- a/plone/app/dexterity/tests/test_permissions.py
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -1,4 +1,9 @@
 # -*- coding: utf-8 -*-
+from z3c.form.interfaces import IFieldWidget
+from z3c.form.util import getSpecification
+from zope.component import provideAdapter
+from plone.app.widgets.interfaces import IWidgetsLayer
+from zope.component.globalregistry import base
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
@@ -28,7 +33,7 @@ def add_mock_fti(portal):
     fti = DexterityFTI('dx_mock')
     portal.portal_types._setObject('dx_mock', fti)
     fti.klass = 'plone.dexterity.content.Item'
-    fti.schema = 'plone.app.widgets.tests.test_dx.IMockSchema'
+    fti.schema = 'plone.app.dexterity.tests.test_permissions.IMockSchema'
     fti.filter_content_types = False
     fti.behaviors = ('plone.app.dexterity.behaviors.metadata.IBasic',)
 
@@ -61,6 +66,18 @@ class IMockSchema(Interface):
 })
 
 
+def _enable_custom_widget(field):
+    provideAdapter(_custom_field_widget, adapts=
+                   (getSpecification(field), IWidgetsLayer),
+                   provides=IFieldWidget)
+
+
+def _disable_custom_widget(field):
+        base.unregisterAdapter(
+            required=(getSpecification(field), IWidgetsLayer,),
+            provided=IFieldWidget)
+
+
 class DexterityVocabularyPermissionTests(unittest.TestCase):
 
     layer = PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
@@ -168,6 +185,7 @@ def test_vocabulary_on_widget(self):
         self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_on_adapted_widget(self):
+        _enable_custom_widget(IMockSchema['adapted_widget_field'])
         view = VocabularyView(self.portal.test_dx, self.request)
         self.request.form.update({
             'name': 'plone.app.vocabularies.PortalTypes',
@@ -180,3 +198,4 @@ def test_vocabulary_on_adapted_widget(self):
         self.request.form['name'] = 'plone.app.vocabularies.Fake'
         data = json.loads(view())
         self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        _disable_custom_widget(IMockSchema['adapted_widget_field'])
\ No newline at end of file
diff --git a/setup.py b/setup.py
index e48716c..567f6bf 100644
--- a/setup.py
+++ b/setup.py
@@ -59,7 +59,7 @@
           'zope.schema',
           'zope.publisher',
           'z3c.form>=3.0.0a1',
-          'plone.app.z3cform>=1.1.0'
+          'plone.app.z3cform>=1.1.0.dev0'
       ],
       extras_require={
           'test': [


