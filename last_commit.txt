Repository: plone.locking


Branch: refs/heads/master
Date: 2015-10-19T17:11:42+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.locking/commit/c98eca3c395820af37cbe07a27d982f6a00d739d

Locks stored as annotations are safe to write

plone.protect safeWrite looks for the oid of the object passed.

self.context has one oid and the locks variable which ends up as an annotation on self.context has a different oid, thus causing a not protected write on read.

Files changed:
M plone/locking/lockable.py

diff --git a/plone/locking/lockable.py b/plone/locking/lockable.py
index 4d5ce68..21edc5e 100644
--- a/plone/locking/lockable.py
+++ b/plone/locking/lockable.py
@@ -58,6 +58,7 @@ def lock(self, lock_type=STEALABLE_LOCK, children=False):
 
             locks = self._locks()
             locks[lock_type.__name__] = dict(type=lock_type, token=token)
+            safeWrite(locks)
             safeWrite(self.context)
 
     def refresh_lock(self, lock_type=STEALABLE_LOCK):


Repository: plone.locking


Branch: refs/heads/master
Date: 2015-10-21T10:52:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.locking/commit/e61ef1b201cfe966d4cb53dc65faa3537ee2e2cd

Merge pull request #9 from plone/gforcada-annotation

Locks stored as annotations are safe to write

Files changed:
M plone/locking/lockable.py

diff --git a/plone/locking/lockable.py b/plone/locking/lockable.py
index 4d5ce68..21edc5e 100644
--- a/plone/locking/lockable.py
+++ b/plone/locking/lockable.py
@@ -58,6 +58,7 @@ def lock(self, lock_type=STEALABLE_LOCK, children=False):
 
             locks = self._locks()
             locks[lock_type.__name__] = dict(type=lock_type, token=token)
+            safeWrite(locks)
             safeWrite(self.context)
 
     def refresh_lock(self, lock_type=STEALABLE_LOCK):


