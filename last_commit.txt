Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-09-19T20:19:50+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.theming/commit/e011952789d7e7abbd535e58df744e2f32264e28

Use new registry setting

Files changed:
M src/plone/app/theming/browser/controlpanel.py

diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 7253f98..895ee43 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -3,6 +3,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.decode import processInputs
 from Products.statusmessages.interfaces import IStatusMessage
+from Products.CMFPlone.interfaces import ILinkSchema
 from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.interfaces import RULE_FILENAME
@@ -43,6 +44,9 @@ def __call__(self):
         ptool = getToolByName(self.context, 'portal_properties')
         self.props = ptool.site_properties
         self.pskin = getToolByName(self.context, 'portal_skins')
+        registry = getUtility(IRegistry)
+        self.settings = registry.forInterface(
+            ILinkSchema, prefix="plone", check=False)
 
         if self.update():
             return self.index()
@@ -95,16 +99,10 @@ def set_mark_special_links(self, value):
                                   set_mark_special_links)
 
     def get_ext_links_open_new_window(self):
-        elonw = self.props.external_links_open_new_window
-        if elonw == 'true':
-            return True
-        return False
+        return self.settings.external_links_open_new_window
 
     def set_ext_links_open_new_window(self, value):
-        if value:
-            self.props.manage_changeProperties(external_links_open_new_window='true')
-        else:
-            self.props.manage_changeProperties(external_links_open_new_window='false')
+        self.settings.external_links_open_new_window = value
 
     ext_links_open_new_window = property(get_ext_links_open_new_window,
                                          set_ext_links_open_new_window)


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-09-19T20:20:34+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.theming/commit/3cef6af1e2aa84ea445bb6c6d515bd5d678b8c2b

Pull mark_special_links, external_links_open_new_window values from configuration registry.

Files changed:
M CHANGES.rst
M src/plone/app/theming/browser/controlpanel.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cb45265..ab27d70 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 1.2.13 (unreleased)
 -------------------
 
+- Pull mark_special_links, external_links_open_new_window values
+  from configuration registry.
+  [esteele]
+
 - Fix visual glitch on Safari
   [davilima6]
 
@@ -11,6 +15,7 @@ Changelog
   Fixes https://github.com/plone/plone.app.theming/issues/70
   [tmassman]
 
+
 1.2.12 (2015-09-15)
 -------------------
 
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 895ee43..dacc46f 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -41,8 +41,6 @@ def authorize(context, request):
 class ThemingControlpanel(BrowserView):
 
     def __call__(self):
-        ptool = getToolByName(self.context, 'portal_properties')
-        self.props = ptool.site_properties
         self.pskin = getToolByName(self.context, 'portal_skins')
         registry = getUtility(IRegistry)
         self.settings = registry.forInterface(
@@ -79,21 +77,10 @@ def redirect(self, url):
         self.request.response.redirect(url)
 
     def get_mark_special_links(self):
-        msl = getattr(self.props, 'mark_special_links', False)
-        if msl == 'true':
-            return True
-        return False
+        return self.settings.mark_special_links
 
     def set_mark_special_links(self, value):
-        if value:
-            mark_special_links = 'true'
-        else:
-            mark_special_links = 'false'
-        if self.props.hasProperty('mark_special_links'):
-            self.props.manage_changeProperties(mark_special_links=mark_special_links)
-        else:
-            self.props.manage_addProperty(
-                'mark_special_links', mark_special_links, 'string')
+        self.settings.mark_special_links = value
 
     mark_special_links = property(get_mark_special_links,
                                   set_mark_special_links)


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-09-19T20:20:34+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.theming/commit/3045b465723974e02989b279bca708b1f2fee153

Fix failing lookup for ILinkSchema, rename base settings variable

Files changed:
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt
index dad9d9a..de3904a 100644
--- a/src/plone/app/theming/browser/controlpanel.pt
+++ b/src/plone/app/theming/browser/controlpanel.pt
@@ -352,7 +352,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('themeEnabled', view.settings.enabled)">
+                        tal:define="selected python:request.get('themeEnabled', view.theme_settings.enabled)">
 
                         <input type="hidden" value="" name="themeEnabled:boolean:default" />
                         <input type="checkbox" value="1" name="themeEnabled:boolean" id="themeEnabled"
@@ -368,7 +368,7 @@
 
                     <div
                         tal:define="error errors/rules | nothing;
-                                    rules python:request.get('rules', view.settings.rules)"
+                                    rules python:request.get('rules', view.theme_settings.rules)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
                         <label for="rules" i18n:translate="label_rules">Rules file</label>
@@ -390,7 +390,7 @@
 
                     <div
                         tal:define="error errors/absolutePrefix | nothing;
-                                    absolutePrefix python:request.get('absolutePrefix', view.settings.absolutePrefix)"
+                                    absolutePrefix python:request.get('absolutePrefix', view.theme_settings.absolutePrefix)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
                         <label for="absolutePrefix" i18n:translate="label_absolute_prefix">Absolute path prefix</label>
@@ -415,7 +415,7 @@
 
                     <div
                         tal:define="error errors/doctype | nothing;
-                                    doctype python:request.get('doctype', view.settings.doctype)"
+                                    doctype python:request.get('doctype', view.theme_settings.doctype)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
                         <label for="doctype" i18n:translate="label_doctype">Doctype</label>
@@ -440,7 +440,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('readNetwork', view.settings.readNetwork)">
+                        tal:define="selected python:request.get('readNetwork', view.theme_settings.readNetwork)">
 
                         <input type="hidden" value="" name="readNetwork:boolean:default" />
                         <input type="checkbox" value="1" name="readNetwork:boolean" id="readNetwork"
@@ -455,7 +455,7 @@
 
                     <div
                         tal:define="error errors/hostnameBlacklist | nothing;
-                                    hostnameBlacklist view/settings/hostnameBlacklist | python:[];
+                                    hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];
                                     hostnameBlacklist python:request.get('hostnameBlacklist', hostnameBlacklist)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
@@ -484,7 +484,7 @@
 
                     <div
                         tal:define="error errors/parameterExpressions | nothing;
-                                    parameterExpressions python:view.settings.parameterExpressions or {};
+                                    parameterExpressions python:view.theme_settings.parameterExpressions or {};
                                     parameterExpressions python:['%s = %s' % (k,v) for k,v in parameterExpressions.items()];
                                     parameterExpressions python:request.get('parameterExpressions', parameterExpressions)"
                         tal:attributes="class python:'field error' if error else 'field'">
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index dacc46f..af89571 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -42,24 +42,22 @@ class ThemingControlpanel(BrowserView):
 
     def __call__(self):
         self.pskin = getToolByName(self.context, 'portal_skins')
-        registry = getUtility(IRegistry)
-        self.settings = registry.forInterface(
-            ILinkSchema, prefix="plone", check=False)
 
         if self.update():
             return self.index()
         return ''
 
     def _setup(self):
-        self.settings = getUtility(IRegistry).forInterface(
-            IThemeSettings,
-            False
-        )
+        registry = getUtility(IRegistry)
+        self.theme_settings = registry.forInterface(IThemeSettings, False)
+        self.link_settings = registry.forInterface(ILinkSchema,
+                                                   prefix="plone",
+                                                   check=False)
         self.zodbThemes = getZODBThemes()
         self.availableThemes = getAvailableThemes()
         self.selectedTheme = self.getSelectedTheme(
             self.availableThemes,
-            self.settings.rules
+            self.theme_settings.rules
         )
         self.overlay = ''
 
@@ -77,19 +75,19 @@ def redirect(self, url):
         self.request.response.redirect(url)
 
     def get_mark_special_links(self):
-        return self.settings.mark_special_links
+        return self.link_settings.mark_special_links
 
     def set_mark_special_links(self, value):
-        self.settings.mark_special_links = value
+        self.link_settings.mark_special_links = value
 
     mark_special_links = property(get_mark_special_links,
                                   set_mark_special_links)
 
     def get_ext_links_open_new_window(self):
-        return self.settings.external_links_open_new_window
+        return self.link_settings.external_links_open_new_window
 
     def set_ext_links_open_new_window(self, value):
-        self.settings.external_links_open_new_window = value
+        self.link_settings.external_links_open_new_window = value
 
     ext_links_open_new_window = property(get_ext_links_open_new_window,
                                          set_ext_links_open_new_window)
@@ -120,7 +118,7 @@ def update(self):
                     themeSelection
                 )
                 applyTheme(themeData)
-                self.settings.enabled = True
+                self.theme_settings.enabled = True
 
             IStatusMessage(
                 self.request
@@ -143,7 +141,7 @@ def update(self):
             self.authorize()
 
             applyTheme(None)
-            self.settings.enabled = False
+            self.theme_settings.enabled = False
 
             IStatusMessage(self.request).add(_(u"Theme disabled."))
             self._setup()
@@ -152,7 +150,7 @@ def update(self):
         if 'form.button.AdvancedSave' in form:
             self.authorize()
 
-            self.settings.readNetwork = form.get('readNetwork', False)
+            self.theme_settings.readNetwork = form.get('readNetwork', False)
 
             themeEnabled = form.get('themeEnabled', False)
             rules = form.get('rules', None)
@@ -185,15 +183,15 @@ def update(self):
             if not self.errors:
                 # Trigger onDisabled() on plugins if theme was active
                 # previously and rules were changed
-                if self.settings.rules != rules:
+                if self.theme_settings.rules != rules:
                     applyTheme(None)
 
-                self.settings.enabled = themeEnabled
-                self.settings.rules = rules
-                self.settings.absolutePrefix = prefix
-                self.settings.parameterExpressions = parameterExpressions
-                self.settings.hostnameBlacklist = hostnameBlacklist
-                self.settings.doctype = doctype
+                self.theme_settings.enabled = themeEnabled
+                self.theme_settings.rules = rules
+                self.theme_settings.absolutePrefix = prefix
+                self.theme_settings.parameterExpressions = parameterExpressions
+                self.theme_settings.hostnameBlacklist = hostnameBlacklist
+                self.theme_settings.doctype = doctype
 
                 # Theme base settings
                 if themeBase is not None:
@@ -308,7 +306,7 @@ def update(self):
 
                 if enableNewTheme:
                     applyTheme(themeData)
-                    self.settings.enabled = True
+                    self.theme_settings.enabled = True
 
             if not self.errors:
                 portalUrl = getToolByName(self.context, 'portal_url')()
@@ -365,7 +363,7 @@ def update(self):
                 if enableImmediately:
                     themeData = self.getThemeData(self.availableThemes, name)
                     applyTheme(themeData)
-                    self.settings.enabled = True
+                    self.theme_settings.enabled = True
 
                 portalUrl = getToolByName(self.context, 'portal_url')()
                 self.redirect(


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2015-09-20T17:33:59+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.theming/commit/aceaa28745d6941d80870081d556d25b130fb5f6

Merge pull request #83 from plone/portal-properties-cleanup

Portal properties cleanup

Files changed:
M CHANGES.rst
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cb45265..ab27d70 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 1.2.13 (unreleased)
 -------------------
 
+- Pull mark_special_links, external_links_open_new_window values
+  from configuration registry.
+  [esteele]
+
 - Fix visual glitch on Safari
   [davilima6]
 
@@ -11,6 +15,7 @@ Changelog
   Fixes https://github.com/plone/plone.app.theming/issues/70
   [tmassman]
 
+
 1.2.12 (2015-09-15)
 -------------------
 
diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt
index dad9d9a..de3904a 100644
--- a/src/plone/app/theming/browser/controlpanel.pt
+++ b/src/plone/app/theming/browser/controlpanel.pt
@@ -352,7 +352,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('themeEnabled', view.settings.enabled)">
+                        tal:define="selected python:request.get('themeEnabled', view.theme_settings.enabled)">
 
                         <input type="hidden" value="" name="themeEnabled:boolean:default" />
                         <input type="checkbox" value="1" name="themeEnabled:boolean" id="themeEnabled"
@@ -368,7 +368,7 @@
 
                     <div
                         tal:define="error errors/rules | nothing;
-                                    rules python:request.get('rules', view.settings.rules)"
+                                    rules python:request.get('rules', view.theme_settings.rules)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
                         <label for="rules" i18n:translate="label_rules">Rules file</label>
@@ -390,7 +390,7 @@
 
                     <div
                         tal:define="error errors/absolutePrefix | nothing;
-                                    absolutePrefix python:request.get('absolutePrefix', view.settings.absolutePrefix)"
+                                    absolutePrefix python:request.get('absolutePrefix', view.theme_settings.absolutePrefix)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
                         <label for="absolutePrefix" i18n:translate="label_absolute_prefix">Absolute path prefix</label>
@@ -415,7 +415,7 @@
 
                     <div
                         tal:define="error errors/doctype | nothing;
-                                    doctype python:request.get('doctype', view.settings.doctype)"
+                                    doctype python:request.get('doctype', view.theme_settings.doctype)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
                         <label for="doctype" i18n:translate="label_doctype">Doctype</label>
@@ -440,7 +440,7 @@
 
                     <div
                         class="field"
-                        tal:define="selected python:request.get('readNetwork', view.settings.readNetwork)">
+                        tal:define="selected python:request.get('readNetwork', view.theme_settings.readNetwork)">
 
                         <input type="hidden" value="" name="readNetwork:boolean:default" />
                         <input type="checkbox" value="1" name="readNetwork:boolean" id="readNetwork"
@@ -455,7 +455,7 @@
 
                     <div
                         tal:define="error errors/hostnameBlacklist | nothing;
-                                    hostnameBlacklist view/settings/hostnameBlacklist | python:[];
+                                    hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];
                                     hostnameBlacklist python:request.get('hostnameBlacklist', hostnameBlacklist)"
                         tal:attributes="class python:'field error' if error else 'field'">
 
@@ -484,7 +484,7 @@
 
                     <div
                         tal:define="error errors/parameterExpressions | nothing;
-                                    parameterExpressions python:view.settings.parameterExpressions or {};
+                                    parameterExpressions python:view.theme_settings.parameterExpressions or {};
                                     parameterExpressions python:['%s = %s' % (k,v) for k,v in parameterExpressions.items()];
                                     parameterExpressions python:request.get('parameterExpressions', parameterExpressions)"
                         tal:attributes="class python:'field error' if error else 'field'">
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 7253f98..af89571 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -3,6 +3,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.decode import processInputs
 from Products.statusmessages.interfaces import IStatusMessage
+from Products.CMFPlone.interfaces import ILinkSchema
 from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.interfaces import RULE_FILENAME
@@ -40,8 +41,6 @@ def authorize(context, request):
 class ThemingControlpanel(BrowserView):
 
     def __call__(self):
-        ptool = getToolByName(self.context, 'portal_properties')
-        self.props = ptool.site_properties
         self.pskin = getToolByName(self.context, 'portal_skins')
 
         if self.update():
@@ -49,15 +48,16 @@ def __call__(self):
         return ''
 
     def _setup(self):
-        self.settings = getUtility(IRegistry).forInterface(
-            IThemeSettings,
-            False
-        )
+        registry = getUtility(IRegistry)
+        self.theme_settings = registry.forInterface(IThemeSettings, False)
+        self.link_settings = registry.forInterface(ILinkSchema,
+                                                   prefix="plone",
+                                                   check=False)
         self.zodbThemes = getZODBThemes()
         self.availableThemes = getAvailableThemes()
         self.selectedTheme = self.getSelectedTheme(
             self.availableThemes,
-            self.settings.rules
+            self.theme_settings.rules
         )
         self.overlay = ''
 
@@ -75,36 +75,19 @@ def redirect(self, url):
         self.request.response.redirect(url)
 
     def get_mark_special_links(self):
-        msl = getattr(self.props, 'mark_special_links', False)
-        if msl == 'true':
-            return True
-        return False
+        return self.link_settings.mark_special_links
 
     def set_mark_special_links(self, value):
-        if value:
-            mark_special_links = 'true'
-        else:
-            mark_special_links = 'false'
-        if self.props.hasProperty('mark_special_links'):
-            self.props.manage_changeProperties(mark_special_links=mark_special_links)
-        else:
-            self.props.manage_addProperty(
-                'mark_special_links', mark_special_links, 'string')
+        self.link_settings.mark_special_links = value
 
     mark_special_links = property(get_mark_special_links,
                                   set_mark_special_links)
 
     def get_ext_links_open_new_window(self):
-        elonw = self.props.external_links_open_new_window
-        if elonw == 'true':
-            return True
-        return False
+        return self.link_settings.external_links_open_new_window
 
     def set_ext_links_open_new_window(self, value):
-        if value:
-            self.props.manage_changeProperties(external_links_open_new_window='true')
-        else:
-            self.props.manage_changeProperties(external_links_open_new_window='false')
+        self.link_settings.external_links_open_new_window = value
 
     ext_links_open_new_window = property(get_ext_links_open_new_window,
                                          set_ext_links_open_new_window)
@@ -135,7 +118,7 @@ def update(self):
                     themeSelection
                 )
                 applyTheme(themeData)
-                self.settings.enabled = True
+                self.theme_settings.enabled = True
 
             IStatusMessage(
                 self.request
@@ -158,7 +141,7 @@ def update(self):
             self.authorize()
 
             applyTheme(None)
-            self.settings.enabled = False
+            self.theme_settings.enabled = False
 
             IStatusMessage(self.request).add(_(u"Theme disabled."))
             self._setup()
@@ -167,7 +150,7 @@ def update(self):
         if 'form.button.AdvancedSave' in form:
             self.authorize()
 
-            self.settings.readNetwork = form.get('readNetwork', False)
+            self.theme_settings.readNetwork = form.get('readNetwork', False)
 
             themeEnabled = form.get('themeEnabled', False)
             rules = form.get('rules', None)
@@ -200,15 +183,15 @@ def update(self):
             if not self.errors:
                 # Trigger onDisabled() on plugins if theme was active
                 # previously and rules were changed
-                if self.settings.rules != rules:
+                if self.theme_settings.rules != rules:
                     applyTheme(None)
 
-                self.settings.enabled = themeEnabled
-                self.settings.rules = rules
-                self.settings.absolutePrefix = prefix
-                self.settings.parameterExpressions = parameterExpressions
-                self.settings.hostnameBlacklist = hostnameBlacklist
-                self.settings.doctype = doctype
+                self.theme_settings.enabled = themeEnabled
+                self.theme_settings.rules = rules
+                self.theme_settings.absolutePrefix = prefix
+                self.theme_settings.parameterExpressions = parameterExpressions
+                self.theme_settings.hostnameBlacklist = hostnameBlacklist
+                self.theme_settings.doctype = doctype
 
                 # Theme base settings
                 if themeBase is not None:
@@ -323,7 +306,7 @@ def update(self):
 
                 if enableNewTheme:
                     applyTheme(themeData)
-                    self.settings.enabled = True
+                    self.theme_settings.enabled = True
 
             if not self.errors:
                 portalUrl = getToolByName(self.context, 'portal_url')()
@@ -380,7 +363,7 @@ def update(self):
                 if enableImmediately:
                     themeData = self.getThemeData(self.availableThemes, name)
                     applyTheme(themeData)
-                    self.settings.enabled = True
+                    self.theme_settings.enabled = True
 
                 portalUrl = getToolByName(self.context, 'portal_url')()
                 self.redirect(


