Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-04-20T18:43:30+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.controlpanel/commit/f32799d5295cedcfe6a2bc567eef041f311fad4e

removed CMFDefault dependency

Files changed:
M CHANGES.rst
M README.rst
M plone/app/controlpanel/filter.py
M plone/app/controlpanel/language.py
M plone/app/controlpanel/ram.py
M plone/app/controlpanel/skins.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 10588ce..87dc430 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -12,6 +12,8 @@ Changelog
 - Fix missing closing div in qi.pt
   [vincentfretin]
 
+- Removed CMFDefault dependency
+  [tomgross]
 
 3.0.1 (2015-03-26)
 ------------------
diff --git a/README.rst b/README.rst
index dedd196..0a36841 100644
--- a/README.rst
+++ b/README.rst
@@ -29,10 +29,8 @@ Following this approach a control panel consists of at least three classes:
 - An adapter implementing the above interface, exposing all the different
   settings as properties. As we don't want to have those control panels
   available all over the place, we restrict them to adapt the 'IPloneSiteRoot'
-  only. Sometimes we use the 'SchemaAdapterBase' class from CMFDefault.formlib
-  and the property wrapper 'ProxyFieldProperty' to automatically convert the
-  values found in our site to the types expected by formlib and vica versa.
-  For example we often need to store tuples while formlib expects sets, store
+  only. 
+  We often need to store tuples while formlib expects sets, store
   encoded strings in site encoding rather than unicode or use Zope2's DateTime
   class instead of Python's datetime package.
 
diff --git a/plone/app/controlpanel/filter.py b/plone/app/controlpanel/filter.py
index adc0dd2..2d4e0ed 100644
--- a/plone/app/controlpanel/filter.py
+++ b/plone/app/controlpanel/filter.py
@@ -9,7 +9,6 @@
 from zope.formlib.sequencewidget import ListSequenceWidget
 
 from Products.CMFCore.utils import getToolByName
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
@@ -110,16 +109,16 @@ class IFilterSchema(IFilterTagsSchema, IFilterAttributesSchema,
     """Combined schema for the adapter lookup.
     """
 
-class FilterControlPanelAdapter(SchemaAdapterBase):
+class FilterControlPanelAdapter(object):
     adapts(IPloneSiteRoot)
     implements(IFilterSchema)
 
     def __init__(self, context):
-        super(FilterControlPanelAdapter, self).__init__(context)
         self.context = context
         self.transform = getattr(
             getToolByName(context, 'portal_transforms'), 'safe_html')
         self.kupu_tool = getToolByName(context, 'kupu_library_tool', None)
+        self.encoding = 'utf-8'
 
     def _settransform(self, **kwargs):
         # Cannot pass a dict to set transform parameters, it has
diff --git a/plone/app/controlpanel/language.py b/plone/app/controlpanel/language.py
index 9484798..52ec270 100644
--- a/plone/app/controlpanel/language.py
+++ b/plone/app/controlpanel/language.py
@@ -10,7 +10,6 @@
 from Acquisition import aq_inner
 
 from Products.CMFCore.utils import getToolByName
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.statusmessages.interfaces import IStatusMessage
@@ -39,14 +38,14 @@ class ILanguageSelectionSchema(Interface):
         vocabulary="plone.app.vocabularies.AvailableContentLanguages")
 
 
-class LanguageControlPanelAdapter(SchemaAdapterBase):
+class LanguageControlPanelAdapter(object):
 
     adapts(IPloneSiteRoot)
     implements(ILanguageSelectionSchema)
 
     def __init__(self, context):
-        super(LanguageControlPanelAdapter, self).__init__(context)
         self.context = getToolByName(context, 'portal_languages')
+        self.encoding = 'utf-8'
 
     def get_default_language(self):
         return aq_inner(self.context).getDefaultLanguage()
diff --git a/plone/app/controlpanel/ram.py b/plone/app/controlpanel/ram.py
index 2fd786d..df71702 100644
--- a/plone/app/controlpanel/ram.py
+++ b/plone/app/controlpanel/ram.py
@@ -11,7 +11,6 @@
 
 from Acquisition import aq_inner
 
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five.browser.pagetemplatefile import ZopeTwoPageTemplateFile
@@ -38,10 +37,14 @@ class IRAMCacheSchema(Interface):
                  required=True)
 
 
-class RAMCacheControlPanelAdapter(SchemaAdapterBase):
+class RAMCacheControlPanelAdapter(object):
     adapts(IPloneSiteRoot)
     implements(IRAMCacheSchema)
 
+    def __init__(self, context):
+        self.context = context
+        self.encoding = 'utf-8'
+
     def get_max_entries(self):
         return getUtility(IRAMCache).maxEntries
 
diff --git a/plone/app/controlpanel/skins.py b/plone/app/controlpanel/skins.py
index ec42b86..dc68654 100644
--- a/plone/app/controlpanel/skins.py
+++ b/plone/app/controlpanel/skins.py
@@ -6,7 +6,6 @@
 from zope.schema import Choice
 
 from Products.CMFCore.utils import getToolByName
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 
@@ -56,7 +55,7 @@ class ISkinsSchema(Interface):
                              vocabulary=ICON_VISIBILITY_VOCABULARY)
 
 
-class SkinsControlPanelAdapter(SchemaAdapterBase):
+class SkinsControlPanelAdapter(object):
 
     adapts(IPloneSiteRoot)
     implements(ISkinsSchema)
@@ -69,6 +68,7 @@ def __init__(self, context):
         ptool = getToolByName(context, 'portal_properties')
         self.props = ptool.site_properties
         self.themeChanged = False
+        self.encoding = 'utf-8'
 
     def get_theme(self):
         return self.context.getDefaultSkin()
diff --git a/setup.py b/setup.py
index c3703ea..c90927b 100644
--- a/setup.py
+++ b/setup.py
@@ -10,10 +10,12 @@
       classifiers=[
           "Environment :: Web Environment",
           "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
           "Framework :: Zope2",
           "License :: OSI Approved :: GNU General Public License (GPL)",
           "Operating System :: OS Independent",
           "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
         ],
       keywords='plone controlpanel formlib',
       author='Plone Foundation',
@@ -48,7 +50,6 @@
         'Acquisition',
         'Products.CMFPlone',
         'Products.CMFCore',
-        'Products.CMFDefault',
         'Products.PlonePAS',
         'Products.PortalTransforms',
         'Products.statusmessages',


Repository: plone.app.controlpanel
Branch: refs/heads/master
Date: 2015-04-25T11:06:38+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.app.controlpanel/commit/24f5aa23cab39ab7e5176ac076843e9da9387f45

Merge pull request #48 from plone/tomgross-nocmfdefault

removed CMFDefault dependency

Files changed:
M CHANGES.rst
M README.rst
M plone/app/controlpanel/filter.py
M plone/app/controlpanel/language.py
M plone/app/controlpanel/ram.py
M plone/app/controlpanel/skins.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 10588ce..87dc430 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -12,6 +12,8 @@ Changelog
 - Fix missing closing div in qi.pt
   [vincentfretin]
 
+- Removed CMFDefault dependency
+  [tomgross]
 
 3.0.1 (2015-03-26)
 ------------------
diff --git a/README.rst b/README.rst
index dedd196..0a36841 100644
--- a/README.rst
+++ b/README.rst
@@ -29,10 +29,8 @@ Following this approach a control panel consists of at least three classes:
 - An adapter implementing the above interface, exposing all the different
   settings as properties. As we don't want to have those control panels
   available all over the place, we restrict them to adapt the 'IPloneSiteRoot'
-  only. Sometimes we use the 'SchemaAdapterBase' class from CMFDefault.formlib
-  and the property wrapper 'ProxyFieldProperty' to automatically convert the
-  values found in our site to the types expected by formlib and vica versa.
-  For example we often need to store tuples while formlib expects sets, store
+  only. 
+  We often need to store tuples while formlib expects sets, store
   encoded strings in site encoding rather than unicode or use Zope2's DateTime
   class instead of Python's datetime package.
 
diff --git a/plone/app/controlpanel/filter.py b/plone/app/controlpanel/filter.py
index adc0dd2..2d4e0ed 100644
--- a/plone/app/controlpanel/filter.py
+++ b/plone/app/controlpanel/filter.py
@@ -9,7 +9,6 @@
 from zope.formlib.sequencewidget import ListSequenceWidget
 
 from Products.CMFCore.utils import getToolByName
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
@@ -110,16 +109,16 @@ class IFilterSchema(IFilterTagsSchema, IFilterAttributesSchema,
     """Combined schema for the adapter lookup.
     """
 
-class FilterControlPanelAdapter(SchemaAdapterBase):
+class FilterControlPanelAdapter(object):
     adapts(IPloneSiteRoot)
     implements(IFilterSchema)
 
     def __init__(self, context):
-        super(FilterControlPanelAdapter, self).__init__(context)
         self.context = context
         self.transform = getattr(
             getToolByName(context, 'portal_transforms'), 'safe_html')
         self.kupu_tool = getToolByName(context, 'kupu_library_tool', None)
+        self.encoding = 'utf-8'
 
     def _settransform(self, **kwargs):
         # Cannot pass a dict to set transform parameters, it has
diff --git a/plone/app/controlpanel/language.py b/plone/app/controlpanel/language.py
index 9484798..52ec270 100644
--- a/plone/app/controlpanel/language.py
+++ b/plone/app/controlpanel/language.py
@@ -10,7 +10,6 @@
 from Acquisition import aq_inner
 
 from Products.CMFCore.utils import getToolByName
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.statusmessages.interfaces import IStatusMessage
@@ -39,14 +38,14 @@ class ILanguageSelectionSchema(Interface):
         vocabulary="plone.app.vocabularies.AvailableContentLanguages")
 
 
-class LanguageControlPanelAdapter(SchemaAdapterBase):
+class LanguageControlPanelAdapter(object):
 
     adapts(IPloneSiteRoot)
     implements(ILanguageSelectionSchema)
 
     def __init__(self, context):
-        super(LanguageControlPanelAdapter, self).__init__(context)
         self.context = getToolByName(context, 'portal_languages')
+        self.encoding = 'utf-8'
 
     def get_default_language(self):
         return aq_inner(self.context).getDefaultLanguage()
diff --git a/plone/app/controlpanel/ram.py b/plone/app/controlpanel/ram.py
index 2fd786d..df71702 100644
--- a/plone/app/controlpanel/ram.py
+++ b/plone/app/controlpanel/ram.py
@@ -11,7 +11,6 @@
 
 from Acquisition import aq_inner
 
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five.browser.pagetemplatefile import ZopeTwoPageTemplateFile
@@ -38,10 +37,14 @@ class IRAMCacheSchema(Interface):
                  required=True)
 
 
-class RAMCacheControlPanelAdapter(SchemaAdapterBase):
+class RAMCacheControlPanelAdapter(object):
     adapts(IPloneSiteRoot)
     implements(IRAMCacheSchema)
 
+    def __init__(self, context):
+        self.context = context
+        self.encoding = 'utf-8'
+
     def get_max_entries(self):
         return getUtility(IRAMCache).maxEntries
 
diff --git a/plone/app/controlpanel/skins.py b/plone/app/controlpanel/skins.py
index ec42b86..dc68654 100644
--- a/plone/app/controlpanel/skins.py
+++ b/plone/app/controlpanel/skins.py
@@ -6,7 +6,6 @@
 from zope.schema import Choice
 
 from Products.CMFCore.utils import getToolByName
-from Products.CMFDefault.formlib.schema import SchemaAdapterBase
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 
@@ -56,7 +55,7 @@ class ISkinsSchema(Interface):
                              vocabulary=ICON_VISIBILITY_VOCABULARY)
 
 
-class SkinsControlPanelAdapter(SchemaAdapterBase):
+class SkinsControlPanelAdapter(object):
 
     adapts(IPloneSiteRoot)
     implements(ISkinsSchema)
@@ -69,6 +68,7 @@ def __init__(self, context):
         ptool = getToolByName(context, 'portal_properties')
         self.props = ptool.site_properties
         self.themeChanged = False
+        self.encoding = 'utf-8'
 
     def get_theme(self):
         return self.context.getDefaultSkin()
diff --git a/setup.py b/setup.py
index c3703ea..c90927b 100644
--- a/setup.py
+++ b/setup.py
@@ -10,10 +10,12 @@
       classifiers=[
           "Environment :: Web Environment",
           "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
           "Framework :: Zope2",
           "License :: OSI Approved :: GNU General Public License (GPL)",
           "Operating System :: OS Independent",
           "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
         ],
       keywords='plone controlpanel formlib',
       author='Plone Foundation',
@@ -48,7 +50,6 @@
         'Acquisition',
         'Products.CMFPlone',
         'Products.CMFCore',
-        'Products.CMFDefault',
         'Products.PlonePAS',
         'Products.PortalTransforms',
         'Products.statusmessages',


