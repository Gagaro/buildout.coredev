Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-19T20:21:05+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.layout/commit/615166901cd93c147c55dcd39ddd62235946b20e

Pull mark_special_links, external_links_open_new_window values from registry.

Files changed:
M CHANGES.rst
M plone/app/layout/globals/layout.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 713fa1b..6694b1f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 2.5.15 (unreleased)
 -------------------
 
+- Pull mark_special_links, external_links_open_new_window values
+  from configuration registry.
+  [esteele]
+
 - Respect @@site_controlpanel configuration to show publication date
   in document_byline (closes `#1037`_).
   [rodfersou]
diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index 62746f7..d0f343e 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -1,6 +1,7 @@
 import json
 
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.controlpanel import ILinkSchema
 from Products.CMFPlone.interfaces.controlpanel import ISiteSchema
 from Products.Five.browser.metaconfigure import ViewMixinForTemplates
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
@@ -235,11 +236,13 @@ def bodyClass(self, template, view):
                 pass
 
         # class for markspeciallinks pattern
-        properties = getToolByName(context, "portal_properties")
-        props = getattr(properties, 'site_properties')
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILinkSchema,
+                                         prefix="plone",
+                                         check=False)
 
-        msl = props.getProperty('mark_special_links', 'false')
-        elonw = props.getProperty('external_links_open_new_window', 'false')
+        msl = settings.mark_special_links
+        elonw = settings.external_links_open_new_window
         if msl == 'true' or elonw == 'true':
             body_classes.append('pat-markspeciallinks')
 


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-19T20:21:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/e0c218a558c92c65e90de30725ea744a03b30c14

fix: access value from record

Files changed:
M plone/app/layout/navigation/root.py

diff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py
index 28e27d2..f790684 100644
--- a/plone/app/layout/navigation/root.py
+++ b/plone/app/layout/navigation/root.py
@@ -1,8 +1,11 @@
-from Acquisition import aq_base, aq_parent, aq_inner
-
+# -*- coding: utf-8 -*-
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from plone.app.layout.navigation.interfaces import INavigationRoot
-
 from Products.CMFCore.utils import getToolByName
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
 
 
 def getNavigationRoot(context, relativeRoot=None):
@@ -26,9 +29,8 @@ def getNavigationRoot(context, relativeRoot=None):
 
     if relativeRoot is None:
         # fetch from portal_properties
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
-        relativeRoot = navtree_properties.getProperty('root', None)
+        registry = getUtility(IRegistry)
+        relativeRoot = registry.records['plone.root'].value
 
     # if relativeRoot has a meaningful value,
     if relativeRoot and relativeRoot != '/':


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-19T20:21:05+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/6db1bacc4ef1a0cc3b3067bd2170707b61c7b707

use get-access with defaults

Files changed:
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/patterns_settings.py
M plone/app/layout/navigation/root.py

diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index d0f343e..0e6d567 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -165,11 +165,8 @@ def bodyClass(self, template, view):
             # skip first section since we already have that...
             if len(contentPath) > 1:
                 registry = getUtility(IRegistry)
-                try:
-                    depth = registry[
-                        'plone.app.layout.globals.bodyClass.depth']
-                except KeyError:
-                    depth = 4
+                depth = registry.get(
+                    'plone.app.layout.globals.bodyClass.depth', 4)
                 if depth > 1:
                     classes = ['subsection-%s' % contentPath[1]]
                     for section in contentPath[2:depth]:
@@ -182,7 +179,8 @@ def bodyClass(self, template, view):
         else:
             body_classes.append('icons-off')
 
-        # permissions required. Useful to theme frontend and backend differently
+        # permissions required. Useful to theme frontend and backend
+        # differently
         permissions = []
         if not getattr(view, '__ac_permissions__', tuple()):
             permissions = ['none']
diff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py
index cd21a2c..04a6e91 100644
--- a/plone/app/layout/globals/patterns_settings.py
+++ b/plone/app/layout/globals/patterns_settings.py
@@ -39,15 +39,13 @@ def __call__(self):
         }
 
         # first, check for any adapters that need pattern data defined
-        adapters = getAdapters((self.context, self.request, None), IPatternsSettings)
+        adapters = getAdapters(
+            (self.context, self.request, None), IPatternsSettings)
         [result.update(x[1]()) for x in adapters]
 
         # Resources Registered UI patterns can override adapters
         registry = getUtility(IRegistry)
-        try:
-            pattern_options = registry['plone.patternoptions']
-        except (AttributeError, KeyError):
-            pattern_options = {}
+        pattern_options = registry.get('plone.patternoptions', {})
         for key, value in pattern_options.items():
             result['data-pat-' + key] = value
 
diff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py
index f790684..eddc6e3 100644
--- a/plone/app/layout/navigation/root.py
+++ b/plone/app/layout/navigation/root.py
@@ -30,7 +30,7 @@ def getNavigationRoot(context, relativeRoot=None):
     if relativeRoot is None:
         # fetch from portal_properties
         registry = getUtility(IRegistry)
-        relativeRoot = registry.records['plone.root'].value
+        relativeRoot = registry.get('plone.root', None)
 
     # if relativeRoot has a meaningful value,
     if relativeRoot and relativeRoot != '/':


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-19T20:21:05+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.layout/commit/a2e2f68583e4e8397649d896d515138ff89adcc7

Use registry lookup for types_use_view_action_in_listings

Files changed:
M CHANGES.rst
M plone/app/layout/globals/context.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/viewlets/document_relateditems.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 6694b1f..5482094 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 2.5.15 (unreleased)
 -------------------
 
-- Pull mark_special_links, external_links_open_new_window values
+- Pull mark_special_links, external_links_open_new_window, 
+  types_view_action_in_listings values
   from configuration registry.
   [esteele]
 
diff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py
index bfa09b6..2e0ca22 100644
--- a/plone/app/layout/globals/context.py
+++ b/plone/app/layout/globals/context.py
@@ -14,6 +14,7 @@
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
+from plone.registry.interfaces import IRegistry
 
 from interfaces import IContextState
 
@@ -70,17 +71,11 @@ def view_url(self):
         called, instead of with /view appended.  We want to avoid that.
         """
         view_url = self.object_url()
-        portal_properties = getToolByName(
-            self.context, 'portal_properties', None)
-        if portal_properties is not None:
-            site_properties = getattr(
-                portal_properties, 'site_properties', None)
-            portal_type = getattr(aq_base(self.context), 'portal_type', None)
-            if site_properties is not None and portal_type is not None:
-                use_view_action = site_properties.getProperty(
-                    'typesUseViewActionInListings', ())
-                if portal_type in use_view_action:
-                    view_url = view_url + '/view'
+        portal_type = getattr(aq_base(self.context), 'portal_type', None)
+        registry = getUtility(IRegistry)
+        use_view_action = registry.get('plone.types_view_action_in_listings', [])
+        if portal_type in use_view_action:
+            view_url = view_url + '/view'
         return view_url
 
     @memoize
diff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py
index 144eaca..b1f7213 100644
--- a/plone/app/layout/sitemap/sitemap.py
+++ b/plone/app/layout/sitemap/sitemap.py
@@ -46,11 +46,9 @@ def objects(self):
         query = {}
         utils = getToolByName(self.context, 'plone_utils')
         query['portal_type'] = utils.getUserFriendlyTypes()
-        ptool = getToolByName(self, 'portal_properties')
-        siteProperties = getattr(ptool, 'site_properties')
+        registry = getUtility(IRegistry)
         typesUseViewActionInListings = frozenset(
-            siteProperties.getProperty('typesUseViewActionInListings', [])
-        )
+            registry.get('plone.types_view_action_in_listings', []))
 
         is_plone_site_root = IPloneSiteRoot.providedBy(self.context)
         if not is_plone_site_root:
diff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py
index 9b1da89..22ffad4 100644
--- a/plone/app/layout/sitemap/tests/test_sitemap.py
+++ b/plone/app/layout/sitemap/tests/test_sitemap.py
@@ -209,8 +209,9 @@ def test_typesUseViewActionInListings(self):
         self.wftool.doActionFor(newsitem, 'publish')
         self.assertTrue('published' == self.wftool.getInfoFor(
             newsitem, 'review_state'))
-        self.site_properties.manage_changeProperties(
-            typesUseViewActionInListings=['News Item'])
+        registry = getUtility(IRegistry)
+        registry['plone.types_view_action_in_listings'] = [u'News Item']
+
         self.logout()
 
         xml = self.uncompress(self.sitemap())
diff --git a/plone/app/layout/viewlets/document_relateditems.pt b/plone/app/layout/viewlets/document_relateditems.pt
index c01dd27..a39a349 100644
--- a/plone/app/layout/viewlets/document_relateditems.pt
+++ b/plone/app/layout/viewlets/document_relateditems.pt
@@ -8,8 +8,7 @@
                           plone_layout nocall:context/@@plone_layout;
                           normalizeString nocall:plone_view/normalizeString;
                           context_state nocall:context/@@plone_context_state;
-                          site_properties context/portal_properties/site_properties;
-                          use_view_action site_properties/typesUseViewActionInListings|python:();">
+                          use_view_action python:context.portal_registry.get('types_view_action_in_listings', []);">
         <header i18n:translate="label_related_items">Related content</header>
         <ul>
           <li tal:repeat="item related">


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-19T20:21:05+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.layout/commit/7ce9843e1cdbb9453da58649c068e3ee10cf2068

Fix registry id

Files changed:
M plone/app/layout/globals/context.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/viewlets/document_relateditems.pt

diff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py
index 2e0ca22..bf10aaa 100644
--- a/plone/app/layout/globals/context.py
+++ b/plone/app/layout/globals/context.py
@@ -73,7 +73,7 @@ def view_url(self):
         view_url = self.object_url()
         portal_type = getattr(aq_base(self.context), 'portal_type', None)
         registry = getUtility(IRegistry)
-        use_view_action = registry.get('plone.types_view_action_in_listings', [])
+        use_view_action = registry.get('plone.types_use_view_action_in_listings', [])
         if portal_type in use_view_action:
             view_url = view_url + '/view'
         return view_url
diff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py
index b1f7213..0349364 100644
--- a/plone/app/layout/sitemap/sitemap.py
+++ b/plone/app/layout/sitemap/sitemap.py
@@ -48,7 +48,7 @@ def objects(self):
         query['portal_type'] = utils.getUserFriendlyTypes()
         registry = getUtility(IRegistry)
         typesUseViewActionInListings = frozenset(
-            registry.get('plone.types_view_action_in_listings', []))
+            registry.get('plone.types_use_view_action_in_listings', []))
 
         is_plone_site_root = IPloneSiteRoot.providedBy(self.context)
         if not is_plone_site_root:
diff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py
index 22ffad4..634ef90 100644
--- a/plone/app/layout/sitemap/tests/test_sitemap.py
+++ b/plone/app/layout/sitemap/tests/test_sitemap.py
@@ -210,7 +210,7 @@ def test_typesUseViewActionInListings(self):
         self.assertTrue('published' == self.wftool.getInfoFor(
             newsitem, 'review_state'))
         registry = getUtility(IRegistry)
-        registry['plone.types_view_action_in_listings'] = [u'News Item']
+        registry['plone.types_use_view_action_in_listings'] = [u'News Item']
 
         self.logout()
 
diff --git a/plone/app/layout/viewlets/document_relateditems.pt b/plone/app/layout/viewlets/document_relateditems.pt
index a39a349..afa6524 100644
--- a/plone/app/layout/viewlets/document_relateditems.pt
+++ b/plone/app/layout/viewlets/document_relateditems.pt
@@ -8,7 +8,7 @@
                           plone_layout nocall:context/@@plone_layout;
                           normalizeString nocall:plone_view/normalizeString;
                           context_state nocall:context/@@plone_context_state;
-                          use_view_action python:context.portal_registry.get('types_view_action_in_listings', []);">
+                          use_view_action python:context.portal_registry.get('types_use_view_action_in_listings', []);">
         <header i18n:translate="label_related_items">Related content</header>
         <ul>
           <li tal:repeat="item related">


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-19T20:21:05+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.layout/commit/5d65cba4362ed67a3e032cb4f87ecb7fd2ba41e9

Pull default_page value from registry instead of portal_properties

Files changed:
M plone/app/layout/navigation/tests/test_defaultpage.py

diff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py
index f5b6c0b..f52b371 100644
--- a/plone/app/layout/navigation/tests/test_defaultpage.py
+++ b/plone/app/layout/navigation/tests/test_defaultpage.py
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
+from zope.component import getUtility
 from plone.app.layout.testing import INTEGRATION_TESTING
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
+from plone.registry.interfaces import IRegistry
 import unittest
 
 
@@ -108,10 +110,10 @@ def test_getDefaultPage_step_3_2(self):
         self.assertEqual('test_rendering', getDefaultPage(self.folder))
 
     def test_getDefaultPage_step_4(self):
-        # 4. Else, look up the property default_page in site_properties for
-        #   magic ids and test these
-        sp = self.portal.portal_properties.site_properties
-        sp.manage_changeProperties(default_page=('d1',))
+        # 4. Else, look up the property default_page in the configuration
+        # registry for magic ids and test these
+        registry = getUtility(IRegistry)
+        registry['plone.default_page'] = [u'd1']
         self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
 
         from plone.app.layout.navigation.defaultpage import getDefaultPage


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2015-09-20T17:34:38+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/a5fbcb070162f3f9e655e2b5d717c6365fe9f748

Merge pull request #63 from plone/portal-properties-cleanup

Portal properties cleanup

Files changed:
M CHANGES.rst
M plone/app/layout/globals/context.py
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/patterns_settings.py
M plone/app/layout/navigation/root.py
M plone/app/layout/navigation/tests/test_defaultpage.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/viewlets/document_relateditems.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 713fa1b..5482094 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 2.5.15 (unreleased)
 -------------------
 
+- Pull mark_special_links, external_links_open_new_window, 
+  types_view_action_in_listings values
+  from configuration registry.
+  [esteele]
+
 - Respect @@site_controlpanel configuration to show publication date
   in document_byline (closes `#1037`_).
   [rodfersou]
diff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py
index bfa09b6..bf10aaa 100644
--- a/plone/app/layout/globals/context.py
+++ b/plone/app/layout/globals/context.py
@@ -14,6 +14,7 @@
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
+from plone.registry.interfaces import IRegistry
 
 from interfaces import IContextState
 
@@ -70,17 +71,11 @@ def view_url(self):
         called, instead of with /view appended.  We want to avoid that.
         """
         view_url = self.object_url()
-        portal_properties = getToolByName(
-            self.context, 'portal_properties', None)
-        if portal_properties is not None:
-            site_properties = getattr(
-                portal_properties, 'site_properties', None)
-            portal_type = getattr(aq_base(self.context), 'portal_type', None)
-            if site_properties is not None and portal_type is not None:
-                use_view_action = site_properties.getProperty(
-                    'typesUseViewActionInListings', ())
-                if portal_type in use_view_action:
-                    view_url = view_url + '/view'
+        portal_type = getattr(aq_base(self.context), 'portal_type', None)
+        registry = getUtility(IRegistry)
+        use_view_action = registry.get('plone.types_use_view_action_in_listings', [])
+        if portal_type in use_view_action:
+            view_url = view_url + '/view'
         return view_url
 
     @memoize
diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py
index 62746f7..0e6d567 100644
--- a/plone/app/layout/globals/layout.py
+++ b/plone/app/layout/globals/layout.py
@@ -1,6 +1,7 @@
 import json
 
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.controlpanel import ILinkSchema
 from Products.CMFPlone.interfaces.controlpanel import ISiteSchema
 from Products.Five.browser.metaconfigure import ViewMixinForTemplates
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
@@ -164,11 +165,8 @@ def bodyClass(self, template, view):
             # skip first section since we already have that...
             if len(contentPath) > 1:
                 registry = getUtility(IRegistry)
-                try:
-                    depth = registry[
-                        'plone.app.layout.globals.bodyClass.depth']
-                except KeyError:
-                    depth = 4
+                depth = registry.get(
+                    'plone.app.layout.globals.bodyClass.depth', 4)
                 if depth > 1:
                     classes = ['subsection-%s' % contentPath[1]]
                     for section in contentPath[2:depth]:
@@ -181,7 +179,8 @@ def bodyClass(self, template, view):
         else:
             body_classes.append('icons-off')
 
-        # permissions required. Useful to theme frontend and backend differently
+        # permissions required. Useful to theme frontend and backend
+        # differently
         permissions = []
         if not getattr(view, '__ac_permissions__', tuple()):
             permissions = ['none']
@@ -235,11 +234,13 @@ def bodyClass(self, template, view):
                 pass
 
         # class for markspeciallinks pattern
-        properties = getToolByName(context, "portal_properties")
-        props = getattr(properties, 'site_properties')
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ILinkSchema,
+                                         prefix="plone",
+                                         check=False)
 
-        msl = props.getProperty('mark_special_links', 'false')
-        elonw = props.getProperty('external_links_open_new_window', 'false')
+        msl = settings.mark_special_links
+        elonw = settings.external_links_open_new_window
         if msl == 'true' or elonw == 'true':
             body_classes.append('pat-markspeciallinks')
 
diff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py
index cd21a2c..04a6e91 100644
--- a/plone/app/layout/globals/patterns_settings.py
+++ b/plone/app/layout/globals/patterns_settings.py
@@ -39,15 +39,13 @@ def __call__(self):
         }
 
         # first, check for any adapters that need pattern data defined
-        adapters = getAdapters((self.context, self.request, None), IPatternsSettings)
+        adapters = getAdapters(
+            (self.context, self.request, None), IPatternsSettings)
         [result.update(x[1]()) for x in adapters]
 
         # Resources Registered UI patterns can override adapters
         registry = getUtility(IRegistry)
-        try:
-            pattern_options = registry['plone.patternoptions']
-        except (AttributeError, KeyError):
-            pattern_options = {}
+        pattern_options = registry.get('plone.patternoptions', {})
         for key, value in pattern_options.items():
             result['data-pat-' + key] = value
 
diff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py
index 28e27d2..eddc6e3 100644
--- a/plone/app/layout/navigation/root.py
+++ b/plone/app/layout/navigation/root.py
@@ -1,8 +1,11 @@
-from Acquisition import aq_base, aq_parent, aq_inner
-
+# -*- coding: utf-8 -*-
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from plone.app.layout.navigation.interfaces import INavigationRoot
-
 from Products.CMFCore.utils import getToolByName
+from zope.component import getUtility
+from plone.registry.interfaces import IRegistry
 
 
 def getNavigationRoot(context, relativeRoot=None):
@@ -26,9 +29,8 @@ def getNavigationRoot(context, relativeRoot=None):
 
     if relativeRoot is None:
         # fetch from portal_properties
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
-        relativeRoot = navtree_properties.getProperty('root', None)
+        registry = getUtility(IRegistry)
+        relativeRoot = registry.get('plone.root', None)
 
     # if relativeRoot has a meaningful value,
     if relativeRoot and relativeRoot != '/':
diff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py
index f5b6c0b..f52b371 100644
--- a/plone/app/layout/navigation/tests/test_defaultpage.py
+++ b/plone/app/layout/navigation/tests/test_defaultpage.py
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
+from zope.component import getUtility
 from plone.app.layout.testing import INTEGRATION_TESTING
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
+from plone.registry.interfaces import IRegistry
 import unittest
 
 
@@ -108,10 +110,10 @@ def test_getDefaultPage_step_3_2(self):
         self.assertEqual('test_rendering', getDefaultPage(self.folder))
 
     def test_getDefaultPage_step_4(self):
-        # 4. Else, look up the property default_page in site_properties for
-        #   magic ids and test these
-        sp = self.portal.portal_properties.site_properties
-        sp.manage_changeProperties(default_page=('d1',))
+        # 4. Else, look up the property default_page in the configuration
+        # registry for magic ids and test these
+        registry = getUtility(IRegistry)
+        registry['plone.default_page'] = [u'd1']
         self.folder.invokeFactory('Document', 'd1', title=u"Doc 1")
 
         from plone.app.layout.navigation.defaultpage import getDefaultPage
diff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py
index 144eaca..0349364 100644
--- a/plone/app/layout/sitemap/sitemap.py
+++ b/plone/app/layout/sitemap/sitemap.py
@@ -46,11 +46,9 @@ def objects(self):
         query = {}
         utils = getToolByName(self.context, 'plone_utils')
         query['portal_type'] = utils.getUserFriendlyTypes()
-        ptool = getToolByName(self, 'portal_properties')
-        siteProperties = getattr(ptool, 'site_properties')
+        registry = getUtility(IRegistry)
         typesUseViewActionInListings = frozenset(
-            siteProperties.getProperty('typesUseViewActionInListings', [])
-        )
+            registry.get('plone.types_use_view_action_in_listings', []))
 
         is_plone_site_root = IPloneSiteRoot.providedBy(self.context)
         if not is_plone_site_root:
diff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py
index 9b1da89..634ef90 100644
--- a/plone/app/layout/sitemap/tests/test_sitemap.py
+++ b/plone/app/layout/sitemap/tests/test_sitemap.py
@@ -209,8 +209,9 @@ def test_typesUseViewActionInListings(self):
         self.wftool.doActionFor(newsitem, 'publish')
         self.assertTrue('published' == self.wftool.getInfoFor(
             newsitem, 'review_state'))
-        self.site_properties.manage_changeProperties(
-            typesUseViewActionInListings=['News Item'])
+        registry = getUtility(IRegistry)
+        registry['plone.types_use_view_action_in_listings'] = [u'News Item']
+
         self.logout()
 
         xml = self.uncompress(self.sitemap())
diff --git a/plone/app/layout/viewlets/document_relateditems.pt b/plone/app/layout/viewlets/document_relateditems.pt
index c01dd27..afa6524 100644
--- a/plone/app/layout/viewlets/document_relateditems.pt
+++ b/plone/app/layout/viewlets/document_relateditems.pt
@@ -8,8 +8,7 @@
                           plone_layout nocall:context/@@plone_layout;
                           normalizeString nocall:plone_view/normalizeString;
                           context_state nocall:context/@@plone_context_state;
-                          site_properties context/portal_properties/site_properties;
-                          use_view_action site_properties/typesUseViewActionInListings|python:();">
+                          use_view_action python:context.portal_registry.get('types_use_view_action_in_listings', []);">
         <header i18n:translate="label_related_items">Related content</header>
         <ul>
           <li tal:repeat="item related">


