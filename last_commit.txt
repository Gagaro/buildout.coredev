Repository: Products.CMFPlone
Branch: refs/heads/master
Date: 2015-05-01T10:45:56-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/e37000a60551f94695f2510966754d7d73efed92

fix some legacy import wonkiness. Inserting multiple times, insert-before
  and remove problems addressed. closes #472, closes #467

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/exportimport/resourceregistry.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2331156..56a873b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 5.0b2 (unreleased)
 ------------------
 
+- fix some legacy import wonkiness. Inserting multiple times, insert-before
+  and remove fixed
+  [vangheem]
+
 - make live search and search form give consistent results
   [vangheem]
 
diff --git a/Products/CMFPlone/resources/exportimport/resourceregistry.py b/Products/CMFPlone/resources/exportimport/resourceregistry.py
index 9170e00..a4cdec3 100644
--- a/Products/CMFPlone/resources/exportimport/resourceregistry.py
+++ b/Products/CMFPlone/resources/exportimport/resourceregistry.py
@@ -62,13 +62,15 @@ def _importNode(self, node):
 
             data = {}
             add = True
-            position = None
+            remove = False
+            position = res_id = None
             for key, value in child.attributes.items():
                 key = str(key)
                 if key == 'update':
                     continue
-                if key == 'remove':
+                if key == 'remove' and value in (True, 'true', 'True'):
                     add = False
+                    remove = True
                     continue
                 if key in ('position-before', 'insert-before'):
                     position = ('before', queryUtility(
@@ -109,6 +111,11 @@ def _importNode(self, node):
                     proxy.css = [data['url']]
                 if 'enabled' in data and not data['enabled']:
                     continue
+                if res_id in legacy.resources:
+                    # remove here so we can possible re-insert into whatever
+                    # position is preferred below and then we do not
+                    # re-add same resource multiple times
+                    legacy.resources.remove(res_id)
                 if position is None:
                     position = ('',)
                 if position[0] == '*':
@@ -129,7 +136,18 @@ def _importNode(self, node):
                             res_id)
                     else:
                         legacy.resources.append(res_id)
-                if 'plone.resources.last_legacy_import' in self.registry.records:  # noqa
-                    self.registry.records[
-                        'plone.resources.last_legacy_import'
-                    ].value = datetime.now()
+
+            if remove:
+                if res_id in legacy.resources:
+                    legacy.resources.remove(res_id)
+                if res_id in resources:
+                    del resources[res_id]
+
+            # make sure to trigger committing to db
+            # not sure this is necessary...
+            legacy.resources = legacy.resources
+
+        if 'plone.resources.last_legacy_import' in self.registry.records:  # noqa
+            self.registry.records[
+                'plone.resources.last_legacy_import'
+            ].value = datetime.now()
\ No newline at end of file
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index acfebb8..366a98f 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -9,7 +9,8 @@
 from Products.CMFPlone.interfaces import IResourceRegistry
 from plone.subrequest import subrequest
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
-from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
+from Products.CMFPlone.resources.exportimport.resourceregistry import (
+    ResourceRegistryNodeAdapter)
 from plone.resource.interfaces import IResourceDirectory
 
 
@@ -99,40 +100,112 @@ class TestResourceNodeImporter(PloneTestCase.PloneTestCase):
     """Test features of registry node importer"""
     _setup_fixture = 0  # No default fixture
 
-    def test_resource_blacklist(self):
-        # Ensure that blacklisted resources aren't imported
+    def _get_importer(self, blacklist=set([])):
         reg = getToolByName(self.portal, 'portal_javascripts')
         importer = ResourceRegistryNodeAdapter(reg, SetupEnviron())
         importer.resource_type = 'javascript'
         importer.registry = getUtility(IRegistry)
-        importer.resource_blacklist = set(('++resource++/bad_resource.js',))
-        dom = parseString("""
+        importer.resource_blacklist = blacklist
+        return importer
+
+    def _get_resources(self):
+        return getUtility(IRegistry).collectionOfInterface(
+            IResourceRegistry, prefix="plone.resources"
+        )
+
+    def _get_legacy_bundle(self):
+        return getUtility(IRegistry).collectionOfInterface(
+            IBundleRegistry, prefix="plone.bundles", check=False)['plone-legacy']
+
+    def _get_resource_dom(self, name='++resource++/resource.js', remove=False):
+        return parseString("""
             <object>
-                <javascript id="++resource++/bad_resource.js" enabled="true" />
+                <javascript id="%s" remove="%s" enabled="true" />
             </object>
-            """)
+            """ % (name, str(remove)))
+
+    def test_resource_blacklist(self):
+        # Ensure that blacklisted resources aren't imported
+        importer = self._get_importer(set(('++resource++/bad_resource.js',)))
+        dom = self._get_resource_dom("++resource++/bad_resource.js")
         importer._importNode(dom.documentElement)
-        resources = importer.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources"
-        )
-        js_files = [x.js for x in resources.values()]
+        js_files = [x.js for x in self._get_resources().values()]
         self.assertTrue("++resource++/bad_resource.js" not in js_files)
+        self.assertTrue(
+            "resource-bad_resource-js" not in self._get_legacy_bundle().resources)
 
     def test_resource_no_blacklist(self):
-        # Ensure that blacklisted resources aren't imported
-        reg = getToolByName(self.portal, 'portal_javascripts')
-        importer = ResourceRegistryNodeAdapter(reg, SetupEnviron())
-        importer.resource_type = 'javascript'
-        importer.registry = getUtility(IRegistry)
-        importer.resource_blacklist = set()
-        dom = parseString("""
+        importer = self._get_importer()
+        dom = self._get_resource_dom()
+        importer._importNode(dom.documentElement)
+        js_files = [x.js for x in self._get_resources().values()]
+        self.assertTrue("++resource++/resource.js" in js_files)
+        self.assertTrue("resource-resource-js" in self._get_legacy_bundle().resources)
+
+    def test_insert_again(self):
+        importer = self._get_importer()
+        dom = self._get_resource_dom()
+        num_resources = self._get_legacy_bundle().resources[:]
+        importer._importNode(dom.documentElement)
+        self.assertEquals(len(num_resources) + 1,
+                          len(self._get_legacy_bundle().resources))
+        importer._importNode(dom.documentElement)
+        self.assertEquals(len(num_resources) + 1,
+                          len(self._get_legacy_bundle().resources))
+
+    def test_remove(self):
+        importer = self._get_importer()
+
+        # inserter it
+        dom = self._get_resource_dom()
+        importer._importNode(dom.documentElement)
+
+        resources = self._get_legacy_bundle().resources[:]
+        js_files = [x.js for x in self._get_resources().values()]
+
+        # import again
+        dom = self._get_resource_dom(remove=True)
+        importer._importNode(dom.documentElement)
+
+        self.assertEquals(len(resources) - 1,
+                          len(self._get_legacy_bundle().resources))
+        self.assertEquals(len(js_files) - 1,
+                          len([x.js for x in self._get_resources().values()]))
+
+    def test_insert_after(self):
+        importer = self._get_importer()
+        one = self._get_resource_dom('one')
+        two = self._get_resource_dom('two')
+        three = self._get_resource_dom('three')
+        importer._importNode(one.documentElement)
+        importer._importNode(two.documentElement)
+        importer._importNode(three.documentElement)
+
+        # now, insert
+        foobar = parseString("""
             <object>
-                <javascript id="++resource++/bad_resource.js" enabled="true" />
+                <javascript id="foobar.js" insert-after="one" enabled="true" />
             </object>
             """)
-        importer._importNode(dom.documentElement)
-        resources = importer.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources"
-        )
-        js_files = [x.js for x in resources.values()]
-        self.assertTrue("++resource++/bad_resource.js" in js_files)
+        importer._importNode(foobar.documentElement)
+        resources = self._get_legacy_bundle().resources
+        self.assertTrue(resources.index('one') + 1, resources.index('foobar-js'))
+
+    def test_insert_before(self):
+        importer = self._get_importer()
+        one = self._get_resource_dom('one')
+        two = self._get_resource_dom('two')
+        three = self._get_resource_dom('three')
+        importer._importNode(one.documentElement)
+        importer._importNode(two.documentElement)
+        importer._importNode(three.documentElement)
+
+        # now, insert
+        foobar = parseString("""
+            <object>
+                <javascript id="foobar.js" insert-before="one" enabled="true" />
+            </object>
+            """)
+        importer._importNode(foobar.documentElement)
+        resources = self._get_legacy_bundle().resources
+        self.assertTrue(resources.index('one') - 1, resources.index('foobar-js'))


