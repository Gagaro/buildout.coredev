Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-29T11:27:36-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/166d9ea7792ec245010a1fa28c9fd795c2c1703a

Revert "Fixed theme overrides"

Files changed:
M CHANGES.rst
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/resources/controlpanel.css
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a35e5c..dfff853 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,13 +1,6 @@
 Changelog
 =========
 
-1.2.7 (2015-05-28)
-------------------
-
-- Now shows a warning when a built-in theme is being overriden.
-  TTW themes can no longer be overriden
-  [obct537]
-
 1.2.6 (unreleased)
 ------------------
 
diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt
index 7da2314..f9b8f12 100644
--- a/src/plone/app/theming/browser/controlpanel.pt
+++ b/src/plone/app/theming/browser/controlpanel.pt
@@ -144,7 +144,6 @@
 
                     <span class="themeEntryTitle">
                         <span tal:replace="theme/title">Title</span>
-                        <span class="warning" tal:condition="theme/override">(this theme overrides a filesystem theme)</span>
                         <span
                             tal:condition="theme/selected"
                             class="themeActive"
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 6546558..75796cf 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -356,17 +356,6 @@ def update(self):
                 return True
 
             else:
-
-                if any(x.__name__ == title for x in getZODBThemes()):
-                    self.errors['title'] = _(u"Duplicate title")
-
-                    IStatusMessage(self.request).add(
-                        _(u"This title is already in use"),
-                        'error'
-                    )
-
-                    return True
-
                 name = createThemeFromTemplate(title, description, baseOn)
                 self._setup()
 
@@ -419,24 +408,10 @@ def themeList(self):
 
         portalUrl = getToolByName(self.context, 'portal_url')()
 
-        complete = [];
-
         for theme in self.availableThemes:
             if theme.__name__ == TEMPLATE_THEME:
                 continue
 
-            #We've overwritten this theme, skip it
-            if complete.__contains__(theme.__name__):
-                continue
-
-            override = False
-
-            #Is there more than one theme with the same name?
-            if len( filter(lambda x: x.__name__ == theme.__name__, self.availableThemes) ) > 1:
-                #Then we make sure we're using the TTW version, not the filesystem version.
-                theme = filter(lambda x: x.__name__ == theme.__name__, self.zodbThemes)[0]
-                override = True
-
             previewUrl = "++resource++plone.app.theming/defaultPreview.png"
             if theme.preview:
                 previewUrl = "++theme++{0:s}/{1:s}".format(
@@ -448,14 +423,11 @@ def themeList(self):
                 'name': theme.__name__,
                 'title': theme.title,
                 'description': theme.description,
-                'override': override,
                 'editable': theme.__name__ in zodbNames,
                 'preview': "{0}/{1}".format(portalUrl, previewUrl),
                 'selected': theme.__name__ == self.selectedTheme,
             })
 
-            complete.append(theme.__name__)
-
         themes.sort(key=lambda x: x['title'])
 
         return themes
diff --git a/src/plone/app/theming/browser/resources/controlpanel.css b/src/plone/app/theming/browser/resources/controlpanel.css
index bf45d00..5c23aff 100644
--- a/src/plone/app/theming/browser/resources/controlpanel.css
+++ b/src/plone/app/theming/browser/resources/controlpanel.css
@@ -103,12 +103,6 @@ a.plone-btn {
     font-weight: normal;
 }
 
-.warning {
-    color: red;
-    display: block;
-    font-size: smaller;
-}
-
 .plone-btn-group {
     margin: 10px;
 }
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 9b7c376..86bc452 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -21,10 +21,10 @@
 from plone.resource.interfaces import IResourceDirectory
 from plone.resource.manifest import MANIFEST_FILENAME
 from plone.resource.manifest import extractManifestFromZipFile
+from plone.resource.manifest import getAllResources
 from plone.resource.manifest import getManifest
 from plone.resource.manifest import getZODBResources
 from plone.resource.utils import cloneResourceDirectory
-from plone.resource.utils import iterDirectoriesOfType
 from plone.resource.utils import queryResourceDirectory
 from plone.subrequest import subrequest
 from urlparse import urlsplit
@@ -333,37 +333,12 @@ def getAvailableThemes():
     """
     resources = getAllResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)
     themes = []
-    for theme in resources:
-        themes.append(getTheme(theme['name'], theme))
+    for name, manifest in resources.items():
+        themes.append(getTheme(name, manifest))
 
     themes.sort(key=lambda x: safe_unicode(x.title))
     return themes
 
-def getAllResources(format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME):
-
-    resources = []
-
-    for directory in iterDirectoriesOfType(format.resourceType, filter_duplicates=False):
-
-        if filter is not None and not filter(directory):
-            continue
-
-        name = directory.__name__
-
-        if directory.isFile(manifestFilename):
-
-            manifest = directory.openFile(manifestFilename)
-            try:
-                theme = getManifest(manifest, format, defaults)
-                theme['name'] = name
-                resources.append(theme)
-            except:
-                LOGGER.exception("Unable to read manifest for theme directory %s", name)
-            finally:
-                manifest.close()
-
-    return resources
-
 
 def getThemeFromResourceDirectory(resourceDirectory):
     """Return a Theme object from a resource directory
@@ -530,6 +505,11 @@ def createThemeFromTemplate(title, description, baseOn='template'):
         themeName = themeName.encode('utf-8')
 
     resources = getOrCreatePersistentResourceDirectory()
+    if themeName in resources:
+        idx = 1
+        while '-'.join((themeName, idx)) in resources:
+            idx += 1
+        themeName = '-'.join((themeName, idx))
 
     resources.makeDirectory(themeName)
     target = resources[themeName]


Repository: plone.app.theming
Branch: refs/heads/master
Date: 2015-05-29T11:27:59-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/ae6308b7819e3bfa424d916c3b1de092a1430e5d

Merge pull request #56 from plone/revert-54-overrides

Revert "Fixed theme overrides"

Files changed:
M CHANGES.rst
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/resources/controlpanel.css
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a35e5c..dfff853 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,13 +1,6 @@
 Changelog
 =========
 
-1.2.7 (2015-05-28)
-------------------
-
-- Now shows a warning when a built-in theme is being overriden.
-  TTW themes can no longer be overriden
-  [obct537]
-
 1.2.6 (unreleased)
 ------------------
 
diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt
index 7da2314..f9b8f12 100644
--- a/src/plone/app/theming/browser/controlpanel.pt
+++ b/src/plone/app/theming/browser/controlpanel.pt
@@ -144,7 +144,6 @@
 
                     <span class="themeEntryTitle">
                         <span tal:replace="theme/title">Title</span>
-                        <span class="warning" tal:condition="theme/override">(this theme overrides a filesystem theme)</span>
                         <span
                             tal:condition="theme/selected"
                             class="themeActive"
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index 6546558..75796cf 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -356,17 +356,6 @@ def update(self):
                 return True
 
             else:
-
-                if any(x.__name__ == title for x in getZODBThemes()):
-                    self.errors['title'] = _(u"Duplicate title")
-
-                    IStatusMessage(self.request).add(
-                        _(u"This title is already in use"),
-                        'error'
-                    )
-
-                    return True
-
                 name = createThemeFromTemplate(title, description, baseOn)
                 self._setup()
 
@@ -419,24 +408,10 @@ def themeList(self):
 
         portalUrl = getToolByName(self.context, 'portal_url')()
 
-        complete = [];
-
         for theme in self.availableThemes:
             if theme.__name__ == TEMPLATE_THEME:
                 continue
 
-            #We've overwritten this theme, skip it
-            if complete.__contains__(theme.__name__):
-                continue
-
-            override = False
-
-            #Is there more than one theme with the same name?
-            if len( filter(lambda x: x.__name__ == theme.__name__, self.availableThemes) ) > 1:
-                #Then we make sure we're using the TTW version, not the filesystem version.
-                theme = filter(lambda x: x.__name__ == theme.__name__, self.zodbThemes)[0]
-                override = True
-
             previewUrl = "++resource++plone.app.theming/defaultPreview.png"
             if theme.preview:
                 previewUrl = "++theme++{0:s}/{1:s}".format(
@@ -448,14 +423,11 @@ def themeList(self):
                 'name': theme.__name__,
                 'title': theme.title,
                 'description': theme.description,
-                'override': override,
                 'editable': theme.__name__ in zodbNames,
                 'preview': "{0}/{1}".format(portalUrl, previewUrl),
                 'selected': theme.__name__ == self.selectedTheme,
             })
 
-            complete.append(theme.__name__)
-
         themes.sort(key=lambda x: x['title'])
 
         return themes
diff --git a/src/plone/app/theming/browser/resources/controlpanel.css b/src/plone/app/theming/browser/resources/controlpanel.css
index bf45d00..5c23aff 100644
--- a/src/plone/app/theming/browser/resources/controlpanel.css
+++ b/src/plone/app/theming/browser/resources/controlpanel.css
@@ -103,12 +103,6 @@ a.plone-btn {
     font-weight: normal;
 }
 
-.warning {
-    color: red;
-    display: block;
-    font-size: smaller;
-}
-
 .plone-btn-group {
     margin: 10px;
 }
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index 9b7c376..86bc452 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -21,10 +21,10 @@
 from plone.resource.interfaces import IResourceDirectory
 from plone.resource.manifest import MANIFEST_FILENAME
 from plone.resource.manifest import extractManifestFromZipFile
+from plone.resource.manifest import getAllResources
 from plone.resource.manifest import getManifest
 from plone.resource.manifest import getZODBResources
 from plone.resource.utils import cloneResourceDirectory
-from plone.resource.utils import iterDirectoriesOfType
 from plone.resource.utils import queryResourceDirectory
 from plone.subrequest import subrequest
 from urlparse import urlsplit
@@ -333,37 +333,12 @@ def getAvailableThemes():
     """
     resources = getAllResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)
     themes = []
-    for theme in resources:
-        themes.append(getTheme(theme['name'], theme))
+    for name, manifest in resources.items():
+        themes.append(getTheme(name, manifest))
 
     themes.sort(key=lambda x: safe_unicode(x.title))
     return themes
 
-def getAllResources(format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME):
-
-    resources = []
-
-    for directory in iterDirectoriesOfType(format.resourceType, filter_duplicates=False):
-
-        if filter is not None and not filter(directory):
-            continue
-
-        name = directory.__name__
-
-        if directory.isFile(manifestFilename):
-
-            manifest = directory.openFile(manifestFilename)
-            try:
-                theme = getManifest(manifest, format, defaults)
-                theme['name'] = name
-                resources.append(theme)
-            except:
-                LOGGER.exception("Unable to read manifest for theme directory %s", name)
-            finally:
-                manifest.close()
-
-    return resources
-
 
 def getThemeFromResourceDirectory(resourceDirectory):
     """Return a Theme object from a resource directory
@@ -530,6 +505,11 @@ def createThemeFromTemplate(title, description, baseOn='template'):
         themeName = themeName.encode('utf-8')
 
     resources = getOrCreatePersistentResourceDirectory()
+    if themeName in resources:
+        idx = 1
+        while '-'.join((themeName, idx)) in resources:
+            idx += 1
+        themeName = '-'.join((themeName, idx))
 
     resources.makeDirectory(themeName)
     target = resources[themeName]


