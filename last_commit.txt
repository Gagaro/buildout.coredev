Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2015-09-19T23:55:59+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.portlets/commit/f34b46da50ff67fef083b3c0bd4e18bdc55d3517

Remove currentFolderOnlyInNavtree in favor of a portlet-local setting

Files changed:
M plone/app/portlets/portlets/navigation.py

diff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py
index b40452f..adcedcc 100644
--- a/plone/app/portlets/portlets/navigation.py
+++ b/plone/app/portlets/portlets/navigation.py
@@ -244,8 +244,7 @@ def createNavTree(self):
 
     @memoize
     def getNavRootPath(self):
-        currentFolderOnly = self.data.currentFolderOnly or \
-                            self.properties.getProperty('currentFolderOnlyInNavtree', False)
+        currentFolderOnly = self.data.currentFolderOnly
         topLevel = self.data.topLevel or self.properties.getProperty('topLevel', 0)
         return getRootPath(self.context, currentFolderOnly, topLevel, self.data.root_uid)
 
@@ -394,8 +393,7 @@ def __init__(self, context, portlet):
         self.bottomLevel = portlet.bottomLevel or \
                            navtree_properties.getProperty('bottomLevel', 0)
 
-        currentFolderOnly = portlet.currentFolderOnly or \
-            navtree_properties.getProperty('currentFolderOnlyInNavtree', False)
+        currentFolderOnly = portlet.currentFolderOnly
 
         topLevel = portlet.topLevel or navtree_properties.getProperty('topLevel', 0)
         self.rootPath = getRootPath(context, currentFolderOnly, topLevel, portlet.root_uid)


Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2015-09-19T23:55:59+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.portlets/commit/d897571e34b67e20087abd956185d3d321fb1281

Remove global setting for navigation tree's top_level, current_folder_only

Files changed:
M CHANGES.rst
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/tests/test_navigation_portlet.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e4c6539..a56aaa5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 3.1.1 (unreleased)
 ------------------
 
+- Remove global settings for navigation tree's top_level,
+  current_folder_only
+  [esteele]
+
 - Prevent values lower than 1 in number of items.
   [pbauer]
 
diff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py
index adcedcc..f6b3d01 100644
--- a/plone/app/portlets/portlets/navigation.py
+++ b/plone/app/portlets/portlets/navigation.py
@@ -168,7 +168,7 @@ def available(self):
         return len(tree['children']) > 0
 
     def include_top(self):
-        return getattr(self.data, 'includeTop', self.properties.includeTop)
+        return getattr(self.data, 'includeTop', True)
 
     def navigation_root(self):
         return self.getNavRoot()
@@ -231,7 +231,7 @@ def root_is_portal(self):
     def createNavTree(self):
         data = self.getNavTree()
 
-        bottomLevel = self.data.bottomLevel or self.properties.getProperty('bottomLevel', 0)
+        bottomLevel = self.data.bottomLevel or 0
 
         if bottomLevel < 0:
             # Special case where navigation tree depth is negative
@@ -244,9 +244,10 @@ def createNavTree(self):
 
     @memoize
     def getNavRootPath(self):
-        currentFolderOnly = self.data.currentFolderOnly
-        topLevel = self.data.topLevel or self.properties.getProperty('topLevel', 0)
-        return getRootPath(self.context, currentFolderOnly, topLevel, self.data.root_uid)
+        return getRootPath(self.context,
+                           self.data.currentFolderOnly,
+                           self.data.topLevel,
+                           self.data.root_uid)
 
     @memoize
     def getNavRoot(self, _marker=None):
@@ -345,7 +346,7 @@ def __init__(self, context, portlet):
         else:
             query['path'] = {'query': currentPath, 'navtree': 1}
 
-        topLevel = portlet.topLevel or navtree_properties.getProperty('topLevel', 0)
+        topLevel = portlet.topLevel
         if topLevel and topLevel > 0:
             query['path']['navtree_start'] = topLevel + 1
 
@@ -386,17 +387,14 @@ class NavtreeStrategy(SitemapNavtreeStrategy):
 
     def __init__(self, context, portlet):
         SitemapNavtreeStrategy.__init__(self, context, portlet)
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
 
         # XXX: We can't do this with a 'depth' query to EPI...
-        self.bottomLevel = portlet.bottomLevel or \
-                           navtree_properties.getProperty('bottomLevel', 0)
-
-        currentFolderOnly = portlet.currentFolderOnly
+        self.bottomLevel = portlet.bottomLevel or 0
 
-        topLevel = portlet.topLevel or navtree_properties.getProperty('topLevel', 0)
-        self.rootPath = getRootPath(context, currentFolderOnly, topLevel, portlet.root_uid)
+        self.rootPath = getRootPath(context,
+                                    portlet.currentFolderOnly,
+                                    portlet.topLevel,
+                                    portlet.root_uid)
 
     def subtreeFilter(self, node):
         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)
diff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py
index 4068ffb..325cf5d 100644
--- a/plone/app/portlets/tests/test_navigation_portlet.py
+++ b/plone/app/portlets/tests/test_navigation_portlet.py
@@ -166,8 +166,6 @@ def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):
         # property are not included
         self.portal.folder2.exclude_from_nav = True
         self.portal.folder2.reindexObject()
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(showAllParents=True)
         view = self.renderer(self.portal.folder2.doc21)
         tree = view.getNavTree()
         self.assertTrue(tree)


Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2015-09-19T23:55:59+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/f83368760aa0cf57b8375707f230b8c74dd694d2

parentMetaTypesNotToQuery -&gt; parent_types_not_to_query

Files changed:
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/tests/test_navigation_portlet.py

diff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py
index f6b3d01..f5dab2e 100644
--- a/plone/app/portlets/portlets/navigation.py
+++ b/plone/app/portlets/portlets/navigation.py
@@ -146,7 +146,6 @@ class Renderer(base.Renderer):
     def __init__(self, context, request, view, manager, data):
         base.Renderer.__init__(self, context, request, view, manager, data)
 
-        self.properties = getToolByName(context, 'portal_properties').navtree_properties
         self.urltool = getToolByName(context, 'portal_url')
 
     def title(self):
@@ -309,7 +308,7 @@ class EditForm(base.EditForm):
 
 
 class QueryBuilder(object):
-    """Build a navtree query based on the settings in navtree_properties
+    """Build a navtree query based on the settings in INavigationSchema
     and those set on the portlet.
     """
     implements(INavigationQueryBuilder)
diff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py
index 325cf5d..1d77491 100644
--- a/plone/app/portlets/tests/test_navigation_portlet.py
+++ b/plone/app/portlets/tests/test_navigation_portlet.py
@@ -219,8 +219,8 @@ def testNavTreeMarksParentMetaTypesNotToQuery(self):
         view = self.renderer(self.portal.folder2.file21)
         tree = view.getNavTree()
         self.assertEqual(tree['children'][-1]['show_children'], True)
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
+        registry = self.portal.portal_registry
+        registry['plone.parent_types_not_to_query'] = [u'Folder']
         view = self.renderer(self.portal.folder2.file21)
         tree = view.getNavTree()
         self.assertEqual(tree['children'][-1]['show_children'], False)
@@ -249,7 +249,7 @@ def testCreateNavTreeWithLink(self):
                 self.assertTrue(child['useRemoteUrl'])
 
     def testNonStructuralFolderHidesChildren(self):
-        # Make sure NonStructuralFolders act as if parentMetaTypesNotToQuery
+        # Make sure NonStructuralFolders act as if parent_types_not_to_query
         # is set.
         f = dummy.NonStructuralFolder('ns_folder')
         self.portal.folder1._setObject('ns_folder', f)
@@ -460,8 +460,8 @@ def testStateFiltering(self):
         self.assertEqual(len(tree['children']), 2)
 
     def testPrunedRootNode(self):
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
+        registry = self.portal.portal_registry
+        registry['plone.parent_types_not_to_query'] = [u'Folder']
 
         assignment = navigation.Assignment(topLevel=0)
         assignment.topLevel = 1
@@ -471,8 +471,8 @@ def testPrunedRootNode(self):
         self.assertEqual(len(tree['children']), 0)
 
     def testPrunedRootNodeShowsAllParents(self):
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
+        registry = self.portal.portal_registry
+        registry['plone.parent_types_not_to_query'] = [u'Folder']
 
         assignment = navigation.Assignment(topLevel=0)
         assignment.topLevel = 1


Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2015-09-20T00:18:38+02:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.app.portlets/commit/15a006dac90e86139699ccd8cba7399ef4998c20

Readd changes from a bad merge.

Files changed:
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_navigation_portlet.py

diff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py
index 7186291..0743190 100644
--- a/plone/app/portlets/tests/test_actions_portlet.py
+++ b/plone/app/portlets/tests/test_actions_portlet.py
@@ -130,7 +130,7 @@ def test_render_woicon(self):
         self.failUnless(first['icon'] is None, "We should not have an icon")
         return
 
-    def test_muptiple_portlets(self):
+    def test_multiple_portlets(self):
         """This test ensures that we can add more than one action portlet on
         the same page with different action categories and show_icons option
         and those portlets will work as they are intended to work.
diff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py
index 1d77491..21ac3bb 100644
--- a/plone/app/portlets/tests/test_navigation_portlet.py
+++ b/plone/app/portlets/tests/test_navigation_portlet.py
@@ -176,33 +176,6 @@ def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):
                 break
         self.assertTrue(found)
 
-    def testNavTreeExcludesItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'])
-        view = self.renderer(self.portal.folder1.doc11)
-        tree = view.getNavTree()
-        self.assertTrue(tree)
-        for c in tree['children']:
-            if c['item'].getPath() == '/plone/folder2':
-                self.fail()
-
-    def testShowAllParentsOverridesNavTreeExcludesItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'], showAllParents=True)
-        view = self.renderer(self.portal.folder2.doc21)
-        tree = view.getNavTree()
-        self.assertTrue(tree)
-        found = False
-        for c in tree['children']:
-            if c['item'].getPath() == '/plone/folder2':
-                found = True
-                break
-        self.assertTrue(found)
-
     def testNavTreeExcludesDefaultPage(self):
         # Make sure that items which are the default page are excluded
         self.portal.folder2.setDefaultPage('doc21')
@@ -382,8 +355,8 @@ def testRootDoesNotExist(self):
         self.assertEqual(len(tree['children']), 6)
 
     def testAboveRoot(self):
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/folder2')
+        registry = getUtility(IRegistry)
+        registry['plone.root'] = u'/folder2'
         view = self.renderer(self.portal)
         tree = view.getNavTree()
         self.assertTrue(tree)


Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2015-09-20T17:34:19+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/99767f921390365523bdf792964605233c398deb

Merge pull request #58 from plone/portal-properties-cleanup

Portal properties cleanup

Files changed:
M CHANGES.rst
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_navigation_portlet.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e4c6539..a56aaa5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,10 @@ Changelog
 3.1.1 (unreleased)
 ------------------
 
+- Remove global settings for navigation tree's top_level,
+  current_folder_only
+  [esteele]
+
 - Prevent values lower than 1 in number of items.
   [pbauer]
 
diff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py
index b40452f..f5dab2e 100644
--- a/plone/app/portlets/portlets/navigation.py
+++ b/plone/app/portlets/portlets/navigation.py
@@ -146,7 +146,6 @@ class Renderer(base.Renderer):
     def __init__(self, context, request, view, manager, data):
         base.Renderer.__init__(self, context, request, view, manager, data)
 
-        self.properties = getToolByName(context, 'portal_properties').navtree_properties
         self.urltool = getToolByName(context, 'portal_url')
 
     def title(self):
@@ -168,7 +167,7 @@ def available(self):
         return len(tree['children']) > 0
 
     def include_top(self):
-        return getattr(self.data, 'includeTop', self.properties.includeTop)
+        return getattr(self.data, 'includeTop', True)
 
     def navigation_root(self):
         return self.getNavRoot()
@@ -231,7 +230,7 @@ def root_is_portal(self):
     def createNavTree(self):
         data = self.getNavTree()
 
-        bottomLevel = self.data.bottomLevel or self.properties.getProperty('bottomLevel', 0)
+        bottomLevel = self.data.bottomLevel or 0
 
         if bottomLevel < 0:
             # Special case where navigation tree depth is negative
@@ -244,10 +243,10 @@ def createNavTree(self):
 
     @memoize
     def getNavRootPath(self):
-        currentFolderOnly = self.data.currentFolderOnly or \
-                            self.properties.getProperty('currentFolderOnlyInNavtree', False)
-        topLevel = self.data.topLevel or self.properties.getProperty('topLevel', 0)
-        return getRootPath(self.context, currentFolderOnly, topLevel, self.data.root_uid)
+        return getRootPath(self.context,
+                           self.data.currentFolderOnly,
+                           self.data.topLevel,
+                           self.data.root_uid)
 
     @memoize
     def getNavRoot(self, _marker=None):
@@ -309,7 +308,7 @@ class EditForm(base.EditForm):
 
 
 class QueryBuilder(object):
-    """Build a navtree query based on the settings in navtree_properties
+    """Build a navtree query based on the settings in INavigationSchema
     and those set on the portlet.
     """
     implements(INavigationQueryBuilder)
@@ -346,7 +345,7 @@ def __init__(self, context, portlet):
         else:
             query['path'] = {'query': currentPath, 'navtree': 1}
 
-        topLevel = portlet.topLevel or navtree_properties.getProperty('topLevel', 0)
+        topLevel = portlet.topLevel
         if topLevel and topLevel > 0:
             query['path']['navtree_start'] = topLevel + 1
 
@@ -387,18 +386,14 @@ class NavtreeStrategy(SitemapNavtreeStrategy):
 
     def __init__(self, context, portlet):
         SitemapNavtreeStrategy.__init__(self, context, portlet)
-        portal_properties = getToolByName(context, 'portal_properties')
-        navtree_properties = getattr(portal_properties, 'navtree_properties')
 
         # XXX: We can't do this with a 'depth' query to EPI...
-        self.bottomLevel = portlet.bottomLevel or \
-                           navtree_properties.getProperty('bottomLevel', 0)
-
-        currentFolderOnly = portlet.currentFolderOnly or \
-            navtree_properties.getProperty('currentFolderOnlyInNavtree', False)
+        self.bottomLevel = portlet.bottomLevel or 0
 
-        topLevel = portlet.topLevel or navtree_properties.getProperty('topLevel', 0)
-        self.rootPath = getRootPath(context, currentFolderOnly, topLevel, portlet.root_uid)
+        self.rootPath = getRootPath(context,
+                                    portlet.currentFolderOnly,
+                                    portlet.topLevel,
+                                    portlet.root_uid)
 
     def subtreeFilter(self, node):
         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)
diff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py
index 7186291..0743190 100644
--- a/plone/app/portlets/tests/test_actions_portlet.py
+++ b/plone/app/portlets/tests/test_actions_portlet.py
@@ -130,7 +130,7 @@ def test_render_woicon(self):
         self.failUnless(first['icon'] is None, "We should not have an icon")
         return
 
-    def test_muptiple_portlets(self):
+    def test_multiple_portlets(self):
         """This test ensures that we can add more than one action portlet on
         the same page with different action categories and show_icons option
         and those portlets will work as they are intended to work.
diff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py
index 4068ffb..21ac3bb 100644
--- a/plone/app/portlets/tests/test_navigation_portlet.py
+++ b/plone/app/portlets/tests/test_navigation_portlet.py
@@ -166,35 +166,6 @@ def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):
         # property are not included
         self.portal.folder2.exclude_from_nav = True
         self.portal.folder2.reindexObject()
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(showAllParents=True)
-        view = self.renderer(self.portal.folder2.doc21)
-        tree = view.getNavTree()
-        self.assertTrue(tree)
-        found = False
-        for c in tree['children']:
-            if c['item'].getPath() == '/plone/folder2':
-                found = True
-                break
-        self.assertTrue(found)
-
-    def testNavTreeExcludesItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'])
-        view = self.renderer(self.portal.folder1.doc11)
-        tree = view.getNavTree()
-        self.assertTrue(tree)
-        for c in tree['children']:
-            if c['item'].getPath() == '/plone/folder2':
-                self.fail()
-
-    def testShowAllParentsOverridesNavTreeExcludesItemsInIdsNotToList(self):
-        # Make sure that items whose ids are in the idsNotToList navTree
-        # property are not included
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(idsNotToList=['folder2'], showAllParents=True)
         view = self.renderer(self.portal.folder2.doc21)
         tree = view.getNavTree()
         self.assertTrue(tree)
@@ -221,8 +192,8 @@ def testNavTreeMarksParentMetaTypesNotToQuery(self):
         view = self.renderer(self.portal.folder2.file21)
         tree = view.getNavTree()
         self.assertEqual(tree['children'][-1]['show_children'], True)
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
+        registry = self.portal.portal_registry
+        registry['plone.parent_types_not_to_query'] = [u'Folder']
         view = self.renderer(self.portal.folder2.file21)
         tree = view.getNavTree()
         self.assertEqual(tree['children'][-1]['show_children'], False)
@@ -251,7 +222,7 @@ def testCreateNavTreeWithLink(self):
                 self.assertTrue(child['useRemoteUrl'])
 
     def testNonStructuralFolderHidesChildren(self):
-        # Make sure NonStructuralFolders act as if parentMetaTypesNotToQuery
+        # Make sure NonStructuralFolders act as if parent_types_not_to_query
         # is set.
         f = dummy.NonStructuralFolder('ns_folder')
         self.portal.folder1._setObject('ns_folder', f)
@@ -384,8 +355,8 @@ def testRootDoesNotExist(self):
         self.assertEqual(len(tree['children']), 6)
 
     def testAboveRoot(self):
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(root='/folder2')
+        registry = getUtility(IRegistry)
+        registry['plone.root'] = u'/folder2'
         view = self.renderer(self.portal)
         tree = view.getNavTree()
         self.assertTrue(tree)
@@ -462,8 +433,8 @@ def testStateFiltering(self):
         self.assertEqual(len(tree['children']), 2)
 
     def testPrunedRootNode(self):
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
+        registry = self.portal.portal_registry
+        registry['plone.parent_types_not_to_query'] = [u'Folder']
 
         assignment = navigation.Assignment(topLevel=0)
         assignment.topLevel = 1
@@ -473,8 +444,8 @@ def testPrunedRootNode(self):
         self.assertEqual(len(tree['children']), 0)
 
     def testPrunedRootNodeShowsAllParents(self):
-        ntp=self.portal.portal_properties.navtree_properties
-        ntp.manage_changeProperties(parentMetaTypesNotToQuery=['Folder'])
+        registry = self.portal.portal_registry
+        registry['plone.parent_types_not_to_query'] = [u'Folder']
 
         assignment = navigation.Assignment(topLevel=0)
         assignment.topLevel = 1


