Repository: plone.app.z3cform
Branch: refs/heads/master
Date: 2015-06-10T08:48:18-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/513a87a6ec55a142f810fa818c65b4906a331e93

also mock getToolByName for some tests

Files changed:
M plone/app/z3cform/tests/test_widgets.py

diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index b611c49..be9e491 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -2,6 +2,7 @@
 from datetime import date
 from datetime import datetime
 from mock import Mock
+from mock import patch
 from plone.app.widgets.testing import ExampleVocabulary
 from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
 from plone.app.widgets.testing import TestRequest
@@ -914,47 +915,50 @@ def setUp(self):
 
     def test_widget(self):
         from plone.app.z3cform.widget import RelatedItemsWidget
-        context = Mock(absolute_url=lambda: 'fake_url')
-        context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-        widget = RelatedItemsWidget(self.request)
-        widget.context = context
-        widget.update()
-        self.assertEqual(
-            {
-                'name': None,
-                'value': u'',
-                'pattern': 'relateditems',
-                'pattern_options': {
-                    'folderTypes': ['SomeType'],
-                    'homeText': u'Home',
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
-                    'separator': ';',
-                    'vocabularyUrl': '/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog',
+        with patch('plone.app.widgets.utils.getToolByName') as mock_method:
+            props = Mock()
+            props.site_properties.getProperty.return_value = ['SomeType']
+            mock_method.return_value = props
+            widget = RelatedItemsWidget(self.request)
+            widget.context = Mock(absolute_url=lambda: 'fake_url')
+            widget.update()
+            self.assertEqual(
+                {
+                    'name': None,
+                    'value': u'',
+                    'pattern': 'relateditems',
+                    'pattern_options': {
+                        'folderTypes': ['SomeType'],
+                        'homeText': u'Home',
+                        'searchAllText': u'Entire site',
+                        'searchText': u'Search',
+                        'separator': ';',
+                        'vocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog',
+                    },
                 },
-            },
-            widget._base_args()
-        )
+                widget._base_args()
+            )
 
     def test_single_selection(self):
         """The pattern_options value for maximumSelectionSize should
         be 1 when the field only allows a single selection."""
         from plone.app.z3cform.widget import RelatedItemsFieldWidget
-        context = Mock(absolute_url=lambda: 'fake_url')
-        context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-        field = Choice(
-            __name__='selectfield',
-            values=['one', 'two', 'three'],
-        )
-        widget = RelatedItemsFieldWidget(field, self.request)
-        widget.context = context
-        widget.update()
-        base_args = widget._base_args()
-        pattern_options = base_args['pattern_options']
-        self.assertEquals(pattern_options.get('maximumSelectionSize', 0), 1)
+        with patch('plone.app.widgets.utils.getToolByName') as mock_method:
+            context = Mock(absolute_url=lambda: 'fake_url')
+            props = Mock()
+            props.site_properties.getProperty.return_value = ['SomeType']
+            mock_method.return_value = props
+            field = Choice(
+                __name__='selectfield',
+                values=['one', 'two', 'three'],
+            )
+            widget = RelatedItemsFieldWidget(field, self.request)
+            widget.context = context
+            widget.update()
+            base_args = widget._base_args()
+            pattern_options = base_args['pattern_options']
+            self.assertEquals(pattern_options.get('maximumSelectionSize', 0), 1)
 
     def test_multiple_selection(self):
         """The pattern_options key maximumSelectionSize shouldn't be
@@ -963,27 +967,29 @@ def test_multiple_selection(self):
         from zope.schema.interfaces import ISource
         from zope.schema.vocabulary import VocabularyRegistry
 
-        context = Mock(absolute_url=lambda: 'fake_url')
-        context.portal_properties.site_properties\
-            .getProperty.return_value = ['SomeType']
-        field = List(
-            __name__='selectfield',
-            value_type=Choice(vocabulary='foobar')
-        )
-        widget = RelatedItemsFieldWidget(field, self.request)
-        widget.context = context
-
-        vocab = Mock()
-        alsoProvides(vocab, ISource)
-        with mock.patch.object(VocabularyRegistry, 'get', return_value=vocab):
-            widget.update()
-            base_args = widget._base_args()
-        patterns_options = base_args['pattern_options']
-        self.assertFalse('maximumSelectionSize' in patterns_options)
-        self.assertEqual(
-            patterns_options['vocabularyUrl'],
-            '/@@getVocabulary?name=foobar&field=selectfield',
+        with patch('plone.app.widgets.utils.getToolByName') as mock_method:
+            context = Mock(absolute_url=lambda: 'fake_url')
+            props = Mock()
+            props.site_properties.getProperty.return_value = ['SomeType']
+            mock_method.return_value = props
+            field = List(
+                __name__='selectfield',
+                value_type=Choice(vocabulary='foobar')
             )
+            widget = RelatedItemsFieldWidget(field, self.request)
+            widget.context = context
+
+            vocab = Mock()
+            alsoProvides(vocab, ISource)
+            with mock.patch.object(VocabularyRegistry, 'get', return_value=vocab):
+                widget.update()
+                base_args = widget._base_args()
+            patterns_options = base_args['pattern_options']
+            self.assertFalse('maximumSelectionSize' in patterns_options)
+            self.assertEqual(
+                patterns_options['vocabularyUrl'],
+                '/@@getVocabulary?name=foobar&field=selectfield',
+                )
 
     def test_converter_RelationChoice(self):
         from plone.app.z3cform.converters import \


