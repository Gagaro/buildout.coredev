Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2015-10-23T12:19:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8fd7d9c19cac3abc3a74d2f96997c497574b9d9a

When migration fails, do not upgrade addons or recatalog or update roles.

Otherwise those parts will get executed and saved to the database,
which might make things worse.

Backport of commit dda8fb0f64b48c86c67e3ae5fad1a92d38523d26 from
master branch.

Files changed:
M Products/CMFPlone/MigrationTool.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index 65f1853..c705e79 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -272,54 +272,52 @@ def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
                         transaction.abort()
                         break
 
-            logger.info("Starting upgrade of core addons.")
-            ADDON_LIST.upgrade_all(self)
-            logger.info("Done upgrading core addons.")
-
-            logger.info("End of upgrade path, migration has finished")
+            logger.info("End of upgrade path, main migration has finished.")
 
             if self.needUpgrading():
-                logger.error("The upgrade path did NOT reach current version")
+                logger.error("The upgrade path did NOT reach current version.")
                 logger.error("Migration has failed")
             else:
-                logger.info("Your Plone instance is now up-to-date.")
+                logger.info("Starting upgrade of core addons.")
+                ADDON_LIST.upgrade_all(self)
+                logger.info("Done upgrading core addons.")
 
-            # do this once all the changes have been done
-            if self.needRecatalog():
-                logger.info("Please wait while we recatalog.")
-                try:
-                    catalog = self.portal_catalog
-                    # Reduce threshold for the reindex run
-                    old_threshold = catalog.threshold
-                    pg_threshold = getattr(catalog, 'pgthreshold', 0)
-                    catalog.pgthreshold = 300
-                    catalog.threshold = 2000
-                    catalog.refreshCatalog(clear=1)
-                    catalog.threshold = old_threshold
-                    catalog.pgthreshold = pg_threshold
-                    self._needRecatalog = 0
-                except (ConflictError, KeyboardInterrupt):
-                    raise
-                except:
-                    logger.error("Exception was thrown while cataloging:\n",
-                                 exc_info=True)
-                    if not swallow_errors:
+                # do this once all the changes have been done
+                if self.needRecatalog():
+                    logger.info("Recatalog needed. This may take a while...")
+                    try:
+                        catalog = self.portal_catalog
+                        # Reduce threshold for the reindex run
+                        old_threshold = catalog.threshold
+                        pg_threshold = getattr(catalog, 'pgthreshold', 0)
+                        catalog.pgthreshold = 300
+                        catalog.threshold = 2000
+                        catalog.refreshCatalog(clear=1)
+                        catalog.threshold = old_threshold
+                        catalog.pgthreshold = pg_threshold
+                        self._needRecatalog = 0
+                    except (ConflictError, KeyboardInterrupt):
                         raise
-                logger.info("Done with recatalog.")
-
-            if self.needUpdateRole():
-                logger.info("Please wait while we update role mappings.")
-                try:
-                    self.portal_workflow.updateRoleMappings()
-                    self._needUpdateRole = 0
-                except (ConflictError, KeyboardInterrupt):
-                    raise
-                except:
-                    logger.error("Exception was thrown while updating role "
-                                 "mappings", exc_info=True)
-                    if not swallow_errors:
+                    except:
+                        logger.error("Exception was thrown while cataloging:\n",
+                                     exc_info=True)
+                        if not swallow_errors:
+                            raise
+                    logger.info("Done with recatalog.")
+
+                if self.needUpdateRole():
+                    logger.info("Role update needed. This may take a while...")
+                    try:
+                        self.portal_workflow.updateRoleMappings()
+                        self._needUpdateRole = 0
+                    except (ConflictError, KeyboardInterrupt):
                         raise
-                logger.info("Done updating role mappings.")
+                    except:
+                        logger.error("Exception was thrown while updating role "
+                                     "mappings", exc_info=True)
+                        if not swallow_errors:
+                            raise
+                    logger.info("Done updating role mappings.")
 
             if dry_run:
                 logger.info("Dry run selected, transaction aborted")
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 385f39e..a3bc00d 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -8,6 +8,10 @@ Changelog
 4.3.8 (unreleased)
 ------------------
 
+- When migration fails, do not upgrade addons or recatalog or
+  update roles.
+  [maurits]
+
 - Let plone-final import step also depend on the workflow step.
   Otherwise the plone-final step installs plone.app.discussion with an
   extra workflow, and then our own workflow step throws it away again.


