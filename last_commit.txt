Repository: plone.app.users


Branch: refs/heads/1.2.x
Date: 2015-10-24T16:05:38+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.users/commit/3285cd783b9eb08ca43a0f96cb5ed6987f066756

Fix: removed buildout.cfg bootstrap.py.

We should use the plone coredev buildout when working on core packages.

Files changed:
D bootstrap.py
D buildout.cfg

diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index a629566..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,189 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os
-import shutil
-import sys
-import tempfile
-
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --find-links to point to local resources, you can keep
-this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", "--config-file",
-                  help=("Specify the path to the buildout configuration "
-                        "file to be used."))
-parser.add_option("-f", "--find-links",
-                  help=("Specify a URL to search for buildout releases"))
-parser.add_option("--allow-site-packages",
-                  action="store_true", default=False,
-                  help=("Let bootstrap.py use existing site packages"))
-parser.add_option("--setuptools-version",
-                  help="use a specific setuptools version")
-
-
-options, args = parser.parse_args()
-
-######################################################################
-# load/install setuptools
-
-try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
-    from urllib.request import urlopen
-except ImportError:
-    from urllib2 import urlopen
-
-ez = {}
-exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
-
-if not options.allow_site_packages:
-    # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions
-    # of setuptools are not in the path
-    import site
-    # inside a virtualenv, there is no 'getsitepackages'.
-    # We can't remove these reliably
-    if hasattr(site, 'getsitepackages'):
-        for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
-
-setup_args = dict(to_dir=tmpeggs, download_delay=0)
-
-if options.setuptools_version is not None:
-    setup_args['version'] = options.setuptools_version
-
-ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
-
-# This does not (always?) update the default working set.  We will
-# do it.
-for path in sys.path:
-    if path not in pkg_resources.working_set.entries:
-        pkg_resources.working_set.add_entry(path)
-
-######################################################################
-# Install buildout
-
-ws = pkg_resources.working_set
-
-cmd = [sys.executable, '-c',
-       'from setuptools.command.easy_install import main; main()',
-       '-mZqNxd', tmpeggs]
-
-find_links = os.environ.get(
-    'bootstrap-testing-find-links',
-    options.find_links or
-    ('http://downloads.buildout.org/'
-     if options.accept_buildout_test_releases else None)
-    )
-if find_links:
-    cmd.extend(['-f', find_links])
-
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        try:
-            return not parsed_version.is_prerelease
-        except AttributeError:
-            # Older setuptools
-            for part in parsed_version:
-                if (part[:1] == '*') and (part not in _final_parts):
-                    return False
-            return True
-
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setuptools_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-if version:
-    requirement = '=='.join((requirement, version))
-cmd.append(requirement)
-
-import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
-    raise Exception(
-        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
-
-######################################################################
-# Import and run buildout
-
-ws.add_entry(tmpeggs)
-ws.require(requirement)
-import zc.buildout.buildout
-
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
deleted file mode 100644
index 22f5e3e..0000000
--- a/buildout.cfg
+++ /dev/null
@@ -1,18 +0,0 @@
-[buildout]
-parts = test
-        omelette
-versions = versions
-
-extends = http://dist.plone.org/release/4.3-latest/versions.cfg
-develop = .
-
-[versions]
-plone.app.users = 
-
-[test]
-recipe = zc.recipe.testrunner
-eggs = plone.app.users [test]
-
-[omelette]
-recipe = collective.recipe.omelette
-eggs = ${test:eggs}


Repository: plone.app.users


Branch: refs/heads/1.2.x
Date: 2015-10-24T16:32:34+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.users/commit/b0af2c5ba915c1f6374e727d1511f3fa60c965d6

Fix: Added more tests in password.txt.

I got some failures locally, where with a non-ascii password you could
not log in, and these new tests should show the cause more clearly.

Hm, seems the failures are triggered by something else that I have
checked out.

I'll put some info here for clarity.

$ bin/test -s plone.app.users -t password.txt
...

Error in test /Users/maurits/community/plone-coredev/4.3/src/plone.app.users/plone/app/users/tests/password.txt
Traceback (most recent call last):
  File "/usr/local/pythons/parts/opt/lib/python2.6/unittest.py", line 279, in run
    testMethod()
  File "/usr/local/pythons/parts/opt/lib/python2.6/doctest.py", line 2158, in runTest
    test, out=new.write, clear_globs=False)
  File "/usr/local/pythons/parts/opt/lib/python2.6/doctest.py", line 1391, in run
    return self.__run(test, compileflags, out)
  File "/usr/local/pythons/parts/opt/lib/python2.6/doctest.py", line 1277, in __run
    got += _exception_traceback(exc_info)
  File "/usr/local/pythons/parts/opt/lib/python2.6/doctest.py", line 244, in _exception_traceback
    traceback.print_exception(exc_type, exc_val, exc_tb, file=excout)
  File "/Users/maurits/shared-eggs/zope.testrunner-4.4.4-py2.6.egg/zope/testrunner/tb_format.py", line 42, in print_exception
    file.writelines(format_exception(t, v, tb, limit))
  File "/Users/maurits/shared-eggs/zope.testrunner-4.4.4-py2.6.egg/zope/testrunner/tb_format.py", line 31, in format_exception
    return fmt.formatException(t, v, tb)
(Recursive formatException() stopped, trying traceback.format_tb)
  File "/Users/maurits/shared-eggs/zope.exceptions-3.6.2-py2.6.egg/zope/exceptions/exceptionformatter.py", line 177, in formatException
    line = self.formatLine(tb)
  File "/Users/maurits/shared-eggs/zope.exceptions-3.6.2-py2.6.egg/zope/exceptions/exceptionformatter.py", line 122, in formatLine
    line = linecache.getline(filename, lineno)
  File "/Users/maurits/pythons/2.6/lib/python2.6/linecache.py", line 14, in getline
    lines = getlines(filename, module_globals)
  File "/usr/local/pythons/parts/opt/lib/python2.6/doctest.py", line 1336, in __patched_linecache_getlines
    source = example.source.encode('ascii', 'backslashreplace')
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 70: ordinal not in range(128)

Totally not helpful.
Showing only the first error works better:

$ bin/test -s plone.app.users -t password.txt -1
...
File "/Users/maurits/community/plone-coredev/4.3/src/plone.app.users/plone/app/users/tests/password.txt", line 61, in password.txt
Failed example:
    'Login failed' in self.browser.contents
    Expected:
        False
    Got:
        True

Files changed:
M plone/app/users/tests/password.txt

diff --git a/plone/app/users/tests/password.txt b/plone/app/users/tests/password.txt
index 8531113..1f76276 100644
--- a/plone/app/users/tests/password.txt
+++ b/plone/app/users/tests/password.txt
@@ -19,12 +19,16 @@ So let's login as Plone user:
     >>> self.browser.getControl('Login Name').value = 'test_user_1_'
     >>> self.browser.getControl('Password').value = 'secret'
     >>> self.browser.getControl('Log in').click()
+    >>> 'Login failed' in self.browser.contents
+    False
 
 Now we should be able to access the change password form:
 
     >>> self.browser.open('http://nohost/plone/' + view_name)
     >>> 'Login Name' in self.browser.contents
     False
+    >>> 'Forgot your password' in self.browser.contents
+    False
     >>> self.browser.url.endswith(view_name)
     True
 
@@ -54,22 +58,30 @@ Okay the password has been changed, let's logout and login again with the new pa
     >>> self.browser.getControl('Login Name').value = 'test_user_1_'
     >>> self.browser.getControl('Password').value = 'super-sécrét'
     >>> self.browser.getControl('Log in').click()
+    >>> 'Login failed' in self.browser.contents
+    False
 
 If we are logged in the change password form is available
 
     >>> self.browser.open('http://nohost/plone/' + view_name)
     >>> 'Please log in' in self.browser.contents
     False
+    >>> 'Forgot your password' in self.browser.contents
+    False
+    >>> self.browser.url.endswith(view_name)
+    True
 
 Now let's test using a PAS Password validation plugin. Add a test plugin.
 
     >>> self.addParrotPasswordPolicy()
 
     >>> self.browser.open('http://nohost/plone/' + view_name)
+    >>> self.browser.url.endswith(view_name)
+    True
 
 Check that we are given instructions on what is a valid password
 
-   >>> print self.browser.contents
+    >>> print self.browser.contents
     <...
     ...Enter your new password. Must not be dead...
 
@@ -93,4 +105,3 @@ Now try a valid password
     >>> print self.browser.contents
     <...
     ...Password changed...
-


Repository: plone.app.users


Branch: refs/heads/1.2.x
Date: 2015-10-24T16:40:43+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.users/commit/83038fde8e2c7aa181a0d60a1dfad75e67bbf852

Fix: Noted in CHANGES.rst that the changes in this release are fixes, not new features.

Although you could call the password form accepting non-ascii characters a new feature.
I guess it is more a fix for an old feature.

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 43aac68..c251d9d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,11 +4,15 @@ Changelog
 1.2.2 (unreleased)
 ------------------
 
+Fixes:
+
 - Fixed "Add new user" form when there are too many groups.
   Fixes https://github.com/plone/plone.app.users/issues/33
   [avoinea]
+
 - Fixed @@change-password to accept current password containing non-ascii chars
   [sgeulette]
+
 - Fixed @@change-password to accept new password containing non-ascii chars
   [sgeulette]
 


