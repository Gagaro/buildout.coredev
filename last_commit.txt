Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-11T21:55:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/2408fbe28651d9758be9105715a0ecc226d6cf57

minor housekeeping

Files changed:
M plone/behavior/annotation.rst
M setup.py

diff --git a/plone/behavior/annotation.rst b/plone/behavior/annotation.rst
index 26d3afd..c195205 100644
--- a/plone/behavior/annotation.rst
+++ b/plone/behavior/annotation.rst
@@ -2,14 +2,14 @@
 plone.behavior: Annotation storage
 ==================================
 
-plone.behavior comes with a standard behavior factory that can be used to
+``plone.behavior`` comes with a standard behavior factory that can be used to
 store the data of a schema interface in annotations. This means that it is
 possible to create a simple "data only" behavior with just an interface.
 
-We have created such an interface in plone.behavior.tests, called
-IAnnotationStored. It has a single field, 'some_field'.
+We have created such an interface in ``plone.behavior.tests``, called
+``IAnnotationStored``. It has a single field, 'some_field'.
 
-Let's show how this may be registered in ZCML.
+Let's show how this may be registered in ZCML::
 
     >>> configuration = """\
     ... <configure
@@ -35,18 +35,24 @@ Let's show how this may be registered in ZCML.
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
 Let us now test this. First, we'll need an annotatable context and an
-IBehaviorAssignable adapter. See behaviors.txt for more details.
+``IBehaviorAssignable`` adapter. See ``behaviors.rst`` for more details::
 
-    >>> from zope.interface import Interface, implements, alsoProvides
-    >>> from zope.component import provideAdapter, adapts, getUtility
-    >>> from zope.annotation.interfaces import IAttributeAnnotatable, IAnnotations
-    >>> from plone.behavior.interfaces import IBehavior, IBehaviorAssignable
+    >>> from plone.behavior.interfaces import  IBehaviorAssignable
+    >>> from plone.behavior.interfaces import IBehavior
     >>> from plone.behavior.tests import IAnnotationStored
-
+    >>> from zope.annotation.interfaces import IAnnotations
+    >>> from zope.annotation.interfaces import IAttributeAnnotatable
+    >>> from zope.component import adapter
+    >>> from zope.component import getUtility
+    >>> from zope.component import provideAdapter
+    >>> from zope.interface import Interface
+    >>> from zope.interface import alsoProvides
+    >>> from zope.interface import implementer
     >>> BEHAVIORS = {}
-    >>> class TestingBehaviorAssignable(object):
-    ...     implements(IBehaviorAssignable)
-    ...     adapts(Interface)
+
+    >>> @implementer(IBehaviorAssignable)
+    ... @adapter(Interface)
+    ... class TestingBehaviorAssignable(object):
     ...
     ...     def __init__(self, context):
     ...         self.context = context
@@ -62,38 +68,39 @@ IBehaviorAssignable adapter. See behaviors.txt for more details.
 
     >>> provideAdapter(TestingBehaviorAssignable)
 
-    >>> class Context(object):
-    ...     implements(IAttributeAnnotatable)
+    >>> @implementer(IAttributeAnnotatable)
+    ... class Context(object):
+    ...     pass
     >>> BEHAVIORS[Context] = [IAnnotationStored]
 
     >>> context = Context()
 
-We can now adapt the context to our new interface.
+We can now adapt the context to our new interface::
 
     >>> adapted = IAnnotationStored(context)
 
-Before we've set anything, we get the field's missing_value
+Before we've set anything, we get the field's missing_value::
 
     >>> adapted.some_field is IAnnotationStored['some_field'].missing_value
     True
 
-Let's look at the annotations also:
+Let's look at the annotations also::
 
     >>> sorted(IAnnotations(context).items())
     []
 
-If we now set the value, it will be stored in annotations:
+If we now set the value, it will be stored in annotations::
 
     >>> adapted.some_field = u'New value'
     >>> sorted(IAnnotations(context).items())
     [('plone.behavior.tests.IAnnotationStored.some_field', u'New value')]
 
-And of course we can get it back again:
+And of course we can get it back again::
 
     >>> adapted.some_field
     u'New value'
 
-If we try to get some other field, we get an AttributeError:
+If we try to get some other field, we get an AttributeError::
 
     >>> adapted.bogus_field #doctest: +ELLIPSIS
     Traceback (most recent call last):
@@ -101,7 +108,7 @@ If we try to get some other field, we get an AttributeError:
     AttributeError: bogus_field
 
 Of course, we can still set and then get some value on the adapter factory
-itself, but it won't be persisted.
+itself, but it won't be persisted::
 
     >>> adapted.bogus_field = 123
     >>> adapted.bogus_field
diff --git a/setup.py b/setup.py
index 222afc0..3a31f5b 100644
--- a/setup.py
+++ b/setup.py
@@ -25,7 +25,7 @@
     keywords='Plone behavior registry',
     author='Martin Aspeli',
     author_email='optilude@gmail.com',
-    url='http://code.google.com/p/dexterity',
+    url='http://pypi.python.org/pypi/plone.dexterity',
     license='BSD',
     packages=find_packages(exclude=['ez_setup']),
     namespace_packages=['plone'],
@@ -33,11 +33,11 @@
     zip_safe=False,
     install_requires=[
         'setuptools',
+        'zope.annotation',
         'zope.component',
+        'zope.configuration',
         'zope.interface',
         'zope.schema',
-        'zope.annotation',
-        'zope.configuration',
     ],
     extras_require={
         'test': [],


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-11T21:55:34+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/plone.behavior/commit/23e3233a1505df3f0c9c51c4336ccdd1f9ee9c39

Add name to behavior directive. This name can be used to lookup behavior registrations by new plone.behaviors.registration.lookup_behavior function.

Files changed:
M README.rst
M docs/CHANGES.rst
M plone/behavior/__init__.py
M plone/behavior/directives.rst
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py

diff --git a/README.rst b/README.rst
index 4a8ef63..80cbfa1 100644
--- a/README.rst
+++ b/README.rst
@@ -73,6 +73,7 @@ The simplest way to do that is to load the ``meta.zcml`` file from this package
       <include package="plone.behavior" file="meta.zcml" />
 
       <plone:behavior
+          name="locking_support"
           title="Locking support"
           description="Optional object-level locking"
           provides=".interfaces.ILockingSupport"
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 04e4d86..97dbac7 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -2,22 +2,24 @@
 Changelog
 =========
 
-1.0.4 (unreleased)
-------------------
+1.1 (unreleased)
+----------------
+
+* Add name to behavior directive. This name can be used to lookup behavior
+  registrations by new plone.behaviors.registration.lookup_behavior function.
+  [rnixx]
 
 - Added more documentation, simplified code in directive, added a warning if
   ``for`` is given w/o ``factory``.
   [jensens]
 
-
 1.0.3 (2015-04-29)
 ------------------
 
-- Code modernization: utf-header, pep8, rst-files, adapter/implementer
+* Code modernization: utf-header, pep8, rst-files, adapter/implementer
   decorators, ...
   [jensens]
 
-
 1.0.2 (2013-01-17)
 ------------------
 
diff --git a/plone/behavior/__init__.py b/plone/behavior/__init__.py
index f0166a7..d1a1635 100644
--- a/plone/behavior/__init__.py
+++ b/plone/behavior/__init__.py
@@ -1,3 +1,7 @@
 # -*- coding: utf-8 -*-
 # Convenience import
 from plone.behavior.annotation import AnnotationStorage  # noqa
+import logging
+
+
+logger = logging.getLogger('plone.behavior')
diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst
index 950dc37..ac90f8b 100644
--- a/plone/behavior/directives.rst
+++ b/plone/behavior/directives.rst
@@ -31,6 +31,7 @@ plone.behavior.tests:
     ...     <include package="plone.behavior" file="meta.zcml" />
     ...
     ...     <plone:behavior
+    ...         name="adapter_behavior"
     ...         title="Adapter behavior"
     ...         description="A basic adapter behavior"
     ...         provides=".tests.IAdapterBehavior"
@@ -38,6 +39,7 @@ plone.behavior.tests:
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="context_restricted_behavior"
     ...         title="Context restricted behavior"
     ...         provides=".tests.IRestrictedAdapterBehavior"
     ...         factory=".tests.RestrictedAdapterBehavior"
@@ -45,23 +47,27 @@ plone.behavior.tests:
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="factory_implied_context_restricted_behavior"
     ...         title="Factory-implied context restricted behavior"
     ...         provides=".tests.IImpliedRestrictionAdapterBehavior"
     ...         factory=".tests.ImpliedRestrictionAdapterBehavior"
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="marker_interface_behavior"
     ...         title="Marker interface behavior"
     ...         provides=".tests.IMarkerBehavior"
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="annotation_storage_behavior"
     ...         title="Annotation storage behavior"
     ...         provides=".tests.IAnnotationStored"
     ...         factory="plone.behavior.AnnotationStorage"
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="marker_and_adapter"
     ...         title="Marker and adapter"
     ...         provides=".tests.IMarkerAndAdapterBehavior"
     ...         factory="plone.behavior.AnnotationStorage"
@@ -111,6 +117,9 @@ Let us test the various utilities and the underlying adapters more carefully.
 for any context.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAdapterBehavior")
+    >>> dummy.name
+    u'adapter_behavior'
+
     >>> dummy.title
     u'Adapter behavior'
 
@@ -133,6 +142,9 @@ for any context.
 2) An adapter behavior with a factory and an explicit context restriction.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRestrictedAdapterBehavior")
+    >>> dummy.name
+    u'context_restricted_behavior'
+
     >>> dummy.title
     u'Context restricted behavior'
 
@@ -156,6 +168,9 @@ for any context.
 declaration on the factory.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IImpliedRestrictionAdapterBehavior")
+    >>> dummy.name
+    u'factory_implied_context_restricted_behavior'
+
     >>> dummy.title
     u'Factory-implied context restricted behavior'
 
@@ -178,6 +193,9 @@ declaration on the factory.
 4) A behavior with a marker marker interface.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerBehavior")
+    >>> dummy.name
+    u'marker_interface_behavior'
+
     >>> dummy.title
     u'Marker interface behavior'
 
@@ -200,6 +218,9 @@ declaration on the factory.
 5) A behavior using the standard annotation factory
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAnnotationStored")
+    >>> dummy.name
+    u'annotation_storage_behavior'
+
     >>> dummy.title
     u'Annotation storage behavior'
 
@@ -222,6 +243,9 @@ declaration on the factory.
 6) A behavior providing a marker interface and using an adapter factory.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerAndAdapterBehavior")
+    >>> dummy.name
+    u'marker_and_adapter'
+
     >>> dummy.title
     u'Marker and adapter'
 
@@ -240,3 +264,22 @@ declaration on the factory.
     >>> from plone.behavior.tests import IMarkerAndAdapterBehavior
     >>> [a.required for a in sm.registeredAdapters() if a.provided == IMarkerAndAdapterBehavior][0]
     (<InterfaceClass zope.annotation.interfaces.IAnnotatable>,)
+
+Test registration lookup helper utility.
+
+    >>> from plone.behavior.registration import lookup_behavior
+    >>> lookup_behavior()
+    Traceback (most recent call last):
+      ...
+    ValueError: Either ``name`` or ``identifier`` must be given
+
+    >>> lookup_behavior('inexistent')
+    Traceback (most recent call last):
+      ...
+    BehaviorRegistrationNotFound: inexistent
+
+    >>> lookup_behavior('adapter_behavior')
+    <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>
+
+    >>> lookup_behavior(identifier='plone.behavior.tests.IAdapterBehavior')
+    <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>
diff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py
index 1479c96..e21348d 100644
--- a/plone/behavior/metaconfigure.py
+++ b/plone/behavior/metaconfigure.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from plone.behavior import logger
 from plone.behavior.factory import BehaviorAdapterFactory
 from plone.behavior.interfaces import IBehavior
 from plone.behavior.interfaces import ISchemaAwareFactory
@@ -8,17 +9,24 @@
 from zope.configuration import fields as configuration_fields
 from zope.configuration.exceptions import ConfigurationError
 from zope.interface import Interface
-import logging
-
-logger = logging.getLogger(__name__)
+from zope.schema import TextLine
 
 
 class IBehaviorDirective(Interface):
-    """Directive which registers a new behavior type (a global, named
-    utility) and associated behavior adapter factory (a global, unnamed
-    adapter)
+    """Directive which registers a new behavior type.
+
+    The registration consists of:
+
+        * a global named utility registered by interface identifier
+        * a global named utility registered by lookup name
+        * an associated global and unnamed behavior adapter
     """
 
+    name = TextLine(
+        title=u"Name",
+        description=u"Convenience lookup name for this behavior",
+        required=False)
+
     title = configuration_fields.MessageID(
         title=u"Title",
         description=u"A user friendly title for this behavior",
@@ -54,9 +62,8 @@ class IBehaviorDirective(Interface):
         required=False)
 
 
-def behaviorDirective(_context, title, provides, description=None, marker=None,
-                      factory=None, for_=None):
-
+def behaviorDirective(_context, title, provides, name=None, description=None,
+                      marker=None, factory=None, for_=None):
     if marker is None and factory is None:
         marker = provides
 
@@ -71,18 +78,24 @@ def behaviorDirective(_context, title, provides, description=None, marker=None,
     if factory is not None and ISchemaAwareFactory.providedBy(factory):
         factory = factory(provides)
 
+    # if no name is given take the dotted path given as identifier
+    if name is None:
+        name = provides.__identifier__
+
     registration = BehaviorRegistration(
         title=title,
         description=description,
         interface=provides,
         marker=marker,
-        factory=factory
+        factory=factory,
+        name=name,
     )
 
+    # behavior registration by provides interface identifier
     utility(
         _context,
         provides=IBehavior,
-        name=provides.__identifier__,
+        name=name,
         component=registration
     )
 
@@ -102,7 +115,7 @@ def behaviorDirective(_context, title, provides, description=None, marker=None,
         adapts = getattr(factory, '__component_adapts__', None) or [Interface]
         if len(adapts) != 1:
             raise ConfigurationError(
-                u"The factory cannot be declared a multi-adapter."
+                u"The factory can not be declared as multi-adapter."
             )
         for_ = adapts[0]
 
diff --git a/plone/behavior/registration.py b/plone/behavior/registration.py
index 2d7d0d0..49ed2b6 100644
--- a/plone/behavior/registration.py
+++ b/plone/behavior/registration.py
@@ -1,19 +1,47 @@
 # -*- coding: utf-8 -*-
 from plone.behavior.interfaces import IBehavior
 from zope.interface import implementer
+from zope.component import getUtility
+from zope.component import ComponentLookupError
 
 
 @implementer(IBehavior)
 class BehaviorRegistration(object):
 
-    def __init__(self, title, description, interface, marker, factory):
+    def __init__(self, title, description, interface,
+                 marker, factory, name=None):
         self.title = title
         self.description = description
         self.interface = interface
         self.marker = marker
         self.factory = factory
+        self.name = name
 
     def __repr__(self):
         return "<BehaviorRegistration for {0}>".format(
             self.interface.__identifier__
         )
+
+
+class BehaviorRegistrationNotFound(Exception):
+    """Exception thrown if behavior registration lookup fails.
+    """
+
+
+def lookup_behavior(name=None, identifier=None):
+    """Lookup behavior registration either by name or interface identifier.
+
+    ``ValueError`` is thrown if function call is incomplete.
+    ``BehaviorRegistrationNotFound`` is thrown if lookup fails.
+    """
+    try:
+        assert(name or identifier)
+    except AssertionError:
+        raise ValueError('Either ``name`` or ``identifier`` must be given')
+    # identifier rules if given
+    if identifier:
+        name = identifier
+    try:
+        return getUtility(IBehavior, name=name)
+    except ComponentLookupError:
+        raise BehaviorRegistrationNotFound(name)


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-11T21:55:35+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/plone.behavior/commit/d357770a796e46b2d89dd3f587d1aef8d48e0a9d

lookup_behavior_registration instead of lookup_behavior

Files changed:
M docs/CHANGES.rst
M plone/behavior/directives.rst
M plone/behavior/registration.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 97dbac7..5c75182 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 ----------------
 
 * Add name to behavior directive. This name can be used to lookup behavior
-  registrations by new plone.behaviors.registration.lookup_behavior function.
+  registrations by
+  new plone.behaviors.registration.lookup_behavior_registration function.
   [rnixx]
 
 - Added more documentation, simplified code in directive, added a warning if
diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst
index ac90f8b..c9a2cb5 100644
--- a/plone/behavior/directives.rst
+++ b/plone/behavior/directives.rst
@@ -267,19 +267,21 @@ declaration on the factory.
 
 Test registration lookup helper utility.
 
-    >>> from plone.behavior.registration import lookup_behavior
-    >>> lookup_behavior()
+    >>> from plone.behavior.registration import lookup_behavior_registration
+    >>> lookup_behavior_registration()
     Traceback (most recent call last):
       ...
     ValueError: Either ``name`` or ``identifier`` must be given
 
-    >>> lookup_behavior('inexistent')
+    >>> lookup_behavior_registration('inexistent')
     Traceback (most recent call last):
       ...
     BehaviorRegistrationNotFound: inexistent
 
-    >>> lookup_behavior('adapter_behavior')
+    >>> lookup_behavior_registration('adapter_behavior')
     <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>
 
-    >>> lookup_behavior(identifier='plone.behavior.tests.IAdapterBehavior')
+    >>> lookup_behavior_registration(
+    ...     identifier='plone.behavior.tests.IAdapterBehavior'
+    ... )
     <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>
diff --git a/plone/behavior/registration.py b/plone/behavior/registration.py
index 49ed2b6..f6deaa5 100644
--- a/plone/behavior/registration.py
+++ b/plone/behavior/registration.py
@@ -28,7 +28,7 @@ class BehaviorRegistrationNotFound(Exception):
     """
 
 
-def lookup_behavior(name=None, identifier=None):
+def lookup_behavior_registration(name=None, identifier=None):
     """Lookup behavior registration either by name or interface identifier.
 
     ``ValueError`` is thrown if function call is incomplete.


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-11T21:55:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/3b796b0fee70d0a88f49d4e2fac803e06f1d6690

make repr more verbose in order to support external developers with better inofmration about whats going on

Files changed:
M plone/behavior/directives.rst
M plone/behavior/registration.py

diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst
index c9a2cb5..48e82d4 100644
--- a/plone/behavior/directives.rst
+++ b/plone/behavior/directives.rst
@@ -101,8 +101,13 @@ With this in place, the behaviors should be registered, e.g:
 
     >>> from plone.behavior.interfaces import IBehavior
     >>> sorted([u for u in sm.registeredUtilities() if u.name == u"plone.behavior.tests.IAdapterBehavior"]) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
-    [UtilityRegistration(..., IBehavior, 'plone.behavior.tests.IAdapterBehavior', <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>,...),
-     UtilityRegistration(..., IInterface, 'plone.behavior.tests.IAdapterBehavior', IAdapterBehavior,...)]
+    [UtilityRegistration(<BaseGlobalComponents base>, IBehavior, 'plone.behavior.tests.IAdapterBehavior', <BehaviorRegistration adapter_behavior at ...
+      schema: plone.behavior.tests.IAdapterBehavior
+      marker: (no marker is set)
+      factory: <class 'plone.behavior.tests.AdapterBehavior'>
+      title: Adapter behavior
+      A basic adapter behavior
+    >, None, u''), UtilityRegistration(<BaseGlobalComponents base>, IInterface, 'plone.behavior.tests.IAdapterBehavior', IAdapterBehavior, None, '')]
 
     >>> from plone.behavior.tests import IAdapterBehavior
     >>> [a for a in sm.registeredAdapters() if a.provided == IAdapterBehavior]  # doctest: +ELLIPSIS
@@ -278,10 +283,22 @@ Test registration lookup helper utility.
       ...
     BehaviorRegistrationNotFound: inexistent
 
-    >>> lookup_behavior_registration('adapter_behavior')
-    <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>
+    >>> lookup_behavior_registration('adapter_behavior')  # doctest: +ELLIPSIS
+    <BehaviorRegistration adapter_behavior at ...
+      schema: plone.behavior.tests.IAdapterBehavior
+      marker: (no marker is set)
+      factory: <class 'plone.behavior.tests.AdapterBehavior'>
+      title: Adapter behavior
+      A basic adapter behavior
+    >
 
     >>> lookup_behavior_registration(
     ...     identifier='plone.behavior.tests.IAdapterBehavior'
-    ... )
-    <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>
+    ... )  # doctest: +ELLIPSIS
+    <BehaviorRegistration adapter_behavior at ...
+      schema: plone.behavior.tests.IAdapterBehavior
+      marker: (no marker is set)
+      factory: <class 'plone.behavior.tests.AdapterBehavior'>
+      title: Adapter behavior
+      A basic adapter behavior
+    >
diff --git a/plone/behavior/registration.py b/plone/behavior/registration.py
index f6deaa5..8f74a1c 100644
--- a/plone/behavior/registration.py
+++ b/plone/behavior/registration.py
@@ -4,6 +4,17 @@
 from zope.component import getUtility
 from zope.component import ComponentLookupError
 
+import textwrap
+
+REGISTRATION_REPR = """\
+<{class} {name} at {id}
+  schema: {identifier}
+  marker: {marker}
+  factory: {factory}
+  title: {title}
+  {description}
+>"""
+
 
 @implementer(IBehavior)
 class BehaviorRegistration(object):
@@ -18,9 +29,26 @@ def __init__(self, title, description, interface,
         self.name = name
 
     def __repr__(self):
-        return "<BehaviorRegistration for {0}>".format(
-            self.interface.__identifier__
-        )
+        if self.marker is not None:
+            marker_info = self.marker.__identifier__
+        elif self.marker is not None and self.marker is not self.interface:
+            marker_info = '(uses schema as marker)'
+        else:
+            marker_info = '(no marker is set)'
+        info = {
+            'class': self.__class__.__name__,
+            'id': id(self),
+            'name': self.name or '(unique name not set)',
+            'identifier': self.interface.__identifier__,
+            'marker': marker_info,
+            'factory': unicode(self.factory),
+            'title': self.title or '(no title)',
+            'description': textwrap.fill(
+                self.description or '(no description)',
+                subsequent_indent='  '
+            )
+        }
+        return REGISTRATION_REPR.format(**info)
 
 
 class BehaviorRegistrationNotFound(Exception):


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-11T22:04:08+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/9ef909904f799cfcc9fcd3c49afbe2703829b2df

register always identifier and if given additionally with name

Files changed:
M plone/behavior/metaconfigure.py

diff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py
index e21348d..5cc56b4 100644
--- a/plone/behavior/metaconfigure.py
+++ b/plone/behavior/metaconfigure.py
@@ -78,10 +78,6 @@ def behaviorDirective(_context, title, provides, name=None, description=None,
     if factory is not None and ISchemaAwareFactory.providedBy(factory):
         factory = factory(provides)
 
-    # if no name is given take the dotted path given as identifier
-    if name is None:
-        name = provides.__identifier__
-
     registration = BehaviorRegistration(
         title=title,
         description=description,
@@ -95,10 +91,19 @@ def behaviorDirective(_context, title, provides, name=None, description=None,
     utility(
         _context,
         provides=IBehavior,
-        name=name,
+        name=provides.__identifier__,
         component=registration
     )
 
+    if name is not None:
+        # for convinience we register with a given name
+        utility(
+            _context,
+            provides=IBehavior,
+            name=name,
+            component=registration
+        )
+
     if factory is None:
         if for_ is not None:
             logger.warn(


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-27T12:35:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/76cc565688e2e732f1fd9ce309c4d250c17bcb1e

documented zcml directives name attribute in readme

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index 80cbfa1..b475b65 100644
--- a/README.rst
+++ b/README.rst
@@ -89,6 +89,20 @@ After this is done you can adapt a context to ``ILockingSupport`` as normal::
     if locking is not None:
         locking.lock()
 
+The ``name`` is can be used for lookup instead of the full dotted name of the interface::
+
+    from plone.behavior.interfaces import IBehavior
+    from zope.component import getUtility
+
+    registration = getUtility(IBehavior, name='locking_support')
+
+We also have a helper function to achieve this::
+
+    from registration import lookup_behavior_registration
+
+    registration = lookup_behavior_registration(name='locking_support')
+
+
 You'll get an instance of ``LockingSupport`` if context can be adapted to ``IBehaviorAssignable`` (which, recall, is application specific),
 and if the implementation of ``IBehaviorAssignable`` says that this context supports this particular behavior.
 
@@ -120,6 +134,13 @@ The directive supports the attributes:
     An interface to which the behavior can be adapted.
     This is what the conditional adapter factory will be registered as providing (required).
 
+``name``
+    Convenience lookup name for this behavior (optional).
+    The behavior will be always registered under the dotted name of ``provides`` attribute.
+    This are usally long names. ``name`` is a short name for this.
+    If ``name`` is given it is registered additional with the name.
+    Anyway using short namespaces in ``name `` is recommended.
+
 ``marker``
     A marker interface to be applied by the behavior.
     If ``factory`` is not given, then this is optional and defaults to the value of ``provides``.
@@ -134,7 +155,6 @@ The directive supports the attributes:
     It is called with the value given in ``provides`` as the only argument.
     The value returned is then used as the factory, another callable that can create appropriate behavior factories on demand.
 
-
 ``for``
     The type of object to register the conditional adapter factory for (optional).
     Must be omitted is no ``factory`` is given.
@@ -155,7 +175,8 @@ Example usage, given
 - some ``typed_context`` (some arbitary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,
 - an ``MyTypedFactory`` class implementing ``IMyBehavior`` and adapting ``IMyType``,
 
-Title and description is trivial, so we dont cover it here in the explanantion.
+``title`` and ``description`` is trivial, so we dont cover it here in the explanantion.
+We dont cover ``name`` too, because it's not having any effect in this usage.
 To simplify it, we assume ``context`` ``IBehaviorAssignable`` always supports the behavior.
 Also for simplifications sake we assume some magic applies the marker interface to ``context``
 I.e. both is done by ``plone.dexterity``.


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-27T12:37:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/0f1f08acda87ca18c381e6d589450cba9a322749

refine sentence

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index b475b65..7bf093e 100644
--- a/README.rst
+++ b/README.rst
@@ -138,8 +138,8 @@ The directive supports the attributes:
     Convenience lookup name for this behavior (optional).
     The behavior will be always registered under the dotted name of ``provides`` attribute.
     This are usally long names. ``name`` is a short name for this.
-    If ``name`` is given it is registered additional with the name.
-    Anyway using short namespaces in ``name `` is recommended.
+    If ``name`` is given the behavior is registered additional under it.
+    Anyway using short namespaces in ``name`` is recommended.
 
 ``marker``
     A marker interface to be applied by the behavior.


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-05-27T12:59:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/74d60b8989b413e959bb242d5102c5da3d370017

typo, thx @rnixx

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index 7bf093e..b4e696b 100644
--- a/README.rst
+++ b/README.rst
@@ -89,7 +89,7 @@ After this is done you can adapt a context to ``ILockingSupport`` as normal::
     if locking is not None:
         locking.lock()
 
-The ``name`` is can be used for lookup instead of the full dotted name of the interface::
+The ``name`` can be used for lookup instead of the full dotted name of the interface::
 
     from plone.behavior.interfaces import IBehavior
     from zope.component import getUtility


Repository: plone.behavior


Branch: refs/heads/master
Date: 2015-07-09T10:09:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/e1de12593ce9bbececd1e7002114e4e785584430

Merge pull request #2 from plone/rnixx_behavior_name_and_lookup

PLIP 20239: Behavior name in ZCML directive, registration lookup utility

Files changed:
M README.rst
M docs/CHANGES.rst
M plone/behavior/__init__.py
M plone/behavior/annotation.rst
M plone/behavior/directives.rst
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py
M setup.py

diff --git a/README.rst b/README.rst
index 4a8ef63..b4e696b 100644
--- a/README.rst
+++ b/README.rst
@@ -73,6 +73,7 @@ The simplest way to do that is to load the ``meta.zcml`` file from this package
       <include package="plone.behavior" file="meta.zcml" />
 
       <plone:behavior
+          name="locking_support"
           title="Locking support"
           description="Optional object-level locking"
           provides=".interfaces.ILockingSupport"
@@ -88,6 +89,20 @@ After this is done you can adapt a context to ``ILockingSupport`` as normal::
     if locking is not None:
         locking.lock()
 
+The ``name`` can be used for lookup instead of the full dotted name of the interface::
+
+    from plone.behavior.interfaces import IBehavior
+    from zope.component import getUtility
+
+    registration = getUtility(IBehavior, name='locking_support')
+
+We also have a helper function to achieve this::
+
+    from registration import lookup_behavior_registration
+
+    registration = lookup_behavior_registration(name='locking_support')
+
+
 You'll get an instance of ``LockingSupport`` if context can be adapted to ``IBehaviorAssignable`` (which, recall, is application specific),
 and if the implementation of ``IBehaviorAssignable`` says that this context supports this particular behavior.
 
@@ -119,6 +134,13 @@ The directive supports the attributes:
     An interface to which the behavior can be adapted.
     This is what the conditional adapter factory will be registered as providing (required).
 
+``name``
+    Convenience lookup name for this behavior (optional).
+    The behavior will be always registered under the dotted name of ``provides`` attribute.
+    This are usally long names. ``name`` is a short name for this.
+    If ``name`` is given the behavior is registered additional under it.
+    Anyway using short namespaces in ``name`` is recommended.
+
 ``marker``
     A marker interface to be applied by the behavior.
     If ``factory`` is not given, then this is optional and defaults to the value of ``provides``.
@@ -133,7 +155,6 @@ The directive supports the attributes:
     It is called with the value given in ``provides`` as the only argument.
     The value returned is then used as the factory, another callable that can create appropriate behavior factories on demand.
 
-
 ``for``
     The type of object to register the conditional adapter factory for (optional).
     Must be omitted is no ``factory`` is given.
@@ -154,7 +175,8 @@ Example usage, given
 - some ``typed_context`` (some arbitary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,
 - an ``MyTypedFactory`` class implementing ``IMyBehavior`` and adapting ``IMyType``,
 
-Title and description is trivial, so we dont cover it here in the explanantion.
+``title`` and ``description`` is trivial, so we dont cover it here in the explanantion.
+We dont cover ``name`` too, because it's not having any effect in this usage.
 To simplify it, we assume ``context`` ``IBehaviorAssignable`` always supports the behavior.
 Also for simplifications sake we assume some magic applies the marker interface to ``context``
 I.e. both is done by ``plone.dexterity``.
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 04e4d86..5c75182 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -2,22 +2,25 @@
 Changelog
 =========
 
-1.0.4 (unreleased)
-------------------
+1.1 (unreleased)
+----------------
+
+* Add name to behavior directive. This name can be used to lookup behavior
+  registrations by
+  new plone.behaviors.registration.lookup_behavior_registration function.
+  [rnixx]
 
 - Added more documentation, simplified code in directive, added a warning if
   ``for`` is given w/o ``factory``.
   [jensens]
 
-
 1.0.3 (2015-04-29)
 ------------------
 
-- Code modernization: utf-header, pep8, rst-files, adapter/implementer
+* Code modernization: utf-header, pep8, rst-files, adapter/implementer
   decorators, ...
   [jensens]
 
-
 1.0.2 (2013-01-17)
 ------------------
 
diff --git a/plone/behavior/__init__.py b/plone/behavior/__init__.py
index f0166a7..d1a1635 100644
--- a/plone/behavior/__init__.py
+++ b/plone/behavior/__init__.py
@@ -1,3 +1,7 @@
 # -*- coding: utf-8 -*-
 # Convenience import
 from plone.behavior.annotation import AnnotationStorage  # noqa
+import logging
+
+
+logger = logging.getLogger('plone.behavior')
diff --git a/plone/behavior/annotation.rst b/plone/behavior/annotation.rst
index 26d3afd..c195205 100644
--- a/plone/behavior/annotation.rst
+++ b/plone/behavior/annotation.rst
@@ -2,14 +2,14 @@
 plone.behavior: Annotation storage
 ==================================
 
-plone.behavior comes with a standard behavior factory that can be used to
+``plone.behavior`` comes with a standard behavior factory that can be used to
 store the data of a schema interface in annotations. This means that it is
 possible to create a simple "data only" behavior with just an interface.
 
-We have created such an interface in plone.behavior.tests, called
-IAnnotationStored. It has a single field, 'some_field'.
+We have created such an interface in ``plone.behavior.tests``, called
+``IAnnotationStored``. It has a single field, 'some_field'.
 
-Let's show how this may be registered in ZCML.
+Let's show how this may be registered in ZCML::
 
     >>> configuration = """\
     ... <configure
@@ -35,18 +35,24 @@ Let's show how this may be registered in ZCML.
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
 Let us now test this. First, we'll need an annotatable context and an
-IBehaviorAssignable adapter. See behaviors.txt for more details.
+``IBehaviorAssignable`` adapter. See ``behaviors.rst`` for more details::
 
-    >>> from zope.interface import Interface, implements, alsoProvides
-    >>> from zope.component import provideAdapter, adapts, getUtility
-    >>> from zope.annotation.interfaces import IAttributeAnnotatable, IAnnotations
-    >>> from plone.behavior.interfaces import IBehavior, IBehaviorAssignable
+    >>> from plone.behavior.interfaces import  IBehaviorAssignable
+    >>> from plone.behavior.interfaces import IBehavior
     >>> from plone.behavior.tests import IAnnotationStored
-
+    >>> from zope.annotation.interfaces import IAnnotations
+    >>> from zope.annotation.interfaces import IAttributeAnnotatable
+    >>> from zope.component import adapter
+    >>> from zope.component import getUtility
+    >>> from zope.component import provideAdapter
+    >>> from zope.interface import Interface
+    >>> from zope.interface import alsoProvides
+    >>> from zope.interface import implementer
     >>> BEHAVIORS = {}
-    >>> class TestingBehaviorAssignable(object):
-    ...     implements(IBehaviorAssignable)
-    ...     adapts(Interface)
+
+    >>> @implementer(IBehaviorAssignable)
+    ... @adapter(Interface)
+    ... class TestingBehaviorAssignable(object):
     ...
     ...     def __init__(self, context):
     ...         self.context = context
@@ -62,38 +68,39 @@ IBehaviorAssignable adapter. See behaviors.txt for more details.
 
     >>> provideAdapter(TestingBehaviorAssignable)
 
-    >>> class Context(object):
-    ...     implements(IAttributeAnnotatable)
+    >>> @implementer(IAttributeAnnotatable)
+    ... class Context(object):
+    ...     pass
     >>> BEHAVIORS[Context] = [IAnnotationStored]
 
     >>> context = Context()
 
-We can now adapt the context to our new interface.
+We can now adapt the context to our new interface::
 
     >>> adapted = IAnnotationStored(context)
 
-Before we've set anything, we get the field's missing_value
+Before we've set anything, we get the field's missing_value::
 
     >>> adapted.some_field is IAnnotationStored['some_field'].missing_value
     True
 
-Let's look at the annotations also:
+Let's look at the annotations also::
 
     >>> sorted(IAnnotations(context).items())
     []
 
-If we now set the value, it will be stored in annotations:
+If we now set the value, it will be stored in annotations::
 
     >>> adapted.some_field = u'New value'
     >>> sorted(IAnnotations(context).items())
     [('plone.behavior.tests.IAnnotationStored.some_field', u'New value')]
 
-And of course we can get it back again:
+And of course we can get it back again::
 
     >>> adapted.some_field
     u'New value'
 
-If we try to get some other field, we get an AttributeError:
+If we try to get some other field, we get an AttributeError::
 
     >>> adapted.bogus_field #doctest: +ELLIPSIS
     Traceback (most recent call last):
@@ -101,7 +108,7 @@ If we try to get some other field, we get an AttributeError:
     AttributeError: bogus_field
 
 Of course, we can still set and then get some value on the adapter factory
-itself, but it won't be persisted.
+itself, but it won't be persisted::
 
     >>> adapted.bogus_field = 123
     >>> adapted.bogus_field
diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst
index 950dc37..48e82d4 100644
--- a/plone/behavior/directives.rst
+++ b/plone/behavior/directives.rst
@@ -31,6 +31,7 @@ plone.behavior.tests:
     ...     <include package="plone.behavior" file="meta.zcml" />
     ...
     ...     <plone:behavior
+    ...         name="adapter_behavior"
     ...         title="Adapter behavior"
     ...         description="A basic adapter behavior"
     ...         provides=".tests.IAdapterBehavior"
@@ -38,6 +39,7 @@ plone.behavior.tests:
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="context_restricted_behavior"
     ...         title="Context restricted behavior"
     ...         provides=".tests.IRestrictedAdapterBehavior"
     ...         factory=".tests.RestrictedAdapterBehavior"
@@ -45,23 +47,27 @@ plone.behavior.tests:
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="factory_implied_context_restricted_behavior"
     ...         title="Factory-implied context restricted behavior"
     ...         provides=".tests.IImpliedRestrictionAdapterBehavior"
     ...         factory=".tests.ImpliedRestrictionAdapterBehavior"
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="marker_interface_behavior"
     ...         title="Marker interface behavior"
     ...         provides=".tests.IMarkerBehavior"
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="annotation_storage_behavior"
     ...         title="Annotation storage behavior"
     ...         provides=".tests.IAnnotationStored"
     ...         factory="plone.behavior.AnnotationStorage"
     ...         />
     ...
     ...     <plone:behavior
+    ...         name="marker_and_adapter"
     ...         title="Marker and adapter"
     ...         provides=".tests.IMarkerAndAdapterBehavior"
     ...         factory="plone.behavior.AnnotationStorage"
@@ -95,8 +101,13 @@ With this in place, the behaviors should be registered, e.g:
 
     >>> from plone.behavior.interfaces import IBehavior
     >>> sorted([u for u in sm.registeredUtilities() if u.name == u"plone.behavior.tests.IAdapterBehavior"]) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
-    [UtilityRegistration(..., IBehavior, 'plone.behavior.tests.IAdapterBehavior', <BehaviorRegistration for plone.behavior.tests.IAdapterBehavior>,...),
-     UtilityRegistration(..., IInterface, 'plone.behavior.tests.IAdapterBehavior', IAdapterBehavior,...)]
+    [UtilityRegistration(<BaseGlobalComponents base>, IBehavior, 'plone.behavior.tests.IAdapterBehavior', <BehaviorRegistration adapter_behavior at ...
+      schema: plone.behavior.tests.IAdapterBehavior
+      marker: (no marker is set)
+      factory: <class 'plone.behavior.tests.AdapterBehavior'>
+      title: Adapter behavior
+      A basic adapter behavior
+    >, None, u''), UtilityRegistration(<BaseGlobalComponents base>, IInterface, 'plone.behavior.tests.IAdapterBehavior', IAdapterBehavior, None, '')]
 
     >>> from plone.behavior.tests import IAdapterBehavior
     >>> [a for a in sm.registeredAdapters() if a.provided == IAdapterBehavior]  # doctest: +ELLIPSIS
@@ -111,6 +122,9 @@ Let us test the various utilities and the underlying adapters more carefully.
 for any context.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAdapterBehavior")
+    >>> dummy.name
+    u'adapter_behavior'
+
     >>> dummy.title
     u'Adapter behavior'
 
@@ -133,6 +147,9 @@ for any context.
 2) An adapter behavior with a factory and an explicit context restriction.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRestrictedAdapterBehavior")
+    >>> dummy.name
+    u'context_restricted_behavior'
+
     >>> dummy.title
     u'Context restricted behavior'
 
@@ -156,6 +173,9 @@ for any context.
 declaration on the factory.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IImpliedRestrictionAdapterBehavior")
+    >>> dummy.name
+    u'factory_implied_context_restricted_behavior'
+
     >>> dummy.title
     u'Factory-implied context restricted behavior'
 
@@ -178,6 +198,9 @@ declaration on the factory.
 4) A behavior with a marker marker interface.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerBehavior")
+    >>> dummy.name
+    u'marker_interface_behavior'
+
     >>> dummy.title
     u'Marker interface behavior'
 
@@ -200,6 +223,9 @@ declaration on the factory.
 5) A behavior using the standard annotation factory
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAnnotationStored")
+    >>> dummy.name
+    u'annotation_storage_behavior'
+
     >>> dummy.title
     u'Annotation storage behavior'
 
@@ -222,6 +248,9 @@ declaration on the factory.
 6) A behavior providing a marker interface and using an adapter factory.
 
     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerAndAdapterBehavior")
+    >>> dummy.name
+    u'marker_and_adapter'
+
     >>> dummy.title
     u'Marker and adapter'
 
@@ -240,3 +269,36 @@ declaration on the factory.
     >>> from plone.behavior.tests import IMarkerAndAdapterBehavior
     >>> [a.required for a in sm.registeredAdapters() if a.provided == IMarkerAndAdapterBehavior][0]
     (<InterfaceClass zope.annotation.interfaces.IAnnotatable>,)
+
+Test registration lookup helper utility.
+
+    >>> from plone.behavior.registration import lookup_behavior_registration
+    >>> lookup_behavior_registration()
+    Traceback (most recent call last):
+      ...
+    ValueError: Either ``name`` or ``identifier`` must be given
+
+    >>> lookup_behavior_registration('inexistent')
+    Traceback (most recent call last):
+      ...
+    BehaviorRegistrationNotFound: inexistent
+
+    >>> lookup_behavior_registration('adapter_behavior')  # doctest: +ELLIPSIS
+    <BehaviorRegistration adapter_behavior at ...
+      schema: plone.behavior.tests.IAdapterBehavior
+      marker: (no marker is set)
+      factory: <class 'plone.behavior.tests.AdapterBehavior'>
+      title: Adapter behavior
+      A basic adapter behavior
+    >
+
+    >>> lookup_behavior_registration(
+    ...     identifier='plone.behavior.tests.IAdapterBehavior'
+    ... )  # doctest: +ELLIPSIS
+    <BehaviorRegistration adapter_behavior at ...
+      schema: plone.behavior.tests.IAdapterBehavior
+      marker: (no marker is set)
+      factory: <class 'plone.behavior.tests.AdapterBehavior'>
+      title: Adapter behavior
+      A basic adapter behavior
+    >
diff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py
index 1479c96..5cc56b4 100644
--- a/plone/behavior/metaconfigure.py
+++ b/plone/behavior/metaconfigure.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from plone.behavior import logger
 from plone.behavior.factory import BehaviorAdapterFactory
 from plone.behavior.interfaces import IBehavior
 from plone.behavior.interfaces import ISchemaAwareFactory
@@ -8,17 +9,24 @@
 from zope.configuration import fields as configuration_fields
 from zope.configuration.exceptions import ConfigurationError
 from zope.interface import Interface
-import logging
-
-logger = logging.getLogger(__name__)
+from zope.schema import TextLine
 
 
 class IBehaviorDirective(Interface):
-    """Directive which registers a new behavior type (a global, named
-    utility) and associated behavior adapter factory (a global, unnamed
-    adapter)
+    """Directive which registers a new behavior type.
+
+    The registration consists of:
+
+        * a global named utility registered by interface identifier
+        * a global named utility registered by lookup name
+        * an associated global and unnamed behavior adapter
     """
 
+    name = TextLine(
+        title=u"Name",
+        description=u"Convenience lookup name for this behavior",
+        required=False)
+
     title = configuration_fields.MessageID(
         title=u"Title",
         description=u"A user friendly title for this behavior",
@@ -54,9 +62,8 @@ class IBehaviorDirective(Interface):
         required=False)
 
 
-def behaviorDirective(_context, title, provides, description=None, marker=None,
-                      factory=None, for_=None):
-
+def behaviorDirective(_context, title, provides, name=None, description=None,
+                      marker=None, factory=None, for_=None):
     if marker is None and factory is None:
         marker = provides
 
@@ -76,9 +83,11 @@ def behaviorDirective(_context, title, provides, description=None, marker=None,
         description=description,
         interface=provides,
         marker=marker,
-        factory=factory
+        factory=factory,
+        name=name,
     )
 
+    # behavior registration by provides interface identifier
     utility(
         _context,
         provides=IBehavior,
@@ -86,6 +95,15 @@ def behaviorDirective(_context, title, provides, description=None, marker=None,
         component=registration
     )
 
+    if name is not None:
+        # for convinience we register with a given name
+        utility(
+            _context,
+            provides=IBehavior,
+            name=name,
+            component=registration
+        )
+
     if factory is None:
         if for_ is not None:
             logger.warn(
@@ -102,7 +120,7 @@ def behaviorDirective(_context, title, provides, description=None, marker=None,
         adapts = getattr(factory, '__component_adapts__', None) or [Interface]
         if len(adapts) != 1:
             raise ConfigurationError(
-                u"The factory cannot be declared a multi-adapter."
+                u"The factory can not be declared as multi-adapter."
             )
         for_ = adapts[0]
 
diff --git a/plone/behavior/registration.py b/plone/behavior/registration.py
index 2d7d0d0..8f74a1c 100644
--- a/plone/behavior/registration.py
+++ b/plone/behavior/registration.py
@@ -1,19 +1,75 @@
 # -*- coding: utf-8 -*-
 from plone.behavior.interfaces import IBehavior
 from zope.interface import implementer
+from zope.component import getUtility
+from zope.component import ComponentLookupError
+
+import textwrap
+
+REGISTRATION_REPR = """\
+<{class} {name} at {id}
+  schema: {identifier}
+  marker: {marker}
+  factory: {factory}
+  title: {title}
+  {description}
+>"""
 
 
 @implementer(IBehavior)
 class BehaviorRegistration(object):
 
-    def __init__(self, title, description, interface, marker, factory):
+    def __init__(self, title, description, interface,
+                 marker, factory, name=None):
         self.title = title
         self.description = description
         self.interface = interface
         self.marker = marker
         self.factory = factory
+        self.name = name
 
     def __repr__(self):
-        return "<BehaviorRegistration for {0}>".format(
-            self.interface.__identifier__
-        )
+        if self.marker is not None:
+            marker_info = self.marker.__identifier__
+        elif self.marker is not None and self.marker is not self.interface:
+            marker_info = '(uses schema as marker)'
+        else:
+            marker_info = '(no marker is set)'
+        info = {
+            'class': self.__class__.__name__,
+            'id': id(self),
+            'name': self.name or '(unique name not set)',
+            'identifier': self.interface.__identifier__,
+            'marker': marker_info,
+            'factory': unicode(self.factory),
+            'title': self.title or '(no title)',
+            'description': textwrap.fill(
+                self.description or '(no description)',
+                subsequent_indent='  '
+            )
+        }
+        return REGISTRATION_REPR.format(**info)
+
+
+class BehaviorRegistrationNotFound(Exception):
+    """Exception thrown if behavior registration lookup fails.
+    """
+
+
+def lookup_behavior_registration(name=None, identifier=None):
+    """Lookup behavior registration either by name or interface identifier.
+
+    ``ValueError`` is thrown if function call is incomplete.
+    ``BehaviorRegistrationNotFound`` is thrown if lookup fails.
+    """
+    try:
+        assert(name or identifier)
+    except AssertionError:
+        raise ValueError('Either ``name`` or ``identifier`` must be given')
+    # identifier rules if given
+    if identifier:
+        name = identifier
+    try:
+        return getUtility(IBehavior, name=name)
+    except ComponentLookupError:
+        raise BehaviorRegistrationNotFound(name)
diff --git a/setup.py b/setup.py
index 222afc0..3a31f5b 100644
--- a/setup.py
+++ b/setup.py
@@ -25,7 +25,7 @@
     keywords='Plone behavior registry',
     author='Martin Aspeli',
     author_email='optilude@gmail.com',
-    url='http://code.google.com/p/dexterity',
+    url='http://pypi.python.org/pypi/plone.dexterity',
     license='BSD',
     packages=find_packages(exclude=['ez_setup']),
     namespace_packages=['plone'],
@@ -33,11 +33,11 @@
     zip_safe=False,
     install_requires=[
         'setuptools',
+        'zope.annotation',
         'zope.component',
+        'zope.configuration',
         'zope.interface',
         'zope.schema',
-        'zope.annotation',
-        'zope.configuration',
     ],
     extras_require={
         'test': [],


