Repository: plone.app.users


Branch: refs/heads/master
Date: 2015-07-27T16:18:27+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.users/commit/58b8a9405484cc7303494af825f9421983c005b7

cache schemas in volatile attributes of portal

Files changed:
M plone/app/users/browser/register.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py

diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index 68bbd76..fc8aa8d 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -26,15 +26,15 @@
     getAdapter,
     provideAdapter,
     getMultiAdapter)
-from zope.interface import Interface
+from zope.component.hooks import getSite
 from zope.schema import getFieldNames
 import logging
 
 from ..schema import (
     IRegisterSchema,
     IAddUserSchema,
-    ICombinedRegisterSchema,
-    IUserDataSchema)
+    ICombinedRegisterSchema
+)
 from ..utils import (
     notifyWidgetActionExecutionError,
     uuid_userid_generator,
@@ -50,13 +50,16 @@
 
 
 def getRegisterSchema():
-    schema = getFromBaseSchema(
-        ICombinedRegisterSchema,
-        form_name=u'On Registration'
-    )
-    # as schema is a generated supermodel,
-    # needed adapters can only be registered at run time
-    provideAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)
+    portal = getSite()
+    schema = getattr(portal, '_v_register_schema', None)
+    if schema is None:
+        portal._v_register_schema = schema = getFromBaseSchema(
+            ICombinedRegisterSchema,
+            form_name=u'On Registration'
+        )
+        # as schema is a generated supermodel,
+        # needed adapters can only be registered at run time
+        provideAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)
     return schema
 
 
diff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py
index 66c3e80..249726a 100644
--- a/plone/app/users/browser/schemaeditor.py
+++ b/plone/app/users/browser/schemaeditor.py
@@ -1,13 +1,14 @@
 import copy
 import re
 import logging
-import hashlib
 
+from zope.component import getGlobalSiteManager
 from zope.component.hooks import getSite
 from zope.annotation.interfaces import IAnnotations
 from zope.interface import Interface, implements
 
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
@@ -28,7 +29,6 @@
     SCHEMATA_KEY,
 )
 
-CACHE_CONTAINER = {}
 USERS_NAMESPACE = 'http://namespaces.plone.org/supermodel/users'
 USERS_PREFIX = 'users'
 SPLITTER = '_//_'
@@ -118,7 +118,6 @@ def updateSchema(object, event):
 
 
 def applySchema(snew_schema):
-    CACHE_CONTAINER.clear()
     site = getSite()
 
     # get the old schema (currently stored in the annotation)
@@ -169,17 +168,9 @@ def applySchema(snew_schema):
                 continue
             pm._delProperty(field_id)
 
-
-def model_key(*a, **kw):
-    site = getSite()
-    psite = '/'.join(site.getPhysicalPath())
-    annotations = IAnnotations(site)
-    schema = annotations.get(SCHEMA_ANNOTATION, '')
-    key = hashlib.sha224(schema).hexdigest()
-    return (psite, key)
+    invalidateSchemasInCache(site)
 
 
-# @ram.cache(model_key)
 def get_ttw_edited_schema():
     data = get_schema()
     if data:
@@ -298,15 +289,34 @@ def set_schema(string, site=None):
     annotations[SCHEMA_ANNOTATION] = string
 
 
-def cache_storage(fun, *args, **kwargs):
-    return CACHE_CONTAINER
+def invalidateSchemasInCache(portal):
 
+    gsm = getGlobalSiteManager()
+
+    schema = getattr(portal, '_v_register_schema', None)
+    if schema is not None:
+        from .account import AccountPanelSchemaAdapter
+        gsm.unregisterAdapter(
+            AccountPanelSchemaAdapter,
+            (IPloneSiteRoot,),
+            schema
+        )
+    portal._v_register_schema = None
+
+    schema = getattr(portal, '_v_userdata_schema', None)
+    if schema is not None:
+        from .userdatapanel import UserDataPanelAdapter
+        gsm.unregisterAdapter(
+            UserDataPanelAdapter,
+            (IPloneSiteRoot,),
+            schema
+        )
+    portal._v_userdata_schema = None
 
-def cache_key(fun, *args, **kw):
-    return "%s-%s" % (model_key(), args)
+    # kill volatile attributes in all threads
+    portal._p_changed = 1
 
 
-# @volatile.cache(cache_key, cache_storage)
 def getFromBaseSchema(baseSchema, form_name=None):
     attrs = copySchemaAttrs(baseSchema, form_name)
     ttwschema = get_ttw_edited_schema()
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index 1978aab..6645dbe 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from zope.component import getUtility
 from zope.component import provideAdapter
+from zope.component.hooks import getSite
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
@@ -76,13 +77,16 @@ def __call__(self):
 
 
 def getUserDataSchema():
-    schema = getFromBaseSchema(
-        IUserDataSchema,
-        form_name=u'In User Profile'
-    )
-    # as schema is a generated supermodel,
-    # needed adapters can only be registered at run time
-    provideAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)
+    portal = getSite()
+    schema = getattr(portal, '_v_userdata_schema', None)
+    if schema is None:
+        portal._v_userdata_schema = schema = getFromBaseSchema(
+            IUserDataSchema,
+            form_name=u'In User Profile'
+        )
+        # as schema is a generated supermodel,
+        # needed adapters can only be registered at run time
+        provideAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)
     return schema
 
 


Repository: plone.app.users


Branch: refs/heads/master
Date: 2015-07-27T17:34:17+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.users/commit/3cf608d2a31957ae9004d55706f31143a069614c

Merge pull request #48 from plone/gotcha-proper-caching

cache schemas in volatile attributes on portal

Files changed:
M plone/app/users/browser/register.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py

diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index 68bbd76..fc8aa8d 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -26,15 +26,15 @@
     getAdapter,
     provideAdapter,
     getMultiAdapter)
-from zope.interface import Interface
+from zope.component.hooks import getSite
 from zope.schema import getFieldNames
 import logging
 
 from ..schema import (
     IRegisterSchema,
     IAddUserSchema,
-    ICombinedRegisterSchema,
-    IUserDataSchema)
+    ICombinedRegisterSchema
+)
 from ..utils import (
     notifyWidgetActionExecutionError,
     uuid_userid_generator,
@@ -50,13 +50,16 @@
 
 
 def getRegisterSchema():
-    schema = getFromBaseSchema(
-        ICombinedRegisterSchema,
-        form_name=u'On Registration'
-    )
-    # as schema is a generated supermodel,
-    # needed adapters can only be registered at run time
-    provideAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)
+    portal = getSite()
+    schema = getattr(portal, '_v_register_schema', None)
+    if schema is None:
+        portal._v_register_schema = schema = getFromBaseSchema(
+            ICombinedRegisterSchema,
+            form_name=u'On Registration'
+        )
+        # as schema is a generated supermodel,
+        # needed adapters can only be registered at run time
+        provideAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)
     return schema
 
 
diff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py
index 66c3e80..249726a 100644
--- a/plone/app/users/browser/schemaeditor.py
+++ b/plone/app/users/browser/schemaeditor.py
@@ -1,13 +1,14 @@
 import copy
 import re
 import logging
-import hashlib
 
+from zope.component import getGlobalSiteManager
 from zope.component.hooks import getSite
 from zope.annotation.interfaces import IAnnotations
 from zope.interface import Interface, implements
 
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
@@ -28,7 +29,6 @@
     SCHEMATA_KEY,
 )
 
-CACHE_CONTAINER = {}
 USERS_NAMESPACE = 'http://namespaces.plone.org/supermodel/users'
 USERS_PREFIX = 'users'
 SPLITTER = '_//_'
@@ -118,7 +118,6 @@ def updateSchema(object, event):
 
 
 def applySchema(snew_schema):
-    CACHE_CONTAINER.clear()
     site = getSite()
 
     # get the old schema (currently stored in the annotation)
@@ -169,17 +168,9 @@ def applySchema(snew_schema):
                 continue
             pm._delProperty(field_id)
 
-
-def model_key(*a, **kw):
-    site = getSite()
-    psite = '/'.join(site.getPhysicalPath())
-    annotations = IAnnotations(site)
-    schema = annotations.get(SCHEMA_ANNOTATION, '')
-    key = hashlib.sha224(schema).hexdigest()
-    return (psite, key)
+    invalidateSchemasInCache(site)
 
 
-# @ram.cache(model_key)
 def get_ttw_edited_schema():
     data = get_schema()
     if data:
@@ -298,15 +289,34 @@ def set_schema(string, site=None):
     annotations[SCHEMA_ANNOTATION] = string
 
 
-def cache_storage(fun, *args, **kwargs):
-    return CACHE_CONTAINER
+def invalidateSchemasInCache(portal):
 
+    gsm = getGlobalSiteManager()
+
+    schema = getattr(portal, '_v_register_schema', None)
+    if schema is not None:
+        from .account import AccountPanelSchemaAdapter
+        gsm.unregisterAdapter(
+            AccountPanelSchemaAdapter,
+            (IPloneSiteRoot,),
+            schema
+        )
+    portal._v_register_schema = None
+
+    schema = getattr(portal, '_v_userdata_schema', None)
+    if schema is not None:
+        from .userdatapanel import UserDataPanelAdapter
+        gsm.unregisterAdapter(
+            UserDataPanelAdapter,
+            (IPloneSiteRoot,),
+            schema
+        )
+    portal._v_userdata_schema = None
 
-def cache_key(fun, *args, **kw):
-    return "%s-%s" % (model_key(), args)
+    # kill volatile attributes in all threads
+    portal._p_changed = 1
 
 
-# @volatile.cache(cache_key, cache_storage)
 def getFromBaseSchema(baseSchema, form_name=None):
     attrs = copySchemaAttrs(baseSchema, form_name)
     ttwschema = get_ttw_edited_schema()
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index 1978aab..6645dbe 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from zope.component import getUtility
 from zope.component import provideAdapter
+from zope.component.hooks import getSite
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
@@ -76,13 +77,16 @@ def __call__(self):
 
 
 def getUserDataSchema():
-    schema = getFromBaseSchema(
-        IUserDataSchema,
-        form_name=u'In User Profile'
-    )
-    # as schema is a generated supermodel,
-    # needed adapters can only be registered at run time
-    provideAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)
+    portal = getSite()
+    schema = getattr(portal, '_v_userdata_schema', None)
+    if schema is None:
+        portal._v_userdata_schema = schema = getFromBaseSchema(
+            IUserDataSchema,
+            form_name=u'In User Profile'
+        )
+        # as schema is a generated supermodel,
+        # needed adapters can only be registered at run time
+        provideAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)
     return schema
 
 


