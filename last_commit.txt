Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-04-10T01:30:08+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/3c4b79c6118e012609d30f07c68bcac0b4682501

ImageScalingViewFactory, occurrence and leadimage view troubls

Files changed:
A plone/app/event/browser/leadimage_viewlet.py
M CHANGES.rst
M plone/app/event/browser/configure.zcml
M plone/app/event/recurrence.py
M plone/app/event/tests/test_recurrence.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6cecf3d..d5f3d6b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 2.0a9 (unreleased)
 ------------------
 
+- Fix ``ImageScalingViewFactory`` and add a custom ILeadImage viewlet for
+  Occurrences. Fixes the display of ILeadImage images from the originating
+  event in event views of occurrences by delegating to the parent object.
+  [thet]
+
 - Fix Plone 4.3 BBB z3c.form portlets to show their fields in Add/Edit Forms.
   [thet]
 
diff --git a/plone/app/event/browser/configure.zcml b/plone/app/event/browser/configure.zcml
index 2c5c72d..391bf79 100644
--- a/plone/app/event/browser/configure.zcml
+++ b/plone/app/event/browser/configure.zcml
@@ -1,6 +1,7 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser"
+    xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone.app.event">
 
     <browser:resourceDirectory
@@ -78,6 +79,19 @@
         layer="..interfaces.IBrowserLayer"
         />
 
+    <configure
+        zcml:condition="installed plone.app.contenttypes"
+        package="plone.app.contenttypes.behaviors">
+      <browser:viewlet
+          name="contentleadimage"
+          for="plone.event.interfaces.IOccurrence"
+          class="plone.app.event.browser.leadimage_viewlet.LeadImageViewlet"
+          manager="plone.app.layout.viewlets.interfaces.IAboveContentTitle"
+          template="leadimage.pt"
+          permission="zope2.View"
+          />
+    </configure>
+
     <adapter
         name="formatted_date"
         provides="zope.contentprovider.interfaces.IContentProvider"
diff --git a/plone/app/event/browser/leadimage_viewlet.py b/plone/app/event/browser/leadimage_viewlet.py
new file mode 100644
index 0000000..f4349ff
--- /dev/null
+++ b/plone/app/event/browser/leadimage_viewlet.py
@@ -0,0 +1,13 @@
+from Acquisition import aq_parent
+from plone.app.contenttypes.behaviors.leadimage import ILeadImage
+from plone.app.layout.viewlets import ViewletBase
+
+
+class LeadImageViewlet(ViewletBase):
+    """plone.app.contenttypes LeadImageViewlet for Occurrence contexts, where
+    the image might be defined on the parent object.
+    """
+    def update(self):
+        parent = aq_parent(self.context)
+        self.available = ILeadImage.providedBy(parent) and\
+            True if getattr(parent, 'image', False) else False
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index 0c4e6e2..69b7dc4 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -9,9 +9,9 @@
 from plone.event.interfaces import IRecurrenceSupport
 from plone.event.recurrence import recurrence_sequence_ical
 from plone.event.utils import is_same_day
-from plone.namedfile.scaling import ImageScale as DXImageScaling
+from plone.namedfile.interfaces import IImageScaleTraversable
+from plone.namedfile.scaling import ImageScaling
 from zope.component import adapter
-from zope.interface import Interface
 from zope.interface import implementer
 from zope.publisher.interfaces.browser import IBrowserRequest
 
@@ -20,22 +20,6 @@
 except ImportError:
     from ZPublisher.BaseRequest import DefaultPublishTraverse
 
-try:
-    from plone.app.event.at.interfaces import IATEvent
-except ImportError:
-    class IATEvent(Interface):
-        pass
-try:
-    from plone.app.event.dx.interfaces import IDXEvent
-except ImportError:
-    class IDXEvent(Interface):
-        pass
-
-try:
-    from plone.app.imaging.scaling import ImageScaling as ATImageScaling
-except ImportError:
-    pass
-
 
 @adapter(IEventRecurrence)
 @implementer(IRecurrenceSupport)
@@ -174,13 +158,11 @@ def url(self):
 
 
 class ImageScalingViewFactory(BrowserView):
-    """Factory for ImageScaling view for occurrences.
-    Delegates to AT or DX specific view and rebinds to the parent context.
+    """Factory for ImageScaling view for Occurrences.
+    Delegates to parent @@images view.
     """
     def __new__(cls, context, request):
         parent = aq_parent(context)
-        if IATEvent.providedBy(parent):
-            return ATImageScaling(parent, request)
-        elif IDXEvent.providedBy(parent):
-            return DXImageScaling(parent, request)
+        if IImageScaleTraversable.providedBy(parent):
+            return ImageScaling(parent, request)
         return None
diff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py
index a39ef9f..75d7e12 100644
--- a/plone/app/event/tests/test_recurrence.py
+++ b/plone/app/event/tests/test_recurrence.py
@@ -1,7 +1,7 @@
 from OFS.SimpleItem import SimpleItem
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import get_events
-from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX
+from plone.app.event.dx.traverser import OccurrenceTraverser
 from plone.app.event.recurrence import Occurrence
 from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING
 from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING
@@ -13,15 +13,17 @@
 from plone.app.event.tests.base_setup import patched_now
 from plone.app.testing import TEST_USER_ID, TEST_USER_PASSWORD
 from plone.app.testing import setRoles
+from plone.dexterity.utils import createContentInContainer
 from plone.event.interfaces import IEvent
 from plone.event.interfaces import IEventAccessor
 from plone.event.interfaces import IEventRecurrence
 from plone.event.interfaces import IOccurrence
 from plone.event.interfaces import IRecurrenceSupport
-from plone.dexterity.utils import createContentInContainer
+from plone.namedfile.interfaces import IImageScaleTraversable
 from plone.testing.z2 import Browser
+from zope.interface import alsoProvides
 from zope.publisher.interfaces.browser import IBrowserView
-
+from mock import Mock
 
 import datetime
 import pytz
@@ -39,17 +41,19 @@ class TestTraversalDX(AbstractSampleDataEvents):
     layer = PAEventDX_FUNCTIONAL_TESTING
 
     @property
-    def traverser(self):
-        return OccTravDX(self.now_event, self.request)
+    def occ_traverser_1(self):
+        return OccurrenceTraverser(self.now_event, self.request)
 
     def test_no_occurrence(self):
         self.assertRaises(
             AttributeError,
-            self.traverser.publishTraverse,
-            self.request, 'foo')
+            self.occ_traverser_1.publishTraverse,
+            self.request,
+            'foo'
+        )
 
     def test_default_views(self):
-        view = self.traverser.publishTraverse(self.request, 'event_view')
+        view = self.occ_traverser_1.publishTraverse(self.request, 'event_view')
         self.assertTrue(IBrowserView.providedBy(view))
 
     def test_occurrence(self):
@@ -59,11 +63,11 @@ def test_occurrence(self):
         # Try to traverse to inexistent occurrence
         self.assertRaises(
             AttributeError,
-            self.traverser.publishTraverse,
+            self.occ_traverser_1.publishTraverse,
             self.request, '2000-01-01')
 
         # Traverse to existent occurrence
-        item = self.traverser.publishTraverse(self.request, '2013-05-07')
+        item = self.occ_traverser_1.publishTraverse(self.request, '2013-05-07')
         self.assertTrue(IOccurrence.providedBy(item))
         self.assertEqual(type(self.now_event), type(item.aq_parent))
 
@@ -95,6 +99,14 @@ def test_traverse_occurrence(self):
         title = self.now_event.title.encode('ascii')
         self.assertTrue(title in browser.contents)
 
+    def test_traverse_occurrence_imagescaling(self):
+        self.now_event.image = Mock()
+        occurrence = self.occ_traverser_1.publishTraverse(
+            self.request, '2013-05-07'
+        )
+        image_view = occurrence.restrictedTraverse('@@images')
+        self.assertEqual(image_view.context, self.now_event)
+
 
 class TestOccurrences(unittest.TestCase):
     layer = PAEventDX_INTEGRATION_TESTING
@@ -190,7 +202,7 @@ def setUp(self):
         data.start = datetime.datetime(2011, 11, 11, 11, 00, tzinfo=tz)
         data.end = data.start + duration
         data.recurrence = 'RRULE:FREQ=DAILY;COUNT=4'
-        zope.interface.alsoProvides(data, IEvent, IEventRecurrence)
+        alsoProvides(data, IEvent, IEventRecurrence)
         self.data = data
 
     def test_recurrence_occurrences(self):


Repository: plone.app.event
Branch: refs/heads/master
Date: 2015-04-10T01:32:04+02:00
Author: Johannes Raggam (thet) <raggam-nl@adm.at>
Commit: https://github.com/plone/plone.app.event/commit/89b56a21470c8d26ac682f63ef687fda54e645ea

Merge pull request #177 from plone/thet-imagescaletraverse

ImageScalingViewFactory and ILeadImage viewlet customization for Occurrences

Files changed:
A plone/app/event/browser/leadimage_viewlet.py
M CHANGES.rst
M plone/app/event/browser/configure.zcml
M plone/app/event/recurrence.py
M plone/app/event/tests/test_recurrence.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6cecf3d..d5f3d6b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,6 +4,11 @@ Changelog
 2.0a9 (unreleased)
 ------------------
 
+- Fix ``ImageScalingViewFactory`` and add a custom ILeadImage viewlet for
+  Occurrences. Fixes the display of ILeadImage images from the originating
+  event in event views of occurrences by delegating to the parent object.
+  [thet]
+
 - Fix Plone 4.3 BBB z3c.form portlets to show their fields in Add/Edit Forms.
   [thet]
 
diff --git a/plone/app/event/browser/configure.zcml b/plone/app/event/browser/configure.zcml
index 2c5c72d..391bf79 100644
--- a/plone/app/event/browser/configure.zcml
+++ b/plone/app/event/browser/configure.zcml
@@ -1,6 +1,7 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser"
+    xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone.app.event">
 
     <browser:resourceDirectory
@@ -78,6 +79,19 @@
         layer="..interfaces.IBrowserLayer"
         />
 
+    <configure
+        zcml:condition="installed plone.app.contenttypes"
+        package="plone.app.contenttypes.behaviors">
+      <browser:viewlet
+          name="contentleadimage"
+          for="plone.event.interfaces.IOccurrence"
+          class="plone.app.event.browser.leadimage_viewlet.LeadImageViewlet"
+          manager="plone.app.layout.viewlets.interfaces.IAboveContentTitle"
+          template="leadimage.pt"
+          permission="zope2.View"
+          />
+    </configure>
+
     <adapter
         name="formatted_date"
         provides="zope.contentprovider.interfaces.IContentProvider"
diff --git a/plone/app/event/browser/leadimage_viewlet.py b/plone/app/event/browser/leadimage_viewlet.py
new file mode 100644
index 0000000..f4349ff
--- /dev/null
+++ b/plone/app/event/browser/leadimage_viewlet.py
@@ -0,0 +1,13 @@
+from Acquisition import aq_parent
+from plone.app.contenttypes.behaviors.leadimage import ILeadImage
+from plone.app.layout.viewlets import ViewletBase
+
+
+class LeadImageViewlet(ViewletBase):
+    """plone.app.contenttypes LeadImageViewlet for Occurrence contexts, where
+    the image might be defined on the parent object.
+    """
+    def update(self):
+        parent = aq_parent(self.context)
+        self.available = ILeadImage.providedBy(parent) and\
+            True if getattr(parent, 'image', False) else False
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index 0c4e6e2..69b7dc4 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -9,9 +9,9 @@
 from plone.event.interfaces import IRecurrenceSupport
 from plone.event.recurrence import recurrence_sequence_ical
 from plone.event.utils import is_same_day
-from plone.namedfile.scaling import ImageScale as DXImageScaling
+from plone.namedfile.interfaces import IImageScaleTraversable
+from plone.namedfile.scaling import ImageScaling
 from zope.component import adapter
-from zope.interface import Interface
 from zope.interface import implementer
 from zope.publisher.interfaces.browser import IBrowserRequest
 
@@ -20,22 +20,6 @@
 except ImportError:
     from ZPublisher.BaseRequest import DefaultPublishTraverse
 
-try:
-    from plone.app.event.at.interfaces import IATEvent
-except ImportError:
-    class IATEvent(Interface):
-        pass
-try:
-    from plone.app.event.dx.interfaces import IDXEvent
-except ImportError:
-    class IDXEvent(Interface):
-        pass
-
-try:
-    from plone.app.imaging.scaling import ImageScaling as ATImageScaling
-except ImportError:
-    pass
-
 
 @adapter(IEventRecurrence)
 @implementer(IRecurrenceSupport)
@@ -174,13 +158,11 @@ def url(self):
 
 
 class ImageScalingViewFactory(BrowserView):
-    """Factory for ImageScaling view for occurrences.
-    Delegates to AT or DX specific view and rebinds to the parent context.
+    """Factory for ImageScaling view for Occurrences.
+    Delegates to parent @@images view.
     """
     def __new__(cls, context, request):
         parent = aq_parent(context)
-        if IATEvent.providedBy(parent):
-            return ATImageScaling(parent, request)
-        elif IDXEvent.providedBy(parent):
-            return DXImageScaling(parent, request)
+        if IImageScaleTraversable.providedBy(parent):
+            return ImageScaling(parent, request)
         return None
diff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py
index a39ef9f..75d7e12 100644
--- a/plone/app/event/tests/test_recurrence.py
+++ b/plone/app/event/tests/test_recurrence.py
@@ -1,7 +1,7 @@
 from OFS.SimpleItem import SimpleItem
 from plone.app.event.base import RET_MODE_ACCESSORS
 from plone.app.event.base import get_events
-from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX
+from plone.app.event.dx.traverser import OccurrenceTraverser
 from plone.app.event.recurrence import Occurrence
 from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING
 from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING
@@ -13,15 +13,17 @@
 from plone.app.event.tests.base_setup import patched_now
 from plone.app.testing import TEST_USER_ID, TEST_USER_PASSWORD
 from plone.app.testing import setRoles
+from plone.dexterity.utils import createContentInContainer
 from plone.event.interfaces import IEvent
 from plone.event.interfaces import IEventAccessor
 from plone.event.interfaces import IEventRecurrence
 from plone.event.interfaces import IOccurrence
 from plone.event.interfaces import IRecurrenceSupport
-from plone.dexterity.utils import createContentInContainer
+from plone.namedfile.interfaces import IImageScaleTraversable
 from plone.testing.z2 import Browser
+from zope.interface import alsoProvides
 from zope.publisher.interfaces.browser import IBrowserView
-
+from mock import Mock
 
 import datetime
 import pytz
@@ -39,17 +41,19 @@ class TestTraversalDX(AbstractSampleDataEvents):
     layer = PAEventDX_FUNCTIONAL_TESTING
 
     @property
-    def traverser(self):
-        return OccTravDX(self.now_event, self.request)
+    def occ_traverser_1(self):
+        return OccurrenceTraverser(self.now_event, self.request)
 
     def test_no_occurrence(self):
         self.assertRaises(
             AttributeError,
-            self.traverser.publishTraverse,
-            self.request, 'foo')
+            self.occ_traverser_1.publishTraverse,
+            self.request,
+            'foo'
+        )
 
     def test_default_views(self):
-        view = self.traverser.publishTraverse(self.request, 'event_view')
+        view = self.occ_traverser_1.publishTraverse(self.request, 'event_view')
         self.assertTrue(IBrowserView.providedBy(view))
 
     def test_occurrence(self):
@@ -59,11 +63,11 @@ def test_occurrence(self):
         # Try to traverse to inexistent occurrence
         self.assertRaises(
             AttributeError,
-            self.traverser.publishTraverse,
+            self.occ_traverser_1.publishTraverse,
             self.request, '2000-01-01')
 
         # Traverse to existent occurrence
-        item = self.traverser.publishTraverse(self.request, '2013-05-07')
+        item = self.occ_traverser_1.publishTraverse(self.request, '2013-05-07')
         self.assertTrue(IOccurrence.providedBy(item))
         self.assertEqual(type(self.now_event), type(item.aq_parent))
 
@@ -95,6 +99,14 @@ def test_traverse_occurrence(self):
         title = self.now_event.title.encode('ascii')
         self.assertTrue(title in browser.contents)
 
+    def test_traverse_occurrence_imagescaling(self):
+        self.now_event.image = Mock()
+        occurrence = self.occ_traverser_1.publishTraverse(
+            self.request, '2013-05-07'
+        )
+        image_view = occurrence.restrictedTraverse('@@images')
+        self.assertEqual(image_view.context, self.now_event)
+
 
 class TestOccurrences(unittest.TestCase):
     layer = PAEventDX_INTEGRATION_TESTING
@@ -190,7 +202,7 @@ def setUp(self):
         data.start = datetime.datetime(2011, 11, 11, 11, 00, tzinfo=tz)
         data.end = data.start + duration
         data.recurrence = 'RRULE:FREQ=DAILY;COUNT=4'
-        zope.interface.alsoProvides(data, IEvent, IEventRecurrence)
+        alsoProvides(data, IEvent, IEventRecurrence)
         self.data = data
 
     def test_recurrence_occurrences(self):


